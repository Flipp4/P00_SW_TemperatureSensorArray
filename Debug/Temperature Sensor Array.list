
Temperature Sensor Array.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c208  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800c3a0  0800c3a0  0001c3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c418  0800c418  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  0800c418  0800c418  0001c418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c420  0800c420  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c420  0800c420  0001c420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c424  0800c424  0001c424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800c428  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002040  20000180  0800c5a8  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  200021c0  0800c5a8  000221c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029553  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050d2  00000000  00000000  00049703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bf0  00000000  00000000  0004e7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a10  00000000  00000000  000503c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e59a  00000000  00000000  00051dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025233  00000000  00000000  00070372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a077d  00000000  00000000  000955a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00135d22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074ec  00000000  00000000  00135d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000180 	.word	0x20000180
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800c388 	.word	0x0800c388

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000184 	.word	0x20000184
 80001d4:	0800c388 	.word	0x0800c388

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <OperateLED_A>:
#include "BSP.h"
#include "main.h"


void OperateLED_A (LEDState_t eState)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
	if(eState == eLED_On)
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d105      	bne.n	80004ec <OperateLED_A+0x1c>
	{
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2101      	movs	r1, #1
 80004e4:	4807      	ldr	r0, [pc, #28]	; (8000504 <OperateLED_A+0x34>)
 80004e6:	f000 ff65 	bl	80013b4 <HAL_GPIO_WritePin>
	}
	else if(eState == eLED_Off)
	{
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
	}
}
 80004ea:	e007      	b.n	80004fc <OperateLED_A+0x2c>
	else if(eState == eLED_Off)
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d104      	bne.n	80004fc <OperateLED_A+0x2c>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2101      	movs	r1, #1
 80004f6:	4803      	ldr	r0, [pc, #12]	; (8000504 <OperateLED_A+0x34>)
 80004f8:	f000 ff5c 	bl	80013b4 <HAL_GPIO_WritePin>
}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40020800 	.word	0x40020800

08000508 <ToggleLED_B>:
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
	}
}

void ToggleLED_B()
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800050c:	2102      	movs	r1, #2
 800050e:	4802      	ldr	r0, [pc, #8]	; (8000518 <ToggleLED_B+0x10>)
 8000510:	f000 ff69 	bl	80013e6 <HAL_GPIO_TogglePin>
}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40020800 	.word	0x40020800

0800051c <ToggleLED_D>:

void ToggleLED_D()
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000520:	2108      	movs	r1, #8
 8000522:	4802      	ldr	r0, [pc, #8]	; (800052c <ToggleLED_D+0x10>)
 8000524:	f000 ff5f 	bl	80013e6 <HAL_GPIO_TogglePin>
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40020800 	.word	0x40020800

08000530 <OperateSensorPower_A>:

void OperateSensorPower_A (SensorState_t eState)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
	if(eState == eSensor_On)
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d106      	bne.n	800054e <OperateSensorPower_A+0x1e>
	{
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000546:	4808      	ldr	r0, [pc, #32]	; (8000568 <OperateSensorPower_A+0x38>)
 8000548:	f000 ff34 	bl	80013b4 <HAL_GPIO_WritePin>
	}
	else if(eState == eSensor_Off)
	{
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_SET);
	}
}
 800054c:	e008      	b.n	8000560 <OperateSensorPower_A+0x30>
	else if(eState == eSensor_Off)
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d105      	bne.n	8000560 <OperateSensorPower_A+0x30>
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_SET);
 8000554:	2201      	movs	r2, #1
 8000556:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800055a:	4803      	ldr	r0, [pc, #12]	; (8000568 <OperateSensorPower_A+0x38>)
 800055c:	f000 ff2a 	bl	80013b4 <HAL_GPIO_WritePin>
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40020800 	.word	0x40020800

0800056c <OperateSensorPower_B>:
void OperateSensorPower_B (SensorState_t eState)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
	if(eState == eSensor_On)
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d106      	bne.n	800058a <OperateSensorPower_B+0x1e>
	{
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000582:	4808      	ldr	r0, [pc, #32]	; (80005a4 <OperateSensorPower_B+0x38>)
 8000584:	f000 ff16 	bl	80013b4 <HAL_GPIO_WritePin>
	}
	else if(eState == eSensor_Off)
	{
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_SET);
	}
}
 8000588:	e008      	b.n	800059c <OperateSensorPower_B+0x30>
	else if(eState == eSensor_Off)
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d105      	bne.n	800059c <OperateSensorPower_B+0x30>
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000596:	4803      	ldr	r0, [pc, #12]	; (80005a4 <OperateSensorPower_B+0x38>)
 8000598:	f000 ff0c 	bl	80013b4 <HAL_GPIO_WritePin>
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40020800 	.word	0x40020800

080005a8 <TurnAllSensorOn>:

void TurnAllSensorOn()
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	OperateSensorPower_A(eSensor_On);
 80005ac:	2000      	movs	r0, #0
 80005ae:	f7ff ffbf 	bl	8000530 <OperateSensorPower_A>
	OperateSensorPower_B(eSensor_On);
 80005b2:	2000      	movs	r0, #0
 80005b4:	f7ff ffda 	bl	800056c <OperateSensorPower_B>
}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}

080005bc <SensorArray_Init>:
	0x0C,
	0x0E
};

void SensorArray_Init(I2C_HandleTypeDef *hI2CA, I2C_HandleTypeDef *hI2CB)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
	for(uint8_t u8Idx = 0; u8Idx < MCP9808_I2CA_DeviceCount; u8Idx++)
 80005c6:	2300      	movs	r3, #0
 80005c8:	73fb      	strb	r3, [r7, #15]
 80005ca:	e024      	b.n	8000616 <SensorArray_Init+0x5a>
	{
		kaSensorArrayDataA[u8Idx].hTranscieverHandle = hI2CA;
 80005cc:	7bfa      	ldrb	r2, [r7, #15]
 80005ce:	492c      	ldr	r1, [pc, #176]	; (8000680 <SensorArray_Init+0xc4>)
 80005d0:	4613      	mov	r3, r2
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	4413      	add	r3, r2
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	440b      	add	r3, r1
 80005da:	3304      	adds	r3, #4
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	601a      	str	r2, [r3, #0]
		kaSensorArrayDataA[u8Idx].u8Address = ((MCP9808_AddresLowerNibble << 4) + u8DeviceAddressListA[u8Idx]);
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	4a28      	ldr	r2, [pc, #160]	; (8000684 <SensorArray_Init+0xc8>)
 80005e4:	5cd3      	ldrb	r3, [r2, r3]
 80005e6:	7bfa      	ldrb	r2, [r7, #15]
 80005e8:	3330      	adds	r3, #48	; 0x30
 80005ea:	b2d8      	uxtb	r0, r3
 80005ec:	4924      	ldr	r1, [pc, #144]	; (8000680 <SensorArray_Init+0xc4>)
 80005ee:	4613      	mov	r3, r2
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	4413      	add	r3, r2
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	440b      	add	r3, r1
 80005f8:	3301      	adds	r3, #1
 80005fa:	4602      	mov	r2, r0
 80005fc:	701a      	strb	r2, [r3, #0]
		kaSensorArrayDataA[u8Idx].bEnabled = true;
 80005fe:	7bfa      	ldrb	r2, [r7, #15]
 8000600:	491f      	ldr	r1, [pc, #124]	; (8000680 <SensorArray_Init+0xc4>)
 8000602:	4613      	mov	r3, r2
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	4413      	add	r3, r2
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	440b      	add	r3, r1
 800060c:	2201      	movs	r2, #1
 800060e:	701a      	strb	r2, [r3, #0]
	for(uint8_t u8Idx = 0; u8Idx < MCP9808_I2CA_DeviceCount; u8Idx++)
 8000610:	7bfb      	ldrb	r3, [r7, #15]
 8000612:	3301      	adds	r3, #1
 8000614:	73fb      	strb	r3, [r7, #15]
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	2b04      	cmp	r3, #4
 800061a:	d9d7      	bls.n	80005cc <SensorArray_Init+0x10>
	}
	for(uint8_t u8Idx = 0; u8Idx < MCP9808_I2CB_DeviceCount; u8Idx++)
 800061c:	2300      	movs	r3, #0
 800061e:	73bb      	strb	r3, [r7, #14]
 8000620:	e024      	b.n	800066c <SensorArray_Init+0xb0>
	{
		kaSensorArrayDataB[u8Idx].hTranscieverHandle = hI2CB;
 8000622:	7bba      	ldrb	r2, [r7, #14]
 8000624:	4918      	ldr	r1, [pc, #96]	; (8000688 <SensorArray_Init+0xcc>)
 8000626:	4613      	mov	r3, r2
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	4413      	add	r3, r2
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	440b      	add	r3, r1
 8000630:	3304      	adds	r3, #4
 8000632:	683a      	ldr	r2, [r7, #0]
 8000634:	601a      	str	r2, [r3, #0]
		kaSensorArrayDataB[u8Idx].u8Address = ((MCP9808_AddresLowerNibble << 4) + u8DeviceAddressListB[u8Idx]);
 8000636:	7bbb      	ldrb	r3, [r7, #14]
 8000638:	4a14      	ldr	r2, [pc, #80]	; (800068c <SensorArray_Init+0xd0>)
 800063a:	5cd3      	ldrb	r3, [r2, r3]
 800063c:	7bba      	ldrb	r2, [r7, #14]
 800063e:	3330      	adds	r3, #48	; 0x30
 8000640:	b2d8      	uxtb	r0, r3
 8000642:	4911      	ldr	r1, [pc, #68]	; (8000688 <SensorArray_Init+0xcc>)
 8000644:	4613      	mov	r3, r2
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	4413      	add	r3, r2
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	440b      	add	r3, r1
 800064e:	3301      	adds	r3, #1
 8000650:	4602      	mov	r2, r0
 8000652:	701a      	strb	r2, [r3, #0]
		kaSensorArrayDataB[u8Idx].bEnabled = true;
 8000654:	7bba      	ldrb	r2, [r7, #14]
 8000656:	490c      	ldr	r1, [pc, #48]	; (8000688 <SensorArray_Init+0xcc>)
 8000658:	4613      	mov	r3, r2
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	4413      	add	r3, r2
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	440b      	add	r3, r1
 8000662:	2201      	movs	r2, #1
 8000664:	701a      	strb	r2, [r3, #0]
	for(uint8_t u8Idx = 0; u8Idx < MCP9808_I2CB_DeviceCount; u8Idx++)
 8000666:	7bbb      	ldrb	r3, [r7, #14]
 8000668:	3301      	adds	r3, #1
 800066a:	73bb      	strb	r3, [r7, #14]
 800066c:	7bbb      	ldrb	r3, [r7, #14]
 800066e:	2b04      	cmp	r3, #4
 8000670:	d9d7      	bls.n	8000622 <SensorArray_Init+0x66>
	}
}
 8000672:	bf00      	nop
 8000674:	bf00      	nop
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	20000634 	.word	0x20000634
 8000684:	0800c3e8 	.word	0x0800c3e8
 8000688:	20000670 	.word	0x20000670
 800068c:	0800c3f0 	.word	0x0800c3f0

08000690 <MCP9808_Read>:

#include "TemperatureSensor_MCP9808.h"
#include "MCP9808_ArrayData.h"

void MCP9808_Read(MCP9808_Sensor_t *kSensor)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af02      	add	r7, sp, #8
 8000696:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_IT(kSensor->hTranscieverHandle, kSensor->u8Address, MCP9808_AddressAmbientTemperature, 1, kSensor->u16RawMeasurement, 2);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	6858      	ldr	r0, [r3, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	785b      	ldrb	r3, [r3, #1]
 80006a0:	b299      	uxth	r1, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	3308      	adds	r3, #8
 80006a6:	2202      	movs	r2, #2
 80006a8:	9201      	str	r2, [sp, #4]
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	2301      	movs	r3, #1
 80006ae:	2205      	movs	r2, #5
 80006b0:	f000 fff8 	bl	80016a4 <HAL_I2C_Mem_Read_IT>
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <MCP9808_DecodeTemperature>:
}

#else

int16_t MCP9808_DecodeTemperature(MCP9808_Sensor_t *kSensor)
{
 80006bc:	b480      	push	{r7}
 80006be:	b087      	sub	sp, #28
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	uint16_t u16FixedPointReadingLow = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	82bb      	strh	r3, [r7, #20]
	uint16_t u16FixedPointReadingHigh = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	827b      	strh	r3, [r7, #18]
	uint16_t u16FixedPointReading = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	823b      	strh	r3, [r7, #16]
	bool bNegativeSign = false;
 80006d0:	2300      	movs	r3, #0
 80006d2:	73fb      	strb	r3, [r7, #15]
	int16_t i16Result;


	u16FixedPointReadingLow = ((uint16_t)(kSensor->u16RawMeasurement[0])) << 8;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	7a1b      	ldrb	r3, [r3, #8]
 80006d8:	b29b      	uxth	r3, r3
 80006da:	021b      	lsls	r3, r3, #8
 80006dc:	82bb      	strh	r3, [r7, #20]
	bNegativeSign = ( u16FixedPointReadingLow & 0x1000) && 0x1000;
 80006de:	8abb      	ldrh	r3, [r7, #20]
 80006e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	bf14      	ite	ne
 80006e8:	2301      	movne	r3, #1
 80006ea:	2300      	moveq	r3, #0
 80006ec:	73fb      	strb	r3, [r7, #15]
	u16FixedPointReadingLow = u16FixedPointReadingLow & (0x0FFF); // Mask to delete threshold data and sign
 80006ee:	8abb      	ldrh	r3, [r7, #20]
 80006f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80006f4:	82bb      	strh	r3, [r7, #20]

	u16FixedPointReadingHigh = ((uint16_t)(kSensor->u16RawMeasurement[1]));
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	7a5b      	ldrb	r3, [r3, #9]
 80006fa:	827b      	strh	r3, [r7, #18]
	u16FixedPointReading = u16FixedPointReadingLow + u16FixedPointReadingHigh;
 80006fc:	8aba      	ldrh	r2, [r7, #20]
 80006fe:	8a7b      	ldrh	r3, [r7, #18]
 8000700:	4413      	add	r3, r2
 8000702:	823b      	strh	r3, [r7, #16]

	if (bNegativeSign)
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d004      	beq.n	8000714 <MCP9808_DecodeTemperature+0x58>
	{
		i16Result = u16FixedPointReading * -1;
 800070a:	8a3b      	ldrh	r3, [r7, #16]
 800070c:	425b      	negs	r3, r3
 800070e:	b29b      	uxth	r3, r3
 8000710:	82fb      	strh	r3, [r7, #22]
 8000712:	e001      	b.n	8000718 <MCP9808_DecodeTemperature+0x5c>
	}
	else
	{
		i16Result = u16FixedPointReading;
 8000714:	8a3b      	ldrh	r3, [r7, #16]
 8000716:	82fb      	strh	r3, [r7, #22]
	}

	return i16Result;
 8000718:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800071c:	4618      	mov	r0, r3
 800071e:	371c      	adds	r7, #28
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800072c:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <HAL_Init+0x40>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a0d      	ldr	r2, [pc, #52]	; (8000768 <HAL_Init+0x40>)
 8000732:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000736:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000738:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <HAL_Init+0x40>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <HAL_Init+0x40>)
 800073e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000742:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000744:	4b08      	ldr	r3, [pc, #32]	; (8000768 <HAL_Init+0x40>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a07      	ldr	r2, [pc, #28]	; (8000768 <HAL_Init+0x40>)
 800074a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800074e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000750:	2003      	movs	r0, #3
 8000752:	f000 f94f 	bl	80009f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000756:	2000      	movs	r0, #0
 8000758:	f000 f808 	bl	800076c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800075c:	f00a fe02 	bl	800b364 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000760:	2300      	movs	r3, #0
}
 8000762:	4618      	mov	r0, r3
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023c00 	.word	0x40023c00

0800076c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <HAL_InitTick+0x54>)
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <HAL_InitTick+0x58>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	4619      	mov	r1, r3
 800077e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000782:	fbb3 f3f1 	udiv	r3, r3, r1
 8000786:	fbb2 f3f3 	udiv	r3, r2, r3
 800078a:	4618      	mov	r0, r3
 800078c:	f000 f967 	bl	8000a5e <HAL_SYSTICK_Config>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000796:	2301      	movs	r3, #1
 8000798:	e00e      	b.n	80007b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b0f      	cmp	r3, #15
 800079e:	d80a      	bhi.n	80007b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a0:	2200      	movs	r2, #0
 80007a2:	6879      	ldr	r1, [r7, #4]
 80007a4:	f04f 30ff 	mov.w	r0, #4294967295
 80007a8:	f000 f92f 	bl	8000a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007ac:	4a06      	ldr	r2, [pc, #24]	; (80007c8 <HAL_InitTick+0x5c>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007b2:	2300      	movs	r3, #0
 80007b4:	e000      	b.n	80007b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000118 	.word	0x20000118
 80007c4:	20000004 	.word	0x20000004
 80007c8:	20000000 	.word	0x20000000

080007cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <HAL_IncTick+0x20>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	461a      	mov	r2, r3
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <HAL_IncTick+0x24>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4413      	add	r3, r2
 80007dc:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <HAL_IncTick+0x24>)
 80007de:	6013      	str	r3, [r2, #0]
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	20000004 	.word	0x20000004
 80007f0:	200006ac 	.word	0x200006ac

080007f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  return uwTick;
 80007f8:	4b03      	ldr	r3, [pc, #12]	; (8000808 <HAL_GetTick+0x14>)
 80007fa:	681b      	ldr	r3, [r3, #0]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	200006ac 	.word	0x200006ac

0800080c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000814:	f7ff ffee 	bl	80007f4 <HAL_GetTick>
 8000818:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000824:	d005      	beq.n	8000832 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000826:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <HAL_Delay+0x44>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	461a      	mov	r2, r3
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	4413      	add	r3, r2
 8000830:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000832:	bf00      	nop
 8000834:	f7ff ffde 	bl	80007f4 <HAL_GetTick>
 8000838:	4602      	mov	r2, r0
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	1ad3      	subs	r3, r2, r3
 800083e:	68fa      	ldr	r2, [r7, #12]
 8000840:	429a      	cmp	r2, r3
 8000842:	d8f7      	bhi.n	8000834 <HAL_Delay+0x28>
  {
  }
}
 8000844:	bf00      	nop
 8000846:	bf00      	nop
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000004 	.word	0x20000004

08000854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f003 0307 	and.w	r3, r3, #7
 8000862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <__NVIC_SetPriorityGrouping+0x44>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800086a:	68ba      	ldr	r2, [r7, #8]
 800086c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000870:	4013      	ands	r3, r2
 8000872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800087c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000886:	4a04      	ldr	r2, [pc, #16]	; (8000898 <__NVIC_SetPriorityGrouping+0x44>)
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	60d3      	str	r3, [r2, #12]
}
 800088c:	bf00      	nop
 800088e:	3714      	adds	r7, #20
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008a0:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <__NVIC_GetPriorityGrouping+0x18>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	0a1b      	lsrs	r3, r3, #8
 80008a6:	f003 0307 	and.w	r3, r3, #7
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	db0b      	blt.n	80008e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	f003 021f 	and.w	r2, r3, #31
 80008d0:	4907      	ldr	r1, [pc, #28]	; (80008f0 <__NVIC_EnableIRQ+0x38>)
 80008d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d6:	095b      	lsrs	r3, r3, #5
 80008d8:	2001      	movs	r0, #1
 80008da:	fa00 f202 	lsl.w	r2, r0, r2
 80008de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000e100 	.word	0xe000e100

080008f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	6039      	str	r1, [r7, #0]
 80008fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000904:	2b00      	cmp	r3, #0
 8000906:	db0a      	blt.n	800091e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	b2da      	uxtb	r2, r3
 800090c:	490c      	ldr	r1, [pc, #48]	; (8000940 <__NVIC_SetPriority+0x4c>)
 800090e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000912:	0112      	lsls	r2, r2, #4
 8000914:	b2d2      	uxtb	r2, r2
 8000916:	440b      	add	r3, r1
 8000918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800091c:	e00a      	b.n	8000934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4908      	ldr	r1, [pc, #32]	; (8000944 <__NVIC_SetPriority+0x50>)
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	f003 030f 	and.w	r3, r3, #15
 800092a:	3b04      	subs	r3, #4
 800092c:	0112      	lsls	r2, r2, #4
 800092e:	b2d2      	uxtb	r2, r2
 8000930:	440b      	add	r3, r1
 8000932:	761a      	strb	r2, [r3, #24]
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	e000e100 	.word	0xe000e100
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000948:	b480      	push	{r7}
 800094a:	b089      	sub	sp, #36	; 0x24
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	f1c3 0307 	rsb	r3, r3, #7
 8000962:	2b04      	cmp	r3, #4
 8000964:	bf28      	it	cs
 8000966:	2304      	movcs	r3, #4
 8000968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	3304      	adds	r3, #4
 800096e:	2b06      	cmp	r3, #6
 8000970:	d902      	bls.n	8000978 <NVIC_EncodePriority+0x30>
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	3b03      	subs	r3, #3
 8000976:	e000      	b.n	800097a <NVIC_EncodePriority+0x32>
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800097c:	f04f 32ff 	mov.w	r2, #4294967295
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	43da      	mvns	r2, r3
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	401a      	ands	r2, r3
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000990:	f04f 31ff 	mov.w	r1, #4294967295
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	fa01 f303 	lsl.w	r3, r1, r3
 800099a:	43d9      	mvns	r1, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a0:	4313      	orrs	r3, r2
         );
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3724      	adds	r7, #36	; 0x24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
	...

080009b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009c0:	d301      	bcc.n	80009c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009c2:	2301      	movs	r3, #1
 80009c4:	e00f      	b.n	80009e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009c6:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <SysTick_Config+0x40>)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ce:	210f      	movs	r1, #15
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295
 80009d4:	f7ff ff8e 	bl	80008f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <SysTick_Config+0x40>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009de:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <SysTick_Config+0x40>)
 80009e0:	2207      	movs	r2, #7
 80009e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	e000e010 	.word	0xe000e010

080009f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff ff29 	bl	8000854 <__NVIC_SetPriorityGrouping>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b086      	sub	sp, #24
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4603      	mov	r3, r0
 8000a12:	60b9      	str	r1, [r7, #8]
 8000a14:	607a      	str	r2, [r7, #4]
 8000a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a1c:	f7ff ff3e 	bl	800089c <__NVIC_GetPriorityGrouping>
 8000a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	68b9      	ldr	r1, [r7, #8]
 8000a26:	6978      	ldr	r0, [r7, #20]
 8000a28:	f7ff ff8e 	bl	8000948 <NVIC_EncodePriority>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a32:	4611      	mov	r1, r2
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ff5d 	bl	80008f4 <__NVIC_SetPriority>
}
 8000a3a:	bf00      	nop
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b082      	sub	sp, #8
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	4603      	mov	r3, r0
 8000a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff31 	bl	80008b8 <__NVIC_EnableIRQ>
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff ffa2 	bl	80009b0 <SysTick_Config>
 8000a6c:	4603      	mov	r3, r0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000a84:	f7ff feb6 	bl	80007f4 <HAL_GetTick>
 8000a88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d101      	bne.n	8000a94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000a90:	2301      	movs	r3, #1
 8000a92:	e099      	b.n	8000bc8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2202      	movs	r2, #2
 8000a98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f022 0201 	bic.w	r2, r2, #1
 8000ab2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ab4:	e00f      	b.n	8000ad6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ab6:	f7ff fe9d 	bl	80007f4 <HAL_GetTick>
 8000aba:	4602      	mov	r2, r0
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	1ad3      	subs	r3, r2, r3
 8000ac0:	2b05      	cmp	r3, #5
 8000ac2:	d908      	bls.n	8000ad6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2220      	movs	r2, #32
 8000ac8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2203      	movs	r2, #3
 8000ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	e078      	b.n	8000bc8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d1e8      	bne.n	8000ab6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000aec:	697a      	ldr	r2, [r7, #20]
 8000aee:	4b38      	ldr	r3, [pc, #224]	; (8000bd0 <HAL_DMA_Init+0x158>)
 8000af0:	4013      	ands	r3, r2
 8000af2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	685a      	ldr	r2, [r3, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	691b      	ldr	r3, [r3, #16]
 8000b08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6a1b      	ldr	r3, [r3, #32]
 8000b20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b22:	697a      	ldr	r2, [r7, #20]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b2c:	2b04      	cmp	r3, #4
 8000b2e:	d107      	bne.n	8000b40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	697a      	ldr	r2, [r7, #20]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	697a      	ldr	r2, [r7, #20]
 8000b46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	f023 0307 	bic.w	r3, r3, #7
 8000b56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b5c:	697a      	ldr	r2, [r7, #20]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	d117      	bne.n	8000b9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b6e:	697a      	ldr	r2, [r7, #20]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d00e      	beq.n	8000b9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f000 fa19 	bl	8000fb4 <DMA_CheckFifoParam>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d008      	beq.n	8000b9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2240      	movs	r2, #64	; 0x40
 8000b8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2201      	movs	r2, #1
 8000b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000b96:	2301      	movs	r3, #1
 8000b98:	e016      	b.n	8000bc8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	697a      	ldr	r2, [r7, #20]
 8000ba0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f000 f9d0 	bl	8000f48 <DMA_CalcBaseAndBitshift>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bb0:	223f      	movs	r2, #63	; 0x3f
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000bc6:	2300      	movs	r3, #0
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	f010803f 	.word	0xf010803f

08000bd4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d004      	beq.n	8000bf2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2280      	movs	r2, #128	; 0x80
 8000bec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e00c      	b.n	8000c0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2205      	movs	r2, #5
 8000bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f022 0201 	bic.w	r2, r2, #1
 8000c08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000c0a:	2300      	movs	r3, #0
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000c24:	4b92      	ldr	r3, [pc, #584]	; (8000e70 <HAL_DMA_IRQHandler+0x258>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a92      	ldr	r2, [pc, #584]	; (8000e74 <HAL_DMA_IRQHandler+0x25c>)
 8000c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2e:	0a9b      	lsrs	r3, r3, #10
 8000c30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c42:	2208      	movs	r2, #8
 8000c44:	409a      	lsls	r2, r3
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d01a      	beq.n	8000c84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f003 0304 	and.w	r3, r3, #4
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d013      	beq.n	8000c84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f022 0204 	bic.w	r2, r2, #4
 8000c6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c70:	2208      	movs	r2, #8
 8000c72:	409a      	lsls	r2, r3
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c7c:	f043 0201 	orr.w	r2, r3, #1
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c88:	2201      	movs	r2, #1
 8000c8a:	409a      	lsls	r2, r3
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d012      	beq.n	8000cba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d00b      	beq.n	8000cba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	409a      	lsls	r2, r3
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cb2:	f043 0202 	orr.w	r2, r3, #2
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cbe:	2204      	movs	r2, #4
 8000cc0:	409a      	lsls	r2, r3
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d012      	beq.n	8000cf0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f003 0302 	and.w	r3, r3, #2
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d00b      	beq.n	8000cf0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cdc:	2204      	movs	r2, #4
 8000cde:	409a      	lsls	r2, r3
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ce8:	f043 0204 	orr.w	r2, r3, #4
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cf4:	2210      	movs	r2, #16
 8000cf6:	409a      	lsls	r2, r3
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d043      	beq.n	8000d88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 0308 	and.w	r3, r3, #8
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d03c      	beq.n	8000d88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d12:	2210      	movs	r2, #16
 8000d14:	409a      	lsls	r2, r3
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d018      	beq.n	8000d5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d108      	bne.n	8000d48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d024      	beq.n	8000d88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	4798      	blx	r3
 8000d46:	e01f      	b.n	8000d88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d01b      	beq.n	8000d88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	4798      	blx	r3
 8000d58:	e016      	b.n	8000d88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d107      	bne.n	8000d78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f022 0208 	bic.w	r2, r2, #8
 8000d76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d003      	beq.n	8000d88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d8c:	2220      	movs	r2, #32
 8000d8e:	409a      	lsls	r2, r3
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	4013      	ands	r3, r2
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	f000 808e 	beq.w	8000eb6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f003 0310 	and.w	r3, r3, #16
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	f000 8086 	beq.w	8000eb6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dae:	2220      	movs	r2, #32
 8000db0:	409a      	lsls	r2, r3
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b05      	cmp	r3, #5
 8000dc0:	d136      	bne.n	8000e30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f022 0216 	bic.w	r2, r2, #22
 8000dd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	695a      	ldr	r2, [r3, #20]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000de0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d103      	bne.n	8000df2 <HAL_DMA_IRQHandler+0x1da>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d007      	beq.n	8000e02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f022 0208 	bic.w	r2, r2, #8
 8000e00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e06:	223f      	movs	r2, #63	; 0x3f
 8000e08:	409a      	lsls	r2, r3
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2201      	movs	r2, #1
 8000e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d07d      	beq.n	8000f22 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	4798      	blx	r3
        }
        return;
 8000e2e:	e078      	b.n	8000f22 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d01c      	beq.n	8000e78 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d108      	bne.n	8000e5e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d030      	beq.n	8000eb6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	4798      	blx	r3
 8000e5c:	e02b      	b.n	8000eb6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d027      	beq.n	8000eb6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	4798      	blx	r3
 8000e6e:	e022      	b.n	8000eb6 <HAL_DMA_IRQHandler+0x29e>
 8000e70:	20000118 	.word	0x20000118
 8000e74:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d10f      	bne.n	8000ea6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f022 0210 	bic.w	r2, r2, #16
 8000e94:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d032      	beq.n	8000f24 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d022      	beq.n	8000f10 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2205      	movs	r2, #5
 8000ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f022 0201 	bic.w	r2, r2, #1
 8000ee0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	697a      	ldr	r2, [r7, #20]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d307      	bcc.n	8000efe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1f2      	bne.n	8000ee2 <HAL_DMA_IRQHandler+0x2ca>
 8000efc:	e000      	b.n	8000f00 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000efe:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2201      	movs	r2, #1
 8000f04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d005      	beq.n	8000f24 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	4798      	blx	r3
 8000f20:	e000      	b.n	8000f24 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000f22:	bf00      	nop
    }
  }
}
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop

08000f2c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f3a:	b2db      	uxtb	r3, r3
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	3b10      	subs	r3, #16
 8000f58:	4a14      	ldr	r2, [pc, #80]	; (8000fac <DMA_CalcBaseAndBitshift+0x64>)
 8000f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5e:	091b      	lsrs	r3, r3, #4
 8000f60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000f62:	4a13      	ldr	r2, [pc, #76]	; (8000fb0 <DMA_CalcBaseAndBitshift+0x68>)
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	4413      	add	r3, r2
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2b03      	cmp	r3, #3
 8000f74:	d909      	bls.n	8000f8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000f7e:	f023 0303 	bic.w	r3, r3, #3
 8000f82:	1d1a      	adds	r2, r3, #4
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	659a      	str	r2, [r3, #88]	; 0x58
 8000f88:	e007      	b.n	8000f9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000f92:	f023 0303 	bic.w	r3, r3, #3
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	aaaaaaab 	.word	0xaaaaaaab
 8000fb0:	0800c3f8 	.word	0x0800c3f8

08000fb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d11f      	bne.n	800100e <DMA_CheckFifoParam+0x5a>
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	2b03      	cmp	r3, #3
 8000fd2:	d856      	bhi.n	8001082 <DMA_CheckFifoParam+0xce>
 8000fd4:	a201      	add	r2, pc, #4	; (adr r2, 8000fdc <DMA_CheckFifoParam+0x28>)
 8000fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fda:	bf00      	nop
 8000fdc:	08000fed 	.word	0x08000fed
 8000fe0:	08000fff 	.word	0x08000fff
 8000fe4:	08000fed 	.word	0x08000fed
 8000fe8:	08001083 	.word	0x08001083
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d046      	beq.n	8001086 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000ffc:	e043      	b.n	8001086 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001002:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001006:	d140      	bne.n	800108a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800100c:	e03d      	b.n	800108a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001016:	d121      	bne.n	800105c <DMA_CheckFifoParam+0xa8>
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	2b03      	cmp	r3, #3
 800101c:	d837      	bhi.n	800108e <DMA_CheckFifoParam+0xda>
 800101e:	a201      	add	r2, pc, #4	; (adr r2, 8001024 <DMA_CheckFifoParam+0x70>)
 8001020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001024:	08001035 	.word	0x08001035
 8001028:	0800103b 	.word	0x0800103b
 800102c:	08001035 	.word	0x08001035
 8001030:	0800104d 	.word	0x0800104d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	73fb      	strb	r3, [r7, #15]
      break;
 8001038:	e030      	b.n	800109c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d025      	beq.n	8001092 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800104a:	e022      	b.n	8001092 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001050:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001054:	d11f      	bne.n	8001096 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800105a:	e01c      	b.n	8001096 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	2b02      	cmp	r3, #2
 8001060:	d903      	bls.n	800106a <DMA_CheckFifoParam+0xb6>
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	2b03      	cmp	r3, #3
 8001066:	d003      	beq.n	8001070 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001068:	e018      	b.n	800109c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	73fb      	strb	r3, [r7, #15]
      break;
 800106e:	e015      	b.n	800109c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001074:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d00e      	beq.n	800109a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	73fb      	strb	r3, [r7, #15]
      break;
 8001080:	e00b      	b.n	800109a <DMA_CheckFifoParam+0xe6>
      break;
 8001082:	bf00      	nop
 8001084:	e00a      	b.n	800109c <DMA_CheckFifoParam+0xe8>
      break;
 8001086:	bf00      	nop
 8001088:	e008      	b.n	800109c <DMA_CheckFifoParam+0xe8>
      break;
 800108a:	bf00      	nop
 800108c:	e006      	b.n	800109c <DMA_CheckFifoParam+0xe8>
      break;
 800108e:	bf00      	nop
 8001090:	e004      	b.n	800109c <DMA_CheckFifoParam+0xe8>
      break;
 8001092:	bf00      	nop
 8001094:	e002      	b.n	800109c <DMA_CheckFifoParam+0xe8>
      break;   
 8001096:	bf00      	nop
 8001098:	e000      	b.n	800109c <DMA_CheckFifoParam+0xe8>
      break;
 800109a:	bf00      	nop
    }
  } 
  
  return status; 
 800109c:	7bfb      	ldrb	r3, [r7, #15]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	; 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
 80010c6:	e159      	b.n	800137c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010c8:	2201      	movs	r2, #1
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	f040 8148 	bne.w	8001376 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d005      	beq.n	80010fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d130      	bne.n	8001160 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	2203      	movs	r2, #3
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	68da      	ldr	r2, [r3, #12]
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001134:	2201      	movs	r2, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	091b      	lsrs	r3, r3, #4
 800114a:	f003 0201 	and.w	r2, r3, #1
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0303 	and.w	r3, r3, #3
 8001168:	2b03      	cmp	r3, #3
 800116a:	d017      	beq.n	800119c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	2203      	movs	r2, #3
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d123      	bne.n	80011f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	08da      	lsrs	r2, r3, #3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3208      	adds	r2, #8
 80011b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	f003 0307 	and.w	r3, r3, #7
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	220f      	movs	r2, #15
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	691a      	ldr	r2, [r3, #16]
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	08da      	lsrs	r2, r3, #3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3208      	adds	r2, #8
 80011ea:	69b9      	ldr	r1, [r7, #24]
 80011ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	2203      	movs	r2, #3
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 0203 	and.w	r2, r3, #3
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800122c:	2b00      	cmp	r3, #0
 800122e:	f000 80a2 	beq.w	8001376 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b57      	ldr	r3, [pc, #348]	; (8001394 <HAL_GPIO_Init+0x2e8>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	4a56      	ldr	r2, [pc, #344]	; (8001394 <HAL_GPIO_Init+0x2e8>)
 800123c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001240:	6453      	str	r3, [r2, #68]	; 0x44
 8001242:	4b54      	ldr	r3, [pc, #336]	; (8001394 <HAL_GPIO_Init+0x2e8>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800124e:	4a52      	ldr	r2, [pc, #328]	; (8001398 <HAL_GPIO_Init+0x2ec>)
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	089b      	lsrs	r3, r3, #2
 8001254:	3302      	adds	r3, #2
 8001256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f003 0303 	and.w	r3, r3, #3
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	220f      	movs	r2, #15
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a49      	ldr	r2, [pc, #292]	; (800139c <HAL_GPIO_Init+0x2f0>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d019      	beq.n	80012ae <HAL_GPIO_Init+0x202>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a48      	ldr	r2, [pc, #288]	; (80013a0 <HAL_GPIO_Init+0x2f4>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d013      	beq.n	80012aa <HAL_GPIO_Init+0x1fe>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a47      	ldr	r2, [pc, #284]	; (80013a4 <HAL_GPIO_Init+0x2f8>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d00d      	beq.n	80012a6 <HAL_GPIO_Init+0x1fa>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a46      	ldr	r2, [pc, #280]	; (80013a8 <HAL_GPIO_Init+0x2fc>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d007      	beq.n	80012a2 <HAL_GPIO_Init+0x1f6>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a45      	ldr	r2, [pc, #276]	; (80013ac <HAL_GPIO_Init+0x300>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d101      	bne.n	800129e <HAL_GPIO_Init+0x1f2>
 800129a:	2304      	movs	r3, #4
 800129c:	e008      	b.n	80012b0 <HAL_GPIO_Init+0x204>
 800129e:	2307      	movs	r3, #7
 80012a0:	e006      	b.n	80012b0 <HAL_GPIO_Init+0x204>
 80012a2:	2303      	movs	r3, #3
 80012a4:	e004      	b.n	80012b0 <HAL_GPIO_Init+0x204>
 80012a6:	2302      	movs	r3, #2
 80012a8:	e002      	b.n	80012b0 <HAL_GPIO_Init+0x204>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <HAL_GPIO_Init+0x204>
 80012ae:	2300      	movs	r3, #0
 80012b0:	69fa      	ldr	r2, [r7, #28]
 80012b2:	f002 0203 	and.w	r2, r2, #3
 80012b6:	0092      	lsls	r2, r2, #2
 80012b8:	4093      	lsls	r3, r2
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012c0:	4935      	ldr	r1, [pc, #212]	; (8001398 <HAL_GPIO_Init+0x2ec>)
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	089b      	lsrs	r3, r3, #2
 80012c6:	3302      	adds	r3, #2
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ce:	4b38      	ldr	r3, [pc, #224]	; (80013b0 <HAL_GPIO_Init+0x304>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012f2:	4a2f      	ldr	r2, [pc, #188]	; (80013b0 <HAL_GPIO_Init+0x304>)
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012f8:	4b2d      	ldr	r3, [pc, #180]	; (80013b0 <HAL_GPIO_Init+0x304>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800131c:	4a24      	ldr	r2, [pc, #144]	; (80013b0 <HAL_GPIO_Init+0x304>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001322:	4b23      	ldr	r3, [pc, #140]	; (80013b0 <HAL_GPIO_Init+0x304>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001346:	4a1a      	ldr	r2, [pc, #104]	; (80013b0 <HAL_GPIO_Init+0x304>)
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800134c:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <HAL_GPIO_Init+0x304>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001370:	4a0f      	ldr	r2, [pc, #60]	; (80013b0 <HAL_GPIO_Init+0x304>)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3301      	adds	r3, #1
 800137a:	61fb      	str	r3, [r7, #28]
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	2b0f      	cmp	r3, #15
 8001380:	f67f aea2 	bls.w	80010c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3724      	adds	r7, #36	; 0x24
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40013800 	.word	0x40013800
 800139c:	40020000 	.word	0x40020000
 80013a0:	40020400 	.word	0x40020400
 80013a4:	40020800 	.word	0x40020800
 80013a8:	40020c00 	.word	0x40020c00
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40013c00 	.word	0x40013c00

080013b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	460b      	mov	r3, r1
 80013be:	807b      	strh	r3, [r7, #2]
 80013c0:	4613      	mov	r3, r2
 80013c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c4:	787b      	ldrb	r3, [r7, #1]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ca:	887a      	ldrh	r2, [r7, #2]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013d0:	e003      	b.n	80013da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013d2:	887b      	ldrh	r3, [r7, #2]
 80013d4:	041a      	lsls	r2, r3, #16
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	619a      	str	r2, [r3, #24]
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b085      	sub	sp, #20
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	460b      	mov	r3, r1
 80013f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013f8:	887a      	ldrh	r2, [r7, #2]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4013      	ands	r3, r2
 80013fe:	041a      	lsls	r2, r3, #16
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	43d9      	mvns	r1, r3
 8001404:	887b      	ldrh	r3, [r7, #2]
 8001406:	400b      	ands	r3, r1
 8001408:	431a      	orrs	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	619a      	str	r2, [r3, #24]
}
 800140e:	bf00      	nop
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e12b      	b.n	8001686 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d106      	bne.n	8001448 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f009 ffb6 	bl	800b3b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2224      	movs	r2, #36	; 0x24
 800144c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f022 0201 	bic.w	r2, r2, #1
 800145e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800146e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800147e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001480:	f003 fb2c 	bl	8004adc <HAL_RCC_GetPCLK1Freq>
 8001484:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	4a81      	ldr	r2, [pc, #516]	; (8001690 <HAL_I2C_Init+0x274>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d807      	bhi.n	80014a0 <HAL_I2C_Init+0x84>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4a80      	ldr	r2, [pc, #512]	; (8001694 <HAL_I2C_Init+0x278>)
 8001494:	4293      	cmp	r3, r2
 8001496:	bf94      	ite	ls
 8001498:	2301      	movls	r3, #1
 800149a:	2300      	movhi	r3, #0
 800149c:	b2db      	uxtb	r3, r3
 800149e:	e006      	b.n	80014ae <HAL_I2C_Init+0x92>
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4a7d      	ldr	r2, [pc, #500]	; (8001698 <HAL_I2C_Init+0x27c>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	bf94      	ite	ls
 80014a8:	2301      	movls	r3, #1
 80014aa:	2300      	movhi	r3, #0
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e0e7      	b.n	8001686 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4a78      	ldr	r2, [pc, #480]	; (800169c <HAL_I2C_Init+0x280>)
 80014ba:	fba2 2303 	umull	r2, r3, r2, r3
 80014be:	0c9b      	lsrs	r3, r3, #18
 80014c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68ba      	ldr	r2, [r7, #8]
 80014d2:	430a      	orrs	r2, r1
 80014d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	4a6a      	ldr	r2, [pc, #424]	; (8001690 <HAL_I2C_Init+0x274>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d802      	bhi.n	80014f0 <HAL_I2C_Init+0xd4>
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	3301      	adds	r3, #1
 80014ee:	e009      	b.n	8001504 <HAL_I2C_Init+0xe8>
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014f6:	fb02 f303 	mul.w	r3, r2, r3
 80014fa:	4a69      	ldr	r2, [pc, #420]	; (80016a0 <HAL_I2C_Init+0x284>)
 80014fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001500:	099b      	lsrs	r3, r3, #6
 8001502:	3301      	adds	r3, #1
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	6812      	ldr	r2, [r2, #0]
 8001508:	430b      	orrs	r3, r1
 800150a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001516:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	495c      	ldr	r1, [pc, #368]	; (8001690 <HAL_I2C_Init+0x274>)
 8001520:	428b      	cmp	r3, r1
 8001522:	d819      	bhi.n	8001558 <HAL_I2C_Init+0x13c>
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	1e59      	subs	r1, r3, #1
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001532:	1c59      	adds	r1, r3, #1
 8001534:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001538:	400b      	ands	r3, r1
 800153a:	2b00      	cmp	r3, #0
 800153c:	d00a      	beq.n	8001554 <HAL_I2C_Init+0x138>
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	1e59      	subs	r1, r3, #1
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	fbb1 f3f3 	udiv	r3, r1, r3
 800154c:	3301      	adds	r3, #1
 800154e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001552:	e051      	b.n	80015f8 <HAL_I2C_Init+0x1dc>
 8001554:	2304      	movs	r3, #4
 8001556:	e04f      	b.n	80015f8 <HAL_I2C_Init+0x1dc>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d111      	bne.n	8001584 <HAL_I2C_Init+0x168>
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	1e58      	subs	r0, r3, #1
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6859      	ldr	r1, [r3, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	440b      	add	r3, r1
 800156e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001572:	3301      	adds	r3, #1
 8001574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001578:	2b00      	cmp	r3, #0
 800157a:	bf0c      	ite	eq
 800157c:	2301      	moveq	r3, #1
 800157e:	2300      	movne	r3, #0
 8001580:	b2db      	uxtb	r3, r3
 8001582:	e012      	b.n	80015aa <HAL_I2C_Init+0x18e>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	1e58      	subs	r0, r3, #1
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6859      	ldr	r1, [r3, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	440b      	add	r3, r1
 8001592:	0099      	lsls	r1, r3, #2
 8001594:	440b      	add	r3, r1
 8001596:	fbb0 f3f3 	udiv	r3, r0, r3
 800159a:	3301      	adds	r3, #1
 800159c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	bf0c      	ite	eq
 80015a4:	2301      	moveq	r3, #1
 80015a6:	2300      	movne	r3, #0
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_I2C_Init+0x196>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e022      	b.n	80015f8 <HAL_I2C_Init+0x1dc>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10e      	bne.n	80015d8 <HAL_I2C_Init+0x1bc>
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	1e58      	subs	r0, r3, #1
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6859      	ldr	r1, [r3, #4]
 80015c2:	460b      	mov	r3, r1
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	440b      	add	r3, r1
 80015c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80015cc:	3301      	adds	r3, #1
 80015ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015d6:	e00f      	b.n	80015f8 <HAL_I2C_Init+0x1dc>
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	1e58      	subs	r0, r3, #1
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6859      	ldr	r1, [r3, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	440b      	add	r3, r1
 80015e6:	0099      	lsls	r1, r3, #2
 80015e8:	440b      	add	r3, r1
 80015ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ee:	3301      	adds	r3, #1
 80015f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015f8:	6879      	ldr	r1, [r7, #4]
 80015fa:	6809      	ldr	r1, [r1, #0]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	69da      	ldr	r2, [r3, #28]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	431a      	orrs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	430a      	orrs	r2, r1
 800161a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001626:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	6911      	ldr	r1, [r2, #16]
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	68d2      	ldr	r2, [r2, #12]
 8001632:	4311      	orrs	r1, r2
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6812      	ldr	r2, [r2, #0]
 8001638:	430b      	orrs	r3, r1
 800163a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	695a      	ldr	r2, [r3, #20]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	431a      	orrs	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	430a      	orrs	r2, r1
 8001656:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0201 	orr.w	r2, r2, #1
 8001666:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2220      	movs	r2, #32
 8001672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	000186a0 	.word	0x000186a0
 8001694:	001e847f 	.word	0x001e847f
 8001698:	003d08ff 	.word	0x003d08ff
 800169c:	431bde83 	.word	0x431bde83
 80016a0:	10624dd3 	.word	0x10624dd3

080016a4 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b087      	sub	sp, #28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	4608      	mov	r0, r1
 80016ae:	4611      	mov	r1, r2
 80016b0:	461a      	mov	r2, r3
 80016b2:	4603      	mov	r3, r0
 80016b4:	817b      	strh	r3, [r7, #10]
 80016b6:	460b      	mov	r3, r1
 80016b8:	813b      	strh	r3, [r7, #8]
 80016ba:	4613      	mov	r3, r2
 80016bc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b20      	cmp	r3, #32
 80016cc:	f040 809a 	bne.w	8001804 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80016d0:	4b50      	ldr	r3, [pc, #320]	; (8001814 <HAL_I2C_Mem_Read_IT+0x170>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	08db      	lsrs	r3, r3, #3
 80016d6:	4a50      	ldr	r2, [pc, #320]	; (8001818 <HAL_I2C_Mem_Read_IT+0x174>)
 80016d8:	fba2 2303 	umull	r2, r3, r2, r3
 80016dc:	0a1a      	lsrs	r2, r3, #8
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	009a      	lsls	r2, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d116      	bne.n	8001724 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2200      	movs	r2, #0
 80016fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2220      	movs	r2, #32
 8001700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	f043 0220 	orr.w	r2, r3, #32
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e070      	b.n	8001806 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b02      	cmp	r3, #2
 8001730:	d0db      	beq.n	80016ea <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001738:	2b01      	cmp	r3, #1
 800173a:	d101      	bne.n	8001740 <HAL_I2C_Mem_Read_IT+0x9c>
 800173c:	2302      	movs	r3, #2
 800173e:	e062      	b.n	8001806 <HAL_I2C_Mem_Read_IT+0x162>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b01      	cmp	r3, #1
 8001754:	d007      	beq.n	8001766 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f042 0201 	orr.w	r2, r2, #1
 8001764:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001774:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2222      	movs	r2, #34	; 0x22
 800177a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2240      	movs	r2, #64	; 0x40
 8001782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2200      	movs	r2, #0
 800178a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6a3a      	ldr	r2, [r7, #32]
 8001790:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001796:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800179c:	b29a      	uxth	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	4a1d      	ldr	r2, [pc, #116]	; (800181c <HAL_I2C_Mem_Read_IT+0x178>)
 80017a6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80017a8:	897a      	ldrh	r2, [r7, #10]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80017ae:	893a      	ldrh	r2, [r7, #8]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80017b4:	88fa      	ldrh	r2, [r7, #6]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2200      	movs	r2, #0
 80017be:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017ce:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017de:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d007      	beq.n	8001800 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80017fe:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8001800:	2300      	movs	r3, #0
 8001802:	e000      	b.n	8001806 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8001804:	2302      	movs	r3, #2
  }
}
 8001806:	4618      	mov	r0, r3
 8001808:	371c      	adds	r7, #28
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20000118 	.word	0x20000118
 8001818:	14f8b589 	.word	0x14f8b589
 800181c:	ffff0000 	.word	0xffff0000

08001820 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b088      	sub	sp, #32
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001828:	2300      	movs	r3, #0
 800182a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001838:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001840:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001848:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	2b10      	cmp	r3, #16
 800184e:	d003      	beq.n	8001858 <HAL_I2C_EV_IRQHandler+0x38>
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	2b40      	cmp	r3, #64	; 0x40
 8001854:	f040 80c1 	bne.w	80019da <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10d      	bne.n	800188e <HAL_I2C_EV_IRQHandler+0x6e>
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001878:	d003      	beq.n	8001882 <HAL_I2C_EV_IRQHandler+0x62>
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001880:	d101      	bne.n	8001886 <HAL_I2C_EV_IRQHandler+0x66>
 8001882:	2301      	movs	r3, #1
 8001884:	e000      	b.n	8001888 <HAL_I2C_EV_IRQHandler+0x68>
 8001886:	2300      	movs	r3, #0
 8001888:	2b01      	cmp	r3, #1
 800188a:	f000 8132 	beq.w	8001af2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00c      	beq.n	80018b2 <HAL_I2C_EV_IRQHandler+0x92>
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	0a5b      	lsrs	r3, r3, #9
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d006      	beq.n	80018b2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f001 fb51 	bl	8002f4c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 fcc8 	bl	8002240 <I2C_Master_SB>
 80018b0:	e092      	b.n	80019d8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	08db      	lsrs	r3, r3, #3
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d009      	beq.n	80018d2 <HAL_I2C_EV_IRQHandler+0xb2>
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	0a5b      	lsrs	r3, r3, #9
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 fd3e 	bl	800234c <I2C_Master_ADD10>
 80018d0:	e082      	b.n	80019d8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	085b      	lsrs	r3, r3, #1
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d009      	beq.n	80018f2 <HAL_I2C_EV_IRQHandler+0xd2>
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	0a5b      	lsrs	r3, r3, #9
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 fd58 	bl	80023a0 <I2C_Master_ADDR>
 80018f0:	e072      	b.n	80019d8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	089b      	lsrs	r3, r3, #2
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d03b      	beq.n	8001976 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001908:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800190c:	f000 80f3 	beq.w	8001af6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	09db      	lsrs	r3, r3, #7
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00f      	beq.n	800193c <HAL_I2C_EV_IRQHandler+0x11c>
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	0a9b      	lsrs	r3, r3, #10
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b00      	cmp	r3, #0
 8001926:	d009      	beq.n	800193c <HAL_I2C_EV_IRQHandler+0x11c>
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	089b      	lsrs	r3, r3, #2
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b00      	cmp	r3, #0
 8001932:	d103      	bne.n	800193c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 f942 	bl	8001bbe <I2C_MasterTransmit_TXE>
 800193a:	e04d      	b.n	80019d8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	089b      	lsrs	r3, r3, #2
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 80d6 	beq.w	8001af6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	0a5b      	lsrs	r3, r3, #9
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 80cf 	beq.w	8001af6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001958:	7bbb      	ldrb	r3, [r7, #14]
 800195a:	2b21      	cmp	r3, #33	; 0x21
 800195c:	d103      	bne.n	8001966 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f9c9 	bl	8001cf6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001964:	e0c7      	b.n	8001af6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001966:	7bfb      	ldrb	r3, [r7, #15]
 8001968:	2b40      	cmp	r3, #64	; 0x40
 800196a:	f040 80c4 	bne.w	8001af6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 fa37 	bl	8001de2 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001974:	e0bf      	b.n	8001af6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001980:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001984:	f000 80b7 	beq.w	8001af6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	099b      	lsrs	r3, r3, #6
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	2b00      	cmp	r3, #0
 8001992:	d00f      	beq.n	80019b4 <HAL_I2C_EV_IRQHandler+0x194>
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	0a9b      	lsrs	r3, r3, #10
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b00      	cmp	r3, #0
 800199e:	d009      	beq.n	80019b4 <HAL_I2C_EV_IRQHandler+0x194>
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	089b      	lsrs	r3, r3, #2
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d103      	bne.n	80019b4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 faac 	bl	8001f0a <I2C_MasterReceive_RXNE>
 80019b2:	e011      	b.n	80019d8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	089b      	lsrs	r3, r3, #2
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 809a 	beq.w	8001af6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	0a5b      	lsrs	r3, r3, #9
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 8093 	beq.w	8001af6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 fb4b 	bl	800206c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019d6:	e08e      	b.n	8001af6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80019d8:	e08d      	b.n	8001af6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d004      	beq.n	80019ec <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	61fb      	str	r3, [r7, #28]
 80019ea:	e007      	b.n	80019fc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	085b      	lsrs	r3, r3, #1
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d012      	beq.n	8001a2e <HAL_I2C_EV_IRQHandler+0x20e>
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	0a5b      	lsrs	r3, r3, #9
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00c      	beq.n	8001a2e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001a24:	69b9      	ldr	r1, [r7, #24]
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 ff09 	bl	800283e <I2C_Slave_ADDR>
 8001a2c:	e066      	b.n	8001afc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	091b      	lsrs	r3, r3, #4
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d009      	beq.n	8001a4e <HAL_I2C_EV_IRQHandler+0x22e>
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	0a5b      	lsrs	r3, r3, #9
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 ff44 	bl	80028d4 <I2C_Slave_STOPF>
 8001a4c:	e056      	b.n	8001afc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001a4e:	7bbb      	ldrb	r3, [r7, #14]
 8001a50:	2b21      	cmp	r3, #33	; 0x21
 8001a52:	d002      	beq.n	8001a5a <HAL_I2C_EV_IRQHandler+0x23a>
 8001a54:	7bbb      	ldrb	r3, [r7, #14]
 8001a56:	2b29      	cmp	r3, #41	; 0x29
 8001a58:	d125      	bne.n	8001aa6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	09db      	lsrs	r3, r3, #7
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00f      	beq.n	8001a86 <HAL_I2C_EV_IRQHandler+0x266>
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	0a9b      	lsrs	r3, r3, #10
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d009      	beq.n	8001a86 <HAL_I2C_EV_IRQHandler+0x266>
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	089b      	lsrs	r3, r3, #2
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d103      	bne.n	8001a86 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 fe1f 	bl	80026c2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a84:	e039      	b.n	8001afa <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	089b      	lsrs	r3, r3, #2
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d033      	beq.n	8001afa <HAL_I2C_EV_IRQHandler+0x2da>
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	0a5b      	lsrs	r3, r3, #9
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d02d      	beq.n	8001afa <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 fe4c 	bl	800273c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001aa4:	e029      	b.n	8001afa <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	099b      	lsrs	r3, r3, #6
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00f      	beq.n	8001ad2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	0a9b      	lsrs	r3, r3, #10
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d009      	beq.n	8001ad2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	089b      	lsrs	r3, r3, #2
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d103      	bne.n	8001ad2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 fe57 	bl	800277e <I2C_SlaveReceive_RXNE>
 8001ad0:	e014      	b.n	8001afc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	089b      	lsrs	r3, r3, #2
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00e      	beq.n	8001afc <HAL_I2C_EV_IRQHandler+0x2dc>
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	0a5b      	lsrs	r3, r3, #9
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d008      	beq.n	8001afc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 fe85 	bl	80027fa <I2C_SlaveReceive_BTF>
 8001af0:	e004      	b.n	8001afc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001af2:	bf00      	nop
 8001af4:	e002      	b.n	8001afc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001af6:	bf00      	nop
 8001af8:	e000      	b.n	8001afc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001afa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001afc:	3720      	adds	r7, #32
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	70fb      	strb	r3, [r7, #3]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b084      	sub	sp, #16
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bcc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bd4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bda:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d150      	bne.n	8001c86 <I2C_MasterTransmit_TXE+0xc8>
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	2b21      	cmp	r3, #33	; 0x21
 8001be8:	d14d      	bne.n	8001c86 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d01d      	beq.n	8001c2c <I2C_MasterTransmit_TXE+0x6e>
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	2b20      	cmp	r3, #32
 8001bf4:	d01a      	beq.n	8001c2c <I2C_MasterTransmit_TXE+0x6e>
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001bfc:	d016      	beq.n	8001c2c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c0c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2211      	movs	r2, #17
 8001c12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2220      	movs	r2, #32
 8001c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff ff6c 	bl	8001b02 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c2a:	e060      	b.n	8001cee <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c3a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c4a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2220      	movs	r2, #32
 8001c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b40      	cmp	r3, #64	; 0x40
 8001c64:	d107      	bne.n	8001c76 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff ff87 	bl	8001b82 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c74:	e03b      	b.n	8001cee <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff ff3f 	bl	8001b02 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c84:	e033      	b.n	8001cee <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
 8001c88:	2b21      	cmp	r3, #33	; 0x21
 8001c8a:	d005      	beq.n	8001c98 <I2C_MasterTransmit_TXE+0xda>
 8001c8c:	7bbb      	ldrb	r3, [r7, #14]
 8001c8e:	2b40      	cmp	r3, #64	; 0x40
 8001c90:	d12d      	bne.n	8001cee <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	2b22      	cmp	r3, #34	; 0x22
 8001c96:	d12a      	bne.n	8001cee <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d108      	bne.n	8001cb4 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cb0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001cb2:	e01c      	b.n	8001cee <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b40      	cmp	r3, #64	; 0x40
 8001cbe:	d103      	bne.n	8001cc8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 f88e 	bl	8001de2 <I2C_MemoryTransmit_TXE_BTF>
}
 8001cc6:	e012      	b.n	8001cee <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ccc:	781a      	ldrb	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	1c5a      	adds	r2, r3, #1
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001cec:	e7ff      	b.n	8001cee <I2C_MasterTransmit_TXE+0x130>
 8001cee:	bf00      	nop
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b084      	sub	sp, #16
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d02:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b21      	cmp	r3, #33	; 0x21
 8001d0e:	d164      	bne.n	8001dda <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d012      	beq.n	8001d40 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	781a      	ldrb	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	1c5a      	adds	r2, r3, #1
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	3b01      	subs	r3, #1
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001d3e:	e04c      	b.n	8001dda <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d01d      	beq.n	8001d82 <I2C_MasterTransmit_BTF+0x8c>
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2b20      	cmp	r3, #32
 8001d4a:	d01a      	beq.n	8001d82 <I2C_MasterTransmit_BTF+0x8c>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d52:	d016      	beq.n	8001d82 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d62:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2211      	movs	r2, #17
 8001d68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2220      	movs	r2, #32
 8001d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff fec1 	bl	8001b02 <HAL_I2C_MasterTxCpltCallback>
}
 8001d80:	e02b      	b.n	8001dda <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d90:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001da0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2220      	movs	r2, #32
 8001dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b40      	cmp	r3, #64	; 0x40
 8001dba:	d107      	bne.n	8001dcc <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff fedc 	bl	8001b82 <HAL_I2C_MemTxCpltCallback>
}
 8001dca:	e006      	b.n	8001dda <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff fe94 	bl	8001b02 <HAL_I2C_MasterTxCpltCallback>
}
 8001dda:	bf00      	nop
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b084      	sub	sp, #16
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001df0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d11d      	bne.n	8001e36 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d10b      	bne.n	8001e1a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e12:	1c9a      	adds	r2, r3, #2
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001e18:	e073      	b.n	8001f02 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	121b      	asrs	r3, r3, #8
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e34:	e065      	b.n	8001f02 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d10b      	bne.n	8001e56 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e54:	e055      	b.n	8001f02 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d151      	bne.n	8001f02 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	2b22      	cmp	r3, #34	; 0x22
 8001e62:	d10d      	bne.n	8001e80 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e72:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e78:	1c5a      	adds	r2, r3, #1
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e7e:	e040      	b.n	8001f02 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d015      	beq.n	8001eb6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	2b21      	cmp	r3, #33	; 0x21
 8001e8e:	d112      	bne.n	8001eb6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	781a      	ldrb	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	1c5a      	adds	r2, r3, #1
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	3b01      	subs	r3, #1
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001eb4:	e025      	b.n	8001f02 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d120      	bne.n	8001f02 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	2b21      	cmp	r3, #33	; 0x21
 8001ec4:	d11d      	bne.n	8001f02 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ed4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ee4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2220      	movs	r2, #32
 8001ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff fe40 	bl	8001b82 <HAL_I2C_MemTxCpltCallback>
}
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b084      	sub	sp, #16
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b22      	cmp	r3, #34	; 0x22
 8001f1c:	f040 80a2 	bne.w	8002064 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d921      	bls.n	8001f72 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	691a      	ldr	r2, [r3, #16]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	2b03      	cmp	r3, #3
 8001f5c:	f040 8082 	bne.w	8002064 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f6e:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8001f70:	e078      	b.n	8002064 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d074      	beq.n	8002064 <I2C_MasterReceive_RXNE+0x15a>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d002      	beq.n	8001f86 <I2C_MasterReceive_RXNE+0x7c>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d16e      	bne.n	8002064 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 ffae 	bl	8002ee8 <I2C_WaitOnSTOPRequestThroughIT>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d142      	bne.n	8002018 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fa0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001fb0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	691a      	ldr	r2, [r3, #16]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	1c5a      	adds	r2, r3, #1
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2220      	movs	r2, #32
 8001fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b40      	cmp	r3, #64	; 0x40
 8001fea:	d10a      	bne.n	8002002 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f009 fc2e 	bl	800b85c <HAL_I2C_MemRxCpltCallback>
}
 8002000:	e030      	b.n	8002064 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2212      	movs	r2, #18
 800200e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff fd80 	bl	8001b16 <HAL_I2C_MasterRxCpltCallback>
}
 8002016:	e025      	b.n	8002064 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002026:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	691a      	ldr	r2, [r3, #16]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002044:	b29b      	uxth	r3, r3
 8002046:	3b01      	subs	r3, #1
 8002048:	b29a      	uxth	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2220      	movs	r2, #32
 8002052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff fd99 	bl	8001b96 <HAL_I2C_ErrorCallback>
}
 8002064:	bf00      	nop
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002078:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207e:	b29b      	uxth	r3, r3
 8002080:	2b04      	cmp	r3, #4
 8002082:	d11b      	bne.n	80020bc <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002092:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	691a      	ldr	r2, [r3, #16]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	1c5a      	adds	r2, r3, #1
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	3b01      	subs	r3, #1
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80020ba:	e0bd      	b.n	8002238 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d129      	bne.n	800211a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020d4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2b04      	cmp	r3, #4
 80020da:	d00a      	beq.n	80020f2 <I2C_MasterReceive_BTF+0x86>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d007      	beq.n	80020f2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020f0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	691a      	ldr	r2, [r3, #16]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210e:	b29b      	uxth	r3, r3
 8002110:	3b01      	subs	r3, #1
 8002112:	b29a      	uxth	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002118:	e08e      	b.n	8002238 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800211e:	b29b      	uxth	r3, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d176      	bne.n	8002212 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d002      	beq.n	8002130 <I2C_MasterReceive_BTF+0xc4>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2b10      	cmp	r3, #16
 800212e:	d108      	bne.n	8002142 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	e019      	b.n	8002176 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2b04      	cmp	r3, #4
 8002146:	d002      	beq.n	800214e <I2C_MasterReceive_BTF+0xe2>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2b02      	cmp	r3, #2
 800214c:	d108      	bne.n	8002160 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	e00a      	b.n	8002176 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2b10      	cmp	r3, #16
 8002164:	d007      	beq.n	8002176 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002174:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	1c5a      	adds	r2, r3, #1
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002192:	b29b      	uxth	r3, r3
 8002194:	3b01      	subs	r3, #1
 8002196:	b29a      	uxth	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	691a      	ldr	r2, [r3, #16]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	3b01      	subs	r3, #1
 80021bc:	b29a      	uxth	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80021d0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2220      	movs	r2, #32
 80021d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b40      	cmp	r3, #64	; 0x40
 80021e4:	d10a      	bne.n	80021fc <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f009 fb31 	bl	800b85c <HAL_I2C_MemRxCpltCallback>
}
 80021fa:	e01d      	b.n	8002238 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2212      	movs	r2, #18
 8002208:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff fc83 	bl	8001b16 <HAL_I2C_MasterRxCpltCallback>
}
 8002210:	e012      	b.n	8002238 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	1c5a      	adds	r2, r3, #1
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800222e:	b29b      	uxth	r3, r3
 8002230:	3b01      	subs	r3, #1
 8002232:	b29a      	uxth	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002238:	bf00      	nop
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b40      	cmp	r3, #64	; 0x40
 8002252:	d117      	bne.n	8002284 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002258:	2b00      	cmp	r3, #0
 800225a:	d109      	bne.n	8002270 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002260:	b2db      	uxtb	r3, r3
 8002262:	461a      	mov	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800226c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800226e:	e067      	b.n	8002340 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002274:	b2db      	uxtb	r3, r3
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	b2da      	uxtb	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	611a      	str	r2, [r3, #16]
}
 8002282:	e05d      	b.n	8002340 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800228c:	d133      	bne.n	80022f6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b21      	cmp	r3, #33	; 0x21
 8002298:	d109      	bne.n	80022ae <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	461a      	mov	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022aa:	611a      	str	r2, [r3, #16]
 80022ac:	e008      	b.n	80022c0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d004      	beq.n	80022d2 <I2C_Master_SB+0x92>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d108      	bne.n	80022e4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d032      	beq.n	8002340 <I2C_Master_SB+0x100>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d02d      	beq.n	8002340 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022f2:	605a      	str	r2, [r3, #4]
}
 80022f4:	e024      	b.n	8002340 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10e      	bne.n	800231c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	b29b      	uxth	r3, r3
 8002304:	11db      	asrs	r3, r3, #7
 8002306:	b2db      	uxtb	r3, r3
 8002308:	f003 0306 	and.w	r3, r3, #6
 800230c:	b2db      	uxtb	r3, r3
 800230e:	f063 030f 	orn	r3, r3, #15
 8002312:	b2da      	uxtb	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	611a      	str	r2, [r3, #16]
}
 800231a:	e011      	b.n	8002340 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002320:	2b01      	cmp	r3, #1
 8002322:	d10d      	bne.n	8002340 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002328:	b29b      	uxth	r3, r3
 800232a:	11db      	asrs	r3, r3, #7
 800232c:	b2db      	uxtb	r3, r3
 800232e:	f003 0306 	and.w	r3, r3, #6
 8002332:	b2db      	uxtb	r3, r3
 8002334:	f063 030e 	orn	r3, r3, #14
 8002338:	b2da      	uxtb	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	611a      	str	r2, [r3, #16]
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002358:	b2da      	uxtb	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002364:	2b00      	cmp	r3, #0
 8002366:	d004      	beq.n	8002372 <I2C_Master_ADD10+0x26>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800236c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236e:	2b00      	cmp	r3, #0
 8002370:	d108      	bne.n	8002384 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00c      	beq.n	8002394 <I2C_Master_ADD10+0x48>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002380:	2b00      	cmp	r3, #0
 8002382:	d007      	beq.n	8002394 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002392:	605a      	str	r2, [r3, #4]
  }
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b091      	sub	sp, #68	; 0x44
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023bc:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b22      	cmp	r3, #34	; 0x22
 80023c8:	f040 8169 	bne.w	800269e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10f      	bne.n	80023f4 <I2C_Master_ADDR+0x54>
 80023d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80023d8:	2b40      	cmp	r3, #64	; 0x40
 80023da:	d10b      	bne.n	80023f4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023dc:	2300      	movs	r3, #0
 80023de:	633b      	str	r3, [r7, #48]	; 0x30
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	633b      	str	r3, [r7, #48]	; 0x30
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	633b      	str	r3, [r7, #48]	; 0x30
 80023f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f2:	e160      	b.n	80026b6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d11d      	bne.n	8002438 <I2C_Master_ADDR+0x98>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002404:	d118      	bne.n	8002438 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002406:	2300      	movs	r3, #0
 8002408:	62fb      	str	r3, [r7, #44]	; 0x2c
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	62fb      	str	r3, [r7, #44]	; 0x2c
 800241a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800242a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	651a      	str	r2, [r3, #80]	; 0x50
 8002436:	e13e      	b.n	80026b6 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243c:	b29b      	uxth	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d113      	bne.n	800246a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002442:	2300      	movs	r3, #0
 8002444:	62bb      	str	r3, [r7, #40]	; 0x28
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	62bb      	str	r3, [r7, #40]	; 0x28
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	62bb      	str	r3, [r7, #40]	; 0x28
 8002456:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	e115      	b.n	8002696 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246e:	b29b      	uxth	r3, r3
 8002470:	2b01      	cmp	r3, #1
 8002472:	f040 808a 	bne.w	800258a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002478:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800247c:	d137      	bne.n	80024ee <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800248c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002498:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800249c:	d113      	bne.n	80024c6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ac:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ae:	2300      	movs	r3, #0
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	e0e7      	b.n	8002696 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024c6:	2300      	movs	r3, #0
 80024c8:	623b      	str	r3, [r7, #32]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	623b      	str	r3, [r7, #32]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	623b      	str	r3, [r7, #32]
 80024da:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	e0d3      	b.n	8002696 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80024ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d02e      	beq.n	8002552 <I2C_Master_ADDR+0x1b2>
 80024f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f6:	2b20      	cmp	r3, #32
 80024f8:	d02b      	beq.n	8002552 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80024fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024fc:	2b12      	cmp	r3, #18
 80024fe:	d102      	bne.n	8002506 <I2C_Master_ADDR+0x166>
 8002500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002502:	2b01      	cmp	r3, #1
 8002504:	d125      	bne.n	8002552 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002508:	2b04      	cmp	r3, #4
 800250a:	d00e      	beq.n	800252a <I2C_Master_ADDR+0x18a>
 800250c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800250e:	2b02      	cmp	r3, #2
 8002510:	d00b      	beq.n	800252a <I2C_Master_ADDR+0x18a>
 8002512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002514:	2b10      	cmp	r3, #16
 8002516:	d008      	beq.n	800252a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	e007      	b.n	800253a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002538:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	61fb      	str	r3, [r7, #28]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	61fb      	str	r3, [r7, #28]
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	e0a1      	b.n	8002696 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002560:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	61bb      	str	r3, [r7, #24]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	61bb      	str	r3, [r7, #24]
 8002576:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	e085      	b.n	8002696 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258e:	b29b      	uxth	r3, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d14d      	bne.n	8002630 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002596:	2b04      	cmp	r3, #4
 8002598:	d016      	beq.n	80025c8 <I2C_Master_ADDR+0x228>
 800259a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800259c:	2b02      	cmp	r3, #2
 800259e:	d013      	beq.n	80025c8 <I2C_Master_ADDR+0x228>
 80025a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a2:	2b10      	cmp	r3, #16
 80025a4:	d010      	beq.n	80025c8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025b4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	e007      	b.n	80025d8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025d6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025e6:	d117      	bne.n	8002618 <I2C_Master_ADDR+0x278>
 80025e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025ee:	d00b      	beq.n	8002608 <I2C_Master_ADDR+0x268>
 80025f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d008      	beq.n	8002608 <I2C_Master_ADDR+0x268>
 80025f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d005      	beq.n	8002608 <I2C_Master_ADDR+0x268>
 80025fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fe:	2b10      	cmp	r3, #16
 8002600:	d002      	beq.n	8002608 <I2C_Master_ADDR+0x268>
 8002602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002604:	2b20      	cmp	r3, #32
 8002606:	d107      	bne.n	8002618 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002616:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	e032      	b.n	8002696 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800263e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800264a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800264e:	d117      	bne.n	8002680 <I2C_Master_ADDR+0x2e0>
 8002650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002652:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002656:	d00b      	beq.n	8002670 <I2C_Master_ADDR+0x2d0>
 8002658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800265a:	2b01      	cmp	r3, #1
 800265c:	d008      	beq.n	8002670 <I2C_Master_ADDR+0x2d0>
 800265e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002660:	2b08      	cmp	r3, #8
 8002662:	d005      	beq.n	8002670 <I2C_Master_ADDR+0x2d0>
 8002664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002666:	2b10      	cmp	r3, #16
 8002668:	d002      	beq.n	8002670 <I2C_Master_ADDR+0x2d0>
 800266a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800266c:	2b20      	cmp	r3, #32
 800266e:	d107      	bne.n	8002680 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800267e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002680:	2300      	movs	r3, #0
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	613b      	str	r3, [r7, #16]
 8002694:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800269c:	e00b      	b.n	80026b6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	68fb      	ldr	r3, [r7, #12]
}
 80026b4:	e7ff      	b.n	80026b6 <I2C_Master_ADDR+0x316>
 80026b6:	bf00      	nop
 80026b8:	3744      	adds	r7, #68	; 0x44
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b084      	sub	sp, #16
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d02b      	beq.n	8002734 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	781a      	ldrb	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	3b01      	subs	r3, #1
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002704:	b29b      	uxth	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d114      	bne.n	8002734 <I2C_SlaveTransmit_TXE+0x72>
 800270a:	7bfb      	ldrb	r3, [r7, #15]
 800270c:	2b29      	cmp	r3, #41	; 0x29
 800270e:	d111      	bne.n	8002734 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800271e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2221      	movs	r2, #33	; 0x21
 8002724:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2228      	movs	r2, #40	; 0x28
 800272a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7ff f9fb 	bl	8001b2a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002734:	bf00      	nop
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002748:	b29b      	uxth	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d011      	beq.n	8002772 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	781a      	ldrb	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002768:	b29b      	uxth	r3, r3
 800276a:	3b01      	subs	r3, #1
 800276c:	b29a      	uxth	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b084      	sub	sp, #16
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800278c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002792:	b29b      	uxth	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d02c      	beq.n	80027f2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	691a      	ldr	r2, [r3, #16]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d114      	bne.n	80027f2 <I2C_SlaveReceive_RXNE+0x74>
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	2b2a      	cmp	r3, #42	; 0x2a
 80027cc:	d111      	bne.n	80027f2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027dc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2222      	movs	r2, #34	; 0x22
 80027e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2228      	movs	r2, #40	; 0x28
 80027e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff f9a6 	bl	8001b3e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80027f2:	bf00      	nop
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002806:	b29b      	uxth	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	d012      	beq.n	8002832 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	691a      	ldr	r2, [r3, #16]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	1c5a      	adds	r2, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002828:	b29b      	uxth	r3, r3
 800282a:	3b01      	subs	r3, #1
 800282c:	b29a      	uxth	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b084      	sub	sp, #16
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
 8002846:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002848:	2300      	movs	r3, #0
 800284a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002852:	b2db      	uxtb	r3, r3
 8002854:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002858:	2b28      	cmp	r3, #40	; 0x28
 800285a:	d127      	bne.n	80028ac <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800286a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	089b      	lsrs	r3, r3, #2
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002878:	2301      	movs	r3, #1
 800287a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	09db      	lsrs	r3, r3, #7
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	d103      	bne.n	8002890 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	81bb      	strh	r3, [r7, #12]
 800288e:	e002      	b.n	8002896 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800289e:	89ba      	ldrh	r2, [r7, #12]
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	4619      	mov	r1, r3
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7ff f954 	bl	8001b52 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80028aa:	e00e      	b.n	80028ca <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ac:	2300      	movs	r3, #0
 80028ae:	60bb      	str	r3, [r7, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	60bb      	str	r3, [r7, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	60bb      	str	r3, [r7, #8]
 80028c0:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80028ca:	bf00      	nop
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028f2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80028f4:	2300      	movs	r3, #0
 80028f6:	60bb      	str	r3, [r7, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	60bb      	str	r3, [r7, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0201 	orr.w	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002920:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800292c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002930:	d172      	bne.n	8002a18 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002932:	7bfb      	ldrb	r3, [r7, #15]
 8002934:	2b22      	cmp	r3, #34	; 0x22
 8002936:	d002      	beq.n	800293e <I2C_Slave_STOPF+0x6a>
 8002938:	7bfb      	ldrb	r3, [r7, #15]
 800293a:	2b2a      	cmp	r3, #42	; 0x2a
 800293c:	d135      	bne.n	80029aa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	b29a      	uxth	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002950:	b29b      	uxth	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d005      	beq.n	8002962 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f043 0204 	orr.w	r2, r3, #4
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002970:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe fad8 	bl	8000f2c <HAL_DMA_GetState>
 800297c:	4603      	mov	r3, r0
 800297e:	2b01      	cmp	r3, #1
 8002980:	d049      	beq.n	8002a16 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002986:	4a69      	ldr	r2, [pc, #420]	; (8002b2c <I2C_Slave_STOPF+0x258>)
 8002988:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298e:	4618      	mov	r0, r3
 8002990:	f7fe f920 	bl	8000bd4 <HAL_DMA_Abort_IT>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d03d      	beq.n	8002a16 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029a4:	4610      	mov	r0, r2
 80029a6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029a8:	e035      	b.n	8002a16 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029bc:	b29b      	uxth	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d005      	beq.n	80029ce <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f043 0204 	orr.w	r2, r3, #4
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029dc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fe faa2 	bl	8000f2c <HAL_DMA_GetState>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d014      	beq.n	8002a18 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f2:	4a4e      	ldr	r2, [pc, #312]	; (8002b2c <I2C_Slave_STOPF+0x258>)
 80029f4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe f8ea 	bl	8000bd4 <HAL_DMA_Abort_IT>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d008      	beq.n	8002a18 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a10:	4610      	mov	r0, r2
 8002a12:	4798      	blx	r3
 8002a14:	e000      	b.n	8002a18 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a16:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d03e      	beq.n	8002aa0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d112      	bne.n	8002a56 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	691a      	ldr	r2, [r3, #16]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	1c5a      	adds	r2, r3, #1
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a60:	2b40      	cmp	r3, #64	; 0x40
 8002a62:	d112      	bne.n	8002a8a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691a      	ldr	r2, [r3, #16]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	1c5a      	adds	r2, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	3b01      	subs	r3, #1
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a98:	f043 0204 	orr.w	r2, r3, #4
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f843 	bl	8002b34 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002aae:	e039      	b.n	8002b24 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
 8002ab2:	2b2a      	cmp	r3, #42	; 0x2a
 8002ab4:	d109      	bne.n	8002aca <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2228      	movs	r2, #40	; 0x28
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7ff f83a 	bl	8001b3e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b28      	cmp	r3, #40	; 0x28
 8002ad4:	d111      	bne.n	8002afa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a15      	ldr	r2, [pc, #84]	; (8002b30 <I2C_Slave_STOPF+0x25c>)
 8002ada:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7ff f83b 	bl	8001b6e <HAL_I2C_ListenCpltCallback>
}
 8002af8:	e014      	b.n	8002b24 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	2b22      	cmp	r3, #34	; 0x22
 8002b00:	d002      	beq.n	8002b08 <I2C_Slave_STOPF+0x234>
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
 8002b04:	2b22      	cmp	r3, #34	; 0x22
 8002b06:	d10d      	bne.n	8002b24 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2220      	movs	r2, #32
 8002b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7ff f80d 	bl	8001b3e <HAL_I2C_SlaveRxCpltCallback>
}
 8002b24:	bf00      	nop
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	08002d99 	.word	0x08002d99
 8002b30:	ffff0000 	.word	0xffff0000

08002b34 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b42:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b4a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002b4c:	7bbb      	ldrb	r3, [r7, #14]
 8002b4e:	2b10      	cmp	r3, #16
 8002b50:	d002      	beq.n	8002b58 <I2C_ITError+0x24>
 8002b52:	7bbb      	ldrb	r3, [r7, #14]
 8002b54:	2b40      	cmp	r3, #64	; 0x40
 8002b56:	d10a      	bne.n	8002b6e <I2C_ITError+0x3a>
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
 8002b5a:	2b22      	cmp	r3, #34	; 0x22
 8002b5c:	d107      	bne.n	8002b6e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b6c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
 8002b70:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b74:	2b28      	cmp	r3, #40	; 0x28
 8002b76:	d107      	bne.n	8002b88 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2228      	movs	r2, #40	; 0x28
 8002b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002b86:	e015      	b.n	8002bb4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b96:	d00a      	beq.n	8002bae <I2C_ITError+0x7a>
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
 8002b9a:	2b60      	cmp	r3, #96	; 0x60
 8002b9c:	d007      	beq.n	8002bae <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bc2:	d162      	bne.n	8002c8a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bd2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d020      	beq.n	8002c24 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be6:	4a6a      	ldr	r2, [pc, #424]	; (8002d90 <I2C_ITError+0x25c>)
 8002be8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fd fff0 	bl	8000bd4 <HAL_DMA_Abort_IT>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 8089 	beq.w	8002d0e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0201 	bic.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c1e:	4610      	mov	r0, r2
 8002c20:	4798      	blx	r3
 8002c22:	e074      	b.n	8002d0e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c28:	4a59      	ldr	r2, [pc, #356]	; (8002d90 <I2C_ITError+0x25c>)
 8002c2a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fd ffcf 	bl	8000bd4 <HAL_DMA_Abort_IT>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d068      	beq.n	8002d0e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c46:	2b40      	cmp	r3, #64	; 0x40
 8002c48:	d10b      	bne.n	8002c62 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0201 	bic.w	r2, r2, #1
 8002c70:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2220      	movs	r2, #32
 8002c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c84:	4610      	mov	r0, r2
 8002c86:	4798      	blx	r3
 8002c88:	e041      	b.n	8002d0e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b60      	cmp	r3, #96	; 0x60
 8002c94:	d125      	bne.n	8002ce2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2220      	movs	r2, #32
 8002c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cae:	2b40      	cmp	r3, #64	; 0x40
 8002cb0:	d10b      	bne.n	8002cca <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	1c5a      	adds	r2, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0201 	bic.w	r2, r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7fe ff65 	bl	8001baa <HAL_I2C_AbortCpltCallback>
 8002ce0:	e015      	b.n	8002d0e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cec:	2b40      	cmp	r3, #64	; 0x40
 8002cee:	d10b      	bne.n	8002d08 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	691a      	ldr	r2, [r3, #16]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7fe ff44 	bl	8001b96 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10e      	bne.n	8002d3c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d109      	bne.n	8002d3c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d104      	bne.n	8002d3c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d007      	beq.n	8002d4c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d4a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d52:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	d113      	bne.n	8002d88 <I2C_ITError+0x254>
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	2b28      	cmp	r3, #40	; 0x28
 8002d64:	d110      	bne.n	8002d88 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a0a      	ldr	r2, [pc, #40]	; (8002d94 <I2C_ITError+0x260>)
 8002d6a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7fe fef3 	bl	8001b6e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d88:	bf00      	nop
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	08002d99 	.word	0x08002d99
 8002d94:	ffff0000 	.word	0xffff0000

08002d98 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002db2:	4b4b      	ldr	r3, [pc, #300]	; (8002ee0 <I2C_DMAAbort+0x148>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	08db      	lsrs	r3, r3, #3
 8002db8:	4a4a      	ldr	r2, [pc, #296]	; (8002ee4 <I2C_DMAAbort+0x14c>)
 8002dba:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbe:	0a1a      	lsrs	r2, r3, #8
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	00da      	lsls	r2, r3, #3
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	f043 0220 	orr.w	r2, r3, #32
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002dde:	e00a      	b.n	8002df6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002df4:	d0ea      	beq.n	8002dcc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e02:	2200      	movs	r2, #0
 8002e04:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e12:	2200      	movs	r2, #0
 8002e14:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e24:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e38:	2200      	movs	r2, #0
 8002e3a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e48:	2200      	movs	r2, #0
 8002e4a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0201 	bic.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b60      	cmp	r3, #96	; 0x60
 8002e66:	d10e      	bne.n	8002e86 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e7e:	6978      	ldr	r0, [r7, #20]
 8002e80:	f7fe fe93 	bl	8001baa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e84:	e027      	b.n	8002ed6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e86:	7cfb      	ldrb	r3, [r7, #19]
 8002e88:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e8c:	2b28      	cmp	r3, #40	; 0x28
 8002e8e:	d117      	bne.n	8002ec0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0201 	orr.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002eae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2228      	movs	r2, #40	; 0x28
 8002eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002ebe:	e007      	b.n	8002ed0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002ed0:	6978      	ldr	r0, [r7, #20]
 8002ed2:	f7fe fe60 	bl	8001b96 <HAL_I2C_ErrorCallback>
}
 8002ed6:	bf00      	nop
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20000118 	.word	0x20000118
 8002ee4:	14f8b589 	.word	0x14f8b589

08002ee8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002ef4:	4b13      	ldr	r3, [pc, #76]	; (8002f44 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	08db      	lsrs	r3, r3, #3
 8002efa:	4a13      	ldr	r2, [pc, #76]	; (8002f48 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002efc:	fba2 2303 	umull	r2, r3, r2, r3
 8002f00:	0a1a      	lsrs	r2, r3, #8
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d107      	bne.n	8002f26 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f043 0220 	orr.w	r2, r3, #32
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e008      	b.n	8002f38 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f34:	d0e9      	beq.n	8002f0a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	20000118 	.word	0x20000118
 8002f48:	14f8b589 	.word	0x14f8b589

08002f4c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f58:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002f5c:	d103      	bne.n	8002f66 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002f64:	e007      	b.n	8002f76 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002f6e:	d102      	bne.n	8002f76 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2208      	movs	r2, #8
 8002f74:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f84:	b08f      	sub	sp, #60	; 0x3c
 8002f86:	af0a      	add	r7, sp, #40	; 0x28
 8002f88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e10f      	b.n	80031b4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d106      	bne.n	8002fb4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f008 fd7a 	bl	800baa8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2203      	movs	r2, #3
 8002fb8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d102      	bne.n	8002fce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f004 fb9f 	bl	8007716 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	603b      	str	r3, [r7, #0]
 8002fde:	687e      	ldr	r6, [r7, #4]
 8002fe0:	466d      	mov	r5, sp
 8002fe2:	f106 0410 	add.w	r4, r6, #16
 8002fe6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fe8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ff2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ff6:	1d33      	adds	r3, r6, #4
 8002ff8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ffa:	6838      	ldr	r0, [r7, #0]
 8002ffc:	f004 fa76 	bl	80074ec <USB_CoreInit>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d005      	beq.n	8003012 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2202      	movs	r2, #2
 800300a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e0d0      	b.n	80031b4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2100      	movs	r1, #0
 8003018:	4618      	mov	r0, r3
 800301a:	f004 fb8d 	bl	8007738 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800301e:	2300      	movs	r3, #0
 8003020:	73fb      	strb	r3, [r7, #15]
 8003022:	e04a      	b.n	80030ba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003024:	7bfa      	ldrb	r2, [r7, #15]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	1a9b      	subs	r3, r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	333d      	adds	r3, #61	; 0x3d
 8003034:	2201      	movs	r2, #1
 8003036:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003038:	7bfa      	ldrb	r2, [r7, #15]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	1a9b      	subs	r3, r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	333c      	adds	r3, #60	; 0x3c
 8003048:	7bfa      	ldrb	r2, [r7, #15]
 800304a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800304c:	7bfa      	ldrb	r2, [r7, #15]
 800304e:	7bfb      	ldrb	r3, [r7, #15]
 8003050:	b298      	uxth	r0, r3
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	1a9b      	subs	r3, r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	3342      	adds	r3, #66	; 0x42
 8003060:	4602      	mov	r2, r0
 8003062:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003064:	7bfa      	ldrb	r2, [r7, #15]
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	1a9b      	subs	r3, r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	333f      	adds	r3, #63	; 0x3f
 8003074:	2200      	movs	r2, #0
 8003076:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003078:	7bfa      	ldrb	r2, [r7, #15]
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	4613      	mov	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	1a9b      	subs	r3, r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	3344      	adds	r3, #68	; 0x44
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800308c:	7bfa      	ldrb	r2, [r7, #15]
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	4613      	mov	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	1a9b      	subs	r3, r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	3348      	adds	r3, #72	; 0x48
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030a0:	7bfa      	ldrb	r2, [r7, #15]
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	4613      	mov	r3, r2
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	1a9b      	subs	r3, r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	3350      	adds	r3, #80	; 0x50
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
 80030b6:	3301      	adds	r3, #1
 80030b8:	73fb      	strb	r3, [r7, #15]
 80030ba:	7bfa      	ldrb	r2, [r7, #15]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d3af      	bcc.n	8003024 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030c4:	2300      	movs	r3, #0
 80030c6:	73fb      	strb	r3, [r7, #15]
 80030c8:	e044      	b.n	8003154 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030ca:	7bfa      	ldrb	r2, [r7, #15]
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	1a9b      	subs	r3, r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80030dc:	2200      	movs	r2, #0
 80030de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030e0:	7bfa      	ldrb	r2, [r7, #15]
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80030f2:	7bfa      	ldrb	r2, [r7, #15]
 80030f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030f6:	7bfa      	ldrb	r2, [r7, #15]
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	4613      	mov	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	1a9b      	subs	r3, r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003108:	2200      	movs	r2, #0
 800310a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800310c:	7bfa      	ldrb	r2, [r7, #15]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003122:	7bfa      	ldrb	r2, [r7, #15]
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	1a9b      	subs	r3, r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003138:	7bfa      	ldrb	r2, [r7, #15]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800314a:	2200      	movs	r2, #0
 800314c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	3301      	adds	r3, #1
 8003152:	73fb      	strb	r3, [r7, #15]
 8003154:	7bfa      	ldrb	r2, [r7, #15]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	429a      	cmp	r2, r3
 800315c:	d3b5      	bcc.n	80030ca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	603b      	str	r3, [r7, #0]
 8003164:	687e      	ldr	r6, [r7, #4]
 8003166:	466d      	mov	r5, sp
 8003168:	f106 0410 	add.w	r4, r6, #16
 800316c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800316e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003170:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003172:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003174:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003178:	e885 0003 	stmia.w	r5, {r0, r1}
 800317c:	1d33      	adds	r3, r6, #4
 800317e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003180:	6838      	ldr	r0, [r7, #0]
 8003182:	f004 fb25 	bl	80077d0 <USB_DevInit>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d005      	beq.n	8003198 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e00d      	b.n	80031b4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f005 fba1 	bl	80088f4 <USB_DevDisconnect>

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d101      	bne.n	80031d8 <HAL_PCD_Start+0x1c>
 80031d4:	2302      	movs	r3, #2
 80031d6:	e020      	b.n	800321a <HAL_PCD_Start+0x5e>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d109      	bne.n	80031fc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d005      	beq.n	80031fc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f004 fa77 	bl	80076f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f005 fb51 	bl	80088b2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003222:	b590      	push	{r4, r7, lr}
 8003224:	b08d      	sub	sp, #52	; 0x34
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003230:	6a3b      	ldr	r3, [r7, #32]
 8003232:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f005 fc0f 	bl	8008a5c <USB_GetMode>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	f040 839d 	bne.w	8003980 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f005 fb73 	bl	8008936 <USB_ReadInterrupts>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 8393 	beq.w	800397e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f005 fb6a 	bl	8008936 <USB_ReadInterrupts>
 8003262:	4603      	mov	r3, r0
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b02      	cmp	r3, #2
 800326a:	d107      	bne.n	800327c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695a      	ldr	r2, [r3, #20]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f002 0202 	and.w	r2, r2, #2
 800327a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f005 fb58 	bl	8008936 <USB_ReadInterrupts>
 8003286:	4603      	mov	r3, r0
 8003288:	f003 0310 	and.w	r3, r3, #16
 800328c:	2b10      	cmp	r3, #16
 800328e:	d161      	bne.n	8003354 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699a      	ldr	r2, [r3, #24]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0210 	bic.w	r2, r2, #16
 800329e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80032a0:	6a3b      	ldr	r3, [r7, #32]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	f003 020f 	and.w	r2, r3, #15
 80032ac:	4613      	mov	r3, r2
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	1a9b      	subs	r3, r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	4413      	add	r3, r2
 80032bc:	3304      	adds	r3, #4
 80032be:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	0c5b      	lsrs	r3, r3, #17
 80032c4:	f003 030f 	and.w	r3, r3, #15
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d124      	bne.n	8003316 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80032d2:	4013      	ands	r3, r2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d035      	beq.n	8003344 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	091b      	lsrs	r3, r3, #4
 80032e0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	461a      	mov	r2, r3
 80032ea:	6a38      	ldr	r0, [r7, #32]
 80032ec:	f005 f98f 	bl	800860e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	68da      	ldr	r2, [r3, #12]
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	091b      	lsrs	r3, r3, #4
 80032f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032fc:	441a      	add	r2, r3
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	091b      	lsrs	r3, r3, #4
 800330a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800330e:	441a      	add	r2, r3
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	619a      	str	r2, [r3, #24]
 8003314:	e016      	b.n	8003344 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	0c5b      	lsrs	r3, r3, #17
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	2b06      	cmp	r3, #6
 8003320:	d110      	bne.n	8003344 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003328:	2208      	movs	r2, #8
 800332a:	4619      	mov	r1, r3
 800332c:	6a38      	ldr	r0, [r7, #32]
 800332e:	f005 f96e 	bl	800860e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	699a      	ldr	r2, [r3, #24]
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	091b      	lsrs	r3, r3, #4
 800333a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800333e:	441a      	add	r2, r3
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699a      	ldr	r2, [r3, #24]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0210 	orr.w	r2, r2, #16
 8003352:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4618      	mov	r0, r3
 800335a:	f005 faec 	bl	8008936 <USB_ReadInterrupts>
 800335e:	4603      	mov	r3, r0
 8003360:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003364:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003368:	d16e      	bne.n	8003448 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f005 faf2 	bl	800895c <USB_ReadDevAllOutEpInterrupt>
 8003378:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800337a:	e062      	b.n	8003442 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800337c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d057      	beq.n	8003436 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	4611      	mov	r1, r2
 8003390:	4618      	mov	r0, r3
 8003392:	f005 fb17 	bl	80089c4 <USB_ReadDevOutEPInterrupt>
 8003396:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00c      	beq.n	80033bc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	015a      	lsls	r2, r3, #5
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	4413      	add	r3, r2
 80033aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ae:	461a      	mov	r2, r3
 80033b0:	2301      	movs	r3, #1
 80033b2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80033b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 fdb0 	bl	8003f1c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00c      	beq.n	80033e0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d2:	461a      	mov	r2, r3
 80033d4:	2308      	movs	r3, #8
 80033d6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80033d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 feaa 	bl	8004134 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d008      	beq.n	80033fc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033f6:	461a      	mov	r2, r3
 80033f8:	2310      	movs	r3, #16
 80033fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f003 0320 	and.w	r3, r3, #32
 8003402:	2b00      	cmp	r3, #0
 8003404:	d008      	beq.n	8003418 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	015a      	lsls	r2, r3, #5
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	4413      	add	r3, r2
 800340e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003412:	461a      	mov	r2, r3
 8003414:	2320      	movs	r3, #32
 8003416:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d009      	beq.n	8003436 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	015a      	lsls	r2, r3, #5
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	4413      	add	r3, r2
 800342a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800342e:	461a      	mov	r2, r3
 8003430:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003434:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	3301      	adds	r3, #1
 800343a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800343c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343e:	085b      	lsrs	r3, r3, #1
 8003440:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003444:	2b00      	cmp	r3, #0
 8003446:	d199      	bne.n	800337c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f005 fa72 	bl	8008936 <USB_ReadInterrupts>
 8003452:	4603      	mov	r3, r0
 8003454:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003458:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800345c:	f040 80c0 	bne.w	80035e0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f005 fa93 	bl	8008990 <USB_ReadDevAllInEpInterrupt>
 800346a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003470:	e0b2      	b.n	80035d8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80a7 	beq.w	80035cc <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	4611      	mov	r1, r2
 8003488:	4618      	mov	r0, r3
 800348a:	f005 fab9 	bl	8008a00 <USB_ReadDevInEPInterrupt>
 800348e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d057      	beq.n	800354a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	f003 030f 	and.w	r3, r3, #15
 80034a0:	2201      	movs	r2, #1
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	43db      	mvns	r3, r3
 80034b4:	69f9      	ldr	r1, [r7, #28]
 80034b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034ba:	4013      	ands	r3, r2
 80034bc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	015a      	lsls	r2, r3, #5
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	4413      	add	r3, r2
 80034c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ca:	461a      	mov	r2, r3
 80034cc:	2301      	movs	r3, #1
 80034ce:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d132      	bne.n	800353e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034dc:	4613      	mov	r3, r2
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	1a9b      	subs	r3, r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	3348      	adds	r3, #72	; 0x48
 80034e8:	6819      	ldr	r1, [r3, #0]
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ee:	4613      	mov	r3, r2
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4403      	add	r3, r0
 80034f8:	3344      	adds	r3, #68	; 0x44
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4419      	add	r1, r3
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003502:	4613      	mov	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	1a9b      	subs	r3, r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4403      	add	r3, r0
 800350c:	3348      	adds	r3, #72	; 0x48
 800350e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	2b00      	cmp	r3, #0
 8003514:	d113      	bne.n	800353e <HAL_PCD_IRQHandler+0x31c>
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351a:	4613      	mov	r3, r2
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	3350      	adds	r3, #80	; 0x50
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d108      	bne.n	800353e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6818      	ldr	r0, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003536:	461a      	mov	r2, r3
 8003538:	2101      	movs	r1, #1
 800353a:	f005 fac1 	bl	8008ac0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	b2db      	uxtb	r3, r3
 8003542:	4619      	mov	r1, r3
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f008 fb30 	bl	800bbaa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	2b00      	cmp	r3, #0
 8003552:	d008      	beq.n	8003566 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	015a      	lsls	r2, r3, #5
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	4413      	add	r3, r2
 800355c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003560:	461a      	mov	r2, r3
 8003562:	2308      	movs	r3, #8
 8003564:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f003 0310 	and.w	r3, r3, #16
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	4413      	add	r3, r2
 8003578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800357c:	461a      	mov	r2, r3
 800357e:	2310      	movs	r3, #16
 8003580:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003588:	2b00      	cmp	r3, #0
 800358a:	d008      	beq.n	800359e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	4413      	add	r3, r2
 8003594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003598:	461a      	mov	r2, r3
 800359a:	2340      	movs	r3, #64	; 0x40
 800359c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d008      	beq.n	80035ba <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b4:	461a      	mov	r2, r3
 80035b6:	2302      	movs	r3, #2
 80035b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80035c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 fc1b 	bl	8003e02 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	3301      	adds	r3, #1
 80035d0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80035d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d4:	085b      	lsrs	r3, r3, #1
 80035d6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80035d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f47f af49 	bne.w	8003472 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f005 f9a6 	bl	8008936 <USB_ReadInterrupts>
 80035ea:	4603      	mov	r3, r0
 80035ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035f4:	d122      	bne.n	800363c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	69fa      	ldr	r2, [r7, #28]
 8003600:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003604:	f023 0301 	bic.w	r3, r3, #1
 8003608:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003610:	2b01      	cmp	r3, #1
 8003612:	d108      	bne.n	8003626 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800361c:	2100      	movs	r1, #0
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fe26 	bl	8004270 <HAL_PCDEx_LPM_Callback>
 8003624:	e002      	b.n	800362c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f008 fb2c 	bl	800bc84 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695a      	ldr	r2, [r3, #20]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800363a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f005 f978 	bl	8008936 <USB_ReadInterrupts>
 8003646:	4603      	mov	r3, r0
 8003648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800364c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003650:	d112      	bne.n	8003678 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b01      	cmp	r3, #1
 8003660:	d102      	bne.n	8003668 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f008 fae8 	bl	800bc38 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	695a      	ldr	r2, [r3, #20]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003676:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f005 f95a 	bl	8008936 <USB_ReadInterrupts>
 8003682:	4603      	mov	r3, r0
 8003684:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800368c:	f040 80c7 	bne.w	800381e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	69fa      	ldr	r2, [r7, #28]
 800369a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800369e:	f023 0301 	bic.w	r3, r3, #1
 80036a2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2110      	movs	r1, #16
 80036aa:	4618      	mov	r0, r3
 80036ac:	f004 f9f4 	bl	8007a98 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036b0:	2300      	movs	r3, #0
 80036b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036b4:	e056      	b.n	8003764 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80036b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b8:	015a      	lsls	r2, r3, #5
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	4413      	add	r3, r2
 80036be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c2:	461a      	mov	r2, r3
 80036c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036c8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80036ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036cc:	015a      	lsls	r2, r3, #5
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036da:	0151      	lsls	r1, r2, #5
 80036dc:	69fa      	ldr	r2, [r7, #28]
 80036de:	440a      	add	r2, r1
 80036e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036e8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80036ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ec:	015a      	lsls	r2, r3, #5
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036fa:	0151      	lsls	r1, r2, #5
 80036fc:	69fa      	ldr	r2, [r7, #28]
 80036fe:	440a      	add	r2, r1
 8003700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003704:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003708:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800370a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	4413      	add	r3, r2
 8003712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003716:	461a      	mov	r2, r3
 8003718:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800371c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800371e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003720:	015a      	lsls	r2, r3, #5
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	4413      	add	r3, r2
 8003726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800372e:	0151      	lsls	r1, r2, #5
 8003730:	69fa      	ldr	r2, [r7, #28]
 8003732:	440a      	add	r2, r1
 8003734:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003738:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800373c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800373e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	4413      	add	r3, r2
 8003746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800374e:	0151      	lsls	r1, r2, #5
 8003750:	69fa      	ldr	r2, [r7, #28]
 8003752:	440a      	add	r2, r1
 8003754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003758:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800375c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800375e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003760:	3301      	adds	r3, #1
 8003762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800376a:	429a      	cmp	r2, r3
 800376c:	d3a3      	bcc.n	80036b6 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	69fa      	ldr	r2, [r7, #28]
 8003778:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800377c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003780:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	2b00      	cmp	r3, #0
 8003788:	d016      	beq.n	80037b8 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003790:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003794:	69fa      	ldr	r2, [r7, #28]
 8003796:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800379a:	f043 030b 	orr.w	r3, r3, #11
 800379e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037aa:	69fa      	ldr	r2, [r7, #28]
 80037ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037b0:	f043 030b 	orr.w	r3, r3, #11
 80037b4:	6453      	str	r3, [r2, #68]	; 0x44
 80037b6:	e015      	b.n	80037e4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	69fa      	ldr	r2, [r7, #28]
 80037c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037ca:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80037ce:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	69fa      	ldr	r2, [r7, #28]
 80037da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037de:	f043 030b 	orr.w	r3, r3, #11
 80037e2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	69fa      	ldr	r2, [r7, #28]
 80037ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80037f6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6818      	ldr	r0, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003808:	461a      	mov	r2, r3
 800380a:	f005 f959 	bl	8008ac0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	695a      	ldr	r2, [r3, #20]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800381c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f005 f887 	bl	8008936 <USB_ReadInterrupts>
 8003828:	4603      	mov	r3, r0
 800382a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800382e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003832:	d124      	bne.n	800387e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f005 f91d 	bl	8008a78 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f004 f985 	bl	8007b52 <USB_GetDevSpeed>
 8003848:	4603      	mov	r3, r0
 800384a:	461a      	mov	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681c      	ldr	r4, [r3, #0]
 8003854:	f001 f936 	bl	8004ac4 <HAL_RCC_GetHCLKFreq>
 8003858:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800385e:	b2db      	uxtb	r3, r3
 8003860:	461a      	mov	r2, r3
 8003862:	4620      	mov	r0, r4
 8003864:	f003 fea4 	bl	80075b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f008 f9c6 	bl	800bbfa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695a      	ldr	r2, [r3, #20]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800387c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f005 f857 	bl	8008936 <USB_ReadInterrupts>
 8003888:	4603      	mov	r3, r0
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b08      	cmp	r3, #8
 8003890:	d10a      	bne.n	80038a8 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f008 f9a3 	bl	800bbde <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	695a      	ldr	r2, [r3, #20]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f002 0208 	and.w	r2, r2, #8
 80038a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f005 f842 	bl	8008936 <USB_ReadInterrupts>
 80038b2:	4603      	mov	r3, r0
 80038b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038bc:	d10f      	bne.n	80038de <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80038be:	2300      	movs	r3, #0
 80038c0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	4619      	mov	r1, r3
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f008 f9fb 	bl	800bcc4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695a      	ldr	r2, [r3, #20]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80038dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f005 f827 	bl	8008936 <USB_ReadInterrupts>
 80038e8:	4603      	mov	r3, r0
 80038ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038f2:	d10f      	bne.n	8003914 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	4619      	mov	r1, r3
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f008 f9ce 	bl	800bca0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	695a      	ldr	r2, [r3, #20]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003912:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4618      	mov	r0, r3
 800391a:	f005 f80c 	bl	8008936 <USB_ReadInterrupts>
 800391e:	4603      	mov	r3, r0
 8003920:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003928:	d10a      	bne.n	8003940 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f008 f9dc 	bl	800bce8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695a      	ldr	r2, [r3, #20]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800393e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f004 fff6 	bl	8008936 <USB_ReadInterrupts>
 800394a:	4603      	mov	r3, r0
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b04      	cmp	r3, #4
 8003952:	d115      	bne.n	8003980 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f008 f9cc 	bl	800bd04 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6859      	ldr	r1, [r3, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	430a      	orrs	r2, r1
 800397a:	605a      	str	r2, [r3, #4]
 800397c:	e000      	b.n	8003980 <HAL_PCD_IRQHandler+0x75e>
      return;
 800397e:	bf00      	nop
    }
  }
}
 8003980:	3734      	adds	r7, #52	; 0x34
 8003982:	46bd      	mov	sp, r7
 8003984:	bd90      	pop	{r4, r7, pc}

08003986 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b082      	sub	sp, #8
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
 800398e:	460b      	mov	r3, r1
 8003990:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_PCD_SetAddress+0x1a>
 800399c:	2302      	movs	r3, #2
 800399e:	e013      	b.n	80039c8 <HAL_PCD_SetAddress+0x42>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	78fa      	ldrb	r2, [r7, #3]
 80039ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	78fa      	ldrb	r2, [r7, #3]
 80039b6:	4611      	mov	r1, r2
 80039b8:	4618      	mov	r0, r3
 80039ba:	f004 ff54 	bl	8008866 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	4608      	mov	r0, r1
 80039da:	4611      	mov	r1, r2
 80039dc:	461a      	mov	r2, r3
 80039de:	4603      	mov	r3, r0
 80039e0:	70fb      	strb	r3, [r7, #3]
 80039e2:	460b      	mov	r3, r1
 80039e4:	803b      	strh	r3, [r7, #0]
 80039e6:	4613      	mov	r3, r2
 80039e8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	da0f      	bge.n	8003a16 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039f6:	78fb      	ldrb	r3, [r7, #3]
 80039f8:	f003 020f 	and.w	r2, r3, #15
 80039fc:	4613      	mov	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	1a9b      	subs	r3, r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	3338      	adds	r3, #56	; 0x38
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	4413      	add	r3, r2
 8003a0a:	3304      	adds	r3, #4
 8003a0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2201      	movs	r2, #1
 8003a12:	705a      	strb	r2, [r3, #1]
 8003a14:	e00f      	b.n	8003a36 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a16:	78fb      	ldrb	r3, [r7, #3]
 8003a18:	f003 020f 	and.w	r2, r3, #15
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	1a9b      	subs	r3, r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a36:	78fb      	ldrb	r3, [r7, #3]
 8003a38:	f003 030f 	and.w	r3, r3, #15
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a42:	883a      	ldrh	r2, [r7, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	78ba      	ldrb	r2, [r7, #2]
 8003a4c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	785b      	ldrb	r3, [r3, #1]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d004      	beq.n	8003a60 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a60:	78bb      	ldrb	r3, [r7, #2]
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d102      	bne.n	8003a6c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d101      	bne.n	8003a7a <HAL_PCD_EP_Open+0xaa>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e00e      	b.n	8003a98 <HAL_PCD_EP_Open+0xc8>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68f9      	ldr	r1, [r7, #12]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f004 f887 	bl	8007b9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003a96:	7afb      	ldrb	r3, [r7, #11]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003aac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	da0f      	bge.n	8003ad4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ab4:	78fb      	ldrb	r3, [r7, #3]
 8003ab6:	f003 020f 	and.w	r2, r3, #15
 8003aba:	4613      	mov	r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	1a9b      	subs	r3, r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	3338      	adds	r3, #56	; 0x38
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	3304      	adds	r3, #4
 8003aca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	705a      	strb	r2, [r3, #1]
 8003ad2:	e00f      	b.n	8003af4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ad4:	78fb      	ldrb	r3, [r7, #3]
 8003ad6:	f003 020f 	and.w	r2, r3, #15
 8003ada:	4613      	mov	r3, r2
 8003adc:	00db      	lsls	r3, r3, #3
 8003ade:	1a9b      	subs	r3, r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	4413      	add	r3, r2
 8003aea:	3304      	adds	r3, #4
 8003aec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003af4:	78fb      	ldrb	r3, [r7, #3]
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d101      	bne.n	8003b0e <HAL_PCD_EP_Close+0x6e>
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	e00e      	b.n	8003b2c <HAL_PCD_EP_Close+0x8c>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68f9      	ldr	r1, [r7, #12]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f004 f8c5 	bl	8007cac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	607a      	str	r2, [r7, #4]
 8003b3e:	603b      	str	r3, [r7, #0]
 8003b40:	460b      	mov	r3, r1
 8003b42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b44:	7afb      	ldrb	r3, [r7, #11]
 8003b46:	f003 020f 	and.w	r2, r3, #15
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	1a9b      	subs	r3, r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4413      	add	r3, r2
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	2200      	movs	r2, #0
 8003b74:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b76:	7afb      	ldrb	r3, [r7, #11]
 8003b78:	f003 030f 	and.w	r3, r3, #15
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d102      	bne.n	8003b90 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b90:	7afb      	ldrb	r3, [r7, #11]
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d109      	bne.n	8003bae <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	6979      	ldr	r1, [r7, #20]
 8003ba8:	f004 fba0 	bl	80082ec <USB_EP0StartXfer>
 8003bac:	e008      	b.n	8003bc0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6818      	ldr	r0, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	461a      	mov	r2, r3
 8003bba:	6979      	ldr	r1, [r7, #20]
 8003bbc:	f004 f952 	bl	8007e64 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003bd6:	78fb      	ldrb	r3, [r7, #3]
 8003bd8:	f003 020f 	and.w	r2, r3, #15
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	4613      	mov	r3, r2
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	1a9b      	subs	r3, r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	440b      	add	r3, r1
 8003be8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003bec:	681b      	ldr	r3, [r3, #0]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b086      	sub	sp, #24
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	60f8      	str	r0, [r7, #12]
 8003c02:	607a      	str	r2, [r7, #4]
 8003c04:	603b      	str	r3, [r7, #0]
 8003c06:	460b      	mov	r3, r1
 8003c08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c0a:	7afb      	ldrb	r3, [r7, #11]
 8003c0c:	f003 020f 	and.w	r2, r3, #15
 8003c10:	4613      	mov	r3, r2
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	1a9b      	subs	r3, r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	3338      	adds	r3, #56	; 0x38
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	3304      	adds	r3, #4
 8003c20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	2200      	movs	r2, #0
 8003c32:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	2201      	movs	r2, #1
 8003c38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c3a:	7afb      	ldrb	r3, [r7, #11]
 8003c3c:	f003 030f 	and.w	r3, r3, #15
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d102      	bne.n	8003c54 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c54:	7afb      	ldrb	r3, [r7, #11]
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d109      	bne.n	8003c72 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6818      	ldr	r0, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	461a      	mov	r2, r3
 8003c6a:	6979      	ldr	r1, [r7, #20]
 8003c6c:	f004 fb3e 	bl	80082ec <USB_EP0StartXfer>
 8003c70:	e008      	b.n	8003c84 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6818      	ldr	r0, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	6979      	ldr	r1, [r7, #20]
 8003c80:	f004 f8f0 	bl	8007e64 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3718      	adds	r7, #24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b084      	sub	sp, #16
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
 8003c96:	460b      	mov	r3, r1
 8003c98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c9a:	78fb      	ldrb	r3, [r7, #3]
 8003c9c:	f003 020f 	and.w	r2, r3, #15
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d901      	bls.n	8003cac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e050      	b.n	8003d4e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	da0f      	bge.n	8003cd4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cb4:	78fb      	ldrb	r3, [r7, #3]
 8003cb6:	f003 020f 	and.w	r2, r3, #15
 8003cba:	4613      	mov	r3, r2
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	1a9b      	subs	r3, r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	3338      	adds	r3, #56	; 0x38
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	3304      	adds	r3, #4
 8003cca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	705a      	strb	r2, [r3, #1]
 8003cd2:	e00d      	b.n	8003cf0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cd4:	78fa      	ldrb	r2, [r7, #3]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	1a9b      	subs	r3, r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cf6:	78fb      	ldrb	r3, [r7, #3]
 8003cf8:	f003 030f 	and.w	r3, r3, #15
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d101      	bne.n	8003d10 <HAL_PCD_EP_SetStall+0x82>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	e01e      	b.n	8003d4e <HAL_PCD_EP_SetStall+0xc0>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68f9      	ldr	r1, [r7, #12]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f004 fccd 	bl	80086be <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d24:	78fb      	ldrb	r3, [r7, #3]
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10a      	bne.n	8003d44 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6818      	ldr	r0, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	b2d9      	uxtb	r1, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d3e:	461a      	mov	r2, r3
 8003d40:	f004 febe 	bl	8008ac0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b084      	sub	sp, #16
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
 8003d5e:	460b      	mov	r3, r1
 8003d60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d62:	78fb      	ldrb	r3, [r7, #3]
 8003d64:	f003 020f 	and.w	r2, r3, #15
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d901      	bls.n	8003d74 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e042      	b.n	8003dfa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	da0f      	bge.n	8003d9c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d7c:	78fb      	ldrb	r3, [r7, #3]
 8003d7e:	f003 020f 	and.w	r2, r3, #15
 8003d82:	4613      	mov	r3, r2
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	1a9b      	subs	r3, r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	3338      	adds	r3, #56	; 0x38
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	4413      	add	r3, r2
 8003d90:	3304      	adds	r3, #4
 8003d92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2201      	movs	r2, #1
 8003d98:	705a      	strb	r2, [r3, #1]
 8003d9a:	e00f      	b.n	8003dbc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d9c:	78fb      	ldrb	r3, [r7, #3]
 8003d9e:	f003 020f 	and.w	r2, r3, #15
 8003da2:	4613      	mov	r3, r2
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	1a9b      	subs	r3, r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	4413      	add	r3, r2
 8003db2:	3304      	adds	r3, #4
 8003db4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dc2:	78fb      	ldrb	r3, [r7, #3]
 8003dc4:	f003 030f 	and.w	r3, r3, #15
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_PCD_EP_ClrStall+0x86>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e00e      	b.n	8003dfa <HAL_PCD_EP_ClrStall+0xa4>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68f9      	ldr	r1, [r7, #12]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f004 fcd5 	bl	800879a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b08a      	sub	sp, #40	; 0x28
 8003e06:	af02      	add	r7, sp, #8
 8003e08:	6078      	str	r0, [r7, #4]
 8003e0a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	1a9b      	subs	r3, r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	3338      	adds	r3, #56	; 0x38
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	4413      	add	r3, r2
 8003e26:	3304      	adds	r3, #4
 8003e28:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	699a      	ldr	r2, [r3, #24]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d901      	bls.n	8003e3a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e06c      	b.n	8003f14 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	695a      	ldr	r2, [r3, #20]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	69fa      	ldr	r2, [r7, #28]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d902      	bls.n	8003e56 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	3303      	adds	r3, #3
 8003e5a:	089b      	lsrs	r3, r3, #2
 8003e5c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e5e:	e02b      	b.n	8003eb8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	695a      	ldr	r2, [r3, #20]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	69fa      	ldr	r2, [r7, #28]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d902      	bls.n	8003e7c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	3303      	adds	r3, #3
 8003e80:	089b      	lsrs	r3, r3, #2
 8003e82:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	68d9      	ldr	r1, [r3, #12]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	4603      	mov	r3, r0
 8003e9a:	6978      	ldr	r0, [r7, #20]
 8003e9c:	f004 fb79 	bl	8008592 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	68da      	ldr	r2, [r3, #12]
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	441a      	add	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	699a      	ldr	r2, [r3, #24]
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	441a      	add	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	015a      	lsls	r2, r3, #5
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d809      	bhi.n	8003ee2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	699a      	ldr	r2, [r3, #24]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d203      	bcs.n	8003ee2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1be      	bne.n	8003e60 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	695a      	ldr	r2, [r3, #20]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d811      	bhi.n	8003f12 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	f003 030f 	and.w	r3, r3, #15
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	43db      	mvns	r3, r3
 8003f08:	6939      	ldr	r1, [r7, #16]
 8003f0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f0e:	4013      	ands	r3, r2
 8003f10:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3720      	adds	r7, #32
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	333c      	adds	r3, #60	; 0x3c
 8003f34:	3304      	adds	r3, #4
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	015a      	lsls	r2, r3, #5
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	4413      	add	r3, r2
 8003f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	f040 80a0 	bne.w	8004094 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f003 0308 	and.w	r3, r3, #8
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d015      	beq.n	8003f8a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	4a72      	ldr	r2, [pc, #456]	; (800412c <PCD_EP_OutXfrComplete_int+0x210>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	f240 80dd 	bls.w	8004122 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 80d7 	beq.w	8004122 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f80:	461a      	mov	r2, r3
 8003f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f86:	6093      	str	r3, [r2, #8]
 8003f88:	e0cb      	b.n	8004122 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	f003 0320 	and.w	r3, r3, #32
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d009      	beq.n	8003fa8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	2320      	movs	r3, #32
 8003fa4:	6093      	str	r3, [r2, #8]
 8003fa6:	e0bc      	b.n	8004122 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f040 80b7 	bne.w	8004122 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	4a5d      	ldr	r2, [pc, #372]	; (800412c <PCD_EP_OutXfrComplete_int+0x210>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d90f      	bls.n	8003fdc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00a      	beq.n	8003fdc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	015a      	lsls	r2, r3, #5
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fd8:	6093      	str	r3, [r2, #8]
 8003fda:	e0a2      	b.n	8004122 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	1a9b      	subs	r3, r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003fee:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	0159      	lsls	r1, r3, #5
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	440b      	add	r3, r1
 8003ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004002:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	4613      	mov	r3, r2
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	1a9b      	subs	r3, r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4403      	add	r3, r0
 8004012:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004016:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	4613      	mov	r3, r2
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	1a9b      	subs	r3, r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	440b      	add	r3, r1
 8004026:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800402a:	6819      	ldr	r1, [r3, #0]
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	4613      	mov	r3, r2
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	1a9b      	subs	r3, r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4403      	add	r3, r0
 800403a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4419      	add	r1, r3
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	4613      	mov	r3, r2
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	1a9b      	subs	r3, r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4403      	add	r3, r0
 8004050:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004054:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d114      	bne.n	8004086 <PCD_EP_OutXfrComplete_int+0x16a>
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	4613      	mov	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	1a9b      	subs	r3, r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d108      	bne.n	8004086 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6818      	ldr	r0, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800407e:	461a      	mov	r2, r3
 8004080:	2101      	movs	r1, #1
 8004082:	f004 fd1d 	bl	8008ac0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	b2db      	uxtb	r3, r3
 800408a:	4619      	mov	r1, r3
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f007 fd71 	bl	800bb74 <HAL_PCD_DataOutStageCallback>
 8004092:	e046      	b.n	8004122 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4a26      	ldr	r2, [pc, #152]	; (8004130 <PCD_EP_OutXfrComplete_int+0x214>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d124      	bne.n	80040e6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b2:	461a      	mov	r2, r3
 80040b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040b8:	6093      	str	r3, [r2, #8]
 80040ba:	e032      	b.n	8004122 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f003 0320 	and.w	r3, r3, #32
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d008      	beq.n	80040d8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d2:	461a      	mov	r2, r3
 80040d4:	2320      	movs	r3, #32
 80040d6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	4619      	mov	r1, r3
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f007 fd48 	bl	800bb74 <HAL_PCD_DataOutStageCallback>
 80040e4:	e01d      	b.n	8004122 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d114      	bne.n	8004116 <PCD_EP_OutXfrComplete_int+0x1fa>
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	4613      	mov	r3, r2
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	1a9b      	subs	r3, r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	440b      	add	r3, r1
 80040fa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d108      	bne.n	8004116 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6818      	ldr	r0, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800410e:	461a      	mov	r2, r3
 8004110:	2100      	movs	r1, #0
 8004112:	f004 fcd5 	bl	8008ac0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	b2db      	uxtb	r3, r3
 800411a:	4619      	mov	r1, r3
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f007 fd29 	bl	800bb74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3718      	adds	r7, #24
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	4f54300a 	.word	0x4f54300a
 8004130:	4f54310a 	.word	0x4f54310a

08004134 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	333c      	adds	r3, #60	; 0x3c
 800414c:	3304      	adds	r3, #4
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	4a15      	ldr	r2, [pc, #84]	; (80041bc <PCD_EP_OutSetupPacket_int+0x88>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d90e      	bls.n	8004188 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004170:	2b00      	cmp	r3, #0
 8004172:	d009      	beq.n	8004188 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	4413      	add	r3, r2
 800417c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004180:	461a      	mov	r2, r3
 8004182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004186:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f007 fce1 	bl	800bb50 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	4a0a      	ldr	r2, [pc, #40]	; (80041bc <PCD_EP_OutSetupPacket_int+0x88>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d90c      	bls.n	80041b0 <PCD_EP_OutSetupPacket_int+0x7c>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d108      	bne.n	80041b0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6818      	ldr	r0, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80041a8:	461a      	mov	r2, r3
 80041aa:	2101      	movs	r1, #1
 80041ac:	f004 fc88 	bl	8008ac0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	4f54300a 	.word	0x4f54300a

080041c0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	460b      	mov	r3, r1
 80041ca:	70fb      	strb	r3, [r7, #3]
 80041cc:	4613      	mov	r3, r2
 80041ce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80041d8:	78fb      	ldrb	r3, [r7, #3]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d107      	bne.n	80041ee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80041de:	883b      	ldrh	r3, [r7, #0]
 80041e0:	0419      	lsls	r1, r3, #16
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	629a      	str	r2, [r3, #40]	; 0x28
 80041ec:	e028      	b.n	8004240 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f4:	0c1b      	lsrs	r3, r3, #16
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	4413      	add	r3, r2
 80041fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80041fc:	2300      	movs	r3, #0
 80041fe:	73fb      	strb	r3, [r7, #15]
 8004200:	e00d      	b.n	800421e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	7bfb      	ldrb	r3, [r7, #15]
 8004208:	3340      	adds	r3, #64	; 0x40
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	0c1b      	lsrs	r3, r3, #16
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	4413      	add	r3, r2
 8004216:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004218:	7bfb      	ldrb	r3, [r7, #15]
 800421a:	3301      	adds	r3, #1
 800421c:	73fb      	strb	r3, [r7, #15]
 800421e:	7bfa      	ldrb	r2, [r7, #15]
 8004220:	78fb      	ldrb	r3, [r7, #3]
 8004222:	3b01      	subs	r3, #1
 8004224:	429a      	cmp	r2, r3
 8004226:	d3ec      	bcc.n	8004202 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004228:	883b      	ldrh	r3, [r7, #0]
 800422a:	0418      	lsls	r0, r3, #16
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6819      	ldr	r1, [r3, #0]
 8004230:	78fb      	ldrb	r3, [r7, #3]
 8004232:	3b01      	subs	r3, #1
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	4302      	orrs	r2, r0
 8004238:	3340      	adds	r3, #64	; 0x40
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	440b      	add	r3, r1
 800423e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
 8004256:	460b      	mov	r3, r1
 8004258:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	887a      	ldrh	r2, [r7, #2]
 8004260:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	460b      	mov	r3, r1
 800427a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e262      	b.n	8004760 <HAL_RCC_OscConfig+0x4d8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d075      	beq.n	8004392 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042a6:	4ba3      	ldr	r3, [pc, #652]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d00c      	beq.n	80042cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042b2:	4ba0      	ldr	r3, [pc, #640]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042ba:	2b08      	cmp	r3, #8
 80042bc:	d112      	bne.n	80042e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042be:	4b9d      	ldr	r3, [pc, #628]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042ca:	d10b      	bne.n	80042e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042cc:	4b99      	ldr	r3, [pc, #612]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d05b      	beq.n	8004390 <HAL_RCC_OscConfig+0x108>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d157      	bne.n	8004390 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e23d      	b.n	8004760 <HAL_RCC_OscConfig+0x4d8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ec:	d106      	bne.n	80042fc <HAL_RCC_OscConfig+0x74>
 80042ee:	4b91      	ldr	r3, [pc, #580]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a90      	ldr	r2, [pc, #576]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80042f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	e01d      	b.n	8004338 <HAL_RCC_OscConfig+0xb0>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004304:	d10c      	bne.n	8004320 <HAL_RCC_OscConfig+0x98>
 8004306:	4b8b      	ldr	r3, [pc, #556]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a8a      	ldr	r2, [pc, #552]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 800430c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	4b88      	ldr	r3, [pc, #544]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a87      	ldr	r2, [pc, #540]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 8004318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	e00b      	b.n	8004338 <HAL_RCC_OscConfig+0xb0>
 8004320:	4b84      	ldr	r3, [pc, #528]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a83      	ldr	r2, [pc, #524]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 8004326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	4b81      	ldr	r3, [pc, #516]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a80      	ldr	r2, [pc, #512]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 8004332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d013      	beq.n	8004368 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004340:	f7fc fa58 	bl	80007f4 <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004348:	f7fc fa54 	bl	80007f4 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b64      	cmp	r3, #100	; 0x64
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e202      	b.n	8004760 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435a:	4b76      	ldr	r3, [pc, #472]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0f0      	beq.n	8004348 <HAL_RCC_OscConfig+0xc0>
 8004366:	e014      	b.n	8004392 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004368:	f7fc fa44 	bl	80007f4 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004370:	f7fc fa40 	bl	80007f4 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b64      	cmp	r3, #100	; 0x64
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e1ee      	b.n	8004760 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004382:	4b6c      	ldr	r3, [pc, #432]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0xe8>
 800438e:	e000      	b.n	8004392 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d063      	beq.n	8004466 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800439e:	4b65      	ldr	r3, [pc, #404]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 030c 	and.w	r3, r3, #12
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00b      	beq.n	80043c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043aa:	4b62      	ldr	r3, [pc, #392]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043b2:	2b08      	cmp	r3, #8
 80043b4:	d11c      	bne.n	80043f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043b6:	4b5f      	ldr	r3, [pc, #380]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d116      	bne.n	80043f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c2:	4b5c      	ldr	r3, [pc, #368]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d005      	beq.n	80043da <HAL_RCC_OscConfig+0x152>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d001      	beq.n	80043da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e1c2      	b.n	8004760 <HAL_RCC_OscConfig+0x4d8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043da:	4b56      	ldr	r3, [pc, #344]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	4952      	ldr	r1, [pc, #328]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ee:	e03a      	b.n	8004466 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d020      	beq.n	800443a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043f8:	4b4f      	ldr	r3, [pc, #316]	; (8004538 <HAL_RCC_OscConfig+0x2b0>)
 80043fa:	2201      	movs	r2, #1
 80043fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fe:	f7fc f9f9 	bl	80007f4 <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004406:	f7fc f9f5 	bl	80007f4 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e1a3      	b.n	8004760 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004418:	4b46      	ldr	r3, [pc, #280]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0f0      	beq.n	8004406 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004424:	4b43      	ldr	r3, [pc, #268]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	4940      	ldr	r1, [pc, #256]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 8004434:	4313      	orrs	r3, r2
 8004436:	600b      	str	r3, [r1, #0]
 8004438:	e015      	b.n	8004466 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800443a:	4b3f      	ldr	r3, [pc, #252]	; (8004538 <HAL_RCC_OscConfig+0x2b0>)
 800443c:	2200      	movs	r2, #0
 800443e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004440:	f7fc f9d8 	bl	80007f4 <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004448:	f7fc f9d4 	bl	80007f4 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e182      	b.n	8004760 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800445a:	4b36      	ldr	r3, [pc, #216]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1f0      	bne.n	8004448 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d030      	beq.n	80044d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d016      	beq.n	80044a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800447a:	4b30      	ldr	r3, [pc, #192]	; (800453c <HAL_RCC_OscConfig+0x2b4>)
 800447c:	2201      	movs	r2, #1
 800447e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004480:	f7fc f9b8 	bl	80007f4 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004488:	f7fc f9b4 	bl	80007f4 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e162      	b.n	8004760 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800449a:	4b26      	ldr	r3, [pc, #152]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 800449c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0f0      	beq.n	8004488 <HAL_RCC_OscConfig+0x200>
 80044a6:	e015      	b.n	80044d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044a8:	4b24      	ldr	r3, [pc, #144]	; (800453c <HAL_RCC_OscConfig+0x2b4>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ae:	f7fc f9a1 	bl	80007f4 <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b4:	e008      	b.n	80044c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044b6:	f7fc f99d 	bl	80007f4 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e14b      	b.n	8004760 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c8:	4b1a      	ldr	r3, [pc, #104]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80044ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1f0      	bne.n	80044b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 809e 	beq.w	800461e <HAL_RCC_OscConfig+0x396>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044e2:	2300      	movs	r3, #0
 80044e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044e6:	4b13      	ldr	r3, [pc, #76]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10f      	bne.n	8004512 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044f2:	2300      	movs	r3, #0
 80044f4:	60bb      	str	r3, [r7, #8]
 80044f6:	4b0f      	ldr	r3, [pc, #60]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	4a0e      	ldr	r2, [pc, #56]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80044fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004500:	6413      	str	r3, [r2, #64]	; 0x40
 8004502:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800450a:	60bb      	str	r3, [r7, #8]
 800450c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800450e:	2301      	movs	r3, #1
 8004510:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004512:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <HAL_RCC_OscConfig+0x2b8>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451a:	2b00      	cmp	r3, #0
 800451c:	d121      	bne.n	8004562 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800451e:	4b08      	ldr	r3, [pc, #32]	; (8004540 <HAL_RCC_OscConfig+0x2b8>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a07      	ldr	r2, [pc, #28]	; (8004540 <HAL_RCC_OscConfig+0x2b8>)
 8004524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004528:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800452a:	f7fc f963 	bl	80007f4 <HAL_GetTick>
 800452e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004530:	e011      	b.n	8004556 <HAL_RCC_OscConfig+0x2ce>
 8004532:	bf00      	nop
 8004534:	40023800 	.word	0x40023800
 8004538:	42470000 	.word	0x42470000
 800453c:	42470e80 	.word	0x42470e80
 8004540:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004544:	f7fc f956 	bl	80007f4 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e104      	b.n	8004760 <HAL_RCC_OscConfig+0x4d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004556:	4b84      	ldr	r3, [pc, #528]	; (8004768 <HAL_RCC_OscConfig+0x4e0>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0f0      	beq.n	8004544 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d106      	bne.n	8004578 <HAL_RCC_OscConfig+0x2f0>
 800456a:	4b80      	ldr	r3, [pc, #512]	; (800476c <HAL_RCC_OscConfig+0x4e4>)
 800456c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456e:	4a7f      	ldr	r2, [pc, #508]	; (800476c <HAL_RCC_OscConfig+0x4e4>)
 8004570:	f043 0301 	orr.w	r3, r3, #1
 8004574:	6713      	str	r3, [r2, #112]	; 0x70
 8004576:	e01c      	b.n	80045b2 <HAL_RCC_OscConfig+0x32a>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	2b05      	cmp	r3, #5
 800457e:	d10c      	bne.n	800459a <HAL_RCC_OscConfig+0x312>
 8004580:	4b7a      	ldr	r3, [pc, #488]	; (800476c <HAL_RCC_OscConfig+0x4e4>)
 8004582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004584:	4a79      	ldr	r2, [pc, #484]	; (800476c <HAL_RCC_OscConfig+0x4e4>)
 8004586:	f043 0304 	orr.w	r3, r3, #4
 800458a:	6713      	str	r3, [r2, #112]	; 0x70
 800458c:	4b77      	ldr	r3, [pc, #476]	; (800476c <HAL_RCC_OscConfig+0x4e4>)
 800458e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004590:	4a76      	ldr	r2, [pc, #472]	; (800476c <HAL_RCC_OscConfig+0x4e4>)
 8004592:	f043 0301 	orr.w	r3, r3, #1
 8004596:	6713      	str	r3, [r2, #112]	; 0x70
 8004598:	e00b      	b.n	80045b2 <HAL_RCC_OscConfig+0x32a>
 800459a:	4b74      	ldr	r3, [pc, #464]	; (800476c <HAL_RCC_OscConfig+0x4e4>)
 800459c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459e:	4a73      	ldr	r2, [pc, #460]	; (800476c <HAL_RCC_OscConfig+0x4e4>)
 80045a0:	f023 0301 	bic.w	r3, r3, #1
 80045a4:	6713      	str	r3, [r2, #112]	; 0x70
 80045a6:	4b71      	ldr	r3, [pc, #452]	; (800476c <HAL_RCC_OscConfig+0x4e4>)
 80045a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045aa:	4a70      	ldr	r2, [pc, #448]	; (800476c <HAL_RCC_OscConfig+0x4e4>)
 80045ac:	f023 0304 	bic.w	r3, r3, #4
 80045b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d014      	beq.n	80045e4 <HAL_RCC_OscConfig+0x35c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ba:	f7fc f91b 	bl	80007f4 <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c0:	e009      	b.n	80045d6 <HAL_RCC_OscConfig+0x34e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045c2:	f7fc f917 	bl	80007f4 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x34e>
        {
          return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e0c4      	b.n	8004760 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d6:	4b65      	ldr	r3, [pc, #404]	; (800476c <HAL_RCC_OscConfig+0x4e4>)
 80045d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0ef      	beq.n	80045c2 <HAL_RCC_OscConfig+0x33a>
 80045e2:	e013      	b.n	800460c <HAL_RCC_OscConfig+0x384>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045e4:	f7fc f906 	bl	80007f4 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ea:	e009      	b.n	8004600 <HAL_RCC_OscConfig+0x378>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ec:	f7fc f902 	bl	80007f4 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x378>
        {
          return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e0af      	b.n	8004760 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004600:	4b5a      	ldr	r3, [pc, #360]	; (800476c <HAL_RCC_OscConfig+0x4e4>)
 8004602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1ef      	bne.n	80045ec <HAL_RCC_OscConfig+0x364>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800460c:	7dfb      	ldrb	r3, [r7, #23]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d105      	bne.n	800461e <HAL_RCC_OscConfig+0x396>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004612:	4b56      	ldr	r3, [pc, #344]	; (800476c <HAL_RCC_OscConfig+0x4e4>)
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	4a55      	ldr	r2, [pc, #340]	; (800476c <HAL_RCC_OscConfig+0x4e4>)
 8004618:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800461c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 809b 	beq.w	800475e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004628:	4b50      	ldr	r3, [pc, #320]	; (800476c <HAL_RCC_OscConfig+0x4e4>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 030c 	and.w	r3, r3, #12
 8004630:	2b08      	cmp	r3, #8
 8004632:	d05c      	beq.n	80046ee <HAL_RCC_OscConfig+0x466>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	2b02      	cmp	r3, #2
 800463a:	d141      	bne.n	80046c0 <HAL_RCC_OscConfig+0x438>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800463c:	4b4c      	ldr	r3, [pc, #304]	; (8004770 <HAL_RCC_OscConfig+0x4e8>)
 800463e:	2200      	movs	r2, #0
 8004640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004642:	f7fc f8d7 	bl	80007f4 <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x3d4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800464a:	f7fc f8d3 	bl	80007f4 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x3d4>
          {
            return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e081      	b.n	8004760 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800465c:	4b43      	ldr	r3, [pc, #268]	; (800476c <HAL_RCC_OscConfig+0x4e4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1f0      	bne.n	800464a <HAL_RCC_OscConfig+0x3c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	69da      	ldr	r2, [r3, #28]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	431a      	orrs	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	019b      	lsls	r3, r3, #6
 8004678:	431a      	orrs	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467e:	085b      	lsrs	r3, r3, #1
 8004680:	3b01      	subs	r3, #1
 8004682:	041b      	lsls	r3, r3, #16
 8004684:	431a      	orrs	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468a:	061b      	lsls	r3, r3, #24
 800468c:	4937      	ldr	r1, [pc, #220]	; (800476c <HAL_RCC_OscConfig+0x4e4>)
 800468e:	4313      	orrs	r3, r2
 8004690:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004692:	4b37      	ldr	r3, [pc, #220]	; (8004770 <HAL_RCC_OscConfig+0x4e8>)
 8004694:	2201      	movs	r2, #1
 8004696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004698:	f7fc f8ac 	bl	80007f4 <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0x42a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a0:	f7fc f8a8 	bl	80007f4 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e056      	b.n	8004760 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b2:	4b2e      	ldr	r3, [pc, #184]	; (800476c <HAL_RCC_OscConfig+0x4e4>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0f0      	beq.n	80046a0 <HAL_RCC_OscConfig+0x418>
 80046be:	e04e      	b.n	800475e <HAL_RCC_OscConfig+0x4d6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c0:	4b2b      	ldr	r3, [pc, #172]	; (8004770 <HAL_RCC_OscConfig+0x4e8>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c6:	f7fc f895 	bl	80007f4 <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046cc:	e008      	b.n	80046e0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ce:	f7fc f891 	bl	80007f4 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e03f      	b.n	8004760 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e0:	4b22      	ldr	r3, [pc, #136]	; (800476c <HAL_RCC_OscConfig+0x4e4>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1f0      	bne.n	80046ce <HAL_RCC_OscConfig+0x446>
 80046ec:	e037      	b.n	800475e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d101      	bne.n	80046fa <HAL_RCC_OscConfig+0x472>
      {
        return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e032      	b.n	8004760 <HAL_RCC_OscConfig+0x4d8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046fa:	4b1c      	ldr	r3, [pc, #112]	; (800476c <HAL_RCC_OscConfig+0x4e4>)
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d028      	beq.n	800475a <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004712:	429a      	cmp	r2, r3
 8004714:	d121      	bne.n	800475a <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004720:	429a      	cmp	r2, r3
 8004722:	d11a      	bne.n	800475a <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800472a:	4013      	ands	r3, r2
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004730:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004732:	4293      	cmp	r3, r2
 8004734:	d111      	bne.n	800475a <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004740:	085b      	lsrs	r3, r3, #1
 8004742:	3b01      	subs	r3, #1
 8004744:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004746:	429a      	cmp	r2, r3
 8004748:	d107      	bne.n	800475a <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004754:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004756:	429a      	cmp	r2, r3
 8004758:	d001      	beq.n	800475e <HAL_RCC_OscConfig+0x4d6>
#endif
        {
          return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e000      	b.n	8004760 <HAL_RCC_OscConfig+0x4d8>
        }
      }
    }
  }
  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	40007000 	.word	0x40007000
 800476c:	40023800 	.word	0x40023800
 8004770:	42470060 	.word	0x42470060

08004774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e0cc      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004788:	4b68      	ldr	r3, [pc, #416]	; (800492c <HAL_RCC_ClockConfig+0x1b8>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	d90c      	bls.n	80047b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004796:	4b65      	ldr	r3, [pc, #404]	; (800492c <HAL_RCC_ClockConfig+0x1b8>)
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	b2d2      	uxtb	r2, r2
 800479c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800479e:	4b63      	ldr	r3, [pc, #396]	; (800492c <HAL_RCC_ClockConfig+0x1b8>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d001      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e0b8      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d020      	beq.n	80047fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d005      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047c8:	4b59      	ldr	r3, [pc, #356]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	4a58      	ldr	r2, [pc, #352]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80047ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0308 	and.w	r3, r3, #8
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d005      	beq.n	80047ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047e0:	4b53      	ldr	r3, [pc, #332]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	4a52      	ldr	r2, [pc, #328]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047ec:	4b50      	ldr	r3, [pc, #320]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	494d      	ldr	r1, [pc, #308]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d044      	beq.n	8004894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d107      	bne.n	8004822 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004812:	4b47      	ldr	r3, [pc, #284]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d119      	bne.n	8004852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e07f      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b02      	cmp	r3, #2
 8004828:	d003      	beq.n	8004832 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800482e:	2b03      	cmp	r3, #3
 8004830:	d107      	bne.n	8004842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004832:	4b3f      	ldr	r3, [pc, #252]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d109      	bne.n	8004852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e06f      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004842:	4b3b      	ldr	r3, [pc, #236]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e067      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004852:	4b37      	ldr	r3, [pc, #220]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f023 0203 	bic.w	r2, r3, #3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	4934      	ldr	r1, [pc, #208]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004860:	4313      	orrs	r3, r2
 8004862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004864:	f7fb ffc6 	bl	80007f4 <HAL_GetTick>
 8004868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800486a:	e00a      	b.n	8004882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800486c:	f7fb ffc2 	bl	80007f4 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	f241 3288 	movw	r2, #5000	; 0x1388
 800487a:	4293      	cmp	r3, r2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e04f      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004882:	4b2b      	ldr	r3, [pc, #172]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 020c 	and.w	r2, r3, #12
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	429a      	cmp	r2, r3
 8004892:	d1eb      	bne.n	800486c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004894:	4b25      	ldr	r3, [pc, #148]	; (800492c <HAL_RCC_ClockConfig+0x1b8>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d20c      	bcs.n	80048bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a2:	4b22      	ldr	r3, [pc, #136]	; (800492c <HAL_RCC_ClockConfig+0x1b8>)
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048aa:	4b20      	ldr	r3, [pc, #128]	; (800492c <HAL_RCC_ClockConfig+0x1b8>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d001      	beq.n	80048bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e032      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d008      	beq.n	80048da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048c8:	4b19      	ldr	r3, [pc, #100]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	4916      	ldr	r1, [pc, #88]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0308 	and.w	r3, r3, #8
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d009      	beq.n	80048fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048e6:	4b12      	ldr	r3, [pc, #72]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	490e      	ldr	r1, [pc, #56]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048fa:	f000 f82d 	bl	8004958 <HAL_RCC_GetSysClockFreq>
 80048fe:	4602      	mov	r2, r0
 8004900:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	091b      	lsrs	r3, r3, #4
 8004906:	f003 030f 	and.w	r3, r3, #15
 800490a:	490a      	ldr	r1, [pc, #40]	; (8004934 <HAL_RCC_ClockConfig+0x1c0>)
 800490c:	5ccb      	ldrb	r3, [r1, r3]
 800490e:	fa22 f303 	lsr.w	r3, r2, r3
 8004912:	4a09      	ldr	r2, [pc, #36]	; (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 8004914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004916:	4b09      	ldr	r3, [pc, #36]	; (800493c <HAL_RCC_ClockConfig+0x1c8>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f7fb ff26 	bl	800076c <HAL_InitTick>

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	40023c00 	.word	0x40023c00
 8004930:	40023800 	.word	0x40023800
 8004934:	0800c400 	.word	0x0800c400
 8004938:	20000118 	.word	0x20000118
 800493c:	20000000 	.word	0x20000000

08004940 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004944:	4b03      	ldr	r3, [pc, #12]	; (8004954 <HAL_RCC_EnableCSS+0x14>)
 8004946:	2201      	movs	r2, #1
 8004948:	601a      	str	r2, [r3, #0]
}
 800494a:	bf00      	nop
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	4247004c 	.word	0x4247004c

08004958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004958:	b5b0      	push	{r4, r5, r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800495e:	2100      	movs	r1, #0
 8004960:	6079      	str	r1, [r7, #4]
 8004962:	2100      	movs	r1, #0
 8004964:	60f9      	str	r1, [r7, #12]
 8004966:	2100      	movs	r1, #0
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800496a:	2100      	movs	r1, #0
 800496c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800496e:	4952      	ldr	r1, [pc, #328]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004970:	6889      	ldr	r1, [r1, #8]
 8004972:	f001 010c 	and.w	r1, r1, #12
 8004976:	2908      	cmp	r1, #8
 8004978:	d00d      	beq.n	8004996 <HAL_RCC_GetSysClockFreq+0x3e>
 800497a:	2908      	cmp	r1, #8
 800497c:	f200 8094 	bhi.w	8004aa8 <HAL_RCC_GetSysClockFreq+0x150>
 8004980:	2900      	cmp	r1, #0
 8004982:	d002      	beq.n	800498a <HAL_RCC_GetSysClockFreq+0x32>
 8004984:	2904      	cmp	r1, #4
 8004986:	d003      	beq.n	8004990 <HAL_RCC_GetSysClockFreq+0x38>
 8004988:	e08e      	b.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800498a:	4b4c      	ldr	r3, [pc, #304]	; (8004abc <HAL_RCC_GetSysClockFreq+0x164>)
 800498c:	60bb      	str	r3, [r7, #8]
       break;
 800498e:	e08e      	b.n	8004aae <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004990:	4b4b      	ldr	r3, [pc, #300]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x168>)
 8004992:	60bb      	str	r3, [r7, #8]
      break;
 8004994:	e08b      	b.n	8004aae <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004996:	4948      	ldr	r1, [pc, #288]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004998:	6849      	ldr	r1, [r1, #4]
 800499a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800499e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049a0:	4945      	ldr	r1, [pc, #276]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x160>)
 80049a2:	6849      	ldr	r1, [r1, #4]
 80049a4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80049a8:	2900      	cmp	r1, #0
 80049aa:	d024      	beq.n	80049f6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ac:	4942      	ldr	r1, [pc, #264]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x160>)
 80049ae:	6849      	ldr	r1, [r1, #4]
 80049b0:	0989      	lsrs	r1, r1, #6
 80049b2:	4608      	mov	r0, r1
 80049b4:	f04f 0100 	mov.w	r1, #0
 80049b8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80049bc:	f04f 0500 	mov.w	r5, #0
 80049c0:	ea00 0204 	and.w	r2, r0, r4
 80049c4:	ea01 0305 	and.w	r3, r1, r5
 80049c8:	493d      	ldr	r1, [pc, #244]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x168>)
 80049ca:	fb01 f003 	mul.w	r0, r1, r3
 80049ce:	2100      	movs	r1, #0
 80049d0:	fb01 f102 	mul.w	r1, r1, r2
 80049d4:	1844      	adds	r4, r0, r1
 80049d6:	493a      	ldr	r1, [pc, #232]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x168>)
 80049d8:	fba2 0101 	umull	r0, r1, r2, r1
 80049dc:	1863      	adds	r3, r4, r1
 80049de:	4619      	mov	r1, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	461a      	mov	r2, r3
 80049e4:	f04f 0300 	mov.w	r3, #0
 80049e8:	f7fb fbf6 	bl	80001d8 <__aeabi_uldivmod>
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	4613      	mov	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	e04a      	b.n	8004a8c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049f6:	4b30      	ldr	r3, [pc, #192]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x160>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	099b      	lsrs	r3, r3, #6
 80049fc:	461a      	mov	r2, r3
 80049fe:	f04f 0300 	mov.w	r3, #0
 8004a02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a06:	f04f 0100 	mov.w	r1, #0
 8004a0a:	ea02 0400 	and.w	r4, r2, r0
 8004a0e:	ea03 0501 	and.w	r5, r3, r1
 8004a12:	4620      	mov	r0, r4
 8004a14:	4629      	mov	r1, r5
 8004a16:	f04f 0200 	mov.w	r2, #0
 8004a1a:	f04f 0300 	mov.w	r3, #0
 8004a1e:	014b      	lsls	r3, r1, #5
 8004a20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a24:	0142      	lsls	r2, r0, #5
 8004a26:	4610      	mov	r0, r2
 8004a28:	4619      	mov	r1, r3
 8004a2a:	1b00      	subs	r0, r0, r4
 8004a2c:	eb61 0105 	sbc.w	r1, r1, r5
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	f04f 0300 	mov.w	r3, #0
 8004a38:	018b      	lsls	r3, r1, #6
 8004a3a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a3e:	0182      	lsls	r2, r0, #6
 8004a40:	1a12      	subs	r2, r2, r0
 8004a42:	eb63 0301 	sbc.w	r3, r3, r1
 8004a46:	f04f 0000 	mov.w	r0, #0
 8004a4a:	f04f 0100 	mov.w	r1, #0
 8004a4e:	00d9      	lsls	r1, r3, #3
 8004a50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a54:	00d0      	lsls	r0, r2, #3
 8004a56:	4602      	mov	r2, r0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	1912      	adds	r2, r2, r4
 8004a5c:	eb45 0303 	adc.w	r3, r5, r3
 8004a60:	f04f 0000 	mov.w	r0, #0
 8004a64:	f04f 0100 	mov.w	r1, #0
 8004a68:	0299      	lsls	r1, r3, #10
 8004a6a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004a6e:	0290      	lsls	r0, r2, #10
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	4610      	mov	r0, r2
 8004a76:	4619      	mov	r1, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f04f 0300 	mov.w	r3, #0
 8004a80:	f7fb fbaa 	bl	80001d8 <__aeabi_uldivmod>
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	4613      	mov	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a8c:	4b0a      	ldr	r3, [pc, #40]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	0c1b      	lsrs	r3, r3, #16
 8004a92:	f003 0303 	and.w	r3, r3, #3
 8004a96:	3301      	adds	r3, #1
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa4:	60bb      	str	r3, [r7, #8]
      break;
 8004aa6:	e002      	b.n	8004aae <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004aa8:	4b04      	ldr	r3, [pc, #16]	; (8004abc <HAL_RCC_GetSysClockFreq+0x164>)
 8004aaa:	60bb      	str	r3, [r7, #8]
      break;
 8004aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aae:	68bb      	ldr	r3, [r7, #8]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	00f42400 	.word	0x00f42400
 8004ac0:	016e3600 	.word	0x016e3600

08004ac4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ac8:	4b03      	ldr	r3, [pc, #12]	; (8004ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004aca:	681b      	ldr	r3, [r3, #0]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	20000118 	.word	0x20000118

08004adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ae0:	f7ff fff0 	bl	8004ac4 <HAL_RCC_GetHCLKFreq>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	4b05      	ldr	r3, [pc, #20]	; (8004afc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	0a9b      	lsrs	r3, r3, #10
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	4903      	ldr	r1, [pc, #12]	; (8004b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004af2:	5ccb      	ldrb	r3, [r1, r3]
 8004af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	40023800 	.word	0x40023800
 8004b00:	0800c410 	.word	0x0800c410

08004b04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b08:	f7ff ffdc 	bl	8004ac4 <HAL_RCC_GetHCLKFreq>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	0b5b      	lsrs	r3, r3, #13
 8004b14:	f003 0307 	and.w	r3, r3, #7
 8004b18:	4903      	ldr	r1, [pc, #12]	; (8004b28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b1a:	5ccb      	ldrb	r3, [r1, r3]
 8004b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40023800 	.word	0x40023800
 8004b28:	0800c410 	.word	0x0800c410

08004b2c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004b30:	4b06      	ldr	r3, [pc, #24]	; (8004b4c <HAL_RCC_NMI_IRQHandler+0x20>)
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b38:	2b80      	cmp	r3, #128	; 0x80
 8004b3a:	d104      	bne.n	8004b46 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004b3c:	f000 f80a 	bl	8004b54 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004b40:	4b03      	ldr	r3, [pc, #12]	; (8004b50 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004b42:	2280      	movs	r2, #128	; 0x80
 8004b44:	701a      	strb	r2, [r3, #0]
  }
}
 8004b46:	bf00      	nop
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	4002380e 	.word	0x4002380e

08004b54 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004b58:	bf00      	nop
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
	...

08004b64 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d105      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d038      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b8c:	4b68      	ldr	r3, [pc, #416]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b92:	f7fb fe2f 	bl	80007f4 <HAL_GetTick>
 8004b96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b98:	e008      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b9a:	f7fb fe2b 	bl	80007f4 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d901      	bls.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e0bc      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bac:	4b61      	ldr	r3, [pc, #388]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1f0      	bne.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	019b      	lsls	r3, r3, #6
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	071b      	lsls	r3, r3, #28
 8004bca:	495a      	ldr	r1, [pc, #360]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bd2:	4b57      	ldr	r3, [pc, #348]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bd8:	f7fb fe0c 	bl	80007f4 <HAL_GetTick>
 8004bdc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004be0:	f7fb fe08 	bl	80007f4 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e099      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bf2:	4b50      	ldr	r3, [pc, #320]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0f0      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 8082 	beq.w	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	60fb      	str	r3, [r7, #12]
 8004c10:	4b48      	ldr	r3, [pc, #288]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c14:	4a47      	ldr	r2, [pc, #284]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c1a:	6413      	str	r3, [r2, #64]	; 0x40
 8004c1c:	4b45      	ldr	r3, [pc, #276]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c28:	4b43      	ldr	r3, [pc, #268]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a42      	ldr	r2, [pc, #264]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c32:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c34:	f7fb fdde 	bl	80007f4 <HAL_GetTick>
 8004c38:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c3c:	f7fb fdda 	bl	80007f4 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e06b      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c4e:	4b3a      	ldr	r3, [pc, #232]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0f0      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c5a:	4b36      	ldr	r3, [pc, #216]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c62:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d02e      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d027      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c78:	4b2e      	ldr	r3, [pc, #184]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c80:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c82:	4b2e      	ldr	r3, [pc, #184]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c84:	2201      	movs	r2, #1
 8004c86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c88:	4b2c      	ldr	r3, [pc, #176]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c8e:	4a29      	ldr	r2, [pc, #164]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c94:	4b27      	ldr	r3, [pc, #156]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d113      	bne.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004ca0:	f7fb fda8 	bl	80007f4 <HAL_GetTick>
 8004ca4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca6:	e009      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x158>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ca8:	f7fb fda4 	bl	80007f4 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x158>
          {
            return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e034      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cbc:	4b1d      	ldr	r3, [pc, #116]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d0ef      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cd4:	d10d      	bne.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8004cd6:	4b17      	ldr	r3, [pc, #92]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cea:	4912      	ldr	r1, [pc, #72]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	608b      	str	r3, [r1, #8]
 8004cf0:	e005      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8004cf2:	4b10      	ldr	r3, [pc, #64]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	4a0f      	ldr	r2, [pc, #60]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004cfc:	6093      	str	r3, [r2, #8]
 8004cfe:	4b0d      	ldr	r3, [pc, #52]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d0a:	490a      	ldr	r1, [pc, #40]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0308 	and.w	r3, r3, #8
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d003      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	7d1a      	ldrb	r2, [r3, #20]
 8004d20:	4b07      	ldr	r3, [pc, #28]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004d22:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3718      	adds	r7, #24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	42470068 	.word	0x42470068
 8004d34:	40023800 	.word	0x40023800
 8004d38:	40007000 	.word	0x40007000
 8004d3c:	42470e40 	.word	0x42470e40
 8004d40:	424711e0 	.word	0x424711e0

08004d44 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e083      	b.n	8004e5e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	7f5b      	ldrb	r3, [r3, #29]
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d105      	bne.n	8004d6c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f006 fbf2 	bl	800b550 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	22ca      	movs	r2, #202	; 0xca
 8004d78:	625a      	str	r2, [r3, #36]	; 0x24
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2253      	movs	r2, #83	; 0x53
 8004d80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f897 	bl	8004eb6 <RTC_EnterInitMode>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d008      	beq.n	8004da0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	22ff      	movs	r2, #255	; 0xff
 8004d94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2204      	movs	r2, #4
 8004d9a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e05e      	b.n	8004e5e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6812      	ldr	r2, [r2, #0]
 8004daa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004dae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004db2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6899      	ldr	r1, [r3, #8]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	68d2      	ldr	r2, [r2, #12]
 8004dda:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6919      	ldr	r1, [r3, #16]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	041a      	lsls	r2, r3, #16
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dfe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 0320 	and.w	r3, r3, #32
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10e      	bne.n	8004e2c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f829 	bl	8004e66 <HAL_RTC_WaitForSynchro>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d008      	beq.n	8004e2c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	22ff      	movs	r2, #255	; 0xff
 8004e20:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2204      	movs	r2, #4
 8004e26:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e018      	b.n	8004e5e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e3a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	699a      	ldr	r2, [r3, #24]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	22ff      	movs	r2, #255	; 0xff
 8004e54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
  }
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b084      	sub	sp, #16
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68da      	ldr	r2, [r3, #12]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e80:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e82:	f7fb fcb7 	bl	80007f4 <HAL_GetTick>
 8004e86:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004e88:	e009      	b.n	8004e9e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004e8a:	f7fb fcb3 	bl	80007f4 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e98:	d901      	bls.n	8004e9e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e007      	b.n	8004eae <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f003 0320 	and.w	r3, r3, #32
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0ee      	beq.n	8004e8a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b084      	sub	sp, #16
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d119      	bne.n	8004f04 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ed8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004eda:	f7fb fc8b 	bl	80007f4 <HAL_GetTick>
 8004ede:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004ee0:	e009      	b.n	8004ef6 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004ee2:	f7fb fc87 	bl	80007f4 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ef0:	d901      	bls.n	8004ef6 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e007      	b.n	8004f06 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0ee      	beq.n	8004ee2 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b082      	sub	sp, #8
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e022      	b.n	8004f66 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d105      	bne.n	8004f38 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f006 fb38 	bl	800b5a8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2203      	movs	r2, #3
 8004f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f815 	bl	8004f70 <HAL_SD_InitCard>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e00a      	b.n	8004f66 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
	...

08004f70 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004f70:	b5b0      	push	{r4, r5, r7, lr}
 8004f72:	b08e      	sub	sp, #56	; 0x38
 8004f74:	af04      	add	r7, sp, #16
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004f80:	2300      	movs	r3, #0
 8004f82:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004f84:	2300      	movs	r3, #0
 8004f86:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004f8c:	2376      	movs	r3, #118	; 0x76
 8004f8e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681d      	ldr	r5, [r3, #0]
 8004f94:	466c      	mov	r4, sp
 8004f96:	f107 0314 	add.w	r3, r7, #20
 8004f9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004f9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004fa2:	f107 0308 	add.w	r3, r7, #8
 8004fa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fa8:	4628      	mov	r0, r5
 8004faa:	f001 fe07 	bl	8006bbc <SDIO_Init>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d001      	beq.n	8004fc0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e04c      	b.n	800505a <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004fc0:	4b28      	ldr	r3, [pc, #160]	; (8005064 <HAL_SD_InitCard+0xf4>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f001 fe2e 	bl	8006c2c <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004fd0:	4b24      	ldr	r3, [pc, #144]	; (8005064 <HAL_SD_InitCard+0xf4>)
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 fb52 	bl	8005680 <SD_PowerON>
 8004fdc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004fde:	6a3b      	ldr	r3, [r7, #32]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00b      	beq.n	8004ffc <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e02e      	b.n	800505a <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 fa73 	bl	80054e8 <SD_InitCard>
 8005002:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00b      	beq.n	8005022 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	431a      	orrs	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e01b      	b.n	800505a <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f44f 7100 	mov.w	r1, #512	; 0x200
 800502a:	4618      	mov	r0, r3
 800502c:	f001 fe91 	bl	8006d52 <SDMMC_CmdBlockLength>
 8005030:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00f      	beq.n	8005058 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a0a      	ldr	r2, [pc, #40]	; (8005068 <HAL_SD_InitCard+0xf8>)
 800503e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	431a      	orrs	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e000      	b.n	800505a <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3728      	adds	r7, #40	; 0x28
 800505e:	46bd      	mov	sp, r7
 8005060:	bdb0      	pop	{r4, r5, r7, pc}
 8005062:	bf00      	nop
 8005064:	422580a0 	.word	0x422580a0
 8005068:	004005ff 	.word	0x004005ff

0800506c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800507a:	0f9b      	lsrs	r3, r3, #30
 800507c:	b2da      	uxtb	r2, r3
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005086:	0e9b      	lsrs	r3, r3, #26
 8005088:	b2db      	uxtb	r3, r3
 800508a:	f003 030f 	and.w	r3, r3, #15
 800508e:	b2da      	uxtb	r2, r3
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005098:	0e1b      	lsrs	r3, r3, #24
 800509a:	b2db      	uxtb	r3, r3
 800509c:	f003 0303 	and.w	r3, r3, #3
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050aa:	0c1b      	lsrs	r3, r3, #16
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050b6:	0a1b      	lsrs	r3, r3, #8
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050cc:	0d1b      	lsrs	r3, r3, #20
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050d8:	0c1b      	lsrs	r3, r3, #16
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	f003 030f 	and.w	r3, r3, #15
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050ea:	0bdb      	lsrs	r3, r3, #15
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	b2da      	uxtb	r2, r3
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050fc:	0b9b      	lsrs	r3, r3, #14
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	b2da      	uxtb	r2, r3
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800510e:	0b5b      	lsrs	r3, r3, #13
 8005110:	b2db      	uxtb	r3, r3
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	b2da      	uxtb	r2, r3
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005120:	0b1b      	lsrs	r3, r3, #12
 8005122:	b2db      	uxtb	r3, r3
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	b2da      	uxtb	r2, r3
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2200      	movs	r2, #0
 8005132:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005138:	2b00      	cmp	r3, #0
 800513a:	d163      	bne.n	8005204 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005140:	009a      	lsls	r2, r3, #2
 8005142:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005146:	4013      	ands	r3, r2
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800514c:	0f92      	lsrs	r2, r2, #30
 800514e:	431a      	orrs	r2, r3
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005158:	0edb      	lsrs	r3, r3, #27
 800515a:	b2db      	uxtb	r3, r3
 800515c:	f003 0307 	and.w	r3, r3, #7
 8005160:	b2da      	uxtb	r2, r3
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800516a:	0e1b      	lsrs	r3, r3, #24
 800516c:	b2db      	uxtb	r3, r3
 800516e:	f003 0307 	and.w	r3, r3, #7
 8005172:	b2da      	uxtb	r2, r3
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800517c:	0d5b      	lsrs	r3, r3, #21
 800517e:	b2db      	uxtb	r3, r3
 8005180:	f003 0307 	and.w	r3, r3, #7
 8005184:	b2da      	uxtb	r2, r3
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800518e:	0c9b      	lsrs	r3, r3, #18
 8005190:	b2db      	uxtb	r3, r3
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	b2da      	uxtb	r2, r3
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051a0:	0bdb      	lsrs	r3, r3, #15
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	f003 0307 	and.w	r3, r3, #7
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	1c5a      	adds	r2, r3, #1
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	7e1b      	ldrb	r3, [r3, #24]
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	f003 0307 	and.w	r3, r3, #7
 80051c2:	3302      	adds	r3, #2
 80051c4:	2201      	movs	r2, #1
 80051c6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80051ce:	fb02 f203 	mul.w	r2, r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	7a1b      	ldrb	r3, [r3, #8]
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	f003 030f 	and.w	r3, r3, #15
 80051e0:	2201      	movs	r2, #1
 80051e2:	409a      	lsls	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80051f0:	0a52      	lsrs	r2, r2, #9
 80051f2:	fb02 f203 	mul.w	r2, r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005200:	661a      	str	r2, [r3, #96]	; 0x60
 8005202:	e031      	b.n	8005268 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005208:	2b01      	cmp	r3, #1
 800520a:	d11d      	bne.n	8005248 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005210:	041b      	lsls	r3, r3, #16
 8005212:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800521a:	0c1b      	lsrs	r3, r3, #16
 800521c:	431a      	orrs	r2, r3
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	3301      	adds	r3, #1
 8005228:	029a      	lsls	r2, r3, #10
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800523c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	661a      	str	r2, [r3, #96]	; 0x60
 8005246:	e00f      	b.n	8005268 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a58      	ldr	r2, [pc, #352]	; (80053b0 <HAL_SD_GetCardCSD+0x344>)
 800524e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005254:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e09d      	b.n	80053a4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800526c:	0b9b      	lsrs	r3, r3, #14
 800526e:	b2db      	uxtb	r3, r3
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	b2da      	uxtb	r2, r3
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800527e:	09db      	lsrs	r3, r3, #7
 8005280:	b2db      	uxtb	r3, r3
 8005282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005286:	b2da      	uxtb	r2, r3
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005290:	b2db      	uxtb	r3, r3
 8005292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005296:	b2da      	uxtb	r2, r3
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a0:	0fdb      	lsrs	r3, r3, #31
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ac:	0f5b      	lsrs	r3, r3, #29
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	f003 0303 	and.w	r3, r3, #3
 80052b4:	b2da      	uxtb	r2, r3
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052be:	0e9b      	lsrs	r3, r3, #26
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	f003 0307 	and.w	r3, r3, #7
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d0:	0d9b      	lsrs	r3, r3, #22
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	f003 030f 	and.w	r3, r3, #15
 80052d8:	b2da      	uxtb	r2, r3
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e2:	0d5b      	lsrs	r3, r3, #21
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fe:	0c1b      	lsrs	r3, r3, #16
 8005300:	b2db      	uxtb	r3, r3
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	b2da      	uxtb	r2, r3
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005312:	0bdb      	lsrs	r3, r3, #15
 8005314:	b2db      	uxtb	r3, r3
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	b2da      	uxtb	r2, r3
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005326:	0b9b      	lsrs	r3, r3, #14
 8005328:	b2db      	uxtb	r3, r3
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	b2da      	uxtb	r2, r3
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800533a:	0b5b      	lsrs	r3, r3, #13
 800533c:	b2db      	uxtb	r3, r3
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	b2da      	uxtb	r2, r3
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534e:	0b1b      	lsrs	r3, r3, #12
 8005350:	b2db      	uxtb	r3, r3
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	b2da      	uxtb	r2, r3
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005362:	0a9b      	lsrs	r3, r3, #10
 8005364:	b2db      	uxtb	r3, r3
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	b2da      	uxtb	r2, r3
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005376:	0a1b      	lsrs	r3, r3, #8
 8005378:	b2db      	uxtb	r3, r3
 800537a:	f003 0303 	and.w	r3, r3, #3
 800537e:	b2da      	uxtb	r2, r3
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538a:	085b      	lsrs	r3, r3, #1
 800538c:	b2db      	uxtb	r3, r3
 800538e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005392:	b2da      	uxtb	r2, r3
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr
 80053b0:	004005ff 	.word	0x004005ff

080053b4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80053b4:	b5b0      	push	{r4, r5, r7, lr}
 80053b6:	b08e      	sub	sp, #56	; 0x38
 80053b8:	af04      	add	r7, sp, #16
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80053be:	2300      	movs	r3, #0
 80053c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2203      	movs	r2, #3
 80053c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d0:	2b03      	cmp	r3, #3
 80053d2:	d02e      	beq.n	8005432 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053da:	d106      	bne.n	80053ea <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	639a      	str	r2, [r3, #56]	; 0x38
 80053e8:	e029      	b.n	800543e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053f0:	d10a      	bne.n	8005408 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f9d2 	bl	800579c <SD_WideBus_Enable>
 80053f8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053fe:	6a3b      	ldr	r3, [r7, #32]
 8005400:	431a      	orrs	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	639a      	str	r2, [r3, #56]	; 0x38
 8005406:	e01a      	b.n	800543e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10a      	bne.n	8005424 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 fa0f 	bl	8005832 <SD_WideBus_Disable>
 8005414:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	431a      	orrs	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	639a      	str	r2, [r3, #56]	; 0x38
 8005422:	e00c      	b.n	800543e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005428:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	639a      	str	r2, [r3, #56]	; 0x38
 8005430:	e005      	b.n	800543e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005436:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00b      	beq.n	800545e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a26      	ldr	r2, [pc, #152]	; (80054e4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800544c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800545c:	e01f      	b.n	800549e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681d      	ldr	r5, [r3, #0]
 8005484:	466c      	mov	r4, sp
 8005486:	f107 0314 	add.w	r3, r7, #20
 800548a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800548e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005492:	f107 0308 	add.w	r3, r7, #8
 8005496:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005498:	4628      	mov	r0, r5
 800549a:	f001 fb8f 	bl	8006bbc <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80054a6:	4618      	mov	r0, r3
 80054a8:	f001 fc53 	bl	8006d52 <SDMMC_CmdBlockLength>
 80054ac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00c      	beq.n	80054ce <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a0a      	ldr	r2, [pc, #40]	; (80054e4 <HAL_SD_ConfigWideBusOperation+0x130>)
 80054ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	431a      	orrs	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80054d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3728      	adds	r7, #40	; 0x28
 80054de:	46bd      	mov	sp, r7
 80054e0:	bdb0      	pop	{r4, r5, r7, pc}
 80054e2:	bf00      	nop
 80054e4:	004005ff 	.word	0x004005ff

080054e8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80054e8:	b5b0      	push	{r4, r5, r7, lr}
 80054ea:	b094      	sub	sp, #80	; 0x50
 80054ec:	af04      	add	r7, sp, #16
 80054ee:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80054f0:	2301      	movs	r3, #1
 80054f2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f001 fba6 	bl	8006c4a <SDIO_GetPowerState>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d102      	bne.n	800550a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005504:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005508:	e0b6      	b.n	8005678 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800550e:	2b03      	cmp	r3, #3
 8005510:	d02f      	beq.n	8005572 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4618      	mov	r0, r3
 8005518:	f001 fd25 	bl	8006f66 <SDMMC_CmdSendCID>
 800551c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800551e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005520:	2b00      	cmp	r3, #0
 8005522:	d001      	beq.n	8005528 <SD_InitCard+0x40>
    {
      return errorstate;
 8005524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005526:	e0a7      	b.n	8005678 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2100      	movs	r1, #0
 800552e:	4618      	mov	r0, r3
 8005530:	f001 fbd0 	bl	8006cd4 <SDIO_GetResponse>
 8005534:	4602      	mov	r2, r0
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2104      	movs	r1, #4
 8005540:	4618      	mov	r0, r3
 8005542:	f001 fbc7 	bl	8006cd4 <SDIO_GetResponse>
 8005546:	4602      	mov	r2, r0
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2108      	movs	r1, #8
 8005552:	4618      	mov	r0, r3
 8005554:	f001 fbbe 	bl	8006cd4 <SDIO_GetResponse>
 8005558:	4602      	mov	r2, r0
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	210c      	movs	r1, #12
 8005564:	4618      	mov	r0, r3
 8005566:	f001 fbb5 	bl	8006cd4 <SDIO_GetResponse>
 800556a:	4602      	mov	r2, r0
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005576:	2b03      	cmp	r3, #3
 8005578:	d00d      	beq.n	8005596 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f107 020e 	add.w	r2, r7, #14
 8005582:	4611      	mov	r1, r2
 8005584:	4618      	mov	r0, r3
 8005586:	f001 fd2b 	bl	8006fe0 <SDMMC_CmdSetRelAdd>
 800558a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800558c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <SD_InitCard+0xae>
    {
      return errorstate;
 8005592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005594:	e070      	b.n	8005678 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800559a:	2b03      	cmp	r3, #3
 800559c:	d036      	beq.n	800560c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800559e:	89fb      	ldrh	r3, [r7, #14]
 80055a0:	461a      	mov	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ae:	041b      	lsls	r3, r3, #16
 80055b0:	4619      	mov	r1, r3
 80055b2:	4610      	mov	r0, r2
 80055b4:	f001 fcf5 	bl	8006fa2 <SDMMC_CmdSendCSD>
 80055b8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80055ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d001      	beq.n	80055c4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80055c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055c2:	e059      	b.n	8005678 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2100      	movs	r1, #0
 80055ca:	4618      	mov	r0, r3
 80055cc:	f001 fb82 	bl	8006cd4 <SDIO_GetResponse>
 80055d0:	4602      	mov	r2, r0
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2104      	movs	r1, #4
 80055dc:	4618      	mov	r0, r3
 80055de:	f001 fb79 	bl	8006cd4 <SDIO_GetResponse>
 80055e2:	4602      	mov	r2, r0
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2108      	movs	r1, #8
 80055ee:	4618      	mov	r0, r3
 80055f0:	f001 fb70 	bl	8006cd4 <SDIO_GetResponse>
 80055f4:	4602      	mov	r2, r0
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	210c      	movs	r1, #12
 8005600:	4618      	mov	r0, r3
 8005602:	f001 fb67 	bl	8006cd4 <SDIO_GetResponse>
 8005606:	4602      	mov	r2, r0
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2104      	movs	r1, #4
 8005612:	4618      	mov	r0, r3
 8005614:	f001 fb5e 	bl	8006cd4 <SDIO_GetResponse>
 8005618:	4603      	mov	r3, r0
 800561a:	0d1a      	lsrs	r2, r3, #20
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005620:	f107 0310 	add.w	r3, r7, #16
 8005624:	4619      	mov	r1, r3
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7ff fd20 	bl	800506c <HAL_SD_GetCardCSD>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d002      	beq.n	8005638 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005632:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005636:	e01f      	b.n	8005678 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6819      	ldr	r1, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005640:	041b      	lsls	r3, r3, #16
 8005642:	461a      	mov	r2, r3
 8005644:	f04f 0300 	mov.w	r3, #0
 8005648:	4608      	mov	r0, r1
 800564a:	f001 fba4 	bl	8006d96 <SDMMC_CmdSelDesel>
 800564e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <SD_InitCard+0x172>
  {
    return errorstate;
 8005656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005658:	e00e      	b.n	8005678 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681d      	ldr	r5, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	466c      	mov	r4, sp
 8005662:	f103 0210 	add.w	r2, r3, #16
 8005666:	ca07      	ldmia	r2, {r0, r1, r2}
 8005668:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800566c:	3304      	adds	r3, #4
 800566e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005670:	4628      	mov	r0, r5
 8005672:	f001 faa3 	bl	8006bbc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3740      	adds	r7, #64	; 0x40
 800567c:	46bd      	mov	sp, r7
 800567e:	bdb0      	pop	{r4, r5, r7, pc}

08005680 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	617b      	str	r3, [r7, #20]
 8005690:	2300      	movs	r3, #0
 8005692:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4618      	mov	r0, r3
 800569a:	f001 fb9f 	bl	8006ddc <SDMMC_CmdGoIdleState>
 800569e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <SD_PowerON+0x2a>
  {
    return errorstate;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	e072      	b.n	8005790 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f001 fbb2 	bl	8006e18 <SDMMC_CmdOperCond>
 80056b4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00d      	beq.n	80056d8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f001 fb88 	bl	8006ddc <SDMMC_CmdGoIdleState>
 80056cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d004      	beq.n	80056de <SD_PowerON+0x5e>
    {
      return errorstate;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	e05b      	b.n	8005790 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d137      	bne.n	8005756 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2100      	movs	r1, #0
 80056ec:	4618      	mov	r0, r3
 80056ee:	f001 fbb2 	bl	8006e56 <SDMMC_CmdAppCommand>
 80056f2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d02d      	beq.n	8005756 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80056fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80056fe:	e047      	b.n	8005790 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2100      	movs	r1, #0
 8005706:	4618      	mov	r0, r3
 8005708:	f001 fba5 	bl	8006e56 <SDMMC_CmdAppCommand>
 800570c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d001      	beq.n	8005718 <SD_PowerON+0x98>
    {
      return errorstate;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	e03b      	b.n	8005790 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	491e      	ldr	r1, [pc, #120]	; (8005798 <SD_PowerON+0x118>)
 800571e:	4618      	mov	r0, r3
 8005720:	f001 fbbb 	bl	8006e9a <SDMMC_CmdAppOperCommand>
 8005724:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d002      	beq.n	8005732 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800572c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005730:	e02e      	b.n	8005790 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2100      	movs	r1, #0
 8005738:	4618      	mov	r0, r3
 800573a:	f001 facb 	bl	8006cd4 <SDIO_GetResponse>
 800573e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	0fdb      	lsrs	r3, r3, #31
 8005744:	2b01      	cmp	r3, #1
 8005746:	d101      	bne.n	800574c <SD_PowerON+0xcc>
 8005748:	2301      	movs	r3, #1
 800574a:	e000      	b.n	800574e <SD_PowerON+0xce>
 800574c:	2300      	movs	r3, #0
 800574e:	613b      	str	r3, [r7, #16]

    count++;
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	3301      	adds	r3, #1
 8005754:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800575c:	4293      	cmp	r3, r2
 800575e:	d802      	bhi.n	8005766 <SD_PowerON+0xe6>
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d0cc      	beq.n	8005700 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800576c:	4293      	cmp	r3, r2
 800576e:	d902      	bls.n	8005776 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005770:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005774:	e00c      	b.n	8005790 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d003      	beq.n	8005788 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	645a      	str	r2, [r3, #68]	; 0x44
 8005786:	e002      	b.n	800578e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3718      	adds	r7, #24
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	c1100000 	.word	0xc1100000

0800579c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80057a4:	2300      	movs	r3, #0
 80057a6:	60fb      	str	r3, [r7, #12]
 80057a8:	2300      	movs	r3, #0
 80057aa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2100      	movs	r1, #0
 80057b2:	4618      	mov	r0, r3
 80057b4:	f001 fa8e 	bl	8006cd4 <SDIO_GetResponse>
 80057b8:	4603      	mov	r3, r0
 80057ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057c2:	d102      	bne.n	80057ca <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80057c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80057c8:	e02f      	b.n	800582a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80057ca:	f107 030c 	add.w	r3, r7, #12
 80057ce:	4619      	mov	r1, r3
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 f879 	bl	80058c8 <SD_FindSCR>
 80057d6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	e023      	b.n	800582a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d01c      	beq.n	8005826 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057f4:	041b      	lsls	r3, r3, #16
 80057f6:	4619      	mov	r1, r3
 80057f8:	4610      	mov	r0, r2
 80057fa:	f001 fb2c 	bl	8006e56 <SDMMC_CmdAppCommand>
 80057fe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	e00f      	b.n	800582a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2102      	movs	r1, #2
 8005810:	4618      	mov	r0, r3
 8005812:	f001 fb65 	bl	8006ee0 <SDMMC_CmdBusWidth>
 8005816:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	e003      	b.n	800582a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005822:	2300      	movs	r3, #0
 8005824:	e001      	b.n	800582a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005826:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800582a:	4618      	mov	r0, r3
 800582c:	3718      	adds	r7, #24
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b086      	sub	sp, #24
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800583a:	2300      	movs	r3, #0
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	2300      	movs	r3, #0
 8005840:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2100      	movs	r1, #0
 8005848:	4618      	mov	r0, r3
 800584a:	f001 fa43 	bl	8006cd4 <SDIO_GetResponse>
 800584e:	4603      	mov	r3, r0
 8005850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005854:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005858:	d102      	bne.n	8005860 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800585a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800585e:	e02f      	b.n	80058c0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005860:	f107 030c 	add.w	r3, r7, #12
 8005864:	4619      	mov	r1, r3
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f82e 	bl	80058c8 <SD_FindSCR>
 800586c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	e023      	b.n	80058c0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d01c      	beq.n	80058bc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800588a:	041b      	lsls	r3, r3, #16
 800588c:	4619      	mov	r1, r3
 800588e:	4610      	mov	r0, r2
 8005890:	f001 fae1 	bl	8006e56 <SDMMC_CmdAppCommand>
 8005894:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d001      	beq.n	80058a0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	e00f      	b.n	80058c0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2100      	movs	r1, #0
 80058a6:	4618      	mov	r0, r3
 80058a8:	f001 fb1a 	bl	8006ee0 <SDMMC_CmdBusWidth>
 80058ac:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	e003      	b.n	80058c0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80058b8:	2300      	movs	r3, #0
 80058ba:	e001      	b.n	80058c0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80058bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80058c8:	b590      	push	{r4, r7, lr}
 80058ca:	b08f      	sub	sp, #60	; 0x3c
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80058d2:	f7fa ff8f 	bl	80007f4 <HAL_GetTick>
 80058d6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80058dc:	2300      	movs	r3, #0
 80058de:	60bb      	str	r3, [r7, #8]
 80058e0:	2300      	movs	r3, #0
 80058e2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2108      	movs	r1, #8
 80058ee:	4618      	mov	r0, r3
 80058f0:	f001 fa2f 	bl	8006d52 <SDMMC_CmdBlockLength>
 80058f4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80058f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <SD_FindSCR+0x38>
  {
    return errorstate;
 80058fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fe:	e0b2      	b.n	8005a66 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005908:	041b      	lsls	r3, r3, #16
 800590a:	4619      	mov	r1, r3
 800590c:	4610      	mov	r0, r2
 800590e:	f001 faa2 	bl	8006e56 <SDMMC_CmdAppCommand>
 8005912:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005916:	2b00      	cmp	r3, #0
 8005918:	d001      	beq.n	800591e <SD_FindSCR+0x56>
  {
    return errorstate;
 800591a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591c:	e0a3      	b.n	8005a66 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800591e:	f04f 33ff 	mov.w	r3, #4294967295
 8005922:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005924:	2308      	movs	r3, #8
 8005926:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005928:	2330      	movs	r3, #48	; 0x30
 800592a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800592c:	2302      	movs	r3, #2
 800592e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005930:	2300      	movs	r3, #0
 8005932:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005934:	2301      	movs	r3, #1
 8005936:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f107 0210 	add.w	r2, r7, #16
 8005940:	4611      	mov	r1, r2
 8005942:	4618      	mov	r0, r3
 8005944:	f001 f9d9 	bl	8006cfa <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4618      	mov	r0, r3
 800594e:	f001 fae9 	bl	8006f24 <SDMMC_CmdSendSCR>
 8005952:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005956:	2b00      	cmp	r3, #0
 8005958:	d02a      	beq.n	80059b0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800595a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595c:	e083      	b.n	8005a66 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00f      	beq.n	800598c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6819      	ldr	r1, [r3, #0]
 8005970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	f107 0208 	add.w	r2, r7, #8
 8005978:	18d4      	adds	r4, r2, r3
 800597a:	4608      	mov	r0, r1
 800597c:	f001 f949 	bl	8006c12 <SDIO_ReadFIFO>
 8005980:	4603      	mov	r3, r0
 8005982:	6023      	str	r3, [r4, #0]
      index++;
 8005984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005986:	3301      	adds	r3, #1
 8005988:	637b      	str	r3, [r7, #52]	; 0x34
 800598a:	e006      	b.n	800599a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005992:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d012      	beq.n	80059c0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800599a:	f7fa ff2b 	bl	80007f4 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a8:	d102      	bne.n	80059b0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80059aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80059ae:	e05a      	b.n	8005a66 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d0cf      	beq.n	800595e <SD_FindSCR+0x96>
 80059be:	e000      	b.n	80059c2 <SD_FindSCR+0xfa>
      break;
 80059c0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c8:	f003 0308 	and.w	r3, r3, #8
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d005      	beq.n	80059dc <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2208      	movs	r2, #8
 80059d6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80059d8:	2308      	movs	r3, #8
 80059da:	e044      	b.n	8005a66 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e2:	f003 0302 	and.w	r3, r3, #2
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d005      	beq.n	80059f6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2202      	movs	r2, #2
 80059f0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80059f2:	2302      	movs	r3, #2
 80059f4:	e037      	b.n	8005a66 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059fc:	f003 0320 	and.w	r3, r3, #32
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d005      	beq.n	8005a10 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2220      	movs	r2, #32
 8005a0a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005a0c:	2320      	movs	r3, #32
 8005a0e:	e02a      	b.n	8005a66 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f240 523a 	movw	r2, #1338	; 0x53a
 8005a18:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	061a      	lsls	r2, r3, #24
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	021b      	lsls	r3, r3, #8
 8005a22:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a26:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	0a1b      	lsrs	r3, r3, #8
 8005a2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005a30:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	0e1b      	lsrs	r3, r3, #24
 8005a36:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3a:	601a      	str	r2, [r3, #0]
    scr++;
 8005a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3e:	3304      	adds	r3, #4
 8005a40:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	061a      	lsls	r2, r3, #24
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	021b      	lsls	r3, r3, #8
 8005a4a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a4e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	0a1b      	lsrs	r3, r3, #8
 8005a54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005a58:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	0e1b      	lsrs	r3, r3, #24
 8005a5e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a62:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	373c      	adds	r7, #60	; 0x3c
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd90      	pop	{r4, r7, pc}

08005a6e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b082      	sub	sp, #8
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e041      	b.n	8005b04 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d106      	bne.n	8005a9a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f005 fe11 	bl	800b6bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2202      	movs	r2, #2
 8005a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	3304      	adds	r3, #4
 8005aaa:	4619      	mov	r1, r3
 8005aac:	4610      	mov	r0, r2
 8005aae:	f000 fb47 	bl	8006140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3708      	adds	r7, #8
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d001      	beq.n	8005b24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e044      	b.n	8005bae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2202      	movs	r2, #2
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68da      	ldr	r2, [r3, #12]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f042 0201 	orr.w	r2, r2, #1
 8005b3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a1e      	ldr	r2, [pc, #120]	; (8005bbc <HAL_TIM_Base_Start_IT+0xb0>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d018      	beq.n	8005b78 <HAL_TIM_Base_Start_IT+0x6c>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b4e:	d013      	beq.n	8005b78 <HAL_TIM_Base_Start_IT+0x6c>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a1a      	ldr	r2, [pc, #104]	; (8005bc0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d00e      	beq.n	8005b78 <HAL_TIM_Base_Start_IT+0x6c>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a19      	ldr	r2, [pc, #100]	; (8005bc4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d009      	beq.n	8005b78 <HAL_TIM_Base_Start_IT+0x6c>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a17      	ldr	r2, [pc, #92]	; (8005bc8 <HAL_TIM_Base_Start_IT+0xbc>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d004      	beq.n	8005b78 <HAL_TIM_Base_Start_IT+0x6c>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a16      	ldr	r2, [pc, #88]	; (8005bcc <HAL_TIM_Base_Start_IT+0xc0>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d111      	bne.n	8005b9c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f003 0307 	and.w	r3, r3, #7
 8005b82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2b06      	cmp	r3, #6
 8005b88:	d010      	beq.n	8005bac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f042 0201 	orr.w	r2, r2, #1
 8005b98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b9a:	e007      	b.n	8005bac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f042 0201 	orr.w	r2, r2, #1
 8005baa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	40010000 	.word	0x40010000
 8005bc0:	40000400 	.word	0x40000400
 8005bc4:	40000800 	.word	0x40000800
 8005bc8:	40000c00 	.word	0x40000c00
 8005bcc:	40014000 	.word	0x40014000

08005bd0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e041      	b.n	8005c66 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d106      	bne.n	8005bfc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f839 	bl	8005c6e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	3304      	adds	r3, #4
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	4610      	mov	r0, r2
 8005c10:	f000 fa96 	bl	8006140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3708      	adds	r7, #8
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b083      	sub	sp, #12
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005c76:	bf00      	nop
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b082      	sub	sp, #8
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	f003 0302 	and.w	r3, r3, #2
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d122      	bne.n	8005cde <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f003 0302 	and.w	r3, r3, #2
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d11b      	bne.n	8005cde <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f06f 0202 	mvn.w	r2, #2
 8005cae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	f003 0303 	and.w	r3, r3, #3
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d003      	beq.n	8005ccc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 fa1c 	bl	8006102 <HAL_TIM_IC_CaptureCallback>
 8005cca:	e005      	b.n	8005cd8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 fa0e 	bl	80060ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fa1f 	bl	8006116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b04      	cmp	r3, #4
 8005cea:	d122      	bne.n	8005d32 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	f003 0304 	and.w	r3, r3, #4
 8005cf6:	2b04      	cmp	r3, #4
 8005cf8:	d11b      	bne.n	8005d32 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f06f 0204 	mvn.w	r2, #4
 8005d02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2202      	movs	r2, #2
 8005d08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d003      	beq.n	8005d20 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 f9f2 	bl	8006102 <HAL_TIM_IC_CaptureCallback>
 8005d1e:	e005      	b.n	8005d2c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 f9e4 	bl	80060ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f9f5 	bl	8006116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	f003 0308 	and.w	r3, r3, #8
 8005d3c:	2b08      	cmp	r3, #8
 8005d3e:	d122      	bne.n	8005d86 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	f003 0308 	and.w	r3, r3, #8
 8005d4a:	2b08      	cmp	r3, #8
 8005d4c:	d11b      	bne.n	8005d86 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f06f 0208 	mvn.w	r2, #8
 8005d56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2204      	movs	r2, #4
 8005d5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	69db      	ldr	r3, [r3, #28]
 8005d64:	f003 0303 	and.w	r3, r3, #3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d003      	beq.n	8005d74 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f9c8 	bl	8006102 <HAL_TIM_IC_CaptureCallback>
 8005d72:	e005      	b.n	8005d80 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 f9ba 	bl	80060ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f9cb 	bl	8006116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	f003 0310 	and.w	r3, r3, #16
 8005d90:	2b10      	cmp	r3, #16
 8005d92:	d122      	bne.n	8005dda <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	f003 0310 	and.w	r3, r3, #16
 8005d9e:	2b10      	cmp	r3, #16
 8005da0:	d11b      	bne.n	8005dda <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f06f 0210 	mvn.w	r2, #16
 8005daa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2208      	movs	r2, #8
 8005db0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	69db      	ldr	r3, [r3, #28]
 8005db8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d003      	beq.n	8005dc8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f99e 	bl	8006102 <HAL_TIM_IC_CaptureCallback>
 8005dc6:	e005      	b.n	8005dd4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f990 	bl	80060ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 f9a1 	bl	8006116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	f003 0301 	and.w	r3, r3, #1
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d10e      	bne.n	8005e06 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d107      	bne.n	8005e06 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f06f 0201 	mvn.w	r2, #1
 8005dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 f96a 	bl	80060da <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e10:	2b80      	cmp	r3, #128	; 0x80
 8005e12:	d10e      	bne.n	8005e32 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e1e:	2b80      	cmp	r3, #128	; 0x80
 8005e20:	d107      	bne.n	8005e32 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fca5 	bl	800677c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e3c:	2b40      	cmp	r3, #64	; 0x40
 8005e3e:	d10e      	bne.n	8005e5e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4a:	2b40      	cmp	r3, #64	; 0x40
 8005e4c:	d107      	bne.n	8005e5e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 f966 	bl	800612a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	f003 0320 	and.w	r3, r3, #32
 8005e68:	2b20      	cmp	r3, #32
 8005e6a:	d10e      	bne.n	8005e8a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	f003 0320 	and.w	r3, r3, #32
 8005e76:	2b20      	cmp	r3, #32
 8005e78:	d107      	bne.n	8005e8a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f06f 0220 	mvn.w	r2, #32
 8005e82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 fc6f 	bl	8006768 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e8a:	bf00      	nop
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
	...

08005e94 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d101      	bne.n	8005eb2 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005eae:	2302      	movs	r3, #2
 8005eb0:	e048      	b.n	8005f44 <HAL_TIM_OC_ConfigChannel+0xb0>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2b0c      	cmp	r3, #12
 8005ebe:	d839      	bhi.n	8005f34 <HAL_TIM_OC_ConfigChannel+0xa0>
 8005ec0:	a201      	add	r2, pc, #4	; (adr r2, 8005ec8 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec6:	bf00      	nop
 8005ec8:	08005efd 	.word	0x08005efd
 8005ecc:	08005f35 	.word	0x08005f35
 8005ed0:	08005f35 	.word	0x08005f35
 8005ed4:	08005f35 	.word	0x08005f35
 8005ed8:	08005f0b 	.word	0x08005f0b
 8005edc:	08005f35 	.word	0x08005f35
 8005ee0:	08005f35 	.word	0x08005f35
 8005ee4:	08005f35 	.word	0x08005f35
 8005ee8:	08005f19 	.word	0x08005f19
 8005eec:	08005f35 	.word	0x08005f35
 8005ef0:	08005f35 	.word	0x08005f35
 8005ef4:	08005f35 	.word	0x08005f35
 8005ef8:	08005f27 	.word	0x08005f27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68b9      	ldr	r1, [r7, #8]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 f99c 	bl	8006240 <TIM_OC1_SetConfig>
      break;
 8005f08:	e017      	b.n	8005f3a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68b9      	ldr	r1, [r7, #8]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f000 f9fb 	bl	800630c <TIM_OC2_SetConfig>
      break;
 8005f16:	e010      	b.n	8005f3a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68b9      	ldr	r1, [r7, #8]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 fa60 	bl	80063e4 <TIM_OC3_SetConfig>
      break;
 8005f24:	e009      	b.n	8005f3a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68b9      	ldr	r1, [r7, #8]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f000 fac3 	bl	80064b8 <TIM_OC4_SetConfig>
      break;
 8005f32:	e002      	b.n	8005f3a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	75fb      	strb	r3, [r7, #23]
      break;
 8005f38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3718      	adds	r7, #24
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f56:	2300      	movs	r3, #0
 8005f58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d101      	bne.n	8005f68 <HAL_TIM_ConfigClockSource+0x1c>
 8005f64:	2302      	movs	r3, #2
 8005f66:	e0b4      	b.n	80060d2 <HAL_TIM_ConfigClockSource+0x186>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2202      	movs	r2, #2
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fa0:	d03e      	beq.n	8006020 <HAL_TIM_ConfigClockSource+0xd4>
 8005fa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fa6:	f200 8087 	bhi.w	80060b8 <HAL_TIM_ConfigClockSource+0x16c>
 8005faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fae:	f000 8086 	beq.w	80060be <HAL_TIM_ConfigClockSource+0x172>
 8005fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fb6:	d87f      	bhi.n	80060b8 <HAL_TIM_ConfigClockSource+0x16c>
 8005fb8:	2b70      	cmp	r3, #112	; 0x70
 8005fba:	d01a      	beq.n	8005ff2 <HAL_TIM_ConfigClockSource+0xa6>
 8005fbc:	2b70      	cmp	r3, #112	; 0x70
 8005fbe:	d87b      	bhi.n	80060b8 <HAL_TIM_ConfigClockSource+0x16c>
 8005fc0:	2b60      	cmp	r3, #96	; 0x60
 8005fc2:	d050      	beq.n	8006066 <HAL_TIM_ConfigClockSource+0x11a>
 8005fc4:	2b60      	cmp	r3, #96	; 0x60
 8005fc6:	d877      	bhi.n	80060b8 <HAL_TIM_ConfigClockSource+0x16c>
 8005fc8:	2b50      	cmp	r3, #80	; 0x50
 8005fca:	d03c      	beq.n	8006046 <HAL_TIM_ConfigClockSource+0xfa>
 8005fcc:	2b50      	cmp	r3, #80	; 0x50
 8005fce:	d873      	bhi.n	80060b8 <HAL_TIM_ConfigClockSource+0x16c>
 8005fd0:	2b40      	cmp	r3, #64	; 0x40
 8005fd2:	d058      	beq.n	8006086 <HAL_TIM_ConfigClockSource+0x13a>
 8005fd4:	2b40      	cmp	r3, #64	; 0x40
 8005fd6:	d86f      	bhi.n	80060b8 <HAL_TIM_ConfigClockSource+0x16c>
 8005fd8:	2b30      	cmp	r3, #48	; 0x30
 8005fda:	d064      	beq.n	80060a6 <HAL_TIM_ConfigClockSource+0x15a>
 8005fdc:	2b30      	cmp	r3, #48	; 0x30
 8005fde:	d86b      	bhi.n	80060b8 <HAL_TIM_ConfigClockSource+0x16c>
 8005fe0:	2b20      	cmp	r3, #32
 8005fe2:	d060      	beq.n	80060a6 <HAL_TIM_ConfigClockSource+0x15a>
 8005fe4:	2b20      	cmp	r3, #32
 8005fe6:	d867      	bhi.n	80060b8 <HAL_TIM_ConfigClockSource+0x16c>
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d05c      	beq.n	80060a6 <HAL_TIM_ConfigClockSource+0x15a>
 8005fec:	2b10      	cmp	r3, #16
 8005fee:	d05a      	beq.n	80060a6 <HAL_TIM_ConfigClockSource+0x15a>
 8005ff0:	e062      	b.n	80060b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6818      	ldr	r0, [r3, #0]
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	6899      	ldr	r1, [r3, #8]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	f000 fb23 	bl	800664c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006014:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	609a      	str	r2, [r3, #8]
      break;
 800601e:	e04f      	b.n	80060c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6818      	ldr	r0, [r3, #0]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	6899      	ldr	r1, [r3, #8]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f000 fb0c 	bl	800664c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689a      	ldr	r2, [r3, #8]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006042:	609a      	str	r2, [r3, #8]
      break;
 8006044:	e03c      	b.n	80060c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6818      	ldr	r0, [r3, #0]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	6859      	ldr	r1, [r3, #4]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	461a      	mov	r2, r3
 8006054:	f000 fa80 	bl	8006558 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2150      	movs	r1, #80	; 0x50
 800605e:	4618      	mov	r0, r3
 8006060:	f000 fad9 	bl	8006616 <TIM_ITRx_SetConfig>
      break;
 8006064:	e02c      	b.n	80060c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6818      	ldr	r0, [r3, #0]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	6859      	ldr	r1, [r3, #4]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	461a      	mov	r2, r3
 8006074:	f000 fa9f 	bl	80065b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2160      	movs	r1, #96	; 0x60
 800607e:	4618      	mov	r0, r3
 8006080:	f000 fac9 	bl	8006616 <TIM_ITRx_SetConfig>
      break;
 8006084:	e01c      	b.n	80060c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6818      	ldr	r0, [r3, #0]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	6859      	ldr	r1, [r3, #4]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	461a      	mov	r2, r3
 8006094:	f000 fa60 	bl	8006558 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2140      	movs	r1, #64	; 0x40
 800609e:	4618      	mov	r0, r3
 80060a0:	f000 fab9 	bl	8006616 <TIM_ITRx_SetConfig>
      break;
 80060a4:	e00c      	b.n	80060c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4619      	mov	r1, r3
 80060b0:	4610      	mov	r0, r2
 80060b2:	f000 fab0 	bl	8006616 <TIM_ITRx_SetConfig>
      break;
 80060b6:	e003      	b.n	80060c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	73fb      	strb	r3, [r7, #15]
      break;
 80060bc:	e000      	b.n	80060c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80060be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060da:	b480      	push	{r7}
 80060dc:	b083      	sub	sp, #12
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80060e2:	bf00      	nop
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b083      	sub	sp, #12
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006102:	b480      	push	{r7}
 8006104:	b083      	sub	sp, #12
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800610a:	bf00      	nop
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006116:	b480      	push	{r7}
 8006118:	b083      	sub	sp, #12
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800611e:	bf00      	nop
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006132:	bf00      	nop
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
	...

08006140 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a34      	ldr	r2, [pc, #208]	; (8006224 <TIM_Base_SetConfig+0xe4>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d00f      	beq.n	8006178 <TIM_Base_SetConfig+0x38>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800615e:	d00b      	beq.n	8006178 <TIM_Base_SetConfig+0x38>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a31      	ldr	r2, [pc, #196]	; (8006228 <TIM_Base_SetConfig+0xe8>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d007      	beq.n	8006178 <TIM_Base_SetConfig+0x38>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a30      	ldr	r2, [pc, #192]	; (800622c <TIM_Base_SetConfig+0xec>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d003      	beq.n	8006178 <TIM_Base_SetConfig+0x38>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a2f      	ldr	r2, [pc, #188]	; (8006230 <TIM_Base_SetConfig+0xf0>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d108      	bne.n	800618a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800617e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	4313      	orrs	r3, r2
 8006188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a25      	ldr	r2, [pc, #148]	; (8006224 <TIM_Base_SetConfig+0xe4>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d01b      	beq.n	80061ca <TIM_Base_SetConfig+0x8a>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006198:	d017      	beq.n	80061ca <TIM_Base_SetConfig+0x8a>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a22      	ldr	r2, [pc, #136]	; (8006228 <TIM_Base_SetConfig+0xe8>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d013      	beq.n	80061ca <TIM_Base_SetConfig+0x8a>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a21      	ldr	r2, [pc, #132]	; (800622c <TIM_Base_SetConfig+0xec>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d00f      	beq.n	80061ca <TIM_Base_SetConfig+0x8a>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a20      	ldr	r2, [pc, #128]	; (8006230 <TIM_Base_SetConfig+0xf0>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d00b      	beq.n	80061ca <TIM_Base_SetConfig+0x8a>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a1f      	ldr	r2, [pc, #124]	; (8006234 <TIM_Base_SetConfig+0xf4>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d007      	beq.n	80061ca <TIM_Base_SetConfig+0x8a>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a1e      	ldr	r2, [pc, #120]	; (8006238 <TIM_Base_SetConfig+0xf8>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d003      	beq.n	80061ca <TIM_Base_SetConfig+0x8a>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a1d      	ldr	r2, [pc, #116]	; (800623c <TIM_Base_SetConfig+0xfc>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d108      	bne.n	80061dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	4313      	orrs	r3, r2
 80061da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	689a      	ldr	r2, [r3, #8]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a08      	ldr	r2, [pc, #32]	; (8006224 <TIM_Base_SetConfig+0xe4>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d103      	bne.n	8006210 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	691a      	ldr	r2, [r3, #16]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	615a      	str	r2, [r3, #20]
}
 8006216:	bf00      	nop
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	40010000 	.word	0x40010000
 8006228:	40000400 	.word	0x40000400
 800622c:	40000800 	.word	0x40000800
 8006230:	40000c00 	.word	0x40000c00
 8006234:	40014000 	.word	0x40014000
 8006238:	40014400 	.word	0x40014400
 800623c:	40014800 	.word	0x40014800

08006240 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006240:	b480      	push	{r7}
 8006242:	b087      	sub	sp, #28
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	f023 0201 	bic.w	r2, r3, #1
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f023 0303 	bic.w	r3, r3, #3
 8006276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	4313      	orrs	r3, r2
 8006280:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f023 0302 	bic.w	r3, r3, #2
 8006288:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	4313      	orrs	r3, r2
 8006292:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a1c      	ldr	r2, [pc, #112]	; (8006308 <TIM_OC1_SetConfig+0xc8>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d10c      	bne.n	80062b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	f023 0308 	bic.w	r3, r3, #8
 80062a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	f023 0304 	bic.w	r3, r3, #4
 80062b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a13      	ldr	r2, [pc, #76]	; (8006308 <TIM_OC1_SetConfig+0xc8>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d111      	bne.n	80062e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	4313      	orrs	r3, r2
 80062e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	621a      	str	r2, [r3, #32]
}
 80062fc:	bf00      	nop
 80062fe:	371c      	adds	r7, #28
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	40010000 	.word	0x40010000

0800630c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800630c:	b480      	push	{r7}
 800630e:	b087      	sub	sp, #28
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	f023 0210 	bic.w	r2, r3, #16
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800633a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006342:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	021b      	lsls	r3, r3, #8
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	4313      	orrs	r3, r2
 800634e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	f023 0320 	bic.w	r3, r3, #32
 8006356:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	011b      	lsls	r3, r3, #4
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	4313      	orrs	r3, r2
 8006362:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a1e      	ldr	r2, [pc, #120]	; (80063e0 <TIM_OC2_SetConfig+0xd4>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d10d      	bne.n	8006388 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006372:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	011b      	lsls	r3, r3, #4
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	4313      	orrs	r3, r2
 800637e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006386:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a15      	ldr	r2, [pc, #84]	; (80063e0 <TIM_OC2_SetConfig+0xd4>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d113      	bne.n	80063b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006396:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800639e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	685a      	ldr	r2, [r3, #4]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	621a      	str	r2, [r3, #32]
}
 80063d2:	bf00      	nop
 80063d4:	371c      	adds	r7, #28
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	40010000 	.word	0x40010000

080063e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b087      	sub	sp, #28
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a1b      	ldr	r3, [r3, #32]
 80063f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	69db      	ldr	r3, [r3, #28]
 800640a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f023 0303 	bic.w	r3, r3, #3
 800641a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	4313      	orrs	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800642c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	021b      	lsls	r3, r3, #8
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	4313      	orrs	r3, r2
 8006438:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a1d      	ldr	r2, [pc, #116]	; (80064b4 <TIM_OC3_SetConfig+0xd0>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d10d      	bne.n	800645e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006448:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	021b      	lsls	r3, r3, #8
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	4313      	orrs	r3, r2
 8006454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800645c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a14      	ldr	r2, [pc, #80]	; (80064b4 <TIM_OC3_SetConfig+0xd0>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d113      	bne.n	800648e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800646c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006474:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	011b      	lsls	r3, r3, #4
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	4313      	orrs	r3, r2
 8006480:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	011b      	lsls	r3, r3, #4
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	4313      	orrs	r3, r2
 800648c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	685a      	ldr	r2, [r3, #4]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	697a      	ldr	r2, [r7, #20]
 80064a6:	621a      	str	r2, [r3, #32]
}
 80064a8:	bf00      	nop
 80064aa:	371c      	adds	r7, #28
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr
 80064b4:	40010000 	.word	0x40010000

080064b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	69db      	ldr	r3, [r3, #28]
 80064de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	021b      	lsls	r3, r3, #8
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006502:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	031b      	lsls	r3, r3, #12
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	4313      	orrs	r3, r2
 800650e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a10      	ldr	r2, [pc, #64]	; (8006554 <TIM_OC4_SetConfig+0x9c>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d109      	bne.n	800652c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800651e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	019b      	lsls	r3, r3, #6
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	4313      	orrs	r3, r2
 800652a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	621a      	str	r2, [r3, #32]
}
 8006546:	bf00      	nop
 8006548:	371c      	adds	r7, #28
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	40010000 	.word	0x40010000

08006558 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006558:	b480      	push	{r7}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6a1b      	ldr	r3, [r3, #32]
 8006568:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	f023 0201 	bic.w	r2, r3, #1
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	011b      	lsls	r3, r3, #4
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	4313      	orrs	r3, r2
 800658c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	f023 030a 	bic.w	r3, r3, #10
 8006594:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	4313      	orrs	r3, r2
 800659c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	621a      	str	r2, [r3, #32]
}
 80065aa:	bf00      	nop
 80065ac:	371c      	adds	r7, #28
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b087      	sub	sp, #28
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	60f8      	str	r0, [r7, #12]
 80065be:	60b9      	str	r1, [r7, #8]
 80065c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	f023 0210 	bic.w	r2, r3, #16
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	031b      	lsls	r3, r3, #12
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	011b      	lsls	r3, r3, #4
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	621a      	str	r2, [r3, #32]
}
 800660a:	bf00      	nop
 800660c:	371c      	adds	r7, #28
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr

08006616 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006616:	b480      	push	{r7}
 8006618:	b085      	sub	sp, #20
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800662c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4313      	orrs	r3, r2
 8006634:	f043 0307 	orr.w	r3, r3, #7
 8006638:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	609a      	str	r2, [r3, #8]
}
 8006640:	bf00      	nop
 8006642:	3714      	adds	r7, #20
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800664c:	b480      	push	{r7}
 800664e:	b087      	sub	sp, #28
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
 8006658:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006666:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	021a      	lsls	r2, r3, #8
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	431a      	orrs	r2, r3
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	4313      	orrs	r3, r2
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	4313      	orrs	r3, r2
 8006678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	609a      	str	r2, [r3, #8]
}
 8006680:	bf00      	nop
 8006682:	371c      	adds	r7, #28
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800669c:	2b01      	cmp	r3, #1
 800669e:	d101      	bne.n	80066a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066a0:	2302      	movs	r3, #2
 80066a2:	e050      	b.n	8006746 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2202      	movs	r2, #2
 80066b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a1c      	ldr	r2, [pc, #112]	; (8006754 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d018      	beq.n	800671a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066f0:	d013      	beq.n	800671a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a18      	ldr	r2, [pc, #96]	; (8006758 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d00e      	beq.n	800671a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a16      	ldr	r2, [pc, #88]	; (800675c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d009      	beq.n	800671a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a15      	ldr	r2, [pc, #84]	; (8006760 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d004      	beq.n	800671a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a13      	ldr	r2, [pc, #76]	; (8006764 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d10c      	bne.n	8006734 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006720:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	4313      	orrs	r3, r2
 800672a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3714      	adds	r7, #20
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	40010000 	.word	0x40010000
 8006758:	40000400 	.word	0x40000400
 800675c:	40000800 	.word	0x40000800
 8006760:	40000c00 	.word	0x40000c00
 8006764:	40014000 	.word	0x40014000

08006768 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006784:	bf00      	nop
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d101      	bne.n	80067a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e03f      	b.n	8006822 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d106      	bne.n	80067bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f004 ffa6 	bl	800b708 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2224      	movs	r2, #36	; 0x24
 80067c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68da      	ldr	r2, [r3, #12]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 f829 	bl	800682c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	691a      	ldr	r2, [r3, #16]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	695a      	ldr	r2, [r3, #20]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68da      	ldr	r2, [r3, #12]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006808:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2220      	movs	r2, #32
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2220      	movs	r2, #32
 800681c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
	...

0800682c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800682c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006830:	b09f      	sub	sp, #124	; 0x7c
 8006832:	af00      	add	r7, sp, #0
 8006834:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006842:	68d9      	ldr	r1, [r3, #12]
 8006844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	ea40 0301 	orr.w	r3, r0, r1
 800684c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800684e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006850:	689a      	ldr	r2, [r3, #8]
 8006852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	431a      	orrs	r2, r3
 8006858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800685a:	695b      	ldr	r3, [r3, #20]
 800685c:	431a      	orrs	r2, r3
 800685e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	4313      	orrs	r3, r2
 8006864:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006870:	f021 010c 	bic.w	r1, r1, #12
 8006874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800687a:	430b      	orrs	r3, r1
 800687c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800687e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800688a:	6999      	ldr	r1, [r3, #24]
 800688c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	ea40 0301 	orr.w	r3, r0, r1
 8006894:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	4bc5      	ldr	r3, [pc, #788]	; (8006bb0 <UART_SetConfig+0x384>)
 800689c:	429a      	cmp	r2, r3
 800689e:	d004      	beq.n	80068aa <UART_SetConfig+0x7e>
 80068a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	4bc3      	ldr	r3, [pc, #780]	; (8006bb4 <UART_SetConfig+0x388>)
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d103      	bne.n	80068b2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80068aa:	f7fe f92b 	bl	8004b04 <HAL_RCC_GetPCLK2Freq>
 80068ae:	6778      	str	r0, [r7, #116]	; 0x74
 80068b0:	e002      	b.n	80068b8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80068b2:	f7fe f913 	bl	8004adc <HAL_RCC_GetPCLK1Freq>
 80068b6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ba:	69db      	ldr	r3, [r3, #28]
 80068bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068c0:	f040 80b6 	bne.w	8006a30 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068c6:	461c      	mov	r4, r3
 80068c8:	f04f 0500 	mov.w	r5, #0
 80068cc:	4622      	mov	r2, r4
 80068ce:	462b      	mov	r3, r5
 80068d0:	1891      	adds	r1, r2, r2
 80068d2:	6439      	str	r1, [r7, #64]	; 0x40
 80068d4:	415b      	adcs	r3, r3
 80068d6:	647b      	str	r3, [r7, #68]	; 0x44
 80068d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80068dc:	1912      	adds	r2, r2, r4
 80068de:	eb45 0303 	adc.w	r3, r5, r3
 80068e2:	f04f 0000 	mov.w	r0, #0
 80068e6:	f04f 0100 	mov.w	r1, #0
 80068ea:	00d9      	lsls	r1, r3, #3
 80068ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80068f0:	00d0      	lsls	r0, r2, #3
 80068f2:	4602      	mov	r2, r0
 80068f4:	460b      	mov	r3, r1
 80068f6:	1911      	adds	r1, r2, r4
 80068f8:	6639      	str	r1, [r7, #96]	; 0x60
 80068fa:	416b      	adcs	r3, r5
 80068fc:	667b      	str	r3, [r7, #100]	; 0x64
 80068fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	461a      	mov	r2, r3
 8006904:	f04f 0300 	mov.w	r3, #0
 8006908:	1891      	adds	r1, r2, r2
 800690a:	63b9      	str	r1, [r7, #56]	; 0x38
 800690c:	415b      	adcs	r3, r3
 800690e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006910:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006914:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006918:	f7f9 fc5e 	bl	80001d8 <__aeabi_uldivmod>
 800691c:	4602      	mov	r2, r0
 800691e:	460b      	mov	r3, r1
 8006920:	4ba5      	ldr	r3, [pc, #660]	; (8006bb8 <UART_SetConfig+0x38c>)
 8006922:	fba3 2302 	umull	r2, r3, r3, r2
 8006926:	095b      	lsrs	r3, r3, #5
 8006928:	011e      	lsls	r6, r3, #4
 800692a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800692c:	461c      	mov	r4, r3
 800692e:	f04f 0500 	mov.w	r5, #0
 8006932:	4622      	mov	r2, r4
 8006934:	462b      	mov	r3, r5
 8006936:	1891      	adds	r1, r2, r2
 8006938:	6339      	str	r1, [r7, #48]	; 0x30
 800693a:	415b      	adcs	r3, r3
 800693c:	637b      	str	r3, [r7, #52]	; 0x34
 800693e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006942:	1912      	adds	r2, r2, r4
 8006944:	eb45 0303 	adc.w	r3, r5, r3
 8006948:	f04f 0000 	mov.w	r0, #0
 800694c:	f04f 0100 	mov.w	r1, #0
 8006950:	00d9      	lsls	r1, r3, #3
 8006952:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006956:	00d0      	lsls	r0, r2, #3
 8006958:	4602      	mov	r2, r0
 800695a:	460b      	mov	r3, r1
 800695c:	1911      	adds	r1, r2, r4
 800695e:	65b9      	str	r1, [r7, #88]	; 0x58
 8006960:	416b      	adcs	r3, r5
 8006962:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	461a      	mov	r2, r3
 800696a:	f04f 0300 	mov.w	r3, #0
 800696e:	1891      	adds	r1, r2, r2
 8006970:	62b9      	str	r1, [r7, #40]	; 0x28
 8006972:	415b      	adcs	r3, r3
 8006974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006976:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800697a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800697e:	f7f9 fc2b 	bl	80001d8 <__aeabi_uldivmod>
 8006982:	4602      	mov	r2, r0
 8006984:	460b      	mov	r3, r1
 8006986:	4b8c      	ldr	r3, [pc, #560]	; (8006bb8 <UART_SetConfig+0x38c>)
 8006988:	fba3 1302 	umull	r1, r3, r3, r2
 800698c:	095b      	lsrs	r3, r3, #5
 800698e:	2164      	movs	r1, #100	; 0x64
 8006990:	fb01 f303 	mul.w	r3, r1, r3
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	00db      	lsls	r3, r3, #3
 8006998:	3332      	adds	r3, #50	; 0x32
 800699a:	4a87      	ldr	r2, [pc, #540]	; (8006bb8 <UART_SetConfig+0x38c>)
 800699c:	fba2 2303 	umull	r2, r3, r2, r3
 80069a0:	095b      	lsrs	r3, r3, #5
 80069a2:	005b      	lsls	r3, r3, #1
 80069a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069a8:	441e      	add	r6, r3
 80069aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069ac:	4618      	mov	r0, r3
 80069ae:	f04f 0100 	mov.w	r1, #0
 80069b2:	4602      	mov	r2, r0
 80069b4:	460b      	mov	r3, r1
 80069b6:	1894      	adds	r4, r2, r2
 80069b8:	623c      	str	r4, [r7, #32]
 80069ba:	415b      	adcs	r3, r3
 80069bc:	627b      	str	r3, [r7, #36]	; 0x24
 80069be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80069c2:	1812      	adds	r2, r2, r0
 80069c4:	eb41 0303 	adc.w	r3, r1, r3
 80069c8:	f04f 0400 	mov.w	r4, #0
 80069cc:	f04f 0500 	mov.w	r5, #0
 80069d0:	00dd      	lsls	r5, r3, #3
 80069d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80069d6:	00d4      	lsls	r4, r2, #3
 80069d8:	4622      	mov	r2, r4
 80069da:	462b      	mov	r3, r5
 80069dc:	1814      	adds	r4, r2, r0
 80069de:	653c      	str	r4, [r7, #80]	; 0x50
 80069e0:	414b      	adcs	r3, r1
 80069e2:	657b      	str	r3, [r7, #84]	; 0x54
 80069e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	461a      	mov	r2, r3
 80069ea:	f04f 0300 	mov.w	r3, #0
 80069ee:	1891      	adds	r1, r2, r2
 80069f0:	61b9      	str	r1, [r7, #24]
 80069f2:	415b      	adcs	r3, r3
 80069f4:	61fb      	str	r3, [r7, #28]
 80069f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069fa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80069fe:	f7f9 fbeb 	bl	80001d8 <__aeabi_uldivmod>
 8006a02:	4602      	mov	r2, r0
 8006a04:	460b      	mov	r3, r1
 8006a06:	4b6c      	ldr	r3, [pc, #432]	; (8006bb8 <UART_SetConfig+0x38c>)
 8006a08:	fba3 1302 	umull	r1, r3, r3, r2
 8006a0c:	095b      	lsrs	r3, r3, #5
 8006a0e:	2164      	movs	r1, #100	; 0x64
 8006a10:	fb01 f303 	mul.w	r3, r1, r3
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	00db      	lsls	r3, r3, #3
 8006a18:	3332      	adds	r3, #50	; 0x32
 8006a1a:	4a67      	ldr	r2, [pc, #412]	; (8006bb8 <UART_SetConfig+0x38c>)
 8006a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a20:	095b      	lsrs	r3, r3, #5
 8006a22:	f003 0207 	and.w	r2, r3, #7
 8006a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4432      	add	r2, r6
 8006a2c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a2e:	e0b9      	b.n	8006ba4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a32:	461c      	mov	r4, r3
 8006a34:	f04f 0500 	mov.w	r5, #0
 8006a38:	4622      	mov	r2, r4
 8006a3a:	462b      	mov	r3, r5
 8006a3c:	1891      	adds	r1, r2, r2
 8006a3e:	6139      	str	r1, [r7, #16]
 8006a40:	415b      	adcs	r3, r3
 8006a42:	617b      	str	r3, [r7, #20]
 8006a44:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006a48:	1912      	adds	r2, r2, r4
 8006a4a:	eb45 0303 	adc.w	r3, r5, r3
 8006a4e:	f04f 0000 	mov.w	r0, #0
 8006a52:	f04f 0100 	mov.w	r1, #0
 8006a56:	00d9      	lsls	r1, r3, #3
 8006a58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a5c:	00d0      	lsls	r0, r2, #3
 8006a5e:	4602      	mov	r2, r0
 8006a60:	460b      	mov	r3, r1
 8006a62:	eb12 0804 	adds.w	r8, r2, r4
 8006a66:	eb43 0905 	adc.w	r9, r3, r5
 8006a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f04f 0100 	mov.w	r1, #0
 8006a74:	f04f 0200 	mov.w	r2, #0
 8006a78:	f04f 0300 	mov.w	r3, #0
 8006a7c:	008b      	lsls	r3, r1, #2
 8006a7e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006a82:	0082      	lsls	r2, r0, #2
 8006a84:	4640      	mov	r0, r8
 8006a86:	4649      	mov	r1, r9
 8006a88:	f7f9 fba6 	bl	80001d8 <__aeabi_uldivmod>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	460b      	mov	r3, r1
 8006a90:	4b49      	ldr	r3, [pc, #292]	; (8006bb8 <UART_SetConfig+0x38c>)
 8006a92:	fba3 2302 	umull	r2, r3, r3, r2
 8006a96:	095b      	lsrs	r3, r3, #5
 8006a98:	011e      	lsls	r6, r3, #4
 8006a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f04f 0100 	mov.w	r1, #0
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	1894      	adds	r4, r2, r2
 8006aa8:	60bc      	str	r4, [r7, #8]
 8006aaa:	415b      	adcs	r3, r3
 8006aac:	60fb      	str	r3, [r7, #12]
 8006aae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ab2:	1812      	adds	r2, r2, r0
 8006ab4:	eb41 0303 	adc.w	r3, r1, r3
 8006ab8:	f04f 0400 	mov.w	r4, #0
 8006abc:	f04f 0500 	mov.w	r5, #0
 8006ac0:	00dd      	lsls	r5, r3, #3
 8006ac2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006ac6:	00d4      	lsls	r4, r2, #3
 8006ac8:	4622      	mov	r2, r4
 8006aca:	462b      	mov	r3, r5
 8006acc:	1814      	adds	r4, r2, r0
 8006ace:	64bc      	str	r4, [r7, #72]	; 0x48
 8006ad0:	414b      	adcs	r3, r1
 8006ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f04f 0100 	mov.w	r1, #0
 8006ade:	f04f 0200 	mov.w	r2, #0
 8006ae2:	f04f 0300 	mov.w	r3, #0
 8006ae6:	008b      	lsls	r3, r1, #2
 8006ae8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006aec:	0082      	lsls	r2, r0, #2
 8006aee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006af2:	f7f9 fb71 	bl	80001d8 <__aeabi_uldivmod>
 8006af6:	4602      	mov	r2, r0
 8006af8:	460b      	mov	r3, r1
 8006afa:	4b2f      	ldr	r3, [pc, #188]	; (8006bb8 <UART_SetConfig+0x38c>)
 8006afc:	fba3 1302 	umull	r1, r3, r3, r2
 8006b00:	095b      	lsrs	r3, r3, #5
 8006b02:	2164      	movs	r1, #100	; 0x64
 8006b04:	fb01 f303 	mul.w	r3, r1, r3
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	011b      	lsls	r3, r3, #4
 8006b0c:	3332      	adds	r3, #50	; 0x32
 8006b0e:	4a2a      	ldr	r2, [pc, #168]	; (8006bb8 <UART_SetConfig+0x38c>)
 8006b10:	fba2 2303 	umull	r2, r3, r2, r3
 8006b14:	095b      	lsrs	r3, r3, #5
 8006b16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b1a:	441e      	add	r6, r3
 8006b1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f04f 0100 	mov.w	r1, #0
 8006b24:	4602      	mov	r2, r0
 8006b26:	460b      	mov	r3, r1
 8006b28:	1894      	adds	r4, r2, r2
 8006b2a:	603c      	str	r4, [r7, #0]
 8006b2c:	415b      	adcs	r3, r3
 8006b2e:	607b      	str	r3, [r7, #4]
 8006b30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b34:	1812      	adds	r2, r2, r0
 8006b36:	eb41 0303 	adc.w	r3, r1, r3
 8006b3a:	f04f 0400 	mov.w	r4, #0
 8006b3e:	f04f 0500 	mov.w	r5, #0
 8006b42:	00dd      	lsls	r5, r3, #3
 8006b44:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006b48:	00d4      	lsls	r4, r2, #3
 8006b4a:	4622      	mov	r2, r4
 8006b4c:	462b      	mov	r3, r5
 8006b4e:	eb12 0a00 	adds.w	sl, r2, r0
 8006b52:	eb43 0b01 	adc.w	fp, r3, r1
 8006b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f04f 0100 	mov.w	r1, #0
 8006b60:	f04f 0200 	mov.w	r2, #0
 8006b64:	f04f 0300 	mov.w	r3, #0
 8006b68:	008b      	lsls	r3, r1, #2
 8006b6a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006b6e:	0082      	lsls	r2, r0, #2
 8006b70:	4650      	mov	r0, sl
 8006b72:	4659      	mov	r1, fp
 8006b74:	f7f9 fb30 	bl	80001d8 <__aeabi_uldivmod>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	4b0e      	ldr	r3, [pc, #56]	; (8006bb8 <UART_SetConfig+0x38c>)
 8006b7e:	fba3 1302 	umull	r1, r3, r3, r2
 8006b82:	095b      	lsrs	r3, r3, #5
 8006b84:	2164      	movs	r1, #100	; 0x64
 8006b86:	fb01 f303 	mul.w	r3, r1, r3
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	011b      	lsls	r3, r3, #4
 8006b8e:	3332      	adds	r3, #50	; 0x32
 8006b90:	4a09      	ldr	r2, [pc, #36]	; (8006bb8 <UART_SetConfig+0x38c>)
 8006b92:	fba2 2303 	umull	r2, r3, r2, r3
 8006b96:	095b      	lsrs	r3, r3, #5
 8006b98:	f003 020f 	and.w	r2, r3, #15
 8006b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4432      	add	r2, r6
 8006ba2:	609a      	str	r2, [r3, #8]
}
 8006ba4:	bf00      	nop
 8006ba6:	377c      	adds	r7, #124	; 0x7c
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bae:	bf00      	nop
 8006bb0:	40011000 	.word	0x40011000
 8006bb4:	40011400 	.word	0x40011400
 8006bb8:	51eb851f 	.word	0x51eb851f

08006bbc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006bbc:	b084      	sub	sp, #16
 8006bbe:	b480      	push	{r7}
 8006bc0:	b085      	sub	sp, #20
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
 8006bc6:	f107 001c 	add.w	r0, r7, #28
 8006bca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006bd2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006bd4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006bd6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006bda:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006bde:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006be2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006be6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006bf6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	431a      	orrs	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3714      	adds	r7, #20
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	b004      	add	sp, #16
 8006c10:	4770      	bx	lr

08006c12 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006c12:	b480      	push	{r7}
 8006c14:	b083      	sub	sp, #12
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2203      	movs	r2, #3
 8006c38:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006c3a:	2002      	movs	r0, #2
 8006c3c:	f7f9 fde6 	bl	800080c <HAL_Delay>
  
  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b083      	sub	sp, #12
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0303 	and.w	r3, r3, #3
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr

08006c66 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006c66:	b480      	push	{r7}
 8006c68:	b085      	sub	sp, #20
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
 8006c6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006c70:	2300      	movs	r3, #0
 8006c72:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006c84:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006c8a:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006c90:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006ca0:	f023 030f 	bic.w	r3, r3, #15
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	431a      	orrs	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3714      	adds	r7, #20
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006cba:	b480      	push	{r7}
 8006cbc:	b083      	sub	sp, #12
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	b2db      	uxtb	r3, r3
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	3314      	adds	r3, #20
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
}  
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3714      	adds	r7, #20
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b085      	sub	sp, #20
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
 8006d02:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006d04:	2300      	movs	r3, #0
 8006d06:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006d20:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006d26:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006d2c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d38:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	431a      	orrs	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006d44:	2300      	movs	r3, #0

}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr

08006d52 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b088      	sub	sp, #32
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006d60:	2310      	movs	r3, #16
 8006d62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d64:	2340      	movs	r3, #64	; 0x40
 8006d66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d72:	f107 0308 	add.w	r3, r7, #8
 8006d76:	4619      	mov	r1, r3
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f7ff ff74 	bl	8006c66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d82:	2110      	movs	r1, #16
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f979 	bl	800707c <SDMMC_GetCmdResp1>
 8006d8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d8c:	69fb      	ldr	r3, [r7, #28]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3720      	adds	r7, #32
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b08a      	sub	sp, #40	; 0x28
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	60f8      	str	r0, [r7, #12]
 8006d9e:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006da6:	2307      	movs	r3, #7
 8006da8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006daa:	2340      	movs	r3, #64	; 0x40
 8006dac:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006dae:	2300      	movs	r3, #0
 8006db0:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006db2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006db6:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006db8:	f107 0310 	add.w	r3, r7, #16
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	f7ff ff51 	bl	8006c66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dc8:	2107      	movs	r1, #7
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f000 f956 	bl	800707c <SDMMC_GetCmdResp1>
 8006dd0:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3728      	adds	r7, #40	; 0x28
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b088      	sub	sp, #32
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006de4:	2300      	movs	r3, #0
 8006de6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006de8:	2300      	movs	r3, #0
 8006dea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006dec:	2300      	movs	r3, #0
 8006dee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006df0:	2300      	movs	r3, #0
 8006df2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006df4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006df8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006dfa:	f107 0308 	add.w	r3, r7, #8
 8006dfe:	4619      	mov	r1, r3
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f7ff ff30 	bl	8006c66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f90c 	bl	8007024 <SDMMC_GetCmdError>
 8006e0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e0e:	69fb      	ldr	r3, [r7, #28]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3720      	adds	r7, #32
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b088      	sub	sp, #32
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006e20:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006e24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006e26:	2308      	movs	r3, #8
 8006e28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e2a:	2340      	movs	r3, #64	; 0x40
 8006e2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e38:	f107 0308 	add.w	r3, r7, #8
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7ff ff11 	bl	8006c66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 fb03 	bl	8007450 <SDMMC_GetCmdResp7>
 8006e4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e4c:	69fb      	ldr	r3, [r7, #28]
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3720      	adds	r7, #32
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b088      	sub	sp, #32
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
 8006e5e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006e64:	2337      	movs	r3, #55	; 0x37
 8006e66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e68:	2340      	movs	r3, #64	; 0x40
 8006e6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e74:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e76:	f107 0308 	add.w	r3, r7, #8
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f7ff fef2 	bl	8006c66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e86:	2137      	movs	r1, #55	; 0x37
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 f8f7 	bl	800707c <SDMMC_GetCmdResp1>
 8006e8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e90:	69fb      	ldr	r3, [r7, #28]
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3720      	adds	r7, #32
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b088      	sub	sp, #32
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006eaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006eae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006eb0:	2329      	movs	r3, #41	; 0x29
 8006eb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006eb4:	2340      	movs	r3, #64	; 0x40
 8006eb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ec0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ec2:	f107 0308 	add.w	r3, r7, #8
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f7ff fecc 	bl	8006c66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fa0a 	bl	80072e8 <SDMMC_GetCmdResp3>
 8006ed4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ed6:	69fb      	ldr	r3, [r7, #28]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3720      	adds	r7, #32
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b088      	sub	sp, #32
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006eee:	2306      	movs	r3, #6
 8006ef0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ef2:	2340      	movs	r3, #64	; 0x40
 8006ef4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006efa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006efe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f00:	f107 0308 	add.w	r3, r7, #8
 8006f04:	4619      	mov	r1, r3
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7ff fead 	bl	8006c66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8006f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f10:	2106      	movs	r1, #6
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f8b2 	bl	800707c <SDMMC_GetCmdResp1>
 8006f18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f1a:	69fb      	ldr	r3, [r7, #28]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3720      	adds	r7, #32
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b088      	sub	sp, #32
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006f30:	2333      	movs	r3, #51	; 0x33
 8006f32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006f34:	2340      	movs	r3, #64	; 0x40
 8006f36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f40:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f42:	f107 0308 	add.w	r3, r7, #8
 8006f46:	4619      	mov	r1, r3
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f7ff fe8c 	bl	8006c66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f52:	2133      	movs	r1, #51	; 0x33
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f891 	bl	800707c <SDMMC_GetCmdResp1>
 8006f5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f5c:	69fb      	ldr	r3, [r7, #28]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3720      	adds	r7, #32
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b088      	sub	sp, #32
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006f72:	2302      	movs	r3, #2
 8006f74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006f76:	23c0      	movs	r3, #192	; 0xc0
 8006f78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f84:	f107 0308 	add.w	r3, r7, #8
 8006f88:	4619      	mov	r1, r3
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7ff fe6b 	bl	8006c66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 f961 	bl	8007258 <SDMMC_GetCmdResp2>
 8006f96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f98:	69fb      	ldr	r3, [r7, #28]
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3720      	adds	r7, #32
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b088      	sub	sp, #32
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
 8006faa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006fb0:	2309      	movs	r3, #9
 8006fb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006fb4:	23c0      	movs	r3, #192	; 0xc0
 8006fb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fc0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006fc2:	f107 0308 	add.w	r3, r7, #8
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f7ff fe4c 	bl	8006c66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 f942 	bl	8007258 <SDMMC_GetCmdResp2>
 8006fd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006fd6:	69fb      	ldr	r3, [r7, #28]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3720      	adds	r7, #32
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b088      	sub	sp, #32
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ff2:	2340      	movs	r3, #64	; 0x40
 8006ff4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ffe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007000:	f107 0308 	add.w	r3, r7, #8
 8007004:	4619      	mov	r1, r3
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f7ff fe2d 	bl	8006c66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800700c:	683a      	ldr	r2, [r7, #0]
 800700e:	2103      	movs	r1, #3
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 f9a7 	bl	8007364 <SDMMC_GetCmdResp6>
 8007016:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007018:	69fb      	ldr	r3, [r7, #28]
}
 800701a:	4618      	mov	r0, r3
 800701c:	3720      	adds	r7, #32
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
	...

08007024 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800702c:	4b11      	ldr	r3, [pc, #68]	; (8007074 <SDMMC_GetCmdError+0x50>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a11      	ldr	r2, [pc, #68]	; (8007078 <SDMMC_GetCmdError+0x54>)
 8007032:	fba2 2303 	umull	r2, r3, r2, r3
 8007036:	0a5b      	lsrs	r3, r3, #9
 8007038:	f241 3288 	movw	r2, #5000	; 0x1388
 800703c:	fb02 f303 	mul.w	r3, r2, r3
 8007040:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	1e5a      	subs	r2, r3, #1
 8007046:	60fa      	str	r2, [r7, #12]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d102      	bne.n	8007052 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800704c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007050:	e009      	b.n	8007066 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800705a:	2b00      	cmp	r3, #0
 800705c:	d0f1      	beq.n	8007042 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	22c5      	movs	r2, #197	; 0xc5
 8007062:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	20000118 	.word	0x20000118
 8007078:	10624dd3 	.word	0x10624dd3

0800707c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b088      	sub	sp, #32
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	460b      	mov	r3, r1
 8007086:	607a      	str	r2, [r7, #4]
 8007088:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800708a:	4b70      	ldr	r3, [pc, #448]	; (800724c <SDMMC_GetCmdResp1+0x1d0>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a70      	ldr	r2, [pc, #448]	; (8007250 <SDMMC_GetCmdResp1+0x1d4>)
 8007090:	fba2 2303 	umull	r2, r3, r2, r3
 8007094:	0a5a      	lsrs	r2, r3, #9
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	fb02 f303 	mul.w	r3, r2, r3
 800709c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	1e5a      	subs	r2, r3, #1
 80070a2:	61fa      	str	r2, [r7, #28]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d102      	bne.n	80070ae <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80070a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80070ac:	e0c9      	b.n	8007242 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d0ef      	beq.n	800709e <SDMMC_GetCmdResp1+0x22>
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1ea      	bne.n	800709e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070cc:	f003 0304 	and.w	r3, r3, #4
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d004      	beq.n	80070de <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2204      	movs	r2, #4
 80070d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80070da:	2304      	movs	r3, #4
 80070dc:	e0b1      	b.n	8007242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d004      	beq.n	80070f4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2201      	movs	r2, #1
 80070ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e0a6      	b.n	8007242 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	22c5      	movs	r2, #197	; 0xc5
 80070f8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f7ff fddd 	bl	8006cba <SDIO_GetCommandResponse>
 8007100:	4603      	mov	r3, r0
 8007102:	461a      	mov	r2, r3
 8007104:	7afb      	ldrb	r3, [r7, #11]
 8007106:	4293      	cmp	r3, r2
 8007108:	d001      	beq.n	800710e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800710a:	2301      	movs	r3, #1
 800710c:	e099      	b.n	8007242 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800710e:	2100      	movs	r1, #0
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f7ff fddf 	bl	8006cd4 <SDIO_GetResponse>
 8007116:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007118:	697a      	ldr	r2, [r7, #20]
 800711a:	4b4e      	ldr	r3, [pc, #312]	; (8007254 <SDMMC_GetCmdResp1+0x1d8>)
 800711c:	4013      	ands	r3, r2
 800711e:	2b00      	cmp	r3, #0
 8007120:	d101      	bne.n	8007126 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007122:	2300      	movs	r3, #0
 8007124:	e08d      	b.n	8007242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	2b00      	cmp	r3, #0
 800712a:	da02      	bge.n	8007132 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800712c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007130:	e087      	b.n	8007242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007138:	2b00      	cmp	r3, #0
 800713a:	d001      	beq.n	8007140 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800713c:	2340      	movs	r3, #64	; 0x40
 800713e:	e080      	b.n	8007242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007146:	2b00      	cmp	r3, #0
 8007148:	d001      	beq.n	800714e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800714a:	2380      	movs	r3, #128	; 0x80
 800714c:	e079      	b.n	8007242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d002      	beq.n	800715e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007158:	f44f 7380 	mov.w	r3, #256	; 0x100
 800715c:	e071      	b.n	8007242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d002      	beq.n	800716e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007168:	f44f 7300 	mov.w	r3, #512	; 0x200
 800716c:	e069      	b.n	8007242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007174:	2b00      	cmp	r3, #0
 8007176:	d002      	beq.n	800717e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007178:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800717c:	e061      	b.n	8007242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d002      	beq.n	800718e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007188:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800718c:	e059      	b.n	8007242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d002      	beq.n	800719e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800719c:	e051      	b.n	8007242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d002      	beq.n	80071ae <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80071a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80071ac:	e049      	b.n	8007242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d002      	beq.n	80071be <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80071b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80071bc:	e041      	b.n	8007242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d002      	beq.n	80071ce <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80071c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071cc:	e039      	b.n	8007242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d002      	beq.n	80071de <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80071d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80071dc:	e031      	b.n	8007242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d002      	beq.n	80071ee <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80071e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80071ec:	e029      	b.n	8007242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d002      	beq.n	80071fe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80071f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80071fc:	e021      	b.n	8007242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007208:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800720c:	e019      	b.n	8007242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007214:	2b00      	cmp	r3, #0
 8007216:	d002      	beq.n	800721e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007218:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800721c:	e011      	b.n	8007242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d002      	beq.n	800722e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007228:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800722c:	e009      	b.n	8007242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f003 0308 	and.w	r3, r3, #8
 8007234:	2b00      	cmp	r3, #0
 8007236:	d002      	beq.n	800723e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007238:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800723c:	e001      	b.n	8007242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800723e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007242:	4618      	mov	r0, r3
 8007244:	3720      	adds	r7, #32
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	20000118 	.word	0x20000118
 8007250:	10624dd3 	.word	0x10624dd3
 8007254:	fdffe008 	.word	0xfdffe008

08007258 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007260:	4b1f      	ldr	r3, [pc, #124]	; (80072e0 <SDMMC_GetCmdResp2+0x88>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a1f      	ldr	r2, [pc, #124]	; (80072e4 <SDMMC_GetCmdResp2+0x8c>)
 8007266:	fba2 2303 	umull	r2, r3, r2, r3
 800726a:	0a5b      	lsrs	r3, r3, #9
 800726c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007270:	fb02 f303 	mul.w	r3, r2, r3
 8007274:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	1e5a      	subs	r2, r3, #1
 800727a:	60fa      	str	r2, [r7, #12]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d102      	bne.n	8007286 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007280:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007284:	e026      	b.n	80072d4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800728a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007292:	2b00      	cmp	r3, #0
 8007294:	d0ef      	beq.n	8007276 <SDMMC_GetCmdResp2+0x1e>
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1ea      	bne.n	8007276 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072a4:	f003 0304 	and.w	r3, r3, #4
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d004      	beq.n	80072b6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2204      	movs	r2, #4
 80072b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80072b2:	2304      	movs	r3, #4
 80072b4:	e00e      	b.n	80072d4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ba:	f003 0301 	and.w	r3, r3, #1
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d004      	beq.n	80072cc <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2201      	movs	r2, #1
 80072c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e003      	b.n	80072d4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	22c5      	movs	r2, #197	; 0xc5
 80072d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3714      	adds	r7, #20
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr
 80072e0:	20000118 	.word	0x20000118
 80072e4:	10624dd3 	.word	0x10624dd3

080072e8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80072f0:	4b1a      	ldr	r3, [pc, #104]	; (800735c <SDMMC_GetCmdResp3+0x74>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a1a      	ldr	r2, [pc, #104]	; (8007360 <SDMMC_GetCmdResp3+0x78>)
 80072f6:	fba2 2303 	umull	r2, r3, r2, r3
 80072fa:	0a5b      	lsrs	r3, r3, #9
 80072fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007300:	fb02 f303 	mul.w	r3, r2, r3
 8007304:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	1e5a      	subs	r2, r3, #1
 800730a:	60fa      	str	r2, [r7, #12]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d102      	bne.n	8007316 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007310:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007314:	e01b      	b.n	800734e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800731a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007322:	2b00      	cmp	r3, #0
 8007324:	d0ef      	beq.n	8007306 <SDMMC_GetCmdResp3+0x1e>
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1ea      	bne.n	8007306 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007334:	f003 0304 	and.w	r3, r3, #4
 8007338:	2b00      	cmp	r3, #0
 800733a:	d004      	beq.n	8007346 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2204      	movs	r2, #4
 8007340:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007342:	2304      	movs	r3, #4
 8007344:	e003      	b.n	800734e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	22c5      	movs	r2, #197	; 0xc5
 800734a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3714      	adds	r7, #20
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	20000118 	.word	0x20000118
 8007360:	10624dd3 	.word	0x10624dd3

08007364 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b088      	sub	sp, #32
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	460b      	mov	r3, r1
 800736e:	607a      	str	r2, [r7, #4]
 8007370:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007372:	4b35      	ldr	r3, [pc, #212]	; (8007448 <SDMMC_GetCmdResp6+0xe4>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a35      	ldr	r2, [pc, #212]	; (800744c <SDMMC_GetCmdResp6+0xe8>)
 8007378:	fba2 2303 	umull	r2, r3, r2, r3
 800737c:	0a5b      	lsrs	r3, r3, #9
 800737e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007382:	fb02 f303 	mul.w	r3, r2, r3
 8007386:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	1e5a      	subs	r2, r3, #1
 800738c:	61fa      	str	r2, [r7, #28]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d102      	bne.n	8007398 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007392:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007396:	e052      	b.n	800743e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800739c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d0ef      	beq.n	8007388 <SDMMC_GetCmdResp6+0x24>
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1ea      	bne.n	8007388 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073b6:	f003 0304 	and.w	r3, r3, #4
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d004      	beq.n	80073c8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2204      	movs	r2, #4
 80073c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80073c4:	2304      	movs	r3, #4
 80073c6:	e03a      	b.n	800743e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073cc:	f003 0301 	and.w	r3, r3, #1
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d004      	beq.n	80073de <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2201      	movs	r2, #1
 80073d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80073da:	2301      	movs	r3, #1
 80073dc:	e02f      	b.n	800743e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f7ff fc6b 	bl	8006cba <SDIO_GetCommandResponse>
 80073e4:	4603      	mov	r3, r0
 80073e6:	461a      	mov	r2, r3
 80073e8:	7afb      	ldrb	r3, [r7, #11]
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d001      	beq.n	80073f2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e025      	b.n	800743e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	22c5      	movs	r2, #197	; 0xc5
 80073f6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80073f8:	2100      	movs	r1, #0
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f7ff fc6a 	bl	8006cd4 <SDIO_GetResponse>
 8007400:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d106      	bne.n	800741a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	0c1b      	lsrs	r3, r3, #16
 8007410:	b29a      	uxth	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007416:	2300      	movs	r3, #0
 8007418:	e011      	b.n	800743e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d002      	beq.n	800742a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007424:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007428:	e009      	b.n	800743e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007430:	2b00      	cmp	r3, #0
 8007432:	d002      	beq.n	800743a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007438:	e001      	b.n	800743e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800743a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800743e:	4618      	mov	r0, r3
 8007440:	3720      	adds	r7, #32
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	20000118 	.word	0x20000118
 800744c:	10624dd3 	.word	0x10624dd3

08007450 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007458:	4b22      	ldr	r3, [pc, #136]	; (80074e4 <SDMMC_GetCmdResp7+0x94>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a22      	ldr	r2, [pc, #136]	; (80074e8 <SDMMC_GetCmdResp7+0x98>)
 800745e:	fba2 2303 	umull	r2, r3, r2, r3
 8007462:	0a5b      	lsrs	r3, r3, #9
 8007464:	f241 3288 	movw	r2, #5000	; 0x1388
 8007468:	fb02 f303 	mul.w	r3, r2, r3
 800746c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	1e5a      	subs	r2, r3, #1
 8007472:	60fa      	str	r2, [r7, #12]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d102      	bne.n	800747e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007478:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800747c:	e02c      	b.n	80074d8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007482:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800748a:	2b00      	cmp	r3, #0
 800748c:	d0ef      	beq.n	800746e <SDMMC_GetCmdResp7+0x1e>
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1ea      	bne.n	800746e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800749c:	f003 0304 	and.w	r3, r3, #4
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d004      	beq.n	80074ae <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2204      	movs	r2, #4
 80074a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80074aa:	2304      	movs	r3, #4
 80074ac:	e014      	b.n	80074d8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074b2:	f003 0301 	and.w	r3, r3, #1
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d004      	beq.n	80074c4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2201      	movs	r2, #1
 80074be:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e009      	b.n	80074d8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d002      	beq.n	80074d6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2240      	movs	r2, #64	; 0x40
 80074d4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80074d6:	2300      	movs	r3, #0
  
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3714      	adds	r7, #20
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr
 80074e4:	20000118 	.word	0x20000118
 80074e8:	10624dd3 	.word	0x10624dd3

080074ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80074ec:	b084      	sub	sp, #16
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b084      	sub	sp, #16
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
 80074f6:	f107 001c 	add.w	r0, r7, #28
 80074fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80074fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007500:	2b01      	cmp	r3, #1
 8007502:	d122      	bne.n	800754a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007508:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007518:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800752c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800752e:	2b01      	cmp	r3, #1
 8007530:	d105      	bne.n	800753e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f001 fb1c 	bl	8008b7c <USB_CoreReset>
 8007544:	4603      	mov	r3, r0
 8007546:	73fb      	strb	r3, [r7, #15]
 8007548:	e01a      	b.n	8007580 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f001 fb10 	bl	8008b7c <USB_CoreReset>
 800755c:	4603      	mov	r3, r0
 800755e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007562:	2b00      	cmp	r3, #0
 8007564:	d106      	bne.n	8007574 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	639a      	str	r2, [r3, #56]	; 0x38
 8007572:	e005      	b.n	8007580 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007578:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007582:	2b01      	cmp	r3, #1
 8007584:	d10b      	bne.n	800759e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	f043 0206 	orr.w	r2, r3, #6
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	f043 0220 	orr.w	r2, r3, #32
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800759e:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075aa:	b004      	add	sp, #16
 80075ac:	4770      	bx	lr
	...

080075b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b087      	sub	sp, #28
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	4613      	mov	r3, r2
 80075bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80075be:	79fb      	ldrb	r3, [r7, #7]
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	d165      	bne.n	8007690 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	4a41      	ldr	r2, [pc, #260]	; (80076cc <USB_SetTurnaroundTime+0x11c>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d906      	bls.n	80075da <USB_SetTurnaroundTime+0x2a>
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	4a40      	ldr	r2, [pc, #256]	; (80076d0 <USB_SetTurnaroundTime+0x120>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d202      	bcs.n	80075da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80075d4:	230f      	movs	r3, #15
 80075d6:	617b      	str	r3, [r7, #20]
 80075d8:	e062      	b.n	80076a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	4a3c      	ldr	r2, [pc, #240]	; (80076d0 <USB_SetTurnaroundTime+0x120>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d306      	bcc.n	80075f0 <USB_SetTurnaroundTime+0x40>
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	4a3b      	ldr	r2, [pc, #236]	; (80076d4 <USB_SetTurnaroundTime+0x124>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d202      	bcs.n	80075f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80075ea:	230e      	movs	r3, #14
 80075ec:	617b      	str	r3, [r7, #20]
 80075ee:	e057      	b.n	80076a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	4a38      	ldr	r2, [pc, #224]	; (80076d4 <USB_SetTurnaroundTime+0x124>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d306      	bcc.n	8007606 <USB_SetTurnaroundTime+0x56>
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	4a37      	ldr	r2, [pc, #220]	; (80076d8 <USB_SetTurnaroundTime+0x128>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d202      	bcs.n	8007606 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007600:	230d      	movs	r3, #13
 8007602:	617b      	str	r3, [r7, #20]
 8007604:	e04c      	b.n	80076a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	4a33      	ldr	r2, [pc, #204]	; (80076d8 <USB_SetTurnaroundTime+0x128>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d306      	bcc.n	800761c <USB_SetTurnaroundTime+0x6c>
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	4a32      	ldr	r2, [pc, #200]	; (80076dc <USB_SetTurnaroundTime+0x12c>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d802      	bhi.n	800761c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007616:	230c      	movs	r3, #12
 8007618:	617b      	str	r3, [r7, #20]
 800761a:	e041      	b.n	80076a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	4a2f      	ldr	r2, [pc, #188]	; (80076dc <USB_SetTurnaroundTime+0x12c>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d906      	bls.n	8007632 <USB_SetTurnaroundTime+0x82>
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	4a2e      	ldr	r2, [pc, #184]	; (80076e0 <USB_SetTurnaroundTime+0x130>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d802      	bhi.n	8007632 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800762c:	230b      	movs	r3, #11
 800762e:	617b      	str	r3, [r7, #20]
 8007630:	e036      	b.n	80076a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	4a2a      	ldr	r2, [pc, #168]	; (80076e0 <USB_SetTurnaroundTime+0x130>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d906      	bls.n	8007648 <USB_SetTurnaroundTime+0x98>
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	4a29      	ldr	r2, [pc, #164]	; (80076e4 <USB_SetTurnaroundTime+0x134>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d802      	bhi.n	8007648 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007642:	230a      	movs	r3, #10
 8007644:	617b      	str	r3, [r7, #20]
 8007646:	e02b      	b.n	80076a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	4a26      	ldr	r2, [pc, #152]	; (80076e4 <USB_SetTurnaroundTime+0x134>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d906      	bls.n	800765e <USB_SetTurnaroundTime+0xae>
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	4a25      	ldr	r2, [pc, #148]	; (80076e8 <USB_SetTurnaroundTime+0x138>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d202      	bcs.n	800765e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007658:	2309      	movs	r3, #9
 800765a:	617b      	str	r3, [r7, #20]
 800765c:	e020      	b.n	80076a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	4a21      	ldr	r2, [pc, #132]	; (80076e8 <USB_SetTurnaroundTime+0x138>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d306      	bcc.n	8007674 <USB_SetTurnaroundTime+0xc4>
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	4a20      	ldr	r2, [pc, #128]	; (80076ec <USB_SetTurnaroundTime+0x13c>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d802      	bhi.n	8007674 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800766e:	2308      	movs	r3, #8
 8007670:	617b      	str	r3, [r7, #20]
 8007672:	e015      	b.n	80076a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	4a1d      	ldr	r2, [pc, #116]	; (80076ec <USB_SetTurnaroundTime+0x13c>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d906      	bls.n	800768a <USB_SetTurnaroundTime+0xda>
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	4a1c      	ldr	r2, [pc, #112]	; (80076f0 <USB_SetTurnaroundTime+0x140>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d202      	bcs.n	800768a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007684:	2307      	movs	r3, #7
 8007686:	617b      	str	r3, [r7, #20]
 8007688:	e00a      	b.n	80076a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800768a:	2306      	movs	r3, #6
 800768c:	617b      	str	r3, [r7, #20]
 800768e:	e007      	b.n	80076a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007690:	79fb      	ldrb	r3, [r7, #7]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d102      	bne.n	800769c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007696:	2309      	movs	r3, #9
 8007698:	617b      	str	r3, [r7, #20]
 800769a:	e001      	b.n	80076a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800769c:	2309      	movs	r3, #9
 800769e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	68da      	ldr	r2, [r3, #12]
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	029b      	lsls	r3, r3, #10
 80076b4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80076b8:	431a      	orrs	r2, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	371c      	adds	r7, #28
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr
 80076cc:	00d8acbf 	.word	0x00d8acbf
 80076d0:	00e4e1c0 	.word	0x00e4e1c0
 80076d4:	00f42400 	.word	0x00f42400
 80076d8:	01067380 	.word	0x01067380
 80076dc:	011a499f 	.word	0x011a499f
 80076e0:	01312cff 	.word	0x01312cff
 80076e4:	014ca43f 	.word	0x014ca43f
 80076e8:	016e3600 	.word	0x016e3600
 80076ec:	01a6ab1f 	.word	0x01a6ab1f
 80076f0:	01e84800 	.word	0x01e84800

080076f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f043 0201 	orr.w	r2, r3, #1
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	370c      	adds	r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007716:	b480      	push	{r7}
 8007718:	b083      	sub	sp, #12
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	f023 0201 	bic.w	r2, r3, #1
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	460b      	mov	r3, r1
 8007742:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007744:	2300      	movs	r3, #0
 8007746:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007754:	78fb      	ldrb	r3, [r7, #3]
 8007756:	2b01      	cmp	r3, #1
 8007758:	d115      	bne.n	8007786 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007766:	2001      	movs	r0, #1
 8007768:	f7f9 f850 	bl	800080c <HAL_Delay>
      ms++;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	3301      	adds	r3, #1
 8007770:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f001 f972 	bl	8008a5c <USB_GetMode>
 8007778:	4603      	mov	r3, r0
 800777a:	2b01      	cmp	r3, #1
 800777c:	d01e      	beq.n	80077bc <USB_SetCurrentMode+0x84>
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2b31      	cmp	r3, #49	; 0x31
 8007782:	d9f0      	bls.n	8007766 <USB_SetCurrentMode+0x2e>
 8007784:	e01a      	b.n	80077bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007786:	78fb      	ldrb	r3, [r7, #3]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d115      	bne.n	80077b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007798:	2001      	movs	r0, #1
 800779a:	f7f9 f837 	bl	800080c <HAL_Delay>
      ms++;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	3301      	adds	r3, #1
 80077a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f001 f959 	bl	8008a5c <USB_GetMode>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d005      	beq.n	80077bc <USB_SetCurrentMode+0x84>
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2b31      	cmp	r3, #49	; 0x31
 80077b4:	d9f0      	bls.n	8007798 <USB_SetCurrentMode+0x60>
 80077b6:	e001      	b.n	80077bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	e005      	b.n	80077c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2b32      	cmp	r3, #50	; 0x32
 80077c0:	d101      	bne.n	80077c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e000      	b.n	80077c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077d0:	b084      	sub	sp, #16
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b086      	sub	sp, #24
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80077de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80077e2:	2300      	movs	r3, #0
 80077e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80077ea:	2300      	movs	r3, #0
 80077ec:	613b      	str	r3, [r7, #16]
 80077ee:	e009      	b.n	8007804 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	3340      	adds	r3, #64	; 0x40
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	4413      	add	r3, r2
 80077fa:	2200      	movs	r2, #0
 80077fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	3301      	adds	r3, #1
 8007802:	613b      	str	r3, [r7, #16]
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	2b0e      	cmp	r3, #14
 8007808:	d9f2      	bls.n	80077f0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800780a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800780c:	2b00      	cmp	r3, #0
 800780e:	d11c      	bne.n	800784a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800781e:	f043 0302 	orr.w	r3, r3, #2
 8007822:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007828:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007834:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007840:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	639a      	str	r2, [r3, #56]	; 0x38
 8007848:	e00b      	b.n	8007862 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007868:	461a      	mov	r2, r3
 800786a:	2300      	movs	r3, #0
 800786c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007874:	4619      	mov	r1, r3
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800787c:	461a      	mov	r2, r3
 800787e:	680b      	ldr	r3, [r1, #0]
 8007880:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007884:	2b01      	cmp	r3, #1
 8007886:	d10c      	bne.n	80078a2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788a:	2b00      	cmp	r3, #0
 800788c:	d104      	bne.n	8007898 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800788e:	2100      	movs	r1, #0
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f945 	bl	8007b20 <USB_SetDevSpeed>
 8007896:	e008      	b.n	80078aa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007898:	2101      	movs	r1, #1
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f940 	bl	8007b20 <USB_SetDevSpeed>
 80078a0:	e003      	b.n	80078aa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80078a2:	2103      	movs	r1, #3
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 f93b 	bl	8007b20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80078aa:	2110      	movs	r1, #16
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 f8f3 	bl	8007a98 <USB_FlushTxFifo>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d001      	beq.n	80078bc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 f90f 	bl	8007ae0 <USB_FlushRxFifo>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d001      	beq.n	80078cc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078d2:	461a      	mov	r2, r3
 80078d4:	2300      	movs	r3, #0
 80078d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078de:	461a      	mov	r2, r3
 80078e0:	2300      	movs	r3, #0
 80078e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ea:	461a      	mov	r2, r3
 80078ec:	2300      	movs	r3, #0
 80078ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078f0:	2300      	movs	r3, #0
 80078f2:	613b      	str	r3, [r7, #16]
 80078f4:	e043      	b.n	800797e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	015a      	lsls	r2, r3, #5
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	4413      	add	r3, r2
 80078fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007908:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800790c:	d118      	bne.n	8007940 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10a      	bne.n	800792a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	015a      	lsls	r2, r3, #5
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	4413      	add	r3, r2
 800791c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007920:	461a      	mov	r2, r3
 8007922:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007926:	6013      	str	r3, [r2, #0]
 8007928:	e013      	b.n	8007952 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	015a      	lsls	r2, r3, #5
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	4413      	add	r3, r2
 8007932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007936:	461a      	mov	r2, r3
 8007938:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800793c:	6013      	str	r3, [r2, #0]
 800793e:	e008      	b.n	8007952 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	015a      	lsls	r2, r3, #5
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	4413      	add	r3, r2
 8007948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800794c:	461a      	mov	r2, r3
 800794e:	2300      	movs	r3, #0
 8007950:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	015a      	lsls	r2, r3, #5
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	4413      	add	r3, r2
 800795a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800795e:	461a      	mov	r2, r3
 8007960:	2300      	movs	r3, #0
 8007962:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	015a      	lsls	r2, r3, #5
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	4413      	add	r3, r2
 800796c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007970:	461a      	mov	r2, r3
 8007972:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007976:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	3301      	adds	r3, #1
 800797c:	613b      	str	r3, [r7, #16]
 800797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007980:	693a      	ldr	r2, [r7, #16]
 8007982:	429a      	cmp	r2, r3
 8007984:	d3b7      	bcc.n	80078f6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007986:	2300      	movs	r3, #0
 8007988:	613b      	str	r3, [r7, #16]
 800798a:	e043      	b.n	8007a14 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	015a      	lsls	r2, r3, #5
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	4413      	add	r3, r2
 8007994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800799e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079a2:	d118      	bne.n	80079d6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10a      	bne.n	80079c0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	015a      	lsls	r2, r3, #5
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	4413      	add	r3, r2
 80079b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079b6:	461a      	mov	r2, r3
 80079b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80079bc:	6013      	str	r3, [r2, #0]
 80079be:	e013      	b.n	80079e8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	015a      	lsls	r2, r3, #5
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	4413      	add	r3, r2
 80079c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079cc:	461a      	mov	r2, r3
 80079ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80079d2:	6013      	str	r3, [r2, #0]
 80079d4:	e008      	b.n	80079e8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	015a      	lsls	r2, r3, #5
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	4413      	add	r3, r2
 80079de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e2:	461a      	mov	r2, r3
 80079e4:	2300      	movs	r3, #0
 80079e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	015a      	lsls	r2, r3, #5
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	4413      	add	r3, r2
 80079f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f4:	461a      	mov	r2, r3
 80079f6:	2300      	movs	r3, #0
 80079f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	015a      	lsls	r2, r3, #5
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	4413      	add	r3, r2
 8007a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a06:	461a      	mov	r2, r3
 8007a08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	3301      	adds	r3, #1
 8007a12:	613b      	str	r3, [r7, #16]
 8007a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a16:	693a      	ldr	r2, [r7, #16]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d3b7      	bcc.n	800798c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a2e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007a3c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d105      	bne.n	8007a50 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	699b      	ldr	r3, [r3, #24]
 8007a48:	f043 0210 	orr.w	r2, r3, #16
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	699a      	ldr	r2, [r3, #24]
 8007a54:	4b0f      	ldr	r3, [pc, #60]	; (8007a94 <USB_DevInit+0x2c4>)
 8007a56:	4313      	orrs	r3, r2
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d005      	beq.n	8007a6e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	f043 0208 	orr.w	r2, r3, #8
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d107      	bne.n	8007a84 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a7c:	f043 0304 	orr.w	r3, r3, #4
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3718      	adds	r7, #24
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a90:	b004      	add	sp, #16
 8007a92:	4770      	bx	lr
 8007a94:	803c3800 	.word	0x803c3800

08007a98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	019b      	lsls	r3, r3, #6
 8007aaa:	f043 0220 	orr.w	r2, r3, #32
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	60fb      	str	r3, [r7, #12]
 8007ab8:	4a08      	ldr	r2, [pc, #32]	; (8007adc <USB_FlushTxFifo+0x44>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d901      	bls.n	8007ac2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e006      	b.n	8007ad0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	f003 0320 	and.w	r3, r3, #32
 8007aca:	2b20      	cmp	r3, #32
 8007acc:	d0f1      	beq.n	8007ab2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3714      	adds	r7, #20
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr
 8007adc:	00030d40 	.word	0x00030d40

08007ae0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2210      	movs	r2, #16
 8007af0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	3301      	adds	r3, #1
 8007af6:	60fb      	str	r3, [r7, #12]
 8007af8:	4a08      	ldr	r2, [pc, #32]	; (8007b1c <USB_FlushRxFifo+0x3c>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d901      	bls.n	8007b02 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e006      	b.n	8007b10 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	f003 0310 	and.w	r3, r3, #16
 8007b0a:	2b10      	cmp	r3, #16
 8007b0c:	d0f1      	beq.n	8007af2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3714      	adds	r7, #20
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr
 8007b1c:	00030d40 	.word	0x00030d40

08007b20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b085      	sub	sp, #20
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	460b      	mov	r3, r1
 8007b2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	78fb      	ldrb	r3, [r7, #3]
 8007b3a:	68f9      	ldr	r1, [r7, #12]
 8007b3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b40:	4313      	orrs	r3, r2
 8007b42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3714      	adds	r7, #20
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b087      	sub	sp, #28
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	f003 0306 	and.w	r3, r3, #6
 8007b6a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d102      	bne.n	8007b78 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007b72:	2300      	movs	r3, #0
 8007b74:	75fb      	strb	r3, [r7, #23]
 8007b76:	e00a      	b.n	8007b8e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d002      	beq.n	8007b84 <USB_GetDevSpeed+0x32>
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2b06      	cmp	r3, #6
 8007b82:	d102      	bne.n	8007b8a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007b84:	2302      	movs	r3, #2
 8007b86:	75fb      	strb	r3, [r7, #23]
 8007b88:	e001      	b.n	8007b8e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007b8a:	230f      	movs	r3, #15
 8007b8c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	371c      	adds	r7, #28
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	785b      	ldrb	r3, [r3, #1]
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d13a      	bne.n	8007c2e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bbe:	69da      	ldr	r2, [r3, #28]
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	f003 030f 	and.w	r3, r3, #15
 8007bc8:	2101      	movs	r1, #1
 8007bca:	fa01 f303 	lsl.w	r3, r1, r3
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	68f9      	ldr	r1, [r7, #12]
 8007bd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	015a      	lsls	r2, r3, #5
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	4413      	add	r3, r2
 8007be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d155      	bne.n	8007c9c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	015a      	lsls	r2, r3, #5
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	78db      	ldrb	r3, [r3, #3]
 8007c0a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c0c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	059b      	lsls	r3, r3, #22
 8007c12:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c14:	4313      	orrs	r3, r2
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	0151      	lsls	r1, r2, #5
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	440a      	add	r2, r1
 8007c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c2a:	6013      	str	r3, [r2, #0]
 8007c2c:	e036      	b.n	8007c9c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c34:	69da      	ldr	r2, [r3, #28]
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	f003 030f 	and.w	r3, r3, #15
 8007c3e:	2101      	movs	r1, #1
 8007c40:	fa01 f303 	lsl.w	r3, r1, r3
 8007c44:	041b      	lsls	r3, r3, #16
 8007c46:	68f9      	ldr	r1, [r7, #12]
 8007c48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	015a      	lsls	r2, r3, #5
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	4413      	add	r3, r2
 8007c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d11a      	bne.n	8007c9c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	015a      	lsls	r2, r3, #5
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	78db      	ldrb	r3, [r3, #3]
 8007c80:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007c82:	430b      	orrs	r3, r1
 8007c84:	4313      	orrs	r3, r2
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	0151      	lsls	r1, r2, #5
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	440a      	add	r2, r1
 8007c8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c9a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
	...

08007cac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	785b      	ldrb	r3, [r3, #1]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d161      	bne.n	8007d8c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	015a      	lsls	r2, r3, #5
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cde:	d11f      	bne.n	8007d20 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	015a      	lsls	r2, r3, #5
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68ba      	ldr	r2, [r7, #8]
 8007cf0:	0151      	lsls	r1, r2, #5
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	440a      	add	r2, r1
 8007cf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cfa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007cfe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	015a      	lsls	r2, r3, #5
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	4413      	add	r3, r2
 8007d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	0151      	lsls	r1, r2, #5
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	440a      	add	r2, r1
 8007d16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d1e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	f003 030f 	and.w	r3, r3, #15
 8007d30:	2101      	movs	r1, #1
 8007d32:	fa01 f303 	lsl.w	r3, r1, r3
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	43db      	mvns	r3, r3
 8007d3a:	68f9      	ldr	r1, [r7, #12]
 8007d3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d40:	4013      	ands	r3, r2
 8007d42:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d4a:	69da      	ldr	r2, [r3, #28]
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	f003 030f 	and.w	r3, r3, #15
 8007d54:	2101      	movs	r1, #1
 8007d56:	fa01 f303 	lsl.w	r3, r1, r3
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	43db      	mvns	r3, r3
 8007d5e:	68f9      	ldr	r1, [r7, #12]
 8007d60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d64:	4013      	ands	r3, r2
 8007d66:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	015a      	lsls	r2, r3, #5
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	4413      	add	r3, r2
 8007d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	0159      	lsls	r1, r3, #5
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	440b      	add	r3, r1
 8007d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d82:	4619      	mov	r1, r3
 8007d84:	4b35      	ldr	r3, [pc, #212]	; (8007e5c <USB_DeactivateEndpoint+0x1b0>)
 8007d86:	4013      	ands	r3, r2
 8007d88:	600b      	str	r3, [r1, #0]
 8007d8a:	e060      	b.n	8007e4e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	015a      	lsls	r2, r3, #5
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	4413      	add	r3, r2
 8007d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007da2:	d11f      	bne.n	8007de4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	015a      	lsls	r2, r3, #5
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	4413      	add	r3, r2
 8007dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	68ba      	ldr	r2, [r7, #8]
 8007db4:	0151      	lsls	r1, r2, #5
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	440a      	add	r2, r1
 8007dba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dbe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007dc2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	015a      	lsls	r2, r3, #5
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	4413      	add	r3, r2
 8007dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	68ba      	ldr	r2, [r7, #8]
 8007dd4:	0151      	lsls	r1, r2, #5
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	440a      	add	r2, r1
 8007dda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007de2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	f003 030f 	and.w	r3, r3, #15
 8007df4:	2101      	movs	r1, #1
 8007df6:	fa01 f303 	lsl.w	r3, r1, r3
 8007dfa:	041b      	lsls	r3, r3, #16
 8007dfc:	43db      	mvns	r3, r3
 8007dfe:	68f9      	ldr	r1, [r7, #12]
 8007e00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e04:	4013      	ands	r3, r2
 8007e06:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e0e:	69da      	ldr	r2, [r3, #28]
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	f003 030f 	and.w	r3, r3, #15
 8007e18:	2101      	movs	r1, #1
 8007e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e1e:	041b      	lsls	r3, r3, #16
 8007e20:	43db      	mvns	r3, r3
 8007e22:	68f9      	ldr	r1, [r7, #12]
 8007e24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e28:	4013      	ands	r3, r2
 8007e2a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	015a      	lsls	r2, r3, #5
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	4413      	add	r3, r2
 8007e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	0159      	lsls	r1, r3, #5
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	440b      	add	r3, r1
 8007e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e46:	4619      	mov	r1, r3
 8007e48:	4b05      	ldr	r3, [pc, #20]	; (8007e60 <USB_DeactivateEndpoint+0x1b4>)
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3714      	adds	r7, #20
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr
 8007e5c:	ec337800 	.word	0xec337800
 8007e60:	eff37800 	.word	0xeff37800

08007e64 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b08a      	sub	sp, #40	; 0x28
 8007e68:	af02      	add	r7, sp, #8
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	785b      	ldrb	r3, [r3, #1]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	f040 815c 	bne.w	800813e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d132      	bne.n	8007ef4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	015a      	lsls	r2, r3, #5
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	4413      	add	r3, r2
 8007e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	69ba      	ldr	r2, [r7, #24]
 8007e9e:	0151      	lsls	r1, r2, #5
 8007ea0:	69fa      	ldr	r2, [r7, #28]
 8007ea2:	440a      	add	r2, r1
 8007ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ea8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007eac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007eb0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	015a      	lsls	r2, r3, #5
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	4413      	add	r3, r2
 8007eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	69ba      	ldr	r2, [r7, #24]
 8007ec2:	0151      	lsls	r1, r2, #5
 8007ec4:	69fa      	ldr	r2, [r7, #28]
 8007ec6:	440a      	add	r2, r1
 8007ec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ecc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ed0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	015a      	lsls	r2, r3, #5
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	4413      	add	r3, r2
 8007eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	69ba      	ldr	r2, [r7, #24]
 8007ee2:	0151      	lsls	r1, r2, #5
 8007ee4:	69fa      	ldr	r2, [r7, #28]
 8007ee6:	440a      	add	r2, r1
 8007ee8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eec:	0cdb      	lsrs	r3, r3, #19
 8007eee:	04db      	lsls	r3, r3, #19
 8007ef0:	6113      	str	r3, [r2, #16]
 8007ef2:	e074      	b.n	8007fde <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	015a      	lsls	r2, r3, #5
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	4413      	add	r3, r2
 8007efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	69ba      	ldr	r2, [r7, #24]
 8007f04:	0151      	lsls	r1, r2, #5
 8007f06:	69fa      	ldr	r2, [r7, #28]
 8007f08:	440a      	add	r2, r1
 8007f0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f0e:	0cdb      	lsrs	r3, r3, #19
 8007f10:	04db      	lsls	r3, r3, #19
 8007f12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	015a      	lsls	r2, r3, #5
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	69ba      	ldr	r2, [r7, #24]
 8007f24:	0151      	lsls	r1, r2, #5
 8007f26:	69fa      	ldr	r2, [r7, #28]
 8007f28:	440a      	add	r2, r1
 8007f2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f2e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007f32:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007f36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	015a      	lsls	r2, r3, #5
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	4413      	add	r3, r2
 8007f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f44:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	6959      	ldr	r1, [r3, #20]
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	440b      	add	r3, r1
 8007f50:	1e59      	subs	r1, r3, #1
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f5a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007f5c:	4b9d      	ldr	r3, [pc, #628]	; (80081d4 <USB_EPStartXfer+0x370>)
 8007f5e:	400b      	ands	r3, r1
 8007f60:	69b9      	ldr	r1, [r7, #24]
 8007f62:	0148      	lsls	r0, r1, #5
 8007f64:	69f9      	ldr	r1, [r7, #28]
 8007f66:	4401      	add	r1, r0
 8007f68:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	015a      	lsls	r2, r3, #5
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	4413      	add	r3, r2
 8007f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f7c:	691a      	ldr	r2, [r3, #16]
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	695b      	ldr	r3, [r3, #20]
 8007f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f86:	69b9      	ldr	r1, [r7, #24]
 8007f88:	0148      	lsls	r0, r1, #5
 8007f8a:	69f9      	ldr	r1, [r7, #28]
 8007f8c:	4401      	add	r1, r0
 8007f8e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f92:	4313      	orrs	r3, r2
 8007f94:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	78db      	ldrb	r3, [r3, #3]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d11f      	bne.n	8007fde <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	015a      	lsls	r2, r3, #5
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	69ba      	ldr	r2, [r7, #24]
 8007fae:	0151      	lsls	r1, r2, #5
 8007fb0:	69fa      	ldr	r2, [r7, #28]
 8007fb2:	440a      	add	r2, r1
 8007fb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fb8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007fbc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	015a      	lsls	r2, r3, #5
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	69ba      	ldr	r2, [r7, #24]
 8007fce:	0151      	lsls	r1, r2, #5
 8007fd0:	69fa      	ldr	r2, [r7, #28]
 8007fd2:	440a      	add	r2, r1
 8007fd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fd8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007fdc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007fde:	79fb      	ldrb	r3, [r7, #7]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d14b      	bne.n	800807c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d009      	beq.n	8008000 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	015a      	lsls	r2, r3, #5
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	78db      	ldrb	r3, [r3, #3]
 8008004:	2b01      	cmp	r3, #1
 8008006:	d128      	bne.n	800805a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008014:	2b00      	cmp	r3, #0
 8008016:	d110      	bne.n	800803a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	015a      	lsls	r2, r3, #5
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	4413      	add	r3, r2
 8008020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	69ba      	ldr	r2, [r7, #24]
 8008028:	0151      	lsls	r1, r2, #5
 800802a:	69fa      	ldr	r2, [r7, #28]
 800802c:	440a      	add	r2, r1
 800802e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008032:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008036:	6013      	str	r3, [r2, #0]
 8008038:	e00f      	b.n	800805a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	015a      	lsls	r2, r3, #5
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	4413      	add	r3, r2
 8008042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	69ba      	ldr	r2, [r7, #24]
 800804a:	0151      	lsls	r1, r2, #5
 800804c:	69fa      	ldr	r2, [r7, #28]
 800804e:	440a      	add	r2, r1
 8008050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008058:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	015a      	lsls	r2, r3, #5
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	4413      	add	r3, r2
 8008062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	69ba      	ldr	r2, [r7, #24]
 800806a:	0151      	lsls	r1, r2, #5
 800806c:	69fa      	ldr	r2, [r7, #28]
 800806e:	440a      	add	r2, r1
 8008070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008074:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008078:	6013      	str	r3, [r2, #0]
 800807a:	e12f      	b.n	80082dc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	015a      	lsls	r2, r3, #5
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	4413      	add	r3, r2
 8008084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	69ba      	ldr	r2, [r7, #24]
 800808c:	0151      	lsls	r1, r2, #5
 800808e:	69fa      	ldr	r2, [r7, #28]
 8008090:	440a      	add	r2, r1
 8008092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008096:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800809a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	78db      	ldrb	r3, [r3, #3]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d015      	beq.n	80080d0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	695b      	ldr	r3, [r3, #20]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f000 8117 	beq.w	80082dc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	f003 030f 	and.w	r3, r3, #15
 80080be:	2101      	movs	r1, #1
 80080c0:	fa01 f303 	lsl.w	r3, r1, r3
 80080c4:	69f9      	ldr	r1, [r7, #28]
 80080c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080ca:	4313      	orrs	r3, r2
 80080cc:	634b      	str	r3, [r1, #52]	; 0x34
 80080ce:	e105      	b.n	80082dc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d110      	bne.n	8008102 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	015a      	lsls	r2, r3, #5
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	4413      	add	r3, r2
 80080e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	69ba      	ldr	r2, [r7, #24]
 80080f0:	0151      	lsls	r1, r2, #5
 80080f2:	69fa      	ldr	r2, [r7, #28]
 80080f4:	440a      	add	r2, r1
 80080f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80080fe:	6013      	str	r3, [r2, #0]
 8008100:	e00f      	b.n	8008122 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	015a      	lsls	r2, r3, #5
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	4413      	add	r3, r2
 800810a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	69ba      	ldr	r2, [r7, #24]
 8008112:	0151      	lsls	r1, r2, #5
 8008114:	69fa      	ldr	r2, [r7, #28]
 8008116:	440a      	add	r2, r1
 8008118:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800811c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008120:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	68d9      	ldr	r1, [r3, #12]
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	781a      	ldrb	r2, [r3, #0]
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	b298      	uxth	r0, r3
 8008130:	79fb      	ldrb	r3, [r7, #7]
 8008132:	9300      	str	r3, [sp, #0]
 8008134:	4603      	mov	r3, r0
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f000 fa2b 	bl	8008592 <USB_WritePacket>
 800813c:	e0ce      	b.n	80082dc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	015a      	lsls	r2, r3, #5
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	4413      	add	r3, r2
 8008146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	69ba      	ldr	r2, [r7, #24]
 800814e:	0151      	lsls	r1, r2, #5
 8008150:	69fa      	ldr	r2, [r7, #28]
 8008152:	440a      	add	r2, r1
 8008154:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008158:	0cdb      	lsrs	r3, r3, #19
 800815a:	04db      	lsls	r3, r3, #19
 800815c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	015a      	lsls	r2, r3, #5
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	4413      	add	r3, r2
 8008166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800816a:	691b      	ldr	r3, [r3, #16]
 800816c:	69ba      	ldr	r2, [r7, #24]
 800816e:	0151      	lsls	r1, r2, #5
 8008170:	69fa      	ldr	r2, [r7, #28]
 8008172:	440a      	add	r2, r1
 8008174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008178:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800817c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008180:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	695b      	ldr	r3, [r3, #20]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d126      	bne.n	80081d8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	015a      	lsls	r2, r3, #5
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	4413      	add	r3, r2
 8008192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008196:	691a      	ldr	r2, [r3, #16]
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081a0:	69b9      	ldr	r1, [r7, #24]
 80081a2:	0148      	lsls	r0, r1, #5
 80081a4:	69f9      	ldr	r1, [r7, #28]
 80081a6:	4401      	add	r1, r0
 80081a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80081ac:	4313      	orrs	r3, r2
 80081ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	015a      	lsls	r2, r3, #5
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	4413      	add	r3, r2
 80081b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	69ba      	ldr	r2, [r7, #24]
 80081c0:	0151      	lsls	r1, r2, #5
 80081c2:	69fa      	ldr	r2, [r7, #28]
 80081c4:	440a      	add	r2, r1
 80081c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80081ce:	6113      	str	r3, [r2, #16]
 80081d0:	e036      	b.n	8008240 <USB_EPStartXfer+0x3dc>
 80081d2:	bf00      	nop
 80081d4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	695a      	ldr	r2, [r3, #20]
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	4413      	add	r3, r2
 80081e2:	1e5a      	subs	r2, r3, #1
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ec:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	015a      	lsls	r2, r3, #5
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	4413      	add	r3, r2
 80081f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081fa:	691a      	ldr	r2, [r3, #16]
 80081fc:	8afb      	ldrh	r3, [r7, #22]
 80081fe:	04d9      	lsls	r1, r3, #19
 8008200:	4b39      	ldr	r3, [pc, #228]	; (80082e8 <USB_EPStartXfer+0x484>)
 8008202:	400b      	ands	r3, r1
 8008204:	69b9      	ldr	r1, [r7, #24]
 8008206:	0148      	lsls	r0, r1, #5
 8008208:	69f9      	ldr	r1, [r7, #28]
 800820a:	4401      	add	r1, r0
 800820c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008210:	4313      	orrs	r3, r2
 8008212:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	015a      	lsls	r2, r3, #5
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	4413      	add	r3, r2
 800821c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008220:	691a      	ldr	r2, [r3, #16]
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	8af9      	ldrh	r1, [r7, #22]
 8008228:	fb01 f303 	mul.w	r3, r1, r3
 800822c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008230:	69b9      	ldr	r1, [r7, #24]
 8008232:	0148      	lsls	r0, r1, #5
 8008234:	69f9      	ldr	r1, [r7, #28]
 8008236:	4401      	add	r1, r0
 8008238:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800823c:	4313      	orrs	r3, r2
 800823e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008240:	79fb      	ldrb	r3, [r7, #7]
 8008242:	2b01      	cmp	r3, #1
 8008244:	d10d      	bne.n	8008262 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d009      	beq.n	8008262 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	68d9      	ldr	r1, [r3, #12]
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	015a      	lsls	r2, r3, #5
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	4413      	add	r3, r2
 800825a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800825e:	460a      	mov	r2, r1
 8008260:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	78db      	ldrb	r3, [r3, #3]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d128      	bne.n	80082bc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008276:	2b00      	cmp	r3, #0
 8008278:	d110      	bne.n	800829c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	015a      	lsls	r2, r3, #5
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	4413      	add	r3, r2
 8008282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	69ba      	ldr	r2, [r7, #24]
 800828a:	0151      	lsls	r1, r2, #5
 800828c:	69fa      	ldr	r2, [r7, #28]
 800828e:	440a      	add	r2, r1
 8008290:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008294:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008298:	6013      	str	r3, [r2, #0]
 800829a:	e00f      	b.n	80082bc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	015a      	lsls	r2, r3, #5
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	4413      	add	r3, r2
 80082a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	69ba      	ldr	r2, [r7, #24]
 80082ac:	0151      	lsls	r1, r2, #5
 80082ae:	69fa      	ldr	r2, [r7, #28]
 80082b0:	440a      	add	r2, r1
 80082b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082ba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	015a      	lsls	r2, r3, #5
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	4413      	add	r3, r2
 80082c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	69ba      	ldr	r2, [r7, #24]
 80082cc:	0151      	lsls	r1, r2, #5
 80082ce:	69fa      	ldr	r2, [r7, #28]
 80082d0:	440a      	add	r2, r1
 80082d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80082da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3720      	adds	r7, #32
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	1ff80000 	.word	0x1ff80000

080082ec <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b087      	sub	sp, #28
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	4613      	mov	r3, r2
 80082f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	785b      	ldrb	r3, [r3, #1]
 8008308:	2b01      	cmp	r3, #1
 800830a:	f040 80cd 	bne.w	80084a8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	695b      	ldr	r3, [r3, #20]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d132      	bne.n	800837c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	015a      	lsls	r2, r3, #5
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	4413      	add	r3, r2
 800831e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	693a      	ldr	r2, [r7, #16]
 8008326:	0151      	lsls	r1, r2, #5
 8008328:	697a      	ldr	r2, [r7, #20]
 800832a:	440a      	add	r2, r1
 800832c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008330:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008334:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008338:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	015a      	lsls	r2, r3, #5
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	4413      	add	r3, r2
 8008342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	693a      	ldr	r2, [r7, #16]
 800834a:	0151      	lsls	r1, r2, #5
 800834c:	697a      	ldr	r2, [r7, #20]
 800834e:	440a      	add	r2, r1
 8008350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008354:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008358:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	015a      	lsls	r2, r3, #5
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	4413      	add	r3, r2
 8008362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	693a      	ldr	r2, [r7, #16]
 800836a:	0151      	lsls	r1, r2, #5
 800836c:	697a      	ldr	r2, [r7, #20]
 800836e:	440a      	add	r2, r1
 8008370:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008374:	0cdb      	lsrs	r3, r3, #19
 8008376:	04db      	lsls	r3, r3, #19
 8008378:	6113      	str	r3, [r2, #16]
 800837a:	e04e      	b.n	800841a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	015a      	lsls	r2, r3, #5
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	4413      	add	r3, r2
 8008384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	693a      	ldr	r2, [r7, #16]
 800838c:	0151      	lsls	r1, r2, #5
 800838e:	697a      	ldr	r2, [r7, #20]
 8008390:	440a      	add	r2, r1
 8008392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008396:	0cdb      	lsrs	r3, r3, #19
 8008398:	04db      	lsls	r3, r3, #19
 800839a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	015a      	lsls	r2, r3, #5
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	4413      	add	r3, r2
 80083a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083a8:	691b      	ldr	r3, [r3, #16]
 80083aa:	693a      	ldr	r2, [r7, #16]
 80083ac:	0151      	lsls	r1, r2, #5
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	440a      	add	r2, r1
 80083b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80083ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80083be:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	695a      	ldr	r2, [r3, #20]
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d903      	bls.n	80083d4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	689a      	ldr	r2, [r3, #8]
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	015a      	lsls	r2, r3, #5
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	4413      	add	r3, r2
 80083dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	693a      	ldr	r2, [r7, #16]
 80083e4:	0151      	lsls	r1, r2, #5
 80083e6:	697a      	ldr	r2, [r7, #20]
 80083e8:	440a      	add	r2, r1
 80083ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	015a      	lsls	r2, r3, #5
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	4413      	add	r3, r2
 80083fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008400:	691a      	ldr	r2, [r3, #16]
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	695b      	ldr	r3, [r3, #20]
 8008406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800840a:	6939      	ldr	r1, [r7, #16]
 800840c:	0148      	lsls	r0, r1, #5
 800840e:	6979      	ldr	r1, [r7, #20]
 8008410:	4401      	add	r1, r0
 8008412:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008416:	4313      	orrs	r3, r2
 8008418:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800841a:	79fb      	ldrb	r3, [r7, #7]
 800841c:	2b01      	cmp	r3, #1
 800841e:	d11e      	bne.n	800845e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d009      	beq.n	800843c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	015a      	lsls	r2, r3, #5
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	4413      	add	r3, r2
 8008430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008434:	461a      	mov	r2, r3
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	015a      	lsls	r2, r3, #5
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	4413      	add	r3, r2
 8008444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	693a      	ldr	r2, [r7, #16]
 800844c:	0151      	lsls	r1, r2, #5
 800844e:	697a      	ldr	r2, [r7, #20]
 8008450:	440a      	add	r2, r1
 8008452:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008456:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800845a:	6013      	str	r3, [r2, #0]
 800845c:	e092      	b.n	8008584 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	015a      	lsls	r2, r3, #5
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	4413      	add	r3, r2
 8008466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	693a      	ldr	r2, [r7, #16]
 800846e:	0151      	lsls	r1, r2, #5
 8008470:	697a      	ldr	r2, [r7, #20]
 8008472:	440a      	add	r2, r1
 8008474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008478:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800847c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	695b      	ldr	r3, [r3, #20]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d07e      	beq.n	8008584 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800848c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	f003 030f 	and.w	r3, r3, #15
 8008496:	2101      	movs	r1, #1
 8008498:	fa01 f303 	lsl.w	r3, r1, r3
 800849c:	6979      	ldr	r1, [r7, #20]
 800849e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084a2:	4313      	orrs	r3, r2
 80084a4:	634b      	str	r3, [r1, #52]	; 0x34
 80084a6:	e06d      	b.n	8008584 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	015a      	lsls	r2, r3, #5
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	4413      	add	r3, r2
 80084b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	693a      	ldr	r2, [r7, #16]
 80084b8:	0151      	lsls	r1, r2, #5
 80084ba:	697a      	ldr	r2, [r7, #20]
 80084bc:	440a      	add	r2, r1
 80084be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084c2:	0cdb      	lsrs	r3, r3, #19
 80084c4:	04db      	lsls	r3, r3, #19
 80084c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	015a      	lsls	r2, r3, #5
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	4413      	add	r3, r2
 80084d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	693a      	ldr	r2, [r7, #16]
 80084d8:	0151      	lsls	r1, r2, #5
 80084da:	697a      	ldr	r2, [r7, #20]
 80084dc:	440a      	add	r2, r1
 80084de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80084e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80084ea:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	695b      	ldr	r3, [r3, #20]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d003      	beq.n	80084fc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	689a      	ldr	r2, [r3, #8]
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	015a      	lsls	r2, r3, #5
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	4413      	add	r3, r2
 8008504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	693a      	ldr	r2, [r7, #16]
 800850c:	0151      	lsls	r1, r2, #5
 800850e:	697a      	ldr	r2, [r7, #20]
 8008510:	440a      	add	r2, r1
 8008512:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008516:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800851a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	015a      	lsls	r2, r3, #5
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	4413      	add	r3, r2
 8008524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008528:	691a      	ldr	r2, [r3, #16]
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008532:	6939      	ldr	r1, [r7, #16]
 8008534:	0148      	lsls	r0, r1, #5
 8008536:	6979      	ldr	r1, [r7, #20]
 8008538:	4401      	add	r1, r0
 800853a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800853e:	4313      	orrs	r3, r2
 8008540:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008542:	79fb      	ldrb	r3, [r7, #7]
 8008544:	2b01      	cmp	r3, #1
 8008546:	d10d      	bne.n	8008564 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d009      	beq.n	8008564 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	68d9      	ldr	r1, [r3, #12]
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	015a      	lsls	r2, r3, #5
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	4413      	add	r3, r2
 800855c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008560:	460a      	mov	r2, r1
 8008562:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	015a      	lsls	r2, r3, #5
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	4413      	add	r3, r2
 800856c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	693a      	ldr	r2, [r7, #16]
 8008574:	0151      	lsls	r1, r2, #5
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	440a      	add	r2, r1
 800857a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800857e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008582:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	371c      	adds	r7, #28
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr

08008592 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008592:	b480      	push	{r7}
 8008594:	b089      	sub	sp, #36	; 0x24
 8008596:	af00      	add	r7, sp, #0
 8008598:	60f8      	str	r0, [r7, #12]
 800859a:	60b9      	str	r1, [r7, #8]
 800859c:	4611      	mov	r1, r2
 800859e:	461a      	mov	r2, r3
 80085a0:	460b      	mov	r3, r1
 80085a2:	71fb      	strb	r3, [r7, #7]
 80085a4:	4613      	mov	r3, r2
 80085a6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80085b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d123      	bne.n	8008600 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80085b8:	88bb      	ldrh	r3, [r7, #4]
 80085ba:	3303      	adds	r3, #3
 80085bc:	089b      	lsrs	r3, r3, #2
 80085be:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80085c0:	2300      	movs	r3, #0
 80085c2:	61bb      	str	r3, [r7, #24]
 80085c4:	e018      	b.n	80085f8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80085c6:	79fb      	ldrb	r3, [r7, #7]
 80085c8:	031a      	lsls	r2, r3, #12
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	4413      	add	r3, r2
 80085ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085d2:	461a      	mov	r2, r3
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	3301      	adds	r3, #1
 80085de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	3301      	adds	r3, #1
 80085e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	3301      	adds	r3, #1
 80085ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	3301      	adds	r3, #1
 80085f0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	3301      	adds	r3, #1
 80085f6:	61bb      	str	r3, [r7, #24]
 80085f8:	69ba      	ldr	r2, [r7, #24]
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d3e2      	bcc.n	80085c6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008600:	2300      	movs	r3, #0
}
 8008602:	4618      	mov	r0, r3
 8008604:	3724      	adds	r7, #36	; 0x24
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr

0800860e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800860e:	b480      	push	{r7}
 8008610:	b08b      	sub	sp, #44	; 0x2c
 8008612:	af00      	add	r7, sp, #0
 8008614:	60f8      	str	r0, [r7, #12]
 8008616:	60b9      	str	r1, [r7, #8]
 8008618:	4613      	mov	r3, r2
 800861a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008624:	88fb      	ldrh	r3, [r7, #6]
 8008626:	089b      	lsrs	r3, r3, #2
 8008628:	b29b      	uxth	r3, r3
 800862a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800862c:	88fb      	ldrh	r3, [r7, #6]
 800862e:	f003 0303 	and.w	r3, r3, #3
 8008632:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008634:	2300      	movs	r3, #0
 8008636:	623b      	str	r3, [r7, #32]
 8008638:	e014      	b.n	8008664 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800863a:	69bb      	ldr	r3, [r7, #24]
 800863c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008644:	601a      	str	r2, [r3, #0]
    pDest++;
 8008646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008648:	3301      	adds	r3, #1
 800864a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800864c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864e:	3301      	adds	r3, #1
 8008650:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008654:	3301      	adds	r3, #1
 8008656:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865a:	3301      	adds	r3, #1
 800865c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800865e:	6a3b      	ldr	r3, [r7, #32]
 8008660:	3301      	adds	r3, #1
 8008662:	623b      	str	r3, [r7, #32]
 8008664:	6a3a      	ldr	r2, [r7, #32]
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	429a      	cmp	r2, r3
 800866a:	d3e6      	bcc.n	800863a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800866c:	8bfb      	ldrh	r3, [r7, #30]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d01e      	beq.n	80086b0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008672:	2300      	movs	r3, #0
 8008674:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008676:	69bb      	ldr	r3, [r7, #24]
 8008678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800867c:	461a      	mov	r2, r3
 800867e:	f107 0310 	add.w	r3, r7, #16
 8008682:	6812      	ldr	r2, [r2, #0]
 8008684:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	6a3b      	ldr	r3, [r7, #32]
 800868a:	b2db      	uxtb	r3, r3
 800868c:	00db      	lsls	r3, r3, #3
 800868e:	fa22 f303 	lsr.w	r3, r2, r3
 8008692:	b2da      	uxtb	r2, r3
 8008694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008696:	701a      	strb	r2, [r3, #0]
      i++;
 8008698:	6a3b      	ldr	r3, [r7, #32]
 800869a:	3301      	adds	r3, #1
 800869c:	623b      	str	r3, [r7, #32]
      pDest++;
 800869e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a0:	3301      	adds	r3, #1
 80086a2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80086a4:	8bfb      	ldrh	r3, [r7, #30]
 80086a6:	3b01      	subs	r3, #1
 80086a8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80086aa:	8bfb      	ldrh	r3, [r7, #30]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d1ea      	bne.n	8008686 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80086b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	372c      	adds	r7, #44	; 0x2c
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr

080086be <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80086be:	b480      	push	{r7}
 80086c0:	b085      	sub	sp, #20
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
 80086c6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	785b      	ldrb	r3, [r3, #1]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d12c      	bne.n	8008734 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	015a      	lsls	r2, r3, #5
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	4413      	add	r3, r2
 80086e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	db12      	blt.n	8008712 <USB_EPSetStall+0x54>
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d00f      	beq.n	8008712 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	015a      	lsls	r2, r3, #5
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	4413      	add	r3, r2
 80086fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	68ba      	ldr	r2, [r7, #8]
 8008702:	0151      	lsls	r1, r2, #5
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	440a      	add	r2, r1
 8008708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800870c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008710:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	015a      	lsls	r2, r3, #5
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	4413      	add	r3, r2
 800871a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68ba      	ldr	r2, [r7, #8]
 8008722:	0151      	lsls	r1, r2, #5
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	440a      	add	r2, r1
 8008728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800872c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008730:	6013      	str	r3, [r2, #0]
 8008732:	e02b      	b.n	800878c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	015a      	lsls	r2, r3, #5
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	4413      	add	r3, r2
 800873c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	db12      	blt.n	800876c <USB_EPSetStall+0xae>
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00f      	beq.n	800876c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	015a      	lsls	r2, r3, #5
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	4413      	add	r3, r2
 8008754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68ba      	ldr	r2, [r7, #8]
 800875c:	0151      	lsls	r1, r2, #5
 800875e:	68fa      	ldr	r2, [r7, #12]
 8008760:	440a      	add	r2, r1
 8008762:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008766:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800876a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	015a      	lsls	r2, r3, #5
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	4413      	add	r3, r2
 8008774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	0151      	lsls	r1, r2, #5
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	440a      	add	r2, r1
 8008782:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008786:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800878a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3714      	adds	r7, #20
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800879a:	b480      	push	{r7}
 800879c:	b085      	sub	sp, #20
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
 80087a2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	785b      	ldrb	r3, [r3, #1]
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d128      	bne.n	8008808 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	015a      	lsls	r2, r3, #5
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	4413      	add	r3, r2
 80087be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	68ba      	ldr	r2, [r7, #8]
 80087c6:	0151      	lsls	r1, r2, #5
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	440a      	add	r2, r1
 80087cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80087d4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	78db      	ldrb	r3, [r3, #3]
 80087da:	2b03      	cmp	r3, #3
 80087dc:	d003      	beq.n	80087e6 <USB_EPClearStall+0x4c>
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	78db      	ldrb	r3, [r3, #3]
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	d138      	bne.n	8008858 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	015a      	lsls	r2, r3, #5
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	4413      	add	r3, r2
 80087ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	0151      	lsls	r1, r2, #5
 80087f8:	68fa      	ldr	r2, [r7, #12]
 80087fa:	440a      	add	r2, r1
 80087fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008804:	6013      	str	r3, [r2, #0]
 8008806:	e027      	b.n	8008858 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	015a      	lsls	r2, r3, #5
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	4413      	add	r3, r2
 8008810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	0151      	lsls	r1, r2, #5
 800881a:	68fa      	ldr	r2, [r7, #12]
 800881c:	440a      	add	r2, r1
 800881e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008822:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008826:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	78db      	ldrb	r3, [r3, #3]
 800882c:	2b03      	cmp	r3, #3
 800882e:	d003      	beq.n	8008838 <USB_EPClearStall+0x9e>
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	78db      	ldrb	r3, [r3, #3]
 8008834:	2b02      	cmp	r3, #2
 8008836:	d10f      	bne.n	8008858 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	015a      	lsls	r2, r3, #5
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	4413      	add	r3, r2
 8008840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	68ba      	ldr	r2, [r7, #8]
 8008848:	0151      	lsls	r1, r2, #5
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	440a      	add	r2, r1
 800884e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008856:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	3714      	adds	r7, #20
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr

08008866 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008866:	b480      	push	{r7}
 8008868:	b085      	sub	sp, #20
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
 800886e:	460b      	mov	r3, r1
 8008870:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68fa      	ldr	r2, [r7, #12]
 8008880:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008884:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008888:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	78fb      	ldrb	r3, [r7, #3]
 8008894:	011b      	lsls	r3, r3, #4
 8008896:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800889a:	68f9      	ldr	r1, [r7, #12]
 800889c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088a0:	4313      	orrs	r3, r2
 80088a2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3714      	adds	r7, #20
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr

080088b2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80088b2:	b480      	push	{r7}
 80088b4:	b085      	sub	sp, #20
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80088cc:	f023 0303 	bic.w	r3, r3, #3
 80088d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088e0:	f023 0302 	bic.w	r3, r3, #2
 80088e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3714      	adds	r7, #20
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800890e:	f023 0303 	bic.w	r3, r3, #3
 8008912:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	68fa      	ldr	r2, [r7, #12]
 800891e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008922:	f043 0302 	orr.w	r3, r3, #2
 8008926:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	3714      	adds	r7, #20
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr

08008936 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008936:	b480      	push	{r7}
 8008938:	b085      	sub	sp, #20
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	695b      	ldr	r3, [r3, #20]
 8008942:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	699b      	ldr	r3, [r3, #24]
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	4013      	ands	r3, r2
 800894c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800894e:	68fb      	ldr	r3, [r7, #12]
}
 8008950:	4618      	mov	r0, r3
 8008952:	3714      	adds	r7, #20
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800896e:	699b      	ldr	r3, [r3, #24]
 8008970:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008978:	69db      	ldr	r3, [r3, #28]
 800897a:	68ba      	ldr	r2, [r7, #8]
 800897c:	4013      	ands	r3, r2
 800897e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	0c1b      	lsrs	r3, r3, #16
}
 8008984:	4618      	mov	r0, r3
 8008986:	3714      	adds	r7, #20
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008990:	b480      	push	{r7}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089a2:	699b      	ldr	r3, [r3, #24]
 80089a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ac:	69db      	ldr	r3, [r3, #28]
 80089ae:	68ba      	ldr	r2, [r7, #8]
 80089b0:	4013      	ands	r3, r2
 80089b2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	b29b      	uxth	r3, r3
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3714      	adds	r7, #20
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	460b      	mov	r3, r1
 80089ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80089d4:	78fb      	ldrb	r3, [r7, #3]
 80089d6:	015a      	lsls	r2, r3, #5
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	4413      	add	r3, r2
 80089dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ea:	695b      	ldr	r3, [r3, #20]
 80089ec:	68ba      	ldr	r2, [r7, #8]
 80089ee:	4013      	ands	r3, r2
 80089f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80089f2:	68bb      	ldr	r3, [r7, #8]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3714      	adds	r7, #20
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b087      	sub	sp, #28
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	460b      	mov	r3, r1
 8008a0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a22:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008a24:	78fb      	ldrb	r3, [r7, #3]
 8008a26:	f003 030f 	and.w	r3, r3, #15
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a30:	01db      	lsls	r3, r3, #7
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	693a      	ldr	r2, [r7, #16]
 8008a36:	4313      	orrs	r3, r2
 8008a38:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008a3a:	78fb      	ldrb	r3, [r7, #3]
 8008a3c:	015a      	lsls	r2, r3, #5
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	4413      	add	r3, r2
 8008a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	693a      	ldr	r2, [r7, #16]
 8008a4a:	4013      	ands	r3, r2
 8008a4c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008a4e:	68bb      	ldr	r3, [r7, #8]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	371c      	adds	r7, #28
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	695b      	ldr	r3, [r3, #20]
 8008a68:	f003 0301 	and.w	r3, r3, #1
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a92:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008a96:	f023 0307 	bic.w	r3, r3, #7
 8008a9a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	68fa      	ldr	r2, [r7, #12]
 8008aa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008aae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3714      	adds	r7, #20
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr
	...

08008ac0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b087      	sub	sp, #28
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	460b      	mov	r3, r1
 8008aca:	607a      	str	r2, [r7, #4]
 8008acc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	333c      	adds	r3, #60	; 0x3c
 8008ad6:	3304      	adds	r3, #4
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	4a26      	ldr	r2, [pc, #152]	; (8008b78 <USB_EP0_OutStart+0xb8>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d90a      	bls.n	8008afa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008af0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008af4:	d101      	bne.n	8008afa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008af6:	2300      	movs	r3, #0
 8008af8:	e037      	b.n	8008b6a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b00:	461a      	mov	r2, r3
 8008b02:	2300      	movs	r3, #0
 8008b04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	697a      	ldr	r2, [r7, #20]
 8008b10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	697a      	ldr	r2, [r7, #20]
 8008b24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b28:	f043 0318 	orr.w	r3, r3, #24
 8008b2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	697a      	ldr	r2, [r7, #20]
 8008b38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b3c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008b40:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008b42:	7afb      	ldrb	r3, [r7, #11]
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d10f      	bne.n	8008b68 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b4e:	461a      	mov	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	697a      	ldr	r2, [r7, #20]
 8008b5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b62:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008b66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b68:	2300      	movs	r3, #0
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	371c      	adds	r7, #28
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr
 8008b76:	bf00      	nop
 8008b78:	4f54300a 	.word	0x4f54300a

08008b7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b085      	sub	sp, #20
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b84:	2300      	movs	r3, #0
 8008b86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	60fb      	str	r3, [r7, #12]
 8008b8e:	4a13      	ldr	r2, [pc, #76]	; (8008bdc <USB_CoreReset+0x60>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d901      	bls.n	8008b98 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008b94:	2303      	movs	r3, #3
 8008b96:	e01a      	b.n	8008bce <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	691b      	ldr	r3, [r3, #16]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	daf3      	bge.n	8008b88 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	691b      	ldr	r3, [r3, #16]
 8008ba8:	f043 0201 	orr.w	r2, r3, #1
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	60fb      	str	r3, [r7, #12]
 8008bb6:	4a09      	ldr	r2, [pc, #36]	; (8008bdc <USB_CoreReset+0x60>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d901      	bls.n	8008bc0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	e006      	b.n	8008bce <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	691b      	ldr	r3, [r3, #16]
 8008bc4:	f003 0301 	and.w	r3, r3, #1
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d0f1      	beq.n	8008bb0 <USB_CoreReset+0x34>

  return HAL_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3714      	adds	r7, #20
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	00030d40 	.word	0x00030d40

08008be0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	460b      	mov	r3, r1
 8008bea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008bec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008bf0:	f003 fa20 	bl	800c034 <USBD_static_malloc>
 8008bf4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d105      	bne.n	8008c08 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008c04:	2302      	movs	r3, #2
 8008c06:	e066      	b.n	8008cd6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	7c1b      	ldrb	r3, [r3, #16]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d119      	bne.n	8008c4c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008c18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c1c:	2202      	movs	r2, #2
 8008c1e:	2181      	movs	r1, #129	; 0x81
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f003 f8e4 	bl	800bdee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008c2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c30:	2202      	movs	r2, #2
 8008c32:	2101      	movs	r1, #1
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f003 f8da 	bl	800bdee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2210      	movs	r2, #16
 8008c46:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008c4a:	e016      	b.n	8008c7a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008c4c:	2340      	movs	r3, #64	; 0x40
 8008c4e:	2202      	movs	r2, #2
 8008c50:	2181      	movs	r1, #129	; 0x81
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f003 f8cb 	bl	800bdee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008c5e:	2340      	movs	r3, #64	; 0x40
 8008c60:	2202      	movs	r2, #2
 8008c62:	2101      	movs	r1, #1
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f003 f8c2 	bl	800bdee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2210      	movs	r2, #16
 8008c76:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008c7a:	2308      	movs	r3, #8
 8008c7c:	2203      	movs	r2, #3
 8008c7e:	2182      	movs	r1, #130	; 0x82
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f003 f8b4 	bl	800bdee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2201      	movs	r2, #1
 8008c8a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	7c1b      	ldrb	r3, [r3, #16]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d109      	bne.n	8008cc4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008cb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cba:	2101      	movs	r1, #1
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f003 f985 	bl	800bfcc <USBD_LL_PrepareReceive>
 8008cc2:	e007      	b.n	8008cd4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008cca:	2340      	movs	r3, #64	; 0x40
 8008ccc:	2101      	movs	r1, #1
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f003 f97c 	bl	800bfcc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b082      	sub	sp, #8
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008cea:	2181      	movs	r1, #129	; 0x81
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f003 f8a4 	bl	800be3a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008cf8:	2101      	movs	r1, #1
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f003 f89d 	bl	800be3a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008d08:	2182      	movs	r1, #130	; 0x82
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f003 f895 	bl	800be3a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00e      	beq.n	8008d48 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f003 f988 	bl	800c050 <USBD_static_free>
    pdev->pClassData = NULL;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3708      	adds	r7, #8
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
	...

08008d54 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b086      	sub	sp, #24
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d64:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008d66:	2300      	movs	r3, #0
 8008d68:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d101      	bne.n	8008d7c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008d78:	2303      	movs	r3, #3
 8008d7a:	e0af      	b.n	8008edc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d03f      	beq.n	8008e08 <USBD_CDC_Setup+0xb4>
 8008d88:	2b20      	cmp	r3, #32
 8008d8a:	f040 809f 	bne.w	8008ecc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	88db      	ldrh	r3, [r3, #6]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d02e      	beq.n	8008df4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	b25b      	sxtb	r3, r3
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	da16      	bge.n	8008dce <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	683a      	ldr	r2, [r7, #0]
 8008daa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008dac:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008dae:	683a      	ldr	r2, [r7, #0]
 8008db0:	88d2      	ldrh	r2, [r2, #6]
 8008db2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	88db      	ldrh	r3, [r3, #6]
 8008db8:	2b07      	cmp	r3, #7
 8008dba:	bf28      	it	cs
 8008dbc:	2307      	movcs	r3, #7
 8008dbe:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	89fa      	ldrh	r2, [r7, #14]
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f001 fb19 	bl	800a3fe <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008dcc:	e085      	b.n	8008eda <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	785a      	ldrb	r2, [r3, #1]
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	88db      	ldrh	r3, [r3, #6]
 8008ddc:	b2da      	uxtb	r2, r3
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008de4:	6939      	ldr	r1, [r7, #16]
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	88db      	ldrh	r3, [r3, #6]
 8008dea:	461a      	mov	r2, r3
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f001 fb32 	bl	800a456 <USBD_CtlPrepareRx>
      break;
 8008df2:	e072      	b.n	8008eda <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	683a      	ldr	r2, [r7, #0]
 8008dfe:	7850      	ldrb	r0, [r2, #1]
 8008e00:	2200      	movs	r2, #0
 8008e02:	6839      	ldr	r1, [r7, #0]
 8008e04:	4798      	blx	r3
      break;
 8008e06:	e068      	b.n	8008eda <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	785b      	ldrb	r3, [r3, #1]
 8008e0c:	2b0b      	cmp	r3, #11
 8008e0e:	d852      	bhi.n	8008eb6 <USBD_CDC_Setup+0x162>
 8008e10:	a201      	add	r2, pc, #4	; (adr r2, 8008e18 <USBD_CDC_Setup+0xc4>)
 8008e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e16:	bf00      	nop
 8008e18:	08008e49 	.word	0x08008e49
 8008e1c:	08008ec5 	.word	0x08008ec5
 8008e20:	08008eb7 	.word	0x08008eb7
 8008e24:	08008eb7 	.word	0x08008eb7
 8008e28:	08008eb7 	.word	0x08008eb7
 8008e2c:	08008eb7 	.word	0x08008eb7
 8008e30:	08008eb7 	.word	0x08008eb7
 8008e34:	08008eb7 	.word	0x08008eb7
 8008e38:	08008eb7 	.word	0x08008eb7
 8008e3c:	08008eb7 	.word	0x08008eb7
 8008e40:	08008e73 	.word	0x08008e73
 8008e44:	08008e9d 	.word	0x08008e9d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	2b03      	cmp	r3, #3
 8008e52:	d107      	bne.n	8008e64 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008e54:	f107 030a 	add.w	r3, r7, #10
 8008e58:	2202      	movs	r2, #2
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f001 face 	bl	800a3fe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e62:	e032      	b.n	8008eca <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008e64:	6839      	ldr	r1, [r7, #0]
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f001 fa58 	bl	800a31c <USBD_CtlError>
            ret = USBD_FAIL;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	75fb      	strb	r3, [r7, #23]
          break;
 8008e70:	e02b      	b.n	8008eca <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	2b03      	cmp	r3, #3
 8008e7c:	d107      	bne.n	8008e8e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008e7e:	f107 030d 	add.w	r3, r7, #13
 8008e82:	2201      	movs	r2, #1
 8008e84:	4619      	mov	r1, r3
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f001 fab9 	bl	800a3fe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e8c:	e01d      	b.n	8008eca <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008e8e:	6839      	ldr	r1, [r7, #0]
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f001 fa43 	bl	800a31c <USBD_CtlError>
            ret = USBD_FAIL;
 8008e96:	2303      	movs	r3, #3
 8008e98:	75fb      	strb	r3, [r7, #23]
          break;
 8008e9a:	e016      	b.n	8008eca <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	2b03      	cmp	r3, #3
 8008ea6:	d00f      	beq.n	8008ec8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008ea8:	6839      	ldr	r1, [r7, #0]
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f001 fa36 	bl	800a31c <USBD_CtlError>
            ret = USBD_FAIL;
 8008eb0:	2303      	movs	r3, #3
 8008eb2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008eb4:	e008      	b.n	8008ec8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008eb6:	6839      	ldr	r1, [r7, #0]
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f001 fa2f 	bl	800a31c <USBD_CtlError>
          ret = USBD_FAIL;
 8008ebe:	2303      	movs	r3, #3
 8008ec0:	75fb      	strb	r3, [r7, #23]
          break;
 8008ec2:	e002      	b.n	8008eca <USBD_CDC_Setup+0x176>
          break;
 8008ec4:	bf00      	nop
 8008ec6:	e008      	b.n	8008eda <USBD_CDC_Setup+0x186>
          break;
 8008ec8:	bf00      	nop
      }
      break;
 8008eca:	e006      	b.n	8008eda <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008ecc:	6839      	ldr	r1, [r7, #0]
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f001 fa24 	bl	800a31c <USBD_CtlError>
      ret = USBD_FAIL;
 8008ed4:	2303      	movs	r3, #3
 8008ed6:	75fb      	strb	r3, [r7, #23]
      break;
 8008ed8:	bf00      	nop
  }

  return (uint8_t)ret;
 8008eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3718      	adds	r7, #24
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	460b      	mov	r3, r1
 8008eee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ef6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d101      	bne.n	8008f06 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008f02:	2303      	movs	r3, #3
 8008f04:	e04f      	b.n	8008fa6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f0c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008f0e:	78fa      	ldrb	r2, [r7, #3]
 8008f10:	6879      	ldr	r1, [r7, #4]
 8008f12:	4613      	mov	r3, r2
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	4413      	add	r3, r2
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	440b      	add	r3, r1
 8008f1c:	3318      	adds	r3, #24
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d029      	beq.n	8008f78 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008f24:	78fa      	ldrb	r2, [r7, #3]
 8008f26:	6879      	ldr	r1, [r7, #4]
 8008f28:	4613      	mov	r3, r2
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	4413      	add	r3, r2
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	440b      	add	r3, r1
 8008f32:	3318      	adds	r3, #24
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	78f9      	ldrb	r1, [r7, #3]
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	00db      	lsls	r3, r3, #3
 8008f3e:	1a5b      	subs	r3, r3, r1
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	4403      	add	r3, r0
 8008f44:	3344      	adds	r3, #68	; 0x44
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	fbb2 f1f3 	udiv	r1, r2, r3
 8008f4c:	fb03 f301 	mul.w	r3, r3, r1
 8008f50:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d110      	bne.n	8008f78 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008f56:	78fa      	ldrb	r2, [r7, #3]
 8008f58:	6879      	ldr	r1, [r7, #4]
 8008f5a:	4613      	mov	r3, r2
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	4413      	add	r3, r2
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	440b      	add	r3, r1
 8008f64:	3318      	adds	r3, #24
 8008f66:	2200      	movs	r2, #0
 8008f68:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008f6a:	78f9      	ldrb	r1, [r7, #3]
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	2200      	movs	r2, #0
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f003 f80a 	bl	800bf8a <USBD_LL_Transmit>
 8008f76:	e015      	b.n	8008fa4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f86:	691b      	ldr	r3, [r3, #16]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00b      	beq.n	8008fa4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f92:	691b      	ldr	r3, [r3, #16]
 8008f94:	68ba      	ldr	r2, [r7, #8]
 8008f96:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008f9a:	68ba      	ldr	r2, [r7, #8]
 8008f9c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008fa0:	78fa      	ldrb	r2, [r7, #3]
 8008fa2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3710      	adds	r7, #16
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b084      	sub	sp, #16
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fc0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d101      	bne.n	8008fd0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008fcc:	2303      	movs	r3, #3
 8008fce:	e015      	b.n	8008ffc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008fd0:	78fb      	ldrb	r3, [r7, #3]
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f003 f81a 	bl	800c00e <USBD_LL_GetRxDataSize>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008fe8:	68db      	ldr	r3, [r3, #12]
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008ff6:	4611      	mov	r1, r2
 8008ff8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008ffa:	2300      	movs	r3, #0
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3710      	adds	r7, #16
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009012:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d101      	bne.n	800901e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800901a:	2303      	movs	r3, #3
 800901c:	e01b      	b.n	8009056 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d015      	beq.n	8009054 <USBD_CDC_EP0_RxReady+0x50>
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800902e:	2bff      	cmp	r3, #255	; 0xff
 8009030:	d010      	beq.n	8009054 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009040:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009048:	b292      	uxth	r2, r2
 800904a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	22ff      	movs	r2, #255	; 0xff
 8009050:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
	...

08009060 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2243      	movs	r2, #67	; 0x43
 800906c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800906e:	4b03      	ldr	r3, [pc, #12]	; (800907c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009070:	4618      	mov	r0, r3
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr
 800907c:	20000090 	.word	0x20000090

08009080 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2243      	movs	r2, #67	; 0x43
 800908c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800908e:	4b03      	ldr	r3, [pc, #12]	; (800909c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009090:	4618      	mov	r0, r3
 8009092:	370c      	adds	r7, #12
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr
 800909c:	2000004c 	.word	0x2000004c

080090a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b083      	sub	sp, #12
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2243      	movs	r2, #67	; 0x43
 80090ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80090ae:	4b03      	ldr	r3, [pc, #12]	; (80090bc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr
 80090bc:	200000d4 	.word	0x200000d4

080090c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	220a      	movs	r2, #10
 80090cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80090ce:	4b03      	ldr	r3, [pc, #12]	; (80090dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	370c      	adds	r7, #12
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr
 80090dc:	20000008 	.word	0x20000008

080090e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d101      	bne.n	80090f4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80090f0:	2303      	movs	r3, #3
 80090f2:	e004      	b.n	80090fe <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	683a      	ldr	r2, [r7, #0]
 80090f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	370c      	adds	r7, #12
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr

0800910a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800910a:	b480      	push	{r7}
 800910c:	b087      	sub	sp, #28
 800910e:	af00      	add	r7, sp, #0
 8009110:	60f8      	str	r0, [r7, #12]
 8009112:	60b9      	str	r1, [r7, #8]
 8009114:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800911c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d101      	bne.n	8009128 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009124:	2303      	movs	r3, #3
 8009126:	e008      	b.n	800913a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	68ba      	ldr	r2, [r7, #8]
 800912c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	371c      	adds	r7, #28
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr

08009146 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009146:	b480      	push	{r7}
 8009148:	b085      	sub	sp, #20
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
 800914e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009156:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d101      	bne.n	8009162 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800915e:	2303      	movs	r3, #3
 8009160:	e004      	b.n	800916c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	683a      	ldr	r2, [r7, #0]
 8009166:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3714      	adds	r7, #20
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009186:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009188:	2301      	movs	r3, #1
 800918a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009192:	2b00      	cmp	r3, #0
 8009194:	d101      	bne.n	800919a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009196:	2303      	movs	r3, #3
 8009198:	e01a      	b.n	80091d0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d114      	bne.n	80091ce <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80091c2:	2181      	movs	r1, #129	; 0x81
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f002 fee0 	bl	800bf8a <USBD_LL_Transmit>

    ret = USBD_OK;
 80091ca:	2300      	movs	r3, #0
 80091cc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80091ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3710      	adds	r7, #16
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d101      	bne.n	80091f6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80091f2:	2303      	movs	r3, #3
 80091f4:	e016      	b.n	8009224 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	7c1b      	ldrb	r3, [r3, #16]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d109      	bne.n	8009212 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009204:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009208:	2101      	movs	r1, #1
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f002 fede 	bl	800bfcc <USBD_LL_PrepareReceive>
 8009210:	e007      	b.n	8009222 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009218:	2340      	movs	r3, #64	; 0x40
 800921a:	2101      	movs	r1, #1
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f002 fed5 	bl	800bfcc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009222:	2300      	movs	r3, #0
}
 8009224:	4618      	mov	r0, r3
 8009226:	3710      	adds	r7, #16
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b086      	sub	sp, #24
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	60b9      	str	r1, [r7, #8]
 8009236:	4613      	mov	r3, r2
 8009238:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d101      	bne.n	8009244 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009240:	2303      	movs	r3, #3
 8009242:	e01f      	b.n	8009284 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2200      	movs	r2, #0
 8009248:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2200      	movs	r2, #0
 8009250:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2200      	movs	r2, #0
 8009258:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d003      	beq.n	800926a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	68ba      	ldr	r2, [r7, #8]
 8009266:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2201      	movs	r2, #1
 800926e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	79fa      	ldrb	r2, [r7, #7]
 8009276:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f002 fd51 	bl	800bd20 <USBD_LL_Init>
 800927e:	4603      	mov	r3, r0
 8009280:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009282:	7dfb      	ldrb	r3, [r7, #23]
}
 8009284:	4618      	mov	r0, r3
 8009286:	3718      	adds	r7, #24
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009296:	2300      	movs	r3, #0
 8009298:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d101      	bne.n	80092a4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80092a0:	2303      	movs	r3, #3
 80092a2:	e016      	b.n	80092d2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	683a      	ldr	r2, [r7, #0]
 80092a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d00b      	beq.n	80092d0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c0:	f107 020e 	add.w	r2, r7, #14
 80092c4:	4610      	mov	r0, r2
 80092c6:	4798      	blx	r3
 80092c8:	4602      	mov	r2, r0
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80092d0:	2300      	movs	r3, #0
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3710      	adds	r7, #16
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}

080092da <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80092da:	b580      	push	{r7, lr}
 80092dc:	b082      	sub	sp, #8
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f002 fd68 	bl	800bdb8 <USBD_LL_Start>
 80092e8:	4603      	mov	r3, r0
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3708      	adds	r7, #8
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80092f2:	b480      	push	{r7}
 80092f4:	b083      	sub	sp, #12
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80092fa:	2300      	movs	r3, #0
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	370c      	adds	r7, #12
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	460b      	mov	r3, r1
 8009312:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009314:	2303      	movs	r3, #3
 8009316:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800931e:	2b00      	cmp	r3, #0
 8009320:	d009      	beq.n	8009336 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	78fa      	ldrb	r2, [r7, #3]
 800932c:	4611      	mov	r1, r2
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	4798      	blx	r3
 8009332:	4603      	mov	r3, r0
 8009334:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009336:	7bfb      	ldrb	r3, [r7, #15]
}
 8009338:	4618      	mov	r0, r3
 800933a:	3710      	adds	r7, #16
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	460b      	mov	r3, r1
 800934a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009352:	2b00      	cmp	r3, #0
 8009354:	d007      	beq.n	8009366 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	78fa      	ldrb	r2, [r7, #3]
 8009360:	4611      	mov	r1, r2
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	4798      	blx	r3
  }

  return USBD_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	3708      	adds	r7, #8
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009380:	6839      	ldr	r1, [r7, #0]
 8009382:	4618      	mov	r0, r3
 8009384:	f000 ff90 	bl	800a2a8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009396:	461a      	mov	r2, r3
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80093a4:	f003 031f 	and.w	r3, r3, #31
 80093a8:	2b02      	cmp	r3, #2
 80093aa:	d01a      	beq.n	80093e2 <USBD_LL_SetupStage+0x72>
 80093ac:	2b02      	cmp	r3, #2
 80093ae:	d822      	bhi.n	80093f6 <USBD_LL_SetupStage+0x86>
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d002      	beq.n	80093ba <USBD_LL_SetupStage+0x4a>
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d00a      	beq.n	80093ce <USBD_LL_SetupStage+0x5e>
 80093b8:	e01d      	b.n	80093f6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80093c0:	4619      	mov	r1, r3
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 fa62 	bl	800988c <USBD_StdDevReq>
 80093c8:	4603      	mov	r3, r0
 80093ca:	73fb      	strb	r3, [r7, #15]
      break;
 80093cc:	e020      	b.n	8009410 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80093d4:	4619      	mov	r1, r3
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 fac6 	bl	8009968 <USBD_StdItfReq>
 80093dc:	4603      	mov	r3, r0
 80093de:	73fb      	strb	r3, [r7, #15]
      break;
 80093e0:	e016      	b.n	8009410 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80093e8:	4619      	mov	r1, r3
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 fb05 	bl	80099fa <USBD_StdEPReq>
 80093f0:	4603      	mov	r3, r0
 80093f2:	73fb      	strb	r3, [r7, #15]
      break;
 80093f4:	e00c      	b.n	8009410 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80093fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009400:	b2db      	uxtb	r3, r3
 8009402:	4619      	mov	r1, r3
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f002 fd37 	bl	800be78 <USBD_LL_StallEP>
 800940a:	4603      	mov	r3, r0
 800940c:	73fb      	strb	r3, [r7, #15]
      break;
 800940e:	bf00      	nop
  }

  return ret;
 8009410:	7bfb      	ldrb	r3, [r7, #15]
}
 8009412:	4618      	mov	r0, r3
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}

0800941a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800941a:	b580      	push	{r7, lr}
 800941c:	b086      	sub	sp, #24
 800941e:	af00      	add	r7, sp, #0
 8009420:	60f8      	str	r0, [r7, #12]
 8009422:	460b      	mov	r3, r1
 8009424:	607a      	str	r2, [r7, #4]
 8009426:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009428:	7afb      	ldrb	r3, [r7, #11]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d138      	bne.n	80094a0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009434:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800943c:	2b03      	cmp	r3, #3
 800943e:	d14a      	bne.n	80094d6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	689a      	ldr	r2, [r3, #8]
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	429a      	cmp	r2, r3
 800944a:	d913      	bls.n	8009474 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	689a      	ldr	r2, [r3, #8]
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	1ad2      	subs	r2, r2, r3
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	68da      	ldr	r2, [r3, #12]
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	4293      	cmp	r3, r2
 8009464:	bf28      	it	cs
 8009466:	4613      	movcs	r3, r2
 8009468:	461a      	mov	r2, r3
 800946a:	6879      	ldr	r1, [r7, #4]
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f001 f80f 	bl	800a490 <USBD_CtlContinueRx>
 8009472:	e030      	b.n	80094d6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800947a:	b2db      	uxtb	r3, r3
 800947c:	2b03      	cmp	r3, #3
 800947e:	d10b      	bne.n	8009498 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d005      	beq.n	8009498 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009492:	691b      	ldr	r3, [r3, #16]
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009498:	68f8      	ldr	r0, [r7, #12]
 800949a:	f001 f80a 	bl	800a4b2 <USBD_CtlSendStatus>
 800949e:	e01a      	b.n	80094d6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	2b03      	cmp	r3, #3
 80094aa:	d114      	bne.n	80094d6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094b2:	699b      	ldr	r3, [r3, #24]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00e      	beq.n	80094d6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094be:	699b      	ldr	r3, [r3, #24]
 80094c0:	7afa      	ldrb	r2, [r7, #11]
 80094c2:	4611      	mov	r1, r2
 80094c4:	68f8      	ldr	r0, [r7, #12]
 80094c6:	4798      	blx	r3
 80094c8:	4603      	mov	r3, r0
 80094ca:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80094cc:	7dfb      	ldrb	r3, [r7, #23]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d001      	beq.n	80094d6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80094d2:	7dfb      	ldrb	r3, [r7, #23]
 80094d4:	e000      	b.n	80094d8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3718      	adds	r7, #24
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b086      	sub	sp, #24
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	460b      	mov	r3, r1
 80094ea:	607a      	str	r2, [r7, #4]
 80094ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80094ee:	7afb      	ldrb	r3, [r7, #11]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d16b      	bne.n	80095cc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	3314      	adds	r3, #20
 80094f8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009500:	2b02      	cmp	r3, #2
 8009502:	d156      	bne.n	80095b2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	689a      	ldr	r2, [r3, #8]
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	429a      	cmp	r2, r3
 800950e:	d914      	bls.n	800953a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	689a      	ldr	r2, [r3, #8]
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	1ad2      	subs	r2, r2, r3
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	461a      	mov	r2, r3
 8009524:	6879      	ldr	r1, [r7, #4]
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f000 ff84 	bl	800a434 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800952c:	2300      	movs	r3, #0
 800952e:	2200      	movs	r2, #0
 8009530:	2100      	movs	r1, #0
 8009532:	68f8      	ldr	r0, [r7, #12]
 8009534:	f002 fd4a 	bl	800bfcc <USBD_LL_PrepareReceive>
 8009538:	e03b      	b.n	80095b2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	68da      	ldr	r2, [r3, #12]
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	429a      	cmp	r2, r3
 8009544:	d11c      	bne.n	8009580 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	685a      	ldr	r2, [r3, #4]
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800954e:	429a      	cmp	r2, r3
 8009550:	d316      	bcc.n	8009580 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	685a      	ldr	r2, [r3, #4]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800955c:	429a      	cmp	r2, r3
 800955e:	d20f      	bcs.n	8009580 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009560:	2200      	movs	r2, #0
 8009562:	2100      	movs	r1, #0
 8009564:	68f8      	ldr	r0, [r7, #12]
 8009566:	f000 ff65 	bl	800a434 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2200      	movs	r2, #0
 800956e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009572:	2300      	movs	r3, #0
 8009574:	2200      	movs	r2, #0
 8009576:	2100      	movs	r1, #0
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f002 fd27 	bl	800bfcc <USBD_LL_PrepareReceive>
 800957e:	e018      	b.n	80095b2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009586:	b2db      	uxtb	r3, r3
 8009588:	2b03      	cmp	r3, #3
 800958a:	d10b      	bne.n	80095a4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d005      	beq.n	80095a4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	68f8      	ldr	r0, [r7, #12]
 80095a2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80095a4:	2180      	movs	r1, #128	; 0x80
 80095a6:	68f8      	ldr	r0, [r7, #12]
 80095a8:	f002 fc66 	bl	800be78 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f000 ff93 	bl	800a4d8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d122      	bne.n	8009602 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80095bc:	68f8      	ldr	r0, [r7, #12]
 80095be:	f7ff fe98 	bl	80092f2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2200      	movs	r2, #0
 80095c6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80095ca:	e01a      	b.n	8009602 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	2b03      	cmp	r3, #3
 80095d6:	d114      	bne.n	8009602 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095de:	695b      	ldr	r3, [r3, #20]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d00e      	beq.n	8009602 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095ea:	695b      	ldr	r3, [r3, #20]
 80095ec:	7afa      	ldrb	r2, [r7, #11]
 80095ee:	4611      	mov	r1, r2
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	4798      	blx	r3
 80095f4:	4603      	mov	r3, r0
 80095f6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80095f8:	7dfb      	ldrb	r3, [r7, #23]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d001      	beq.n	8009602 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80095fe:	7dfb      	ldrb	r3, [r7, #23]
 8009600:	e000      	b.n	8009604 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009602:	2300      	movs	r3, #0
}
 8009604:	4618      	mov	r0, r3
 8009606:	3718      	adds	r7, #24
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2201      	movs	r2, #1
 8009618:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2200      	movs	r2, #0
 8009628:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009638:	2b00      	cmp	r3, #0
 800963a:	d101      	bne.n	8009640 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800963c:	2303      	movs	r3, #3
 800963e:	e02f      	b.n	80096a0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00f      	beq.n	800966a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d009      	beq.n	800966a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	6852      	ldr	r2, [r2, #4]
 8009662:	b2d2      	uxtb	r2, r2
 8009664:	4611      	mov	r1, r2
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800966a:	2340      	movs	r3, #64	; 0x40
 800966c:	2200      	movs	r2, #0
 800966e:	2100      	movs	r1, #0
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f002 fbbc 	bl	800bdee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2201      	movs	r2, #1
 800967a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2240      	movs	r2, #64	; 0x40
 8009682:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009686:	2340      	movs	r3, #64	; 0x40
 8009688:	2200      	movs	r2, #0
 800968a:	2180      	movs	r1, #128	; 0x80
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f002 fbae 	bl	800bdee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2201      	movs	r2, #1
 8009696:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2240      	movs	r2, #64	; 0x40
 800969c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800969e:	2300      	movs	r3, #0
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3708      	adds	r7, #8
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	460b      	mov	r3, r1
 80096b2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	78fa      	ldrb	r2, [r7, #3]
 80096b8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096d6:	b2da      	uxtb	r2, r3
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2204      	movs	r2, #4
 80096e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80096e6:	2300      	movs	r3, #0
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009702:	b2db      	uxtb	r3, r3
 8009704:	2b04      	cmp	r3, #4
 8009706:	d106      	bne.n	8009716 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800970e:	b2da      	uxtb	r2, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009732:	2b00      	cmp	r3, #0
 8009734:	d101      	bne.n	800973a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009736:	2303      	movs	r3, #3
 8009738:	e012      	b.n	8009760 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009740:	b2db      	uxtb	r3, r3
 8009742:	2b03      	cmp	r3, #3
 8009744:	d10b      	bne.n	800975e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800974c:	69db      	ldr	r3, [r3, #28]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d005      	beq.n	800975e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009758:	69db      	ldr	r3, [r3, #28]
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800975e:	2300      	movs	r3, #0
}
 8009760:	4618      	mov	r0, r3
 8009762:	3708      	adds	r7, #8
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	460b      	mov	r3, r1
 8009772:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800977a:	2b00      	cmp	r3, #0
 800977c:	d101      	bne.n	8009782 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800977e:	2303      	movs	r3, #3
 8009780:	e014      	b.n	80097ac <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009788:	b2db      	uxtb	r3, r3
 800978a:	2b03      	cmp	r3, #3
 800978c:	d10d      	bne.n	80097aa <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009794:	6a1b      	ldr	r3, [r3, #32]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d007      	beq.n	80097aa <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097a0:	6a1b      	ldr	r3, [r3, #32]
 80097a2:	78fa      	ldrb	r2, [r7, #3]
 80097a4:	4611      	mov	r1, r2
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	460b      	mov	r3, r1
 80097be:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d101      	bne.n	80097ce <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80097ca:	2303      	movs	r3, #3
 80097cc:	e014      	b.n	80097f8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	2b03      	cmp	r3, #3
 80097d8:	d10d      	bne.n	80097f6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d007      	beq.n	80097f6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ee:	78fa      	ldrb	r2, [r7, #3]
 80097f0:	4611      	mov	r1, r2
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3708      	adds	r7, #8
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	370c      	adds	r7, #12
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr

08009816 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009816:	b580      	push	{r7, lr}
 8009818:	b082      	sub	sp, #8
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2201      	movs	r2, #1
 8009822:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800982c:	2b00      	cmp	r3, #0
 800982e:	d009      	beq.n	8009844 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	6852      	ldr	r2, [r2, #4]
 800983c:	b2d2      	uxtb	r2, r2
 800983e:	4611      	mov	r1, r2
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	4798      	blx	r3
  }

  return USBD_OK;
 8009844:	2300      	movs	r3, #0
}
 8009846:	4618      	mov	r0, r3
 8009848:	3708      	adds	r7, #8
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800984e:	b480      	push	{r7}
 8009850:	b087      	sub	sp, #28
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	3301      	adds	r3, #1
 8009864:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800986c:	8a3b      	ldrh	r3, [r7, #16]
 800986e:	021b      	lsls	r3, r3, #8
 8009870:	b21a      	sxth	r2, r3
 8009872:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009876:	4313      	orrs	r3, r2
 8009878:	b21b      	sxth	r3, r3
 800987a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800987c:	89fb      	ldrh	r3, [r7, #14]
}
 800987e:	4618      	mov	r0, r3
 8009880:	371c      	adds	r7, #28
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr
	...

0800988c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009896:	2300      	movs	r3, #0
 8009898:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098a2:	2b40      	cmp	r3, #64	; 0x40
 80098a4:	d005      	beq.n	80098b2 <USBD_StdDevReq+0x26>
 80098a6:	2b40      	cmp	r3, #64	; 0x40
 80098a8:	d853      	bhi.n	8009952 <USBD_StdDevReq+0xc6>
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00b      	beq.n	80098c6 <USBD_StdDevReq+0x3a>
 80098ae:	2b20      	cmp	r3, #32
 80098b0:	d14f      	bne.n	8009952 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098b8:	689b      	ldr	r3, [r3, #8]
 80098ba:	6839      	ldr	r1, [r7, #0]
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	4798      	blx	r3
 80098c0:	4603      	mov	r3, r0
 80098c2:	73fb      	strb	r3, [r7, #15]
      break;
 80098c4:	e04a      	b.n	800995c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	785b      	ldrb	r3, [r3, #1]
 80098ca:	2b09      	cmp	r3, #9
 80098cc:	d83b      	bhi.n	8009946 <USBD_StdDevReq+0xba>
 80098ce:	a201      	add	r2, pc, #4	; (adr r2, 80098d4 <USBD_StdDevReq+0x48>)
 80098d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d4:	08009929 	.word	0x08009929
 80098d8:	0800993d 	.word	0x0800993d
 80098dc:	08009947 	.word	0x08009947
 80098e0:	08009933 	.word	0x08009933
 80098e4:	08009947 	.word	0x08009947
 80098e8:	08009907 	.word	0x08009907
 80098ec:	080098fd 	.word	0x080098fd
 80098f0:	08009947 	.word	0x08009947
 80098f4:	0800991f 	.word	0x0800991f
 80098f8:	08009911 	.word	0x08009911
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80098fc:	6839      	ldr	r1, [r7, #0]
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 f9de 	bl	8009cc0 <USBD_GetDescriptor>
          break;
 8009904:	e024      	b.n	8009950 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009906:	6839      	ldr	r1, [r7, #0]
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 fb43 	bl	8009f94 <USBD_SetAddress>
          break;
 800990e:	e01f      	b.n	8009950 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009910:	6839      	ldr	r1, [r7, #0]
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 fb82 	bl	800a01c <USBD_SetConfig>
 8009918:	4603      	mov	r3, r0
 800991a:	73fb      	strb	r3, [r7, #15]
          break;
 800991c:	e018      	b.n	8009950 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800991e:	6839      	ldr	r1, [r7, #0]
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 fc21 	bl	800a168 <USBD_GetConfig>
          break;
 8009926:	e013      	b.n	8009950 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009928:	6839      	ldr	r1, [r7, #0]
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 fc52 	bl	800a1d4 <USBD_GetStatus>
          break;
 8009930:	e00e      	b.n	8009950 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009932:	6839      	ldr	r1, [r7, #0]
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 fc81 	bl	800a23c <USBD_SetFeature>
          break;
 800993a:	e009      	b.n	8009950 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800993c:	6839      	ldr	r1, [r7, #0]
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 fc90 	bl	800a264 <USBD_ClrFeature>
          break;
 8009944:	e004      	b.n	8009950 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009946:	6839      	ldr	r1, [r7, #0]
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 fce7 	bl	800a31c <USBD_CtlError>
          break;
 800994e:	bf00      	nop
      }
      break;
 8009950:	e004      	b.n	800995c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009952:	6839      	ldr	r1, [r7, #0]
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 fce1 	bl	800a31c <USBD_CtlError>
      break;
 800995a:	bf00      	nop
  }

  return ret;
 800995c:	7bfb      	ldrb	r3, [r7, #15]
}
 800995e:	4618      	mov	r0, r3
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop

08009968 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009972:	2300      	movs	r3, #0
 8009974:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800997e:	2b40      	cmp	r3, #64	; 0x40
 8009980:	d005      	beq.n	800998e <USBD_StdItfReq+0x26>
 8009982:	2b40      	cmp	r3, #64	; 0x40
 8009984:	d82f      	bhi.n	80099e6 <USBD_StdItfReq+0x7e>
 8009986:	2b00      	cmp	r3, #0
 8009988:	d001      	beq.n	800998e <USBD_StdItfReq+0x26>
 800998a:	2b20      	cmp	r3, #32
 800998c:	d12b      	bne.n	80099e6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009994:	b2db      	uxtb	r3, r3
 8009996:	3b01      	subs	r3, #1
 8009998:	2b02      	cmp	r3, #2
 800999a:	d81d      	bhi.n	80099d8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	889b      	ldrh	r3, [r3, #4]
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d813      	bhi.n	80099ce <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099ac:	689b      	ldr	r3, [r3, #8]
 80099ae:	6839      	ldr	r1, [r7, #0]
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	4798      	blx	r3
 80099b4:	4603      	mov	r3, r0
 80099b6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	88db      	ldrh	r3, [r3, #6]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d110      	bne.n	80099e2 <USBD_StdItfReq+0x7a>
 80099c0:	7bfb      	ldrb	r3, [r7, #15]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d10d      	bne.n	80099e2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 fd73 	bl	800a4b2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80099cc:	e009      	b.n	80099e2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80099ce:	6839      	ldr	r1, [r7, #0]
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 fca3 	bl	800a31c <USBD_CtlError>
          break;
 80099d6:	e004      	b.n	80099e2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80099d8:	6839      	ldr	r1, [r7, #0]
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 fc9e 	bl	800a31c <USBD_CtlError>
          break;
 80099e0:	e000      	b.n	80099e4 <USBD_StdItfReq+0x7c>
          break;
 80099e2:	bf00      	nop
      }
      break;
 80099e4:	e004      	b.n	80099f0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80099e6:	6839      	ldr	r1, [r7, #0]
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 fc97 	bl	800a31c <USBD_CtlError>
      break;
 80099ee:	bf00      	nop
  }

  return ret;
 80099f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b084      	sub	sp, #16
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
 8009a02:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a04:	2300      	movs	r3, #0
 8009a06:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	889b      	ldrh	r3, [r3, #4]
 8009a0c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a16:	2b40      	cmp	r3, #64	; 0x40
 8009a18:	d007      	beq.n	8009a2a <USBD_StdEPReq+0x30>
 8009a1a:	2b40      	cmp	r3, #64	; 0x40
 8009a1c:	f200 8145 	bhi.w	8009caa <USBD_StdEPReq+0x2b0>
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d00c      	beq.n	8009a3e <USBD_StdEPReq+0x44>
 8009a24:	2b20      	cmp	r3, #32
 8009a26:	f040 8140 	bne.w	8009caa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	6839      	ldr	r1, [r7, #0]
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	4798      	blx	r3
 8009a38:	4603      	mov	r3, r0
 8009a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8009a3c:	e13a      	b.n	8009cb4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	785b      	ldrb	r3, [r3, #1]
 8009a42:	2b03      	cmp	r3, #3
 8009a44:	d007      	beq.n	8009a56 <USBD_StdEPReq+0x5c>
 8009a46:	2b03      	cmp	r3, #3
 8009a48:	f300 8129 	bgt.w	8009c9e <USBD_StdEPReq+0x2a4>
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d07f      	beq.n	8009b50 <USBD_StdEPReq+0x156>
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d03c      	beq.n	8009ace <USBD_StdEPReq+0xd4>
 8009a54:	e123      	b.n	8009c9e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	2b02      	cmp	r3, #2
 8009a60:	d002      	beq.n	8009a68 <USBD_StdEPReq+0x6e>
 8009a62:	2b03      	cmp	r3, #3
 8009a64:	d016      	beq.n	8009a94 <USBD_StdEPReq+0x9a>
 8009a66:	e02c      	b.n	8009ac2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a68:	7bbb      	ldrb	r3, [r7, #14]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d00d      	beq.n	8009a8a <USBD_StdEPReq+0x90>
 8009a6e:	7bbb      	ldrb	r3, [r7, #14]
 8009a70:	2b80      	cmp	r3, #128	; 0x80
 8009a72:	d00a      	beq.n	8009a8a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a74:	7bbb      	ldrb	r3, [r7, #14]
 8009a76:	4619      	mov	r1, r3
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f002 f9fd 	bl	800be78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a7e:	2180      	movs	r1, #128	; 0x80
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f002 f9f9 	bl	800be78 <USBD_LL_StallEP>
 8009a86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a88:	e020      	b.n	8009acc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009a8a:	6839      	ldr	r1, [r7, #0]
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 fc45 	bl	800a31c <USBD_CtlError>
              break;
 8009a92:	e01b      	b.n	8009acc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	885b      	ldrh	r3, [r3, #2]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d10e      	bne.n	8009aba <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009a9c:	7bbb      	ldrb	r3, [r7, #14]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00b      	beq.n	8009aba <USBD_StdEPReq+0xc0>
 8009aa2:	7bbb      	ldrb	r3, [r7, #14]
 8009aa4:	2b80      	cmp	r3, #128	; 0x80
 8009aa6:	d008      	beq.n	8009aba <USBD_StdEPReq+0xc0>
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	88db      	ldrh	r3, [r3, #6]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d104      	bne.n	8009aba <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ab0:	7bbb      	ldrb	r3, [r7, #14]
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f002 f9df 	bl	800be78 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 fcf9 	bl	800a4b2 <USBD_CtlSendStatus>

              break;
 8009ac0:	e004      	b.n	8009acc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009ac2:	6839      	ldr	r1, [r7, #0]
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 fc29 	bl	800a31c <USBD_CtlError>
              break;
 8009aca:	bf00      	nop
          }
          break;
 8009acc:	e0ec      	b.n	8009ca8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	2b02      	cmp	r3, #2
 8009ad8:	d002      	beq.n	8009ae0 <USBD_StdEPReq+0xe6>
 8009ada:	2b03      	cmp	r3, #3
 8009adc:	d016      	beq.n	8009b0c <USBD_StdEPReq+0x112>
 8009ade:	e030      	b.n	8009b42 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ae0:	7bbb      	ldrb	r3, [r7, #14]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d00d      	beq.n	8009b02 <USBD_StdEPReq+0x108>
 8009ae6:	7bbb      	ldrb	r3, [r7, #14]
 8009ae8:	2b80      	cmp	r3, #128	; 0x80
 8009aea:	d00a      	beq.n	8009b02 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009aec:	7bbb      	ldrb	r3, [r7, #14]
 8009aee:	4619      	mov	r1, r3
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f002 f9c1 	bl	800be78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009af6:	2180      	movs	r1, #128	; 0x80
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f002 f9bd 	bl	800be78 <USBD_LL_StallEP>
 8009afe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b00:	e025      	b.n	8009b4e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009b02:	6839      	ldr	r1, [r7, #0]
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 fc09 	bl	800a31c <USBD_CtlError>
              break;
 8009b0a:	e020      	b.n	8009b4e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	885b      	ldrh	r3, [r3, #2]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d11b      	bne.n	8009b4c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009b14:	7bbb      	ldrb	r3, [r7, #14]
 8009b16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d004      	beq.n	8009b28 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009b1e:	7bbb      	ldrb	r3, [r7, #14]
 8009b20:	4619      	mov	r1, r3
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f002 f9c7 	bl	800beb6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 fcc2 	bl	800a4b2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	6839      	ldr	r1, [r7, #0]
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	4798      	blx	r3
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009b40:	e004      	b.n	8009b4c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009b42:	6839      	ldr	r1, [r7, #0]
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 fbe9 	bl	800a31c <USBD_CtlError>
              break;
 8009b4a:	e000      	b.n	8009b4e <USBD_StdEPReq+0x154>
              break;
 8009b4c:	bf00      	nop
          }
          break;
 8009b4e:	e0ab      	b.n	8009ca8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	2b02      	cmp	r3, #2
 8009b5a:	d002      	beq.n	8009b62 <USBD_StdEPReq+0x168>
 8009b5c:	2b03      	cmp	r3, #3
 8009b5e:	d032      	beq.n	8009bc6 <USBD_StdEPReq+0x1cc>
 8009b60:	e097      	b.n	8009c92 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b62:	7bbb      	ldrb	r3, [r7, #14]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d007      	beq.n	8009b78 <USBD_StdEPReq+0x17e>
 8009b68:	7bbb      	ldrb	r3, [r7, #14]
 8009b6a:	2b80      	cmp	r3, #128	; 0x80
 8009b6c:	d004      	beq.n	8009b78 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009b6e:	6839      	ldr	r1, [r7, #0]
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 fbd3 	bl	800a31c <USBD_CtlError>
                break;
 8009b76:	e091      	b.n	8009c9c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	da0b      	bge.n	8009b98 <USBD_StdEPReq+0x19e>
 8009b80:	7bbb      	ldrb	r3, [r7, #14]
 8009b82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b86:	4613      	mov	r3, r2
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	4413      	add	r3, r2
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	3310      	adds	r3, #16
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	4413      	add	r3, r2
 8009b94:	3304      	adds	r3, #4
 8009b96:	e00b      	b.n	8009bb0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b98:	7bbb      	ldrb	r3, [r7, #14]
 8009b9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	4413      	add	r3, r2
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	4413      	add	r3, r2
 8009bae:	3304      	adds	r3, #4
 8009bb0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	2202      	movs	r2, #2
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 fc1d 	bl	800a3fe <USBD_CtlSendData>
              break;
 8009bc4:	e06a      	b.n	8009c9c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009bc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	da11      	bge.n	8009bf2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009bce:	7bbb      	ldrb	r3, [r7, #14]
 8009bd0:	f003 020f 	and.w	r2, r3, #15
 8009bd4:	6879      	ldr	r1, [r7, #4]
 8009bd6:	4613      	mov	r3, r2
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	4413      	add	r3, r2
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	440b      	add	r3, r1
 8009be0:	3324      	adds	r3, #36	; 0x24
 8009be2:	881b      	ldrh	r3, [r3, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d117      	bne.n	8009c18 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009be8:	6839      	ldr	r1, [r7, #0]
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 fb96 	bl	800a31c <USBD_CtlError>
                  break;
 8009bf0:	e054      	b.n	8009c9c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009bf2:	7bbb      	ldrb	r3, [r7, #14]
 8009bf4:	f003 020f 	and.w	r2, r3, #15
 8009bf8:	6879      	ldr	r1, [r7, #4]
 8009bfa:	4613      	mov	r3, r2
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	4413      	add	r3, r2
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	440b      	add	r3, r1
 8009c04:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009c08:	881b      	ldrh	r3, [r3, #0]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d104      	bne.n	8009c18 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009c0e:	6839      	ldr	r1, [r7, #0]
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 fb83 	bl	800a31c <USBD_CtlError>
                  break;
 8009c16:	e041      	b.n	8009c9c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	da0b      	bge.n	8009c38 <USBD_StdEPReq+0x23e>
 8009c20:	7bbb      	ldrb	r3, [r7, #14]
 8009c22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c26:	4613      	mov	r3, r2
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	4413      	add	r3, r2
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	3310      	adds	r3, #16
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	4413      	add	r3, r2
 8009c34:	3304      	adds	r3, #4
 8009c36:	e00b      	b.n	8009c50 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c38:	7bbb      	ldrb	r3, [r7, #14]
 8009c3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c3e:	4613      	mov	r3, r2
 8009c40:	009b      	lsls	r3, r3, #2
 8009c42:	4413      	add	r3, r2
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	4413      	add	r3, r2
 8009c4e:	3304      	adds	r3, #4
 8009c50:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009c52:	7bbb      	ldrb	r3, [r7, #14]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d002      	beq.n	8009c5e <USBD_StdEPReq+0x264>
 8009c58:	7bbb      	ldrb	r3, [r7, #14]
 8009c5a:	2b80      	cmp	r3, #128	; 0x80
 8009c5c:	d103      	bne.n	8009c66 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	2200      	movs	r2, #0
 8009c62:	601a      	str	r2, [r3, #0]
 8009c64:	e00e      	b.n	8009c84 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009c66:	7bbb      	ldrb	r3, [r7, #14]
 8009c68:	4619      	mov	r1, r3
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f002 f942 	bl	800bef4 <USBD_LL_IsStallEP>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d003      	beq.n	8009c7e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	2201      	movs	r2, #1
 8009c7a:	601a      	str	r2, [r3, #0]
 8009c7c:	e002      	b.n	8009c84 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	2200      	movs	r2, #0
 8009c82:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	2202      	movs	r2, #2
 8009c88:	4619      	mov	r1, r3
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 fbb7 	bl	800a3fe <USBD_CtlSendData>
              break;
 8009c90:	e004      	b.n	8009c9c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009c92:	6839      	ldr	r1, [r7, #0]
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 fb41 	bl	800a31c <USBD_CtlError>
              break;
 8009c9a:	bf00      	nop
          }
          break;
 8009c9c:	e004      	b.n	8009ca8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009c9e:	6839      	ldr	r1, [r7, #0]
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 fb3b 	bl	800a31c <USBD_CtlError>
          break;
 8009ca6:	bf00      	nop
      }
      break;
 8009ca8:	e004      	b.n	8009cb4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009caa:	6839      	ldr	r1, [r7, #0]
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 fb35 	bl	800a31c <USBD_CtlError>
      break;
 8009cb2:	bf00      	nop
  }

  return ret;
 8009cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3710      	adds	r7, #16
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
	...

08009cc0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	885b      	ldrh	r3, [r3, #2]
 8009cda:	0a1b      	lsrs	r3, r3, #8
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	2b06      	cmp	r3, #6
 8009ce2:	f200 8128 	bhi.w	8009f36 <USBD_GetDescriptor+0x276>
 8009ce6:	a201      	add	r2, pc, #4	; (adr r2, 8009cec <USBD_GetDescriptor+0x2c>)
 8009ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cec:	08009d09 	.word	0x08009d09
 8009cf0:	08009d21 	.word	0x08009d21
 8009cf4:	08009d61 	.word	0x08009d61
 8009cf8:	08009f37 	.word	0x08009f37
 8009cfc:	08009f37 	.word	0x08009f37
 8009d00:	08009ed7 	.word	0x08009ed7
 8009d04:	08009f03 	.word	0x08009f03
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	7c12      	ldrb	r2, [r2, #16]
 8009d14:	f107 0108 	add.w	r1, r7, #8
 8009d18:	4610      	mov	r0, r2
 8009d1a:	4798      	blx	r3
 8009d1c:	60f8      	str	r0, [r7, #12]
      break;
 8009d1e:	e112      	b.n	8009f46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	7c1b      	ldrb	r3, [r3, #16]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d10d      	bne.n	8009d44 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d30:	f107 0208 	add.w	r2, r7, #8
 8009d34:	4610      	mov	r0, r2
 8009d36:	4798      	blx	r3
 8009d38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	2202      	movs	r2, #2
 8009d40:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009d42:	e100      	b.n	8009f46 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d4c:	f107 0208 	add.w	r2, r7, #8
 8009d50:	4610      	mov	r0, r2
 8009d52:	4798      	blx	r3
 8009d54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	2202      	movs	r2, #2
 8009d5c:	701a      	strb	r2, [r3, #0]
      break;
 8009d5e:	e0f2      	b.n	8009f46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	885b      	ldrh	r3, [r3, #2]
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	2b05      	cmp	r3, #5
 8009d68:	f200 80ac 	bhi.w	8009ec4 <USBD_GetDescriptor+0x204>
 8009d6c:	a201      	add	r2, pc, #4	; (adr r2, 8009d74 <USBD_GetDescriptor+0xb4>)
 8009d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d72:	bf00      	nop
 8009d74:	08009d8d 	.word	0x08009d8d
 8009d78:	08009dc1 	.word	0x08009dc1
 8009d7c:	08009df5 	.word	0x08009df5
 8009d80:	08009e29 	.word	0x08009e29
 8009d84:	08009e5d 	.word	0x08009e5d
 8009d88:	08009e91 	.word	0x08009e91
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d00b      	beq.n	8009db0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	7c12      	ldrb	r2, [r2, #16]
 8009da4:	f107 0108 	add.w	r1, r7, #8
 8009da8:	4610      	mov	r0, r2
 8009daa:	4798      	blx	r3
 8009dac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dae:	e091      	b.n	8009ed4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009db0:	6839      	ldr	r1, [r7, #0]
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 fab2 	bl	800a31c <USBD_CtlError>
            err++;
 8009db8:	7afb      	ldrb	r3, [r7, #11]
 8009dba:	3301      	adds	r3, #1
 8009dbc:	72fb      	strb	r3, [r7, #11]
          break;
 8009dbe:	e089      	b.n	8009ed4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d00b      	beq.n	8009de4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	7c12      	ldrb	r2, [r2, #16]
 8009dd8:	f107 0108 	add.w	r1, r7, #8
 8009ddc:	4610      	mov	r0, r2
 8009dde:	4798      	blx	r3
 8009de0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009de2:	e077      	b.n	8009ed4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009de4:	6839      	ldr	r1, [r7, #0]
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 fa98 	bl	800a31c <USBD_CtlError>
            err++;
 8009dec:	7afb      	ldrb	r3, [r7, #11]
 8009dee:	3301      	adds	r3, #1
 8009df0:	72fb      	strb	r3, [r7, #11]
          break;
 8009df2:	e06f      	b.n	8009ed4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d00b      	beq.n	8009e18 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	7c12      	ldrb	r2, [r2, #16]
 8009e0c:	f107 0108 	add.w	r1, r7, #8
 8009e10:	4610      	mov	r0, r2
 8009e12:	4798      	blx	r3
 8009e14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e16:	e05d      	b.n	8009ed4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e18:	6839      	ldr	r1, [r7, #0]
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 fa7e 	bl	800a31c <USBD_CtlError>
            err++;
 8009e20:	7afb      	ldrb	r3, [r7, #11]
 8009e22:	3301      	adds	r3, #1
 8009e24:	72fb      	strb	r3, [r7, #11]
          break;
 8009e26:	e055      	b.n	8009ed4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e2e:	691b      	ldr	r3, [r3, #16]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d00b      	beq.n	8009e4c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e3a:	691b      	ldr	r3, [r3, #16]
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	7c12      	ldrb	r2, [r2, #16]
 8009e40:	f107 0108 	add.w	r1, r7, #8
 8009e44:	4610      	mov	r0, r2
 8009e46:	4798      	blx	r3
 8009e48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e4a:	e043      	b.n	8009ed4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e4c:	6839      	ldr	r1, [r7, #0]
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 fa64 	bl	800a31c <USBD_CtlError>
            err++;
 8009e54:	7afb      	ldrb	r3, [r7, #11]
 8009e56:	3301      	adds	r3, #1
 8009e58:	72fb      	strb	r3, [r7, #11]
          break;
 8009e5a:	e03b      	b.n	8009ed4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e62:	695b      	ldr	r3, [r3, #20]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d00b      	beq.n	8009e80 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e6e:	695b      	ldr	r3, [r3, #20]
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	7c12      	ldrb	r2, [r2, #16]
 8009e74:	f107 0108 	add.w	r1, r7, #8
 8009e78:	4610      	mov	r0, r2
 8009e7a:	4798      	blx	r3
 8009e7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e7e:	e029      	b.n	8009ed4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e80:	6839      	ldr	r1, [r7, #0]
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 fa4a 	bl	800a31c <USBD_CtlError>
            err++;
 8009e88:	7afb      	ldrb	r3, [r7, #11]
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e8e:	e021      	b.n	8009ed4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e96:	699b      	ldr	r3, [r3, #24]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d00b      	beq.n	8009eb4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ea2:	699b      	ldr	r3, [r3, #24]
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	7c12      	ldrb	r2, [r2, #16]
 8009ea8:	f107 0108 	add.w	r1, r7, #8
 8009eac:	4610      	mov	r0, r2
 8009eae:	4798      	blx	r3
 8009eb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009eb2:	e00f      	b.n	8009ed4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009eb4:	6839      	ldr	r1, [r7, #0]
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 fa30 	bl	800a31c <USBD_CtlError>
            err++;
 8009ebc:	7afb      	ldrb	r3, [r7, #11]
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ec2:	e007      	b.n	8009ed4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009ec4:	6839      	ldr	r1, [r7, #0]
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 fa28 	bl	800a31c <USBD_CtlError>
          err++;
 8009ecc:	7afb      	ldrb	r3, [r7, #11]
 8009ece:	3301      	adds	r3, #1
 8009ed0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009ed2:	bf00      	nop
      }
      break;
 8009ed4:	e037      	b.n	8009f46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	7c1b      	ldrb	r3, [r3, #16]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d109      	bne.n	8009ef2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ee6:	f107 0208 	add.w	r2, r7, #8
 8009eea:	4610      	mov	r0, r2
 8009eec:	4798      	blx	r3
 8009eee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ef0:	e029      	b.n	8009f46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009ef2:	6839      	ldr	r1, [r7, #0]
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 fa11 	bl	800a31c <USBD_CtlError>
        err++;
 8009efa:	7afb      	ldrb	r3, [r7, #11]
 8009efc:	3301      	adds	r3, #1
 8009efe:	72fb      	strb	r3, [r7, #11]
      break;
 8009f00:	e021      	b.n	8009f46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	7c1b      	ldrb	r3, [r3, #16]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d10d      	bne.n	8009f26 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f12:	f107 0208 	add.w	r2, r7, #8
 8009f16:	4610      	mov	r0, r2
 8009f18:	4798      	blx	r3
 8009f1a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	2207      	movs	r2, #7
 8009f22:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f24:	e00f      	b.n	8009f46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f26:	6839      	ldr	r1, [r7, #0]
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 f9f7 	bl	800a31c <USBD_CtlError>
        err++;
 8009f2e:	7afb      	ldrb	r3, [r7, #11]
 8009f30:	3301      	adds	r3, #1
 8009f32:	72fb      	strb	r3, [r7, #11]
      break;
 8009f34:	e007      	b.n	8009f46 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009f36:	6839      	ldr	r1, [r7, #0]
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 f9ef 	bl	800a31c <USBD_CtlError>
      err++;
 8009f3e:	7afb      	ldrb	r3, [r7, #11]
 8009f40:	3301      	adds	r3, #1
 8009f42:	72fb      	strb	r3, [r7, #11]
      break;
 8009f44:	bf00      	nop
  }

  if (err != 0U)
 8009f46:	7afb      	ldrb	r3, [r7, #11]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d11e      	bne.n	8009f8a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	88db      	ldrh	r3, [r3, #6]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d016      	beq.n	8009f82 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009f54:	893b      	ldrh	r3, [r7, #8]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d00e      	beq.n	8009f78 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	88da      	ldrh	r2, [r3, #6]
 8009f5e:	893b      	ldrh	r3, [r7, #8]
 8009f60:	4293      	cmp	r3, r2
 8009f62:	bf28      	it	cs
 8009f64:	4613      	movcs	r3, r2
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009f6a:	893b      	ldrh	r3, [r7, #8]
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	68f9      	ldr	r1, [r7, #12]
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 fa44 	bl	800a3fe <USBD_CtlSendData>
 8009f76:	e009      	b.n	8009f8c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009f78:	6839      	ldr	r1, [r7, #0]
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 f9ce 	bl	800a31c <USBD_CtlError>
 8009f80:	e004      	b.n	8009f8c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 fa95 	bl	800a4b2 <USBD_CtlSendStatus>
 8009f88:	e000      	b.n	8009f8c <USBD_GetDescriptor+0x2cc>
    return;
 8009f8a:	bf00      	nop
  }
}
 8009f8c:	3710      	adds	r7, #16
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
 8009f92:	bf00      	nop

08009f94 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	889b      	ldrh	r3, [r3, #4]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d131      	bne.n	800a00a <USBD_SetAddress+0x76>
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	88db      	ldrh	r3, [r3, #6]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d12d      	bne.n	800a00a <USBD_SetAddress+0x76>
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	885b      	ldrh	r3, [r3, #2]
 8009fb2:	2b7f      	cmp	r3, #127	; 0x7f
 8009fb4:	d829      	bhi.n	800a00a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	885b      	ldrh	r3, [r3, #2]
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fc0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	2b03      	cmp	r3, #3
 8009fcc:	d104      	bne.n	8009fd8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009fce:	6839      	ldr	r1, [r7, #0]
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 f9a3 	bl	800a31c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fd6:	e01d      	b.n	800a014 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	7bfa      	ldrb	r2, [r7, #15]
 8009fdc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009fe0:	7bfb      	ldrb	r3, [r7, #15]
 8009fe2:	4619      	mov	r1, r3
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f001 ffb1 	bl	800bf4c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 fa61 	bl	800a4b2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009ff0:	7bfb      	ldrb	r3, [r7, #15]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d004      	beq.n	800a000 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2202      	movs	r2, #2
 8009ffa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ffe:	e009      	b.n	800a014 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2201      	movs	r2, #1
 800a004:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a008:	e004      	b.n	800a014 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a00a:	6839      	ldr	r1, [r7, #0]
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 f985 	bl	800a31c <USBD_CtlError>
  }
}
 800a012:	bf00      	nop
 800a014:	bf00      	nop
 800a016:	3710      	adds	r7, #16
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a026:	2300      	movs	r3, #0
 800a028:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	885b      	ldrh	r3, [r3, #2]
 800a02e:	b2da      	uxtb	r2, r3
 800a030:	4b4c      	ldr	r3, [pc, #304]	; (800a164 <USBD_SetConfig+0x148>)
 800a032:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a034:	4b4b      	ldr	r3, [pc, #300]	; (800a164 <USBD_SetConfig+0x148>)
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d905      	bls.n	800a048 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a03c:	6839      	ldr	r1, [r7, #0]
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 f96c 	bl	800a31c <USBD_CtlError>
    return USBD_FAIL;
 800a044:	2303      	movs	r3, #3
 800a046:	e088      	b.n	800a15a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	2b02      	cmp	r3, #2
 800a052:	d002      	beq.n	800a05a <USBD_SetConfig+0x3e>
 800a054:	2b03      	cmp	r3, #3
 800a056:	d025      	beq.n	800a0a4 <USBD_SetConfig+0x88>
 800a058:	e071      	b.n	800a13e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a05a:	4b42      	ldr	r3, [pc, #264]	; (800a164 <USBD_SetConfig+0x148>)
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d01c      	beq.n	800a09c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a062:	4b40      	ldr	r3, [pc, #256]	; (800a164 <USBD_SetConfig+0x148>)
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	461a      	mov	r2, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a06c:	4b3d      	ldr	r3, [pc, #244]	; (800a164 <USBD_SetConfig+0x148>)
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	4619      	mov	r1, r3
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f7ff f948 	bl	8009308 <USBD_SetClassConfig>
 800a078:	4603      	mov	r3, r0
 800a07a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a07c:	7bfb      	ldrb	r3, [r7, #15]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d004      	beq.n	800a08c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a082:	6839      	ldr	r1, [r7, #0]
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 f949 	bl	800a31c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a08a:	e065      	b.n	800a158 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 fa10 	bl	800a4b2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2203      	movs	r2, #3
 800a096:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a09a:	e05d      	b.n	800a158 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 fa08 	bl	800a4b2 <USBD_CtlSendStatus>
      break;
 800a0a2:	e059      	b.n	800a158 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a0a4:	4b2f      	ldr	r3, [pc, #188]	; (800a164 <USBD_SetConfig+0x148>)
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d112      	bne.n	800a0d2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2202      	movs	r2, #2
 800a0b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a0b4:	4b2b      	ldr	r3, [pc, #172]	; (800a164 <USBD_SetConfig+0x148>)
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a0be:	4b29      	ldr	r3, [pc, #164]	; (800a164 <USBD_SetConfig+0x148>)
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f7ff f93b 	bl	8009340 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 f9f1 	bl	800a4b2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a0d0:	e042      	b.n	800a158 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a0d2:	4b24      	ldr	r3, [pc, #144]	; (800a164 <USBD_SetConfig+0x148>)
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d02a      	beq.n	800a136 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f7ff f929 	bl	8009340 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a0ee:	4b1d      	ldr	r3, [pc, #116]	; (800a164 <USBD_SetConfig+0x148>)
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a0f8:	4b1a      	ldr	r3, [pc, #104]	; (800a164 <USBD_SetConfig+0x148>)
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f7ff f902 	bl	8009308 <USBD_SetClassConfig>
 800a104:	4603      	mov	r3, r0
 800a106:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a108:	7bfb      	ldrb	r3, [r7, #15]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d00f      	beq.n	800a12e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a10e:	6839      	ldr	r1, [r7, #0]
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 f903 	bl	800a31c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	b2db      	uxtb	r3, r3
 800a11c:	4619      	mov	r1, r3
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f7ff f90e 	bl	8009340 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2202      	movs	r2, #2
 800a128:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a12c:	e014      	b.n	800a158 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 f9bf 	bl	800a4b2 <USBD_CtlSendStatus>
      break;
 800a134:	e010      	b.n	800a158 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 f9bb 	bl	800a4b2 <USBD_CtlSendStatus>
      break;
 800a13c:	e00c      	b.n	800a158 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a13e:	6839      	ldr	r1, [r7, #0]
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 f8eb 	bl	800a31c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a146:	4b07      	ldr	r3, [pc, #28]	; (800a164 <USBD_SetConfig+0x148>)
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	4619      	mov	r1, r3
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f7ff f8f7 	bl	8009340 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a152:	2303      	movs	r3, #3
 800a154:	73fb      	strb	r3, [r7, #15]
      break;
 800a156:	bf00      	nop
  }

  return ret;
 800a158:	7bfb      	ldrb	r3, [r7, #15]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3710      	adds	r7, #16
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	2000019c 	.word	0x2000019c

0800a168 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	88db      	ldrh	r3, [r3, #6]
 800a176:	2b01      	cmp	r3, #1
 800a178:	d004      	beq.n	800a184 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a17a:	6839      	ldr	r1, [r7, #0]
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 f8cd 	bl	800a31c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a182:	e023      	b.n	800a1cc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	2b02      	cmp	r3, #2
 800a18e:	dc02      	bgt.n	800a196 <USBD_GetConfig+0x2e>
 800a190:	2b00      	cmp	r3, #0
 800a192:	dc03      	bgt.n	800a19c <USBD_GetConfig+0x34>
 800a194:	e015      	b.n	800a1c2 <USBD_GetConfig+0x5a>
 800a196:	2b03      	cmp	r3, #3
 800a198:	d00b      	beq.n	800a1b2 <USBD_GetConfig+0x4a>
 800a19a:	e012      	b.n	800a1c2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	3308      	adds	r3, #8
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 f927 	bl	800a3fe <USBD_CtlSendData>
        break;
 800a1b0:	e00c      	b.n	800a1cc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	3304      	adds	r3, #4
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 f91f 	bl	800a3fe <USBD_CtlSendData>
        break;
 800a1c0:	e004      	b.n	800a1cc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a1c2:	6839      	ldr	r1, [r7, #0]
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 f8a9 	bl	800a31c <USBD_CtlError>
        break;
 800a1ca:	bf00      	nop
}
 800a1cc:	bf00      	nop
 800a1ce:	3708      	adds	r7, #8
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	3b01      	subs	r3, #1
 800a1e8:	2b02      	cmp	r3, #2
 800a1ea:	d81e      	bhi.n	800a22a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	88db      	ldrh	r3, [r3, #6]
 800a1f0:	2b02      	cmp	r3, #2
 800a1f2:	d004      	beq.n	800a1fe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a1f4:	6839      	ldr	r1, [r7, #0]
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 f890 	bl	800a31c <USBD_CtlError>
        break;
 800a1fc:	e01a      	b.n	800a234 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2201      	movs	r2, #1
 800a202:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d005      	beq.n	800a21a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	f043 0202 	orr.w	r2, r3, #2
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	330c      	adds	r3, #12
 800a21e:	2202      	movs	r2, #2
 800a220:	4619      	mov	r1, r3
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 f8eb 	bl	800a3fe <USBD_CtlSendData>
      break;
 800a228:	e004      	b.n	800a234 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a22a:	6839      	ldr	r1, [r7, #0]
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 f875 	bl	800a31c <USBD_CtlError>
      break;
 800a232:	bf00      	nop
  }
}
 800a234:	bf00      	nop
 800a236:	3708      	adds	r7, #8
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	885b      	ldrh	r3, [r3, #2]
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d106      	bne.n	800a25c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2201      	movs	r2, #1
 800a252:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 f92b 	bl	800a4b2 <USBD_CtlSendStatus>
  }
}
 800a25c:	bf00      	nop
 800a25e:	3708      	adds	r7, #8
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a274:	b2db      	uxtb	r3, r3
 800a276:	3b01      	subs	r3, #1
 800a278:	2b02      	cmp	r3, #2
 800a27a:	d80b      	bhi.n	800a294 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	885b      	ldrh	r3, [r3, #2]
 800a280:	2b01      	cmp	r3, #1
 800a282:	d10c      	bne.n	800a29e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2200      	movs	r2, #0
 800a288:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 f910 	bl	800a4b2 <USBD_CtlSendStatus>
      }
      break;
 800a292:	e004      	b.n	800a29e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a294:	6839      	ldr	r1, [r7, #0]
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 f840 	bl	800a31c <USBD_CtlError>
      break;
 800a29c:	e000      	b.n	800a2a0 <USBD_ClrFeature+0x3c>
      break;
 800a29e:	bf00      	nop
  }
}
 800a2a0:	bf00      	nop
 800a2a2:	3708      	adds	r7, #8
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	781a      	ldrb	r2, [r3, #0]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	781a      	ldrb	r2, [r3, #0]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	f7ff fabb 	bl	800984e <SWAPBYTE>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	461a      	mov	r2, r3
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	f7ff faae 	bl	800984e <SWAPBYTE>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	3301      	adds	r3, #1
 800a304:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a306:	68f8      	ldr	r0, [r7, #12]
 800a308:	f7ff faa1 	bl	800984e <SWAPBYTE>
 800a30c:	4603      	mov	r3, r0
 800a30e:	461a      	mov	r2, r3
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	80da      	strh	r2, [r3, #6]
}
 800a314:	bf00      	nop
 800a316:	3710      	adds	r7, #16
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a326:	2180      	movs	r1, #128	; 0x80
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f001 fda5 	bl	800be78 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a32e:	2100      	movs	r1, #0
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f001 fda1 	bl	800be78 <USBD_LL_StallEP>
}
 800a336:	bf00      	nop
 800a338:	3708      	adds	r7, #8
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b086      	sub	sp, #24
 800a342:	af00      	add	r7, sp, #0
 800a344:	60f8      	str	r0, [r7, #12]
 800a346:	60b9      	str	r1, [r7, #8]
 800a348:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a34a:	2300      	movs	r3, #0
 800a34c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d036      	beq.n	800a3c2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a358:	6938      	ldr	r0, [r7, #16]
 800a35a:	f000 f836 	bl	800a3ca <USBD_GetLen>
 800a35e:	4603      	mov	r3, r0
 800a360:	3301      	adds	r3, #1
 800a362:	b29b      	uxth	r3, r3
 800a364:	005b      	lsls	r3, r3, #1
 800a366:	b29a      	uxth	r2, r3
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a36c:	7dfb      	ldrb	r3, [r7, #23]
 800a36e:	68ba      	ldr	r2, [r7, #8]
 800a370:	4413      	add	r3, r2
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	7812      	ldrb	r2, [r2, #0]
 800a376:	701a      	strb	r2, [r3, #0]
  idx++;
 800a378:	7dfb      	ldrb	r3, [r7, #23]
 800a37a:	3301      	adds	r3, #1
 800a37c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a37e:	7dfb      	ldrb	r3, [r7, #23]
 800a380:	68ba      	ldr	r2, [r7, #8]
 800a382:	4413      	add	r3, r2
 800a384:	2203      	movs	r2, #3
 800a386:	701a      	strb	r2, [r3, #0]
  idx++;
 800a388:	7dfb      	ldrb	r3, [r7, #23]
 800a38a:	3301      	adds	r3, #1
 800a38c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a38e:	e013      	b.n	800a3b8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a390:	7dfb      	ldrb	r3, [r7, #23]
 800a392:	68ba      	ldr	r2, [r7, #8]
 800a394:	4413      	add	r3, r2
 800a396:	693a      	ldr	r2, [r7, #16]
 800a398:	7812      	ldrb	r2, [r2, #0]
 800a39a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	3301      	adds	r3, #1
 800a3a0:	613b      	str	r3, [r7, #16]
    idx++;
 800a3a2:	7dfb      	ldrb	r3, [r7, #23]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a3a8:	7dfb      	ldrb	r3, [r7, #23]
 800a3aa:	68ba      	ldr	r2, [r7, #8]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	701a      	strb	r2, [r3, #0]
    idx++;
 800a3b2:	7dfb      	ldrb	r3, [r7, #23]
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d1e7      	bne.n	800a390 <USBD_GetString+0x52>
 800a3c0:	e000      	b.n	800a3c4 <USBD_GetString+0x86>
    return;
 800a3c2:	bf00      	nop
  }
}
 800a3c4:	3718      	adds	r7, #24
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a3ca:	b480      	push	{r7}
 800a3cc:	b085      	sub	sp, #20
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a3da:	e005      	b.n	800a3e8 <USBD_GetLen+0x1e>
  {
    len++;
 800a3dc:	7bfb      	ldrb	r3, [r7, #15]
 800a3de:	3301      	adds	r3, #1
 800a3e0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d1f5      	bne.n	800a3dc <USBD_GetLen+0x12>
  }

  return len;
 800a3f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3714      	adds	r7, #20
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr

0800a3fe <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a3fe:	b580      	push	{r7, lr}
 800a400:	b084      	sub	sp, #16
 800a402:	af00      	add	r7, sp, #0
 800a404:	60f8      	str	r0, [r7, #12]
 800a406:	60b9      	str	r1, [r7, #8]
 800a408:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2202      	movs	r2, #2
 800a40e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	68ba      	ldr	r2, [r7, #8]
 800a422:	2100      	movs	r1, #0
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	f001 fdb0 	bl	800bf8a <USBD_LL_Transmit>

  return USBD_OK;
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3710      	adds	r7, #16
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	68ba      	ldr	r2, [r7, #8]
 800a444:	2100      	movs	r1, #0
 800a446:	68f8      	ldr	r0, [r7, #12]
 800a448:	f001 fd9f 	bl	800bf8a <USBD_LL_Transmit>

  return USBD_OK;
 800a44c:	2300      	movs	r3, #0
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3710      	adds	r7, #16
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}

0800a456 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a456:	b580      	push	{r7, lr}
 800a458:	b084      	sub	sp, #16
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	60f8      	str	r0, [r7, #12]
 800a45e:	60b9      	str	r1, [r7, #8]
 800a460:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2203      	movs	r2, #3
 800a466:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	68ba      	ldr	r2, [r7, #8]
 800a47e:	2100      	movs	r1, #0
 800a480:	68f8      	ldr	r0, [r7, #12]
 800a482:	f001 fda3 	bl	800bfcc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3710      	adds	r7, #16
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	68ba      	ldr	r2, [r7, #8]
 800a4a0:	2100      	movs	r1, #0
 800a4a2:	68f8      	ldr	r0, [r7, #12]
 800a4a4:	f001 fd92 	bl	800bfcc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4a8:	2300      	movs	r3, #0
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3710      	adds	r7, #16
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}

0800a4b2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a4b2:	b580      	push	{r7, lr}
 800a4b4:	b082      	sub	sp, #8
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2204      	movs	r2, #4
 800a4be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	2100      	movs	r1, #0
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f001 fd5e 	bl	800bf8a <USBD_LL_Transmit>

  return USBD_OK;
 800a4ce:	2300      	movs	r3, #0
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3708      	adds	r7, #8
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2205      	movs	r2, #5
 800a4e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f001 fd6c 	bl	800bfcc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4f4:	2300      	movs	r3, #0
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3708      	adds	r7, #8
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
	...

0800a500 <ApplicationPerform>:


/* Interfaced functions */

void ApplicationPerform()
{
 800a500:	b580      	push	{r7, lr}
 800a502:	af00      	add	r7, sp, #0

	switch(sApplicationBase.eApplicationState)
 800a504:	4b17      	ldr	r3, [pc, #92]	; (800a564 <ApplicationPerform+0x64>)
 800a506:	7e5b      	ldrb	r3, [r3, #25]
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	2b03      	cmp	r3, #3
 800a50c:	d822      	bhi.n	800a554 <ApplicationPerform+0x54>
 800a50e:	a201      	add	r2, pc, #4	; (adr r2, 800a514 <ApplicationPerform+0x14>)
 800a510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a514:	0800a525 	.word	0x0800a525
 800a518:	0800a533 	.word	0x0800a533
 800a51c:	0800a54f 	.word	0x0800a54f
 800a520:	0800a55d 	.word	0x0800a55d
	{
	case eApp_EntryState:
		OperateLED_A(eLED_On);
 800a524:	2000      	movs	r0, #0
 800a526:	f7f5 ffd3 	bl	80004d0 <OperateLED_A>
		AppStateChangeRequest(eApp_Initialization);
 800a52a:	2001      	movs	r0, #1
 800a52c:	f000 f8a6 	bl	800a67c <AppStateChangeRequest>
		break;
 800a530:	e015      	b.n	800a55e <ApplicationPerform+0x5e>

	case eApp_Initialization:
		AppEnableResetTaskTimers();
 800a532:	f000 f8ef 	bl	800a714 <AppEnableResetTaskTimers>
		TempCollect_Initialize();
 800a536:	f000 fbeb 	bl	800ad10 <TempCollect_Initialize>
		DataHandler_Initialize();
 800a53a:	f000 f92f 	bl	800a79c <DataHandler_Initialize>
		TurnAllSensorOn();
 800a53e:	f7f6 f833 	bl	80005a8 <TurnAllSensorOn>
		TurnOnSynchronousEvent();
 800a542:	f000 f923 	bl	800a78c <TurnOnSynchronousEvent>
		AppStateChangeRequest(eApp_Perform);
 800a546:	2002      	movs	r0, #2
 800a548:	f000 f898 	bl	800a67c <AppStateChangeRequest>
		break;
 800a54c:	e007      	b.n	800a55e <ApplicationPerform+0x5e>

	case eApp_Perform:
		AsynchronousTaskScheduler();
 800a54e:	f000 f867 	bl	800a620 <AsynchronousTaskScheduler>
		break;
 800a552:	e004      	b.n	800a55e <ApplicationPerform+0x5e>

	case eApp_Shutdown:
		break;

	default:
		AssertError(AppError_AppDefaultStateEntryError);
 800a554:	2010      	movs	r0, #16
 800a556:	f000 f905 	bl	800a764 <AssertError>
		break;
 800a55a:	e000      	b.n	800a55e <ApplicationPerform+0x5e>
		break;
 800a55c:	bf00      	nop
	}

}
 800a55e:	bf00      	nop
 800a560:	bd80      	pop	{r7, pc}
 800a562:	bf00      	nop
 800a564:	200001a0 	.word	0x200001a0

0800a568 <AsynchronousTaskTimerUpdate>:

void AsynchronousTaskTimerUpdate()
{
 800a568:	b480      	push	{r7}
 800a56a:	af00      	add	r7, sp, #0
	if(sApplicationBase.sAsyncTimers.s1000ms.bEnabledFlag)
 800a56c:	4b20      	ldr	r3, [pc, #128]	; (800a5f0 <AsynchronousTaskTimerUpdate+0x88>)
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	b2db      	uxtb	r3, r3
 800a572:	2b00      	cmp	r3, #0
 800a574:	d006      	beq.n	800a584 <AsynchronousTaskTimerUpdate+0x1c>
	{
		sApplicationBase.sAsyncTimers.s1000ms.u16Counter++;
 800a576:	4b1e      	ldr	r3, [pc, #120]	; (800a5f0 <AsynchronousTaskTimerUpdate+0x88>)
 800a578:	885b      	ldrh	r3, [r3, #2]
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	3301      	adds	r3, #1
 800a57e:	b29a      	uxth	r2, r3
 800a580:	4b1b      	ldr	r3, [pc, #108]	; (800a5f0 <AsynchronousTaskTimerUpdate+0x88>)
 800a582:	805a      	strh	r2, [r3, #2]
	}
	if(sApplicationBase.sAsyncTimers.s100ms.bEnabledFlag)
 800a584:	4b1a      	ldr	r3, [pc, #104]	; (800a5f0 <AsynchronousTaskTimerUpdate+0x88>)
 800a586:	791b      	ldrb	r3, [r3, #4]
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d006      	beq.n	800a59c <AsynchronousTaskTimerUpdate+0x34>
	{
		sApplicationBase.sAsyncTimers.s100ms.u16Counter++;
 800a58e:	4b18      	ldr	r3, [pc, #96]	; (800a5f0 <AsynchronousTaskTimerUpdate+0x88>)
 800a590:	88db      	ldrh	r3, [r3, #6]
 800a592:	b29b      	uxth	r3, r3
 800a594:	3301      	adds	r3, #1
 800a596:	b29a      	uxth	r2, r3
 800a598:	4b15      	ldr	r3, [pc, #84]	; (800a5f0 <AsynchronousTaskTimerUpdate+0x88>)
 800a59a:	80da      	strh	r2, [r3, #6]
	}
	if(sApplicationBase.sAsyncTimers.s10ms.bEnabledFlag)
 800a59c:	4b14      	ldr	r3, [pc, #80]	; (800a5f0 <AsynchronousTaskTimerUpdate+0x88>)
 800a59e:	7a1b      	ldrb	r3, [r3, #8]
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d006      	beq.n	800a5b4 <AsynchronousTaskTimerUpdate+0x4c>
	{
		sApplicationBase.sAsyncTimers.s10ms.u16Counter++;
 800a5a6:	4b12      	ldr	r3, [pc, #72]	; (800a5f0 <AsynchronousTaskTimerUpdate+0x88>)
 800a5a8:	895b      	ldrh	r3, [r3, #10]
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	b29a      	uxth	r2, r3
 800a5b0:	4b0f      	ldr	r3, [pc, #60]	; (800a5f0 <AsynchronousTaskTimerUpdate+0x88>)
 800a5b2:	815a      	strh	r2, [r3, #10]
	}
	if(sApplicationBase.sAsyncTimers.s1ms.bEnabledFlag)
 800a5b4:	4b0e      	ldr	r3, [pc, #56]	; (800a5f0 <AsynchronousTaskTimerUpdate+0x88>)
 800a5b6:	7b1b      	ldrb	r3, [r3, #12]
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d006      	beq.n	800a5cc <AsynchronousTaskTimerUpdate+0x64>
	{
		sApplicationBase.sAsyncTimers.s1ms.u16Counter++;
 800a5be:	4b0c      	ldr	r3, [pc, #48]	; (800a5f0 <AsynchronousTaskTimerUpdate+0x88>)
 800a5c0:	89db      	ldrh	r3, [r3, #14]
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	3301      	adds	r3, #1
 800a5c6:	b29a      	uxth	r2, r3
 800a5c8:	4b09      	ldr	r3, [pc, #36]	; (800a5f0 <AsynchronousTaskTimerUpdate+0x88>)
 800a5ca:	81da      	strh	r2, [r3, #14]
	}
	if(sApplicationBase.sAsyncTimers.s500us.bEnabledFlag)
 800a5cc:	4b08      	ldr	r3, [pc, #32]	; (800a5f0 <AsynchronousTaskTimerUpdate+0x88>)
 800a5ce:	7c1b      	ldrb	r3, [r3, #16]
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d006      	beq.n	800a5e4 <AsynchronousTaskTimerUpdate+0x7c>
	{
		sApplicationBase.sAsyncTimers.s500us.u16Counter++;
 800a5d6:	4b06      	ldr	r3, [pc, #24]	; (800a5f0 <AsynchronousTaskTimerUpdate+0x88>)
 800a5d8:	8a5b      	ldrh	r3, [r3, #18]
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	3301      	adds	r3, #1
 800a5de:	b29a      	uxth	r2, r3
 800a5e0:	4b03      	ldr	r3, [pc, #12]	; (800a5f0 <AsynchronousTaskTimerUpdate+0x88>)
 800a5e2:	825a      	strh	r2, [r3, #18]
	}

}
 800a5e4:	bf00      	nop
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ec:	4770      	bx	lr
 800a5ee:	bf00      	nop
 800a5f0:	200001a0 	.word	0x200001a0

0800a5f4 <AsynchronousTask_10ms>:

/* Internal functions */
void AsynchronousTask_10ms()
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	af00      	add	r7, sp, #0
	TempCollect_Operate();
 800a5f8:	f000 fa96 	bl	800ab28 <TempCollect_Operate>
}
 800a5fc:	bf00      	nop
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <AsynchronousTask_100ms>:

void AsynchronousTask_100ms()
{
 800a600:	b480      	push	{r7}
 800a602:	af00      	add	r7, sp, #0

}
 800a604:	bf00      	nop
 800a606:	46bd      	mov	sp, r7
 800a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60c:	4770      	bx	lr

0800a60e <AsynchronousTask_1000ms>:

void AsynchronousTask_1000ms()
{
 800a60e:	b580      	push	{r7, lr}
 800a610:	af00      	add	r7, sp, #0
	ToggleLED_B();
 800a612:	f7f5 ff79 	bl	8000508 <ToggleLED_B>
	DataHandler_Operate();
 800a616:	f000 fa1b 	bl	800aa50 <DataHandler_Operate>
}
 800a61a:	bf00      	nop
 800a61c:	bd80      	pop	{r7, pc}
	...

0800a620 <AsynchronousTaskScheduler>:

void AsynchronousTaskScheduler()
{
 800a620:	b580      	push	{r7, lr}
 800a622:	af00      	add	r7, sp, #0
	if(sApplicationBase.sAsyncTimers.s1000ms.u16Counter >= dAsynchronousTaskPeriod1000ms)
 800a624:	4b14      	ldr	r3, [pc, #80]	; (800a678 <AsynchronousTaskScheduler+0x58>)
 800a626:	885b      	ldrh	r3, [r3, #2]
 800a628:	b29b      	uxth	r3, r3
 800a62a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a62e:	d304      	bcc.n	800a63a <AsynchronousTaskScheduler+0x1a>
	{
		AsynchronousTask_1000ms();
 800a630:	f7ff ffed 	bl	800a60e <AsynchronousTask_1000ms>
		sApplicationBase.sAsyncTimers.s1000ms.u16Counter = 0;
 800a634:	4b10      	ldr	r3, [pc, #64]	; (800a678 <AsynchronousTaskScheduler+0x58>)
 800a636:	2200      	movs	r2, #0
 800a638:	805a      	strh	r2, [r3, #2]
	}

	if(sApplicationBase.sAsyncTimers.s100ms.u16Counter >= dAsynchronousTaskPeriod100ms)
 800a63a:	4b0f      	ldr	r3, [pc, #60]	; (800a678 <AsynchronousTaskScheduler+0x58>)
 800a63c:	88db      	ldrh	r3, [r3, #6]
 800a63e:	b29b      	uxth	r3, r3
 800a640:	2b63      	cmp	r3, #99	; 0x63
 800a642:	d904      	bls.n	800a64e <AsynchronousTaskScheduler+0x2e>
	{
		AsynchronousTask_100ms();
 800a644:	f7ff ffdc 	bl	800a600 <AsynchronousTask_100ms>
		sApplicationBase.sAsyncTimers.s100ms.u16Counter = 0;
 800a648:	4b0b      	ldr	r3, [pc, #44]	; (800a678 <AsynchronousTaskScheduler+0x58>)
 800a64a:	2200      	movs	r2, #0
 800a64c:	80da      	strh	r2, [r3, #6]
	}

	if(sApplicationBase.sAsyncTimers.s10ms.u16Counter >= dAsynchronousTaskPeriod10ms)
 800a64e:	4b0a      	ldr	r3, [pc, #40]	; (800a678 <AsynchronousTaskScheduler+0x58>)
 800a650:	895b      	ldrh	r3, [r3, #10]
 800a652:	b29b      	uxth	r3, r3
 800a654:	2b09      	cmp	r3, #9
 800a656:	d904      	bls.n	800a662 <AsynchronousTaskScheduler+0x42>
	{
		AsynchronousTask_10ms();
 800a658:	f7ff ffcc 	bl	800a5f4 <AsynchronousTask_10ms>
		sApplicationBase.sAsyncTimers.s10ms.u16Counter = 0;
 800a65c:	4b06      	ldr	r3, [pc, #24]	; (800a678 <AsynchronousTaskScheduler+0x58>)
 800a65e:	2200      	movs	r2, #0
 800a660:	815a      	strh	r2, [r3, #10]
	}

	if(sApplicationBase.sAsyncTimers.s1ms.u16Counter >= dAsynchronousTaskPeriod1ms)
 800a662:	4b05      	ldr	r3, [pc, #20]	; (800a678 <AsynchronousTaskScheduler+0x58>)
 800a664:	89db      	ldrh	r3, [r3, #14]
 800a666:	b29b      	uxth	r3, r3
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d002      	beq.n	800a672 <AsynchronousTaskScheduler+0x52>
	{
//		AsynchronousTask_1ms();
		sApplicationBase.sAsyncTimers.s1ms.u16Counter = 0;
 800a66c:	4b02      	ldr	r3, [pc, #8]	; (800a678 <AsynchronousTaskScheduler+0x58>)
 800a66e:	2200      	movs	r2, #0
 800a670:	81da      	strh	r2, [r3, #14]
	}

}
 800a672:	bf00      	nop
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	200001a0 	.word	0x200001a0

0800a67c <AppStateChangeRequest>:

void AppStateChangeRequest( ApplicationState_t eNewState)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
 800a682:	4603      	mov	r3, r0
 800a684:	71fb      	strb	r3, [r7, #7]
	switch(sApplicationBase.eApplicationState)
 800a686:	4b22      	ldr	r3, [pc, #136]	; (800a710 <AppStateChangeRequest+0x94>)
 800a688:	7e5b      	ldrb	r3, [r3, #25]
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	2b03      	cmp	r3, #3
 800a68e:	d837      	bhi.n	800a700 <AppStateChangeRequest+0x84>
 800a690:	a201      	add	r2, pc, #4	; (adr r2, 800a698 <AppStateChangeRequest+0x1c>)
 800a692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a696:	bf00      	nop
 800a698:	0800a6a9 	.word	0x0800a6a9
 800a69c:	0800a6bf 	.word	0x0800a6bf
 800a6a0:	0800a6d5 	.word	0x0800a6d5
 800a6a4:	0800a6f9 	.word	0x0800a6f9
	{
	case eApp_EntryState:
		if(eNewState == eApp_Initialization)
 800a6a8:	79fb      	ldrb	r3, [r7, #7]
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	d103      	bne.n	800a6b6 <AppStateChangeRequest+0x3a>
		{
			sApplicationBase.eApplicationState = eApp_Initialization;
 800a6ae:	4b18      	ldr	r3, [pc, #96]	; (800a710 <AppStateChangeRequest+0x94>)
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	765a      	strb	r2, [r3, #25]
		}
		else
		{
			AssertError(AppError_WrongStateTransition);
		}
		break;
 800a6b4:	e028      	b.n	800a708 <AppStateChangeRequest+0x8c>
			AssertError(AppError_WrongStateTransition);
 800a6b6:	2020      	movs	r0, #32
 800a6b8:	f000 f854 	bl	800a764 <AssertError>
		break;
 800a6bc:	e024      	b.n	800a708 <AppStateChangeRequest+0x8c>

	case eApp_Initialization:
		if(eNewState == eApp_Perform)
 800a6be:	79fb      	ldrb	r3, [r7, #7]
 800a6c0:	2b02      	cmp	r3, #2
 800a6c2:	d103      	bne.n	800a6cc <AppStateChangeRequest+0x50>
		{
			sApplicationBase.eApplicationState = eApp_Perform;
 800a6c4:	4b12      	ldr	r3, [pc, #72]	; (800a710 <AppStateChangeRequest+0x94>)
 800a6c6:	2202      	movs	r2, #2
 800a6c8:	765a      	strb	r2, [r3, #25]
		}
		else
		{
			AssertError(AppError_WrongStateTransition);
		}
		break;
 800a6ca:	e01d      	b.n	800a708 <AppStateChangeRequest+0x8c>
			AssertError(AppError_WrongStateTransition);
 800a6cc:	2020      	movs	r0, #32
 800a6ce:	f000 f849 	bl	800a764 <AssertError>
		break;
 800a6d2:	e019      	b.n	800a708 <AppStateChangeRequest+0x8c>

	case eApp_Perform:
		if(eNewState == eApp_Initialization)
 800a6d4:	79fb      	ldrb	r3, [r7, #7]
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d103      	bne.n	800a6e2 <AppStateChangeRequest+0x66>
		{
			sApplicationBase.eApplicationState = eApp_Initialization;
 800a6da:	4b0d      	ldr	r3, [pc, #52]	; (800a710 <AppStateChangeRequest+0x94>)
 800a6dc:	2201      	movs	r2, #1
 800a6de:	765a      	strb	r2, [r3, #25]
		}
		else
		{
			AssertError(AppError_WrongStateTransition);
		}
		break;
 800a6e0:	e012      	b.n	800a708 <AppStateChangeRequest+0x8c>
		else if(eNewState == eApp_Shutdown)
 800a6e2:	79fb      	ldrb	r3, [r7, #7]
 800a6e4:	2b03      	cmp	r3, #3
 800a6e6:	d103      	bne.n	800a6f0 <AppStateChangeRequest+0x74>
			sApplicationBase.eApplicationState = eApp_Shutdown;
 800a6e8:	4b09      	ldr	r3, [pc, #36]	; (800a710 <AppStateChangeRequest+0x94>)
 800a6ea:	2203      	movs	r2, #3
 800a6ec:	765a      	strb	r2, [r3, #25]
		break;
 800a6ee:	e00b      	b.n	800a708 <AppStateChangeRequest+0x8c>
			AssertError(AppError_WrongStateTransition);
 800a6f0:	2020      	movs	r0, #32
 800a6f2:	f000 f837 	bl	800a764 <AssertError>
		break;
 800a6f6:	e007      	b.n	800a708 <AppStateChangeRequest+0x8c>

	case eApp_Shutdown:
		AssertError(AppError_WrongStateTransition);
 800a6f8:	2020      	movs	r0, #32
 800a6fa:	f000 f833 	bl	800a764 <AssertError>
		break;
 800a6fe:	e003      	b.n	800a708 <AppStateChangeRequest+0x8c>

	default:
		AssertError(AppError_WrongStateTransition);
 800a700:	2020      	movs	r0, #32
 800a702:	f000 f82f 	bl	800a764 <AssertError>
		break;
 800a706:	bf00      	nop
	}

}
 800a708:	bf00      	nop
 800a70a:	3708      	adds	r7, #8
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}
 800a710:	200001a0 	.word	0x200001a0

0800a714 <AppEnableResetTaskTimers>:

void AppEnableResetTaskTimers()
{
 800a714:	b480      	push	{r7}
 800a716:	af00      	add	r7, sp, #0
	sApplicationBase.sAsyncTimers.s1000ms.bEnabledFlag = true;
 800a718:	4b11      	ldr	r3, [pc, #68]	; (800a760 <AppEnableResetTaskTimers+0x4c>)
 800a71a:	2201      	movs	r2, #1
 800a71c:	701a      	strb	r2, [r3, #0]
	sApplicationBase.sAsyncTimers.s100ms.bEnabledFlag = true;
 800a71e:	4b10      	ldr	r3, [pc, #64]	; (800a760 <AppEnableResetTaskTimers+0x4c>)
 800a720:	2201      	movs	r2, #1
 800a722:	711a      	strb	r2, [r3, #4]
	sApplicationBase.sAsyncTimers.s10ms.bEnabledFlag = true;
 800a724:	4b0e      	ldr	r3, [pc, #56]	; (800a760 <AppEnableResetTaskTimers+0x4c>)
 800a726:	2201      	movs	r2, #1
 800a728:	721a      	strb	r2, [r3, #8]
	sApplicationBase.sAsyncTimers.s1ms.bEnabledFlag = true;
 800a72a:	4b0d      	ldr	r3, [pc, #52]	; (800a760 <AppEnableResetTaskTimers+0x4c>)
 800a72c:	2201      	movs	r2, #1
 800a72e:	731a      	strb	r2, [r3, #12]
	sApplicationBase.sAsyncTimers.s500us.bEnabledFlag = true;
 800a730:	4b0b      	ldr	r3, [pc, #44]	; (800a760 <AppEnableResetTaskTimers+0x4c>)
 800a732:	2201      	movs	r2, #1
 800a734:	741a      	strb	r2, [r3, #16]

	sApplicationBase.sAsyncTimers.s1000ms.u16Counter = 0;
 800a736:	4b0a      	ldr	r3, [pc, #40]	; (800a760 <AppEnableResetTaskTimers+0x4c>)
 800a738:	2200      	movs	r2, #0
 800a73a:	805a      	strh	r2, [r3, #2]
	sApplicationBase.sAsyncTimers.s100ms.u16Counter = 0;
 800a73c:	4b08      	ldr	r3, [pc, #32]	; (800a760 <AppEnableResetTaskTimers+0x4c>)
 800a73e:	2200      	movs	r2, #0
 800a740:	80da      	strh	r2, [r3, #6]
	sApplicationBase.sAsyncTimers.s10ms.u16Counter = 0;
 800a742:	4b07      	ldr	r3, [pc, #28]	; (800a760 <AppEnableResetTaskTimers+0x4c>)
 800a744:	2200      	movs	r2, #0
 800a746:	815a      	strh	r2, [r3, #10]
	sApplicationBase.sAsyncTimers.s1ms.u16Counter = 0;
 800a748:	4b05      	ldr	r3, [pc, #20]	; (800a760 <AppEnableResetTaskTimers+0x4c>)
 800a74a:	2200      	movs	r2, #0
 800a74c:	81da      	strh	r2, [r3, #14]
	sApplicationBase.sAsyncTimers.s500us.u16Counter = 0;
 800a74e:	4b04      	ldr	r3, [pc, #16]	; (800a760 <AppEnableResetTaskTimers+0x4c>)
 800a750:	2200      	movs	r2, #0
 800a752:	825a      	strh	r2, [r3, #18]
}
 800a754:	bf00      	nop
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr
 800a75e:	bf00      	nop
 800a760:	200001a0 	.word	0x200001a0

0800a764 <AssertError>:

void AssertError( AppErrorList_t eAppError )
{
 800a764:	b480      	push	{r7}
 800a766:	b083      	sub	sp, #12
 800a768:	af00      	add	r7, sp, #0
 800a76a:	4603      	mov	r3, r0
 800a76c:	80fb      	strh	r3, [r7, #6]
	sApplicationBase.u32ErrorReg |= (uint32_t)eAppError;
 800a76e:	4b06      	ldr	r3, [pc, #24]	; (800a788 <AssertError+0x24>)
 800a770:	695a      	ldr	r2, [r3, #20]
 800a772:	88fb      	ldrh	r3, [r7, #6]
 800a774:	4313      	orrs	r3, r2
 800a776:	4a04      	ldr	r2, [pc, #16]	; (800a788 <AssertError+0x24>)
 800a778:	6153      	str	r3, [r2, #20]
}
 800a77a:	bf00      	nop
 800a77c:	370c      	adds	r7, #12
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr
 800a786:	bf00      	nop
 800a788:	200001a0 	.word	0x200001a0

0800a78c <TurnOnSynchronousEvent>:

void TurnOnSynchronousEvent()
{
 800a78c:	b480      	push	{r7}
 800a78e:	af00      	add	r7, sp, #0

}
 800a790:	bf00      	nop
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr
	...

0800a79c <DataHandler_Initialize>:
}DataHandler_t;

static DataHandler_t kDataHandler;

void DataHandler_Initialize()
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	af00      	add	r7, sp, #0
	DataHandler_Reset();
 800a7a0:	f000 f80c 	bl	800a7bc <DataHandler_Reset>
	kDataHandler.bEnabled = true;
 800a7a4:	4b04      	ldr	r3, [pc, #16]	; (800a7b8 <DataHandler_Initialize+0x1c>)
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	701a      	strb	r2, [r3, #0]
	kDataHandler.bTransmissionAllowed = true;
 800a7aa:	4b03      	ldr	r3, [pc, #12]	; (800a7b8 <DataHandler_Initialize+0x1c>)
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a

}
 800a7b2:	bf00      	nop
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	bf00      	nop
 800a7b8:	200001bc 	.word	0x200001bc

0800a7bc <DataHandler_Reset>:
void DataHandler_Reset()
{
 800a7bc:	b490      	push	{r4, r7}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
	kDataHandler.u8ActiveMemoryPage = 0;
 800a7c2:	4b34      	ldr	r3, [pc, #208]	; (800a894 <DataHandler_Reset+0xd8>)
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	kDataHandler.u8LastMemoryPage = 0;
 800a7ca:	4b32      	ldr	r3, [pc, #200]	; (800a894 <DataHandler_Reset+0xd8>)
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
	kDataHandler.u8WidthPointer = 0;
 800a7d2:	4b30      	ldr	r3, [pc, #192]	; (800a894 <DataHandler_Reset+0xd8>)
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
	kDataHandler.u8LengthPointer = 0;
 800a7da:	4b2e      	ldr	r3, [pc, #184]	; (800a894 <DataHandler_Reset+0xd8>)
 800a7dc:	2200      	movs	r2, #0
 800a7de:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
	kDataHandler.bPageFilled = false;
 800a7e2:	4b2c      	ldr	r3, [pc, #176]	; (800a894 <DataHandler_Reset+0xd8>)
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
	kDataHandler.bReadyToSend = false;
 800a7ea:	4b2a      	ldr	r3, [pc, #168]	; (800a894 <DataHandler_Reset+0xd8>)
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

	for(uint8_t u8PageIdx = 0; u8PageIdx < dMemoryPagesCount; u8PageIdx++)
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	71fb      	strb	r3, [r7, #7]
 800a7f6:	e044      	b.n	800a882 <DataHandler_Reset+0xc6>
	{
		for(uint8_t u8LengthIdx = 0; u8LengthIdx < dMemoryLength; u8LengthIdx++)
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	71bb      	strb	r3, [r7, #6]
 800a7fc:	e03b      	b.n	800a876 <DataHandler_Reset+0xba>
		{
			kDataHandler.kMeasurementMemory[u8PageIdx].bAlreadySent = false;
 800a7fe:	79fa      	ldrb	r2, [r7, #7]
 800a800:	4924      	ldr	r1, [pc, #144]	; (800a894 <DataHandler_Reset+0xd8>)
 800a802:	4613      	mov	r3, r2
 800a804:	015b      	lsls	r3, r3, #5
 800a806:	4413      	add	r3, r2
 800a808:	00db      	lsls	r3, r3, #3
 800a80a:	440b      	add	r3, r1
 800a80c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800a810:	2200      	movs	r2, #0
 800a812:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[u8PageIdx].bHardSaved = false;
 800a814:	79fa      	ldrb	r2, [r7, #7]
 800a816:	491f      	ldr	r1, [pc, #124]	; (800a894 <DataHandler_Reset+0xd8>)
 800a818:	4613      	mov	r3, r2
 800a81a:	015b      	lsls	r3, r3, #5
 800a81c:	4413      	add	r3, r2
 800a81e:	00db      	lsls	r3, r3, #3
 800a820:	440b      	add	r3, r1
 800a822:	f203 1309 	addw	r3, r3, #265	; 0x109
 800a826:	2200      	movs	r2, #0
 800a828:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[u8PageIdx].bHardSaveRequest = false;
 800a82a:	79fa      	ldrb	r2, [r7, #7]
 800a82c:	4919      	ldr	r1, [pc, #100]	; (800a894 <DataHandler_Reset+0xd8>)
 800a82e:	4613      	mov	r3, r2
 800a830:	015b      	lsls	r3, r3, #5
 800a832:	4413      	add	r3, r2
 800a834:	00db      	lsls	r3, r3, #3
 800a836:	440b      	add	r3, r1
 800a838:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800a83c:	2200      	movs	r2, #0
 800a83e:	701a      	strb	r2, [r3, #0]

			for(uint8_t u8WidthIdx = 0; u8WidthIdx < dMemoryWidth; u8WidthIdx++)
 800a840:	2300      	movs	r3, #0
 800a842:	717b      	strb	r3, [r7, #5]
 800a844:	e011      	b.n	800a86a <DataHandler_Reset+0xae>
			{
				#if dStoreReultsAsFloat
				kDataHandler.kMeasurementMemory[u8PageIdx].fMeasurementArray[u8LengthIdx][u8WidthIdx] = 0;
				#else
				kDataHandler.kMeasurementMemory[u8PageIdx].i16MeasurementArray[u8LengthIdx][u8WidthIdx] = 0;
 800a846:	79fa      	ldrb	r2, [r7, #7]
 800a848:	79bb      	ldrb	r3, [r7, #6]
 800a84a:	7979      	ldrb	r1, [r7, #5]
 800a84c:	4c11      	ldr	r4, [pc, #68]	; (800a894 <DataHandler_Reset+0xd8>)
 800a84e:	0118      	lsls	r0, r3, #4
 800a850:	4613      	mov	r3, r2
 800a852:	015b      	lsls	r3, r3, #5
 800a854:	4413      	add	r3, r2
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	4403      	add	r3, r0
 800a85a:	440b      	add	r3, r1
 800a85c:	005b      	lsls	r3, r3, #1
 800a85e:	4423      	add	r3, r4
 800a860:	2200      	movs	r2, #0
 800a862:	811a      	strh	r2, [r3, #8]
			for(uint8_t u8WidthIdx = 0; u8WidthIdx < dMemoryWidth; u8WidthIdx++)
 800a864:	797b      	ldrb	r3, [r7, #5]
 800a866:	3301      	adds	r3, #1
 800a868:	717b      	strb	r3, [r7, #5]
 800a86a:	797b      	ldrb	r3, [r7, #5]
 800a86c:	2b0f      	cmp	r3, #15
 800a86e:	d9ea      	bls.n	800a846 <DataHandler_Reset+0x8a>
		for(uint8_t u8LengthIdx = 0; u8LengthIdx < dMemoryLength; u8LengthIdx++)
 800a870:	79bb      	ldrb	r3, [r7, #6]
 800a872:	3301      	adds	r3, #1
 800a874:	71bb      	strb	r3, [r7, #6]
 800a876:	79bb      	ldrb	r3, [r7, #6]
 800a878:	2b07      	cmp	r3, #7
 800a87a:	d9c0      	bls.n	800a7fe <DataHandler_Reset+0x42>
	for(uint8_t u8PageIdx = 0; u8PageIdx < dMemoryPagesCount; u8PageIdx++)
 800a87c:	79fb      	ldrb	r3, [r7, #7]
 800a87e:	3301      	adds	r3, #1
 800a880:	71fb      	strb	r3, [r7, #7]
 800a882:	79fb      	ldrb	r3, [r7, #7]
 800a884:	2b01      	cmp	r3, #1
 800a886:	d9b7      	bls.n	800a7f8 <DataHandler_Reset+0x3c>
				#endif
			}
		}
	}

}
 800a888:	bf00      	nop
 800a88a:	bf00      	nop
 800a88c:	3708      	adds	r7, #8
 800a88e:	46bd      	mov	sp, r7
 800a890:	bc90      	pop	{r4, r7}
 800a892:	4770      	bx	lr
 800a894:	200001bc 	.word	0x200001bc

0800a898 <DataHandler_OpenNewMeasurement>:
void DataHandler_OpenNewMeasurement( uint32_t u32TimeStamp )
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b082      	sub	sp, #8
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]

	if( kDataHandler.bEnabled )
 800a8a0:	4b46      	ldr	r3, [pc, #280]	; (800a9bc <DataHandler_OpenNewMeasurement+0x124>)
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	f000 8081 	beq.w	800a9ac <DataHandler_OpenNewMeasurement+0x114>
	{
		kDataHandler.u8LengthPointer++;
 800a8aa:	4b44      	ldr	r3, [pc, #272]	; (800a9bc <DataHandler_OpenNewMeasurement+0x124>)
 800a8ac:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	b2da      	uxtb	r2, r3
 800a8b4:	4b41      	ldr	r3, [pc, #260]	; (800a9bc <DataHandler_OpenNewMeasurement+0x124>)
 800a8b6:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
		kDataHandler.u8WidthPointer = 0;
 800a8ba:	4b40      	ldr	r3, [pc, #256]	; (800a9bc <DataHandler_OpenNewMeasurement+0x124>)
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216

		/*
		 * Every time new measurement is opened the previous one is assumed to be ready for transmission
		 */
		kDataHandler.bReadyToSend = true;
 800a8c2:	4b3e      	ldr	r3, [pc, #248]	; (800a9bc <DataHandler_OpenNewMeasurement+0x124>)
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

		if(kDataHandler.u8LengthPointer >= dMemoryLength)
 800a8ca:	4b3c      	ldr	r3, [pc, #240]	; (800a9bc <DataHandler_OpenNewMeasurement+0x124>)
 800a8cc:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217
 800a8d0:	2b07      	cmp	r3, #7
 800a8d2:	d96f      	bls.n	800a9b4 <DataHandler_OpenNewMeasurement+0x11c>
		{
			kDataHandler.u8LengthPointer = 0;
 800a8d4:	4b39      	ldr	r3, [pc, #228]	; (800a9bc <DataHandler_OpenNewMeasurement+0x124>)
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bAlreadySent = false;
 800a8dc:	4b37      	ldr	r3, [pc, #220]	; (800a9bc <DataHandler_OpenNewMeasurement+0x124>)
 800a8de:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	4a35      	ldr	r2, [pc, #212]	; (800a9bc <DataHandler_OpenNewMeasurement+0x124>)
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	015b      	lsls	r3, r3, #5
 800a8ea:	440b      	add	r3, r1
 800a8ec:	00db      	lsls	r3, r3, #3
 800a8ee:	4413      	add	r3, r2
 800a8f0:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bHardSaveRequest = true;
 800a8f8:	4b30      	ldr	r3, [pc, #192]	; (800a9bc <DataHandler_OpenNewMeasurement+0x124>)
 800a8fa:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800a8fe:	4619      	mov	r1, r3
 800a900:	4a2e      	ldr	r2, [pc, #184]	; (800a9bc <DataHandler_OpenNewMeasurement+0x124>)
 800a902:	460b      	mov	r3, r1
 800a904:	015b      	lsls	r3, r3, #5
 800a906:	440b      	add	r3, r1
 800a908:	00db      	lsls	r3, r3, #3
 800a90a:	4413      	add	r3, r2
 800a90c:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800a910:	2201      	movs	r2, #1
 800a912:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bHardSaved = false;
 800a914:	4b29      	ldr	r3, [pc, #164]	; (800a9bc <DataHandler_OpenNewMeasurement+0x124>)
 800a916:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800a91a:	4619      	mov	r1, r3
 800a91c:	4a27      	ldr	r2, [pc, #156]	; (800a9bc <DataHandler_OpenNewMeasurement+0x124>)
 800a91e:	460b      	mov	r3, r1
 800a920:	015b      	lsls	r3, r3, #5
 800a922:	440b      	add	r3, r1
 800a924:	00db      	lsls	r3, r3, #3
 800a926:	4413      	add	r3, r2
 800a928:	f203 1309 	addw	r3, r3, #265	; 0x109
 800a92c:	2200      	movs	r2, #0
 800a92e:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].u16Timestamp = u32TimeStamp;
 800a930:	4b22      	ldr	r3, [pc, #136]	; (800a9bc <DataHandler_OpenNewMeasurement+0x124>)
 800a932:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800a936:	4619      	mov	r1, r3
 800a938:	4a20      	ldr	r2, [pc, #128]	; (800a9bc <DataHandler_OpenNewMeasurement+0x124>)
 800a93a:	460b      	mov	r3, r1
 800a93c:	015b      	lsls	r3, r3, #5
 800a93e:	440b      	add	r3, r1
 800a940:	00db      	lsls	r3, r3, #3
 800a942:	4413      	add	r3, r2
 800a944:	3304      	adds	r3, #4
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	601a      	str	r2, [r3, #0]

			if( !kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bHardSaved )
 800a94a:	4b1c      	ldr	r3, [pc, #112]	; (800a9bc <DataHandler_OpenNewMeasurement+0x124>)
 800a94c:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800a950:	4619      	mov	r1, r3
 800a952:	4a1a      	ldr	r2, [pc, #104]	; (800a9bc <DataHandler_OpenNewMeasurement+0x124>)
 800a954:	460b      	mov	r3, r1
 800a956:	015b      	lsls	r3, r3, #5
 800a958:	440b      	add	r3, r1
 800a95a:	00db      	lsls	r3, r3, #3
 800a95c:	4413      	add	r3, r2
 800a95e:	f203 1309 	addw	r3, r3, #265	; 0x109
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	f083 0301 	eor.w	r3, r3, #1
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d002      	beq.n	800a974 <DataHandler_OpenNewMeasurement+0xdc>
			{
				AssertError(AppError_DataLost); // Data not saved; possibly add timestamp to track lost data chunks
 800a96e:	2040      	movs	r0, #64	; 0x40
 800a970:	f7ff fef8 	bl	800a764 <AssertError>
			}

			kDataHandler.u8LastMemoryPage = kDataHandler.u8ActiveMemoryPage;
 800a974:	4b11      	ldr	r3, [pc, #68]	; (800a9bc <DataHandler_OpenNewMeasurement+0x124>)
 800a976:	f893 2214 	ldrb.w	r2, [r3, #532]	; 0x214
 800a97a:	4b10      	ldr	r3, [pc, #64]	; (800a9bc <DataHandler_OpenNewMeasurement+0x124>)
 800a97c:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
			kDataHandler.u8ActiveMemoryPage++;
 800a980:	4b0e      	ldr	r3, [pc, #56]	; (800a9bc <DataHandler_OpenNewMeasurement+0x124>)
 800a982:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800a986:	3301      	adds	r3, #1
 800a988:	b2da      	uxtb	r2, r3
 800a98a:	4b0c      	ldr	r3, [pc, #48]	; (800a9bc <DataHandler_OpenNewMeasurement+0x124>)
 800a98c:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
			if(kDataHandler.u8ActiveMemoryPage >= dMemoryPagesCount)
 800a990:	4b0a      	ldr	r3, [pc, #40]	; (800a9bc <DataHandler_OpenNewMeasurement+0x124>)
 800a992:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800a996:	2b01      	cmp	r3, #1
 800a998:	d903      	bls.n	800a9a2 <DataHandler_OpenNewMeasurement+0x10a>
			{
				kDataHandler.u8ActiveMemoryPage = 0;
 800a99a:	4b08      	ldr	r3, [pc, #32]	; (800a9bc <DataHandler_OpenNewMeasurement+0x124>)
 800a99c:	2200      	movs	r2, #0
 800a99e:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
			}
			kDataHandler.bPageFilled = true;
 800a9a2:	4b06      	ldr	r3, [pc, #24]	; (800a9bc <DataHandler_OpenNewMeasurement+0x124>)
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
	else
	{
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
	}

}
 800a9aa:	e003      	b.n	800a9b4 <DataHandler_OpenNewMeasurement+0x11c>
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
 800a9ac:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a9b0:	f7ff fed8 	bl	800a764 <AssertError>
}
 800a9b4:	bf00      	nop
 800a9b6:	3708      	adds	r7, #8
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}
 800a9bc:	200001bc 	.word	0x200001bc

0800a9c0 <DataHandler_StoreMeasurement>:
#if dStoreReultsAsFloat
void DataHandler_StoreMeasurement( float fNewMeasurement )
#else
void DataHandler_StoreMeasurement( int16_t i16NewMeasurement )
#endif
{
 800a9c0:	b590      	push	{r4, r7, lr}
 800a9c2:	b085      	sub	sp, #20
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	80fb      	strh	r3, [r7, #6]
	uint8_t u8MemPage = kDataHandler.u8ActiveMemoryPage;
 800a9ca:	4b20      	ldr	r3, [pc, #128]	; (800aa4c <DataHandler_StoreMeasurement+0x8c>)
 800a9cc:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800a9d0:	73fb      	strb	r3, [r7, #15]
	uint8_t u8LenPtr = kDataHandler.u8LengthPointer;
 800a9d2:	4b1e      	ldr	r3, [pc, #120]	; (800aa4c <DataHandler_StoreMeasurement+0x8c>)
 800a9d4:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217
 800a9d8:	73bb      	strb	r3, [r7, #14]
	uint8_t u8WidPtr = kDataHandler.u8WidthPointer;
 800a9da:	4b1c      	ldr	r3, [pc, #112]	; (800aa4c <DataHandler_StoreMeasurement+0x8c>)
 800a9dc:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
 800a9e0:	737b      	strb	r3, [r7, #13]

	if( kDataHandler.bEnabled )
 800a9e2:	4b1a      	ldr	r3, [pc, #104]	; (800aa4c <DataHandler_StoreMeasurement+0x8c>)
 800a9e4:	781b      	ldrb	r3, [r3, #0]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d027      	beq.n	800aa3a <DataHandler_StoreMeasurement+0x7a>
	{
		#if dStoreReultsAsFloat
		kDataHandler.kMeasurementMemory[u8MemPage].fMeasurementArray[u8LenPtr][u8WidPtr] = fNewMeasurement;
		#else
		kDataHandler.kMeasurementMemory[u8MemPage].i16MeasurementArray[u8LenPtr][u8WidPtr] = i16NewMeasurement;
 800a9ea:	7bfa      	ldrb	r2, [r7, #15]
 800a9ec:	7bbb      	ldrb	r3, [r7, #14]
 800a9ee:	7b79      	ldrb	r1, [r7, #13]
 800a9f0:	4c16      	ldr	r4, [pc, #88]	; (800aa4c <DataHandler_StoreMeasurement+0x8c>)
 800a9f2:	0118      	lsls	r0, r3, #4
 800a9f4:	4613      	mov	r3, r2
 800a9f6:	015b      	lsls	r3, r3, #5
 800a9f8:	4413      	add	r3, r2
 800a9fa:	009b      	lsls	r3, r3, #2
 800a9fc:	4403      	add	r3, r0
 800a9fe:	440b      	add	r3, r1
 800aa00:	005b      	lsls	r3, r3, #1
 800aa02:	4423      	add	r3, r4
 800aa04:	88fa      	ldrh	r2, [r7, #6]
 800aa06:	811a      	strh	r2, [r3, #8]
		#endif

		kDataHandler.u8WidthPointer++;
 800aa08:	4b10      	ldr	r3, [pc, #64]	; (800aa4c <DataHandler_StoreMeasurement+0x8c>)
 800aa0a:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
 800aa0e:	3301      	adds	r3, #1
 800aa10:	b2da      	uxtb	r2, r3
 800aa12:	4b0e      	ldr	r3, [pc, #56]	; (800aa4c <DataHandler_StoreMeasurement+0x8c>)
 800aa14:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216

		if(kDataHandler.u8WidthPointer >= dMemoryWidth)
 800aa18:	4b0c      	ldr	r3, [pc, #48]	; (800aa4c <DataHandler_StoreMeasurement+0x8c>)
 800aa1a:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
 800aa1e:	2b0f      	cmp	r3, #15
 800aa20:	d90f      	bls.n	800aa42 <DataHandler_StoreMeasurement+0x82>
		{
			kDataHandler.u8WidthPointer--;
 800aa22:	4b0a      	ldr	r3, [pc, #40]	; (800aa4c <DataHandler_StoreMeasurement+0x8c>)
 800aa24:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
 800aa28:	3b01      	subs	r3, #1
 800aa2a:	b2da      	uxtb	r2, r3
 800aa2c:	4b07      	ldr	r3, [pc, #28]	; (800aa4c <DataHandler_StoreMeasurement+0x8c>)
 800aa2e:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
			AssertError(AppError_WidthOverstretched); // Width overstretched - no new measurement was called;
 800aa32:	2080      	movs	r0, #128	; 0x80
 800aa34:	f7ff fe96 	bl	800a764 <AssertError>
	}
	else
	{
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
	}
}
 800aa38:	e003      	b.n	800aa42 <DataHandler_StoreMeasurement+0x82>
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
 800aa3a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800aa3e:	f7ff fe91 	bl	800a764 <AssertError>
}
 800aa42:	bf00      	nop
 800aa44:	3714      	adds	r7, #20
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd90      	pop	{r4, r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	200001bc 	.word	0x200001bc

0800aa50 <DataHandler_Operate>:

void DataHandler_Operate()
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
	bool bTransmissionStatus = false;
 800aa56:	2300      	movs	r3, #0
 800aa58:	71fb      	strb	r3, [r7, #7]

	if( kDataHandler.bEnabled )
 800aa5a:	4b32      	ldr	r3, [pc, #200]	; (800ab24 <DataHandler_Operate+0xd4>)
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d058      	beq.n	800ab14 <DataHandler_Operate+0xc4>
	{

		if( kDataHandler.bPageFilled )
 800aa62:	4b30      	ldr	r3, [pc, #192]	; (800ab24 <DataHandler_Operate+0xd4>)
 800aa64:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d011      	beq.n	800aa90 <DataHandler_Operate+0x40>
		{
			kDataHandler.kMeasurementMemory[kDataHandler.u8LastMemoryPage].bHardSaveRequest = true;
 800aa6c:	4b2d      	ldr	r3, [pc, #180]	; (800ab24 <DataHandler_Operate+0xd4>)
 800aa6e:	f893 3215 	ldrb.w	r3, [r3, #533]	; 0x215
 800aa72:	4619      	mov	r1, r3
 800aa74:	4a2b      	ldr	r2, [pc, #172]	; (800ab24 <DataHandler_Operate+0xd4>)
 800aa76:	460b      	mov	r3, r1
 800aa78:	015b      	lsls	r3, r3, #5
 800aa7a:	440b      	add	r3, r1
 800aa7c:	00db      	lsls	r3, r3, #3
 800aa7e:	4413      	add	r3, r2
 800aa80:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800aa84:	2201      	movs	r2, #1
 800aa86:	701a      	strb	r2, [r3, #0]
			kDataHandler.bPageFilled = false;
 800aa88:	4b26      	ldr	r3, [pc, #152]	; (800ab24 <DataHandler_Operate+0xd4>)
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
			// Call to save with SD card
		}

		if( kDataHandler.bReadyToSend & kDataHandler.bTransmissionAllowed )
 800aa90:	4b24      	ldr	r3, [pc, #144]	; (800ab24 <DataHandler_Operate+0xd4>)
 800aa92:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800aa96:	461a      	mov	r2, r3
 800aa98:	4b22      	ldr	r3, [pc, #136]	; (800ab24 <DataHandler_Operate+0xd4>)
 800aa9a:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 800aa9e:	4013      	ands	r3, r2
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d03b      	beq.n	800ab1c <DataHandler_Operate+0xcc>
		{
			if(kDataHandler.u8LengthPointer == 0)
 800aaa4:	4b1f      	ldr	r3, [pc, #124]	; (800ab24 <DataHandler_Operate+0xd4>)
 800aaa6:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d111      	bne.n	800aad2 <DataHandler_Operate+0x82>
			{
				bTransmissionStatus = USB_TransmitData(kDataHandler.kMeasurementMemory[kDataHandler.u8LastMemoryPage].i16MeasurementArray[dMemoryLength-1]);
 800aaae:	4b1d      	ldr	r3, [pc, #116]	; (800ab24 <DataHandler_Operate+0xd4>)
 800aab0:	f893 3215 	ldrb.w	r3, [r3, #533]	; 0x215
 800aab4:	461a      	mov	r2, r3
 800aab6:	4613      	mov	r3, r2
 800aab8:	015b      	lsls	r3, r3, #5
 800aaba:	4413      	add	r3, r2
 800aabc:	00db      	lsls	r3, r3, #3
 800aabe:	33e0      	adds	r3, #224	; 0xe0
 800aac0:	4a18      	ldr	r2, [pc, #96]	; (800ab24 <DataHandler_Operate+0xd4>)
 800aac2:	4413      	add	r3, r2
 800aac4:	3308      	adds	r3, #8
 800aac6:	4618      	mov	r0, r3
 800aac8:	f000 f95e 	bl	800ad88 <USB_TransmitData>
 800aacc:	4603      	mov	r3, r0
 800aace:	71fb      	strb	r3, [r7, #7]
 800aad0:	e015      	b.n	800aafe <DataHandler_Operate+0xae>
			}
			else
			{
				bTransmissionStatus = USB_TransmitData(kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].i16MeasurementArray[kDataHandler.u8LengthPointer-1]);
 800aad2:	4b14      	ldr	r3, [pc, #80]	; (800ab24 <DataHandler_Operate+0xd4>)
 800aad4:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800aad8:	4619      	mov	r1, r3
 800aada:	4b12      	ldr	r3, [pc, #72]	; (800ab24 <DataHandler_Operate+0xd4>)
 800aadc:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217
 800aae0:	3b01      	subs	r3, #1
 800aae2:	015a      	lsls	r2, r3, #5
 800aae4:	460b      	mov	r3, r1
 800aae6:	015b      	lsls	r3, r3, #5
 800aae8:	440b      	add	r3, r1
 800aaea:	00db      	lsls	r3, r3, #3
 800aaec:	4413      	add	r3, r2
 800aaee:	4a0d      	ldr	r2, [pc, #52]	; (800ab24 <DataHandler_Operate+0xd4>)
 800aaf0:	4413      	add	r3, r2
 800aaf2:	3308      	adds	r3, #8
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f000 f947 	bl	800ad88 <USB_TransmitData>
 800aafa:	4603      	mov	r3, r0
 800aafc:	71fb      	strb	r3, [r7, #7]
			}

			if ( !bTransmissionStatus )
 800aafe:	79fb      	ldrb	r3, [r7, #7]
 800ab00:	f083 0301 	eor.w	r3, r3, #1
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d008      	beq.n	800ab1c <DataHandler_Operate+0xcc>
			{
				kDataHandler.bReadyToSend = false;
 800ab0a:	4b06      	ldr	r3, [pc, #24]	; (800ab24 <DataHandler_Operate+0xd4>)
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
	}
	else
	{
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
	}
}
 800ab12:	e003      	b.n	800ab1c <DataHandler_Operate+0xcc>
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
 800ab14:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ab18:	f7ff fe24 	bl	800a764 <AssertError>
}
 800ab1c:	bf00      	nop
 800ab1e:	3708      	adds	r7, #8
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}
 800ab24:	200001bc 	.word	0x200001bc

0800ab28 <TempCollect_Operate>:
	.bEnabledFlag = false,
	.eState = TempCollect_EntryState,
};

void TempCollect_Operate()
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	af00      	add	r7, sp, #0
	switch(kTemperatureData.eState)
 800ab2c:	4b75      	ldr	r3, [pc, #468]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800ab2e:	79db      	ldrb	r3, [r3, #7]
 800ab30:	2b05      	cmp	r3, #5
 800ab32:	f200 80df 	bhi.w	800acf4 <TempCollect_Operate+0x1cc>
 800ab36:	a201      	add	r2, pc, #4	; (adr r2, 800ab3c <TempCollect_Operate+0x14>)
 800ab38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab3c:	0800ab55 	.word	0x0800ab55
 800ab40:	0800ab5f 	.word	0x0800ab5f
 800ab44:	0800ab8f 	.word	0x0800ab8f
 800ab48:	0800ac15 	.word	0x0800ac15
 800ab4c:	0800ac91 	.word	0x0800ac91
 800ab50:	0800abe9 	.word	0x0800abe9
	{
	case(TempCollect_EntryState):
		AssertError(AppError_TempCollectUninitialized); // Incorrect entry - before initialization
 800ab54:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ab58:	f7ff fe04 	bl	800a764 <AssertError>
		break;
 800ab5c:	e0d0      	b.n	800ad00 <TempCollect_Operate+0x1d8>
	case(TempCollect_Initialized):
		if(kTemperatureData.bScheduleMeasurement)
 800ab5e:	4b69      	ldr	r3, [pc, #420]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800ab60:	799b      	ldrb	r3, [r3, #6]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	f000 80cb 	beq.w	800acfe <TempCollect_Operate+0x1d6>
		{
			kTemperatureData.eState = TempCollect_TemperatureReadRequest;
 800ab68:	4b66      	ldr	r3, [pc, #408]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800ab6a:	2202      	movs	r2, #2
 800ab6c:	71da      	strb	r2, [r3, #7]
			kTemperatureData.u16ArrayASensorIndex = 0;
 800ab6e:	4b65      	ldr	r3, [pc, #404]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800ab70:	2200      	movs	r2, #0
 800ab72:	821a      	strh	r2, [r3, #16]
			kTemperatureData.u16ArrayBSensorIndex = 0;
 800ab74:	4b63      	ldr	r3, [pc, #396]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800ab76:	2200      	movs	r2, #0
 800ab78:	825a      	strh	r2, [r3, #18]
			kTemperatureData.bReadFinished[0] = false;
 800ab7a:	4b62      	ldr	r3, [pc, #392]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	721a      	strb	r2, [r3, #8]
			kTemperatureData.bReadFinished[1] = false;
 800ab80:	4b60      	ldr	r3, [pc, #384]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800ab82:	2200      	movs	r2, #0
 800ab84:	725a      	strb	r2, [r3, #9]
			kTemperatureData.u8TimeoutCounter = 0;
 800ab86:	4b5f      	ldr	r3, [pc, #380]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800ab88:	2200      	movs	r2, #0
 800ab8a:	761a      	strb	r2, [r3, #24]
		}
		break;
 800ab8c:	e0b7      	b.n	800acfe <TempCollect_Operate+0x1d6>
	case(TempCollect_TemperatureReadRequest):
		kTemperatureData.bScheduleMeasurement = false;
 800ab8e:	4b5d      	ldr	r3, [pc, #372]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800ab90:	2200      	movs	r2, #0
 800ab92:	719a      	strb	r2, [r3, #6]
		if(kTemperatureData.u16ArrayASensorIndex < MCP9808_I2CA_DeviceCount)
 800ab94:	4b5b      	ldr	r3, [pc, #364]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800ab96:	8a1b      	ldrh	r3, [r3, #16]
 800ab98:	2b04      	cmp	r3, #4
 800ab9a:	d80e      	bhi.n	800abba <TempCollect_Operate+0x92>
		{
			/*
			 * By placing "ready" flag clearing here this app will not get stuck
			 * if the sensor number on each array branch would be not equal
			 */
			kTemperatureData.bStateReady[0] = false;
 800ab9c:	4b59      	ldr	r3, [pc, #356]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800ab9e:	2200      	movs	r2, #0
 800aba0:	729a      	strb	r2, [r3, #10]
			MCP9808_Read(&kaSensorArrayDataA[kTemperatureData.u16ArrayASensorIndex]);
 800aba2:	4b58      	ldr	r3, [pc, #352]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800aba4:	8a1b      	ldrh	r3, [r3, #16]
 800aba6:	461a      	mov	r2, r3
 800aba8:	4613      	mov	r3, r2
 800abaa:	005b      	lsls	r3, r3, #1
 800abac:	4413      	add	r3, r2
 800abae:	009b      	lsls	r3, r3, #2
 800abb0:	4a55      	ldr	r2, [pc, #340]	; (800ad08 <TempCollect_Operate+0x1e0>)
 800abb2:	4413      	add	r3, r2
 800abb4:	4618      	mov	r0, r3
 800abb6:	f7f5 fd6b 	bl	8000690 <MCP9808_Read>
		}
		if(kTemperatureData.u16ArrayBSensorIndex < MCP9808_I2CB_DeviceCount)
 800abba:	4b52      	ldr	r3, [pc, #328]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800abbc:	8a5b      	ldrh	r3, [r3, #18]
 800abbe:	2b04      	cmp	r3, #4
 800abc0:	d80e      	bhi.n	800abe0 <TempCollect_Operate+0xb8>
		{
			kTemperatureData.bStateReady[1] = false;
 800abc2:	4b50      	ldr	r3, [pc, #320]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800abc4:	2200      	movs	r2, #0
 800abc6:	72da      	strb	r2, [r3, #11]
			MCP9808_Read(&kaSensorArrayDataB[kTemperatureData.u16ArrayBSensorIndex]);
 800abc8:	4b4e      	ldr	r3, [pc, #312]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800abca:	8a5b      	ldrh	r3, [r3, #18]
 800abcc:	461a      	mov	r2, r3
 800abce:	4613      	mov	r3, r2
 800abd0:	005b      	lsls	r3, r3, #1
 800abd2:	4413      	add	r3, r2
 800abd4:	009b      	lsls	r3, r3, #2
 800abd6:	4a4d      	ldr	r2, [pc, #308]	; (800ad0c <TempCollect_Operate+0x1e4>)
 800abd8:	4413      	add	r3, r2
 800abda:	4618      	mov	r0, r3
 800abdc:	f7f5 fd58 	bl	8000690 <MCP9808_Read>
		}
		kTemperatureData.eState = TempCollect_Waiting;
 800abe0:	4b48      	ldr	r3, [pc, #288]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800abe2:	2205      	movs	r2, #5
 800abe4:	71da      	strb	r2, [r3, #7]
		break;
 800abe6:	e08b      	b.n	800ad00 <TempCollect_Operate+0x1d8>
	case(TempCollect_Waiting):
		if(kTemperatureData.bStateReady[0] && kTemperatureData.bStateReady[1])
 800abe8:	4b46      	ldr	r3, [pc, #280]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800abea:	7a9b      	ldrb	r3, [r3, #10]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d00a      	beq.n	800ac06 <TempCollect_Operate+0xde>
 800abf0:	4b44      	ldr	r3, [pc, #272]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800abf2:	7adb      	ldrb	r3, [r3, #11]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d006      	beq.n	800ac06 <TempCollect_Operate+0xde>
		{
			kTemperatureData.eState = TempCollect_ProcessData;
 800abf8:	4b42      	ldr	r3, [pc, #264]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800abfa:	2203      	movs	r2, #3
 800abfc:	71da      	strb	r2, [r3, #7]
			kTemperatureData.u8TimeoutCounter = 0;
 800abfe:	4b41      	ldr	r3, [pc, #260]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800ac00:	2200      	movs	r2, #0
 800ac02:	761a      	strb	r2, [r3, #24]
		else
		{
			kTemperatureData.u8TimeoutCounter++;
			//todo: implement a timeout comm reset function
		}
		break;
 800ac04:	e07c      	b.n	800ad00 <TempCollect_Operate+0x1d8>
			kTemperatureData.u8TimeoutCounter++;
 800ac06:	4b3f      	ldr	r3, [pc, #252]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800ac08:	7e1b      	ldrb	r3, [r3, #24]
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	b2da      	uxtb	r2, r3
 800ac0e:	4b3d      	ldr	r3, [pc, #244]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800ac10:	761a      	strb	r2, [r3, #24]
		break;
 800ac12:	e075      	b.n	800ad00 <TempCollect_Operate+0x1d8>
	case(TempCollect_ProcessData):
		if( !kTemperatureData.bReadFinished[0] )
 800ac14:	4b3b      	ldr	r3, [pc, #236]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800ac16:	7a1b      	ldrb	r3, [r3, #8]
 800ac18:	f083 0301 	eor.w	r3, r3, #1
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d015      	beq.n	800ac4e <TempCollect_Operate+0x126>
		{
			#if dStoreReultsAsFloat
			kTemperatureData.fConvertedTemperature[0] = MCP9808_DecodeTemperature(&kaSensorArrayDataA[kTemperatureData.u16ArrayASensorIndex]);
			DataHandler_StoreMeasurement(kTemperatureData.fConvertedTemperature[0]);
			#else
			kTemperatureData.i16ConvertedTemperature[0] = MCP9808_DecodeTemperature(&kaSensorArrayDataA[kTemperatureData.u16ArrayASensorIndex]);
 800ac22:	4b38      	ldr	r3, [pc, #224]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800ac24:	8a1b      	ldrh	r3, [r3, #16]
 800ac26:	461a      	mov	r2, r3
 800ac28:	4613      	mov	r3, r2
 800ac2a:	005b      	lsls	r3, r3, #1
 800ac2c:	4413      	add	r3, r2
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	4a35      	ldr	r2, [pc, #212]	; (800ad08 <TempCollect_Operate+0x1e0>)
 800ac32:	4413      	add	r3, r2
 800ac34:	4618      	mov	r0, r3
 800ac36:	f7f5 fd41 	bl	80006bc <MCP9808_DecodeTemperature>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	461a      	mov	r2, r3
 800ac3e:	4b31      	ldr	r3, [pc, #196]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800ac40:	819a      	strh	r2, [r3, #12]
			DataHandler_StoreMeasurement(kTemperatureData.i16ConvertedTemperature[0]);
 800ac42:	4b30      	ldr	r3, [pc, #192]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800ac44:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f7ff feb9 	bl	800a9c0 <DataHandler_StoreMeasurement>
			#endif
		}
		if( !kTemperatureData.bReadFinished[1] )
 800ac4e:	4b2d      	ldr	r3, [pc, #180]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800ac50:	7a5b      	ldrb	r3, [r3, #9]
 800ac52:	f083 0301 	eor.w	r3, r3, #1
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d015      	beq.n	800ac88 <TempCollect_Operate+0x160>
		{
			#if dStoreReultsAsFloat
			kTemperatureData.fConvertedTemperature[1] = MCP9808_DecodeTemperature(&kaSensorArrayDataB[kTemperatureData.u16ArrayBSensorIndex]);
			DataHandler_StoreMeasurement(kTemperatureData.fConvertedTemperature[0]);
			#else
			kTemperatureData.i16ConvertedTemperature[1] = MCP9808_DecodeTemperature(&kaSensorArrayDataB[kTemperatureData.u16ArrayBSensorIndex]);
 800ac5c:	4b29      	ldr	r3, [pc, #164]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800ac5e:	8a5b      	ldrh	r3, [r3, #18]
 800ac60:	461a      	mov	r2, r3
 800ac62:	4613      	mov	r3, r2
 800ac64:	005b      	lsls	r3, r3, #1
 800ac66:	4413      	add	r3, r2
 800ac68:	009b      	lsls	r3, r3, #2
 800ac6a:	4a28      	ldr	r2, [pc, #160]	; (800ad0c <TempCollect_Operate+0x1e4>)
 800ac6c:	4413      	add	r3, r2
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7f5 fd24 	bl	80006bc <MCP9808_DecodeTemperature>
 800ac74:	4603      	mov	r3, r0
 800ac76:	461a      	mov	r2, r3
 800ac78:	4b22      	ldr	r3, [pc, #136]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800ac7a:	81da      	strh	r2, [r3, #14]
			DataHandler_StoreMeasurement(kTemperatureData.i16ConvertedTemperature[1]);
 800ac7c:	4b21      	ldr	r3, [pc, #132]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800ac7e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ac82:	4618      	mov	r0, r3
 800ac84:	f7ff fe9c 	bl	800a9c0 <DataHandler_StoreMeasurement>
			#endif
		}

		kTemperatureData.eState = TempCollect_ArmNewReading;
 800ac88:	4b1e      	ldr	r3, [pc, #120]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800ac8a:	2204      	movs	r2, #4
 800ac8c:	71da      	strb	r2, [r3, #7]
		break;
 800ac8e:	e037      	b.n	800ad00 <TempCollect_Operate+0x1d8>

	case(TempCollect_ArmNewReading):
		kTemperatureData.u16ArrayASensorIndex++;
 800ac90:	4b1c      	ldr	r3, [pc, #112]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800ac92:	8a1b      	ldrh	r3, [r3, #16]
 800ac94:	3301      	adds	r3, #1
 800ac96:	b29a      	uxth	r2, r3
 800ac98:	4b1a      	ldr	r3, [pc, #104]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800ac9a:	821a      	strh	r2, [r3, #16]

		if( kTemperatureData.u16ArrayASensorIndex >= MCP9808_I2CA_DeviceCount)
 800ac9c:	4b19      	ldr	r3, [pc, #100]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800ac9e:	8a1b      	ldrh	r3, [r3, #16]
 800aca0:	2b04      	cmp	r3, #4
 800aca2:	d902      	bls.n	800acaa <TempCollect_Operate+0x182>
		{
			kTemperatureData.bReadFinished[0] = true;
 800aca4:	4b17      	ldr	r3, [pc, #92]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800aca6:	2201      	movs	r2, #1
 800aca8:	721a      	strb	r2, [r3, #8]
		}

		kTemperatureData.u16ArrayBSensorIndex++;
 800acaa:	4b16      	ldr	r3, [pc, #88]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800acac:	8a5b      	ldrh	r3, [r3, #18]
 800acae:	3301      	adds	r3, #1
 800acb0:	b29a      	uxth	r2, r3
 800acb2:	4b14      	ldr	r3, [pc, #80]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800acb4:	825a      	strh	r2, [r3, #18]

		if( kTemperatureData.u16ArrayBSensorIndex >= MCP9808_I2CB_DeviceCount)
 800acb6:	4b13      	ldr	r3, [pc, #76]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800acb8:	8a5b      	ldrh	r3, [r3, #18]
 800acba:	2b04      	cmp	r3, #4
 800acbc:	d902      	bls.n	800acc4 <TempCollect_Operate+0x19c>
		{
			kTemperatureData.bReadFinished[1] = true;
 800acbe:	4b11      	ldr	r3, [pc, #68]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800acc0:	2201      	movs	r2, #1
 800acc2:	725a      	strb	r2, [r3, #9]
		}

		if ( kTemperatureData.bReadFinished[0] && kTemperatureData.bReadFinished[1] )
 800acc4:	4b0f      	ldr	r3, [pc, #60]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800acc6:	7a1b      	ldrb	r3, [r3, #8]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d00f      	beq.n	800acec <TempCollect_Operate+0x1c4>
 800accc:	4b0d      	ldr	r3, [pc, #52]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800acce:	7a5b      	ldrb	r3, [r3, #9]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d00b      	beq.n	800acec <TempCollect_Operate+0x1c4>
		{
			kTemperatureData.eState = TempCollect_Initialized;
 800acd4:	4b0b      	ldr	r3, [pc, #44]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800acd6:	2201      	movs	r2, #1
 800acd8:	71da      	strb	r2, [r3, #7]

			/*
			 * Open new measurement at the end of current session
			 */
			DataHandler_OpenNewMeasurement(kTemperatureData.u32MeasurementCounter++);
 800acda:	4b0a      	ldr	r3, [pc, #40]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800acdc:	695b      	ldr	r3, [r3, #20]
 800acde:	1c5a      	adds	r2, r3, #1
 800ace0:	4908      	ldr	r1, [pc, #32]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800ace2:	614a      	str	r2, [r1, #20]
 800ace4:	4618      	mov	r0, r3
 800ace6:	f7ff fdd7 	bl	800a898 <DataHandler_OpenNewMeasurement>
		}
		else
		{
			kTemperatureData.eState = TempCollect_TemperatureReadRequest;
		}
		break;
 800acea:	e009      	b.n	800ad00 <TempCollect_Operate+0x1d8>
			kTemperatureData.eState = TempCollect_TemperatureReadRequest;
 800acec:	4b05      	ldr	r3, [pc, #20]	; (800ad04 <TempCollect_Operate+0x1dc>)
 800acee:	2202      	movs	r2, #2
 800acf0:	71da      	strb	r2, [r3, #7]
		break;
 800acf2:	e005      	b.n	800ad00 <TempCollect_Operate+0x1d8>
	default:
		AssertError(AppError_TempCollectDefaultState); // Incorrect entry
 800acf4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800acf8:	f7ff fd34 	bl	800a764 <AssertError>
	break;
 800acfc:	e000      	b.n	800ad00 <TempCollect_Operate+0x1d8>
		break;
 800acfe:	bf00      	nop
	}
}
 800ad00:	bf00      	nop
 800ad02:	bd80      	pop	{r7, pc}
 800ad04:	200003d8 	.word	0x200003d8
 800ad08:	20000634 	.word	0x20000634
 800ad0c:	20000670 	.word	0x20000670

0800ad10 <TempCollect_Initialize>:

void TempCollect_Initialize()
{
 800ad10:	b480      	push	{r7}
 800ad12:	af00      	add	r7, sp, #0
	kTemperatureData.eState = TempCollect_Initialized;
 800ad14:	4b05      	ldr	r3, [pc, #20]	; (800ad2c <TempCollect_Initialize+0x1c>)
 800ad16:	2201      	movs	r2, #1
 800ad18:	71da      	strb	r2, [r3, #7]
	kTemperatureData.bEnabledFlag = true;
 800ad1a:	4b04      	ldr	r3, [pc, #16]	; (800ad2c <TempCollect_Initialize+0x1c>)
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	715a      	strb	r2, [r3, #5]
	}
	if(MCP9808_I2CB_DeviceCount == 0)
	{
		kTemperatureData.bStateReady[1] = true;
	}
}
 800ad20:	bf00      	nop
 800ad22:	46bd      	mov	sp, r7
 800ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad28:	4770      	bx	lr
 800ad2a:	bf00      	nop
 800ad2c:	200003d8 	.word	0x200003d8

0800ad30 <TempCollect_ScheduleMeasurement>:
void TempCollect_RetrieveResult(TemperatureData_t *sTemperatureData);

/* Interrupt callback functions */

void TempCollect_ScheduleMeasurement()
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	af00      	add	r7, sp, #0
	ToggleLED_D();
 800ad34:	f7f5 fbf2 	bl	800051c <ToggleLED_D>
	if(kTemperatureData.bScheduleMeasurement)
 800ad38:	4b06      	ldr	r3, [pc, #24]	; (800ad54 <TempCollect_ScheduleMeasurement+0x24>)
 800ad3a:	799b      	ldrb	r3, [r3, #6]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d004      	beq.n	800ad4a <TempCollect_ScheduleMeasurement+0x1a>
	{
		AssertError(AppError_TempCollectRequestOverlap); // Overlap of requests;
 800ad40:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ad44:	f7ff fd0e 	bl	800a764 <AssertError>
	}
	else
	{
		kTemperatureData.bScheduleMeasurement = true;
	}
}
 800ad48:	e002      	b.n	800ad50 <TempCollect_ScheduleMeasurement+0x20>
		kTemperatureData.bScheduleMeasurement = true;
 800ad4a:	4b02      	ldr	r3, [pc, #8]	; (800ad54 <TempCollect_ScheduleMeasurement+0x24>)
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	719a      	strb	r2, [r3, #6]
}
 800ad50:	bf00      	nop
 800ad52:	bd80      	pop	{r7, pc}
 800ad54:	200003d8 	.word	0x200003d8

0800ad58 <TempCollect_I2CA_Done>:

void TempCollect_I2CA_Done()
{
 800ad58:	b480      	push	{r7}
 800ad5a:	af00      	add	r7, sp, #0
	kTemperatureData.bStateReady[0] = true;
 800ad5c:	4b03      	ldr	r3, [pc, #12]	; (800ad6c <TempCollect_I2CA_Done+0x14>)
 800ad5e:	2201      	movs	r2, #1
 800ad60:	729a      	strb	r2, [r3, #10]
}
 800ad62:	bf00      	nop
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr
 800ad6c:	200003d8 	.word	0x200003d8

0800ad70 <TempCollect_I2CB_Done>:
void TempCollect_I2CB_Done()
{
 800ad70:	b480      	push	{r7}
 800ad72:	af00      	add	r7, sp, #0
	kTemperatureData.bStateReady[1] = true;
 800ad74:	4b03      	ldr	r3, [pc, #12]	; (800ad84 <TempCollect_I2CB_Done+0x14>)
 800ad76:	2201      	movs	r2, #1
 800ad78:	72da      	strb	r2, [r3, #11]
}
 800ad7a:	bf00      	nop
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr
 800ad84:	200003d8 	.word	0x200003d8

0800ad88 <USB_TransmitData>:
#if dStoreReultsAsFloat
bool USB_TransmitData(float *Dataset)
#else
bool USB_TransmitData(int16_t *Dataset)
#endif
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b084      	sub	sp, #16
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
	bool bResult = false;
 800ad90:	2300      	movs	r3, #0
 800ad92:	73fb      	strb	r3, [r7, #15]
	uint8_t * pBuf = &u8DataArray;
 800ad94:	4b09      	ldr	r3, [pc, #36]	; (800adbc <USB_TransmitData+0x34>)
 800ad96:	60bb      	str	r3, [r7, #8]

	ConvertDataToBytes( Dataset );
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 f811 	bl	800adc0 <ConvertDataToBytes>

	/*
	 * result = true means that a fault occurred
	 */

	bResult = CDC_Transmit_FS(pBuf,  2 * dMemoryWidth);
 800ad9e:	2120      	movs	r1, #32
 800ada0:	68b8      	ldr	r0, [r7, #8]
 800ada2:	f000 fe49 	bl	800ba38 <CDC_Transmit_FS>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	bf14      	ite	ne
 800adac:	2301      	movne	r3, #1
 800adae:	2300      	moveq	r3, #0
 800adb0:	73fb      	strb	r3, [r7, #15]

	return bResult;
 800adb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3710      	adds	r7, #16
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}
 800adbc:	200003f4 	.word	0x200003f4

0800adc0 <ConvertDataToBytes>:

void ConvertDataToBytes(int16_t *Dataset)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b085      	sub	sp, #20
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
	for(uint8_t u8Idx = 0; u8Idx < (2 * dMemoryWidth); u8Idx+=2)
 800adc8:	2300      	movs	r3, #0
 800adca:	73fb      	strb	r3, [r7, #15]
 800adcc:	e020      	b.n	800ae10 <ConvertDataToBytes+0x50>
	{
		u8DataArray[u8Idx] = (uint8_t)((uint16_t)Dataset[u8Idx] >> 8);
 800adce:	7bfb      	ldrb	r3, [r7, #15]
 800add0:	005b      	lsls	r3, r3, #1
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	4413      	add	r3, r2
 800add6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800adda:	b29b      	uxth	r3, r3
 800addc:	0a1b      	lsrs	r3, r3, #8
 800adde:	b29a      	uxth	r2, r3
 800ade0:	7bfb      	ldrb	r3, [r7, #15]
 800ade2:	b2d1      	uxtb	r1, r2
 800ade4:	4a0f      	ldr	r2, [pc, #60]	; (800ae24 <ConvertDataToBytes+0x64>)
 800ade6:	54d1      	strb	r1, [r2, r3]
		u8DataArray[u8Idx + 1] = (uint8_t)((uint16_t)Dataset[u8Idx] && 0x00FF);
 800ade8:	7bfb      	ldrb	r3, [r7, #15]
 800adea:	005b      	lsls	r3, r3, #1
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	4413      	add	r3, r2
 800adf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	bf14      	ite	ne
 800adf8:	2301      	movne	r3, #1
 800adfa:	2300      	moveq	r3, #0
 800adfc:	b2db      	uxtb	r3, r3
 800adfe:	461a      	mov	r2, r3
 800ae00:	7bfb      	ldrb	r3, [r7, #15]
 800ae02:	3301      	adds	r3, #1
 800ae04:	b2d1      	uxtb	r1, r2
 800ae06:	4a07      	ldr	r2, [pc, #28]	; (800ae24 <ConvertDataToBytes+0x64>)
 800ae08:	54d1      	strb	r1, [r2, r3]
	for(uint8_t u8Idx = 0; u8Idx < (2 * dMemoryWidth); u8Idx+=2)
 800ae0a:	7bfb      	ldrb	r3, [r7, #15]
 800ae0c:	3302      	adds	r3, #2
 800ae0e:	73fb      	strb	r3, [r7, #15]
 800ae10:	7bfb      	ldrb	r3, [r7, #15]
 800ae12:	2b1f      	cmp	r3, #31
 800ae14:	d9db      	bls.n	800adce <ConvertDataToBytes+0xe>
	}
}
 800ae16:	bf00      	nop
 800ae18:	bf00      	nop
 800ae1a:	3714      	adds	r7, #20
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr
 800ae24:	200003f4 	.word	0x200003f4

0800ae28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ae2c:	f7f5 fc7c 	bl	8000728 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ae30:	f000 f836 	bl	800aea0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ae34:	f000 fa0e 	bl	800b254 <MX_GPIO_Init>
  MX_DMA_Init();
 800ae38:	f000 f9ec 	bl	800b214 <MX_DMA_Init>
  MX_RTC_Init();
 800ae3c:	f000 f8f8 	bl	800b030 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 800ae40:	f000 f91c 	bl	800b07c <MX_SDIO_SD_Init>
  MX_I2C1_Init();
 800ae44:	f000 f898 	bl	800af78 <MX_I2C1_Init>
  MX_I2C2_Init();
 800ae48:	f000 f8c4 	bl	800afd4 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800ae4c:	f000 f9b8 	bl	800b1c0 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800ae50:	f000 fd34 	bl	800b8bc <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 800ae54:	f000 f942 	bl	800b0dc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  SensorArray_Init(&hi2c1, &hi2c2);
 800ae58:	490d      	ldr	r1, [pc, #52]	; (800ae90 <main+0x68>)
 800ae5a:	480e      	ldr	r0, [pc, #56]	; (800ae94 <main+0x6c>)
 800ae5c:	f7f5 fbae 	bl	80005bc <SensorArray_Init>
//  HAL_TIM_Base_MspInit(&htim2);
  HAL_TIM_Base_Start_IT(&htim2);
 800ae60:	480d      	ldr	r0, [pc, #52]	; (800ae98 <main+0x70>)
 800ae62:	f7fa fe53 	bl	8005b0c <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, SET);
 800ae66:	2201      	movs	r2, #1
 800ae68:	2101      	movs	r1, #1
 800ae6a:	480c      	ldr	r0, [pc, #48]	; (800ae9c <main+0x74>)
 800ae6c:	f7f6 faa2 	bl	80013b4 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, SET);
 800ae70:	2201      	movs	r2, #1
 800ae72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ae76:	4809      	ldr	r0, [pc, #36]	; (800ae9c <main+0x74>)
 800ae78:	f7f6 fa9c 	bl	80013b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, SET);
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ae82:	4806      	ldr	r0, [pc, #24]	; (800ae9c <main+0x74>)
 800ae84:	f7f6 fa96 	bl	80013b4 <HAL_GPIO_WritePin>

  while (1)
  {
	  ApplicationPerform();
 800ae88:	f7ff fb3a 	bl	800a500 <ApplicationPerform>
 800ae8c:	e7fc      	b.n	800ae88 <main+0x60>
 800ae8e:	bf00      	nop
 800ae90:	20000764 	.word	0x20000764
 800ae94:	20000710 	.word	0x20000710
 800ae98:	200008a0 	.word	0x200008a0
 800ae9c:	40020800 	.word	0x40020800

0800aea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b094      	sub	sp, #80	; 0x50
 800aea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800aea6:	f107 0320 	add.w	r3, r7, #32
 800aeaa:	2230      	movs	r2, #48	; 0x30
 800aeac:	2100      	movs	r1, #0
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f001 fa62 	bl	800c378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800aeb4:	f107 030c 	add.w	r3, r7, #12
 800aeb8:	2200      	movs	r2, #0
 800aeba:	601a      	str	r2, [r3, #0]
 800aebc:	605a      	str	r2, [r3, #4]
 800aebe:	609a      	str	r2, [r3, #8]
 800aec0:	60da      	str	r2, [r3, #12]
 800aec2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800aec4:	2300      	movs	r3, #0
 800aec6:	60bb      	str	r3, [r7, #8]
 800aec8:	4b29      	ldr	r3, [pc, #164]	; (800af70 <SystemClock_Config+0xd0>)
 800aeca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aecc:	4a28      	ldr	r2, [pc, #160]	; (800af70 <SystemClock_Config+0xd0>)
 800aece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aed2:	6413      	str	r3, [r2, #64]	; 0x40
 800aed4:	4b26      	ldr	r3, [pc, #152]	; (800af70 <SystemClock_Config+0xd0>)
 800aed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aedc:	60bb      	str	r3, [r7, #8]
 800aede:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800aee0:	2300      	movs	r3, #0
 800aee2:	607b      	str	r3, [r7, #4]
 800aee4:	4b23      	ldr	r3, [pc, #140]	; (800af74 <SystemClock_Config+0xd4>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	4a22      	ldr	r2, [pc, #136]	; (800af74 <SystemClock_Config+0xd4>)
 800aeea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aeee:	6013      	str	r3, [r2, #0]
 800aef0:	4b20      	ldr	r3, [pc, #128]	; (800af74 <SystemClock_Config+0xd4>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800aef8:	607b      	str	r3, [r7, #4]
 800aefa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800aefc:	2305      	movs	r3, #5
 800aefe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800af00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800af04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800af06:	2301      	movs	r3, #1
 800af08:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800af0a:	2302      	movs	r3, #2
 800af0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800af0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800af12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800af14:	230c      	movs	r3, #12
 800af16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800af18:	2348      	movs	r3, #72	; 0x48
 800af1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800af1c:	2302      	movs	r3, #2
 800af1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800af20:	2303      	movs	r3, #3
 800af22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800af24:	f107 0320 	add.w	r3, r7, #32
 800af28:	4618      	mov	r0, r3
 800af2a:	f7f9 f9ad 	bl	8004288 <HAL_RCC_OscConfig>
 800af2e:	4603      	mov	r3, r0
 800af30:	2b00      	cmp	r3, #0
 800af32:	d001      	beq.n	800af38 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800af34:	f000 fa10 	bl	800b358 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800af38:	230f      	movs	r3, #15
 800af3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800af3c:	2302      	movs	r3, #2
 800af3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800af40:	2300      	movs	r3, #0
 800af42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800af44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800af4a:	2300      	movs	r3, #0
 800af4c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800af4e:	f107 030c 	add.w	r3, r7, #12
 800af52:	2102      	movs	r1, #2
 800af54:	4618      	mov	r0, r3
 800af56:	f7f9 fc0d 	bl	8004774 <HAL_RCC_ClockConfig>
 800af5a:	4603      	mov	r3, r0
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d001      	beq.n	800af64 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800af60:	f000 f9fa 	bl	800b358 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800af64:	f7f9 fcec 	bl	8004940 <HAL_RCC_EnableCSS>
}
 800af68:	bf00      	nop
 800af6a:	3750      	adds	r7, #80	; 0x50
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}
 800af70:	40023800 	.word	0x40023800
 800af74:	40007000 	.word	0x40007000

0800af78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800af7c:	4b13      	ldr	r3, [pc, #76]	; (800afcc <MX_I2C1_Init+0x54>)
 800af7e:	4a14      	ldr	r2, [pc, #80]	; (800afd0 <MX_I2C1_Init+0x58>)
 800af80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 25000;
 800af82:	4b12      	ldr	r3, [pc, #72]	; (800afcc <MX_I2C1_Init+0x54>)
 800af84:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800af88:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800af8a:	4b10      	ldr	r3, [pc, #64]	; (800afcc <MX_I2C1_Init+0x54>)
 800af8c:	2200      	movs	r2, #0
 800af8e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800af90:	4b0e      	ldr	r3, [pc, #56]	; (800afcc <MX_I2C1_Init+0x54>)
 800af92:	2200      	movs	r2, #0
 800af94:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800af96:	4b0d      	ldr	r3, [pc, #52]	; (800afcc <MX_I2C1_Init+0x54>)
 800af98:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800af9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800af9e:	4b0b      	ldr	r3, [pc, #44]	; (800afcc <MX_I2C1_Init+0x54>)
 800afa0:	2200      	movs	r2, #0
 800afa2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800afa4:	4b09      	ldr	r3, [pc, #36]	; (800afcc <MX_I2C1_Init+0x54>)
 800afa6:	2200      	movs	r2, #0
 800afa8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800afaa:	4b08      	ldr	r3, [pc, #32]	; (800afcc <MX_I2C1_Init+0x54>)
 800afac:	2200      	movs	r2, #0
 800afae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800afb0:	4b06      	ldr	r3, [pc, #24]	; (800afcc <MX_I2C1_Init+0x54>)
 800afb2:	2200      	movs	r2, #0
 800afb4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800afb6:	4805      	ldr	r0, [pc, #20]	; (800afcc <MX_I2C1_Init+0x54>)
 800afb8:	f7f6 fa30 	bl	800141c <HAL_I2C_Init>
 800afbc:	4603      	mov	r3, r0
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d001      	beq.n	800afc6 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800afc2:	f000 f9c9 	bl	800b358 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800afc6:	bf00      	nop
 800afc8:	bd80      	pop	{r7, pc}
 800afca:	bf00      	nop
 800afcc:	20000710 	.word	0x20000710
 800afd0:	40005400 	.word	0x40005400

0800afd4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800afd8:	4b13      	ldr	r3, [pc, #76]	; (800b028 <MX_I2C2_Init+0x54>)
 800afda:	4a14      	ldr	r2, [pc, #80]	; (800b02c <MX_I2C2_Init+0x58>)
 800afdc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 25000;
 800afde:	4b12      	ldr	r3, [pc, #72]	; (800b028 <MX_I2C2_Init+0x54>)
 800afe0:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800afe4:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800afe6:	4b10      	ldr	r3, [pc, #64]	; (800b028 <MX_I2C2_Init+0x54>)
 800afe8:	2200      	movs	r2, #0
 800afea:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800afec:	4b0e      	ldr	r3, [pc, #56]	; (800b028 <MX_I2C2_Init+0x54>)
 800afee:	2200      	movs	r2, #0
 800aff0:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800aff2:	4b0d      	ldr	r3, [pc, #52]	; (800b028 <MX_I2C2_Init+0x54>)
 800aff4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800aff8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800affa:	4b0b      	ldr	r3, [pc, #44]	; (800b028 <MX_I2C2_Init+0x54>)
 800affc:	2200      	movs	r2, #0
 800affe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800b000:	4b09      	ldr	r3, [pc, #36]	; (800b028 <MX_I2C2_Init+0x54>)
 800b002:	2200      	movs	r2, #0
 800b004:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b006:	4b08      	ldr	r3, [pc, #32]	; (800b028 <MX_I2C2_Init+0x54>)
 800b008:	2200      	movs	r2, #0
 800b00a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b00c:	4b06      	ldr	r3, [pc, #24]	; (800b028 <MX_I2C2_Init+0x54>)
 800b00e:	2200      	movs	r2, #0
 800b010:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800b012:	4805      	ldr	r0, [pc, #20]	; (800b028 <MX_I2C2_Init+0x54>)
 800b014:	f7f6 fa02 	bl	800141c <HAL_I2C_Init>
 800b018:	4603      	mov	r3, r0
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d001      	beq.n	800b022 <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 800b01e:	f000 f99b 	bl	800b358 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800b022:	bf00      	nop
 800b024:	bd80      	pop	{r7, pc}
 800b026:	bf00      	nop
 800b028:	20000764 	.word	0x20000764
 800b02c:	40005800 	.word	0x40005800

0800b030 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800b034:	4b0f      	ldr	r3, [pc, #60]	; (800b074 <MX_RTC_Init+0x44>)
 800b036:	4a10      	ldr	r2, [pc, #64]	; (800b078 <MX_RTC_Init+0x48>)
 800b038:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800b03a:	4b0e      	ldr	r3, [pc, #56]	; (800b074 <MX_RTC_Init+0x44>)
 800b03c:	2200      	movs	r2, #0
 800b03e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800b040:	4b0c      	ldr	r3, [pc, #48]	; (800b074 <MX_RTC_Init+0x44>)
 800b042:	227f      	movs	r2, #127	; 0x7f
 800b044:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800b046:	4b0b      	ldr	r3, [pc, #44]	; (800b074 <MX_RTC_Init+0x44>)
 800b048:	22ff      	movs	r2, #255	; 0xff
 800b04a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800b04c:	4b09      	ldr	r3, [pc, #36]	; (800b074 <MX_RTC_Init+0x44>)
 800b04e:	2200      	movs	r2, #0
 800b050:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800b052:	4b08      	ldr	r3, [pc, #32]	; (800b074 <MX_RTC_Init+0x44>)
 800b054:	2200      	movs	r2, #0
 800b056:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800b058:	4b06      	ldr	r3, [pc, #24]	; (800b074 <MX_RTC_Init+0x44>)
 800b05a:	2200      	movs	r2, #0
 800b05c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800b05e:	4805      	ldr	r0, [pc, #20]	; (800b074 <MX_RTC_Init+0x44>)
 800b060:	f7f9 fe70 	bl	8004d44 <HAL_RTC_Init>
 800b064:	4603      	mov	r3, r0
 800b066:	2b00      	cmp	r3, #0
 800b068:	d001      	beq.n	800b06e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800b06a:	f000 f975 	bl	800b358 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800b06e:	bf00      	nop
 800b070:	bd80      	pop	{r7, pc}
 800b072:	bf00      	nop
 800b074:	200007fc 	.word	0x200007fc
 800b078:	40002800 	.word	0x40002800

0800b07c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800b080:	4b14      	ldr	r3, [pc, #80]	; (800b0d4 <MX_SDIO_SD_Init+0x58>)
 800b082:	4a15      	ldr	r2, [pc, #84]	; (800b0d8 <MX_SDIO_SD_Init+0x5c>)
 800b084:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800b086:	4b13      	ldr	r3, [pc, #76]	; (800b0d4 <MX_SDIO_SD_Init+0x58>)
 800b088:	2200      	movs	r2, #0
 800b08a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800b08c:	4b11      	ldr	r3, [pc, #68]	; (800b0d4 <MX_SDIO_SD_Init+0x58>)
 800b08e:	2200      	movs	r2, #0
 800b090:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800b092:	4b10      	ldr	r3, [pc, #64]	; (800b0d4 <MX_SDIO_SD_Init+0x58>)
 800b094:	2200      	movs	r2, #0
 800b096:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800b098:	4b0e      	ldr	r3, [pc, #56]	; (800b0d4 <MX_SDIO_SD_Init+0x58>)
 800b09a:	2200      	movs	r2, #0
 800b09c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800b09e:	4b0d      	ldr	r3, [pc, #52]	; (800b0d4 <MX_SDIO_SD_Init+0x58>)
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800b0a4:	4b0b      	ldr	r3, [pc, #44]	; (800b0d4 <MX_SDIO_SD_Init+0x58>)
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 800b0aa:	480a      	ldr	r0, [pc, #40]	; (800b0d4 <MX_SDIO_SD_Init+0x58>)
 800b0ac:	f7f9 ff2f 	bl	8004f0e <HAL_SD_Init>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d001      	beq.n	800b0ba <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 800b0b6:	f000 f94f 	bl	800b358 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800b0ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b0be:	4805      	ldr	r0, [pc, #20]	; (800b0d4 <MX_SDIO_SD_Init+0x58>)
 800b0c0:	f7fa f978 	bl	80053b4 <HAL_SD_ConfigWideBusOperation>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d001      	beq.n	800b0ce <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 800b0ca:	f000 f945 	bl	800b358 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800b0ce:	bf00      	nop
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	2000081c 	.word	0x2000081c
 800b0d8:	40012c00 	.word	0x40012c00

0800b0dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b08e      	sub	sp, #56	; 0x38
 800b0e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b0e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	601a      	str	r2, [r3, #0]
 800b0ea:	605a      	str	r2, [r3, #4]
 800b0ec:	609a      	str	r2, [r3, #8]
 800b0ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b0f0:	f107 0320 	add.w	r3, r7, #32
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	601a      	str	r2, [r3, #0]
 800b0f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b0fa:	1d3b      	adds	r3, r7, #4
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	601a      	str	r2, [r3, #0]
 800b100:	605a      	str	r2, [r3, #4]
 800b102:	609a      	str	r2, [r3, #8]
 800b104:	60da      	str	r2, [r3, #12]
 800b106:	611a      	str	r2, [r3, #16]
 800b108:	615a      	str	r2, [r3, #20]
 800b10a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800b10c:	4b2b      	ldr	r3, [pc, #172]	; (800b1bc <MX_TIM2_Init+0xe0>)
 800b10e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b112:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 800b114:	4b29      	ldr	r3, [pc, #164]	; (800b1bc <MX_TIM2_Init+0xe0>)
 800b116:	2248      	movs	r2, #72	; 0x48
 800b118:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b11a:	4b28      	ldr	r3, [pc, #160]	; (800b1bc <MX_TIM2_Init+0xe0>)
 800b11c:	2200      	movs	r2, #0
 800b11e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 25000;
 800b120:	4b26      	ldr	r3, [pc, #152]	; (800b1bc <MX_TIM2_Init+0xe0>)
 800b122:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800b126:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b128:	4b24      	ldr	r3, [pc, #144]	; (800b1bc <MX_TIM2_Init+0xe0>)
 800b12a:	2200      	movs	r2, #0
 800b12c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800b12e:	4b23      	ldr	r3, [pc, #140]	; (800b1bc <MX_TIM2_Init+0xe0>)
 800b130:	2280      	movs	r2, #128	; 0x80
 800b132:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b134:	4821      	ldr	r0, [pc, #132]	; (800b1bc <MX_TIM2_Init+0xe0>)
 800b136:	f7fa fc9a 	bl	8005a6e <HAL_TIM_Base_Init>
 800b13a:	4603      	mov	r3, r0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d001      	beq.n	800b144 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800b140:	f000 f90a 	bl	800b358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b148:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b14a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b14e:	4619      	mov	r1, r3
 800b150:	481a      	ldr	r0, [pc, #104]	; (800b1bc <MX_TIM2_Init+0xe0>)
 800b152:	f7fa fefb 	bl	8005f4c <HAL_TIM_ConfigClockSource>
 800b156:	4603      	mov	r3, r0
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d001      	beq.n	800b160 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800b15c:	f000 f8fc 	bl	800b358 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800b160:	4816      	ldr	r0, [pc, #88]	; (800b1bc <MX_TIM2_Init+0xe0>)
 800b162:	f7fa fd35 	bl	8005bd0 <HAL_TIM_OC_Init>
 800b166:	4603      	mov	r3, r0
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d001      	beq.n	800b170 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800b16c:	f000 f8f4 	bl	800b358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b170:	2300      	movs	r3, #0
 800b172:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b174:	2300      	movs	r3, #0
 800b176:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b178:	f107 0320 	add.w	r3, r7, #32
 800b17c:	4619      	mov	r1, r3
 800b17e:	480f      	ldr	r0, [pc, #60]	; (800b1bc <MX_TIM2_Init+0xe0>)
 800b180:	f7fb fa84 	bl	800668c <HAL_TIMEx_MasterConfigSynchronization>
 800b184:	4603      	mov	r3, r0
 800b186:	2b00      	cmp	r3, #0
 800b188:	d001      	beq.n	800b18e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800b18a:	f000 f8e5 	bl	800b358 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800b18e:	2300      	movs	r3, #0
 800b190:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800b192:	2300      	movs	r3, #0
 800b194:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b196:	2300      	movs	r3, #0
 800b198:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b19a:	2300      	movs	r3, #0
 800b19c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b19e:	1d3b      	adds	r3, r7, #4
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	4805      	ldr	r0, [pc, #20]	; (800b1bc <MX_TIM2_Init+0xe0>)
 800b1a6:	f7fa fe75 	bl	8005e94 <HAL_TIM_OC_ConfigChannel>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d001      	beq.n	800b1b4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800b1b0:	f000 f8d2 	bl	800b358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800b1b4:	bf00      	nop
 800b1b6:	3738      	adds	r7, #56	; 0x38
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}
 800b1bc:	200008a0 	.word	0x200008a0

0800b1c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800b1c4:	4b11      	ldr	r3, [pc, #68]	; (800b20c <MX_USART1_UART_Init+0x4c>)
 800b1c6:	4a12      	ldr	r2, [pc, #72]	; (800b210 <MX_USART1_UART_Init+0x50>)
 800b1c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800b1ca:	4b10      	ldr	r3, [pc, #64]	; (800b20c <MX_USART1_UART_Init+0x4c>)
 800b1cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b1d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b1d2:	4b0e      	ldr	r3, [pc, #56]	; (800b20c <MX_USART1_UART_Init+0x4c>)
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b1d8:	4b0c      	ldr	r3, [pc, #48]	; (800b20c <MX_USART1_UART_Init+0x4c>)
 800b1da:	2200      	movs	r2, #0
 800b1dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b1de:	4b0b      	ldr	r3, [pc, #44]	; (800b20c <MX_USART1_UART_Init+0x4c>)
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b1e4:	4b09      	ldr	r3, [pc, #36]	; (800b20c <MX_USART1_UART_Init+0x4c>)
 800b1e6:	220c      	movs	r2, #12
 800b1e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b1ea:	4b08      	ldr	r3, [pc, #32]	; (800b20c <MX_USART1_UART_Init+0x4c>)
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b1f0:	4b06      	ldr	r3, [pc, #24]	; (800b20c <MX_USART1_UART_Init+0x4c>)
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b1f6:	4805      	ldr	r0, [pc, #20]	; (800b20c <MX_USART1_UART_Init+0x4c>)
 800b1f8:	f7fb faca 	bl	8006790 <HAL_UART_Init>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d001      	beq.n	800b206 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800b202:	f000 f8a9 	bl	800b358 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800b206:	bf00      	nop
 800b208:	bd80      	pop	{r7, pc}
 800b20a:	bf00      	nop
 800b20c:	200007b8 	.word	0x200007b8
 800b210:	40011000 	.word	0x40011000

0800b214 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b082      	sub	sp, #8
 800b218:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800b21a:	2300      	movs	r3, #0
 800b21c:	607b      	str	r3, [r7, #4]
 800b21e:	4b0c      	ldr	r3, [pc, #48]	; (800b250 <MX_DMA_Init+0x3c>)
 800b220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b222:	4a0b      	ldr	r2, [pc, #44]	; (800b250 <MX_DMA_Init+0x3c>)
 800b224:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b228:	6313      	str	r3, [r2, #48]	; 0x30
 800b22a:	4b09      	ldr	r3, [pc, #36]	; (800b250 <MX_DMA_Init+0x3c>)
 800b22c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b22e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b232:	607b      	str	r3, [r7, #4]
 800b234:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800b236:	2200      	movs	r2, #0
 800b238:	2100      	movs	r1, #0
 800b23a:	200c      	movs	r0, #12
 800b23c:	f7f5 fbe5 	bl	8000a0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800b240:	200c      	movs	r0, #12
 800b242:	f7f5 fbfe 	bl	8000a42 <HAL_NVIC_EnableIRQ>

}
 800b246:	bf00      	nop
 800b248:	3708      	adds	r7, #8
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	bf00      	nop
 800b250:	40023800 	.word	0x40023800

0800b254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b08a      	sub	sp, #40	; 0x28
 800b258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b25a:	f107 0314 	add.w	r3, r7, #20
 800b25e:	2200      	movs	r2, #0
 800b260:	601a      	str	r2, [r3, #0]
 800b262:	605a      	str	r2, [r3, #4]
 800b264:	609a      	str	r2, [r3, #8]
 800b266:	60da      	str	r2, [r3, #12]
 800b268:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b26a:	2300      	movs	r3, #0
 800b26c:	613b      	str	r3, [r7, #16]
 800b26e:	4b37      	ldr	r3, [pc, #220]	; (800b34c <MX_GPIO_Init+0xf8>)
 800b270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b272:	4a36      	ldr	r2, [pc, #216]	; (800b34c <MX_GPIO_Init+0xf8>)
 800b274:	f043 0304 	orr.w	r3, r3, #4
 800b278:	6313      	str	r3, [r2, #48]	; 0x30
 800b27a:	4b34      	ldr	r3, [pc, #208]	; (800b34c <MX_GPIO_Init+0xf8>)
 800b27c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b27e:	f003 0304 	and.w	r3, r3, #4
 800b282:	613b      	str	r3, [r7, #16]
 800b284:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b286:	2300      	movs	r3, #0
 800b288:	60fb      	str	r3, [r7, #12]
 800b28a:	4b30      	ldr	r3, [pc, #192]	; (800b34c <MX_GPIO_Init+0xf8>)
 800b28c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b28e:	4a2f      	ldr	r2, [pc, #188]	; (800b34c <MX_GPIO_Init+0xf8>)
 800b290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b294:	6313      	str	r3, [r2, #48]	; 0x30
 800b296:	4b2d      	ldr	r3, [pc, #180]	; (800b34c <MX_GPIO_Init+0xf8>)
 800b298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b29a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b29e:	60fb      	str	r3, [r7, #12]
 800b2a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	60bb      	str	r3, [r7, #8]
 800b2a6:	4b29      	ldr	r3, [pc, #164]	; (800b34c <MX_GPIO_Init+0xf8>)
 800b2a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2aa:	4a28      	ldr	r2, [pc, #160]	; (800b34c <MX_GPIO_Init+0xf8>)
 800b2ac:	f043 0301 	orr.w	r3, r3, #1
 800b2b0:	6313      	str	r3, [r2, #48]	; 0x30
 800b2b2:	4b26      	ldr	r3, [pc, #152]	; (800b34c <MX_GPIO_Init+0xf8>)
 800b2b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2b6:	f003 0301 	and.w	r3, r3, #1
 800b2ba:	60bb      	str	r3, [r7, #8]
 800b2bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b2be:	2300      	movs	r3, #0
 800b2c0:	607b      	str	r3, [r7, #4]
 800b2c2:	4b22      	ldr	r3, [pc, #136]	; (800b34c <MX_GPIO_Init+0xf8>)
 800b2c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2c6:	4a21      	ldr	r2, [pc, #132]	; (800b34c <MX_GPIO_Init+0xf8>)
 800b2c8:	f043 0302 	orr.w	r3, r3, #2
 800b2cc:	6313      	str	r3, [r2, #48]	; 0x30
 800b2ce:	4b1f      	ldr	r3, [pc, #124]	; (800b34c <MX_GPIO_Init+0xf8>)
 800b2d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2d2:	f003 0302 	and.w	r3, r3, #2
 800b2d6:	607b      	str	r3, [r7, #4]
 800b2d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, I2C2_VDD_Pin|LED0_Pin|LED1_Pin|LED2_Pin
 800b2da:	2200      	movs	r2, #0
 800b2dc:	f243 010f 	movw	r1, #12303	; 0x300f
 800b2e0:	481b      	ldr	r0, [pc, #108]	; (800b350 <MX_GPIO_Init+0xfc>)
 800b2e2:	f7f6 f867 	bl	80013b4 <HAL_GPIO_WritePin>
                          |LED3_Pin|I2C1_VDD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PIN_0_Pin|PIN_1_Pin|PIN_2_Pin, GPIO_PIN_RESET);
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	2107      	movs	r1, #7
 800b2ea:	481a      	ldr	r0, [pc, #104]	; (800b354 <MX_GPIO_Init+0x100>)
 800b2ec:	f7f6 f862 	bl	80013b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : I2C2_VDD_Pin LED0_Pin LED1_Pin LED2_Pin
                           LED3_Pin I2C1_VDD_Pin */
  GPIO_InitStruct.Pin = I2C2_VDD_Pin|LED0_Pin|LED1_Pin|LED2_Pin
 800b2f0:	f243 030f 	movw	r3, #12303	; 0x300f
 800b2f4:	617b      	str	r3, [r7, #20]
                          |LED3_Pin|I2C1_VDD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b2fe:	2300      	movs	r3, #0
 800b300:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b302:	f107 0314 	add.w	r3, r7, #20
 800b306:	4619      	mov	r1, r3
 800b308:	4811      	ldr	r0, [pc, #68]	; (800b350 <MX_GPIO_Init+0xfc>)
 800b30a:	f7f5 fecf 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN_0_Pin PIN_1_Pin PIN_2_Pin */
  GPIO_InitStruct.Pin = PIN_0_Pin|PIN_1_Pin|PIN_2_Pin;
 800b30e:	2307      	movs	r3, #7
 800b310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b312:	2301      	movs	r3, #1
 800b314:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b316:	2300      	movs	r3, #0
 800b318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b31a:	2300      	movs	r3, #0
 800b31c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b31e:	f107 0314 	add.w	r3, r7, #20
 800b322:	4619      	mov	r1, r3
 800b324:	480b      	ldr	r0, [pc, #44]	; (800b354 <MX_GPIO_Init+0x100>)
 800b326:	f7f5 fec1 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VSENSE_Pin */
  GPIO_InitStruct.Pin = USB_VSENSE_Pin;
 800b32a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b32e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b330:	2300      	movs	r3, #0
 800b332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b334:	2300      	movs	r3, #0
 800b336:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_VSENSE_GPIO_Port, &GPIO_InitStruct);
 800b338:	f107 0314 	add.w	r3, r7, #20
 800b33c:	4619      	mov	r1, r3
 800b33e:	4805      	ldr	r0, [pc, #20]	; (800b354 <MX_GPIO_Init+0x100>)
 800b340:	f7f5 feb4 	bl	80010ac <HAL_GPIO_Init>

}
 800b344:	bf00      	nop
 800b346:	3728      	adds	r7, #40	; 0x28
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	40023800 	.word	0x40023800
 800b350:	40020800 	.word	0x40020800
 800b354:	40020000 	.word	0x40020000

0800b358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b358:	b480      	push	{r7}
 800b35a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800b35c:	b672      	cpsid	i
}
 800b35e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800b360:	e7fe      	b.n	800b360 <Error_Handler+0x8>
	...

0800b364 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b364:	b480      	push	{r7}
 800b366:	b083      	sub	sp, #12
 800b368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b36a:	2300      	movs	r3, #0
 800b36c:	607b      	str	r3, [r7, #4]
 800b36e:	4b10      	ldr	r3, [pc, #64]	; (800b3b0 <HAL_MspInit+0x4c>)
 800b370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b372:	4a0f      	ldr	r2, [pc, #60]	; (800b3b0 <HAL_MspInit+0x4c>)
 800b374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b378:	6453      	str	r3, [r2, #68]	; 0x44
 800b37a:	4b0d      	ldr	r3, [pc, #52]	; (800b3b0 <HAL_MspInit+0x4c>)
 800b37c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b37e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b382:	607b      	str	r3, [r7, #4]
 800b384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b386:	2300      	movs	r3, #0
 800b388:	603b      	str	r3, [r7, #0]
 800b38a:	4b09      	ldr	r3, [pc, #36]	; (800b3b0 <HAL_MspInit+0x4c>)
 800b38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b38e:	4a08      	ldr	r2, [pc, #32]	; (800b3b0 <HAL_MspInit+0x4c>)
 800b390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b394:	6413      	str	r3, [r2, #64]	; 0x40
 800b396:	4b06      	ldr	r3, [pc, #24]	; (800b3b0 <HAL_MspInit+0x4c>)
 800b398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b39a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b39e:	603b      	str	r3, [r7, #0]
 800b3a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b3a2:	bf00      	nop
 800b3a4:	370c      	adds	r7, #12
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ac:	4770      	bx	lr
 800b3ae:	bf00      	nop
 800b3b0:	40023800 	.word	0x40023800

0800b3b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b08c      	sub	sp, #48	; 0x30
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b3bc:	f107 031c 	add.w	r3, r7, #28
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	601a      	str	r2, [r3, #0]
 800b3c4:	605a      	str	r2, [r3, #4]
 800b3c6:	609a      	str	r2, [r3, #8]
 800b3c8:	60da      	str	r2, [r3, #12]
 800b3ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4a59      	ldr	r2, [pc, #356]	; (800b538 <HAL_I2C_MspInit+0x184>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d162      	bne.n	800b49c <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	61bb      	str	r3, [r7, #24]
 800b3da:	4b58      	ldr	r3, [pc, #352]	; (800b53c <HAL_I2C_MspInit+0x188>)
 800b3dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3de:	4a57      	ldr	r2, [pc, #348]	; (800b53c <HAL_I2C_MspInit+0x188>)
 800b3e0:	f043 0302 	orr.w	r3, r3, #2
 800b3e4:	6313      	str	r3, [r2, #48]	; 0x30
 800b3e6:	4b55      	ldr	r3, [pc, #340]	; (800b53c <HAL_I2C_MspInit+0x188>)
 800b3e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3ea:	f003 0302 	and.w	r3, r3, #2
 800b3ee:	61bb      	str	r3, [r7, #24]
 800b3f0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b3f2:	23c0      	movs	r3, #192	; 0xc0
 800b3f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b3f6:	2312      	movs	r3, #18
 800b3f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b3fe:	2303      	movs	r3, #3
 800b400:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800b402:	2304      	movs	r3, #4
 800b404:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b406:	f107 031c 	add.w	r3, r7, #28
 800b40a:	4619      	mov	r1, r3
 800b40c:	484c      	ldr	r0, [pc, #304]	; (800b540 <HAL_I2C_MspInit+0x18c>)
 800b40e:	f7f5 fe4d 	bl	80010ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b412:	2300      	movs	r3, #0
 800b414:	617b      	str	r3, [r7, #20]
 800b416:	4b49      	ldr	r3, [pc, #292]	; (800b53c <HAL_I2C_MspInit+0x188>)
 800b418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b41a:	4a48      	ldr	r2, [pc, #288]	; (800b53c <HAL_I2C_MspInit+0x188>)
 800b41c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b420:	6413      	str	r3, [r2, #64]	; 0x40
 800b422:	4b46      	ldr	r3, [pc, #280]	; (800b53c <HAL_I2C_MspInit+0x188>)
 800b424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b426:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b42a:	617b      	str	r3, [r7, #20]
 800b42c:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 800b42e:	4b45      	ldr	r3, [pc, #276]	; (800b544 <HAL_I2C_MspInit+0x190>)
 800b430:	4a45      	ldr	r2, [pc, #276]	; (800b548 <HAL_I2C_MspInit+0x194>)
 800b432:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800b434:	4b43      	ldr	r3, [pc, #268]	; (800b544 <HAL_I2C_MspInit+0x190>)
 800b436:	2200      	movs	r2, #0
 800b438:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b43a:	4b42      	ldr	r3, [pc, #264]	; (800b544 <HAL_I2C_MspInit+0x190>)
 800b43c:	2240      	movs	r2, #64	; 0x40
 800b43e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b440:	4b40      	ldr	r3, [pc, #256]	; (800b544 <HAL_I2C_MspInit+0x190>)
 800b442:	2200      	movs	r2, #0
 800b444:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b446:	4b3f      	ldr	r3, [pc, #252]	; (800b544 <HAL_I2C_MspInit+0x190>)
 800b448:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b44c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b44e:	4b3d      	ldr	r3, [pc, #244]	; (800b544 <HAL_I2C_MspInit+0x190>)
 800b450:	2200      	movs	r2, #0
 800b452:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b454:	4b3b      	ldr	r3, [pc, #236]	; (800b544 <HAL_I2C_MspInit+0x190>)
 800b456:	2200      	movs	r2, #0
 800b458:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800b45a:	4b3a      	ldr	r3, [pc, #232]	; (800b544 <HAL_I2C_MspInit+0x190>)
 800b45c:	2200      	movs	r2, #0
 800b45e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800b460:	4b38      	ldr	r3, [pc, #224]	; (800b544 <HAL_I2C_MspInit+0x190>)
 800b462:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b466:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b468:	4b36      	ldr	r3, [pc, #216]	; (800b544 <HAL_I2C_MspInit+0x190>)
 800b46a:	2200      	movs	r2, #0
 800b46c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800b46e:	4835      	ldr	r0, [pc, #212]	; (800b544 <HAL_I2C_MspInit+0x190>)
 800b470:	f7f5 fb02 	bl	8000a78 <HAL_DMA_Init>
 800b474:	4603      	mov	r3, r0
 800b476:	2b00      	cmp	r3, #0
 800b478:	d001      	beq.n	800b47e <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 800b47a:	f7ff ff6d 	bl	800b358 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	4a30      	ldr	r2, [pc, #192]	; (800b544 <HAL_I2C_MspInit+0x190>)
 800b482:	635a      	str	r2, [r3, #52]	; 0x34
 800b484:	4a2f      	ldr	r2, [pc, #188]	; (800b544 <HAL_I2C_MspInit+0x190>)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800b48a:	2200      	movs	r2, #0
 800b48c:	2100      	movs	r1, #0
 800b48e:	201f      	movs	r0, #31
 800b490:	f7f5 fabb 	bl	8000a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800b494:	201f      	movs	r0, #31
 800b496:	f7f5 fad4 	bl	8000a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800b49a:	e049      	b.n	800b530 <HAL_I2C_MspInit+0x17c>
  else if(hi2c->Instance==I2C2)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	4a2a      	ldr	r2, [pc, #168]	; (800b54c <HAL_I2C_MspInit+0x198>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d144      	bne.n	800b530 <HAL_I2C_MspInit+0x17c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	613b      	str	r3, [r7, #16]
 800b4aa:	4b24      	ldr	r3, [pc, #144]	; (800b53c <HAL_I2C_MspInit+0x188>)
 800b4ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4ae:	4a23      	ldr	r2, [pc, #140]	; (800b53c <HAL_I2C_MspInit+0x188>)
 800b4b0:	f043 0302 	orr.w	r3, r3, #2
 800b4b4:	6313      	str	r3, [r2, #48]	; 0x30
 800b4b6:	4b21      	ldr	r3, [pc, #132]	; (800b53c <HAL_I2C_MspInit+0x188>)
 800b4b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4ba:	f003 0302 	and.w	r3, r3, #2
 800b4be:	613b      	str	r3, [r7, #16]
 800b4c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800b4c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b4c8:	2312      	movs	r3, #18
 800b4ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4d0:	2303      	movs	r3, #3
 800b4d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800b4d4:	2304      	movs	r3, #4
 800b4d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b4d8:	f107 031c 	add.w	r3, r7, #28
 800b4dc:	4619      	mov	r1, r3
 800b4de:	4818      	ldr	r0, [pc, #96]	; (800b540 <HAL_I2C_MspInit+0x18c>)
 800b4e0:	f7f5 fde4 	bl	80010ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800b4e4:	2308      	movs	r3, #8
 800b4e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b4e8:	2312      	movs	r3, #18
 800b4ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4f0:	2303      	movs	r3, #3
 800b4f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800b4f4:	2309      	movs	r3, #9
 800b4f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b4f8:	f107 031c 	add.w	r3, r7, #28
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	4810      	ldr	r0, [pc, #64]	; (800b540 <HAL_I2C_MspInit+0x18c>)
 800b500:	f7f5 fdd4 	bl	80010ac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800b504:	2300      	movs	r3, #0
 800b506:	60fb      	str	r3, [r7, #12]
 800b508:	4b0c      	ldr	r3, [pc, #48]	; (800b53c <HAL_I2C_MspInit+0x188>)
 800b50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b50c:	4a0b      	ldr	r2, [pc, #44]	; (800b53c <HAL_I2C_MspInit+0x188>)
 800b50e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b512:	6413      	str	r3, [r2, #64]	; 0x40
 800b514:	4b09      	ldr	r3, [pc, #36]	; (800b53c <HAL_I2C_MspInit+0x188>)
 800b516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b518:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b51c:	60fb      	str	r3, [r7, #12]
 800b51e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800b520:	2200      	movs	r2, #0
 800b522:	2100      	movs	r1, #0
 800b524:	2021      	movs	r0, #33	; 0x21
 800b526:	f7f5 fa70 	bl	8000a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800b52a:	2021      	movs	r0, #33	; 0x21
 800b52c:	f7f5 fa89 	bl	8000a42 <HAL_NVIC_EnableIRQ>
}
 800b530:	bf00      	nop
 800b532:	3730      	adds	r7, #48	; 0x30
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	40005400 	.word	0x40005400
 800b53c:	40023800 	.word	0x40023800
 800b540:	40020400 	.word	0x40020400
 800b544:	200006b0 	.word	0x200006b0
 800b548:	40026028 	.word	0x40026028
 800b54c:	40005800 	.word	0x40005800

0800b550 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b088      	sub	sp, #32
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b558:	f107 0308 	add.w	r3, r7, #8
 800b55c:	2200      	movs	r2, #0
 800b55e:	601a      	str	r2, [r3, #0]
 800b560:	605a      	str	r2, [r3, #4]
 800b562:	609a      	str	r2, [r3, #8]
 800b564:	60da      	str	r2, [r3, #12]
 800b566:	611a      	str	r2, [r3, #16]
 800b568:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4a0c      	ldr	r2, [pc, #48]	; (800b5a0 <HAL_RTC_MspInit+0x50>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d111      	bne.n	800b598 <HAL_RTC_MspInit+0x48>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b574:	2302      	movs	r3, #2
 800b576:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800b578:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b57c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b57e:	f107 0308 	add.w	r3, r7, #8
 800b582:	4618      	mov	r0, r3
 800b584:	f7f9 faee 	bl	8004b64 <HAL_RCCEx_PeriphCLKConfig>
 800b588:	4603      	mov	r3, r0
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d001      	beq.n	800b592 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800b58e:	f7ff fee3 	bl	800b358 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800b592:	4b04      	ldr	r3, [pc, #16]	; (800b5a4 <HAL_RTC_MspInit+0x54>)
 800b594:	2201      	movs	r2, #1
 800b596:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800b598:	bf00      	nop
 800b59a:	3720      	adds	r7, #32
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}
 800b5a0:	40002800 	.word	0x40002800
 800b5a4:	42470e3c 	.word	0x42470e3c

0800b5a8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b08c      	sub	sp, #48	; 0x30
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b5b0:	f107 031c 	add.w	r3, r7, #28
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	601a      	str	r2, [r3, #0]
 800b5b8:	605a      	str	r2, [r3, #4]
 800b5ba:	609a      	str	r2, [r3, #8]
 800b5bc:	60da      	str	r2, [r3, #12]
 800b5be:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	4a38      	ldr	r2, [pc, #224]	; (800b6a8 <HAL_SD_MspInit+0x100>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d169      	bne.n	800b69e <HAL_SD_MspInit+0xf6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	61bb      	str	r3, [r7, #24]
 800b5ce:	4b37      	ldr	r3, [pc, #220]	; (800b6ac <HAL_SD_MspInit+0x104>)
 800b5d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5d2:	4a36      	ldr	r2, [pc, #216]	; (800b6ac <HAL_SD_MspInit+0x104>)
 800b5d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b5d8:	6453      	str	r3, [r2, #68]	; 0x44
 800b5da:	4b34      	ldr	r3, [pc, #208]	; (800b6ac <HAL_SD_MspInit+0x104>)
 800b5dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5e2:	61bb      	str	r3, [r7, #24]
 800b5e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	617b      	str	r3, [r7, #20]
 800b5ea:	4b30      	ldr	r3, [pc, #192]	; (800b6ac <HAL_SD_MspInit+0x104>)
 800b5ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ee:	4a2f      	ldr	r2, [pc, #188]	; (800b6ac <HAL_SD_MspInit+0x104>)
 800b5f0:	f043 0301 	orr.w	r3, r3, #1
 800b5f4:	6313      	str	r3, [r2, #48]	; 0x30
 800b5f6:	4b2d      	ldr	r3, [pc, #180]	; (800b6ac <HAL_SD_MspInit+0x104>)
 800b5f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5fa:	f003 0301 	and.w	r3, r3, #1
 800b5fe:	617b      	str	r3, [r7, #20]
 800b600:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b602:	2300      	movs	r3, #0
 800b604:	613b      	str	r3, [r7, #16]
 800b606:	4b29      	ldr	r3, [pc, #164]	; (800b6ac <HAL_SD_MspInit+0x104>)
 800b608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b60a:	4a28      	ldr	r2, [pc, #160]	; (800b6ac <HAL_SD_MspInit+0x104>)
 800b60c:	f043 0302 	orr.w	r3, r3, #2
 800b610:	6313      	str	r3, [r2, #48]	; 0x30
 800b612:	4b26      	ldr	r3, [pc, #152]	; (800b6ac <HAL_SD_MspInit+0x104>)
 800b614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b616:	f003 0302 	and.w	r3, r3, #2
 800b61a:	613b      	str	r3, [r7, #16]
 800b61c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b61e:	2300      	movs	r3, #0
 800b620:	60fb      	str	r3, [r7, #12]
 800b622:	4b22      	ldr	r3, [pc, #136]	; (800b6ac <HAL_SD_MspInit+0x104>)
 800b624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b626:	4a21      	ldr	r2, [pc, #132]	; (800b6ac <HAL_SD_MspInit+0x104>)
 800b628:	f043 0304 	orr.w	r3, r3, #4
 800b62c:	6313      	str	r3, [r2, #48]	; 0x30
 800b62e:	4b1f      	ldr	r3, [pc, #124]	; (800b6ac <HAL_SD_MspInit+0x104>)
 800b630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b632:	f003 0304 	and.w	r3, r3, #4
 800b636:	60fb      	str	r3, [r7, #12]
 800b638:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800b63a:	2340      	movs	r3, #64	; 0x40
 800b63c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b63e:	2302      	movs	r3, #2
 800b640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b642:	2300      	movs	r3, #0
 800b644:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b646:	2303      	movs	r3, #3
 800b648:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800b64a:	230c      	movs	r3, #12
 800b64c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b64e:	f107 031c 	add.w	r3, r7, #28
 800b652:	4619      	mov	r1, r3
 800b654:	4816      	ldr	r0, [pc, #88]	; (800b6b0 <HAL_SD_MspInit+0x108>)
 800b656:	f7f5 fd29 	bl	80010ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800b65a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b65e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b660:	2302      	movs	r3, #2
 800b662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b664:	2300      	movs	r3, #0
 800b666:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b668:	2303      	movs	r3, #3
 800b66a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800b66c:	230c      	movs	r3, #12
 800b66e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b670:	f107 031c 	add.w	r3, r7, #28
 800b674:	4619      	mov	r1, r3
 800b676:	480f      	ldr	r0, [pc, #60]	; (800b6b4 <HAL_SD_MspInit+0x10c>)
 800b678:	f7f5 fd18 	bl	80010ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800b67c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800b680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b682:	2302      	movs	r3, #2
 800b684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b686:	2300      	movs	r3, #0
 800b688:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b68a:	2303      	movs	r3, #3
 800b68c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800b68e:	230c      	movs	r3, #12
 800b690:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b692:	f107 031c 	add.w	r3, r7, #28
 800b696:	4619      	mov	r1, r3
 800b698:	4807      	ldr	r0, [pc, #28]	; (800b6b8 <HAL_SD_MspInit+0x110>)
 800b69a:	f7f5 fd07 	bl	80010ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800b69e:	bf00      	nop
 800b6a0:	3730      	adds	r7, #48	; 0x30
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	40012c00 	.word	0x40012c00
 800b6ac:	40023800 	.word	0x40023800
 800b6b0:	40020000 	.word	0x40020000
 800b6b4:	40020400 	.word	0x40020400
 800b6b8:	40020800 	.word	0x40020800

0800b6bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b084      	sub	sp, #16
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6cc:	d115      	bne.n	800b6fa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	60fb      	str	r3, [r7, #12]
 800b6d2:	4b0c      	ldr	r3, [pc, #48]	; (800b704 <HAL_TIM_Base_MspInit+0x48>)
 800b6d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6d6:	4a0b      	ldr	r2, [pc, #44]	; (800b704 <HAL_TIM_Base_MspInit+0x48>)
 800b6d8:	f043 0301 	orr.w	r3, r3, #1
 800b6dc:	6413      	str	r3, [r2, #64]	; 0x40
 800b6de:	4b09      	ldr	r3, [pc, #36]	; (800b704 <HAL_TIM_Base_MspInit+0x48>)
 800b6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6e2:	f003 0301 	and.w	r3, r3, #1
 800b6e6:	60fb      	str	r3, [r7, #12]
 800b6e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	2100      	movs	r1, #0
 800b6ee:	201c      	movs	r0, #28
 800b6f0:	f7f5 f98b 	bl	8000a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800b6f4:	201c      	movs	r0, #28
 800b6f6:	f7f5 f9a4 	bl	8000a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800b6fa:	bf00      	nop
 800b6fc:	3710      	adds	r7, #16
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	40023800 	.word	0x40023800

0800b708 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b08a      	sub	sp, #40	; 0x28
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b710:	f107 0314 	add.w	r3, r7, #20
 800b714:	2200      	movs	r2, #0
 800b716:	601a      	str	r2, [r3, #0]
 800b718:	605a      	str	r2, [r3, #4]
 800b71a:	609a      	str	r2, [r3, #8]
 800b71c:	60da      	str	r2, [r3, #12]
 800b71e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	4a19      	ldr	r2, [pc, #100]	; (800b78c <HAL_UART_MspInit+0x84>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d12c      	bne.n	800b784 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b72a:	2300      	movs	r3, #0
 800b72c:	613b      	str	r3, [r7, #16]
 800b72e:	4b18      	ldr	r3, [pc, #96]	; (800b790 <HAL_UART_MspInit+0x88>)
 800b730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b732:	4a17      	ldr	r2, [pc, #92]	; (800b790 <HAL_UART_MspInit+0x88>)
 800b734:	f043 0310 	orr.w	r3, r3, #16
 800b738:	6453      	str	r3, [r2, #68]	; 0x44
 800b73a:	4b15      	ldr	r3, [pc, #84]	; (800b790 <HAL_UART_MspInit+0x88>)
 800b73c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b73e:	f003 0310 	and.w	r3, r3, #16
 800b742:	613b      	str	r3, [r7, #16]
 800b744:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b746:	2300      	movs	r3, #0
 800b748:	60fb      	str	r3, [r7, #12]
 800b74a:	4b11      	ldr	r3, [pc, #68]	; (800b790 <HAL_UART_MspInit+0x88>)
 800b74c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b74e:	4a10      	ldr	r2, [pc, #64]	; (800b790 <HAL_UART_MspInit+0x88>)
 800b750:	f043 0301 	orr.w	r3, r3, #1
 800b754:	6313      	str	r3, [r2, #48]	; 0x30
 800b756:	4b0e      	ldr	r3, [pc, #56]	; (800b790 <HAL_UART_MspInit+0x88>)
 800b758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b75a:	f003 0301 	and.w	r3, r3, #1
 800b75e:	60fb      	str	r3, [r7, #12]
 800b760:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800b762:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800b766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b768:	2302      	movs	r3, #2
 800b76a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b76c:	2300      	movs	r3, #0
 800b76e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b770:	2303      	movs	r3, #3
 800b772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b774:	2307      	movs	r3, #7
 800b776:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b778:	f107 0314 	add.w	r3, r7, #20
 800b77c:	4619      	mov	r1, r3
 800b77e:	4805      	ldr	r0, [pc, #20]	; (800b794 <HAL_UART_MspInit+0x8c>)
 800b780:	f7f5 fc94 	bl	80010ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800b784:	bf00      	nop
 800b786:	3728      	adds	r7, #40	; 0x28
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	40011000 	.word	0x40011000
 800b790:	40023800 	.word	0x40023800
 800b794:	40020000 	.word	0x40020000

0800b798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800b79c:	f7f9 f9c6 	bl	8004b2c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800b7a0:	e7fe      	b.n	800b7a0 <NMI_Handler+0x8>

0800b7a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b7a2:	b480      	push	{r7}
 800b7a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b7a6:	e7fe      	b.n	800b7a6 <HardFault_Handler+0x4>

0800b7a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b7ac:	e7fe      	b.n	800b7ac <MemManage_Handler+0x4>

0800b7ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b7ae:	b480      	push	{r7}
 800b7b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b7b2:	e7fe      	b.n	800b7b2 <BusFault_Handler+0x4>

0800b7b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b7b8:	e7fe      	b.n	800b7b8 <UsageFault_Handler+0x4>

0800b7ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b7ba:	b480      	push	{r7}
 800b7bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b7be:	bf00      	nop
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr

0800b7c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b7cc:	bf00      	nop
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr

0800b7d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b7d6:	b480      	push	{r7}
 800b7d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b7da:	bf00      	nop
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr

0800b7e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
    AsynchronousTaskTimerUpdate();
 800b7e8:	f7fe febe 	bl	800a568 <AsynchronousTaskTimerUpdate>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b7ec:	f7f4 ffee 	bl	80007cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b7f0:	bf00      	nop
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800b7f8:	4802      	ldr	r0, [pc, #8]	; (800b804 <DMA1_Stream1_IRQHandler+0x10>)
 800b7fa:	f7f5 fa0d 	bl	8000c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800b7fe:	bf00      	nop
 800b800:	bd80      	pop	{r7, pc}
 800b802:	bf00      	nop
 800b804:	200006b0 	.word	0x200006b0

0800b808 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800b80c:	4803      	ldr	r0, [pc, #12]	; (800b81c <TIM2_IRQHandler+0x14>)
 800b80e:	f7fa fa38 	bl	8005c82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  TempCollect_ScheduleMeasurement();
 800b812:	f7ff fa8d 	bl	800ad30 <TempCollect_ScheduleMeasurement>

  /* USER CODE END TIM2_IRQn 1 */
}
 800b816:	bf00      	nop
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	200008a0 	.word	0x200008a0

0800b820 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

//	TempCollect_I2CA_Done();

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800b824:	4802      	ldr	r0, [pc, #8]	; (800b830 <I2C1_EV_IRQHandler+0x10>)
 800b826:	f7f5 fffb 	bl	8001820 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800b82a:	bf00      	nop
 800b82c:	bd80      	pop	{r7, pc}
 800b82e:	bf00      	nop
 800b830:	20000710 	.word	0x20000710

0800b834 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */
//	TempCollect_I2CB_Done();

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800b838:	4802      	ldr	r0, [pc, #8]	; (800b844 <I2C2_EV_IRQHandler+0x10>)
 800b83a:	f7f5 fff1 	bl	8001820 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800b83e:	bf00      	nop
 800b840:	bd80      	pop	{r7, pc}
 800b842:	bf00      	nop
 800b844:	20000764 	.word	0x20000764

0800b848 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b84c:	4802      	ldr	r0, [pc, #8]	; (800b858 <OTG_FS_IRQHandler+0x10>)
 800b84e:	f7f7 fce8 	bl	8003222 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b852:	bf00      	nop
 800b854:	bd80      	pop	{r7, pc}
 800b856:	bf00      	nop
 800b858:	20001bb8 	.word	0x20001bb8

0800b85c <HAL_I2C_MemRxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b082      	sub	sp, #8
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	4a0a      	ldr	r2, [pc, #40]	; (800b890 <HAL_I2C_MemRxCpltCallback+0x34>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d102      	bne.n	800b872 <HAL_I2C_MemRxCpltCallback+0x16>
	{
		TempCollect_I2CA_Done();
 800b86c:	f7ff fa74 	bl	800ad58 <TempCollect_I2CA_Done>
	}
	else
	{
		AssertError(AppError_UndefinedError);
	}
}
 800b870:	e009      	b.n	800b886 <HAL_I2C_MemRxCpltCallback+0x2a>
	else if ( hi2c == &hi2c2)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	4a07      	ldr	r2, [pc, #28]	; (800b894 <HAL_I2C_MemRxCpltCallback+0x38>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d102      	bne.n	800b880 <HAL_I2C_MemRxCpltCallback+0x24>
		TempCollect_I2CB_Done();
 800b87a:	f7ff fa79 	bl	800ad70 <TempCollect_I2CB_Done>
}
 800b87e:	e002      	b.n	800b886 <HAL_I2C_MemRxCpltCallback+0x2a>
		AssertError(AppError_UndefinedError);
 800b880:	2008      	movs	r0, #8
 800b882:	f7fe ff6f 	bl	800a764 <AssertError>
}
 800b886:	bf00      	nop
 800b888:	3708      	adds	r7, #8
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}
 800b88e:	bf00      	nop
 800b890:	20000710 	.word	0x20000710
 800b894:	20000764 	.word	0x20000764

0800b898 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b898:	b480      	push	{r7}
 800b89a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b89c:	4b06      	ldr	r3, [pc, #24]	; (800b8b8 <SystemInit+0x20>)
 800b89e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8a2:	4a05      	ldr	r2, [pc, #20]	; (800b8b8 <SystemInit+0x20>)
 800b8a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b8a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800b8ac:	bf00      	nop
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b4:	4770      	bx	lr
 800b8b6:	bf00      	nop
 800b8b8:	e000ed00 	.word	0xe000ed00

0800b8bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	4912      	ldr	r1, [pc, #72]	; (800b90c <MX_USB_DEVICE_Init+0x50>)
 800b8c4:	4812      	ldr	r0, [pc, #72]	; (800b910 <MX_USB_DEVICE_Init+0x54>)
 800b8c6:	f7fd fcb1 	bl	800922c <USBD_Init>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d001      	beq.n	800b8d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b8d0:	f7ff fd42 	bl	800b358 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b8d4:	490f      	ldr	r1, [pc, #60]	; (800b914 <MX_USB_DEVICE_Init+0x58>)
 800b8d6:	480e      	ldr	r0, [pc, #56]	; (800b910 <MX_USB_DEVICE_Init+0x54>)
 800b8d8:	f7fd fcd8 	bl	800928c <USBD_RegisterClass>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d001      	beq.n	800b8e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b8e2:	f7ff fd39 	bl	800b358 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b8e6:	490c      	ldr	r1, [pc, #48]	; (800b918 <MX_USB_DEVICE_Init+0x5c>)
 800b8e8:	4809      	ldr	r0, [pc, #36]	; (800b910 <MX_USB_DEVICE_Init+0x54>)
 800b8ea:	f7fd fbf9 	bl	80090e0 <USBD_CDC_RegisterInterface>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d001      	beq.n	800b8f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b8f4:	f7ff fd30 	bl	800b358 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b8f8:	4805      	ldr	r0, [pc, #20]	; (800b910 <MX_USB_DEVICE_Init+0x54>)
 800b8fa:	f7fd fcee 	bl	80092da <USBD_Start>
 800b8fe:	4603      	mov	r3, r0
 800b900:	2b00      	cmp	r3, #0
 800b902:	d001      	beq.n	800b908 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b904:	f7ff fd28 	bl	800b358 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b908:	bf00      	nop
 800b90a:	bd80      	pop	{r7, pc}
 800b90c:	20000130 	.word	0x20000130
 800b910:	200008e8 	.word	0x200008e8
 800b914:	20000014 	.word	0x20000014
 800b918:	2000011c 	.word	0x2000011c

0800b91c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b920:	2200      	movs	r2, #0
 800b922:	4905      	ldr	r1, [pc, #20]	; (800b938 <CDC_Init_FS+0x1c>)
 800b924:	4805      	ldr	r0, [pc, #20]	; (800b93c <CDC_Init_FS+0x20>)
 800b926:	f7fd fbf0 	bl	800910a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b92a:	4905      	ldr	r1, [pc, #20]	; (800b940 <CDC_Init_FS+0x24>)
 800b92c:	4803      	ldr	r0, [pc, #12]	; (800b93c <CDC_Init_FS+0x20>)
 800b92e:	f7fd fc0a 	bl	8009146 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b932:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b934:	4618      	mov	r0, r3
 800b936:	bd80      	pop	{r7, pc}
 800b938:	200013b8 	.word	0x200013b8
 800b93c:	200008e8 	.word	0x200008e8
 800b940:	20000bb8 	.word	0x20000bb8

0800b944 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b944:	b480      	push	{r7}
 800b946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b948:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr

0800b954 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b954:	b480      	push	{r7}
 800b956:	b083      	sub	sp, #12
 800b958:	af00      	add	r7, sp, #0
 800b95a:	4603      	mov	r3, r0
 800b95c:	6039      	str	r1, [r7, #0]
 800b95e:	71fb      	strb	r3, [r7, #7]
 800b960:	4613      	mov	r3, r2
 800b962:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b964:	79fb      	ldrb	r3, [r7, #7]
 800b966:	2b23      	cmp	r3, #35	; 0x23
 800b968:	d84a      	bhi.n	800ba00 <CDC_Control_FS+0xac>
 800b96a:	a201      	add	r2, pc, #4	; (adr r2, 800b970 <CDC_Control_FS+0x1c>)
 800b96c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b970:	0800ba01 	.word	0x0800ba01
 800b974:	0800ba01 	.word	0x0800ba01
 800b978:	0800ba01 	.word	0x0800ba01
 800b97c:	0800ba01 	.word	0x0800ba01
 800b980:	0800ba01 	.word	0x0800ba01
 800b984:	0800ba01 	.word	0x0800ba01
 800b988:	0800ba01 	.word	0x0800ba01
 800b98c:	0800ba01 	.word	0x0800ba01
 800b990:	0800ba01 	.word	0x0800ba01
 800b994:	0800ba01 	.word	0x0800ba01
 800b998:	0800ba01 	.word	0x0800ba01
 800b99c:	0800ba01 	.word	0x0800ba01
 800b9a0:	0800ba01 	.word	0x0800ba01
 800b9a4:	0800ba01 	.word	0x0800ba01
 800b9a8:	0800ba01 	.word	0x0800ba01
 800b9ac:	0800ba01 	.word	0x0800ba01
 800b9b0:	0800ba01 	.word	0x0800ba01
 800b9b4:	0800ba01 	.word	0x0800ba01
 800b9b8:	0800ba01 	.word	0x0800ba01
 800b9bc:	0800ba01 	.word	0x0800ba01
 800b9c0:	0800ba01 	.word	0x0800ba01
 800b9c4:	0800ba01 	.word	0x0800ba01
 800b9c8:	0800ba01 	.word	0x0800ba01
 800b9cc:	0800ba01 	.word	0x0800ba01
 800b9d0:	0800ba01 	.word	0x0800ba01
 800b9d4:	0800ba01 	.word	0x0800ba01
 800b9d8:	0800ba01 	.word	0x0800ba01
 800b9dc:	0800ba01 	.word	0x0800ba01
 800b9e0:	0800ba01 	.word	0x0800ba01
 800b9e4:	0800ba01 	.word	0x0800ba01
 800b9e8:	0800ba01 	.word	0x0800ba01
 800b9ec:	0800ba01 	.word	0x0800ba01
 800b9f0:	0800ba01 	.word	0x0800ba01
 800b9f4:	0800ba01 	.word	0x0800ba01
 800b9f8:	0800ba01 	.word	0x0800ba01
 800b9fc:	0800ba01 	.word	0x0800ba01
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ba00:	bf00      	nop
  }

  return (USBD_OK);
 800ba02:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	370c      	adds	r7, #12
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr

0800ba10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ba1a:	6879      	ldr	r1, [r7, #4]
 800ba1c:	4805      	ldr	r0, [pc, #20]	; (800ba34 <CDC_Receive_FS+0x24>)
 800ba1e:	f7fd fb92 	bl	8009146 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ba22:	4804      	ldr	r0, [pc, #16]	; (800ba34 <CDC_Receive_FS+0x24>)
 800ba24:	f7fd fbd8 	bl	80091d8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ba28:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3708      	adds	r7, #8
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	200008e8 	.word	0x200008e8

0800ba38 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	460b      	mov	r3, r1
 800ba42:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ba44:	2300      	movs	r3, #0
 800ba46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ba48:	4b0d      	ldr	r3, [pc, #52]	; (800ba80 <CDC_Transmit_FS+0x48>)
 800ba4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba4e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d001      	beq.n	800ba5e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	e00b      	b.n	800ba76 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ba5e:	887b      	ldrh	r3, [r7, #2]
 800ba60:	461a      	mov	r2, r3
 800ba62:	6879      	ldr	r1, [r7, #4]
 800ba64:	4806      	ldr	r0, [pc, #24]	; (800ba80 <CDC_Transmit_FS+0x48>)
 800ba66:	f7fd fb50 	bl	800910a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ba6a:	4805      	ldr	r0, [pc, #20]	; (800ba80 <CDC_Transmit_FS+0x48>)
 800ba6c:	f7fd fb84 	bl	8009178 <USBD_CDC_TransmitPacket>
 800ba70:	4603      	mov	r3, r0
 800ba72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ba74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3710      	adds	r7, #16
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}
 800ba7e:	bf00      	nop
 800ba80:	200008e8 	.word	0x200008e8

0800ba84 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b087      	sub	sp, #28
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	60b9      	str	r1, [r7, #8]
 800ba8e:	4613      	mov	r3, r2
 800ba90:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ba92:	2300      	movs	r3, #0
 800ba94:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ba96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	371c      	adds	r7, #28
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa4:	4770      	bx	lr
	...

0800baa8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b08a      	sub	sp, #40	; 0x28
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bab0:	f107 0314 	add.w	r3, r7, #20
 800bab4:	2200      	movs	r2, #0
 800bab6:	601a      	str	r2, [r3, #0]
 800bab8:	605a      	str	r2, [r3, #4]
 800baba:	609a      	str	r2, [r3, #8]
 800babc:	60da      	str	r2, [r3, #12]
 800babe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bac8:	d13a      	bne.n	800bb40 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800baca:	2300      	movs	r3, #0
 800bacc:	613b      	str	r3, [r7, #16]
 800bace:	4b1e      	ldr	r3, [pc, #120]	; (800bb48 <HAL_PCD_MspInit+0xa0>)
 800bad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bad2:	4a1d      	ldr	r2, [pc, #116]	; (800bb48 <HAL_PCD_MspInit+0xa0>)
 800bad4:	f043 0301 	orr.w	r3, r3, #1
 800bad8:	6313      	str	r3, [r2, #48]	; 0x30
 800bada:	4b1b      	ldr	r3, [pc, #108]	; (800bb48 <HAL_PCD_MspInit+0xa0>)
 800badc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bade:	f003 0301 	and.w	r3, r3, #1
 800bae2:	613b      	str	r3, [r7, #16]
 800bae4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bae6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800baea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800baec:	2302      	movs	r3, #2
 800baee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800baf0:	2300      	movs	r3, #0
 800baf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800baf4:	2303      	movs	r3, #3
 800baf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800baf8:	230a      	movs	r3, #10
 800bafa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bafc:	f107 0314 	add.w	r3, r7, #20
 800bb00:	4619      	mov	r1, r3
 800bb02:	4812      	ldr	r0, [pc, #72]	; (800bb4c <HAL_PCD_MspInit+0xa4>)
 800bb04:	f7f5 fad2 	bl	80010ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bb08:	4b0f      	ldr	r3, [pc, #60]	; (800bb48 <HAL_PCD_MspInit+0xa0>)
 800bb0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb0c:	4a0e      	ldr	r2, [pc, #56]	; (800bb48 <HAL_PCD_MspInit+0xa0>)
 800bb0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb12:	6353      	str	r3, [r2, #52]	; 0x34
 800bb14:	2300      	movs	r3, #0
 800bb16:	60fb      	str	r3, [r7, #12]
 800bb18:	4b0b      	ldr	r3, [pc, #44]	; (800bb48 <HAL_PCD_MspInit+0xa0>)
 800bb1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb1c:	4a0a      	ldr	r2, [pc, #40]	; (800bb48 <HAL_PCD_MspInit+0xa0>)
 800bb1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bb22:	6453      	str	r3, [r2, #68]	; 0x44
 800bb24:	4b08      	ldr	r3, [pc, #32]	; (800bb48 <HAL_PCD_MspInit+0xa0>)
 800bb26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb2c:	60fb      	str	r3, [r7, #12]
 800bb2e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bb30:	2200      	movs	r2, #0
 800bb32:	2100      	movs	r1, #0
 800bb34:	2043      	movs	r0, #67	; 0x43
 800bb36:	f7f4 ff68 	bl	8000a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bb3a:	2043      	movs	r0, #67	; 0x43
 800bb3c:	f7f4 ff81 	bl	8000a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bb40:	bf00      	nop
 800bb42:	3728      	adds	r7, #40	; 0x28
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	40023800 	.word	0x40023800
 800bb4c:	40020000 	.word	0x40020000

0800bb50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b082      	sub	sp, #8
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bb64:	4619      	mov	r1, r3
 800bb66:	4610      	mov	r0, r2
 800bb68:	f7fd fc02 	bl	8009370 <USBD_LL_SetupStage>
}
 800bb6c:	bf00      	nop
 800bb6e:	3708      	adds	r7, #8
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b082      	sub	sp, #8
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bb86:	78fa      	ldrb	r2, [r7, #3]
 800bb88:	6879      	ldr	r1, [r7, #4]
 800bb8a:	4613      	mov	r3, r2
 800bb8c:	00db      	lsls	r3, r3, #3
 800bb8e:	1a9b      	subs	r3, r3, r2
 800bb90:	009b      	lsls	r3, r3, #2
 800bb92:	440b      	add	r3, r1
 800bb94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	78fb      	ldrb	r3, [r7, #3]
 800bb9c:	4619      	mov	r1, r3
 800bb9e:	f7fd fc3c 	bl	800941a <USBD_LL_DataOutStage>
}
 800bba2:	bf00      	nop
 800bba4:	3708      	adds	r7, #8
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}

0800bbaa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbaa:	b580      	push	{r7, lr}
 800bbac:	b082      	sub	sp, #8
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	6078      	str	r0, [r7, #4]
 800bbb2:	460b      	mov	r3, r1
 800bbb4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bbbc:	78fa      	ldrb	r2, [r7, #3]
 800bbbe:	6879      	ldr	r1, [r7, #4]
 800bbc0:	4613      	mov	r3, r2
 800bbc2:	00db      	lsls	r3, r3, #3
 800bbc4:	1a9b      	subs	r3, r3, r2
 800bbc6:	009b      	lsls	r3, r3, #2
 800bbc8:	440b      	add	r3, r1
 800bbca:	3348      	adds	r3, #72	; 0x48
 800bbcc:	681a      	ldr	r2, [r3, #0]
 800bbce:	78fb      	ldrb	r3, [r7, #3]
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	f7fd fc85 	bl	80094e0 <USBD_LL_DataInStage>
}
 800bbd6:	bf00      	nop
 800bbd8:	3708      	adds	r7, #8
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}

0800bbde <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbde:	b580      	push	{r7, lr}
 800bbe0:	b082      	sub	sp, #8
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bbec:	4618      	mov	r0, r3
 800bbee:	f7fd fd99 	bl	8009724 <USBD_LL_SOF>
}
 800bbf2:	bf00      	nop
 800bbf4:	3708      	adds	r7, #8
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}

0800bbfa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbfa:	b580      	push	{r7, lr}
 800bbfc:	b084      	sub	sp, #16
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bc02:	2301      	movs	r3, #1
 800bc04:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	68db      	ldr	r3, [r3, #12]
 800bc0a:	2b02      	cmp	r3, #2
 800bc0c:	d001      	beq.n	800bc12 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bc0e:	f7ff fba3 	bl	800b358 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bc18:	7bfa      	ldrb	r2, [r7, #15]
 800bc1a:	4611      	mov	r1, r2
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f7fd fd43 	bl	80096a8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f7fd fcef 	bl	800960c <USBD_LL_Reset>
}
 800bc2e:	bf00      	nop
 800bc30:	3710      	adds	r7, #16
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}
	...

0800bc38 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b082      	sub	sp, #8
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7fd fd3e 	bl	80096c8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	687a      	ldr	r2, [r7, #4]
 800bc58:	6812      	ldr	r2, [r2, #0]
 800bc5a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bc5e:	f043 0301 	orr.w	r3, r3, #1
 800bc62:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6a1b      	ldr	r3, [r3, #32]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d005      	beq.n	800bc78 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc6c:	4b04      	ldr	r3, [pc, #16]	; (800bc80 <HAL_PCD_SuspendCallback+0x48>)
 800bc6e:	691b      	ldr	r3, [r3, #16]
 800bc70:	4a03      	ldr	r2, [pc, #12]	; (800bc80 <HAL_PCD_SuspendCallback+0x48>)
 800bc72:	f043 0306 	orr.w	r3, r3, #6
 800bc76:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bc78:	bf00      	nop
 800bc7a:	3708      	adds	r7, #8
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}
 800bc80:	e000ed00 	.word	0xe000ed00

0800bc84 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b082      	sub	sp, #8
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bc92:	4618      	mov	r0, r3
 800bc94:	f7fd fd2e 	bl	80096f4 <USBD_LL_Resume>
}
 800bc98:	bf00      	nop
 800bc9a:	3708      	adds	r7, #8
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}

0800bca0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b082      	sub	sp, #8
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	460b      	mov	r3, r1
 800bcaa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bcb2:	78fa      	ldrb	r2, [r7, #3]
 800bcb4:	4611      	mov	r1, r2
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f7fd fd7c 	bl	80097b4 <USBD_LL_IsoOUTIncomplete>
}
 800bcbc:	bf00      	nop
 800bcbe:	3708      	adds	r7, #8
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b082      	sub	sp, #8
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	460b      	mov	r3, r1
 800bcce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bcd6:	78fa      	ldrb	r2, [r7, #3]
 800bcd8:	4611      	mov	r1, r2
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f7fd fd44 	bl	8009768 <USBD_LL_IsoINIncomplete>
}
 800bce0:	bf00      	nop
 800bce2:	3708      	adds	r7, #8
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b082      	sub	sp, #8
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7fd fd82 	bl	8009800 <USBD_LL_DevConnected>
}
 800bcfc:	bf00      	nop
 800bcfe:	3708      	adds	r7, #8
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}

0800bd04 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b082      	sub	sp, #8
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7fd fd7f 	bl	8009816 <USBD_LL_DevDisconnected>
}
 800bd18:	bf00      	nop
 800bd1a:	3708      	adds	r7, #8
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b082      	sub	sp, #8
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d13c      	bne.n	800bdaa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bd30:	4a20      	ldr	r2, [pc, #128]	; (800bdb4 <USBD_LL_Init+0x94>)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	4a1e      	ldr	r2, [pc, #120]	; (800bdb4 <USBD_LL_Init+0x94>)
 800bd3c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bd40:	4b1c      	ldr	r3, [pc, #112]	; (800bdb4 <USBD_LL_Init+0x94>)
 800bd42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bd46:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bd48:	4b1a      	ldr	r3, [pc, #104]	; (800bdb4 <USBD_LL_Init+0x94>)
 800bd4a:	2204      	movs	r2, #4
 800bd4c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bd4e:	4b19      	ldr	r3, [pc, #100]	; (800bdb4 <USBD_LL_Init+0x94>)
 800bd50:	2202      	movs	r2, #2
 800bd52:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bd54:	4b17      	ldr	r3, [pc, #92]	; (800bdb4 <USBD_LL_Init+0x94>)
 800bd56:	2200      	movs	r2, #0
 800bd58:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bd5a:	4b16      	ldr	r3, [pc, #88]	; (800bdb4 <USBD_LL_Init+0x94>)
 800bd5c:	2202      	movs	r2, #2
 800bd5e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bd60:	4b14      	ldr	r3, [pc, #80]	; (800bdb4 <USBD_LL_Init+0x94>)
 800bd62:	2200      	movs	r2, #0
 800bd64:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bd66:	4b13      	ldr	r3, [pc, #76]	; (800bdb4 <USBD_LL_Init+0x94>)
 800bd68:	2200      	movs	r2, #0
 800bd6a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bd6c:	4b11      	ldr	r3, [pc, #68]	; (800bdb4 <USBD_LL_Init+0x94>)
 800bd6e:	2200      	movs	r2, #0
 800bd70:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bd72:	4b10      	ldr	r3, [pc, #64]	; (800bdb4 <USBD_LL_Init+0x94>)
 800bd74:	2200      	movs	r2, #0
 800bd76:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bd78:	4b0e      	ldr	r3, [pc, #56]	; (800bdb4 <USBD_LL_Init+0x94>)
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bd7e:	480d      	ldr	r0, [pc, #52]	; (800bdb4 <USBD_LL_Init+0x94>)
 800bd80:	f7f7 f8ff 	bl	8002f82 <HAL_PCD_Init>
 800bd84:	4603      	mov	r3, r0
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d001      	beq.n	800bd8e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bd8a:	f7ff fae5 	bl	800b358 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bd8e:	2180      	movs	r1, #128	; 0x80
 800bd90:	4808      	ldr	r0, [pc, #32]	; (800bdb4 <USBD_LL_Init+0x94>)
 800bd92:	f7f8 fa5c 	bl	800424e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bd96:	2240      	movs	r2, #64	; 0x40
 800bd98:	2100      	movs	r1, #0
 800bd9a:	4806      	ldr	r0, [pc, #24]	; (800bdb4 <USBD_LL_Init+0x94>)
 800bd9c:	f7f8 fa10 	bl	80041c0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bda0:	2280      	movs	r2, #128	; 0x80
 800bda2:	2101      	movs	r1, #1
 800bda4:	4803      	ldr	r0, [pc, #12]	; (800bdb4 <USBD_LL_Init+0x94>)
 800bda6:	f7f8 fa0b 	bl	80041c0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bdaa:	2300      	movs	r3, #0
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3708      	adds	r7, #8
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}
 800bdb4:	20001bb8 	.word	0x20001bb8

0800bdb8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f7f7 f9f4 	bl	80031bc <HAL_PCD_Start>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdd8:	7bfb      	ldrb	r3, [r7, #15]
 800bdda:	4618      	mov	r0, r3
 800bddc:	f000 f942 	bl	800c064 <USBD_Get_USB_Status>
 800bde0:	4603      	mov	r3, r0
 800bde2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bde4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3710      	adds	r7, #16
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}

0800bdee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bdee:	b580      	push	{r7, lr}
 800bdf0:	b084      	sub	sp, #16
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
 800bdf6:	4608      	mov	r0, r1
 800bdf8:	4611      	mov	r1, r2
 800bdfa:	461a      	mov	r2, r3
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	70fb      	strb	r3, [r7, #3]
 800be00:	460b      	mov	r3, r1
 800be02:	70bb      	strb	r3, [r7, #2]
 800be04:	4613      	mov	r3, r2
 800be06:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be08:	2300      	movs	r3, #0
 800be0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be0c:	2300      	movs	r3, #0
 800be0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800be16:	78bb      	ldrb	r3, [r7, #2]
 800be18:	883a      	ldrh	r2, [r7, #0]
 800be1a:	78f9      	ldrb	r1, [r7, #3]
 800be1c:	f7f7 fdd8 	bl	80039d0 <HAL_PCD_EP_Open>
 800be20:	4603      	mov	r3, r0
 800be22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be24:	7bfb      	ldrb	r3, [r7, #15]
 800be26:	4618      	mov	r0, r3
 800be28:	f000 f91c 	bl	800c064 <USBD_Get_USB_Status>
 800be2c:	4603      	mov	r3, r0
 800be2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be30:	7bbb      	ldrb	r3, [r7, #14]
}
 800be32:	4618      	mov	r0, r3
 800be34:	3710      	adds	r7, #16
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}

0800be3a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be3a:	b580      	push	{r7, lr}
 800be3c:	b084      	sub	sp, #16
 800be3e:	af00      	add	r7, sp, #0
 800be40:	6078      	str	r0, [r7, #4]
 800be42:	460b      	mov	r3, r1
 800be44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be46:	2300      	movs	r3, #0
 800be48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be4a:	2300      	movs	r3, #0
 800be4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800be54:	78fa      	ldrb	r2, [r7, #3]
 800be56:	4611      	mov	r1, r2
 800be58:	4618      	mov	r0, r3
 800be5a:	f7f7 fe21 	bl	8003aa0 <HAL_PCD_EP_Close>
 800be5e:	4603      	mov	r3, r0
 800be60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be62:	7bfb      	ldrb	r3, [r7, #15]
 800be64:	4618      	mov	r0, r3
 800be66:	f000 f8fd 	bl	800c064 <USBD_Get_USB_Status>
 800be6a:	4603      	mov	r3, r0
 800be6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be6e:	7bbb      	ldrb	r3, [r7, #14]
}
 800be70:	4618      	mov	r0, r3
 800be72:	3710      	adds	r7, #16
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}

0800be78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b084      	sub	sp, #16
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	460b      	mov	r3, r1
 800be82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be84:	2300      	movs	r3, #0
 800be86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be88:	2300      	movs	r3, #0
 800be8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800be92:	78fa      	ldrb	r2, [r7, #3]
 800be94:	4611      	mov	r1, r2
 800be96:	4618      	mov	r0, r3
 800be98:	f7f7 fef9 	bl	8003c8e <HAL_PCD_EP_SetStall>
 800be9c:	4603      	mov	r3, r0
 800be9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bea0:	7bfb      	ldrb	r3, [r7, #15]
 800bea2:	4618      	mov	r0, r3
 800bea4:	f000 f8de 	bl	800c064 <USBD_Get_USB_Status>
 800bea8:	4603      	mov	r3, r0
 800beaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800beac:	7bbb      	ldrb	r3, [r7, #14]
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3710      	adds	r7, #16
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}

0800beb6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800beb6:	b580      	push	{r7, lr}
 800beb8:	b084      	sub	sp, #16
 800beba:	af00      	add	r7, sp, #0
 800bebc:	6078      	str	r0, [r7, #4]
 800bebe:	460b      	mov	r3, r1
 800bec0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bec2:	2300      	movs	r3, #0
 800bec4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bec6:	2300      	movs	r3, #0
 800bec8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bed0:	78fa      	ldrb	r2, [r7, #3]
 800bed2:	4611      	mov	r1, r2
 800bed4:	4618      	mov	r0, r3
 800bed6:	f7f7 ff3e 	bl	8003d56 <HAL_PCD_EP_ClrStall>
 800beda:	4603      	mov	r3, r0
 800bedc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bede:	7bfb      	ldrb	r3, [r7, #15]
 800bee0:	4618      	mov	r0, r3
 800bee2:	f000 f8bf 	bl	800c064 <USBD_Get_USB_Status>
 800bee6:	4603      	mov	r3, r0
 800bee8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800beea:	7bbb      	ldrb	r3, [r7, #14]
}
 800beec:	4618      	mov	r0, r3
 800beee:	3710      	adds	r7, #16
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b085      	sub	sp, #20
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	460b      	mov	r3, r1
 800befe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf06:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bf08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	da0b      	bge.n	800bf28 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bf10:	78fb      	ldrb	r3, [r7, #3]
 800bf12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf16:	68f9      	ldr	r1, [r7, #12]
 800bf18:	4613      	mov	r3, r2
 800bf1a:	00db      	lsls	r3, r3, #3
 800bf1c:	1a9b      	subs	r3, r3, r2
 800bf1e:	009b      	lsls	r3, r3, #2
 800bf20:	440b      	add	r3, r1
 800bf22:	333e      	adds	r3, #62	; 0x3e
 800bf24:	781b      	ldrb	r3, [r3, #0]
 800bf26:	e00b      	b.n	800bf40 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bf28:	78fb      	ldrb	r3, [r7, #3]
 800bf2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf2e:	68f9      	ldr	r1, [r7, #12]
 800bf30:	4613      	mov	r3, r2
 800bf32:	00db      	lsls	r3, r3, #3
 800bf34:	1a9b      	subs	r3, r3, r2
 800bf36:	009b      	lsls	r3, r3, #2
 800bf38:	440b      	add	r3, r1
 800bf3a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bf3e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3714      	adds	r7, #20
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr

0800bf4c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b084      	sub	sp, #16
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
 800bf54:	460b      	mov	r3, r1
 800bf56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf66:	78fa      	ldrb	r2, [r7, #3]
 800bf68:	4611      	mov	r1, r2
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7f7 fd0b 	bl	8003986 <HAL_PCD_SetAddress>
 800bf70:	4603      	mov	r3, r0
 800bf72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf74:	7bfb      	ldrb	r3, [r7, #15]
 800bf76:	4618      	mov	r0, r3
 800bf78:	f000 f874 	bl	800c064 <USBD_Get_USB_Status>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf80:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3710      	adds	r7, #16
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}

0800bf8a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bf8a:	b580      	push	{r7, lr}
 800bf8c:	b086      	sub	sp, #24
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	60f8      	str	r0, [r7, #12]
 800bf92:	607a      	str	r2, [r7, #4]
 800bf94:	603b      	str	r3, [r7, #0]
 800bf96:	460b      	mov	r3, r1
 800bf98:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bfa8:	7af9      	ldrb	r1, [r7, #11]
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	f7f7 fe24 	bl	8003bfa <HAL_PCD_EP_Transmit>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfb6:	7dfb      	ldrb	r3, [r7, #23]
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f000 f853 	bl	800c064 <USBD_Get_USB_Status>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bfc2:	7dbb      	ldrb	r3, [r7, #22]
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3718      	adds	r7, #24
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}

0800bfcc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b086      	sub	sp, #24
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	60f8      	str	r0, [r7, #12]
 800bfd4:	607a      	str	r2, [r7, #4]
 800bfd6:	603b      	str	r3, [r7, #0]
 800bfd8:	460b      	mov	r3, r1
 800bfda:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bfea:	7af9      	ldrb	r1, [r7, #11]
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	687a      	ldr	r2, [r7, #4]
 800bff0:	f7f7 fda0 	bl	8003b34 <HAL_PCD_EP_Receive>
 800bff4:	4603      	mov	r3, r0
 800bff6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bff8:	7dfb      	ldrb	r3, [r7, #23]
 800bffa:	4618      	mov	r0, r3
 800bffc:	f000 f832 	bl	800c064 <USBD_Get_USB_Status>
 800c000:	4603      	mov	r3, r0
 800c002:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c004:	7dbb      	ldrb	r3, [r7, #22]
}
 800c006:	4618      	mov	r0, r3
 800c008:	3718      	adds	r7, #24
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}

0800c00e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c00e:	b580      	push	{r7, lr}
 800c010:	b082      	sub	sp, #8
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
 800c016:	460b      	mov	r3, r1
 800c018:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c020:	78fa      	ldrb	r2, [r7, #3]
 800c022:	4611      	mov	r1, r2
 800c024:	4618      	mov	r0, r3
 800c026:	f7f7 fdd0 	bl	8003bca <HAL_PCD_EP_GetRxCount>
 800c02a:	4603      	mov	r3, r0
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3708      	adds	r7, #8
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c034:	b480      	push	{r7}
 800c036:	b083      	sub	sp, #12
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c03c:	4b03      	ldr	r3, [pc, #12]	; (800c04c <USBD_static_malloc+0x18>)
}
 800c03e:	4618      	mov	r0, r3
 800c040:	370c      	adds	r7, #12
 800c042:	46bd      	mov	sp, r7
 800c044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c048:	4770      	bx	lr
 800c04a:	bf00      	nop
 800c04c:	20000414 	.word	0x20000414

0800c050 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c050:	b480      	push	{r7}
 800c052:	b083      	sub	sp, #12
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]

}
 800c058:	bf00      	nop
 800c05a:	370c      	adds	r7, #12
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr

0800c064 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c064:	b480      	push	{r7}
 800c066:	b085      	sub	sp, #20
 800c068:	af00      	add	r7, sp, #0
 800c06a:	4603      	mov	r3, r0
 800c06c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c06e:	2300      	movs	r3, #0
 800c070:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c072:	79fb      	ldrb	r3, [r7, #7]
 800c074:	2b03      	cmp	r3, #3
 800c076:	d817      	bhi.n	800c0a8 <USBD_Get_USB_Status+0x44>
 800c078:	a201      	add	r2, pc, #4	; (adr r2, 800c080 <USBD_Get_USB_Status+0x1c>)
 800c07a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c07e:	bf00      	nop
 800c080:	0800c091 	.word	0x0800c091
 800c084:	0800c097 	.word	0x0800c097
 800c088:	0800c09d 	.word	0x0800c09d
 800c08c:	0800c0a3 	.word	0x0800c0a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c090:	2300      	movs	r3, #0
 800c092:	73fb      	strb	r3, [r7, #15]
    break;
 800c094:	e00b      	b.n	800c0ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c096:	2303      	movs	r3, #3
 800c098:	73fb      	strb	r3, [r7, #15]
    break;
 800c09a:	e008      	b.n	800c0ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c09c:	2301      	movs	r3, #1
 800c09e:	73fb      	strb	r3, [r7, #15]
    break;
 800c0a0:	e005      	b.n	800c0ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c0a2:	2303      	movs	r3, #3
 800c0a4:	73fb      	strb	r3, [r7, #15]
    break;
 800c0a6:	e002      	b.n	800c0ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c0a8:	2303      	movs	r3, #3
 800c0aa:	73fb      	strb	r3, [r7, #15]
    break;
 800c0ac:	bf00      	nop
  }
  return usb_status;
 800c0ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	3714      	adds	r7, #20
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ba:	4770      	bx	lr

0800c0bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b083      	sub	sp, #12
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	6039      	str	r1, [r7, #0]
 800c0c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	2212      	movs	r2, #18
 800c0cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c0ce:	4b03      	ldr	r3, [pc, #12]	; (800c0dc <USBD_FS_DeviceDescriptor+0x20>)
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	370c      	adds	r7, #12
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr
 800c0dc:	2000014c 	.word	0x2000014c

0800c0e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b083      	sub	sp, #12
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	6039      	str	r1, [r7, #0]
 800c0ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	2204      	movs	r2, #4
 800c0f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c0f2:	4b03      	ldr	r3, [pc, #12]	; (800c100 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	370c      	adds	r7, #12
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr
 800c100:	20000160 	.word	0x20000160

0800c104 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b082      	sub	sp, #8
 800c108:	af00      	add	r7, sp, #0
 800c10a:	4603      	mov	r3, r0
 800c10c:	6039      	str	r1, [r7, #0]
 800c10e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c110:	79fb      	ldrb	r3, [r7, #7]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d105      	bne.n	800c122 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c116:	683a      	ldr	r2, [r7, #0]
 800c118:	4907      	ldr	r1, [pc, #28]	; (800c138 <USBD_FS_ProductStrDescriptor+0x34>)
 800c11a:	4808      	ldr	r0, [pc, #32]	; (800c13c <USBD_FS_ProductStrDescriptor+0x38>)
 800c11c:	f7fe f90f 	bl	800a33e <USBD_GetString>
 800c120:	e004      	b.n	800c12c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c122:	683a      	ldr	r2, [r7, #0]
 800c124:	4904      	ldr	r1, [pc, #16]	; (800c138 <USBD_FS_ProductStrDescriptor+0x34>)
 800c126:	4805      	ldr	r0, [pc, #20]	; (800c13c <USBD_FS_ProductStrDescriptor+0x38>)
 800c128:	f7fe f909 	bl	800a33e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c12c:	4b02      	ldr	r3, [pc, #8]	; (800c138 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3708      	adds	r7, #8
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop
 800c138:	20001fc0 	.word	0x20001fc0
 800c13c:	0800c3a0 	.word	0x0800c3a0

0800c140 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b082      	sub	sp, #8
 800c144:	af00      	add	r7, sp, #0
 800c146:	4603      	mov	r3, r0
 800c148:	6039      	str	r1, [r7, #0]
 800c14a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c14c:	683a      	ldr	r2, [r7, #0]
 800c14e:	4904      	ldr	r1, [pc, #16]	; (800c160 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c150:	4804      	ldr	r0, [pc, #16]	; (800c164 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c152:	f7fe f8f4 	bl	800a33e <USBD_GetString>
  return USBD_StrDesc;
 800c156:	4b02      	ldr	r3, [pc, #8]	; (800c160 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c158:	4618      	mov	r0, r3
 800c15a:	3708      	adds	r7, #8
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}
 800c160:	20001fc0 	.word	0x20001fc0
 800c164:	0800c3b8 	.word	0x0800c3b8

0800c168 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	4603      	mov	r3, r0
 800c170:	6039      	str	r1, [r7, #0]
 800c172:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	221a      	movs	r2, #26
 800c178:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c17a:	f000 f843 	bl	800c204 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c17e:	4b02      	ldr	r3, [pc, #8]	; (800c188 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c180:	4618      	mov	r0, r3
 800c182:	3708      	adds	r7, #8
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}
 800c188:	20000164 	.word	0x20000164

0800c18c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b082      	sub	sp, #8
 800c190:	af00      	add	r7, sp, #0
 800c192:	4603      	mov	r3, r0
 800c194:	6039      	str	r1, [r7, #0]
 800c196:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c198:	79fb      	ldrb	r3, [r7, #7]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d105      	bne.n	800c1aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c19e:	683a      	ldr	r2, [r7, #0]
 800c1a0:	4907      	ldr	r1, [pc, #28]	; (800c1c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c1a2:	4808      	ldr	r0, [pc, #32]	; (800c1c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c1a4:	f7fe f8cb 	bl	800a33e <USBD_GetString>
 800c1a8:	e004      	b.n	800c1b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c1aa:	683a      	ldr	r2, [r7, #0]
 800c1ac:	4904      	ldr	r1, [pc, #16]	; (800c1c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c1ae:	4805      	ldr	r0, [pc, #20]	; (800c1c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c1b0:	f7fe f8c5 	bl	800a33e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c1b4:	4b02      	ldr	r3, [pc, #8]	; (800c1c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3708      	adds	r7, #8
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	20001fc0 	.word	0x20001fc0
 800c1c4:	0800c3cc 	.word	0x0800c3cc

0800c1c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b082      	sub	sp, #8
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	6039      	str	r1, [r7, #0]
 800c1d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c1d4:	79fb      	ldrb	r3, [r7, #7]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d105      	bne.n	800c1e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c1da:	683a      	ldr	r2, [r7, #0]
 800c1dc:	4907      	ldr	r1, [pc, #28]	; (800c1fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c1de:	4808      	ldr	r0, [pc, #32]	; (800c200 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c1e0:	f7fe f8ad 	bl	800a33e <USBD_GetString>
 800c1e4:	e004      	b.n	800c1f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c1e6:	683a      	ldr	r2, [r7, #0]
 800c1e8:	4904      	ldr	r1, [pc, #16]	; (800c1fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c1ea:	4805      	ldr	r0, [pc, #20]	; (800c200 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c1ec:	f7fe f8a7 	bl	800a33e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c1f0:	4b02      	ldr	r3, [pc, #8]	; (800c1fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3708      	adds	r7, #8
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}
 800c1fa:	bf00      	nop
 800c1fc:	20001fc0 	.word	0x20001fc0
 800c200:	0800c3d8 	.word	0x0800c3d8

0800c204 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b084      	sub	sp, #16
 800c208:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c20a:	4b0f      	ldr	r3, [pc, #60]	; (800c248 <Get_SerialNum+0x44>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c210:	4b0e      	ldr	r3, [pc, #56]	; (800c24c <Get_SerialNum+0x48>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c216:	4b0e      	ldr	r3, [pc, #56]	; (800c250 <Get_SerialNum+0x4c>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c21c:	68fa      	ldr	r2, [r7, #12]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	4413      	add	r3, r2
 800c222:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d009      	beq.n	800c23e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c22a:	2208      	movs	r2, #8
 800c22c:	4909      	ldr	r1, [pc, #36]	; (800c254 <Get_SerialNum+0x50>)
 800c22e:	68f8      	ldr	r0, [r7, #12]
 800c230:	f000 f814 	bl	800c25c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c234:	2204      	movs	r2, #4
 800c236:	4908      	ldr	r1, [pc, #32]	; (800c258 <Get_SerialNum+0x54>)
 800c238:	68b8      	ldr	r0, [r7, #8]
 800c23a:	f000 f80f 	bl	800c25c <IntToUnicode>
  }
}
 800c23e:	bf00      	nop
 800c240:	3710      	adds	r7, #16
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}
 800c246:	bf00      	nop
 800c248:	1fff7a10 	.word	0x1fff7a10
 800c24c:	1fff7a14 	.word	0x1fff7a14
 800c250:	1fff7a18 	.word	0x1fff7a18
 800c254:	20000166 	.word	0x20000166
 800c258:	20000176 	.word	0x20000176

0800c25c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c25c:	b480      	push	{r7}
 800c25e:	b087      	sub	sp, #28
 800c260:	af00      	add	r7, sp, #0
 800c262:	60f8      	str	r0, [r7, #12]
 800c264:	60b9      	str	r1, [r7, #8]
 800c266:	4613      	mov	r3, r2
 800c268:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c26a:	2300      	movs	r3, #0
 800c26c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c26e:	2300      	movs	r3, #0
 800c270:	75fb      	strb	r3, [r7, #23]
 800c272:	e027      	b.n	800c2c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	0f1b      	lsrs	r3, r3, #28
 800c278:	2b09      	cmp	r3, #9
 800c27a:	d80b      	bhi.n	800c294 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	0f1b      	lsrs	r3, r3, #28
 800c280:	b2da      	uxtb	r2, r3
 800c282:	7dfb      	ldrb	r3, [r7, #23]
 800c284:	005b      	lsls	r3, r3, #1
 800c286:	4619      	mov	r1, r3
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	440b      	add	r3, r1
 800c28c:	3230      	adds	r2, #48	; 0x30
 800c28e:	b2d2      	uxtb	r2, r2
 800c290:	701a      	strb	r2, [r3, #0]
 800c292:	e00a      	b.n	800c2aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	0f1b      	lsrs	r3, r3, #28
 800c298:	b2da      	uxtb	r2, r3
 800c29a:	7dfb      	ldrb	r3, [r7, #23]
 800c29c:	005b      	lsls	r3, r3, #1
 800c29e:	4619      	mov	r1, r3
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	440b      	add	r3, r1
 800c2a4:	3237      	adds	r2, #55	; 0x37
 800c2a6:	b2d2      	uxtb	r2, r2
 800c2a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	011b      	lsls	r3, r3, #4
 800c2ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c2b0:	7dfb      	ldrb	r3, [r7, #23]
 800c2b2:	005b      	lsls	r3, r3, #1
 800c2b4:	3301      	adds	r3, #1
 800c2b6:	68ba      	ldr	r2, [r7, #8]
 800c2b8:	4413      	add	r3, r2
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c2be:	7dfb      	ldrb	r3, [r7, #23]
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	75fb      	strb	r3, [r7, #23]
 800c2c4:	7dfa      	ldrb	r2, [r7, #23]
 800c2c6:	79fb      	ldrb	r3, [r7, #7]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d3d3      	bcc.n	800c274 <IntToUnicode+0x18>
  }
}
 800c2cc:	bf00      	nop
 800c2ce:	bf00      	nop
 800c2d0:	371c      	adds	r7, #28
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d8:	4770      	bx	lr
	...

0800c2dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800c2dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c314 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800c2e0:	480d      	ldr	r0, [pc, #52]	; (800c318 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800c2e2:	490e      	ldr	r1, [pc, #56]	; (800c31c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800c2e4:	4a0e      	ldr	r2, [pc, #56]	; (800c320 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800c2e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800c2e8:	e002      	b.n	800c2f0 <LoopCopyDataInit>

0800c2ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800c2ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800c2ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800c2ee:	3304      	adds	r3, #4

0800c2f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800c2f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800c2f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800c2f4:	d3f9      	bcc.n	800c2ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800c2f6:	4a0b      	ldr	r2, [pc, #44]	; (800c324 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800c2f8:	4c0b      	ldr	r4, [pc, #44]	; (800c328 <LoopFillZerobss+0x26>)
  movs r3, #0
 800c2fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 800c2fc:	e001      	b.n	800c302 <LoopFillZerobss>

0800c2fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800c2fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c300:	3204      	adds	r2, #4

0800c302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800c302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800c304:	d3fb      	bcc.n	800c2fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c306:	f7ff fac7 	bl	800b898 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c30a:	f000 f811 	bl	800c330 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c30e:	f7fe fd8b 	bl	800ae28 <main>
  bx  lr    
 800c312:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800c314:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800c318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800c31c:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 800c320:	0800c428 	.word	0x0800c428
  ldr r2, =_sbss
 800c324:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 800c328:	200021c0 	.word	0x200021c0

0800c32c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c32c:	e7fe      	b.n	800c32c <ADC_IRQHandler>
	...

0800c330 <__libc_init_array>:
 800c330:	b570      	push	{r4, r5, r6, lr}
 800c332:	4d0d      	ldr	r5, [pc, #52]	; (800c368 <__libc_init_array+0x38>)
 800c334:	4c0d      	ldr	r4, [pc, #52]	; (800c36c <__libc_init_array+0x3c>)
 800c336:	1b64      	subs	r4, r4, r5
 800c338:	10a4      	asrs	r4, r4, #2
 800c33a:	2600      	movs	r6, #0
 800c33c:	42a6      	cmp	r6, r4
 800c33e:	d109      	bne.n	800c354 <__libc_init_array+0x24>
 800c340:	4d0b      	ldr	r5, [pc, #44]	; (800c370 <__libc_init_array+0x40>)
 800c342:	4c0c      	ldr	r4, [pc, #48]	; (800c374 <__libc_init_array+0x44>)
 800c344:	f000 f820 	bl	800c388 <_init>
 800c348:	1b64      	subs	r4, r4, r5
 800c34a:	10a4      	asrs	r4, r4, #2
 800c34c:	2600      	movs	r6, #0
 800c34e:	42a6      	cmp	r6, r4
 800c350:	d105      	bne.n	800c35e <__libc_init_array+0x2e>
 800c352:	bd70      	pop	{r4, r5, r6, pc}
 800c354:	f855 3b04 	ldr.w	r3, [r5], #4
 800c358:	4798      	blx	r3
 800c35a:	3601      	adds	r6, #1
 800c35c:	e7ee      	b.n	800c33c <__libc_init_array+0xc>
 800c35e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c362:	4798      	blx	r3
 800c364:	3601      	adds	r6, #1
 800c366:	e7f2      	b.n	800c34e <__libc_init_array+0x1e>
 800c368:	0800c420 	.word	0x0800c420
 800c36c:	0800c420 	.word	0x0800c420
 800c370:	0800c420 	.word	0x0800c420
 800c374:	0800c424 	.word	0x0800c424

0800c378 <memset>:
 800c378:	4402      	add	r2, r0
 800c37a:	4603      	mov	r3, r0
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d100      	bne.n	800c382 <memset+0xa>
 800c380:	4770      	bx	lr
 800c382:	f803 1b01 	strb.w	r1, [r3], #1
 800c386:	e7f9      	b.n	800c37c <memset+0x4>

0800c388 <_init>:
 800c388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c38a:	bf00      	nop
 800c38c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c38e:	bc08      	pop	{r3}
 800c390:	469e      	mov	lr, r3
 800c392:	4770      	bx	lr

0800c394 <_fini>:
 800c394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c396:	bf00      	nop
 800c398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c39a:	bc08      	pop	{r3}
 800c39c:	469e      	mov	lr, r3
 800c39e:	4770      	bx	lr
