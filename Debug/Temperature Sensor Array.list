
Temperature Sensor Array.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fa0c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  0800fbb0  0800fbb0  0001fbb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801000c  0801000c  00030350  2**0
                  CONTENTS
  4 .ARM          00000008  0801000c  0801000c  0002000c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010014  08010014  00030350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010014  08010014  00020014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010018  08010018  00020018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0801001c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000226c  20000350  0801036c  00030350  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  200025bc  0801036c  000325bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002aae5  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005518  00000000  00000000  0005ae65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ca0  00000000  00000000  00060380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a90  00000000  00000000  00062020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ebc1  00000000  00000000  00063ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000269c0  00000000  00000000  00082671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0d37  00000000  00000000  000a9031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00149d68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008810  00000000  00000000  00149dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001525cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00152698  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000350 	.word	0x20000350
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fb94 	.word	0x0800fb94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000354 	.word	0x20000354
 80001dc:	0800fb94 	.word	0x0800fb94

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <OperateLED_A>:
#include "BSP.h"
#include "main.h"


void OperateLED_A (LEDState_t eState)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
	if(eState == eLED_On)
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d105      	bne.n	8000ecc <OperateLED_A+0x1c>
	{
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	4807      	ldr	r0, [pc, #28]	; (8000ee4 <OperateLED_A+0x34>)
 8000ec6:	f000 ffb1 	bl	8001e2c <HAL_GPIO_WritePin>
	}
	else if(eState == eLED_Off)
	{
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
	}
}
 8000eca:	e007      	b.n	8000edc <OperateLED_A+0x2c>
	else if(eState == eLED_Off)
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d104      	bne.n	8000edc <OperateLED_A+0x2c>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <OperateLED_A+0x34>)
 8000ed8:	f000 ffa8 	bl	8001e2c <HAL_GPIO_WritePin>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40020800 	.word	0x40020800

08000ee8 <OperateLED_C>:
	{
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
	}
}
void OperateLED_C (LEDState_t eState)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
	if(eState == eLED_On)
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d105      	bne.n	8000f04 <OperateLED_C+0x1c>
	{
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2104      	movs	r1, #4
 8000efc:	4807      	ldr	r0, [pc, #28]	; (8000f1c <OperateLED_C+0x34>)
 8000efe:	f000 ff95 	bl	8001e2c <HAL_GPIO_WritePin>
	}
	else if(eState == eLED_Off)
	{
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
	}
}
 8000f02:	e007      	b.n	8000f14 <OperateLED_C+0x2c>
	else if(eState == eLED_Off)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d104      	bne.n	8000f14 <OperateLED_C+0x2c>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2104      	movs	r1, #4
 8000f0e:	4803      	ldr	r0, [pc, #12]	; (8000f1c <OperateLED_C+0x34>)
 8000f10:	f000 ff8c 	bl	8001e2c <HAL_GPIO_WritePin>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40020800 	.word	0x40020800

08000f20 <ToggleLED_B>:
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
	}
}

void ToggleLED_B()
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000f24:	2102      	movs	r1, #2
 8000f26:	4802      	ldr	r0, [pc, #8]	; (8000f30 <ToggleLED_B+0x10>)
 8000f28:	f000 ff99 	bl	8001e5e <HAL_GPIO_TogglePin>
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40020800 	.word	0x40020800

08000f34 <ToggleLED_D>:

void ToggleLED_D()
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000f38:	2108      	movs	r1, #8
 8000f3a:	4802      	ldr	r0, [pc, #8]	; (8000f44 <ToggleLED_D+0x10>)
 8000f3c:	f000 ff8f 	bl	8001e5e <HAL_GPIO_TogglePin>
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40020800 	.word	0x40020800

08000f48 <OperateSensorPower_A>:

void OperateSensorPower_A (SensorState_t eState)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
	if(eState == eSensor_On)
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d106      	bne.n	8000f66 <OperateSensorPower_A+0x1e>
	{
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f5e:	4808      	ldr	r0, [pc, #32]	; (8000f80 <OperateSensorPower_A+0x38>)
 8000f60:	f000 ff64 	bl	8001e2c <HAL_GPIO_WritePin>
	}
	else if(eState == eSensor_Off)
	{
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_SET);
	}
}
 8000f64:	e008      	b.n	8000f78 <OperateSensorPower_A+0x30>
	else if(eState == eSensor_Off)
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d105      	bne.n	8000f78 <OperateSensorPower_A+0x30>
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_SET);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f72:	4803      	ldr	r0, [pc, #12]	; (8000f80 <OperateSensorPower_A+0x38>)
 8000f74:	f000 ff5a 	bl	8001e2c <HAL_GPIO_WritePin>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40020800 	.word	0x40020800

08000f84 <OperateSensorPower_B>:
void OperateSensorPower_B (SensorState_t eState)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
	if(eState == eSensor_On)
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d106      	bne.n	8000fa2 <OperateSensorPower_B+0x1e>
	{
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f9a:	4808      	ldr	r0, [pc, #32]	; (8000fbc <OperateSensorPower_B+0x38>)
 8000f9c:	f000 ff46 	bl	8001e2c <HAL_GPIO_WritePin>
	}
	else if(eState == eSensor_Off)
	{
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_SET);
	}
}
 8000fa0:	e008      	b.n	8000fb4 <OperateSensorPower_B+0x30>
	else if(eState == eSensor_Off)
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d105      	bne.n	8000fb4 <OperateSensorPower_B+0x30>
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_SET);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fae:	4803      	ldr	r0, [pc, #12]	; (8000fbc <OperateSensorPower_B+0x38>)
 8000fb0:	f000 ff3c 	bl	8001e2c <HAL_GPIO_WritePin>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40020800 	.word	0x40020800

08000fc0 <TurnAllSensorOn>:

void TurnAllSensorOn()
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	OperateSensorPower_A(eSensor_On);
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f7ff ffbf 	bl	8000f48 <OperateSensorPower_A>
	OperateSensorPower_B(eSensor_On);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f7ff ffda 	bl	8000f84 <OperateSensorPower_B>
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <SensorArray_Init>:
	0x0C,
	0x0E
};

void SensorArray_Init(I2C_HandleTypeDef *hI2CA, I2C_HandleTypeDef *hI2CB)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
	for(uint8_t u8Idx = 0; u8Idx < MCP9808_I2CA_DeviceCount; u8Idx++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	73fb      	strb	r3, [r7, #15]
 8000fe2:	e024      	b.n	800102e <SensorArray_Init+0x5a>
	{
		kaSensorArrayDataA[u8Idx].hTranscieverHandle = hI2CA;
 8000fe4:	7bfa      	ldrb	r2, [r7, #15]
 8000fe6:	492c      	ldr	r1, [pc, #176]	; (8001098 <SensorArray_Init+0xc4>)
 8000fe8:	4613      	mov	r3, r2
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	4413      	add	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	3304      	adds	r3, #4
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	601a      	str	r2, [r3, #0]
		kaSensorArrayDataA[u8Idx].u8Address = ((MCP9808_AddresLowerNibble << 4) + u8DeviceAddressListA[u8Idx]);
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	4a28      	ldr	r2, [pc, #160]	; (800109c <SensorArray_Init+0xc8>)
 8000ffc:	5cd3      	ldrb	r3, [r2, r3]
 8000ffe:	7bfa      	ldrb	r2, [r7, #15]
 8001000:	3330      	adds	r3, #48	; 0x30
 8001002:	b2d8      	uxtb	r0, r3
 8001004:	4924      	ldr	r1, [pc, #144]	; (8001098 <SensorArray_Init+0xc4>)
 8001006:	4613      	mov	r3, r2
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	4413      	add	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	440b      	add	r3, r1
 8001010:	3301      	adds	r3, #1
 8001012:	4602      	mov	r2, r0
 8001014:	701a      	strb	r2, [r3, #0]
		kaSensorArrayDataA[u8Idx].bEnabled = true;
 8001016:	7bfa      	ldrb	r2, [r7, #15]
 8001018:	491f      	ldr	r1, [pc, #124]	; (8001098 <SensorArray_Init+0xc4>)
 800101a:	4613      	mov	r3, r2
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	4413      	add	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	440b      	add	r3, r1
 8001024:	2201      	movs	r2, #1
 8001026:	701a      	strb	r2, [r3, #0]
	for(uint8_t u8Idx = 0; u8Idx < MCP9808_I2CA_DeviceCount; u8Idx++)
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	3301      	adds	r3, #1
 800102c:	73fb      	strb	r3, [r7, #15]
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	2b04      	cmp	r3, #4
 8001032:	d9d7      	bls.n	8000fe4 <SensorArray_Init+0x10>
	}
	for(uint8_t u8Idx = 0; u8Idx < MCP9808_I2CB_DeviceCount; u8Idx++)
 8001034:	2300      	movs	r3, #0
 8001036:	73bb      	strb	r3, [r7, #14]
 8001038:	e024      	b.n	8001084 <SensorArray_Init+0xb0>
	{
		kaSensorArrayDataB[u8Idx].hTranscieverHandle = hI2CB;
 800103a:	7bba      	ldrb	r2, [r7, #14]
 800103c:	4918      	ldr	r1, [pc, #96]	; (80010a0 <SensorArray_Init+0xcc>)
 800103e:	4613      	mov	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4413      	add	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	440b      	add	r3, r1
 8001048:	3304      	adds	r3, #4
 800104a:	683a      	ldr	r2, [r7, #0]
 800104c:	601a      	str	r2, [r3, #0]
		kaSensorArrayDataB[u8Idx].u8Address = ((MCP9808_AddresLowerNibble << 4) + u8DeviceAddressListB[u8Idx]);
 800104e:	7bbb      	ldrb	r3, [r7, #14]
 8001050:	4a14      	ldr	r2, [pc, #80]	; (80010a4 <SensorArray_Init+0xd0>)
 8001052:	5cd3      	ldrb	r3, [r2, r3]
 8001054:	7bba      	ldrb	r2, [r7, #14]
 8001056:	3330      	adds	r3, #48	; 0x30
 8001058:	b2d8      	uxtb	r0, r3
 800105a:	4911      	ldr	r1, [pc, #68]	; (80010a0 <SensorArray_Init+0xcc>)
 800105c:	4613      	mov	r3, r2
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	4413      	add	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	440b      	add	r3, r1
 8001066:	3301      	adds	r3, #1
 8001068:	4602      	mov	r2, r0
 800106a:	701a      	strb	r2, [r3, #0]
		kaSensorArrayDataB[u8Idx].bEnabled = true;
 800106c:	7bba      	ldrb	r2, [r7, #14]
 800106e:	490c      	ldr	r1, [pc, #48]	; (80010a0 <SensorArray_Init+0xcc>)
 8001070:	4613      	mov	r3, r2
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	4413      	add	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	440b      	add	r3, r1
 800107a:	2201      	movs	r2, #1
 800107c:	701a      	strb	r2, [r3, #0]
	for(uint8_t u8Idx = 0; u8Idx < MCP9808_I2CB_DeviceCount; u8Idx++)
 800107e:	7bbb      	ldrb	r3, [r7, #14]
 8001080:	3301      	adds	r3, #1
 8001082:	73bb      	strb	r3, [r7, #14]
 8001084:	7bbb      	ldrb	r3, [r7, #14]
 8001086:	2b04      	cmp	r3, #4
 8001088:	d9d7      	bls.n	800103a <SensorArray_Init+0x66>
	}
}
 800108a:	bf00      	nop
 800108c:	bf00      	nop
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	20000a20 	.word	0x20000a20
 800109c:	0800fbf8 	.word	0x0800fbf8
 80010a0:	20000a5c 	.word	0x20000a5c
 80010a4:	0800fc00 	.word	0x0800fc00

080010a8 <MCP9808_Read>:

#include "TemperatureSensor_MCP9808.h"
#include "MCP9808_ArrayData.h"

void MCP9808_Read(MCP9808_Sensor_t *kSensor)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_IT(kSensor->hTranscieverHandle, kSensor->u8Address, MCP9808_AddressAmbientTemperature, 1, kSensor->u16RawMeasurement, 2);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6858      	ldr	r0, [r3, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	785b      	ldrb	r3, [r3, #1]
 80010b8:	b299      	uxth	r1, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3308      	adds	r3, #8
 80010be:	2202      	movs	r2, #2
 80010c0:	9201      	str	r2, [sp, #4]
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2301      	movs	r3, #1
 80010c6:	2205      	movs	r2, #5
 80010c8:	f001 f84c 	bl	8002164 <HAL_I2C_Mem_Read_IT>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <MCP9808_DecodeTemperature>:


float MCP9808_DecodeTemperature(MCP9808_Sensor_t *kSensor)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b087      	sub	sp, #28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	uint16_t u16FixedPointReadingLow = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	827b      	strh	r3, [r7, #18]
	uint16_t u16FixedPointReadingHigh = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	823b      	strh	r3, [r7, #16]
	uint16_t u16FixedPointReading = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	81fb      	strh	r3, [r7, #14]
	bool bNegativeSign = false;
 80010e8:	2300      	movs	r3, #0
 80010ea:	737b      	strb	r3, [r7, #13]
	float fResult = 0.0;
 80010ec:	f04f 0300 	mov.w	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]

	u16FixedPointReadingLow = ((uint16_t)(kSensor->u16RawMeasurement[0])) << 8;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	7a1b      	ldrb	r3, [r3, #8]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	021b      	lsls	r3, r3, #8
 80010fa:	827b      	strh	r3, [r7, #18]
	bNegativeSign = ( u16FixedPointReadingLow & 0x1000) && 0x1000;
 80010fc:	8a7b      	ldrh	r3, [r7, #18]
 80010fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001102:	2b00      	cmp	r3, #0
 8001104:	bf14      	ite	ne
 8001106:	2301      	movne	r3, #1
 8001108:	2300      	moveq	r3, #0
 800110a:	737b      	strb	r3, [r7, #13]
	u16FixedPointReadingLow = u16FixedPointReadingLow & (0x0FFF); // Mask to delete threshold data and sign
 800110c:	8a7b      	ldrh	r3, [r7, #18]
 800110e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001112:	827b      	strh	r3, [r7, #18]

	u16FixedPointReadingHigh = ((uint16_t)(kSensor->u16RawMeasurement[1]));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	7a5b      	ldrb	r3, [r3, #9]
 8001118:	823b      	strh	r3, [r7, #16]
	u16FixedPointReading = u16FixedPointReadingLow + u16FixedPointReadingHigh;
 800111a:	8a7a      	ldrh	r2, [r7, #18]
 800111c:	8a3b      	ldrh	r3, [r7, #16]
 800111e:	4413      	add	r3, r2
 8001120:	81fb      	strh	r3, [r7, #14]

	if (bNegativeSign)
 8001122:	7b7b      	ldrb	r3, [r7, #13]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d00d      	beq.n	8001144 <MCP9808_DecodeTemperature+0x70>
	{
		fResult = ((float)(u16FixedPointReading) / 16) * -1;
 8001128:	89fb      	ldrh	r3, [r7, #14]
 800112a:	ee07 3a90 	vmov	s15, r3
 800112e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001132:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001136:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800113a:	eef1 7a67 	vneg.f32	s15, s15
 800113e:	edc7 7a05 	vstr	s15, [r7, #20]
 8001142:	e00a      	b.n	800115a <MCP9808_DecodeTemperature+0x86>
	}
	else
	{
		fResult = ((float)(u16FixedPointReading) / 16);
 8001144:	89fb      	ldrh	r3, [r7, #14]
 8001146:	ee07 3a90 	vmov	s15, r3
 800114a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800114e:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001152:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001156:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	return fResult;
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	ee07 3a90 	vmov	s15, r3
}
 8001160:	eeb0 0a67 	vmov.f32	s0, s15
 8001164:	371c      	adds	r7, #28
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
	...

08001170 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001174:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <HAL_Init+0x40>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a0d      	ldr	r2, [pc, #52]	; (80011b0 <HAL_Init+0x40>)
 800117a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800117e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <HAL_Init+0x40>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a0a      	ldr	r2, [pc, #40]	; (80011b0 <HAL_Init+0x40>)
 8001186:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800118a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <HAL_Init+0x40>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a07      	ldr	r2, [pc, #28]	; (80011b0 <HAL_Init+0x40>)
 8001192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001196:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001198:	2003      	movs	r0, #3
 800119a:	f000 f94f 	bl	800143c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800119e:	2000      	movs	r0, #0
 80011a0:	f000 f808 	bl	80011b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a4:	f00a ffa8 	bl	800c0f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40023c00 	.word	0x40023c00

080011b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_InitTick+0x54>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_InitTick+0x58>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	4619      	mov	r1, r3
 80011c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 f967 	bl	80014a6 <HAL_SYSTICK_Config>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e00e      	b.n	8001200 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b0f      	cmp	r3, #15
 80011e6:	d80a      	bhi.n	80011fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e8:	2200      	movs	r2, #0
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295
 80011f0:	f000 f92f 	bl	8001452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f4:	4a06      	ldr	r2, [pc, #24]	; (8001210 <HAL_InitTick+0x5c>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
 80011fc:	e000      	b.n	8001200 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000118 	.word	0x20000118
 800120c:	20000004 	.word	0x20000004
 8001210:	20000000 	.word	0x20000000

08001214 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_IncTick+0x20>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_IncTick+0x24>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4413      	add	r3, r2
 8001224:	4a04      	ldr	r2, [pc, #16]	; (8001238 <HAL_IncTick+0x24>)
 8001226:	6013      	str	r3, [r2, #0]
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000004 	.word	0x20000004
 8001238:	20000a98 	.word	0x20000a98

0800123c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return uwTick;
 8001240:	4b03      	ldr	r3, [pc, #12]	; (8001250 <HAL_GetTick+0x14>)
 8001242:	681b      	ldr	r3, [r3, #0]
}
 8001244:	4618      	mov	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000a98 	.word	0x20000a98

08001254 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800125c:	f7ff ffee 	bl	800123c <HAL_GetTick>
 8001260:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800126c:	d005      	beq.n	800127a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800126e:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <HAL_Delay+0x44>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4413      	add	r3, r2
 8001278:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800127a:	bf00      	nop
 800127c:	f7ff ffde 	bl	800123c <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	429a      	cmp	r2, r3
 800128a:	d8f7      	bhi.n	800127c <HAL_Delay+0x28>
  {
  }
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000004 	.word	0x20000004

0800129c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <__NVIC_SetPriorityGrouping+0x44>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b8:	4013      	ands	r3, r2
 80012ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ce:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <__NVIC_SetPriorityGrouping+0x44>)
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	60d3      	str	r3, [r2, #12]
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e8:	4b04      	ldr	r3, [pc, #16]	; (80012fc <__NVIC_GetPriorityGrouping+0x18>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	0a1b      	lsrs	r3, r3, #8
 80012ee:	f003 0307 	and.w	r3, r3, #7
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	2b00      	cmp	r3, #0
 8001310:	db0b      	blt.n	800132a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	f003 021f 	and.w	r2, r3, #31
 8001318:	4907      	ldr	r1, [pc, #28]	; (8001338 <__NVIC_EnableIRQ+0x38>)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	095b      	lsrs	r3, r3, #5
 8001320:	2001      	movs	r0, #1
 8001322:	fa00 f202 	lsl.w	r2, r0, r2
 8001326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000e100 	.word	0xe000e100

0800133c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	6039      	str	r1, [r7, #0]
 8001346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134c:	2b00      	cmp	r3, #0
 800134e:	db0a      	blt.n	8001366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	b2da      	uxtb	r2, r3
 8001354:	490c      	ldr	r1, [pc, #48]	; (8001388 <__NVIC_SetPriority+0x4c>)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	0112      	lsls	r2, r2, #4
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	440b      	add	r3, r1
 8001360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001364:	e00a      	b.n	800137c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4908      	ldr	r1, [pc, #32]	; (800138c <__NVIC_SetPriority+0x50>)
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	3b04      	subs	r3, #4
 8001374:	0112      	lsls	r2, r2, #4
 8001376:	b2d2      	uxtb	r2, r2
 8001378:	440b      	add	r3, r1
 800137a:	761a      	strb	r2, [r3, #24]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000e100 	.word	0xe000e100
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001390:	b480      	push	{r7}
 8001392:	b089      	sub	sp, #36	; 0x24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f1c3 0307 	rsb	r3, r3, #7
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	bf28      	it	cs
 80013ae:	2304      	movcs	r3, #4
 80013b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3304      	adds	r3, #4
 80013b6:	2b06      	cmp	r3, #6
 80013b8:	d902      	bls.n	80013c0 <NVIC_EncodePriority+0x30>
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3b03      	subs	r3, #3
 80013be:	e000      	b.n	80013c2 <NVIC_EncodePriority+0x32>
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	f04f 32ff 	mov.w	r2, #4294967295
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43da      	mvns	r2, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	401a      	ands	r2, r3
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d8:	f04f 31ff 	mov.w	r1, #4294967295
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	fa01 f303 	lsl.w	r3, r1, r3
 80013e2:	43d9      	mvns	r1, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	4313      	orrs	r3, r2
         );
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3724      	adds	r7, #36	; 0x24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001408:	d301      	bcc.n	800140e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800140a:	2301      	movs	r3, #1
 800140c:	e00f      	b.n	800142e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140e:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <SysTick_Config+0x40>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001416:	210f      	movs	r1, #15
 8001418:	f04f 30ff 	mov.w	r0, #4294967295
 800141c:	f7ff ff8e 	bl	800133c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <SysTick_Config+0x40>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001426:	4b04      	ldr	r3, [pc, #16]	; (8001438 <SysTick_Config+0x40>)
 8001428:	2207      	movs	r2, #7
 800142a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	e000e010 	.word	0xe000e010

0800143c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ff29 	bl	800129c <__NVIC_SetPriorityGrouping>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001452:	b580      	push	{r7, lr}
 8001454:	b086      	sub	sp, #24
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001464:	f7ff ff3e 	bl	80012e4 <__NVIC_GetPriorityGrouping>
 8001468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	6978      	ldr	r0, [r7, #20]
 8001470:	f7ff ff8e 	bl	8001390 <NVIC_EncodePriority>
 8001474:	4602      	mov	r2, r0
 8001476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff5d 	bl	800133c <__NVIC_SetPriority>
}
 8001482:	bf00      	nop
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	4603      	mov	r3, r0
 8001492:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff31 	bl	8001300 <__NVIC_EnableIRQ>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff ffa2 	bl	80013f8 <SysTick_Config>
 80014b4:	4603      	mov	r3, r0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80014cc:	f7ff feb6 	bl	800123c <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d101      	bne.n	80014dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e099      	b.n	8001610 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2202      	movs	r2, #2
 80014e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f022 0201 	bic.w	r2, r2, #1
 80014fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014fc:	e00f      	b.n	800151e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014fe:	f7ff fe9d 	bl	800123c <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b05      	cmp	r3, #5
 800150a:	d908      	bls.n	800151e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2220      	movs	r2, #32
 8001510:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2203      	movs	r2, #3
 8001516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e078      	b.n	8001610 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1e8      	bne.n	80014fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001534:	697a      	ldr	r2, [r7, #20]
 8001536:	4b38      	ldr	r3, [pc, #224]	; (8001618 <HAL_DMA_Init+0x158>)
 8001538:	4013      	ands	r3, r2
 800153a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800154a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001556:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001562:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	4313      	orrs	r3, r2
 800156e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001574:	2b04      	cmp	r3, #4
 8001576:	d107      	bne.n	8001588 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001580:	4313      	orrs	r3, r2
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	4313      	orrs	r3, r2
 8001586:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	f023 0307 	bic.w	r3, r3, #7
 800159e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	d117      	bne.n	80015e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d00e      	beq.n	80015e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 fa19 	bl	80019fc <DMA_CheckFifoParam>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d008      	beq.n	80015e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2240      	movs	r2, #64	; 0x40
 80015d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2201      	movs	r2, #1
 80015da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80015de:	2301      	movs	r3, #1
 80015e0:	e016      	b.n	8001610 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 f9d0 	bl	8001990 <DMA_CalcBaseAndBitshift>
 80015f0:	4603      	mov	r3, r0
 80015f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f8:	223f      	movs	r2, #63	; 0x3f
 80015fa:	409a      	lsls	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	f010803f 	.word	0xf010803f

0800161c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d004      	beq.n	800163a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2280      	movs	r2, #128	; 0x80
 8001634:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e00c      	b.n	8001654 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2205      	movs	r2, #5
 800163e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f022 0201 	bic.w	r2, r2, #1
 8001650:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001668:	2300      	movs	r3, #0
 800166a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800166c:	4b92      	ldr	r3, [pc, #584]	; (80018b8 <HAL_DMA_IRQHandler+0x258>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a92      	ldr	r2, [pc, #584]	; (80018bc <HAL_DMA_IRQHandler+0x25c>)
 8001672:	fba2 2303 	umull	r2, r3, r2, r3
 8001676:	0a9b      	lsrs	r3, r3, #10
 8001678:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800168a:	2208      	movs	r2, #8
 800168c:	409a      	lsls	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4013      	ands	r3, r2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d01a      	beq.n	80016cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d013      	beq.n	80016cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0204 	bic.w	r2, r2, #4
 80016b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b8:	2208      	movs	r2, #8
 80016ba:	409a      	lsls	r2, r3
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c4:	f043 0201 	orr.w	r2, r3, #1
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d0:	2201      	movs	r2, #1
 80016d2:	409a      	lsls	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4013      	ands	r3, r2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d012      	beq.n	8001702 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d00b      	beq.n	8001702 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ee:	2201      	movs	r2, #1
 80016f0:	409a      	lsls	r2, r3
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fa:	f043 0202 	orr.w	r2, r3, #2
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001706:	2204      	movs	r2, #4
 8001708:	409a      	lsls	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4013      	ands	r3, r2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d012      	beq.n	8001738 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00b      	beq.n	8001738 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001724:	2204      	movs	r2, #4
 8001726:	409a      	lsls	r2, r3
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001730:	f043 0204 	orr.w	r2, r3, #4
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173c:	2210      	movs	r2, #16
 800173e:	409a      	lsls	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4013      	ands	r3, r2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d043      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0308 	and.w	r3, r3, #8
 8001752:	2b00      	cmp	r3, #0
 8001754:	d03c      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800175a:	2210      	movs	r2, #16
 800175c:	409a      	lsls	r2, r3
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d018      	beq.n	80017a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d108      	bne.n	8001790 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	2b00      	cmp	r3, #0
 8001784:	d024      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	4798      	blx	r3
 800178e:	e01f      	b.n	80017d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001794:	2b00      	cmp	r3, #0
 8001796:	d01b      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	4798      	blx	r3
 80017a0:	e016      	b.n	80017d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d107      	bne.n	80017c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 0208 	bic.w	r2, r2, #8
 80017be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d4:	2220      	movs	r2, #32
 80017d6:	409a      	lsls	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4013      	ands	r3, r2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 808e 	beq.w	80018fe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0310 	and.w	r3, r3, #16
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 8086 	beq.w	80018fe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f6:	2220      	movs	r2, #32
 80017f8:	409a      	lsls	r2, r3
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b05      	cmp	r3, #5
 8001808:	d136      	bne.n	8001878 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 0216 	bic.w	r2, r2, #22
 8001818:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	695a      	ldr	r2, [r3, #20]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001828:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	2b00      	cmp	r3, #0
 8001830:	d103      	bne.n	800183a <HAL_DMA_IRQHandler+0x1da>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001836:	2b00      	cmp	r3, #0
 8001838:	d007      	beq.n	800184a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 0208 	bic.w	r2, r2, #8
 8001848:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184e:	223f      	movs	r2, #63	; 0x3f
 8001850:	409a      	lsls	r2, r3
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2201      	movs	r2, #1
 800185a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800186a:	2b00      	cmp	r3, #0
 800186c:	d07d      	beq.n	800196a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	4798      	blx	r3
        }
        return;
 8001876:	e078      	b.n	800196a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d01c      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d108      	bne.n	80018a6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001898:	2b00      	cmp	r3, #0
 800189a:	d030      	beq.n	80018fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	4798      	blx	r3
 80018a4:	e02b      	b.n	80018fe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d027      	beq.n	80018fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	4798      	blx	r3
 80018b6:	e022      	b.n	80018fe <HAL_DMA_IRQHandler+0x29e>
 80018b8:	20000118 	.word	0x20000118
 80018bc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d10f      	bne.n	80018ee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 0210 	bic.w	r2, r2, #16
 80018dc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2201      	movs	r2, #1
 80018e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001902:	2b00      	cmp	r3, #0
 8001904:	d032      	beq.n	800196c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b00      	cmp	r3, #0
 8001910:	d022      	beq.n	8001958 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2205      	movs	r2, #5
 8001916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 0201 	bic.w	r2, r2, #1
 8001928:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	3301      	adds	r3, #1
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	429a      	cmp	r2, r3
 8001934:	d307      	bcc.n	8001946 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1f2      	bne.n	800192a <HAL_DMA_IRQHandler+0x2ca>
 8001944:	e000      	b.n	8001948 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001946:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	4798      	blx	r3
 8001968:	e000      	b.n	800196c <HAL_DMA_IRQHandler+0x30c>
        return;
 800196a:	bf00      	nop
    }
  }
}
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop

08001974 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001982:	b2db      	uxtb	r3, r3
}
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	b2db      	uxtb	r3, r3
 800199e:	3b10      	subs	r3, #16
 80019a0:	4a14      	ldr	r2, [pc, #80]	; (80019f4 <DMA_CalcBaseAndBitshift+0x64>)
 80019a2:	fba2 2303 	umull	r2, r3, r2, r3
 80019a6:	091b      	lsrs	r3, r3, #4
 80019a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019aa:	4a13      	ldr	r2, [pc, #76]	; (80019f8 <DMA_CalcBaseAndBitshift+0x68>)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4413      	add	r3, r2
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	461a      	mov	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2b03      	cmp	r3, #3
 80019bc:	d909      	bls.n	80019d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019c6:	f023 0303 	bic.w	r3, r3, #3
 80019ca:	1d1a      	adds	r2, r3, #4
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	659a      	str	r2, [r3, #88]	; 0x58
 80019d0:	e007      	b.n	80019e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019da:	f023 0303 	bic.w	r3, r3, #3
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	aaaaaaab 	.word	0xaaaaaaab
 80019f8:	0800fc08 	.word	0x0800fc08

080019fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a04:	2300      	movs	r3, #0
 8001a06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d11f      	bne.n	8001a56 <DMA_CheckFifoParam+0x5a>
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	2b03      	cmp	r3, #3
 8001a1a:	d856      	bhi.n	8001aca <DMA_CheckFifoParam+0xce>
 8001a1c:	a201      	add	r2, pc, #4	; (adr r2, 8001a24 <DMA_CheckFifoParam+0x28>)
 8001a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a22:	bf00      	nop
 8001a24:	08001a35 	.word	0x08001a35
 8001a28:	08001a47 	.word	0x08001a47
 8001a2c:	08001a35 	.word	0x08001a35
 8001a30:	08001acb 	.word	0x08001acb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d046      	beq.n	8001ace <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a44:	e043      	b.n	8001ace <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a4e:	d140      	bne.n	8001ad2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a54:	e03d      	b.n	8001ad2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a5e:	d121      	bne.n	8001aa4 <DMA_CheckFifoParam+0xa8>
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	d837      	bhi.n	8001ad6 <DMA_CheckFifoParam+0xda>
 8001a66:	a201      	add	r2, pc, #4	; (adr r2, 8001a6c <DMA_CheckFifoParam+0x70>)
 8001a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a6c:	08001a7d 	.word	0x08001a7d
 8001a70:	08001a83 	.word	0x08001a83
 8001a74:	08001a7d 	.word	0x08001a7d
 8001a78:	08001a95 	.word	0x08001a95
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8001a80:	e030      	b.n	8001ae4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d025      	beq.n	8001ada <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a92:	e022      	b.n	8001ada <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a9c:	d11f      	bne.n	8001ade <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001aa2:	e01c      	b.n	8001ade <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d903      	bls.n	8001ab2 <DMA_CheckFifoParam+0xb6>
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	2b03      	cmp	r3, #3
 8001aae:	d003      	beq.n	8001ab8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ab0:	e018      	b.n	8001ae4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	73fb      	strb	r3, [r7, #15]
      break;
 8001ab6:	e015      	b.n	8001ae4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00e      	beq.n	8001ae2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ac8:	e00b      	b.n	8001ae2 <DMA_CheckFifoParam+0xe6>
      break;
 8001aca:	bf00      	nop
 8001acc:	e00a      	b.n	8001ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ace:	bf00      	nop
 8001ad0:	e008      	b.n	8001ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ad2:	bf00      	nop
 8001ad4:	e006      	b.n	8001ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ad6:	bf00      	nop
 8001ad8:	e004      	b.n	8001ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ada:	bf00      	nop
 8001adc:	e002      	b.n	8001ae4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001ade:	bf00      	nop
 8001ae0:	e000      	b.n	8001ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ae2:	bf00      	nop
    }
  } 
  
  return status; 
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop

08001af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b089      	sub	sp, #36	; 0x24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
 8001b0e:	e159      	b.n	8001dc4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b10:	2201      	movs	r2, #1
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	f040 8148 	bne.w	8001dbe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d005      	beq.n	8001b46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d130      	bne.n	8001ba8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	2203      	movs	r2, #3
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	091b      	lsrs	r3, r3, #4
 8001b92:	f003 0201 	and.w	r2, r3, #1
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	2b03      	cmp	r3, #3
 8001bb2:	d017      	beq.n	8001be4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d123      	bne.n	8001c38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	08da      	lsrs	r2, r3, #3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3208      	adds	r2, #8
 8001bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	220f      	movs	r2, #15
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	691a      	ldr	r2, [r3, #16]
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	08da      	lsrs	r2, r3, #3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	3208      	adds	r2, #8
 8001c32:	69b9      	ldr	r1, [r7, #24]
 8001c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	2203      	movs	r2, #3
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 0203 	and.w	r2, r3, #3
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 80a2 	beq.w	8001dbe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b57      	ldr	r3, [pc, #348]	; (8001ddc <HAL_GPIO_Init+0x2e8>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	4a56      	ldr	r2, [pc, #344]	; (8001ddc <HAL_GPIO_Init+0x2e8>)
 8001c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c88:	6453      	str	r3, [r2, #68]	; 0x44
 8001c8a:	4b54      	ldr	r3, [pc, #336]	; (8001ddc <HAL_GPIO_Init+0x2e8>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c96:	4a52      	ldr	r2, [pc, #328]	; (8001de0 <HAL_GPIO_Init+0x2ec>)
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	089b      	lsrs	r3, r3, #2
 8001c9c:	3302      	adds	r3, #2
 8001c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	220f      	movs	r2, #15
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a49      	ldr	r2, [pc, #292]	; (8001de4 <HAL_GPIO_Init+0x2f0>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d019      	beq.n	8001cf6 <HAL_GPIO_Init+0x202>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a48      	ldr	r2, [pc, #288]	; (8001de8 <HAL_GPIO_Init+0x2f4>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d013      	beq.n	8001cf2 <HAL_GPIO_Init+0x1fe>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a47      	ldr	r2, [pc, #284]	; (8001dec <HAL_GPIO_Init+0x2f8>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d00d      	beq.n	8001cee <HAL_GPIO_Init+0x1fa>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a46      	ldr	r2, [pc, #280]	; (8001df0 <HAL_GPIO_Init+0x2fc>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d007      	beq.n	8001cea <HAL_GPIO_Init+0x1f6>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a45      	ldr	r2, [pc, #276]	; (8001df4 <HAL_GPIO_Init+0x300>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d101      	bne.n	8001ce6 <HAL_GPIO_Init+0x1f2>
 8001ce2:	2304      	movs	r3, #4
 8001ce4:	e008      	b.n	8001cf8 <HAL_GPIO_Init+0x204>
 8001ce6:	2307      	movs	r3, #7
 8001ce8:	e006      	b.n	8001cf8 <HAL_GPIO_Init+0x204>
 8001cea:	2303      	movs	r3, #3
 8001cec:	e004      	b.n	8001cf8 <HAL_GPIO_Init+0x204>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e002      	b.n	8001cf8 <HAL_GPIO_Init+0x204>
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e000      	b.n	8001cf8 <HAL_GPIO_Init+0x204>
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	69fa      	ldr	r2, [r7, #28]
 8001cfa:	f002 0203 	and.w	r2, r2, #3
 8001cfe:	0092      	lsls	r2, r2, #2
 8001d00:	4093      	lsls	r3, r2
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d08:	4935      	ldr	r1, [pc, #212]	; (8001de0 <HAL_GPIO_Init+0x2ec>)
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	089b      	lsrs	r3, r3, #2
 8001d0e:	3302      	adds	r3, #2
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d16:	4b38      	ldr	r3, [pc, #224]	; (8001df8 <HAL_GPIO_Init+0x304>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d3a:	4a2f      	ldr	r2, [pc, #188]	; (8001df8 <HAL_GPIO_Init+0x304>)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d40:	4b2d      	ldr	r3, [pc, #180]	; (8001df8 <HAL_GPIO_Init+0x304>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d64:	4a24      	ldr	r2, [pc, #144]	; (8001df8 <HAL_GPIO_Init+0x304>)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d6a:	4b23      	ldr	r3, [pc, #140]	; (8001df8 <HAL_GPIO_Init+0x304>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d8e:	4a1a      	ldr	r2, [pc, #104]	; (8001df8 <HAL_GPIO_Init+0x304>)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d94:	4b18      	ldr	r3, [pc, #96]	; (8001df8 <HAL_GPIO_Init+0x304>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001db8:	4a0f      	ldr	r2, [pc, #60]	; (8001df8 <HAL_GPIO_Init+0x304>)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	61fb      	str	r3, [r7, #28]
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	2b0f      	cmp	r3, #15
 8001dc8:	f67f aea2 	bls.w	8001b10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dcc:	bf00      	nop
 8001dce:	bf00      	nop
 8001dd0:	3724      	adds	r7, #36	; 0x24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40013800 	.word	0x40013800
 8001de4:	40020000 	.word	0x40020000
 8001de8:	40020400 	.word	0x40020400
 8001dec:	40020800 	.word	0x40020800
 8001df0:	40020c00 	.word	0x40020c00
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40013c00 	.word	0x40013c00

08001dfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691a      	ldr	r2, [r3, #16]
 8001e0c:	887b      	ldrh	r3, [r7, #2]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d002      	beq.n	8001e1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e14:	2301      	movs	r3, #1
 8001e16:	73fb      	strb	r3, [r7, #15]
 8001e18:	e001      	b.n	8001e1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	807b      	strh	r3, [r7, #2]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e3c:	787b      	ldrb	r3, [r7, #1]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e42:	887a      	ldrh	r2, [r7, #2]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e48:	e003      	b.n	8001e52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e4a:	887b      	ldrh	r3, [r7, #2]
 8001e4c:	041a      	lsls	r2, r3, #16
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	619a      	str	r2, [r3, #24]
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b085      	sub	sp, #20
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	460b      	mov	r3, r1
 8001e68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e70:	887a      	ldrh	r2, [r7, #2]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4013      	ands	r3, r2
 8001e76:	041a      	lsls	r2, r3, #16
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	43d9      	mvns	r1, r3
 8001e7c:	887b      	ldrh	r3, [r7, #2]
 8001e7e:	400b      	ands	r3, r1
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	619a      	str	r2, [r3, #24]
}
 8001e86:	bf00      	nop
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e9e:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ea0:	695a      	ldr	r2, [r3, #20]
 8001ea2:	88fb      	ldrh	r3, [r7, #6]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d006      	beq.n	8001eb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eaa:	4a05      	ldr	r2, [pc, #20]	; (8001ec0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001eac:	88fb      	ldrh	r3, [r7, #6]
 8001eae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001eb0:	88fb      	ldrh	r3, [r7, #6]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 f806 	bl	8001ec4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40013c00 	.word	0x40013c00

08001ec4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
	...

08001edc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e12b      	b.n	8002146 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d106      	bne.n	8001f08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f00a f920 	bl	800c148 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2224      	movs	r2, #36	; 0x24
 8001f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 0201 	bic.w	r2, r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f40:	f003 fb2c 	bl	800559c <HAL_RCC_GetPCLK1Freq>
 8001f44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	4a81      	ldr	r2, [pc, #516]	; (8002150 <HAL_I2C_Init+0x274>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d807      	bhi.n	8001f60 <HAL_I2C_Init+0x84>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4a80      	ldr	r2, [pc, #512]	; (8002154 <HAL_I2C_Init+0x278>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	bf94      	ite	ls
 8001f58:	2301      	movls	r3, #1
 8001f5a:	2300      	movhi	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	e006      	b.n	8001f6e <HAL_I2C_Init+0x92>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4a7d      	ldr	r2, [pc, #500]	; (8002158 <HAL_I2C_Init+0x27c>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	bf94      	ite	ls
 8001f68:	2301      	movls	r3, #1
 8001f6a:	2300      	movhi	r3, #0
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e0e7      	b.n	8002146 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4a78      	ldr	r2, [pc, #480]	; (800215c <HAL_I2C_Init+0x280>)
 8001f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7e:	0c9b      	lsrs	r3, r3, #18
 8001f80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68ba      	ldr	r2, [r7, #8]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	4a6a      	ldr	r2, [pc, #424]	; (8002150 <HAL_I2C_Init+0x274>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d802      	bhi.n	8001fb0 <HAL_I2C_Init+0xd4>
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	3301      	adds	r3, #1
 8001fae:	e009      	b.n	8001fc4 <HAL_I2C_Init+0xe8>
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001fb6:	fb02 f303 	mul.w	r3, r2, r3
 8001fba:	4a69      	ldr	r2, [pc, #420]	; (8002160 <HAL_I2C_Init+0x284>)
 8001fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc0:	099b      	lsrs	r3, r3, #6
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	6812      	ldr	r2, [r2, #0]
 8001fc8:	430b      	orrs	r3, r1
 8001fca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001fd6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	495c      	ldr	r1, [pc, #368]	; (8002150 <HAL_I2C_Init+0x274>)
 8001fe0:	428b      	cmp	r3, r1
 8001fe2:	d819      	bhi.n	8002018 <HAL_I2C_Init+0x13c>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	1e59      	subs	r1, r3, #1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ff2:	1c59      	adds	r1, r3, #1
 8001ff4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ff8:	400b      	ands	r3, r1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00a      	beq.n	8002014 <HAL_I2C_Init+0x138>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	1e59      	subs	r1, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	fbb1 f3f3 	udiv	r3, r1, r3
 800200c:	3301      	adds	r3, #1
 800200e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002012:	e051      	b.n	80020b8 <HAL_I2C_Init+0x1dc>
 8002014:	2304      	movs	r3, #4
 8002016:	e04f      	b.n	80020b8 <HAL_I2C_Init+0x1dc>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d111      	bne.n	8002044 <HAL_I2C_Init+0x168>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	1e58      	subs	r0, r3, #1
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6859      	ldr	r1, [r3, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	440b      	add	r3, r1
 800202e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002032:	3301      	adds	r3, #1
 8002034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002038:	2b00      	cmp	r3, #0
 800203a:	bf0c      	ite	eq
 800203c:	2301      	moveq	r3, #1
 800203e:	2300      	movne	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	e012      	b.n	800206a <HAL_I2C_Init+0x18e>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	1e58      	subs	r0, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6859      	ldr	r1, [r3, #4]
 800204c:	460b      	mov	r3, r1
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	0099      	lsls	r1, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	fbb0 f3f3 	udiv	r3, r0, r3
 800205a:	3301      	adds	r3, #1
 800205c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002060:	2b00      	cmp	r3, #0
 8002062:	bf0c      	ite	eq
 8002064:	2301      	moveq	r3, #1
 8002066:	2300      	movne	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_I2C_Init+0x196>
 800206e:	2301      	movs	r3, #1
 8002070:	e022      	b.n	80020b8 <HAL_I2C_Init+0x1dc>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10e      	bne.n	8002098 <HAL_I2C_Init+0x1bc>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	1e58      	subs	r0, r3, #1
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6859      	ldr	r1, [r3, #4]
 8002082:	460b      	mov	r3, r1
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	440b      	add	r3, r1
 8002088:	fbb0 f3f3 	udiv	r3, r0, r3
 800208c:	3301      	adds	r3, #1
 800208e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002096:	e00f      	b.n	80020b8 <HAL_I2C_Init+0x1dc>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	1e58      	subs	r0, r3, #1
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6859      	ldr	r1, [r3, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	0099      	lsls	r1, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ae:	3301      	adds	r3, #1
 80020b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	6809      	ldr	r1, [r1, #0]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69da      	ldr	r2, [r3, #28]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6911      	ldr	r1, [r2, #16]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	68d2      	ldr	r2, [r2, #12]
 80020f2:	4311      	orrs	r1, r2
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	430b      	orrs	r3, r1
 80020fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	695a      	ldr	r2, [r3, #20]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0201 	orr.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2220      	movs	r2, #32
 8002132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	000186a0 	.word	0x000186a0
 8002154:	001e847f 	.word	0x001e847f
 8002158:	003d08ff 	.word	0x003d08ff
 800215c:	431bde83 	.word	0x431bde83
 8002160:	10624dd3 	.word	0x10624dd3

08002164 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002164:	b480      	push	{r7}
 8002166:	b087      	sub	sp, #28
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	4608      	mov	r0, r1
 800216e:	4611      	mov	r1, r2
 8002170:	461a      	mov	r2, r3
 8002172:	4603      	mov	r3, r0
 8002174:	817b      	strh	r3, [r7, #10]
 8002176:	460b      	mov	r3, r1
 8002178:	813b      	strh	r3, [r7, #8]
 800217a:	4613      	mov	r3, r2
 800217c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b20      	cmp	r3, #32
 800218c:	f040 809a 	bne.w	80022c4 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002190:	4b50      	ldr	r3, [pc, #320]	; (80022d4 <HAL_I2C_Mem_Read_IT+0x170>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	08db      	lsrs	r3, r3, #3
 8002196:	4a50      	ldr	r2, [pc, #320]	; (80022d8 <HAL_I2C_Mem_Read_IT+0x174>)
 8002198:	fba2 2303 	umull	r2, r3, r2, r3
 800219c:	0a1a      	lsrs	r2, r3, #8
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	009a      	lsls	r2, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	3b01      	subs	r3, #1
 80021ae:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d116      	bne.n	80021e4 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2220      	movs	r2, #32
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	f043 0220 	orr.w	r2, r3, #32
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e070      	b.n	80022c6 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d0db      	beq.n	80021aa <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d101      	bne.n	8002200 <HAL_I2C_Mem_Read_IT+0x9c>
 80021fc:	2302      	movs	r3, #2
 80021fe:	e062      	b.n	80022c6 <HAL_I2C_Mem_Read_IT+0x162>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b01      	cmp	r3, #1
 8002214:	d007      	beq.n	8002226 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f042 0201 	orr.w	r2, r2, #1
 8002224:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002234:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2222      	movs	r2, #34	; 0x22
 800223a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2240      	movs	r2, #64	; 0x40
 8002242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6a3a      	ldr	r2, [r7, #32]
 8002250:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002256:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225c:	b29a      	uxth	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4a1d      	ldr	r2, [pc, #116]	; (80022dc <HAL_I2C_Mem_Read_IT+0x178>)
 8002266:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002268:	897a      	ldrh	r2, [r7, #10]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800226e:	893a      	ldrh	r2, [r7, #8]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002274:	88fa      	ldrh	r2, [r7, #6]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800228e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800229e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d007      	beq.n	80022c0 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80022be:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 80022c0:	2300      	movs	r3, #0
 80022c2:	e000      	b.n	80022c6 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 80022c4:	2302      	movs	r3, #2
  }
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	371c      	adds	r7, #28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	20000118 	.word	0x20000118
 80022d8:	14f8b589 	.word	0x14f8b589
 80022dc:	ffff0000 	.word	0xffff0000

080022e0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002300:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002308:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	2b10      	cmp	r3, #16
 800230e:	d003      	beq.n	8002318 <HAL_I2C_EV_IRQHandler+0x38>
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	2b40      	cmp	r3, #64	; 0x40
 8002314:	f040 80c1 	bne.w	800249a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10d      	bne.n	800234e <HAL_I2C_EV_IRQHandler+0x6e>
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002338:	d003      	beq.n	8002342 <HAL_I2C_EV_IRQHandler+0x62>
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002340:	d101      	bne.n	8002346 <HAL_I2C_EV_IRQHandler+0x66>
 8002342:	2301      	movs	r3, #1
 8002344:	e000      	b.n	8002348 <HAL_I2C_EV_IRQHandler+0x68>
 8002346:	2300      	movs	r3, #0
 8002348:	2b01      	cmp	r3, #1
 800234a:	f000 8132 	beq.w	80025b2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00c      	beq.n	8002372 <HAL_I2C_EV_IRQHandler+0x92>
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	0a5b      	lsrs	r3, r3, #9
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b00      	cmp	r3, #0
 8002362:	d006      	beq.n	8002372 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f001 fb51 	bl	8003a0c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 fcc8 	bl	8002d00 <I2C_Master_SB>
 8002370:	e092      	b.n	8002498 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	08db      	lsrs	r3, r3, #3
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d009      	beq.n	8002392 <HAL_I2C_EV_IRQHandler+0xb2>
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	0a5b      	lsrs	r3, r3, #9
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 fd3e 	bl	8002e0c <I2C_Master_ADD10>
 8002390:	e082      	b.n	8002498 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	085b      	lsrs	r3, r3, #1
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d009      	beq.n	80023b2 <HAL_I2C_EV_IRQHandler+0xd2>
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	0a5b      	lsrs	r3, r3, #9
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 fd58 	bl	8002e60 <I2C_Master_ADDR>
 80023b0:	e072      	b.n	8002498 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	089b      	lsrs	r3, r3, #2
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d03b      	beq.n	8002436 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023cc:	f000 80f3 	beq.w	80025b6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	09db      	lsrs	r3, r3, #7
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00f      	beq.n	80023fc <HAL_I2C_EV_IRQHandler+0x11c>
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	0a9b      	lsrs	r3, r3, #10
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d009      	beq.n	80023fc <HAL_I2C_EV_IRQHandler+0x11c>
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	089b      	lsrs	r3, r3, #2
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d103      	bne.n	80023fc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 f942 	bl	800267e <I2C_MasterTransmit_TXE>
 80023fa:	e04d      	b.n	8002498 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	089b      	lsrs	r3, r3, #2
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 80d6 	beq.w	80025b6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	0a5b      	lsrs	r3, r3, #9
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 80cf 	beq.w	80025b6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002418:	7bbb      	ldrb	r3, [r7, #14]
 800241a:	2b21      	cmp	r3, #33	; 0x21
 800241c:	d103      	bne.n	8002426 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f9c9 	bl	80027b6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002424:	e0c7      	b.n	80025b6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002426:	7bfb      	ldrb	r3, [r7, #15]
 8002428:	2b40      	cmp	r3, #64	; 0x40
 800242a:	f040 80c4 	bne.w	80025b6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 fa37 	bl	80028a2 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002434:	e0bf      	b.n	80025b6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002440:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002444:	f000 80b7 	beq.w	80025b6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	099b      	lsrs	r3, r3, #6
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00f      	beq.n	8002474 <HAL_I2C_EV_IRQHandler+0x194>
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	0a9b      	lsrs	r3, r3, #10
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b00      	cmp	r3, #0
 800245e:	d009      	beq.n	8002474 <HAL_I2C_EV_IRQHandler+0x194>
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	089b      	lsrs	r3, r3, #2
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b00      	cmp	r3, #0
 800246a:	d103      	bne.n	8002474 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 faac 	bl	80029ca <I2C_MasterReceive_RXNE>
 8002472:	e011      	b.n	8002498 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	089b      	lsrs	r3, r3, #2
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 809a 	beq.w	80025b6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	0a5b      	lsrs	r3, r3, #9
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 8093 	beq.w	80025b6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 fb4b 	bl	8002b2c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002496:	e08e      	b.n	80025b6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002498:	e08d      	b.n	80025b6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d004      	beq.n	80024ac <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	61fb      	str	r3, [r7, #28]
 80024aa:	e007      	b.n	80024bc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	085b      	lsrs	r3, r3, #1
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d012      	beq.n	80024ee <HAL_I2C_EV_IRQHandler+0x20e>
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	0a5b      	lsrs	r3, r3, #9
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00c      	beq.n	80024ee <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80024e4:	69b9      	ldr	r1, [r7, #24]
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 ff09 	bl	80032fe <I2C_Slave_ADDR>
 80024ec:	e066      	b.n	80025bc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d009      	beq.n	800250e <HAL_I2C_EV_IRQHandler+0x22e>
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	0a5b      	lsrs	r3, r3, #9
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 ff44 	bl	8003394 <I2C_Slave_STOPF>
 800250c:	e056      	b.n	80025bc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800250e:	7bbb      	ldrb	r3, [r7, #14]
 8002510:	2b21      	cmp	r3, #33	; 0x21
 8002512:	d002      	beq.n	800251a <HAL_I2C_EV_IRQHandler+0x23a>
 8002514:	7bbb      	ldrb	r3, [r7, #14]
 8002516:	2b29      	cmp	r3, #41	; 0x29
 8002518:	d125      	bne.n	8002566 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	09db      	lsrs	r3, r3, #7
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00f      	beq.n	8002546 <HAL_I2C_EV_IRQHandler+0x266>
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	0a9b      	lsrs	r3, r3, #10
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d009      	beq.n	8002546 <HAL_I2C_EV_IRQHandler+0x266>
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	089b      	lsrs	r3, r3, #2
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d103      	bne.n	8002546 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 fe1f 	bl	8003182 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002544:	e039      	b.n	80025ba <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	089b      	lsrs	r3, r3, #2
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d033      	beq.n	80025ba <HAL_I2C_EV_IRQHandler+0x2da>
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	0a5b      	lsrs	r3, r3, #9
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d02d      	beq.n	80025ba <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 fe4c 	bl	80031fc <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002564:	e029      	b.n	80025ba <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	099b      	lsrs	r3, r3, #6
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00f      	beq.n	8002592 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	0a9b      	lsrs	r3, r3, #10
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d009      	beq.n	8002592 <HAL_I2C_EV_IRQHandler+0x2b2>
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	089b      	lsrs	r3, r3, #2
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d103      	bne.n	8002592 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 fe57 	bl	800323e <I2C_SlaveReceive_RXNE>
 8002590:	e014      	b.n	80025bc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	089b      	lsrs	r3, r3, #2
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00e      	beq.n	80025bc <HAL_I2C_EV_IRQHandler+0x2dc>
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	0a5b      	lsrs	r3, r3, #9
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d008      	beq.n	80025bc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 fe85 	bl	80032ba <I2C_SlaveReceive_BTF>
 80025b0:	e004      	b.n	80025bc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80025b2:	bf00      	nop
 80025b4:	e002      	b.n	80025bc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025b6:	bf00      	nop
 80025b8:	e000      	b.n	80025bc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025ba:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80025bc:	3720      	adds	r7, #32
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	460b      	mov	r3, r1
 800261c:	70fb      	strb	r3, [r7, #3]
 800261e:	4613      	mov	r3, r2
 8002620:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b084      	sub	sp, #16
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800268c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002694:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d150      	bne.n	8002746 <I2C_MasterTransmit_TXE+0xc8>
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	2b21      	cmp	r3, #33	; 0x21
 80026a8:	d14d      	bne.n	8002746 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d01d      	beq.n	80026ec <I2C_MasterTransmit_TXE+0x6e>
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2b20      	cmp	r3, #32
 80026b4:	d01a      	beq.n	80026ec <I2C_MasterTransmit_TXE+0x6e>
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026bc:	d016      	beq.n	80026ec <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80026cc:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2211      	movs	r2, #17
 80026d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7ff ff6c 	bl	80025c2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80026ea:	e060      	b.n	80027ae <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80026fa:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800270a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2220      	movs	r2, #32
 8002716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b40      	cmp	r3, #64	; 0x40
 8002724:	d107      	bne.n	8002736 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7ff ff87 	bl	8002642 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002734:	e03b      	b.n	80027ae <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff ff3f 	bl	80025c2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002744:	e033      	b.n	80027ae <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002746:	7bfb      	ldrb	r3, [r7, #15]
 8002748:	2b21      	cmp	r3, #33	; 0x21
 800274a:	d005      	beq.n	8002758 <I2C_MasterTransmit_TXE+0xda>
 800274c:	7bbb      	ldrb	r3, [r7, #14]
 800274e:	2b40      	cmp	r3, #64	; 0x40
 8002750:	d12d      	bne.n	80027ae <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	2b22      	cmp	r3, #34	; 0x22
 8002756:	d12a      	bne.n	80027ae <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275c:	b29b      	uxth	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d108      	bne.n	8002774 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002770:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002772:	e01c      	b.n	80027ae <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b40      	cmp	r3, #64	; 0x40
 800277e:	d103      	bne.n	8002788 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f88e 	bl	80028a2 <I2C_MemoryTransmit_TXE_BTF>
}
 8002786:	e012      	b.n	80027ae <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	781a      	ldrb	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	1c5a      	adds	r2, r3, #1
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80027ac:	e7ff      	b.n	80027ae <I2C_MasterTransmit_TXE+0x130>
 80027ae:	bf00      	nop
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b084      	sub	sp, #16
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b21      	cmp	r3, #33	; 0x21
 80027ce:	d164      	bne.n	800289a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d012      	beq.n	8002800 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	781a      	ldrb	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80027fe:	e04c      	b.n	800289a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2b08      	cmp	r3, #8
 8002804:	d01d      	beq.n	8002842 <I2C_MasterTransmit_BTF+0x8c>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2b20      	cmp	r3, #32
 800280a:	d01a      	beq.n	8002842 <I2C_MasterTransmit_BTF+0x8c>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002812:	d016      	beq.n	8002842 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002822:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2211      	movs	r2, #17
 8002828:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2220      	movs	r2, #32
 8002836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff fec1 	bl	80025c2 <HAL_I2C_MasterTxCpltCallback>
}
 8002840:	e02b      	b.n	800289a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002850:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002860:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b40      	cmp	r3, #64	; 0x40
 800287a:	d107      	bne.n	800288c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7ff fedc 	bl	8002642 <HAL_I2C_MemTxCpltCallback>
}
 800288a:	e006      	b.n	800289a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7ff fe94 	bl	80025c2 <HAL_I2C_MasterTxCpltCallback>
}
 800289a:	bf00      	nop
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b084      	sub	sp, #16
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d11d      	bne.n	80028f6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d10b      	bne.n	80028da <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d2:	1c9a      	adds	r2, r3, #2
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80028d8:	e073      	b.n	80029c2 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028de:	b29b      	uxth	r3, r3
 80028e0:	121b      	asrs	r3, r3, #8
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80028f4:	e065      	b.n	80029c2 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d10b      	bne.n	8002916 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002902:	b2da      	uxtb	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002914:	e055      	b.n	80029c2 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800291a:	2b02      	cmp	r3, #2
 800291c:	d151      	bne.n	80029c2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800291e:	7bfb      	ldrb	r3, [r7, #15]
 8002920:	2b22      	cmp	r3, #34	; 0x22
 8002922:	d10d      	bne.n	8002940 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002932:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800293e:	e040      	b.n	80029c2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002944:	b29b      	uxth	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d015      	beq.n	8002976 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800294a:	7bfb      	ldrb	r3, [r7, #15]
 800294c:	2b21      	cmp	r3, #33	; 0x21
 800294e:	d112      	bne.n	8002976 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	781a      	ldrb	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	1c5a      	adds	r2, r3, #1
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296a:	b29b      	uxth	r3, r3
 800296c:	3b01      	subs	r3, #1
 800296e:	b29a      	uxth	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002974:	e025      	b.n	80029c2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297a:	b29b      	uxth	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	d120      	bne.n	80029c2 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002980:	7bfb      	ldrb	r3, [r7, #15]
 8002982:	2b21      	cmp	r3, #33	; 0x21
 8002984:	d11d      	bne.n	80029c2 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002994:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029a4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2220      	movs	r2, #32
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff fe40 	bl	8002642 <HAL_I2C_MemTxCpltCallback>
}
 80029c2:	bf00      	nop
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b084      	sub	sp, #16
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b22      	cmp	r3, #34	; 0x22
 80029dc:	f040 80a2 	bne.w	8002b24 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	d921      	bls.n	8002a32 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	691a      	ldr	r2, [r3, #16]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	f040 8082 	bne.w	8002b24 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a2e:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002a30:	e078      	b.n	8002b24 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d074      	beq.n	8002b24 <I2C_MasterReceive_RXNE+0x15a>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d002      	beq.n	8002a46 <I2C_MasterReceive_RXNE+0x7c>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d16e      	bne.n	8002b24 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 ffae 	bl	80039a8 <I2C_WaitOnSTOPRequestThroughIT>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d142      	bne.n	8002ad8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a60:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a70:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b40      	cmp	r3, #64	; 0x40
 8002aaa:	d10a      	bne.n	8002ac2 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f009 fdb2 	bl	800c624 <HAL_I2C_MemRxCpltCallback>
}
 8002ac0:	e030      	b.n	8002b24 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2212      	movs	r2, #18
 8002ace:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7ff fd80 	bl	80025d6 <HAL_I2C_MasterRxCpltCallback>
}
 8002ad6:	e025      	b.n	8002b24 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ae6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691a      	ldr	r2, [r3, #16]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2220      	movs	r2, #32
 8002b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7ff fd99 	bl	8002656 <HAL_I2C_ErrorCallback>
}
 8002b24:	bf00      	nop
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b38:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d11b      	bne.n	8002b7c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b52:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	691a      	ldr	r2, [r3, #16]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002b7a:	e0bd      	b.n	8002cf8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	2b03      	cmp	r3, #3
 8002b84:	d129      	bne.n	8002bda <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b94:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d00a      	beq.n	8002bb2 <I2C_MasterReceive_BTF+0x86>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d007      	beq.n	8002bb2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bb0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	691a      	ldr	r2, [r3, #16]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	1c5a      	adds	r2, r3, #1
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002bd8:	e08e      	b.n	8002cf8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d176      	bne.n	8002cd2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d002      	beq.n	8002bf0 <I2C_MasterReceive_BTF+0xc4>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b10      	cmp	r3, #16
 8002bee:	d108      	bne.n	8002c02 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	e019      	b.n	8002c36 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d002      	beq.n	8002c0e <I2C_MasterReceive_BTF+0xe2>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d108      	bne.n	8002c20 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	e00a      	b.n	8002c36 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2b10      	cmp	r3, #16
 8002c24:	d007      	beq.n	8002c36 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c34:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	691a      	ldr	r2, [r3, #16]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	1c5a      	adds	r2, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	3b01      	subs	r3, #1
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691a      	ldr	r2, [r3, #16]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	1c5a      	adds	r2, r3, #1
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002c90:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2220      	movs	r2, #32
 8002c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b40      	cmp	r3, #64	; 0x40
 8002ca4:	d10a      	bne.n	8002cbc <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f009 fcb5 	bl	800c624 <HAL_I2C_MemRxCpltCallback>
}
 8002cba:	e01d      	b.n	8002cf8 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2212      	movs	r2, #18
 8002cc8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7ff fc83 	bl	80025d6 <HAL_I2C_MasterRxCpltCallback>
}
 8002cd0:	e012      	b.n	8002cf8 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	691a      	ldr	r2, [r3, #16]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	1c5a      	adds	r2, r3, #1
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002cf8:	bf00      	nop
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b40      	cmp	r3, #64	; 0x40
 8002d12:	d117      	bne.n	8002d44 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d109      	bne.n	8002d30 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	461a      	mov	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d2c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002d2e:	e067      	b.n	8002e00 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	f043 0301 	orr.w	r3, r3, #1
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	611a      	str	r2, [r3, #16]
}
 8002d42:	e05d      	b.n	8002e00 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d4c:	d133      	bne.n	8002db6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b21      	cmp	r3, #33	; 0x21
 8002d58:	d109      	bne.n	8002d6e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	461a      	mov	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d6a:	611a      	str	r2, [r3, #16]
 8002d6c:	e008      	b.n	8002d80 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	f043 0301 	orr.w	r3, r3, #1
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d004      	beq.n	8002d92 <I2C_Master_SB+0x92>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d108      	bne.n	8002da4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d032      	beq.n	8002e00 <I2C_Master_SB+0x100>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d02d      	beq.n	8002e00 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002db2:	605a      	str	r2, [r3, #4]
}
 8002db4:	e024      	b.n	8002e00 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10e      	bne.n	8002ddc <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	11db      	asrs	r3, r3, #7
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	f003 0306 	and.w	r3, r3, #6
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	f063 030f 	orn	r3, r3, #15
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	611a      	str	r2, [r3, #16]
}
 8002dda:	e011      	b.n	8002e00 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d10d      	bne.n	8002e00 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	11db      	asrs	r3, r3, #7
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	f003 0306 	and.w	r3, r3, #6
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	f063 030e 	orn	r3, r3, #14
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	611a      	str	r2, [r3, #16]
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d004      	beq.n	8002e32 <I2C_Master_ADD10+0x26>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d108      	bne.n	8002e44 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00c      	beq.n	8002e54 <I2C_Master_ADD10+0x48>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d007      	beq.n	8002e54 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e52:	605a      	str	r2, [r3, #4]
  }
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b091      	sub	sp, #68	; 0x44
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e6e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e76:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b22      	cmp	r3, #34	; 0x22
 8002e88:	f040 8169 	bne.w	800315e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10f      	bne.n	8002eb4 <I2C_Master_ADDR+0x54>
 8002e94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002e98:	2b40      	cmp	r3, #64	; 0x40
 8002e9a:	d10b      	bne.n	8002eb4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	633b      	str	r3, [r7, #48]	; 0x30
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	633b      	str	r3, [r7, #48]	; 0x30
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	633b      	str	r3, [r7, #48]	; 0x30
 8002eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb2:	e160      	b.n	8003176 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d11d      	bne.n	8002ef8 <I2C_Master_ADDR+0x98>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002ec4:	d118      	bne.n	8002ef8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eea:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef0:	1c5a      	adds	r2, r3, #1
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	651a      	str	r2, [r3, #80]	; 0x50
 8002ef6:	e13e      	b.n	8003176 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d113      	bne.n	8002f2a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f02:	2300      	movs	r3, #0
 8002f04:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f16:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	e115      	b.n	8003156 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	f040 808a 	bne.w	800304a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f3c:	d137      	bne.n	8002fae <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f4c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f5c:	d113      	bne.n	8002f86 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f6c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f6e:	2300      	movs	r3, #0
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	e0e7      	b.n	8003156 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f86:	2300      	movs	r3, #0
 8002f88:	623b      	str	r3, [r7, #32]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	623b      	str	r3, [r7, #32]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	623b      	str	r3, [r7, #32]
 8002f9a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	e0d3      	b.n	8003156 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d02e      	beq.n	8003012 <I2C_Master_ADDR+0x1b2>
 8002fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb6:	2b20      	cmp	r3, #32
 8002fb8:	d02b      	beq.n	8003012 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fbc:	2b12      	cmp	r3, #18
 8002fbe:	d102      	bne.n	8002fc6 <I2C_Master_ADDR+0x166>
 8002fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d125      	bne.n	8003012 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d00e      	beq.n	8002fea <I2C_Master_ADDR+0x18a>
 8002fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d00b      	beq.n	8002fea <I2C_Master_ADDR+0x18a>
 8002fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd4:	2b10      	cmp	r3, #16
 8002fd6:	d008      	beq.n	8002fea <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	e007      	b.n	8002ffa <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ff8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	61fb      	str	r3, [r7, #28]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	61fb      	str	r3, [r7, #28]
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	e0a1      	b.n	8003156 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003020:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003022:	2300      	movs	r3, #0
 8003024:	61bb      	str	r3, [r7, #24]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	61bb      	str	r3, [r7, #24]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	61bb      	str	r3, [r7, #24]
 8003036:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	e085      	b.n	8003156 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304e:	b29b      	uxth	r3, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d14d      	bne.n	80030f0 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003056:	2b04      	cmp	r3, #4
 8003058:	d016      	beq.n	8003088 <I2C_Master_ADDR+0x228>
 800305a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305c:	2b02      	cmp	r3, #2
 800305e:	d013      	beq.n	8003088 <I2C_Master_ADDR+0x228>
 8003060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003062:	2b10      	cmp	r3, #16
 8003064:	d010      	beq.n	8003088 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003074:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	e007      	b.n	8003098 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003096:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030a6:	d117      	bne.n	80030d8 <I2C_Master_ADDR+0x278>
 80030a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030ae:	d00b      	beq.n	80030c8 <I2C_Master_ADDR+0x268>
 80030b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d008      	beq.n	80030c8 <I2C_Master_ADDR+0x268>
 80030b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d005      	beq.n	80030c8 <I2C_Master_ADDR+0x268>
 80030bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030be:	2b10      	cmp	r3, #16
 80030c0:	d002      	beq.n	80030c8 <I2C_Master_ADDR+0x268>
 80030c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c4:	2b20      	cmp	r3, #32
 80030c6:	d107      	bne.n	80030d8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030d6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030d8:	2300      	movs	r3, #0
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	e032      	b.n	8003156 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030fe:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800310a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800310e:	d117      	bne.n	8003140 <I2C_Master_ADDR+0x2e0>
 8003110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003112:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003116:	d00b      	beq.n	8003130 <I2C_Master_ADDR+0x2d0>
 8003118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800311a:	2b01      	cmp	r3, #1
 800311c:	d008      	beq.n	8003130 <I2C_Master_ADDR+0x2d0>
 800311e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003120:	2b08      	cmp	r3, #8
 8003122:	d005      	beq.n	8003130 <I2C_Master_ADDR+0x2d0>
 8003124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003126:	2b10      	cmp	r3, #16
 8003128:	d002      	beq.n	8003130 <I2C_Master_ADDR+0x2d0>
 800312a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800312c:	2b20      	cmp	r3, #32
 800312e:	d107      	bne.n	8003140 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800313e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003140:	2300      	movs	r3, #0
 8003142:	613b      	str	r3, [r7, #16]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	613b      	str	r3, [r7, #16]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	613b      	str	r3, [r7, #16]
 8003154:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800315c:	e00b      	b.n	8003176 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800315e:	2300      	movs	r3, #0
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	68fb      	ldr	r3, [r7, #12]
}
 8003174:	e7ff      	b.n	8003176 <I2C_Master_ADDR+0x316>
 8003176:	bf00      	nop
 8003178:	3744      	adds	r7, #68	; 0x44
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b084      	sub	sp, #16
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003190:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003196:	b29b      	uxth	r3, r3
 8003198:	2b00      	cmp	r3, #0
 800319a:	d02b      	beq.n	80031f4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	781a      	ldrb	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d114      	bne.n	80031f4 <I2C_SlaveTransmit_TXE+0x72>
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
 80031cc:	2b29      	cmp	r3, #41	; 0x29
 80031ce:	d111      	bne.n	80031f4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031de:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2221      	movs	r2, #33	; 0x21
 80031e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2228      	movs	r2, #40	; 0x28
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7ff f9fb 	bl	80025ea <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80031f4:	bf00      	nop
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003208:	b29b      	uxth	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d011      	beq.n	8003232 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	781a      	ldrb	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	1c5a      	adds	r2, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003228:	b29b      	uxth	r3, r3
 800322a:	3b01      	subs	r3, #1
 800322c:	b29a      	uxth	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b084      	sub	sp, #16
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800324c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003252:	b29b      	uxth	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	d02c      	beq.n	80032b2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	691a      	ldr	r2, [r3, #16]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	1c5a      	adds	r2, r3, #1
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003274:	b29b      	uxth	r3, r3
 8003276:	3b01      	subs	r3, #1
 8003278:	b29a      	uxth	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003282:	b29b      	uxth	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d114      	bne.n	80032b2 <I2C_SlaveReceive_RXNE+0x74>
 8003288:	7bfb      	ldrb	r3, [r7, #15]
 800328a:	2b2a      	cmp	r3, #42	; 0x2a
 800328c:	d111      	bne.n	80032b2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800329c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2222      	movs	r2, #34	; 0x22
 80032a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2228      	movs	r2, #40	; 0x28
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f7ff f9a6 	bl	80025fe <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80032b2:	bf00      	nop
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d012      	beq.n	80032f2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	691a      	ldr	r2, [r3, #16]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	b2d2      	uxtb	r2, r2
 80032d8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	1c5a      	adds	r2, r3, #1
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	3b01      	subs	r3, #1
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b084      	sub	sp, #16
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003308:	2300      	movs	r3, #0
 800330a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003312:	b2db      	uxtb	r3, r3
 8003314:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003318:	2b28      	cmp	r3, #40	; 0x28
 800331a:	d127      	bne.n	800336c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800332a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	089b      	lsrs	r3, r3, #2
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003338:	2301      	movs	r3, #1
 800333a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	09db      	lsrs	r3, r3, #7
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	d103      	bne.n	8003350 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	81bb      	strh	r3, [r7, #12]
 800334e:	e002      	b.n	8003356 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800335e:	89ba      	ldrh	r2, [r7, #12]
 8003360:	7bfb      	ldrb	r3, [r7, #15]
 8003362:	4619      	mov	r1, r3
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff f954 	bl	8002612 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800336a:	e00e      	b.n	800338a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800336c:	2300      	movs	r3, #0
 800336e:	60bb      	str	r3, [r7, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	60bb      	str	r3, [r7, #8]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	60bb      	str	r3, [r7, #8]
 8003380:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800338a:	bf00      	nop
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
	...

08003394 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033b2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80033b4:	2300      	movs	r3, #0
 80033b6:	60bb      	str	r3, [r7, #8]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	60bb      	str	r3, [r7, #8]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0201 	orr.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033e0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033f0:	d172      	bne.n	80034d8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
 80033f4:	2b22      	cmp	r3, #34	; 0x22
 80033f6:	d002      	beq.n	80033fe <I2C_Slave_STOPF+0x6a>
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
 80033fa:	2b2a      	cmp	r3, #42	; 0x2a
 80033fc:	d135      	bne.n	800346a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	b29a      	uxth	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d005      	beq.n	8003422 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	f043 0204 	orr.w	r2, r3, #4
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003430:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003436:	4618      	mov	r0, r3
 8003438:	f7fe fa9c 	bl	8001974 <HAL_DMA_GetState>
 800343c:	4603      	mov	r3, r0
 800343e:	2b01      	cmp	r3, #1
 8003440:	d049      	beq.n	80034d6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003446:	4a69      	ldr	r2, [pc, #420]	; (80035ec <I2C_Slave_STOPF+0x258>)
 8003448:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344e:	4618      	mov	r0, r3
 8003450:	f7fe f8e4 	bl	800161c <HAL_DMA_Abort_IT>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d03d      	beq.n	80034d6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003464:	4610      	mov	r0, r2
 8003466:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003468:	e035      	b.n	80034d6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	b29a      	uxth	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347c:	b29b      	uxth	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d005      	beq.n	800348e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	f043 0204 	orr.w	r2, r3, #4
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800349c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fe fa66 	bl	8001974 <HAL_DMA_GetState>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d014      	beq.n	80034d8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b2:	4a4e      	ldr	r2, [pc, #312]	; (80035ec <I2C_Slave_STOPF+0x258>)
 80034b4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fe f8ae 	bl	800161c <HAL_DMA_Abort_IT>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d008      	beq.n	80034d8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034d0:	4610      	mov	r0, r2
 80034d2:	4798      	blx	r3
 80034d4:	e000      	b.n	80034d8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034d6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034dc:	b29b      	uxth	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d03e      	beq.n	8003560 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d112      	bne.n	8003516 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691a      	ldr	r2, [r3, #16]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350c:	b29b      	uxth	r3, r3
 800350e:	3b01      	subs	r3, #1
 8003510:	b29a      	uxth	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003520:	2b40      	cmp	r3, #64	; 0x40
 8003522:	d112      	bne.n	800354a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	691a      	ldr	r2, [r3, #16]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	1c5a      	adds	r2, r3, #1
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003540:	b29b      	uxth	r3, r3
 8003542:	3b01      	subs	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354e:	b29b      	uxth	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d005      	beq.n	8003560 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	f043 0204 	orr.w	r2, r3, #4
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f843 	bl	80035f4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800356e:	e039      	b.n	80035e4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003570:	7bfb      	ldrb	r3, [r7, #15]
 8003572:	2b2a      	cmp	r3, #42	; 0x2a
 8003574:	d109      	bne.n	800358a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2228      	movs	r2, #40	; 0x28
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7ff f83a 	bl	80025fe <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b28      	cmp	r3, #40	; 0x28
 8003594:	d111      	bne.n	80035ba <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a15      	ldr	r2, [pc, #84]	; (80035f0 <I2C_Slave_STOPF+0x25c>)
 800359a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2220      	movs	r2, #32
 80035a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7ff f83b 	bl	800262e <HAL_I2C_ListenCpltCallback>
}
 80035b8:	e014      	b.n	80035e4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	2b22      	cmp	r3, #34	; 0x22
 80035c0:	d002      	beq.n	80035c8 <I2C_Slave_STOPF+0x234>
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
 80035c4:	2b22      	cmp	r3, #34	; 0x22
 80035c6:	d10d      	bne.n	80035e4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7ff f80d 	bl	80025fe <HAL_I2C_SlaveRxCpltCallback>
}
 80035e4:	bf00      	nop
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	08003859 	.word	0x08003859
 80035f0:	ffff0000 	.word	0xffff0000

080035f4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003602:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800360a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800360c:	7bbb      	ldrb	r3, [r7, #14]
 800360e:	2b10      	cmp	r3, #16
 8003610:	d002      	beq.n	8003618 <I2C_ITError+0x24>
 8003612:	7bbb      	ldrb	r3, [r7, #14]
 8003614:	2b40      	cmp	r3, #64	; 0x40
 8003616:	d10a      	bne.n	800362e <I2C_ITError+0x3a>
 8003618:	7bfb      	ldrb	r3, [r7, #15]
 800361a:	2b22      	cmp	r3, #34	; 0x22
 800361c:	d107      	bne.n	800362e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800362c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800362e:	7bfb      	ldrb	r3, [r7, #15]
 8003630:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003634:	2b28      	cmp	r3, #40	; 0x28
 8003636:	d107      	bne.n	8003648 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2228      	movs	r2, #40	; 0x28
 8003642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003646:	e015      	b.n	8003674 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003656:	d00a      	beq.n	800366e <I2C_ITError+0x7a>
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	2b60      	cmp	r3, #96	; 0x60
 800365c:	d007      	beq.n	800366e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2220      	movs	r2, #32
 8003662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800367e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003682:	d162      	bne.n	800374a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003692:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003698:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d020      	beq.n	80036e4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a6:	4a6a      	ldr	r2, [pc, #424]	; (8003850 <I2C_ITError+0x25c>)
 80036a8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fd ffb4 	bl	800161c <HAL_DMA_Abort_IT>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 8089 	beq.w	80037ce <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0201 	bic.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036de:	4610      	mov	r0, r2
 80036e0:	4798      	blx	r3
 80036e2:	e074      	b.n	80037ce <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e8:	4a59      	ldr	r2, [pc, #356]	; (8003850 <I2C_ITError+0x25c>)
 80036ea:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fd ff93 	bl	800161c <HAL_DMA_Abort_IT>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d068      	beq.n	80037ce <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003706:	2b40      	cmp	r3, #64	; 0x40
 8003708:	d10b      	bne.n	8003722 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0201 	bic.w	r2, r2, #1
 8003730:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2220      	movs	r2, #32
 8003736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003744:	4610      	mov	r0, r2
 8003746:	4798      	blx	r3
 8003748:	e041      	b.n	80037ce <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b60      	cmp	r3, #96	; 0x60
 8003754:	d125      	bne.n	80037a2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376e:	2b40      	cmp	r3, #64	; 0x40
 8003770:	d10b      	bne.n	800378a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	691a      	ldr	r2, [r3, #16]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0201 	bic.w	r2, r2, #1
 8003798:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fe ff65 	bl	800266a <HAL_I2C_AbortCpltCallback>
 80037a0:	e015      	b.n	80037ce <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ac:	2b40      	cmp	r3, #64	; 0x40
 80037ae:	d10b      	bne.n	80037c8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	691a      	ldr	r2, [r3, #16]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	1c5a      	adds	r2, r3, #1
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7fe ff44 	bl	8002656 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10e      	bne.n	80037fc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d109      	bne.n	80037fc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d104      	bne.n	80037fc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d007      	beq.n	800380c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800380a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003812:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b04      	cmp	r3, #4
 800381e:	d113      	bne.n	8003848 <I2C_ITError+0x254>
 8003820:	7bfb      	ldrb	r3, [r7, #15]
 8003822:	2b28      	cmp	r3, #40	; 0x28
 8003824:	d110      	bne.n	8003848 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a0a      	ldr	r2, [pc, #40]	; (8003854 <I2C_ITError+0x260>)
 800382a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2220      	movs	r2, #32
 8003836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7fe fef3 	bl	800262e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003848:	bf00      	nop
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	08003859 	.word	0x08003859
 8003854:	ffff0000 	.word	0xffff0000

08003858 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003860:	2300      	movs	r3, #0
 8003862:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003868:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003870:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003872:	4b4b      	ldr	r3, [pc, #300]	; (80039a0 <I2C_DMAAbort+0x148>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	08db      	lsrs	r3, r3, #3
 8003878:	4a4a      	ldr	r2, [pc, #296]	; (80039a4 <I2C_DMAAbort+0x14c>)
 800387a:	fba2 2303 	umull	r2, r3, r2, r3
 800387e:	0a1a      	lsrs	r2, r3, #8
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	00da      	lsls	r2, r3, #3
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d106      	bne.n	80038a0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	f043 0220 	orr.w	r2, r3, #32
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800389e:	e00a      	b.n	80038b6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038b4:	d0ea      	beq.n	800388c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c2:	2200      	movs	r2, #0
 80038c4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d2:	2200      	movs	r2, #0
 80038d4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038e4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2200      	movs	r2, #0
 80038ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f8:	2200      	movs	r2, #0
 80038fa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003908:	2200      	movs	r2, #0
 800390a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0201 	bic.w	r2, r2, #1
 800391a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b60      	cmp	r3, #96	; 0x60
 8003926:	d10e      	bne.n	8003946 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	2200      	movs	r2, #0
 800393c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800393e:	6978      	ldr	r0, [r7, #20]
 8003940:	f7fe fe93 	bl	800266a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003944:	e027      	b.n	8003996 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003946:	7cfb      	ldrb	r3, [r7, #19]
 8003948:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800394c:	2b28      	cmp	r3, #40	; 0x28
 800394e:	d117      	bne.n	8003980 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0201 	orr.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800396e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	2200      	movs	r2, #0
 8003974:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2228      	movs	r2, #40	; 0x28
 800397a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800397e:	e007      	b.n	8003990 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003990:	6978      	ldr	r0, [r7, #20]
 8003992:	f7fe fe60 	bl	8002656 <HAL_I2C_ErrorCallback>
}
 8003996:	bf00      	nop
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	20000118 	.word	0x20000118
 80039a4:	14f8b589 	.word	0x14f8b589

080039a8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80039b4:	4b13      	ldr	r3, [pc, #76]	; (8003a04 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	08db      	lsrs	r3, r3, #3
 80039ba:	4a13      	ldr	r2, [pc, #76]	; (8003a08 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80039bc:	fba2 2303 	umull	r2, r3, r2, r3
 80039c0:	0a1a      	lsrs	r2, r3, #8
 80039c2:	4613      	mov	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	3b01      	subs	r3, #1
 80039ce:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d107      	bne.n	80039e6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	f043 0220 	orr.w	r2, r3, #32
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e008      	b.n	80039f8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039f4:	d0e9      	beq.n	80039ca <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	20000118 	.word	0x20000118
 8003a08:	14f8b589 	.word	0x14f8b589

08003a0c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a18:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003a1c:	d103      	bne.n	8003a26 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003a24:	e007      	b.n	8003a36 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003a2e:	d102      	bne.n	8003a36 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2208      	movs	r2, #8
 8003a34:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a44:	b08f      	sub	sp, #60	; 0x3c
 8003a46:	af0a      	add	r7, sp, #40	; 0x28
 8003a48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e10f      	b.n	8003c74 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d106      	bne.n	8003a74 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f008 fefe 	bl	800c870 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2203      	movs	r2, #3
 8003a78:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d102      	bne.n	8003a8e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f004 fb9f 	bl	80081d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	603b      	str	r3, [r7, #0]
 8003a9e:	687e      	ldr	r6, [r7, #4]
 8003aa0:	466d      	mov	r5, sp
 8003aa2:	f106 0410 	add.w	r4, r6, #16
 8003aa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ab2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ab6:	1d33      	adds	r3, r6, #4
 8003ab8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003aba:	6838      	ldr	r0, [r7, #0]
 8003abc:	f004 fa76 	bl	8007fac <USB_CoreInit>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d005      	beq.n	8003ad2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2202      	movs	r2, #2
 8003aca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e0d0      	b.n	8003c74 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f004 fb8d 	bl	80081f8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ade:	2300      	movs	r3, #0
 8003ae0:	73fb      	strb	r3, [r7, #15]
 8003ae2:	e04a      	b.n	8003b7a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ae4:	7bfa      	ldrb	r2, [r7, #15]
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	1a9b      	subs	r3, r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	333d      	adds	r3, #61	; 0x3d
 8003af4:	2201      	movs	r2, #1
 8003af6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003af8:	7bfa      	ldrb	r2, [r7, #15]
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	4613      	mov	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	1a9b      	subs	r3, r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	333c      	adds	r3, #60	; 0x3c
 8003b08:	7bfa      	ldrb	r2, [r7, #15]
 8003b0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b0c:	7bfa      	ldrb	r2, [r7, #15]
 8003b0e:	7bfb      	ldrb	r3, [r7, #15]
 8003b10:	b298      	uxth	r0, r3
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	3342      	adds	r3, #66	; 0x42
 8003b20:	4602      	mov	r2, r0
 8003b22:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b24:	7bfa      	ldrb	r2, [r7, #15]
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	1a9b      	subs	r3, r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	333f      	adds	r3, #63	; 0x3f
 8003b34:	2200      	movs	r2, #0
 8003b36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b38:	7bfa      	ldrb	r2, [r7, #15]
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	1a9b      	subs	r3, r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	3344      	adds	r3, #68	; 0x44
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b4c:	7bfa      	ldrb	r2, [r7, #15]
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	4613      	mov	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	1a9b      	subs	r3, r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	3348      	adds	r3, #72	; 0x48
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b60:	7bfa      	ldrb	r2, [r7, #15]
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	4613      	mov	r3, r2
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	3350      	adds	r3, #80	; 0x50
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
 8003b76:	3301      	adds	r3, #1
 8003b78:	73fb      	strb	r3, [r7, #15]
 8003b7a:	7bfa      	ldrb	r2, [r7, #15]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d3af      	bcc.n	8003ae4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b84:	2300      	movs	r3, #0
 8003b86:	73fb      	strb	r3, [r7, #15]
 8003b88:	e044      	b.n	8003c14 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b8a:	7bfa      	ldrb	r2, [r7, #15]
 8003b8c:	6879      	ldr	r1, [r7, #4]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	1a9b      	subs	r3, r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	440b      	add	r3, r1
 8003b98:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ba0:	7bfa      	ldrb	r2, [r7, #15]
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	1a9b      	subs	r3, r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	440b      	add	r3, r1
 8003bae:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003bb2:	7bfa      	ldrb	r2, [r7, #15]
 8003bb4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003bb6:	7bfa      	ldrb	r2, [r7, #15]
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	1a9b      	subs	r3, r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	440b      	add	r3, r1
 8003bc4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003bc8:	2200      	movs	r2, #0
 8003bca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003bcc:	7bfa      	ldrb	r2, [r7, #15]
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	1a9b      	subs	r3, r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003bde:	2200      	movs	r2, #0
 8003be0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003be2:	7bfa      	ldrb	r2, [r7, #15]
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	1a9b      	subs	r3, r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	440b      	add	r3, r1
 8003bf0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bf8:	7bfa      	ldrb	r2, [r7, #15]
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	1a9b      	subs	r3, r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
 8003c10:	3301      	adds	r3, #1
 8003c12:	73fb      	strb	r3, [r7, #15]
 8003c14:	7bfa      	ldrb	r2, [r7, #15]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d3b5      	bcc.n	8003b8a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	603b      	str	r3, [r7, #0]
 8003c24:	687e      	ldr	r6, [r7, #4]
 8003c26:	466d      	mov	r5, sp
 8003c28:	f106 0410 	add.w	r4, r6, #16
 8003c2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c38:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c3c:	1d33      	adds	r3, r6, #4
 8003c3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c40:	6838      	ldr	r0, [r7, #0]
 8003c42:	f004 fb25 	bl	8008290 <USB_DevInit>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d005      	beq.n	8003c58 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e00d      	b.n	8003c74 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f005 fba1 	bl	80093b4 <USB_DevDisconnect>

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c7c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d101      	bne.n	8003c98 <HAL_PCD_Start+0x1c>
 8003c94:	2302      	movs	r3, #2
 8003c96:	e020      	b.n	8003cda <HAL_PCD_Start+0x5e>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d109      	bne.n	8003cbc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d005      	beq.n	8003cbc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f004 fa77 	bl	80081b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f005 fb51 	bl	8009372 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003ce2:	b590      	push	{r4, r7, lr}
 8003ce4:	b08d      	sub	sp, #52	; 0x34
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f005 fc0f 	bl	800951c <USB_GetMode>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f040 839d 	bne.w	8004440 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f005 fb73 	bl	80093f6 <USB_ReadInterrupts>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 8393 	beq.w	800443e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f005 fb6a 	bl	80093f6 <USB_ReadInterrupts>
 8003d22:	4603      	mov	r3, r0
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d107      	bne.n	8003d3c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695a      	ldr	r2, [r3, #20]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f002 0202 	and.w	r2, r2, #2
 8003d3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f005 fb58 	bl	80093f6 <USB_ReadInterrupts>
 8003d46:	4603      	mov	r3, r0
 8003d48:	f003 0310 	and.w	r3, r3, #16
 8003d4c:	2b10      	cmp	r3, #16
 8003d4e:	d161      	bne.n	8003e14 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699a      	ldr	r2, [r3, #24]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0210 	bic.w	r2, r2, #16
 8003d5e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	f003 020f 	and.w	r2, r3, #15
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	1a9b      	subs	r3, r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	0c5b      	lsrs	r3, r3, #17
 8003d84:	f003 030f 	and.w	r3, r3, #15
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d124      	bne.n	8003dd6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003d92:	4013      	ands	r3, r2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d035      	beq.n	8003e04 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	091b      	lsrs	r3, r3, #4
 8003da0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003da2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	461a      	mov	r2, r3
 8003daa:	6a38      	ldr	r0, [r7, #32]
 8003dac:	f005 f98f 	bl	80090ce <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	68da      	ldr	r2, [r3, #12]
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	091b      	lsrs	r3, r3, #4
 8003db8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dbc:	441a      	add	r2, r3
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	699a      	ldr	r2, [r3, #24]
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	091b      	lsrs	r3, r3, #4
 8003dca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dce:	441a      	add	r2, r3
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	619a      	str	r2, [r3, #24]
 8003dd4:	e016      	b.n	8003e04 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	0c5b      	lsrs	r3, r3, #17
 8003dda:	f003 030f 	and.w	r3, r3, #15
 8003dde:	2b06      	cmp	r3, #6
 8003de0:	d110      	bne.n	8003e04 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003de8:	2208      	movs	r2, #8
 8003dea:	4619      	mov	r1, r3
 8003dec:	6a38      	ldr	r0, [r7, #32]
 8003dee:	f005 f96e 	bl	80090ce <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	699a      	ldr	r2, [r3, #24]
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	091b      	lsrs	r3, r3, #4
 8003dfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dfe:	441a      	add	r2, r3
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	699a      	ldr	r2, [r3, #24]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0210 	orr.w	r2, r2, #16
 8003e12:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f005 faec 	bl	80093f6 <USB_ReadInterrupts>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e24:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e28:	d16e      	bne.n	8003f08 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f005 faf2 	bl	800941c <USB_ReadDevAllOutEpInterrupt>
 8003e38:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003e3a:	e062      	b.n	8003f02 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d057      	beq.n	8003ef6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	4611      	mov	r1, r2
 8003e50:	4618      	mov	r0, r3
 8003e52:	f005 fb17 	bl	8009484 <USB_ReadDevOutEPInterrupt>
 8003e56:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00c      	beq.n	8003e7c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6e:	461a      	mov	r2, r3
 8003e70:	2301      	movs	r3, #1
 8003e72:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003e74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 fdb0 	bl	80049dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00c      	beq.n	8003ea0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	015a      	lsls	r2, r3, #5
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e92:	461a      	mov	r2, r3
 8003e94:	2308      	movs	r3, #8
 8003e96:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003e98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 feaa 	bl	8004bf4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	f003 0310 	and.w	r3, r3, #16
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d008      	beq.n	8003ebc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	015a      	lsls	r2, r3, #5
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	2310      	movs	r3, #16
 8003eba:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	f003 0320 	and.w	r3, r3, #32
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d008      	beq.n	8003ed8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	015a      	lsls	r2, r3, #5
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	2320      	movs	r3, #32
 8003ed6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d009      	beq.n	8003ef6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eee:	461a      	mov	r2, r3
 8003ef0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ef4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	3301      	adds	r3, #1
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efe:	085b      	lsrs	r3, r3, #1
 8003f00:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d199      	bne.n	8003e3c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f005 fa72 	bl	80093f6 <USB_ReadInterrupts>
 8003f12:	4603      	mov	r3, r0
 8003f14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f1c:	f040 80c0 	bne.w	80040a0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f005 fa93 	bl	8009450 <USB_ReadDevAllInEpInterrupt>
 8003f2a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003f30:	e0b2      	b.n	8004098 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 80a7 	beq.w	800408c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f44:	b2d2      	uxtb	r2, r2
 8003f46:	4611      	mov	r1, r2
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f005 fab9 	bl	80094c0 <USB_ReadDevInEPInterrupt>
 8003f4e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d057      	beq.n	800400a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	f003 030f 	and.w	r3, r3, #15
 8003f60:	2201      	movs	r2, #1
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	43db      	mvns	r3, r3
 8003f74:	69f9      	ldr	r1, [r7, #28]
 8003f76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	015a      	lsls	r2, r3, #5
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	4413      	add	r3, r2
 8003f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d132      	bne.n	8003ffe <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	1a9b      	subs	r3, r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	3348      	adds	r3, #72	; 0x48
 8003fa8:	6819      	ldr	r1, [r3, #0]
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fae:	4613      	mov	r3, r2
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	1a9b      	subs	r3, r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4403      	add	r3, r0
 8003fb8:	3344      	adds	r3, #68	; 0x44
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4419      	add	r1, r3
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	1a9b      	subs	r3, r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4403      	add	r3, r0
 8003fcc:	3348      	adds	r3, #72	; 0x48
 8003fce:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d113      	bne.n	8003ffe <HAL_PCD_IRQHandler+0x31c>
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fda:	4613      	mov	r3, r2
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	1a9b      	subs	r3, r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	440b      	add	r3, r1
 8003fe4:	3350      	adds	r3, #80	; 0x50
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d108      	bne.n	8003ffe <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6818      	ldr	r0, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	f005 fac1 	bl	8009580 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	b2db      	uxtb	r3, r3
 8004002:	4619      	mov	r1, r3
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f008 fcb4 	bl	800c972 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	f003 0308 	and.w	r3, r3, #8
 8004010:	2b00      	cmp	r3, #0
 8004012:	d008      	beq.n	8004026 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	015a      	lsls	r2, r3, #5
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	4413      	add	r3, r2
 800401c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004020:	461a      	mov	r2, r3
 8004022:	2308      	movs	r3, #8
 8004024:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	f003 0310 	and.w	r3, r3, #16
 800402c:	2b00      	cmp	r3, #0
 800402e:	d008      	beq.n	8004042 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	4413      	add	r3, r2
 8004038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800403c:	461a      	mov	r2, r3
 800403e:	2310      	movs	r3, #16
 8004040:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004048:	2b00      	cmp	r3, #0
 800404a:	d008      	beq.n	800405e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	015a      	lsls	r2, r3, #5
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	4413      	add	r3, r2
 8004054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004058:	461a      	mov	r2, r3
 800405a:	2340      	movs	r3, #64	; 0x40
 800405c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d008      	beq.n	800407a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	4413      	add	r3, r2
 8004070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004074:	461a      	mov	r2, r3
 8004076:	2302      	movs	r3, #2
 8004078:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004084:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 fc1b 	bl	80048c2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	3301      	adds	r3, #1
 8004090:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004094:	085b      	lsrs	r3, r3, #1
 8004096:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409a:	2b00      	cmp	r3, #0
 800409c:	f47f af49 	bne.w	8003f32 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f005 f9a6 	bl	80093f6 <USB_ReadInterrupts>
 80040aa:	4603      	mov	r3, r0
 80040ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040b4:	d122      	bne.n	80040fc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	69fa      	ldr	r2, [r7, #28]
 80040c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040c4:	f023 0301 	bic.w	r3, r3, #1
 80040c8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d108      	bne.n	80040e6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80040dc:	2100      	movs	r1, #0
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 fe26 	bl	8004d30 <HAL_PCDEx_LPM_Callback>
 80040e4:	e002      	b.n	80040ec <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f008 fcb0 	bl	800ca4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695a      	ldr	r2, [r3, #20]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80040fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4618      	mov	r0, r3
 8004102:	f005 f978 	bl	80093f6 <USB_ReadInterrupts>
 8004106:	4603      	mov	r3, r0
 8004108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800410c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004110:	d112      	bne.n	8004138 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b01      	cmp	r3, #1
 8004120:	d102      	bne.n	8004128 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f008 fc6c 	bl	800ca00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695a      	ldr	r2, [r3, #20]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004136:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4618      	mov	r0, r3
 800413e:	f005 f95a 	bl	80093f6 <USB_ReadInterrupts>
 8004142:	4603      	mov	r3, r0
 8004144:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800414c:	f040 80c7 	bne.w	80042de <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	69fa      	ldr	r2, [r7, #28]
 800415a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800415e:	f023 0301 	bic.w	r3, r3, #1
 8004162:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2110      	movs	r1, #16
 800416a:	4618      	mov	r0, r3
 800416c:	f004 f9f4 	bl	8008558 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004170:	2300      	movs	r3, #0
 8004172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004174:	e056      	b.n	8004224 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	4413      	add	r3, r2
 800417e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004182:	461a      	mov	r2, r3
 8004184:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004188:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800418a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800419a:	0151      	lsls	r1, r2, #5
 800419c:	69fa      	ldr	r2, [r7, #28]
 800419e:	440a      	add	r2, r1
 80041a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041a8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80041aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041ba:	0151      	lsls	r1, r2, #5
 80041bc:	69fa      	ldr	r2, [r7, #28]
 80041be:	440a      	add	r2, r1
 80041c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80041c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80041ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d6:	461a      	mov	r2, r3
 80041d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041dc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80041de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041ee:	0151      	lsls	r1, r2, #5
 80041f0:	69fa      	ldr	r2, [r7, #28]
 80041f2:	440a      	add	r2, r1
 80041f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80041fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	4413      	add	r3, r2
 8004206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800420e:	0151      	lsls	r1, r2, #5
 8004210:	69fa      	ldr	r2, [r7, #28]
 8004212:	440a      	add	r2, r1
 8004214:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004218:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800421c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800421e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004220:	3301      	adds	r3, #1
 8004222:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800422a:	429a      	cmp	r2, r3
 800422c:	d3a3      	bcc.n	8004176 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	69fa      	ldr	r2, [r7, #28]
 8004238:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800423c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004240:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004246:	2b00      	cmp	r3, #0
 8004248:	d016      	beq.n	8004278 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004254:	69fa      	ldr	r2, [r7, #28]
 8004256:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800425a:	f043 030b 	orr.w	r3, r3, #11
 800425e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426a:	69fa      	ldr	r2, [r7, #28]
 800426c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004270:	f043 030b 	orr.w	r3, r3, #11
 8004274:	6453      	str	r3, [r2, #68]	; 0x44
 8004276:	e015      	b.n	80042a4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	69fa      	ldr	r2, [r7, #28]
 8004282:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004286:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800428a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800428e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	69fa      	ldr	r2, [r7, #28]
 800429a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800429e:	f043 030b 	orr.w	r3, r3, #11
 80042a2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	69fa      	ldr	r2, [r7, #28]
 80042ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80042b6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6818      	ldr	r0, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042c8:	461a      	mov	r2, r3
 80042ca:	f005 f959 	bl	8009580 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695a      	ldr	r2, [r3, #20]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80042dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f005 f887 	bl	80093f6 <USB_ReadInterrupts>
 80042e8:	4603      	mov	r3, r0
 80042ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042f2:	d124      	bne.n	800433e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f005 f91d 	bl	8009538 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4618      	mov	r0, r3
 8004304:	f004 f985 	bl	8008612 <USB_GetDevSpeed>
 8004308:	4603      	mov	r3, r0
 800430a:	461a      	mov	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681c      	ldr	r4, [r3, #0]
 8004314:	f001 f936 	bl	8005584 <HAL_RCC_GetHCLKFreq>
 8004318:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800431e:	b2db      	uxtb	r3, r3
 8004320:	461a      	mov	r2, r3
 8004322:	4620      	mov	r0, r4
 8004324:	f003 fea4 	bl	8008070 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f008 fb4a 	bl	800c9c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	695a      	ldr	r2, [r3, #20]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800433c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4618      	mov	r0, r3
 8004344:	f005 f857 	bl	80093f6 <USB_ReadInterrupts>
 8004348:	4603      	mov	r3, r0
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b08      	cmp	r3, #8
 8004350:	d10a      	bne.n	8004368 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f008 fb27 	bl	800c9a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	695a      	ldr	r2, [r3, #20]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f002 0208 	and.w	r2, r2, #8
 8004366:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4618      	mov	r0, r3
 800436e:	f005 f842 	bl	80093f6 <USB_ReadInterrupts>
 8004372:	4603      	mov	r3, r0
 8004374:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004378:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800437c:	d10f      	bne.n	800439e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800437e:	2300      	movs	r3, #0
 8004380:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	b2db      	uxtb	r3, r3
 8004386:	4619      	mov	r1, r3
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f008 fb7f 	bl	800ca8c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695a      	ldr	r2, [r3, #20]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800439c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f005 f827 	bl	80093f6 <USB_ReadInterrupts>
 80043a8:	4603      	mov	r3, r0
 80043aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043b2:	d10f      	bne.n	80043d4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80043b4:	2300      	movs	r3, #0
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	4619      	mov	r1, r3
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f008 fb52 	bl	800ca68 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	695a      	ldr	r2, [r3, #20]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80043d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4618      	mov	r0, r3
 80043da:	f005 f80c 	bl	80093f6 <USB_ReadInterrupts>
 80043de:	4603      	mov	r3, r0
 80043e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80043e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e8:	d10a      	bne.n	8004400 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f008 fb60 	bl	800cab0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	695a      	ldr	r2, [r3, #20]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80043fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4618      	mov	r0, r3
 8004406:	f004 fff6 	bl	80093f6 <USB_ReadInterrupts>
 800440a:	4603      	mov	r3, r0
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b04      	cmp	r3, #4
 8004412:	d115      	bne.n	8004440 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	f003 0304 	and.w	r3, r3, #4
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f008 fb50 	bl	800cacc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6859      	ldr	r1, [r3, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	430a      	orrs	r2, r1
 800443a:	605a      	str	r2, [r3, #4]
 800443c:	e000      	b.n	8004440 <HAL_PCD_IRQHandler+0x75e>
      return;
 800443e:	bf00      	nop
    }
  }
}
 8004440:	3734      	adds	r7, #52	; 0x34
 8004442:	46bd      	mov	sp, r7
 8004444:	bd90      	pop	{r4, r7, pc}

08004446 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b082      	sub	sp, #8
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	460b      	mov	r3, r1
 8004450:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_PCD_SetAddress+0x1a>
 800445c:	2302      	movs	r3, #2
 800445e:	e013      	b.n	8004488 <HAL_PCD_SetAddress+0x42>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	78fa      	ldrb	r2, [r7, #3]
 800446c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	78fa      	ldrb	r2, [r7, #3]
 8004476:	4611      	mov	r1, r2
 8004478:	4618      	mov	r0, r3
 800447a:	f004 ff54 	bl	8009326 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	4608      	mov	r0, r1
 800449a:	4611      	mov	r1, r2
 800449c:	461a      	mov	r2, r3
 800449e:	4603      	mov	r3, r0
 80044a0:	70fb      	strb	r3, [r7, #3]
 80044a2:	460b      	mov	r3, r1
 80044a4:	803b      	strh	r3, [r7, #0]
 80044a6:	4613      	mov	r3, r2
 80044a8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80044ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	da0f      	bge.n	80044d6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044b6:	78fb      	ldrb	r3, [r7, #3]
 80044b8:	f003 020f 	and.w	r2, r3, #15
 80044bc:	4613      	mov	r3, r2
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	1a9b      	subs	r3, r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	3338      	adds	r3, #56	; 0x38
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	4413      	add	r3, r2
 80044ca:	3304      	adds	r3, #4
 80044cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2201      	movs	r2, #1
 80044d2:	705a      	strb	r2, [r3, #1]
 80044d4:	e00f      	b.n	80044f6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044d6:	78fb      	ldrb	r3, [r7, #3]
 80044d8:	f003 020f 	and.w	r2, r3, #15
 80044dc:	4613      	mov	r3, r2
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	1a9b      	subs	r3, r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	4413      	add	r3, r2
 80044ec:	3304      	adds	r3, #4
 80044ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80044f6:	78fb      	ldrb	r3, [r7, #3]
 80044f8:	f003 030f 	and.w	r3, r3, #15
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004502:	883a      	ldrh	r2, [r7, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	78ba      	ldrb	r2, [r7, #2]
 800450c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	785b      	ldrb	r3, [r3, #1]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d004      	beq.n	8004520 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	b29a      	uxth	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004520:	78bb      	ldrb	r3, [r7, #2]
 8004522:	2b02      	cmp	r3, #2
 8004524:	d102      	bne.n	800452c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004532:	2b01      	cmp	r3, #1
 8004534:	d101      	bne.n	800453a <HAL_PCD_EP_Open+0xaa>
 8004536:	2302      	movs	r3, #2
 8004538:	e00e      	b.n	8004558 <HAL_PCD_EP_Open+0xc8>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68f9      	ldr	r1, [r7, #12]
 8004548:	4618      	mov	r0, r3
 800454a:	f004 f887 	bl	800865c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004556:	7afb      	ldrb	r3, [r7, #11]
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	460b      	mov	r3, r1
 800456a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800456c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004570:	2b00      	cmp	r3, #0
 8004572:	da0f      	bge.n	8004594 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004574:	78fb      	ldrb	r3, [r7, #3]
 8004576:	f003 020f 	and.w	r2, r3, #15
 800457a:	4613      	mov	r3, r2
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	1a9b      	subs	r3, r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	3338      	adds	r3, #56	; 0x38
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	4413      	add	r3, r2
 8004588:	3304      	adds	r3, #4
 800458a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2201      	movs	r2, #1
 8004590:	705a      	strb	r2, [r3, #1]
 8004592:	e00f      	b.n	80045b4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004594:	78fb      	ldrb	r3, [r7, #3]
 8004596:	f003 020f 	and.w	r2, r3, #15
 800459a:	4613      	mov	r3, r2
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	1a9b      	subs	r3, r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	4413      	add	r3, r2
 80045aa:	3304      	adds	r3, #4
 80045ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80045b4:	78fb      	ldrb	r3, [r7, #3]
 80045b6:	f003 030f 	and.w	r3, r3, #15
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d101      	bne.n	80045ce <HAL_PCD_EP_Close+0x6e>
 80045ca:	2302      	movs	r3, #2
 80045cc:	e00e      	b.n	80045ec <HAL_PCD_EP_Close+0x8c>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68f9      	ldr	r1, [r7, #12]
 80045dc:	4618      	mov	r0, r3
 80045de:	f004 f8c5 	bl	800876c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	607a      	str	r2, [r7, #4]
 80045fe:	603b      	str	r3, [r7, #0]
 8004600:	460b      	mov	r3, r1
 8004602:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004604:	7afb      	ldrb	r3, [r7, #11]
 8004606:	f003 020f 	and.w	r2, r3, #15
 800460a:	4613      	mov	r3, r2
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	1a9b      	subs	r3, r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	4413      	add	r3, r2
 800461a:	3304      	adds	r3, #4
 800461c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2200      	movs	r2, #0
 800462e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	2200      	movs	r2, #0
 8004634:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004636:	7afb      	ldrb	r3, [r7, #11]
 8004638:	f003 030f 	and.w	r3, r3, #15
 800463c:	b2da      	uxtb	r2, r3
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d102      	bne.n	8004650 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004650:	7afb      	ldrb	r3, [r7, #11]
 8004652:	f003 030f 	and.w	r3, r3, #15
 8004656:	2b00      	cmp	r3, #0
 8004658:	d109      	bne.n	800466e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6818      	ldr	r0, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	b2db      	uxtb	r3, r3
 8004664:	461a      	mov	r2, r3
 8004666:	6979      	ldr	r1, [r7, #20]
 8004668:	f004 fba0 	bl	8008dac <USB_EP0StartXfer>
 800466c:	e008      	b.n	8004680 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6818      	ldr	r0, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	b2db      	uxtb	r3, r3
 8004678:	461a      	mov	r2, r3
 800467a:	6979      	ldr	r1, [r7, #20]
 800467c:	f004 f952 	bl	8008924 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3718      	adds	r7, #24
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	460b      	mov	r3, r1
 8004694:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004696:	78fb      	ldrb	r3, [r7, #3]
 8004698:	f003 020f 	and.w	r2, r3, #15
 800469c:	6879      	ldr	r1, [r7, #4]
 800469e:	4613      	mov	r3, r2
 80046a0:	00db      	lsls	r3, r3, #3
 80046a2:	1a9b      	subs	r3, r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	440b      	add	r3, r1
 80046a8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80046ac:	681b      	ldr	r3, [r3, #0]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b086      	sub	sp, #24
 80046be:	af00      	add	r7, sp, #0
 80046c0:	60f8      	str	r0, [r7, #12]
 80046c2:	607a      	str	r2, [r7, #4]
 80046c4:	603b      	str	r3, [r7, #0]
 80046c6:	460b      	mov	r3, r1
 80046c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046ca:	7afb      	ldrb	r3, [r7, #11]
 80046cc:	f003 020f 	and.w	r2, r3, #15
 80046d0:	4613      	mov	r3, r2
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	1a9b      	subs	r3, r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	3338      	adds	r3, #56	; 0x38
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	4413      	add	r3, r2
 80046de:	3304      	adds	r3, #4
 80046e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	2200      	movs	r2, #0
 80046f2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	2201      	movs	r2, #1
 80046f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046fa:	7afb      	ldrb	r3, [r7, #11]
 80046fc:	f003 030f 	and.w	r3, r3, #15
 8004700:	b2da      	uxtb	r2, r3
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d102      	bne.n	8004714 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004714:	7afb      	ldrb	r3, [r7, #11]
 8004716:	f003 030f 	and.w	r3, r3, #15
 800471a:	2b00      	cmp	r3, #0
 800471c:	d109      	bne.n	8004732 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6818      	ldr	r0, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	b2db      	uxtb	r3, r3
 8004728:	461a      	mov	r2, r3
 800472a:	6979      	ldr	r1, [r7, #20]
 800472c:	f004 fb3e 	bl	8008dac <USB_EP0StartXfer>
 8004730:	e008      	b.n	8004744 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6818      	ldr	r0, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	b2db      	uxtb	r3, r3
 800473c:	461a      	mov	r2, r3
 800473e:	6979      	ldr	r1, [r7, #20]
 8004740:	f004 f8f0 	bl	8008924 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3718      	adds	r7, #24
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b084      	sub	sp, #16
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	460b      	mov	r3, r1
 8004758:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800475a:	78fb      	ldrb	r3, [r7, #3]
 800475c:	f003 020f 	and.w	r2, r3, #15
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	429a      	cmp	r2, r3
 8004766:	d901      	bls.n	800476c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e050      	b.n	800480e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800476c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004770:	2b00      	cmp	r3, #0
 8004772:	da0f      	bge.n	8004794 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004774:	78fb      	ldrb	r3, [r7, #3]
 8004776:	f003 020f 	and.w	r2, r3, #15
 800477a:	4613      	mov	r3, r2
 800477c:	00db      	lsls	r3, r3, #3
 800477e:	1a9b      	subs	r3, r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	3338      	adds	r3, #56	; 0x38
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	4413      	add	r3, r2
 8004788:	3304      	adds	r3, #4
 800478a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2201      	movs	r2, #1
 8004790:	705a      	strb	r2, [r3, #1]
 8004792:	e00d      	b.n	80047b0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004794:	78fa      	ldrb	r2, [r7, #3]
 8004796:	4613      	mov	r3, r2
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	1a9b      	subs	r3, r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	4413      	add	r3, r2
 80047a6:	3304      	adds	r3, #4
 80047a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2201      	movs	r2, #1
 80047b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047b6:	78fb      	ldrb	r3, [r7, #3]
 80047b8:	f003 030f 	and.w	r3, r3, #15
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_PCD_EP_SetStall+0x82>
 80047cc:	2302      	movs	r3, #2
 80047ce:	e01e      	b.n	800480e <HAL_PCD_EP_SetStall+0xc0>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68f9      	ldr	r1, [r7, #12]
 80047de:	4618      	mov	r0, r3
 80047e0:	f004 fccd 	bl	800917e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80047e4:	78fb      	ldrb	r3, [r7, #3]
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10a      	bne.n	8004804 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	b2d9      	uxtb	r1, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80047fe:	461a      	mov	r2, r3
 8004800:	f004 febe 	bl	8009580 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b084      	sub	sp, #16
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	460b      	mov	r3, r1
 8004820:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004822:	78fb      	ldrb	r3, [r7, #3]
 8004824:	f003 020f 	and.w	r2, r3, #15
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	429a      	cmp	r2, r3
 800482e:	d901      	bls.n	8004834 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e042      	b.n	80048ba <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004834:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004838:	2b00      	cmp	r3, #0
 800483a:	da0f      	bge.n	800485c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800483c:	78fb      	ldrb	r3, [r7, #3]
 800483e:	f003 020f 	and.w	r2, r3, #15
 8004842:	4613      	mov	r3, r2
 8004844:	00db      	lsls	r3, r3, #3
 8004846:	1a9b      	subs	r3, r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	3338      	adds	r3, #56	; 0x38
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	4413      	add	r3, r2
 8004850:	3304      	adds	r3, #4
 8004852:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2201      	movs	r2, #1
 8004858:	705a      	strb	r2, [r3, #1]
 800485a:	e00f      	b.n	800487c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800485c:	78fb      	ldrb	r3, [r7, #3]
 800485e:	f003 020f 	and.w	r2, r3, #15
 8004862:	4613      	mov	r3, r2
 8004864:	00db      	lsls	r3, r3, #3
 8004866:	1a9b      	subs	r3, r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	4413      	add	r3, r2
 8004872:	3304      	adds	r3, #4
 8004874:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004882:	78fb      	ldrb	r3, [r7, #3]
 8004884:	f003 030f 	and.w	r3, r3, #15
 8004888:	b2da      	uxtb	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004894:	2b01      	cmp	r3, #1
 8004896:	d101      	bne.n	800489c <HAL_PCD_EP_ClrStall+0x86>
 8004898:	2302      	movs	r3, #2
 800489a:	e00e      	b.n	80048ba <HAL_PCD_EP_ClrStall+0xa4>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68f9      	ldr	r1, [r7, #12]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f004 fcd5 	bl	800925a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b08a      	sub	sp, #40	; 0x28
 80048c6:	af02      	add	r7, sp, #8
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	4613      	mov	r3, r2
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	1a9b      	subs	r3, r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	3338      	adds	r3, #56	; 0x38
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	4413      	add	r3, r2
 80048e6:	3304      	adds	r3, #4
 80048e8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	699a      	ldr	r2, [r3, #24]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d901      	bls.n	80048fa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e06c      	b.n	80049d4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	695a      	ldr	r2, [r3, #20]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	69fa      	ldr	r2, [r7, #28]
 800490c:	429a      	cmp	r2, r3
 800490e:	d902      	bls.n	8004916 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	3303      	adds	r3, #3
 800491a:	089b      	lsrs	r3, r3, #2
 800491c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800491e:	e02b      	b.n	8004978 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	695a      	ldr	r2, [r3, #20]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	69fa      	ldr	r2, [r7, #28]
 8004932:	429a      	cmp	r2, r3
 8004934:	d902      	bls.n	800493c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	3303      	adds	r3, #3
 8004940:	089b      	lsrs	r3, r3, #2
 8004942:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	68d9      	ldr	r1, [r3, #12]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	b2da      	uxtb	r2, r3
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004954:	b2db      	uxtb	r3, r3
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	4603      	mov	r3, r0
 800495a:	6978      	ldr	r0, [r7, #20]
 800495c:	f004 fb79 	bl	8009052 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	68da      	ldr	r2, [r3, #12]
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	441a      	add	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	699a      	ldr	r2, [r3, #24]
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	441a      	add	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	015a      	lsls	r2, r3, #5
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	4413      	add	r3, r2
 8004980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	b29b      	uxth	r3, r3
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	429a      	cmp	r2, r3
 800498c:	d809      	bhi.n	80049a2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	699a      	ldr	r2, [r3, #24]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004996:	429a      	cmp	r2, r3
 8004998:	d203      	bcs.n	80049a2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1be      	bne.n	8004920 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	695a      	ldr	r2, [r3, #20]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d811      	bhi.n	80049d2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	f003 030f 	and.w	r3, r3, #15
 80049b4:	2201      	movs	r2, #1
 80049b6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ba:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	43db      	mvns	r3, r3
 80049c8:	6939      	ldr	r1, [r7, #16]
 80049ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049ce:	4013      	ands	r3, r2
 80049d0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3720      	adds	r7, #32
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	333c      	adds	r3, #60	; 0x3c
 80049f4:	3304      	adds	r3, #4
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	f040 80a0 	bne.w	8004b54 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f003 0308 	and.w	r3, r3, #8
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d015      	beq.n	8004a4a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4a72      	ldr	r2, [pc, #456]	; (8004bec <PCD_EP_OutXfrComplete_int+0x210>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	f240 80dd 	bls.w	8004be2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f000 80d7 	beq.w	8004be2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a40:	461a      	mov	r2, r3
 8004a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a46:	6093      	str	r3, [r2, #8]
 8004a48:	e0cb      	b.n	8004be2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	f003 0320 	and.w	r3, r3, #32
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d009      	beq.n	8004a68 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a60:	461a      	mov	r2, r3
 8004a62:	2320      	movs	r3, #32
 8004a64:	6093      	str	r3, [r2, #8]
 8004a66:	e0bc      	b.n	8004be2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f040 80b7 	bne.w	8004be2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4a5d      	ldr	r2, [pc, #372]	; (8004bec <PCD_EP_OutXfrComplete_int+0x210>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d90f      	bls.n	8004a9c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a92:	461a      	mov	r2, r3
 8004a94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a98:	6093      	str	r3, [r2, #8]
 8004a9a:	e0a2      	b.n	8004be2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004a9c:	6879      	ldr	r1, [r7, #4]
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	1a9b      	subs	r3, r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	440b      	add	r3, r1
 8004aaa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004aae:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	0159      	lsls	r1, r3, #5
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	440b      	add	r3, r1
 8004ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004ac2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	1a9b      	subs	r3, r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4403      	add	r3, r0
 8004ad2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004ad6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004ad8:	6879      	ldr	r1, [r7, #4]
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	4613      	mov	r3, r2
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	1a9b      	subs	r3, r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	440b      	add	r3, r1
 8004ae6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004aea:	6819      	ldr	r1, [r3, #0]
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	4613      	mov	r3, r2
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	1a9b      	subs	r3, r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4403      	add	r3, r0
 8004afa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4419      	add	r1, r3
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	4613      	mov	r3, r2
 8004b08:	00db      	lsls	r3, r3, #3
 8004b0a:	1a9b      	subs	r3, r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4403      	add	r3, r0
 8004b10:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004b14:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d114      	bne.n	8004b46 <PCD_EP_OutXfrComplete_int+0x16a>
 8004b1c:	6879      	ldr	r1, [r7, #4]
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	4613      	mov	r3, r2
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	1a9b      	subs	r3, r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	440b      	add	r3, r1
 8004b2a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d108      	bne.n	8004b46 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6818      	ldr	r0, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004b3e:	461a      	mov	r2, r3
 8004b40:	2101      	movs	r1, #1
 8004b42:	f004 fd1d 	bl	8009580 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f007 fef5 	bl	800c93c <HAL_PCD_DataOutStageCallback>
 8004b52:	e046      	b.n	8004be2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4a26      	ldr	r2, [pc, #152]	; (8004bf0 <PCD_EP_OutXfrComplete_int+0x214>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d124      	bne.n	8004ba6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00a      	beq.n	8004b7c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	015a      	lsls	r2, r3, #5
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b72:	461a      	mov	r2, r3
 8004b74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b78:	6093      	str	r3, [r2, #8]
 8004b7a:	e032      	b.n	8004be2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	f003 0320 	and.w	r3, r3, #32
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d008      	beq.n	8004b98 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b92:	461a      	mov	r2, r3
 8004b94:	2320      	movs	r3, #32
 8004b96:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f007 fecc 	bl	800c93c <HAL_PCD_DataOutStageCallback>
 8004ba4:	e01d      	b.n	8004be2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d114      	bne.n	8004bd6 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004bac:	6879      	ldr	r1, [r7, #4]
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	1a9b      	subs	r3, r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d108      	bne.n	8004bd6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6818      	ldr	r0, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004bce:	461a      	mov	r2, r3
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	f004 fcd5 	bl	8009580 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	4619      	mov	r1, r3
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f007 fead 	bl	800c93c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3718      	adds	r7, #24
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	4f54300a 	.word	0x4f54300a
 8004bf0:	4f54310a 	.word	0x4f54310a

08004bf4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	333c      	adds	r3, #60	; 0x3c
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	015a      	lsls	r2, r3, #5
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	4413      	add	r3, r2
 8004c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	4a15      	ldr	r2, [pc, #84]	; (8004c7c <PCD_EP_OutSetupPacket_int+0x88>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d90e      	bls.n	8004c48 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d009      	beq.n	8004c48 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c40:	461a      	mov	r2, r3
 8004c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c46:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f007 fe65 	bl	800c918 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	4a0a      	ldr	r2, [pc, #40]	; (8004c7c <PCD_EP_OutSetupPacket_int+0x88>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d90c      	bls.n	8004c70 <PCD_EP_OutSetupPacket_int+0x7c>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d108      	bne.n	8004c70 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6818      	ldr	r0, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004c68:	461a      	mov	r2, r3
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	f004 fc88 	bl	8009580 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3718      	adds	r7, #24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	4f54300a 	.word	0x4f54300a

08004c80 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	70fb      	strb	r3, [r7, #3]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004c98:	78fb      	ldrb	r3, [r7, #3]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d107      	bne.n	8004cae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004c9e:	883b      	ldrh	r3, [r7, #0]
 8004ca0:	0419      	lsls	r1, r3, #16
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	629a      	str	r2, [r3, #40]	; 0x28
 8004cac:	e028      	b.n	8004d00 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb4:	0c1b      	lsrs	r3, r3, #16
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	4413      	add	r3, r2
 8004cba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	73fb      	strb	r3, [r7, #15]
 8004cc0:	e00d      	b.n	8004cde <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	7bfb      	ldrb	r3, [r7, #15]
 8004cc8:	3340      	adds	r3, #64	; 0x40
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	0c1b      	lsrs	r3, r3, #16
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	73fb      	strb	r3, [r7, #15]
 8004cde:	7bfa      	ldrb	r2, [r7, #15]
 8004ce0:	78fb      	ldrb	r3, [r7, #3]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d3ec      	bcc.n	8004cc2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004ce8:	883b      	ldrh	r3, [r7, #0]
 8004cea:	0418      	lsls	r0, r3, #16
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6819      	ldr	r1, [r3, #0]
 8004cf0:	78fb      	ldrb	r3, [r7, #3]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	4302      	orrs	r2, r0
 8004cf8:	3340      	adds	r3, #64	; 0x40
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	440b      	add	r3, r1
 8004cfe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b083      	sub	sp, #12
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	460b      	mov	r3, r1
 8004d18:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	887a      	ldrh	r2, [r7, #2]
 8004d20:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e262      	b.n	8005220 <HAL_RCC_OscConfig+0x4d8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d075      	beq.n	8004e52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d66:	4ba3      	ldr	r3, [pc, #652]	; (8004ff4 <HAL_RCC_OscConfig+0x2ac>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f003 030c 	and.w	r3, r3, #12
 8004d6e:	2b04      	cmp	r3, #4
 8004d70:	d00c      	beq.n	8004d8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d72:	4ba0      	ldr	r3, [pc, #640]	; (8004ff4 <HAL_RCC_OscConfig+0x2ac>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d7a:	2b08      	cmp	r3, #8
 8004d7c:	d112      	bne.n	8004da4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d7e:	4b9d      	ldr	r3, [pc, #628]	; (8004ff4 <HAL_RCC_OscConfig+0x2ac>)
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d8a:	d10b      	bne.n	8004da4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d8c:	4b99      	ldr	r3, [pc, #612]	; (8004ff4 <HAL_RCC_OscConfig+0x2ac>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d05b      	beq.n	8004e50 <HAL_RCC_OscConfig+0x108>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d157      	bne.n	8004e50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e23d      	b.n	8005220 <HAL_RCC_OscConfig+0x4d8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dac:	d106      	bne.n	8004dbc <HAL_RCC_OscConfig+0x74>
 8004dae:	4b91      	ldr	r3, [pc, #580]	; (8004ff4 <HAL_RCC_OscConfig+0x2ac>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a90      	ldr	r2, [pc, #576]	; (8004ff4 <HAL_RCC_OscConfig+0x2ac>)
 8004db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	e01d      	b.n	8004df8 <HAL_RCC_OscConfig+0xb0>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dc4:	d10c      	bne.n	8004de0 <HAL_RCC_OscConfig+0x98>
 8004dc6:	4b8b      	ldr	r3, [pc, #556]	; (8004ff4 <HAL_RCC_OscConfig+0x2ac>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a8a      	ldr	r2, [pc, #552]	; (8004ff4 <HAL_RCC_OscConfig+0x2ac>)
 8004dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dd0:	6013      	str	r3, [r2, #0]
 8004dd2:	4b88      	ldr	r3, [pc, #544]	; (8004ff4 <HAL_RCC_OscConfig+0x2ac>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a87      	ldr	r2, [pc, #540]	; (8004ff4 <HAL_RCC_OscConfig+0x2ac>)
 8004dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ddc:	6013      	str	r3, [r2, #0]
 8004dde:	e00b      	b.n	8004df8 <HAL_RCC_OscConfig+0xb0>
 8004de0:	4b84      	ldr	r3, [pc, #528]	; (8004ff4 <HAL_RCC_OscConfig+0x2ac>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a83      	ldr	r2, [pc, #524]	; (8004ff4 <HAL_RCC_OscConfig+0x2ac>)
 8004de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dea:	6013      	str	r3, [r2, #0]
 8004dec:	4b81      	ldr	r3, [pc, #516]	; (8004ff4 <HAL_RCC_OscConfig+0x2ac>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a80      	ldr	r2, [pc, #512]	; (8004ff4 <HAL_RCC_OscConfig+0x2ac>)
 8004df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004df6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d013      	beq.n	8004e28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e00:	f7fc fa1c 	bl	800123c <HAL_GetTick>
 8004e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e06:	e008      	b.n	8004e1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e08:	f7fc fa18 	bl	800123c <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b64      	cmp	r3, #100	; 0x64
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e202      	b.n	8005220 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e1a:	4b76      	ldr	r3, [pc, #472]	; (8004ff4 <HAL_RCC_OscConfig+0x2ac>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d0f0      	beq.n	8004e08 <HAL_RCC_OscConfig+0xc0>
 8004e26:	e014      	b.n	8004e52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e28:	f7fc fa08 	bl	800123c <HAL_GetTick>
 8004e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e30:	f7fc fa04 	bl	800123c <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b64      	cmp	r3, #100	; 0x64
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e1ee      	b.n	8005220 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e42:	4b6c      	ldr	r3, [pc, #432]	; (8004ff4 <HAL_RCC_OscConfig+0x2ac>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1f0      	bne.n	8004e30 <HAL_RCC_OscConfig+0xe8>
 8004e4e:	e000      	b.n	8004e52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d063      	beq.n	8004f26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e5e:	4b65      	ldr	r3, [pc, #404]	; (8004ff4 <HAL_RCC_OscConfig+0x2ac>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f003 030c 	and.w	r3, r3, #12
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00b      	beq.n	8004e82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e6a:	4b62      	ldr	r3, [pc, #392]	; (8004ff4 <HAL_RCC_OscConfig+0x2ac>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e72:	2b08      	cmp	r3, #8
 8004e74:	d11c      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e76:	4b5f      	ldr	r3, [pc, #380]	; (8004ff4 <HAL_RCC_OscConfig+0x2ac>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d116      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e82:	4b5c      	ldr	r3, [pc, #368]	; (8004ff4 <HAL_RCC_OscConfig+0x2ac>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d005      	beq.n	8004e9a <HAL_RCC_OscConfig+0x152>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d001      	beq.n	8004e9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e1c2      	b.n	8005220 <HAL_RCC_OscConfig+0x4d8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e9a:	4b56      	ldr	r3, [pc, #344]	; (8004ff4 <HAL_RCC_OscConfig+0x2ac>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	4952      	ldr	r1, [pc, #328]	; (8004ff4 <HAL_RCC_OscConfig+0x2ac>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eae:	e03a      	b.n	8004f26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d020      	beq.n	8004efa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004eb8:	4b4f      	ldr	r3, [pc, #316]	; (8004ff8 <HAL_RCC_OscConfig+0x2b0>)
 8004eba:	2201      	movs	r2, #1
 8004ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ebe:	f7fc f9bd 	bl	800123c <HAL_GetTick>
 8004ec2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ec4:	e008      	b.n	8004ed8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ec6:	f7fc f9b9 	bl	800123c <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e1a3      	b.n	8005220 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ed8:	4b46      	ldr	r3, [pc, #280]	; (8004ff4 <HAL_RCC_OscConfig+0x2ac>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0f0      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ee4:	4b43      	ldr	r3, [pc, #268]	; (8004ff4 <HAL_RCC_OscConfig+0x2ac>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	00db      	lsls	r3, r3, #3
 8004ef2:	4940      	ldr	r1, [pc, #256]	; (8004ff4 <HAL_RCC_OscConfig+0x2ac>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	600b      	str	r3, [r1, #0]
 8004ef8:	e015      	b.n	8004f26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004efa:	4b3f      	ldr	r3, [pc, #252]	; (8004ff8 <HAL_RCC_OscConfig+0x2b0>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f00:	f7fc f99c 	bl	800123c <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f08:	f7fc f998 	bl	800123c <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e182      	b.n	8005220 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f1a:	4b36      	ldr	r3, [pc, #216]	; (8004ff4 <HAL_RCC_OscConfig+0x2ac>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1f0      	bne.n	8004f08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0308 	and.w	r3, r3, #8
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d030      	beq.n	8004f94 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d016      	beq.n	8004f68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f3a:	4b30      	ldr	r3, [pc, #192]	; (8004ffc <HAL_RCC_OscConfig+0x2b4>)
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f40:	f7fc f97c 	bl	800123c <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f48:	f7fc f978 	bl	800123c <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e162      	b.n	8005220 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f5a:	4b26      	ldr	r3, [pc, #152]	; (8004ff4 <HAL_RCC_OscConfig+0x2ac>)
 8004f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0f0      	beq.n	8004f48 <HAL_RCC_OscConfig+0x200>
 8004f66:	e015      	b.n	8004f94 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f68:	4b24      	ldr	r3, [pc, #144]	; (8004ffc <HAL_RCC_OscConfig+0x2b4>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f6e:	f7fc f965 	bl	800123c <HAL_GetTick>
 8004f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f74:	e008      	b.n	8004f88 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f76:	f7fc f961 	bl	800123c <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e14b      	b.n	8005220 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f88:	4b1a      	ldr	r3, [pc, #104]	; (8004ff4 <HAL_RCC_OscConfig+0x2ac>)
 8004f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1f0      	bne.n	8004f76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0304 	and.w	r3, r3, #4
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 809e 	beq.w	80050de <HAL_RCC_OscConfig+0x396>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fa6:	4b13      	ldr	r3, [pc, #76]	; (8004ff4 <HAL_RCC_OscConfig+0x2ac>)
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10f      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60bb      	str	r3, [r7, #8]
 8004fb6:	4b0f      	ldr	r3, [pc, #60]	; (8004ff4 <HAL_RCC_OscConfig+0x2ac>)
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	4a0e      	ldr	r2, [pc, #56]	; (8004ff4 <HAL_RCC_OscConfig+0x2ac>)
 8004fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8004fc2:	4b0c      	ldr	r3, [pc, #48]	; (8004ff4 <HAL_RCC_OscConfig+0x2ac>)
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fca:	60bb      	str	r3, [r7, #8]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fd2:	4b0b      	ldr	r3, [pc, #44]	; (8005000 <HAL_RCC_OscConfig+0x2b8>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d121      	bne.n	8005022 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fde:	4b08      	ldr	r3, [pc, #32]	; (8005000 <HAL_RCC_OscConfig+0x2b8>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a07      	ldr	r2, [pc, #28]	; (8005000 <HAL_RCC_OscConfig+0x2b8>)
 8004fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fea:	f7fc f927 	bl	800123c <HAL_GetTick>
 8004fee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff0:	e011      	b.n	8005016 <HAL_RCC_OscConfig+0x2ce>
 8004ff2:	bf00      	nop
 8004ff4:	40023800 	.word	0x40023800
 8004ff8:	42470000 	.word	0x42470000
 8004ffc:	42470e80 	.word	0x42470e80
 8005000:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005004:	f7fc f91a 	bl	800123c <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e104      	b.n	8005220 <HAL_RCC_OscConfig+0x4d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005016:	4b84      	ldr	r3, [pc, #528]	; (8005228 <HAL_RCC_OscConfig+0x4e0>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800501e:	2b00      	cmp	r3, #0
 8005020:	d0f0      	beq.n	8005004 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d106      	bne.n	8005038 <HAL_RCC_OscConfig+0x2f0>
 800502a:	4b80      	ldr	r3, [pc, #512]	; (800522c <HAL_RCC_OscConfig+0x4e4>)
 800502c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502e:	4a7f      	ldr	r2, [pc, #508]	; (800522c <HAL_RCC_OscConfig+0x4e4>)
 8005030:	f043 0301 	orr.w	r3, r3, #1
 8005034:	6713      	str	r3, [r2, #112]	; 0x70
 8005036:	e01c      	b.n	8005072 <HAL_RCC_OscConfig+0x32a>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	2b05      	cmp	r3, #5
 800503e:	d10c      	bne.n	800505a <HAL_RCC_OscConfig+0x312>
 8005040:	4b7a      	ldr	r3, [pc, #488]	; (800522c <HAL_RCC_OscConfig+0x4e4>)
 8005042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005044:	4a79      	ldr	r2, [pc, #484]	; (800522c <HAL_RCC_OscConfig+0x4e4>)
 8005046:	f043 0304 	orr.w	r3, r3, #4
 800504a:	6713      	str	r3, [r2, #112]	; 0x70
 800504c:	4b77      	ldr	r3, [pc, #476]	; (800522c <HAL_RCC_OscConfig+0x4e4>)
 800504e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005050:	4a76      	ldr	r2, [pc, #472]	; (800522c <HAL_RCC_OscConfig+0x4e4>)
 8005052:	f043 0301 	orr.w	r3, r3, #1
 8005056:	6713      	str	r3, [r2, #112]	; 0x70
 8005058:	e00b      	b.n	8005072 <HAL_RCC_OscConfig+0x32a>
 800505a:	4b74      	ldr	r3, [pc, #464]	; (800522c <HAL_RCC_OscConfig+0x4e4>)
 800505c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505e:	4a73      	ldr	r2, [pc, #460]	; (800522c <HAL_RCC_OscConfig+0x4e4>)
 8005060:	f023 0301 	bic.w	r3, r3, #1
 8005064:	6713      	str	r3, [r2, #112]	; 0x70
 8005066:	4b71      	ldr	r3, [pc, #452]	; (800522c <HAL_RCC_OscConfig+0x4e4>)
 8005068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506a:	4a70      	ldr	r2, [pc, #448]	; (800522c <HAL_RCC_OscConfig+0x4e4>)
 800506c:	f023 0304 	bic.w	r3, r3, #4
 8005070:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d014      	beq.n	80050a4 <HAL_RCC_OscConfig+0x35c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800507a:	f7fc f8df 	bl	800123c <HAL_GetTick>
 800507e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005080:	e009      	b.n	8005096 <HAL_RCC_OscConfig+0x34e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005082:	f7fc f8db 	bl	800123c <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0x34e>
        {
          return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e0c4      	b.n	8005220 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005096:	4b65      	ldr	r3, [pc, #404]	; (800522c <HAL_RCC_OscConfig+0x4e4>)
 8005098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0ef      	beq.n	8005082 <HAL_RCC_OscConfig+0x33a>
 80050a2:	e013      	b.n	80050cc <HAL_RCC_OscConfig+0x384>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050a4:	f7fc f8ca 	bl	800123c <HAL_GetTick>
 80050a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050aa:	e009      	b.n	80050c0 <HAL_RCC_OscConfig+0x378>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050ac:	f7fc f8c6 	bl	800123c <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80050ba:	d901      	bls.n	80050c0 <HAL_RCC_OscConfig+0x378>
        {
          return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e0af      	b.n	8005220 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050c0:	4b5a      	ldr	r3, [pc, #360]	; (800522c <HAL_RCC_OscConfig+0x4e4>)
 80050c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1ef      	bne.n	80050ac <HAL_RCC_OscConfig+0x364>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050cc:	7dfb      	ldrb	r3, [r7, #23]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d105      	bne.n	80050de <HAL_RCC_OscConfig+0x396>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050d2:	4b56      	ldr	r3, [pc, #344]	; (800522c <HAL_RCC_OscConfig+0x4e4>)
 80050d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d6:	4a55      	ldr	r2, [pc, #340]	; (800522c <HAL_RCC_OscConfig+0x4e4>)
 80050d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f000 809b 	beq.w	800521e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050e8:	4b50      	ldr	r3, [pc, #320]	; (800522c <HAL_RCC_OscConfig+0x4e4>)
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f003 030c 	and.w	r3, r3, #12
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d05c      	beq.n	80051ae <HAL_RCC_OscConfig+0x466>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d141      	bne.n	8005180 <HAL_RCC_OscConfig+0x438>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050fc:	4b4c      	ldr	r3, [pc, #304]	; (8005230 <HAL_RCC_OscConfig+0x4e8>)
 80050fe:	2200      	movs	r2, #0
 8005100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005102:	f7fc f89b 	bl	800123c <HAL_GetTick>
 8005106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005108:	e008      	b.n	800511c <HAL_RCC_OscConfig+0x3d4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800510a:	f7fc f897 	bl	800123c <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d901      	bls.n	800511c <HAL_RCC_OscConfig+0x3d4>
          {
            return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e081      	b.n	8005220 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800511c:	4b43      	ldr	r3, [pc, #268]	; (800522c <HAL_RCC_OscConfig+0x4e4>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1f0      	bne.n	800510a <HAL_RCC_OscConfig+0x3c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	69da      	ldr	r2, [r3, #28]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a1b      	ldr	r3, [r3, #32]
 8005130:	431a      	orrs	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005136:	019b      	lsls	r3, r3, #6
 8005138:	431a      	orrs	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513e:	085b      	lsrs	r3, r3, #1
 8005140:	3b01      	subs	r3, #1
 8005142:	041b      	lsls	r3, r3, #16
 8005144:	431a      	orrs	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514a:	061b      	lsls	r3, r3, #24
 800514c:	4937      	ldr	r1, [pc, #220]	; (800522c <HAL_RCC_OscConfig+0x4e4>)
 800514e:	4313      	orrs	r3, r2
 8005150:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005152:	4b37      	ldr	r3, [pc, #220]	; (8005230 <HAL_RCC_OscConfig+0x4e8>)
 8005154:	2201      	movs	r2, #1
 8005156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005158:	f7fc f870 	bl	800123c <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0x42a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005160:	f7fc f86c 	bl	800123c <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e056      	b.n	8005220 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005172:	4b2e      	ldr	r3, [pc, #184]	; (800522c <HAL_RCC_OscConfig+0x4e4>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d0f0      	beq.n	8005160 <HAL_RCC_OscConfig+0x418>
 800517e:	e04e      	b.n	800521e <HAL_RCC_OscConfig+0x4d6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005180:	4b2b      	ldr	r3, [pc, #172]	; (8005230 <HAL_RCC_OscConfig+0x4e8>)
 8005182:	2200      	movs	r2, #0
 8005184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005186:	f7fc f859 	bl	800123c <HAL_GetTick>
 800518a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800518c:	e008      	b.n	80051a0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800518e:	f7fc f855 	bl	800123c <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d901      	bls.n	80051a0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e03f      	b.n	8005220 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051a0:	4b22      	ldr	r3, [pc, #136]	; (800522c <HAL_RCC_OscConfig+0x4e4>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1f0      	bne.n	800518e <HAL_RCC_OscConfig+0x446>
 80051ac:	e037      	b.n	800521e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d101      	bne.n	80051ba <HAL_RCC_OscConfig+0x472>
      {
        return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e032      	b.n	8005220 <HAL_RCC_OscConfig+0x4d8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051ba:	4b1c      	ldr	r3, [pc, #112]	; (800522c <HAL_RCC_OscConfig+0x4e4>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d028      	beq.n	800521a <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d121      	bne.n	800521a <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d11a      	bne.n	800521a <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80051ea:	4013      	ands	r3, r2
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051f0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d111      	bne.n	800521a <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005200:	085b      	lsrs	r3, r3, #1
 8005202:	3b01      	subs	r3, #1
 8005204:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005206:	429a      	cmp	r2, r3
 8005208:	d107      	bne.n	800521a <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005214:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005216:	429a      	cmp	r2, r3
 8005218:	d001      	beq.n	800521e <HAL_RCC_OscConfig+0x4d6>
#endif
        {
          return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e000      	b.n	8005220 <HAL_RCC_OscConfig+0x4d8>
        }
      }
    }
  }
  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3718      	adds	r7, #24
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	40007000 	.word	0x40007000
 800522c:	40023800 	.word	0x40023800
 8005230:	42470060 	.word	0x42470060

08005234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e0cc      	b.n	80053e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005248:	4b68      	ldr	r3, [pc, #416]	; (80053ec <HAL_RCC_ClockConfig+0x1b8>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0307 	and.w	r3, r3, #7
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	429a      	cmp	r2, r3
 8005254:	d90c      	bls.n	8005270 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005256:	4b65      	ldr	r3, [pc, #404]	; (80053ec <HAL_RCC_ClockConfig+0x1b8>)
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	b2d2      	uxtb	r2, r2
 800525c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800525e:	4b63      	ldr	r3, [pc, #396]	; (80053ec <HAL_RCC_ClockConfig+0x1b8>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0307 	and.w	r3, r3, #7
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	429a      	cmp	r2, r3
 800526a:	d001      	beq.n	8005270 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e0b8      	b.n	80053e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d020      	beq.n	80052be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0304 	and.w	r3, r3, #4
 8005284:	2b00      	cmp	r3, #0
 8005286:	d005      	beq.n	8005294 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005288:	4b59      	ldr	r3, [pc, #356]	; (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	4a58      	ldr	r2, [pc, #352]	; (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 800528e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005292:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b00      	cmp	r3, #0
 800529e:	d005      	beq.n	80052ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052a0:	4b53      	ldr	r3, [pc, #332]	; (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	4a52      	ldr	r2, [pc, #328]	; (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 80052a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052ac:	4b50      	ldr	r3, [pc, #320]	; (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	494d      	ldr	r1, [pc, #308]	; (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d044      	beq.n	8005354 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d107      	bne.n	80052e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052d2:	4b47      	ldr	r3, [pc, #284]	; (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d119      	bne.n	8005312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e07f      	b.n	80053e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d003      	beq.n	80052f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052ee:	2b03      	cmp	r3, #3
 80052f0:	d107      	bne.n	8005302 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052f2:	4b3f      	ldr	r3, [pc, #252]	; (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d109      	bne.n	8005312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e06f      	b.n	80053e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005302:	4b3b      	ldr	r3, [pc, #236]	; (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e067      	b.n	80053e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005312:	4b37      	ldr	r3, [pc, #220]	; (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f023 0203 	bic.w	r2, r3, #3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	4934      	ldr	r1, [pc, #208]	; (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005320:	4313      	orrs	r3, r2
 8005322:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005324:	f7fb ff8a 	bl	800123c <HAL_GetTick>
 8005328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800532a:	e00a      	b.n	8005342 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800532c:	f7fb ff86 	bl	800123c <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	f241 3288 	movw	r2, #5000	; 0x1388
 800533a:	4293      	cmp	r3, r2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e04f      	b.n	80053e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005342:	4b2b      	ldr	r3, [pc, #172]	; (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f003 020c 	and.w	r2, r3, #12
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	429a      	cmp	r2, r3
 8005352:	d1eb      	bne.n	800532c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005354:	4b25      	ldr	r3, [pc, #148]	; (80053ec <HAL_RCC_ClockConfig+0x1b8>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	429a      	cmp	r2, r3
 8005360:	d20c      	bcs.n	800537c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005362:	4b22      	ldr	r3, [pc, #136]	; (80053ec <HAL_RCC_ClockConfig+0x1b8>)
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	b2d2      	uxtb	r2, r2
 8005368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800536a:	4b20      	ldr	r3, [pc, #128]	; (80053ec <HAL_RCC_ClockConfig+0x1b8>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0307 	and.w	r3, r3, #7
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	429a      	cmp	r2, r3
 8005376:	d001      	beq.n	800537c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e032      	b.n	80053e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b00      	cmp	r3, #0
 8005386:	d008      	beq.n	800539a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005388:	4b19      	ldr	r3, [pc, #100]	; (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	4916      	ldr	r1, [pc, #88]	; (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005396:	4313      	orrs	r3, r2
 8005398:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0308 	and.w	r3, r3, #8
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d009      	beq.n	80053ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053a6:	4b12      	ldr	r3, [pc, #72]	; (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	490e      	ldr	r1, [pc, #56]	; (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053ba:	f000 f82d 	bl	8005418 <HAL_RCC_GetSysClockFreq>
 80053be:	4602      	mov	r2, r0
 80053c0:	4b0b      	ldr	r3, [pc, #44]	; (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	091b      	lsrs	r3, r3, #4
 80053c6:	f003 030f 	and.w	r3, r3, #15
 80053ca:	490a      	ldr	r1, [pc, #40]	; (80053f4 <HAL_RCC_ClockConfig+0x1c0>)
 80053cc:	5ccb      	ldrb	r3, [r1, r3]
 80053ce:	fa22 f303 	lsr.w	r3, r2, r3
 80053d2:	4a09      	ldr	r2, [pc, #36]	; (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 80053d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053d6:	4b09      	ldr	r3, [pc, #36]	; (80053fc <HAL_RCC_ClockConfig+0x1c8>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4618      	mov	r0, r3
 80053dc:	f7fb feea 	bl	80011b4 <HAL_InitTick>

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	40023c00 	.word	0x40023c00
 80053f0:	40023800 	.word	0x40023800
 80053f4:	0800fc10 	.word	0x0800fc10
 80053f8:	20000118 	.word	0x20000118
 80053fc:	20000000 	.word	0x20000000

08005400 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005400:	b480      	push	{r7}
 8005402:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005404:	4b03      	ldr	r3, [pc, #12]	; (8005414 <HAL_RCC_EnableCSS+0x14>)
 8005406:	2201      	movs	r2, #1
 8005408:	601a      	str	r2, [r3, #0]
}
 800540a:	bf00      	nop
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	4247004c 	.word	0x4247004c

08005418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005418:	b5b0      	push	{r4, r5, r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800541e:	2100      	movs	r1, #0
 8005420:	6079      	str	r1, [r7, #4]
 8005422:	2100      	movs	r1, #0
 8005424:	60f9      	str	r1, [r7, #12]
 8005426:	2100      	movs	r1, #0
 8005428:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800542a:	2100      	movs	r1, #0
 800542c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800542e:	4952      	ldr	r1, [pc, #328]	; (8005578 <HAL_RCC_GetSysClockFreq+0x160>)
 8005430:	6889      	ldr	r1, [r1, #8]
 8005432:	f001 010c 	and.w	r1, r1, #12
 8005436:	2908      	cmp	r1, #8
 8005438:	d00d      	beq.n	8005456 <HAL_RCC_GetSysClockFreq+0x3e>
 800543a:	2908      	cmp	r1, #8
 800543c:	f200 8094 	bhi.w	8005568 <HAL_RCC_GetSysClockFreq+0x150>
 8005440:	2900      	cmp	r1, #0
 8005442:	d002      	beq.n	800544a <HAL_RCC_GetSysClockFreq+0x32>
 8005444:	2904      	cmp	r1, #4
 8005446:	d003      	beq.n	8005450 <HAL_RCC_GetSysClockFreq+0x38>
 8005448:	e08e      	b.n	8005568 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800544a:	4b4c      	ldr	r3, [pc, #304]	; (800557c <HAL_RCC_GetSysClockFreq+0x164>)
 800544c:	60bb      	str	r3, [r7, #8]
       break;
 800544e:	e08e      	b.n	800556e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005450:	4b4b      	ldr	r3, [pc, #300]	; (8005580 <HAL_RCC_GetSysClockFreq+0x168>)
 8005452:	60bb      	str	r3, [r7, #8]
      break;
 8005454:	e08b      	b.n	800556e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005456:	4948      	ldr	r1, [pc, #288]	; (8005578 <HAL_RCC_GetSysClockFreq+0x160>)
 8005458:	6849      	ldr	r1, [r1, #4]
 800545a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800545e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005460:	4945      	ldr	r1, [pc, #276]	; (8005578 <HAL_RCC_GetSysClockFreq+0x160>)
 8005462:	6849      	ldr	r1, [r1, #4]
 8005464:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005468:	2900      	cmp	r1, #0
 800546a:	d024      	beq.n	80054b6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800546c:	4942      	ldr	r1, [pc, #264]	; (8005578 <HAL_RCC_GetSysClockFreq+0x160>)
 800546e:	6849      	ldr	r1, [r1, #4]
 8005470:	0989      	lsrs	r1, r1, #6
 8005472:	4608      	mov	r0, r1
 8005474:	f04f 0100 	mov.w	r1, #0
 8005478:	f240 14ff 	movw	r4, #511	; 0x1ff
 800547c:	f04f 0500 	mov.w	r5, #0
 8005480:	ea00 0204 	and.w	r2, r0, r4
 8005484:	ea01 0305 	and.w	r3, r1, r5
 8005488:	493d      	ldr	r1, [pc, #244]	; (8005580 <HAL_RCC_GetSysClockFreq+0x168>)
 800548a:	fb01 f003 	mul.w	r0, r1, r3
 800548e:	2100      	movs	r1, #0
 8005490:	fb01 f102 	mul.w	r1, r1, r2
 8005494:	1844      	adds	r4, r0, r1
 8005496:	493a      	ldr	r1, [pc, #232]	; (8005580 <HAL_RCC_GetSysClockFreq+0x168>)
 8005498:	fba2 0101 	umull	r0, r1, r2, r1
 800549c:	1863      	adds	r3, r4, r1
 800549e:	4619      	mov	r1, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	461a      	mov	r2, r3
 80054a4:	f04f 0300 	mov.w	r3, #0
 80054a8:	f7fb fb86 	bl	8000bb8 <__aeabi_uldivmod>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4613      	mov	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]
 80054b4:	e04a      	b.n	800554c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054b6:	4b30      	ldr	r3, [pc, #192]	; (8005578 <HAL_RCC_GetSysClockFreq+0x160>)
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	099b      	lsrs	r3, r3, #6
 80054bc:	461a      	mov	r2, r3
 80054be:	f04f 0300 	mov.w	r3, #0
 80054c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80054c6:	f04f 0100 	mov.w	r1, #0
 80054ca:	ea02 0400 	and.w	r4, r2, r0
 80054ce:	ea03 0501 	and.w	r5, r3, r1
 80054d2:	4620      	mov	r0, r4
 80054d4:	4629      	mov	r1, r5
 80054d6:	f04f 0200 	mov.w	r2, #0
 80054da:	f04f 0300 	mov.w	r3, #0
 80054de:	014b      	lsls	r3, r1, #5
 80054e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80054e4:	0142      	lsls	r2, r0, #5
 80054e6:	4610      	mov	r0, r2
 80054e8:	4619      	mov	r1, r3
 80054ea:	1b00      	subs	r0, r0, r4
 80054ec:	eb61 0105 	sbc.w	r1, r1, r5
 80054f0:	f04f 0200 	mov.w	r2, #0
 80054f4:	f04f 0300 	mov.w	r3, #0
 80054f8:	018b      	lsls	r3, r1, #6
 80054fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80054fe:	0182      	lsls	r2, r0, #6
 8005500:	1a12      	subs	r2, r2, r0
 8005502:	eb63 0301 	sbc.w	r3, r3, r1
 8005506:	f04f 0000 	mov.w	r0, #0
 800550a:	f04f 0100 	mov.w	r1, #0
 800550e:	00d9      	lsls	r1, r3, #3
 8005510:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005514:	00d0      	lsls	r0, r2, #3
 8005516:	4602      	mov	r2, r0
 8005518:	460b      	mov	r3, r1
 800551a:	1912      	adds	r2, r2, r4
 800551c:	eb45 0303 	adc.w	r3, r5, r3
 8005520:	f04f 0000 	mov.w	r0, #0
 8005524:	f04f 0100 	mov.w	r1, #0
 8005528:	0299      	lsls	r1, r3, #10
 800552a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800552e:	0290      	lsls	r0, r2, #10
 8005530:	4602      	mov	r2, r0
 8005532:	460b      	mov	r3, r1
 8005534:	4610      	mov	r0, r2
 8005536:	4619      	mov	r1, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	461a      	mov	r2, r3
 800553c:	f04f 0300 	mov.w	r3, #0
 8005540:	f7fb fb3a 	bl	8000bb8 <__aeabi_uldivmod>
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	4613      	mov	r3, r2
 800554a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800554c:	4b0a      	ldr	r3, [pc, #40]	; (8005578 <HAL_RCC_GetSysClockFreq+0x160>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	0c1b      	lsrs	r3, r3, #16
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	3301      	adds	r3, #1
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	fbb2 f3f3 	udiv	r3, r2, r3
 8005564:	60bb      	str	r3, [r7, #8]
      break;
 8005566:	e002      	b.n	800556e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005568:	4b04      	ldr	r3, [pc, #16]	; (800557c <HAL_RCC_GetSysClockFreq+0x164>)
 800556a:	60bb      	str	r3, [r7, #8]
      break;
 800556c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800556e:	68bb      	ldr	r3, [r7, #8]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bdb0      	pop	{r4, r5, r7, pc}
 8005578:	40023800 	.word	0x40023800
 800557c:	00f42400 	.word	0x00f42400
 8005580:	016e3600 	.word	0x016e3600

08005584 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005584:	b480      	push	{r7}
 8005586:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005588:	4b03      	ldr	r3, [pc, #12]	; (8005598 <HAL_RCC_GetHCLKFreq+0x14>)
 800558a:	681b      	ldr	r3, [r3, #0]
}
 800558c:	4618      	mov	r0, r3
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	20000118 	.word	0x20000118

0800559c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80055a0:	f7ff fff0 	bl	8005584 <HAL_RCC_GetHCLKFreq>
 80055a4:	4602      	mov	r2, r0
 80055a6:	4b05      	ldr	r3, [pc, #20]	; (80055bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	0a9b      	lsrs	r3, r3, #10
 80055ac:	f003 0307 	and.w	r3, r3, #7
 80055b0:	4903      	ldr	r1, [pc, #12]	; (80055c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055b2:	5ccb      	ldrb	r3, [r1, r3]
 80055b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	40023800 	.word	0x40023800
 80055c0:	0800fc20 	.word	0x0800fc20

080055c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80055c8:	f7ff ffdc 	bl	8005584 <HAL_RCC_GetHCLKFreq>
 80055cc:	4602      	mov	r2, r0
 80055ce:	4b05      	ldr	r3, [pc, #20]	; (80055e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	0b5b      	lsrs	r3, r3, #13
 80055d4:	f003 0307 	and.w	r3, r3, #7
 80055d8:	4903      	ldr	r1, [pc, #12]	; (80055e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055da:	5ccb      	ldrb	r3, [r1, r3]
 80055dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	40023800 	.word	0x40023800
 80055e8:	0800fc20 	.word	0x0800fc20

080055ec <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80055f0:	4b06      	ldr	r3, [pc, #24]	; (800560c <HAL_RCC_NMI_IRQHandler+0x20>)
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f8:	2b80      	cmp	r3, #128	; 0x80
 80055fa:	d104      	bne.n	8005606 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80055fc:	f000 f80a 	bl	8005614 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005600:	4b03      	ldr	r3, [pc, #12]	; (8005610 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005602:	2280      	movs	r2, #128	; 0x80
 8005604:	701a      	strb	r2, [r3, #0]
  }
}
 8005606:	bf00      	nop
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	40023800 	.word	0x40023800
 8005610:	4002380e 	.word	0x4002380e

08005614 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8005618:	bf00      	nop
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
	...

08005624 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800562c:	2300      	movs	r3, #0
 800562e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005630:	2300      	movs	r3, #0
 8005632:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	2b00      	cmp	r3, #0
 800563e:	d105      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005648:	2b00      	cmp	r3, #0
 800564a:	d038      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800564c:	4b68      	ldr	r3, [pc, #416]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800564e:	2200      	movs	r2, #0
 8005650:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005652:	f7fb fdf3 	bl	800123c <HAL_GetTick>
 8005656:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005658:	e008      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800565a:	f7fb fdef 	bl	800123c <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b02      	cmp	r3, #2
 8005666:	d901      	bls.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e0bc      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800566c:	4b61      	ldr	r3, [pc, #388]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1f0      	bne.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	019b      	lsls	r3, r3, #6
 8005682:	431a      	orrs	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	071b      	lsls	r3, r3, #28
 800568a:	495a      	ldr	r1, [pc, #360]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800568c:	4313      	orrs	r3, r2
 800568e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005692:	4b57      	ldr	r3, [pc, #348]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005694:	2201      	movs	r2, #1
 8005696:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005698:	f7fb fdd0 	bl	800123c <HAL_GetTick>
 800569c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800569e:	e008      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80056a0:	f7fb fdcc 	bl	800123c <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e099      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056b2:	4b50      	ldr	r3, [pc, #320]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d0f0      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f000 8082 	beq.w	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056cc:	2300      	movs	r3, #0
 80056ce:	60fb      	str	r3, [r7, #12]
 80056d0:	4b48      	ldr	r3, [pc, #288]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d4:	4a47      	ldr	r2, [pc, #284]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056da:	6413      	str	r3, [r2, #64]	; 0x40
 80056dc:	4b45      	ldr	r3, [pc, #276]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056e4:	60fb      	str	r3, [r7, #12]
 80056e6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80056e8:	4b43      	ldr	r3, [pc, #268]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a42      	ldr	r2, [pc, #264]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056f2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80056f4:	f7fb fda2 	bl	800123c <HAL_GetTick>
 80056f8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80056fa:	e008      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80056fc:	f7fb fd9e 	bl	800123c <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b02      	cmp	r3, #2
 8005708:	d901      	bls.n	800570e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e06b      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800570e:	4b3a      	ldr	r3, [pc, #232]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005716:	2b00      	cmp	r3, #0
 8005718:	d0f0      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800571a:	4b36      	ldr	r3, [pc, #216]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800571c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005722:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d02e      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x164>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	429a      	cmp	r2, r3
 8005736:	d027      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005738:	4b2e      	ldr	r3, [pc, #184]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800573a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800573c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005740:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005742:	4b2e      	ldr	r3, [pc, #184]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005744:	2201      	movs	r2, #1
 8005746:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005748:	4b2c      	ldr	r3, [pc, #176]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800574a:	2200      	movs	r2, #0
 800574c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800574e:	4a29      	ldr	r2, [pc, #164]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005754:	4b27      	ldr	r3, [pc, #156]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	2b01      	cmp	r3, #1
 800575e:	d113      	bne.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005760:	f7fb fd6c 	bl	800123c <HAL_GetTick>
 8005764:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005766:	e009      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x158>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005768:	f7fb fd68 	bl	800123c <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8005776:	d901      	bls.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x158>
          {
            return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e034      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800577c:	4b1d      	ldr	r3, [pc, #116]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800577e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d0ef      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005790:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005794:	d10d      	bne.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8005796:	4b17      	ldr	r3, [pc, #92]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80057a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057aa:	4912      	ldr	r1, [pc, #72]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	608b      	str	r3, [r1, #8]
 80057b0:	e005      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x19a>
 80057b2:	4b10      	ldr	r3, [pc, #64]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	4a0f      	ldr	r2, [pc, #60]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057b8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80057bc:	6093      	str	r3, [r2, #8]
 80057be:	4b0d      	ldr	r3, [pc, #52]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057ca:	490a      	ldr	r1, [pc, #40]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0308 	and.w	r3, r3, #8
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d003      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	7d1a      	ldrb	r2, [r3, #20]
 80057e0:	4b07      	ldr	r3, [pc, #28]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80057e2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3718      	adds	r7, #24
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	42470068 	.word	0x42470068
 80057f4:	40023800 	.word	0x40023800
 80057f8:	40007000 	.word	0x40007000
 80057fc:	42470e40 	.word	0x42470e40
 8005800:	424711e0 	.word	0x424711e0

08005804 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e083      	b.n	800591e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	7f5b      	ldrb	r3, [r3, #29]
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b00      	cmp	r3, #0
 800581e:	d105      	bne.n	800582c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f006 fd5c 	bl	800c2e4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	22ca      	movs	r2, #202	; 0xca
 8005838:	625a      	str	r2, [r3, #36]	; 0x24
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2253      	movs	r2, #83	; 0x53
 8005840:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f897 	bl	8005976 <RTC_EnterInitMode>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d008      	beq.n	8005860 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	22ff      	movs	r2, #255	; 0xff
 8005854:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2204      	movs	r2, #4
 800585a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e05e      	b.n	800591e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6812      	ldr	r2, [r2, #0]
 800586a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800586e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005872:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6899      	ldr	r1, [r3, #8]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	431a      	orrs	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	695b      	ldr	r3, [r3, #20]
 8005888:	431a      	orrs	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	68d2      	ldr	r2, [r2, #12]
 800589a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6919      	ldr	r1, [r3, #16]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	041a      	lsls	r2, r3, #16
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058be:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f003 0320 	and.w	r3, r3, #32
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10e      	bne.n	80058ec <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f829 	bl	8005926 <HAL_RTC_WaitForSynchro>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d008      	beq.n	80058ec <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	22ff      	movs	r2, #255	; 0xff
 80058e0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2204      	movs	r2, #4
 80058e6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e018      	b.n	800591e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80058fa:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	699a      	ldr	r2, [r3, #24]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	22ff      	movs	r2, #255	; 0xff
 8005914:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2201      	movs	r2, #1
 800591a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800591c:	2300      	movs	r3, #0
  }
}
 800591e:	4618      	mov	r0, r3
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b084      	sub	sp, #16
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800592e:	2300      	movs	r3, #0
 8005930:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68da      	ldr	r2, [r3, #12]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005940:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005942:	f7fb fc7b 	bl	800123c <HAL_GetTick>
 8005946:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005948:	e009      	b.n	800595e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800594a:	f7fb fc77 	bl	800123c <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005958:	d901      	bls.n	800595e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e007      	b.n	800596e <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f003 0320 	and.w	r3, r3, #32
 8005968:	2b00      	cmp	r3, #0
 800596a:	d0ee      	beq.n	800594a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b084      	sub	sp, #16
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800597e:	2300      	movs	r3, #0
 8005980:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598c:	2b00      	cmp	r3, #0
 800598e:	d119      	bne.n	80059c4 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f04f 32ff 	mov.w	r2, #4294967295
 8005998:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800599a:	f7fb fc4f 	bl	800123c <HAL_GetTick>
 800599e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80059a0:	e009      	b.n	80059b6 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80059a2:	f7fb fc4b 	bl	800123c <HAL_GetTick>
 80059a6:	4602      	mov	r2, r0
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059b0:	d901      	bls.n	80059b6 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e007      	b.n	80059c6 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d0ee      	beq.n	80059a2 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b082      	sub	sp, #8
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e022      	b.n	8005a26 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d105      	bne.n	80059f8 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f006 fca2 	bl	800c33c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2203      	movs	r2, #3
 80059fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 f815 	bl	8005a30 <HAL_SD_InitCard>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e00a      	b.n	8005a26 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
	...

08005a30 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005a30:	b5b0      	push	{r4, r5, r7, lr}
 8005a32:	b08e      	sub	sp, #56	; 0x38
 8005a34:	af04      	add	r7, sp, #16
 8005a36:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005a40:	2300      	movs	r3, #0
 8005a42:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005a44:	2300      	movs	r3, #0
 8005a46:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005a4c:	2376      	movs	r3, #118	; 0x76
 8005a4e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681d      	ldr	r5, [r3, #0]
 8005a54:	466c      	mov	r4, sp
 8005a56:	f107 0314 	add.w	r3, r7, #20
 8005a5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005a62:	f107 0308 	add.w	r3, r7, #8
 8005a66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a68:	4628      	mov	r0, r5
 8005a6a:	f001 fe07 	bl	800767c <SDIO_Init>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005a74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d001      	beq.n	8005a80 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e04c      	b.n	8005b1a <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005a80:	4b28      	ldr	r3, [pc, #160]	; (8005b24 <HAL_SD_InitCard+0xf4>)
 8005a82:	2200      	movs	r2, #0
 8005a84:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f001 fe2e 	bl	80076ec <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005a90:	4b24      	ldr	r3, [pc, #144]	; (8005b24 <HAL_SD_InitCard+0xf4>)
 8005a92:	2201      	movs	r2, #1
 8005a94:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fb52 	bl	8006140 <SD_PowerON>
 8005a9c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00b      	beq.n	8005abc <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e02e      	b.n	8005b1a <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 fa73 	bl	8005fa8 <SD_InitCard>
 8005ac2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00b      	beq.n	8005ae2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e01b      	b.n	8005b1a <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005aea:	4618      	mov	r0, r3
 8005aec:	f001 fe91 	bl	8007812 <SDMMC_CmdBlockLength>
 8005af0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00f      	beq.n	8005b18 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a0a      	ldr	r2, [pc, #40]	; (8005b28 <HAL_SD_InitCard+0xf8>)
 8005afe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b04:	6a3b      	ldr	r3, [r7, #32]
 8005b06:	431a      	orrs	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e000      	b.n	8005b1a <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3728      	adds	r7, #40	; 0x28
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bdb0      	pop	{r4, r5, r7, pc}
 8005b22:	bf00      	nop
 8005b24:	422580a0 	.word	0x422580a0
 8005b28:	004005ff 	.word	0x004005ff

08005b2c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b3a:	0f9b      	lsrs	r3, r3, #30
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b46:	0e9b      	lsrs	r3, r3, #26
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b58:	0e1b      	lsrs	r3, r3, #24
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	f003 0303 	and.w	r3, r3, #3
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b6a:	0c1b      	lsrs	r3, r3, #16
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b76:	0a1b      	lsrs	r3, r3, #8
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b82:	b2da      	uxtb	r2, r3
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b8c:	0d1b      	lsrs	r3, r3, #20
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b98:	0c1b      	lsrs	r3, r3, #16
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	f003 030f 	and.w	r3, r3, #15
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005baa:	0bdb      	lsrs	r3, r3, #15
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bbc:	0b9b      	lsrs	r3, r3, #14
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bce:	0b5b      	lsrs	r3, r3, #13
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005be0:	0b1b      	lsrs	r3, r3, #12
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	f003 0301 	and.w	r3, r3, #1
 8005be8:	b2da      	uxtb	r2, r3
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d163      	bne.n	8005cc4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c00:	009a      	lsls	r2, r3, #2
 8005c02:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005c06:	4013      	ands	r3, r2
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005c0c:	0f92      	lsrs	r2, r2, #30
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c18:	0edb      	lsrs	r3, r3, #27
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	f003 0307 	and.w	r3, r3, #7
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c2a:	0e1b      	lsrs	r3, r3, #24
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	f003 0307 	and.w	r3, r3, #7
 8005c32:	b2da      	uxtb	r2, r3
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c3c:	0d5b      	lsrs	r3, r3, #21
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	f003 0307 	and.w	r3, r3, #7
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c4e:	0c9b      	lsrs	r3, r3, #18
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	f003 0307 	and.w	r3, r3, #7
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c60:	0bdb      	lsrs	r3, r3, #15
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	f003 0307 	and.w	r3, r3, #7
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	1c5a      	adds	r2, r3, #1
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	7e1b      	ldrb	r3, [r3, #24]
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	f003 0307 	and.w	r3, r3, #7
 8005c82:	3302      	adds	r3, #2
 8005c84:	2201      	movs	r2, #1
 8005c86:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005c8e:	fb02 f203 	mul.w	r2, r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	7a1b      	ldrb	r3, [r3, #8]
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	f003 030f 	and.w	r3, r3, #15
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	409a      	lsls	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005cb0:	0a52      	lsrs	r2, r2, #9
 8005cb2:	fb02 f203 	mul.w	r2, r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cc0:	661a      	str	r2, [r3, #96]	; 0x60
 8005cc2:	e031      	b.n	8005d28 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d11d      	bne.n	8005d08 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cd0:	041b      	lsls	r3, r3, #16
 8005cd2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cda:	0c1b      	lsrs	r3, r3, #16
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	029a      	lsls	r2, r3, #10
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cfc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	661a      	str	r2, [r3, #96]	; 0x60
 8005d06:	e00f      	b.n	8005d28 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a58      	ldr	r2, [pc, #352]	; (8005e70 <HAL_SD_GetCardCSD+0x344>)
 8005d0e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d14:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e09d      	b.n	8005e64 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d2c:	0b9b      	lsrs	r3, r3, #14
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d3e:	09db      	lsrs	r3, r3, #7
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d46:	b2da      	uxtb	r2, r3
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d60:	0fdb      	lsrs	r3, r3, #31
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6c:	0f5b      	lsrs	r3, r3, #29
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	f003 0303 	and.w	r3, r3, #3
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d7e:	0e9b      	lsrs	r3, r3, #26
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	f003 0307 	and.w	r3, r3, #7
 8005d86:	b2da      	uxtb	r2, r3
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d90:	0d9b      	lsrs	r3, r3, #22
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	f003 030f 	and.w	r3, r3, #15
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da2:	0d5b      	lsrs	r3, r3, #21
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	b2da      	uxtb	r2, r3
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dbe:	0c1b      	lsrs	r3, r3, #16
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd2:	0bdb      	lsrs	r3, r3, #15
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de6:	0b9b      	lsrs	r3, r3, #14
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dfa:	0b5b      	lsrs	r3, r3, #13
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e0e:	0b1b      	lsrs	r3, r3, #12
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	b2da      	uxtb	r2, r3
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e22:	0a9b      	lsrs	r3, r3, #10
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	f003 0303 	and.w	r3, r3, #3
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e36:	0a1b      	lsrs	r3, r3, #8
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	f003 0303 	and.w	r3, r3, #3
 8005e3e:	b2da      	uxtb	r2, r3
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4a:	085b      	lsrs	r3, r3, #1
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	004005ff 	.word	0x004005ff

08005e74 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005e74:	b5b0      	push	{r4, r5, r7, lr}
 8005e76:	b08e      	sub	sp, #56	; 0x38
 8005e78:	af04      	add	r7, sp, #16
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2203      	movs	r2, #3
 8005e88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e90:	2b03      	cmp	r3, #3
 8005e92:	d02e      	beq.n	8005ef2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e9a:	d106      	bne.n	8005eaa <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	639a      	str	r2, [r3, #56]	; 0x38
 8005ea8:	e029      	b.n	8005efe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eb0:	d10a      	bne.n	8005ec8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f9d2 	bl	800625c <SD_WideBus_Enable>
 8005eb8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ebe:	6a3b      	ldr	r3, [r7, #32]
 8005ec0:	431a      	orrs	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	639a      	str	r2, [r3, #56]	; 0x38
 8005ec6:	e01a      	b.n	8005efe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10a      	bne.n	8005ee4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 fa0f 	bl	80062f2 <SD_WideBus_Disable>
 8005ed4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	431a      	orrs	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	639a      	str	r2, [r3, #56]	; 0x38
 8005ee2:	e00c      	b.n	8005efe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	639a      	str	r2, [r3, #56]	; 0x38
 8005ef0:	e005      	b.n	8005efe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00b      	beq.n	8005f1e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a26      	ldr	r2, [pc, #152]	; (8005fa4 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005f0c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005f1c:	e01f      	b.n	8005f5e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681d      	ldr	r5, [r3, #0]
 8005f44:	466c      	mov	r4, sp
 8005f46:	f107 0314 	add.w	r3, r7, #20
 8005f4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005f4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005f52:	f107 0308 	add.w	r3, r7, #8
 8005f56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f58:	4628      	mov	r0, r5
 8005f5a:	f001 fb8f 	bl	800767c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f66:	4618      	mov	r0, r3
 8005f68:	f001 fc53 	bl	8007812 <SDMMC_CmdBlockLength>
 8005f6c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f6e:	6a3b      	ldr	r3, [r7, #32]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00c      	beq.n	8005f8e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a0a      	ldr	r2, [pc, #40]	; (8005fa4 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005f7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f80:	6a3b      	ldr	r3, [r7, #32]
 8005f82:	431a      	orrs	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005f96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3728      	adds	r7, #40	; 0x28
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	004005ff 	.word	0x004005ff

08005fa8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005fa8:	b5b0      	push	{r4, r5, r7, lr}
 8005faa:	b094      	sub	sp, #80	; 0x50
 8005fac:	af04      	add	r7, sp, #16
 8005fae:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f001 fba6 	bl	800770a <SDIO_GetPowerState>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d102      	bne.n	8005fca <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005fc4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005fc8:	e0b6      	b.n	8006138 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fce:	2b03      	cmp	r3, #3
 8005fd0:	d02f      	beq.n	8006032 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f001 fd25 	bl	8007a26 <SDMMC_CmdSendCID>
 8005fdc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <SD_InitCard+0x40>
    {
      return errorstate;
 8005fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fe6:	e0a7      	b.n	8006138 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2100      	movs	r1, #0
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f001 fbd0 	bl	8007794 <SDIO_GetResponse>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2104      	movs	r1, #4
 8006000:	4618      	mov	r0, r3
 8006002:	f001 fbc7 	bl	8007794 <SDIO_GetResponse>
 8006006:	4602      	mov	r2, r0
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2108      	movs	r1, #8
 8006012:	4618      	mov	r0, r3
 8006014:	f001 fbbe 	bl	8007794 <SDIO_GetResponse>
 8006018:	4602      	mov	r2, r0
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	210c      	movs	r1, #12
 8006024:	4618      	mov	r0, r3
 8006026:	f001 fbb5 	bl	8007794 <SDIO_GetResponse>
 800602a:	4602      	mov	r2, r0
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006036:	2b03      	cmp	r3, #3
 8006038:	d00d      	beq.n	8006056 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f107 020e 	add.w	r2, r7, #14
 8006042:	4611      	mov	r1, r2
 8006044:	4618      	mov	r0, r3
 8006046:	f001 fd2b 	bl	8007aa0 <SDMMC_CmdSetRelAdd>
 800604a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800604c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <SD_InitCard+0xae>
    {
      return errorstate;
 8006052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006054:	e070      	b.n	8006138 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800605a:	2b03      	cmp	r3, #3
 800605c:	d036      	beq.n	80060cc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800605e:	89fb      	ldrh	r3, [r7, #14]
 8006060:	461a      	mov	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800606e:	041b      	lsls	r3, r3, #16
 8006070:	4619      	mov	r1, r3
 8006072:	4610      	mov	r0, r2
 8006074:	f001 fcf5 	bl	8007a62 <SDMMC_CmdSendCSD>
 8006078:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800607a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800607c:	2b00      	cmp	r3, #0
 800607e:	d001      	beq.n	8006084 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006082:	e059      	b.n	8006138 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2100      	movs	r1, #0
 800608a:	4618      	mov	r0, r3
 800608c:	f001 fb82 	bl	8007794 <SDIO_GetResponse>
 8006090:	4602      	mov	r2, r0
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2104      	movs	r1, #4
 800609c:	4618      	mov	r0, r3
 800609e:	f001 fb79 	bl	8007794 <SDIO_GetResponse>
 80060a2:	4602      	mov	r2, r0
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2108      	movs	r1, #8
 80060ae:	4618      	mov	r0, r3
 80060b0:	f001 fb70 	bl	8007794 <SDIO_GetResponse>
 80060b4:	4602      	mov	r2, r0
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	210c      	movs	r1, #12
 80060c0:	4618      	mov	r0, r3
 80060c2:	f001 fb67 	bl	8007794 <SDIO_GetResponse>
 80060c6:	4602      	mov	r2, r0
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2104      	movs	r1, #4
 80060d2:	4618      	mov	r0, r3
 80060d4:	f001 fb5e 	bl	8007794 <SDIO_GetResponse>
 80060d8:	4603      	mov	r3, r0
 80060da:	0d1a      	lsrs	r2, r3, #20
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80060e0:	f107 0310 	add.w	r3, r7, #16
 80060e4:	4619      	mov	r1, r3
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7ff fd20 	bl	8005b2c <HAL_SD_GetCardCSD>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d002      	beq.n	80060f8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80060f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80060f6:	e01f      	b.n	8006138 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6819      	ldr	r1, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006100:	041b      	lsls	r3, r3, #16
 8006102:	461a      	mov	r2, r3
 8006104:	f04f 0300 	mov.w	r3, #0
 8006108:	4608      	mov	r0, r1
 800610a:	f001 fba4 	bl	8007856 <SDMMC_CmdSelDesel>
 800610e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006112:	2b00      	cmp	r3, #0
 8006114:	d001      	beq.n	800611a <SD_InitCard+0x172>
  {
    return errorstate;
 8006116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006118:	e00e      	b.n	8006138 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681d      	ldr	r5, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	466c      	mov	r4, sp
 8006122:	f103 0210 	add.w	r2, r3, #16
 8006126:	ca07      	ldmia	r2, {r0, r1, r2}
 8006128:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800612c:	3304      	adds	r3, #4
 800612e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006130:	4628      	mov	r0, r5
 8006132:	f001 faa3 	bl	800767c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3740      	adds	r7, #64	; 0x40
 800613c:	46bd      	mov	sp, r7
 800613e:	bdb0      	pop	{r4, r5, r7, pc}

08006140 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006148:	2300      	movs	r3, #0
 800614a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800614c:	2300      	movs	r3, #0
 800614e:	617b      	str	r3, [r7, #20]
 8006150:	2300      	movs	r3, #0
 8006152:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4618      	mov	r0, r3
 800615a:	f001 fb9f 	bl	800789c <SDMMC_CmdGoIdleState>
 800615e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d001      	beq.n	800616a <SD_PowerON+0x2a>
  {
    return errorstate;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	e072      	b.n	8006250 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4618      	mov	r0, r3
 8006170:	f001 fbb2 	bl	80078d8 <SDMMC_CmdOperCond>
 8006174:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00d      	beq.n	8006198 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4618      	mov	r0, r3
 8006188:	f001 fb88 	bl	800789c <SDMMC_CmdGoIdleState>
 800618c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d004      	beq.n	800619e <SD_PowerON+0x5e>
    {
      return errorstate;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	e05b      	b.n	8006250 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d137      	bne.n	8006216 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2100      	movs	r1, #0
 80061ac:	4618      	mov	r0, r3
 80061ae:	f001 fbb2 	bl	8007916 <SDMMC_CmdAppCommand>
 80061b2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d02d      	beq.n	8006216 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80061ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80061be:	e047      	b.n	8006250 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2100      	movs	r1, #0
 80061c6:	4618      	mov	r0, r3
 80061c8:	f001 fba5 	bl	8007916 <SDMMC_CmdAppCommand>
 80061cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d001      	beq.n	80061d8 <SD_PowerON+0x98>
    {
      return errorstate;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	e03b      	b.n	8006250 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	491e      	ldr	r1, [pc, #120]	; (8006258 <SD_PowerON+0x118>)
 80061de:	4618      	mov	r0, r3
 80061e0:	f001 fbbb 	bl	800795a <SDMMC_CmdAppOperCommand>
 80061e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d002      	beq.n	80061f2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80061ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80061f0:	e02e      	b.n	8006250 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2100      	movs	r1, #0
 80061f8:	4618      	mov	r0, r3
 80061fa:	f001 facb 	bl	8007794 <SDIO_GetResponse>
 80061fe:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	0fdb      	lsrs	r3, r3, #31
 8006204:	2b01      	cmp	r3, #1
 8006206:	d101      	bne.n	800620c <SD_PowerON+0xcc>
 8006208:	2301      	movs	r3, #1
 800620a:	e000      	b.n	800620e <SD_PowerON+0xce>
 800620c:	2300      	movs	r3, #0
 800620e:	613b      	str	r3, [r7, #16]

    count++;
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	3301      	adds	r3, #1
 8006214:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800621c:	4293      	cmp	r3, r2
 800621e:	d802      	bhi.n	8006226 <SD_PowerON+0xe6>
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d0cc      	beq.n	80061c0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800622c:	4293      	cmp	r3, r2
 800622e:	d902      	bls.n	8006236 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006230:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006234:	e00c      	b.n	8006250 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d003      	beq.n	8006248 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	645a      	str	r2, [r3, #68]	; 0x44
 8006246:	e002      	b.n	800624e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3718      	adds	r7, #24
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	c1100000 	.word	0xc1100000

0800625c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b086      	sub	sp, #24
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006264:	2300      	movs	r3, #0
 8006266:	60fb      	str	r3, [r7, #12]
 8006268:	2300      	movs	r3, #0
 800626a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2100      	movs	r1, #0
 8006272:	4618      	mov	r0, r3
 8006274:	f001 fa8e 	bl	8007794 <SDIO_GetResponse>
 8006278:	4603      	mov	r3, r0
 800627a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800627e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006282:	d102      	bne.n	800628a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006284:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006288:	e02f      	b.n	80062ea <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800628a:	f107 030c 	add.w	r3, r7, #12
 800628e:	4619      	mov	r1, r3
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 f879 	bl	8006388 <SD_FindSCR>
 8006296:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d001      	beq.n	80062a2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	e023      	b.n	80062ea <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d01c      	beq.n	80062e6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062b4:	041b      	lsls	r3, r3, #16
 80062b6:	4619      	mov	r1, r3
 80062b8:	4610      	mov	r0, r2
 80062ba:	f001 fb2c 	bl	8007916 <SDMMC_CmdAppCommand>
 80062be:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d001      	beq.n	80062ca <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	e00f      	b.n	80062ea <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2102      	movs	r1, #2
 80062d0:	4618      	mov	r0, r3
 80062d2:	f001 fb65 	bl	80079a0 <SDMMC_CmdBusWidth>
 80062d6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	e003      	b.n	80062ea <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80062e2:	2300      	movs	r3, #0
 80062e4:	e001      	b.n	80062ea <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80062e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3718      	adds	r7, #24
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b086      	sub	sp, #24
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80062fa:	2300      	movs	r3, #0
 80062fc:	60fb      	str	r3, [r7, #12]
 80062fe:	2300      	movs	r3, #0
 8006300:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2100      	movs	r1, #0
 8006308:	4618      	mov	r0, r3
 800630a:	f001 fa43 	bl	8007794 <SDIO_GetResponse>
 800630e:	4603      	mov	r3, r0
 8006310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006314:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006318:	d102      	bne.n	8006320 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800631a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800631e:	e02f      	b.n	8006380 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006320:	f107 030c 	add.w	r3, r7, #12
 8006324:	4619      	mov	r1, r3
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f82e 	bl	8006388 <SD_FindSCR>
 800632c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d001      	beq.n	8006338 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	e023      	b.n	8006380 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d01c      	beq.n	800637c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800634a:	041b      	lsls	r3, r3, #16
 800634c:	4619      	mov	r1, r3
 800634e:	4610      	mov	r0, r2
 8006350:	f001 fae1 	bl	8007916 <SDMMC_CmdAppCommand>
 8006354:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	e00f      	b.n	8006380 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2100      	movs	r1, #0
 8006366:	4618      	mov	r0, r3
 8006368:	f001 fb1a 	bl	80079a0 <SDMMC_CmdBusWidth>
 800636c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	e003      	b.n	8006380 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006378:	2300      	movs	r3, #0
 800637a:	e001      	b.n	8006380 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800637c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006380:	4618      	mov	r0, r3
 8006382:	3718      	adds	r7, #24
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006388:	b590      	push	{r4, r7, lr}
 800638a:	b08f      	sub	sp, #60	; 0x3c
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006392:	f7fa ff53 	bl	800123c <HAL_GetTick>
 8006396:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006398:	2300      	movs	r3, #0
 800639a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800639c:	2300      	movs	r3, #0
 800639e:	60bb      	str	r3, [r7, #8]
 80063a0:	2300      	movs	r3, #0
 80063a2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2108      	movs	r1, #8
 80063ae:	4618      	mov	r0, r3
 80063b0:	f001 fa2f 	bl	8007812 <SDMMC_CmdBlockLength>
 80063b4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80063b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80063bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063be:	e0b2      	b.n	8006526 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063c8:	041b      	lsls	r3, r3, #16
 80063ca:	4619      	mov	r1, r3
 80063cc:	4610      	mov	r0, r2
 80063ce:	f001 faa2 	bl	8007916 <SDMMC_CmdAppCommand>
 80063d2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80063d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <SD_FindSCR+0x56>
  {
    return errorstate;
 80063da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063dc:	e0a3      	b.n	8006526 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80063de:	f04f 33ff 	mov.w	r3, #4294967295
 80063e2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80063e4:	2308      	movs	r3, #8
 80063e6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80063e8:	2330      	movs	r3, #48	; 0x30
 80063ea:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80063ec:	2302      	movs	r3, #2
 80063ee:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80063f0:	2300      	movs	r3, #0
 80063f2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80063f4:	2301      	movs	r3, #1
 80063f6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f107 0210 	add.w	r2, r7, #16
 8006400:	4611      	mov	r1, r2
 8006402:	4618      	mov	r0, r3
 8006404:	f001 f9d9 	bl	80077ba <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4618      	mov	r0, r3
 800640e:	f001 fae9 	bl	80079e4 <SDMMC_CmdSendSCR>
 8006412:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006416:	2b00      	cmp	r3, #0
 8006418:	d02a      	beq.n	8006470 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800641a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641c:	e083      	b.n	8006526 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00f      	beq.n	800644c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6819      	ldr	r1, [r3, #0]
 8006430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	f107 0208 	add.w	r2, r7, #8
 8006438:	18d4      	adds	r4, r2, r3
 800643a:	4608      	mov	r0, r1
 800643c:	f001 f949 	bl	80076d2 <SDIO_ReadFIFO>
 8006440:	4603      	mov	r3, r0
 8006442:	6023      	str	r3, [r4, #0]
      index++;
 8006444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006446:	3301      	adds	r3, #1
 8006448:	637b      	str	r3, [r7, #52]	; 0x34
 800644a:	e006      	b.n	800645a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006452:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d012      	beq.n	8006480 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800645a:	f7fa feef 	bl	800123c <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006468:	d102      	bne.n	8006470 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800646a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800646e:	e05a      	b.n	8006526 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006476:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800647a:	2b00      	cmp	r3, #0
 800647c:	d0cf      	beq.n	800641e <SD_FindSCR+0x96>
 800647e:	e000      	b.n	8006482 <SD_FindSCR+0xfa>
      break;
 8006480:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006488:	f003 0308 	and.w	r3, r3, #8
 800648c:	2b00      	cmp	r3, #0
 800648e:	d005      	beq.n	800649c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2208      	movs	r2, #8
 8006496:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006498:	2308      	movs	r3, #8
 800649a:	e044      	b.n	8006526 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d005      	beq.n	80064b6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2202      	movs	r2, #2
 80064b0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80064b2:	2302      	movs	r3, #2
 80064b4:	e037      	b.n	8006526 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064bc:	f003 0320 	and.w	r3, r3, #32
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d005      	beq.n	80064d0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2220      	movs	r2, #32
 80064ca:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80064cc:	2320      	movs	r3, #32
 80064ce:	e02a      	b.n	8006526 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f240 523a 	movw	r2, #1338	; 0x53a
 80064d8:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	061a      	lsls	r2, r3, #24
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	021b      	lsls	r3, r3, #8
 80064e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80064e6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	0a1b      	lsrs	r3, r3, #8
 80064ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80064f0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	0e1b      	lsrs	r3, r3, #24
 80064f6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80064f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fa:	601a      	str	r2, [r3, #0]
    scr++;
 80064fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fe:	3304      	adds	r3, #4
 8006500:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	061a      	lsls	r2, r3, #24
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	021b      	lsls	r3, r3, #8
 800650a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800650e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	0a1b      	lsrs	r3, r3, #8
 8006514:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006518:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	0e1b      	lsrs	r3, r3, #24
 800651e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006522:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	373c      	adds	r7, #60	; 0x3c
 800652a:	46bd      	mov	sp, r7
 800652c:	bd90      	pop	{r4, r7, pc}

0800652e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b082      	sub	sp, #8
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e041      	b.n	80065c4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b00      	cmp	r3, #0
 800654a:	d106      	bne.n	800655a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f005 ff7b 	bl	800c450 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2202      	movs	r2, #2
 800655e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	3304      	adds	r3, #4
 800656a:	4619      	mov	r1, r3
 800656c:	4610      	mov	r0, r2
 800656e:	f000 fb47 	bl	8006c00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3708      	adds	r7, #8
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d001      	beq.n	80065e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e044      	b.n	800666e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2202      	movs	r2, #2
 80065e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68da      	ldr	r2, [r3, #12]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f042 0201 	orr.w	r2, r2, #1
 80065fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a1e      	ldr	r2, [pc, #120]	; (800667c <HAL_TIM_Base_Start_IT+0xb0>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d018      	beq.n	8006638 <HAL_TIM_Base_Start_IT+0x6c>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800660e:	d013      	beq.n	8006638 <HAL_TIM_Base_Start_IT+0x6c>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a1a      	ldr	r2, [pc, #104]	; (8006680 <HAL_TIM_Base_Start_IT+0xb4>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d00e      	beq.n	8006638 <HAL_TIM_Base_Start_IT+0x6c>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a19      	ldr	r2, [pc, #100]	; (8006684 <HAL_TIM_Base_Start_IT+0xb8>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d009      	beq.n	8006638 <HAL_TIM_Base_Start_IT+0x6c>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a17      	ldr	r2, [pc, #92]	; (8006688 <HAL_TIM_Base_Start_IT+0xbc>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d004      	beq.n	8006638 <HAL_TIM_Base_Start_IT+0x6c>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a16      	ldr	r2, [pc, #88]	; (800668c <HAL_TIM_Base_Start_IT+0xc0>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d111      	bne.n	800665c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f003 0307 	and.w	r3, r3, #7
 8006642:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2b06      	cmp	r3, #6
 8006648:	d010      	beq.n	800666c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f042 0201 	orr.w	r2, r2, #1
 8006658:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800665a:	e007      	b.n	800666c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f042 0201 	orr.w	r2, r2, #1
 800666a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	40010000 	.word	0x40010000
 8006680:	40000400 	.word	0x40000400
 8006684:	40000800 	.word	0x40000800
 8006688:	40000c00 	.word	0x40000c00
 800668c:	40014000 	.word	0x40014000

08006690 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e041      	b.n	8006726 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d106      	bne.n	80066bc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f839 	bl	800672e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2202      	movs	r2, #2
 80066c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	3304      	adds	r3, #4
 80066cc:	4619      	mov	r1, r3
 80066ce:	4610      	mov	r0, r2
 80066d0:	f000 fa96 	bl	8006c00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3708      	adds	r7, #8
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800672e:	b480      	push	{r7}
 8006730:	b083      	sub	sp, #12
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006736:	bf00      	nop
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b082      	sub	sp, #8
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	f003 0302 	and.w	r3, r3, #2
 8006754:	2b02      	cmp	r3, #2
 8006756:	d122      	bne.n	800679e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b02      	cmp	r3, #2
 8006764:	d11b      	bne.n	800679e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f06f 0202 	mvn.w	r2, #2
 800676e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	f003 0303 	and.w	r3, r3, #3
 8006780:	2b00      	cmp	r3, #0
 8006782:	d003      	beq.n	800678c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fa1c 	bl	8006bc2 <HAL_TIM_IC_CaptureCallback>
 800678a:	e005      	b.n	8006798 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 fa0e 	bl	8006bae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 fa1f 	bl	8006bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	f003 0304 	and.w	r3, r3, #4
 80067a8:	2b04      	cmp	r3, #4
 80067aa:	d122      	bne.n	80067f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	f003 0304 	and.w	r3, r3, #4
 80067b6:	2b04      	cmp	r3, #4
 80067b8:	d11b      	bne.n	80067f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f06f 0204 	mvn.w	r2, #4
 80067c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2202      	movs	r2, #2
 80067c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d003      	beq.n	80067e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f9f2 	bl	8006bc2 <HAL_TIM_IC_CaptureCallback>
 80067de:	e005      	b.n	80067ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 f9e4 	bl	8006bae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f9f5 	bl	8006bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	f003 0308 	and.w	r3, r3, #8
 80067fc:	2b08      	cmp	r3, #8
 80067fe:	d122      	bne.n	8006846 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	f003 0308 	and.w	r3, r3, #8
 800680a:	2b08      	cmp	r3, #8
 800680c:	d11b      	bne.n	8006846 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f06f 0208 	mvn.w	r2, #8
 8006816:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2204      	movs	r2, #4
 800681c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	69db      	ldr	r3, [r3, #28]
 8006824:	f003 0303 	and.w	r3, r3, #3
 8006828:	2b00      	cmp	r3, #0
 800682a:	d003      	beq.n	8006834 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 f9c8 	bl	8006bc2 <HAL_TIM_IC_CaptureCallback>
 8006832:	e005      	b.n	8006840 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 f9ba 	bl	8006bae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f9cb 	bl	8006bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	f003 0310 	and.w	r3, r3, #16
 8006850:	2b10      	cmp	r3, #16
 8006852:	d122      	bne.n	800689a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	f003 0310 	and.w	r3, r3, #16
 800685e:	2b10      	cmp	r3, #16
 8006860:	d11b      	bne.n	800689a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f06f 0210 	mvn.w	r2, #16
 800686a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2208      	movs	r2, #8
 8006870:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800687c:	2b00      	cmp	r3, #0
 800687e:	d003      	beq.n	8006888 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 f99e 	bl	8006bc2 <HAL_TIM_IC_CaptureCallback>
 8006886:	e005      	b.n	8006894 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f990 	bl	8006bae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f9a1 	bl	8006bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d10e      	bne.n	80068c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f003 0301 	and.w	r3, r3, #1
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d107      	bne.n	80068c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f06f 0201 	mvn.w	r2, #1
 80068be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 f96a 	bl	8006b9a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068d0:	2b80      	cmp	r3, #128	; 0x80
 80068d2:	d10e      	bne.n	80068f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068de:	2b80      	cmp	r3, #128	; 0x80
 80068e0:	d107      	bne.n	80068f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80068ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fca5 	bl	800723c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068fc:	2b40      	cmp	r3, #64	; 0x40
 80068fe:	d10e      	bne.n	800691e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690a:	2b40      	cmp	r3, #64	; 0x40
 800690c:	d107      	bne.n	800691e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006916:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 f966 	bl	8006bea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	f003 0320 	and.w	r3, r3, #32
 8006928:	2b20      	cmp	r3, #32
 800692a:	d10e      	bne.n	800694a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	f003 0320 	and.w	r3, r3, #32
 8006936:	2b20      	cmp	r3, #32
 8006938:	d107      	bne.n	800694a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f06f 0220 	mvn.w	r2, #32
 8006942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 fc6f 	bl	8007228 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800694a:	bf00      	nop
 800694c:	3708      	adds	r7, #8
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
	...

08006954 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006960:	2300      	movs	r3, #0
 8006962:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800696a:	2b01      	cmp	r3, #1
 800696c:	d101      	bne.n	8006972 <HAL_TIM_OC_ConfigChannel+0x1e>
 800696e:	2302      	movs	r3, #2
 8006970:	e048      	b.n	8006a04 <HAL_TIM_OC_ConfigChannel+0xb0>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2b0c      	cmp	r3, #12
 800697e:	d839      	bhi.n	80069f4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8006980:	a201      	add	r2, pc, #4	; (adr r2, 8006988 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006986:	bf00      	nop
 8006988:	080069bd 	.word	0x080069bd
 800698c:	080069f5 	.word	0x080069f5
 8006990:	080069f5 	.word	0x080069f5
 8006994:	080069f5 	.word	0x080069f5
 8006998:	080069cb 	.word	0x080069cb
 800699c:	080069f5 	.word	0x080069f5
 80069a0:	080069f5 	.word	0x080069f5
 80069a4:	080069f5 	.word	0x080069f5
 80069a8:	080069d9 	.word	0x080069d9
 80069ac:	080069f5 	.word	0x080069f5
 80069b0:	080069f5 	.word	0x080069f5
 80069b4:	080069f5 	.word	0x080069f5
 80069b8:	080069e7 	.word	0x080069e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68b9      	ldr	r1, [r7, #8]
 80069c2:	4618      	mov	r0, r3
 80069c4:	f000 f99c 	bl	8006d00 <TIM_OC1_SetConfig>
      break;
 80069c8:	e017      	b.n	80069fa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68b9      	ldr	r1, [r7, #8]
 80069d0:	4618      	mov	r0, r3
 80069d2:	f000 f9fb 	bl	8006dcc <TIM_OC2_SetConfig>
      break;
 80069d6:	e010      	b.n	80069fa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68b9      	ldr	r1, [r7, #8]
 80069de:	4618      	mov	r0, r3
 80069e0:	f000 fa60 	bl	8006ea4 <TIM_OC3_SetConfig>
      break;
 80069e4:	e009      	b.n	80069fa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68b9      	ldr	r1, [r7, #8]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f000 fac3 	bl	8006f78 <TIM_OC4_SetConfig>
      break;
 80069f2:	e002      	b.n	80069fa <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	75fb      	strb	r3, [r7, #23]
      break;
 80069f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3718      	adds	r7, #24
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a16:	2300      	movs	r3, #0
 8006a18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d101      	bne.n	8006a28 <HAL_TIM_ConfigClockSource+0x1c>
 8006a24:	2302      	movs	r3, #2
 8006a26:	e0b4      	b.n	8006b92 <HAL_TIM_ConfigClockSource+0x186>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2202      	movs	r2, #2
 8006a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68ba      	ldr	r2, [r7, #8]
 8006a56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a60:	d03e      	beq.n	8006ae0 <HAL_TIM_ConfigClockSource+0xd4>
 8006a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a66:	f200 8087 	bhi.w	8006b78 <HAL_TIM_ConfigClockSource+0x16c>
 8006a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a6e:	f000 8086 	beq.w	8006b7e <HAL_TIM_ConfigClockSource+0x172>
 8006a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a76:	d87f      	bhi.n	8006b78 <HAL_TIM_ConfigClockSource+0x16c>
 8006a78:	2b70      	cmp	r3, #112	; 0x70
 8006a7a:	d01a      	beq.n	8006ab2 <HAL_TIM_ConfigClockSource+0xa6>
 8006a7c:	2b70      	cmp	r3, #112	; 0x70
 8006a7e:	d87b      	bhi.n	8006b78 <HAL_TIM_ConfigClockSource+0x16c>
 8006a80:	2b60      	cmp	r3, #96	; 0x60
 8006a82:	d050      	beq.n	8006b26 <HAL_TIM_ConfigClockSource+0x11a>
 8006a84:	2b60      	cmp	r3, #96	; 0x60
 8006a86:	d877      	bhi.n	8006b78 <HAL_TIM_ConfigClockSource+0x16c>
 8006a88:	2b50      	cmp	r3, #80	; 0x50
 8006a8a:	d03c      	beq.n	8006b06 <HAL_TIM_ConfigClockSource+0xfa>
 8006a8c:	2b50      	cmp	r3, #80	; 0x50
 8006a8e:	d873      	bhi.n	8006b78 <HAL_TIM_ConfigClockSource+0x16c>
 8006a90:	2b40      	cmp	r3, #64	; 0x40
 8006a92:	d058      	beq.n	8006b46 <HAL_TIM_ConfigClockSource+0x13a>
 8006a94:	2b40      	cmp	r3, #64	; 0x40
 8006a96:	d86f      	bhi.n	8006b78 <HAL_TIM_ConfigClockSource+0x16c>
 8006a98:	2b30      	cmp	r3, #48	; 0x30
 8006a9a:	d064      	beq.n	8006b66 <HAL_TIM_ConfigClockSource+0x15a>
 8006a9c:	2b30      	cmp	r3, #48	; 0x30
 8006a9e:	d86b      	bhi.n	8006b78 <HAL_TIM_ConfigClockSource+0x16c>
 8006aa0:	2b20      	cmp	r3, #32
 8006aa2:	d060      	beq.n	8006b66 <HAL_TIM_ConfigClockSource+0x15a>
 8006aa4:	2b20      	cmp	r3, #32
 8006aa6:	d867      	bhi.n	8006b78 <HAL_TIM_ConfigClockSource+0x16c>
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d05c      	beq.n	8006b66 <HAL_TIM_ConfigClockSource+0x15a>
 8006aac:	2b10      	cmp	r3, #16
 8006aae:	d05a      	beq.n	8006b66 <HAL_TIM_ConfigClockSource+0x15a>
 8006ab0:	e062      	b.n	8006b78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6818      	ldr	r0, [r3, #0]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	6899      	ldr	r1, [r3, #8]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	685a      	ldr	r2, [r3, #4]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	f000 fb23 	bl	800710c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ad4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	609a      	str	r2, [r3, #8]
      break;
 8006ade:	e04f      	b.n	8006b80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6818      	ldr	r0, [r3, #0]
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	6899      	ldr	r1, [r3, #8]
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	f000 fb0c 	bl	800710c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	689a      	ldr	r2, [r3, #8]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b02:	609a      	str	r2, [r3, #8]
      break;
 8006b04:	e03c      	b.n	8006b80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6818      	ldr	r0, [r3, #0]
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	6859      	ldr	r1, [r3, #4]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	461a      	mov	r2, r3
 8006b14:	f000 fa80 	bl	8007018 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2150      	movs	r1, #80	; 0x50
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f000 fad9 	bl	80070d6 <TIM_ITRx_SetConfig>
      break;
 8006b24:	e02c      	b.n	8006b80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6818      	ldr	r0, [r3, #0]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	6859      	ldr	r1, [r3, #4]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	461a      	mov	r2, r3
 8006b34:	f000 fa9f 	bl	8007076 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2160      	movs	r1, #96	; 0x60
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f000 fac9 	bl	80070d6 <TIM_ITRx_SetConfig>
      break;
 8006b44:	e01c      	b.n	8006b80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6818      	ldr	r0, [r3, #0]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	6859      	ldr	r1, [r3, #4]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	461a      	mov	r2, r3
 8006b54:	f000 fa60 	bl	8007018 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2140      	movs	r1, #64	; 0x40
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f000 fab9 	bl	80070d6 <TIM_ITRx_SetConfig>
      break;
 8006b64:	e00c      	b.n	8006b80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4619      	mov	r1, r3
 8006b70:	4610      	mov	r0, r2
 8006b72:	f000 fab0 	bl	80070d6 <TIM_ITRx_SetConfig>
      break;
 8006b76:	e003      	b.n	8006b80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b7c:	e000      	b.n	8006b80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006b7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b083      	sub	sp, #12
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006ba2:	bf00      	nop
 8006ba4:	370c      	adds	r7, #12
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b083      	sub	sp, #12
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006bb6:	bf00      	nop
 8006bb8:	370c      	adds	r7, #12
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b083      	sub	sp, #12
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006bca:	bf00      	nop
 8006bcc:	370c      	adds	r7, #12
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b083      	sub	sp, #12
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bde:	bf00      	nop
 8006be0:	370c      	adds	r7, #12
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr

08006bea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bea:	b480      	push	{r7}
 8006bec:	b083      	sub	sp, #12
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bf2:	bf00      	nop
 8006bf4:	370c      	adds	r7, #12
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
	...

08006c00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a34      	ldr	r2, [pc, #208]	; (8006ce4 <TIM_Base_SetConfig+0xe4>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d00f      	beq.n	8006c38 <TIM_Base_SetConfig+0x38>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c1e:	d00b      	beq.n	8006c38 <TIM_Base_SetConfig+0x38>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a31      	ldr	r2, [pc, #196]	; (8006ce8 <TIM_Base_SetConfig+0xe8>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d007      	beq.n	8006c38 <TIM_Base_SetConfig+0x38>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a30      	ldr	r2, [pc, #192]	; (8006cec <TIM_Base_SetConfig+0xec>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d003      	beq.n	8006c38 <TIM_Base_SetConfig+0x38>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a2f      	ldr	r2, [pc, #188]	; (8006cf0 <TIM_Base_SetConfig+0xf0>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d108      	bne.n	8006c4a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a25      	ldr	r2, [pc, #148]	; (8006ce4 <TIM_Base_SetConfig+0xe4>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d01b      	beq.n	8006c8a <TIM_Base_SetConfig+0x8a>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c58:	d017      	beq.n	8006c8a <TIM_Base_SetConfig+0x8a>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a22      	ldr	r2, [pc, #136]	; (8006ce8 <TIM_Base_SetConfig+0xe8>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d013      	beq.n	8006c8a <TIM_Base_SetConfig+0x8a>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a21      	ldr	r2, [pc, #132]	; (8006cec <TIM_Base_SetConfig+0xec>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d00f      	beq.n	8006c8a <TIM_Base_SetConfig+0x8a>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a20      	ldr	r2, [pc, #128]	; (8006cf0 <TIM_Base_SetConfig+0xf0>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d00b      	beq.n	8006c8a <TIM_Base_SetConfig+0x8a>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a1f      	ldr	r2, [pc, #124]	; (8006cf4 <TIM_Base_SetConfig+0xf4>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d007      	beq.n	8006c8a <TIM_Base_SetConfig+0x8a>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a1e      	ldr	r2, [pc, #120]	; (8006cf8 <TIM_Base_SetConfig+0xf8>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d003      	beq.n	8006c8a <TIM_Base_SetConfig+0x8a>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a1d      	ldr	r2, [pc, #116]	; (8006cfc <TIM_Base_SetConfig+0xfc>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d108      	bne.n	8006c9c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	689a      	ldr	r2, [r3, #8]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a08      	ldr	r2, [pc, #32]	; (8006ce4 <TIM_Base_SetConfig+0xe4>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d103      	bne.n	8006cd0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	691a      	ldr	r2, [r3, #16]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	615a      	str	r2, [r3, #20]
}
 8006cd6:	bf00      	nop
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	40010000 	.word	0x40010000
 8006ce8:	40000400 	.word	0x40000400
 8006cec:	40000800 	.word	0x40000800
 8006cf0:	40000c00 	.word	0x40000c00
 8006cf4:	40014000 	.word	0x40014000
 8006cf8:	40014400 	.word	0x40014400
 8006cfc:	40014800 	.word	0x40014800

08006d00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b087      	sub	sp, #28
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	f023 0201 	bic.w	r2, r3, #1
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f023 0303 	bic.w	r3, r3, #3
 8006d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	f023 0302 	bic.w	r3, r3, #2
 8006d48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	697a      	ldr	r2, [r7, #20]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a1c      	ldr	r2, [pc, #112]	; (8006dc8 <TIM_OC1_SetConfig+0xc8>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d10c      	bne.n	8006d76 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	f023 0308 	bic.w	r3, r3, #8
 8006d62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	f023 0304 	bic.w	r3, r3, #4
 8006d74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a13      	ldr	r2, [pc, #76]	; (8006dc8 <TIM_OC1_SetConfig+0xc8>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d111      	bne.n	8006da2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	621a      	str	r2, [r3, #32]
}
 8006dbc:	bf00      	nop
 8006dbe:	371c      	adds	r7, #28
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	40010000 	.word	0x40010000

08006dcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b087      	sub	sp, #28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	f023 0210 	bic.w	r2, r3, #16
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	021b      	lsls	r3, r3, #8
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	f023 0320 	bic.w	r3, r3, #32
 8006e16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	011b      	lsls	r3, r3, #4
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a1e      	ldr	r2, [pc, #120]	; (8006ea0 <TIM_OC2_SetConfig+0xd4>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d10d      	bne.n	8006e48 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	011b      	lsls	r3, r3, #4
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a15      	ldr	r2, [pc, #84]	; (8006ea0 <TIM_OC2_SetConfig+0xd4>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d113      	bne.n	8006e78 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	693a      	ldr	r2, [r7, #16]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	685a      	ldr	r2, [r3, #4]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	697a      	ldr	r2, [r7, #20]
 8006e90:	621a      	str	r2, [r3, #32]
}
 8006e92:	bf00      	nop
 8006e94:	371c      	adds	r7, #28
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	40010000 	.word	0x40010000

08006ea4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b087      	sub	sp, #28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	69db      	ldr	r3, [r3, #28]
 8006eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f023 0303 	bic.w	r3, r3, #3
 8006eda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006eec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	021b      	lsls	r3, r3, #8
 8006ef4:	697a      	ldr	r2, [r7, #20]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a1d      	ldr	r2, [pc, #116]	; (8006f74 <TIM_OC3_SetConfig+0xd0>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d10d      	bne.n	8006f1e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	021b      	lsls	r3, r3, #8
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a14      	ldr	r2, [pc, #80]	; (8006f74 <TIM_OC3_SetConfig+0xd0>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d113      	bne.n	8006f4e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	011b      	lsls	r3, r3, #4
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	011b      	lsls	r3, r3, #4
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	685a      	ldr	r2, [r3, #4]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	621a      	str	r2, [r3, #32]
}
 8006f68:	bf00      	nop
 8006f6a:	371c      	adds	r7, #28
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr
 8006f74:	40010000 	.word	0x40010000

08006f78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b087      	sub	sp, #28
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	021b      	lsls	r3, r3, #8
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	031b      	lsls	r3, r3, #12
 8006fca:	693a      	ldr	r2, [r7, #16]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a10      	ldr	r2, [pc, #64]	; (8007014 <TIM_OC4_SetConfig+0x9c>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d109      	bne.n	8006fec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	019b      	lsls	r3, r3, #6
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	621a      	str	r2, [r3, #32]
}
 8007006:	bf00      	nop
 8007008:	371c      	adds	r7, #28
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	40010000 	.word	0x40010000

08007018 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007018:	b480      	push	{r7}
 800701a:	b087      	sub	sp, #28
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6a1b      	ldr	r3, [r3, #32]
 8007028:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	f023 0201 	bic.w	r2, r3, #1
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007042:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	011b      	lsls	r3, r3, #4
 8007048:	693a      	ldr	r2, [r7, #16]
 800704a:	4313      	orrs	r3, r2
 800704c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	f023 030a 	bic.w	r3, r3, #10
 8007054:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	4313      	orrs	r3, r2
 800705c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	693a      	ldr	r2, [r7, #16]
 8007062:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	621a      	str	r2, [r3, #32]
}
 800706a:	bf00      	nop
 800706c:	371c      	adds	r7, #28
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007076:	b480      	push	{r7}
 8007078:	b087      	sub	sp, #28
 800707a:	af00      	add	r7, sp, #0
 800707c:	60f8      	str	r0, [r7, #12]
 800707e:	60b9      	str	r1, [r7, #8]
 8007080:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	f023 0210 	bic.w	r2, r3, #16
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6a1b      	ldr	r3, [r3, #32]
 8007098:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	031b      	lsls	r3, r3, #12
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80070b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	011b      	lsls	r3, r3, #4
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	693a      	ldr	r2, [r7, #16]
 80070c8:	621a      	str	r2, [r3, #32]
}
 80070ca:	bf00      	nop
 80070cc:	371c      	adds	r7, #28
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b085      	sub	sp, #20
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
 80070de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	f043 0307 	orr.w	r3, r3, #7
 80070f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	609a      	str	r2, [r3, #8]
}
 8007100:	bf00      	nop
 8007102:	3714      	adds	r7, #20
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800710c:	b480      	push	{r7}
 800710e:	b087      	sub	sp, #28
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	607a      	str	r2, [r7, #4]
 8007118:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007126:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	021a      	lsls	r2, r3, #8
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	431a      	orrs	r2, r3
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	4313      	orrs	r3, r2
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	4313      	orrs	r3, r2
 8007138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	609a      	str	r2, [r3, #8]
}
 8007140:	bf00      	nop
 8007142:	371c      	adds	r7, #28
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800715c:	2b01      	cmp	r3, #1
 800715e:	d101      	bne.n	8007164 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007160:	2302      	movs	r3, #2
 8007162:	e050      	b.n	8007206 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2202      	movs	r2, #2
 8007170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800718a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	4313      	orrs	r3, r2
 8007194:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a1c      	ldr	r2, [pc, #112]	; (8007214 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d018      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071b0:	d013      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a18      	ldr	r2, [pc, #96]	; (8007218 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d00e      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a16      	ldr	r2, [pc, #88]	; (800721c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d009      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a15      	ldr	r2, [pc, #84]	; (8007220 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d004      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a13      	ldr	r2, [pc, #76]	; (8007224 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d10c      	bne.n	80071f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3714      	adds	r7, #20
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	40010000 	.word	0x40010000
 8007218:	40000400 	.word	0x40000400
 800721c:	40000800 	.word	0x40000800
 8007220:	40000c00 	.word	0x40000c00
 8007224:	40014000 	.word	0x40014000

08007228 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d101      	bne.n	8007262 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e03f      	b.n	80072e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b00      	cmp	r3, #0
 800726c:	d106      	bne.n	800727c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f005 f910 	bl	800c49c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2224      	movs	r2, #36	; 0x24
 8007280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68da      	ldr	r2, [r3, #12]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007292:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 f829 	bl	80072ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	691a      	ldr	r2, [r3, #16]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	695a      	ldr	r2, [r3, #20]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68da      	ldr	r2, [r3, #12]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2220      	movs	r2, #32
 80072d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2220      	movs	r2, #32
 80072dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3708      	adds	r7, #8
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
	...

080072ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f0:	b09f      	sub	sp, #124	; 0x7c
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007302:	68d9      	ldr	r1, [r3, #12]
 8007304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	ea40 0301 	orr.w	r3, r0, r1
 800730c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800730e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007310:	689a      	ldr	r2, [r3, #8]
 8007312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	431a      	orrs	r2, r3
 8007318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800731a:	695b      	ldr	r3, [r3, #20]
 800731c:	431a      	orrs	r2, r3
 800731e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007320:	69db      	ldr	r3, [r3, #28]
 8007322:	4313      	orrs	r3, r2
 8007324:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007330:	f021 010c 	bic.w	r1, r1, #12
 8007334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800733a:	430b      	orrs	r3, r1
 800733c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800733e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	695b      	ldr	r3, [r3, #20]
 8007344:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800734a:	6999      	ldr	r1, [r3, #24]
 800734c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	ea40 0301 	orr.w	r3, r0, r1
 8007354:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	4bc5      	ldr	r3, [pc, #788]	; (8007670 <UART_SetConfig+0x384>)
 800735c:	429a      	cmp	r2, r3
 800735e:	d004      	beq.n	800736a <UART_SetConfig+0x7e>
 8007360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	4bc3      	ldr	r3, [pc, #780]	; (8007674 <UART_SetConfig+0x388>)
 8007366:	429a      	cmp	r2, r3
 8007368:	d103      	bne.n	8007372 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800736a:	f7fe f92b 	bl	80055c4 <HAL_RCC_GetPCLK2Freq>
 800736e:	6778      	str	r0, [r7, #116]	; 0x74
 8007370:	e002      	b.n	8007378 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007372:	f7fe f913 	bl	800559c <HAL_RCC_GetPCLK1Freq>
 8007376:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800737a:	69db      	ldr	r3, [r3, #28]
 800737c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007380:	f040 80b6 	bne.w	80074f0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007386:	461c      	mov	r4, r3
 8007388:	f04f 0500 	mov.w	r5, #0
 800738c:	4622      	mov	r2, r4
 800738e:	462b      	mov	r3, r5
 8007390:	1891      	adds	r1, r2, r2
 8007392:	6439      	str	r1, [r7, #64]	; 0x40
 8007394:	415b      	adcs	r3, r3
 8007396:	647b      	str	r3, [r7, #68]	; 0x44
 8007398:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800739c:	1912      	adds	r2, r2, r4
 800739e:	eb45 0303 	adc.w	r3, r5, r3
 80073a2:	f04f 0000 	mov.w	r0, #0
 80073a6:	f04f 0100 	mov.w	r1, #0
 80073aa:	00d9      	lsls	r1, r3, #3
 80073ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80073b0:	00d0      	lsls	r0, r2, #3
 80073b2:	4602      	mov	r2, r0
 80073b4:	460b      	mov	r3, r1
 80073b6:	1911      	adds	r1, r2, r4
 80073b8:	6639      	str	r1, [r7, #96]	; 0x60
 80073ba:	416b      	adcs	r3, r5
 80073bc:	667b      	str	r3, [r7, #100]	; 0x64
 80073be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	461a      	mov	r2, r3
 80073c4:	f04f 0300 	mov.w	r3, #0
 80073c8:	1891      	adds	r1, r2, r2
 80073ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80073cc:	415b      	adcs	r3, r3
 80073ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80073d4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80073d8:	f7f9 fbee 	bl	8000bb8 <__aeabi_uldivmod>
 80073dc:	4602      	mov	r2, r0
 80073de:	460b      	mov	r3, r1
 80073e0:	4ba5      	ldr	r3, [pc, #660]	; (8007678 <UART_SetConfig+0x38c>)
 80073e2:	fba3 2302 	umull	r2, r3, r3, r2
 80073e6:	095b      	lsrs	r3, r3, #5
 80073e8:	011e      	lsls	r6, r3, #4
 80073ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073ec:	461c      	mov	r4, r3
 80073ee:	f04f 0500 	mov.w	r5, #0
 80073f2:	4622      	mov	r2, r4
 80073f4:	462b      	mov	r3, r5
 80073f6:	1891      	adds	r1, r2, r2
 80073f8:	6339      	str	r1, [r7, #48]	; 0x30
 80073fa:	415b      	adcs	r3, r3
 80073fc:	637b      	str	r3, [r7, #52]	; 0x34
 80073fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007402:	1912      	adds	r2, r2, r4
 8007404:	eb45 0303 	adc.w	r3, r5, r3
 8007408:	f04f 0000 	mov.w	r0, #0
 800740c:	f04f 0100 	mov.w	r1, #0
 8007410:	00d9      	lsls	r1, r3, #3
 8007412:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007416:	00d0      	lsls	r0, r2, #3
 8007418:	4602      	mov	r2, r0
 800741a:	460b      	mov	r3, r1
 800741c:	1911      	adds	r1, r2, r4
 800741e:	65b9      	str	r1, [r7, #88]	; 0x58
 8007420:	416b      	adcs	r3, r5
 8007422:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	461a      	mov	r2, r3
 800742a:	f04f 0300 	mov.w	r3, #0
 800742e:	1891      	adds	r1, r2, r2
 8007430:	62b9      	str	r1, [r7, #40]	; 0x28
 8007432:	415b      	adcs	r3, r3
 8007434:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007436:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800743a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800743e:	f7f9 fbbb 	bl	8000bb8 <__aeabi_uldivmod>
 8007442:	4602      	mov	r2, r0
 8007444:	460b      	mov	r3, r1
 8007446:	4b8c      	ldr	r3, [pc, #560]	; (8007678 <UART_SetConfig+0x38c>)
 8007448:	fba3 1302 	umull	r1, r3, r3, r2
 800744c:	095b      	lsrs	r3, r3, #5
 800744e:	2164      	movs	r1, #100	; 0x64
 8007450:	fb01 f303 	mul.w	r3, r1, r3
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	00db      	lsls	r3, r3, #3
 8007458:	3332      	adds	r3, #50	; 0x32
 800745a:	4a87      	ldr	r2, [pc, #540]	; (8007678 <UART_SetConfig+0x38c>)
 800745c:	fba2 2303 	umull	r2, r3, r2, r3
 8007460:	095b      	lsrs	r3, r3, #5
 8007462:	005b      	lsls	r3, r3, #1
 8007464:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007468:	441e      	add	r6, r3
 800746a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800746c:	4618      	mov	r0, r3
 800746e:	f04f 0100 	mov.w	r1, #0
 8007472:	4602      	mov	r2, r0
 8007474:	460b      	mov	r3, r1
 8007476:	1894      	adds	r4, r2, r2
 8007478:	623c      	str	r4, [r7, #32]
 800747a:	415b      	adcs	r3, r3
 800747c:	627b      	str	r3, [r7, #36]	; 0x24
 800747e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007482:	1812      	adds	r2, r2, r0
 8007484:	eb41 0303 	adc.w	r3, r1, r3
 8007488:	f04f 0400 	mov.w	r4, #0
 800748c:	f04f 0500 	mov.w	r5, #0
 8007490:	00dd      	lsls	r5, r3, #3
 8007492:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007496:	00d4      	lsls	r4, r2, #3
 8007498:	4622      	mov	r2, r4
 800749a:	462b      	mov	r3, r5
 800749c:	1814      	adds	r4, r2, r0
 800749e:	653c      	str	r4, [r7, #80]	; 0x50
 80074a0:	414b      	adcs	r3, r1
 80074a2:	657b      	str	r3, [r7, #84]	; 0x54
 80074a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	461a      	mov	r2, r3
 80074aa:	f04f 0300 	mov.w	r3, #0
 80074ae:	1891      	adds	r1, r2, r2
 80074b0:	61b9      	str	r1, [r7, #24]
 80074b2:	415b      	adcs	r3, r3
 80074b4:	61fb      	str	r3, [r7, #28]
 80074b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074ba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80074be:	f7f9 fb7b 	bl	8000bb8 <__aeabi_uldivmod>
 80074c2:	4602      	mov	r2, r0
 80074c4:	460b      	mov	r3, r1
 80074c6:	4b6c      	ldr	r3, [pc, #432]	; (8007678 <UART_SetConfig+0x38c>)
 80074c8:	fba3 1302 	umull	r1, r3, r3, r2
 80074cc:	095b      	lsrs	r3, r3, #5
 80074ce:	2164      	movs	r1, #100	; 0x64
 80074d0:	fb01 f303 	mul.w	r3, r1, r3
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	00db      	lsls	r3, r3, #3
 80074d8:	3332      	adds	r3, #50	; 0x32
 80074da:	4a67      	ldr	r2, [pc, #412]	; (8007678 <UART_SetConfig+0x38c>)
 80074dc:	fba2 2303 	umull	r2, r3, r2, r3
 80074e0:	095b      	lsrs	r3, r3, #5
 80074e2:	f003 0207 	and.w	r2, r3, #7
 80074e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4432      	add	r2, r6
 80074ec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80074ee:	e0b9      	b.n	8007664 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074f2:	461c      	mov	r4, r3
 80074f4:	f04f 0500 	mov.w	r5, #0
 80074f8:	4622      	mov	r2, r4
 80074fa:	462b      	mov	r3, r5
 80074fc:	1891      	adds	r1, r2, r2
 80074fe:	6139      	str	r1, [r7, #16]
 8007500:	415b      	adcs	r3, r3
 8007502:	617b      	str	r3, [r7, #20]
 8007504:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007508:	1912      	adds	r2, r2, r4
 800750a:	eb45 0303 	adc.w	r3, r5, r3
 800750e:	f04f 0000 	mov.w	r0, #0
 8007512:	f04f 0100 	mov.w	r1, #0
 8007516:	00d9      	lsls	r1, r3, #3
 8007518:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800751c:	00d0      	lsls	r0, r2, #3
 800751e:	4602      	mov	r2, r0
 8007520:	460b      	mov	r3, r1
 8007522:	eb12 0804 	adds.w	r8, r2, r4
 8007526:	eb43 0905 	adc.w	r9, r3, r5
 800752a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	4618      	mov	r0, r3
 8007530:	f04f 0100 	mov.w	r1, #0
 8007534:	f04f 0200 	mov.w	r2, #0
 8007538:	f04f 0300 	mov.w	r3, #0
 800753c:	008b      	lsls	r3, r1, #2
 800753e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007542:	0082      	lsls	r2, r0, #2
 8007544:	4640      	mov	r0, r8
 8007546:	4649      	mov	r1, r9
 8007548:	f7f9 fb36 	bl	8000bb8 <__aeabi_uldivmod>
 800754c:	4602      	mov	r2, r0
 800754e:	460b      	mov	r3, r1
 8007550:	4b49      	ldr	r3, [pc, #292]	; (8007678 <UART_SetConfig+0x38c>)
 8007552:	fba3 2302 	umull	r2, r3, r3, r2
 8007556:	095b      	lsrs	r3, r3, #5
 8007558:	011e      	lsls	r6, r3, #4
 800755a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800755c:	4618      	mov	r0, r3
 800755e:	f04f 0100 	mov.w	r1, #0
 8007562:	4602      	mov	r2, r0
 8007564:	460b      	mov	r3, r1
 8007566:	1894      	adds	r4, r2, r2
 8007568:	60bc      	str	r4, [r7, #8]
 800756a:	415b      	adcs	r3, r3
 800756c:	60fb      	str	r3, [r7, #12]
 800756e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007572:	1812      	adds	r2, r2, r0
 8007574:	eb41 0303 	adc.w	r3, r1, r3
 8007578:	f04f 0400 	mov.w	r4, #0
 800757c:	f04f 0500 	mov.w	r5, #0
 8007580:	00dd      	lsls	r5, r3, #3
 8007582:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007586:	00d4      	lsls	r4, r2, #3
 8007588:	4622      	mov	r2, r4
 800758a:	462b      	mov	r3, r5
 800758c:	1814      	adds	r4, r2, r0
 800758e:	64bc      	str	r4, [r7, #72]	; 0x48
 8007590:	414b      	adcs	r3, r1
 8007592:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	4618      	mov	r0, r3
 800759a:	f04f 0100 	mov.w	r1, #0
 800759e:	f04f 0200 	mov.w	r2, #0
 80075a2:	f04f 0300 	mov.w	r3, #0
 80075a6:	008b      	lsls	r3, r1, #2
 80075a8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80075ac:	0082      	lsls	r2, r0, #2
 80075ae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80075b2:	f7f9 fb01 	bl	8000bb8 <__aeabi_uldivmod>
 80075b6:	4602      	mov	r2, r0
 80075b8:	460b      	mov	r3, r1
 80075ba:	4b2f      	ldr	r3, [pc, #188]	; (8007678 <UART_SetConfig+0x38c>)
 80075bc:	fba3 1302 	umull	r1, r3, r3, r2
 80075c0:	095b      	lsrs	r3, r3, #5
 80075c2:	2164      	movs	r1, #100	; 0x64
 80075c4:	fb01 f303 	mul.w	r3, r1, r3
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	011b      	lsls	r3, r3, #4
 80075cc:	3332      	adds	r3, #50	; 0x32
 80075ce:	4a2a      	ldr	r2, [pc, #168]	; (8007678 <UART_SetConfig+0x38c>)
 80075d0:	fba2 2303 	umull	r2, r3, r2, r3
 80075d4:	095b      	lsrs	r3, r3, #5
 80075d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075da:	441e      	add	r6, r3
 80075dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075de:	4618      	mov	r0, r3
 80075e0:	f04f 0100 	mov.w	r1, #0
 80075e4:	4602      	mov	r2, r0
 80075e6:	460b      	mov	r3, r1
 80075e8:	1894      	adds	r4, r2, r2
 80075ea:	603c      	str	r4, [r7, #0]
 80075ec:	415b      	adcs	r3, r3
 80075ee:	607b      	str	r3, [r7, #4]
 80075f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075f4:	1812      	adds	r2, r2, r0
 80075f6:	eb41 0303 	adc.w	r3, r1, r3
 80075fa:	f04f 0400 	mov.w	r4, #0
 80075fe:	f04f 0500 	mov.w	r5, #0
 8007602:	00dd      	lsls	r5, r3, #3
 8007604:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007608:	00d4      	lsls	r4, r2, #3
 800760a:	4622      	mov	r2, r4
 800760c:	462b      	mov	r3, r5
 800760e:	eb12 0a00 	adds.w	sl, r2, r0
 8007612:	eb43 0b01 	adc.w	fp, r3, r1
 8007616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	4618      	mov	r0, r3
 800761c:	f04f 0100 	mov.w	r1, #0
 8007620:	f04f 0200 	mov.w	r2, #0
 8007624:	f04f 0300 	mov.w	r3, #0
 8007628:	008b      	lsls	r3, r1, #2
 800762a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800762e:	0082      	lsls	r2, r0, #2
 8007630:	4650      	mov	r0, sl
 8007632:	4659      	mov	r1, fp
 8007634:	f7f9 fac0 	bl	8000bb8 <__aeabi_uldivmod>
 8007638:	4602      	mov	r2, r0
 800763a:	460b      	mov	r3, r1
 800763c:	4b0e      	ldr	r3, [pc, #56]	; (8007678 <UART_SetConfig+0x38c>)
 800763e:	fba3 1302 	umull	r1, r3, r3, r2
 8007642:	095b      	lsrs	r3, r3, #5
 8007644:	2164      	movs	r1, #100	; 0x64
 8007646:	fb01 f303 	mul.w	r3, r1, r3
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	011b      	lsls	r3, r3, #4
 800764e:	3332      	adds	r3, #50	; 0x32
 8007650:	4a09      	ldr	r2, [pc, #36]	; (8007678 <UART_SetConfig+0x38c>)
 8007652:	fba2 2303 	umull	r2, r3, r2, r3
 8007656:	095b      	lsrs	r3, r3, #5
 8007658:	f003 020f 	and.w	r2, r3, #15
 800765c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4432      	add	r2, r6
 8007662:	609a      	str	r2, [r3, #8]
}
 8007664:	bf00      	nop
 8007666:	377c      	adds	r7, #124	; 0x7c
 8007668:	46bd      	mov	sp, r7
 800766a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800766e:	bf00      	nop
 8007670:	40011000 	.word	0x40011000
 8007674:	40011400 	.word	0x40011400
 8007678:	51eb851f 	.word	0x51eb851f

0800767c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800767c:	b084      	sub	sp, #16
 800767e:	b480      	push	{r7}
 8007680:	b085      	sub	sp, #20
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
 8007686:	f107 001c 	add.w	r0, r7, #28
 800768a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800768e:	2300      	movs	r3, #0
 8007690:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007692:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007694:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007696:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800769a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800769c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800769e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80076a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80076a2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80076a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80076a6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80076b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	431a      	orrs	r2, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80076c2:	2300      	movs	r3, #0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3714      	adds	r7, #20
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	b004      	add	sp, #16
 80076d0:	4770      	bx	lr

080076d2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80076d2:	b480      	push	{r7}
 80076d4:	b083      	sub	sp, #12
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2203      	movs	r2, #3
 80076f8:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80076fa:	2002      	movs	r0, #2
 80076fc:	f7f9 fdaa 	bl	8001254 <HAL_Delay>
  
  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3708      	adds	r7, #8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800770a:	b480      	push	{r7}
 800770c:	b083      	sub	sp, #12
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 0303 	and.w	r3, r3, #3
}
 800771a:	4618      	mov	r0, r3
 800771c:	370c      	adds	r7, #12
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007726:	b480      	push	{r7}
 8007728:	b085      	sub	sp, #20
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
 800772e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007730:	2300      	movs	r3, #0
 8007732:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007744:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800774a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007750:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	4313      	orrs	r3, r2
 8007756:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007760:	f023 030f 	bic.w	r3, r3, #15
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	431a      	orrs	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr

0800777a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800777a:	b480      	push	{r7}
 800777c:	b083      	sub	sp, #12
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	b2db      	uxtb	r3, r3
}
 8007788:	4618      	mov	r0, r3
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	3314      	adds	r3, #20
 80077a2:	461a      	mov	r2, r3
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	4413      	add	r3, r2
 80077a8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
}  
 80077ae:	4618      	mov	r0, r3
 80077b0:	3714      	adds	r7, #20
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr

080077ba <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80077ba:	b480      	push	{r7}
 80077bc:	b085      	sub	sp, #20
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
 80077c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80077c4:	2300      	movs	r3, #0
 80077c6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	685a      	ldr	r2, [r3, #4]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80077e0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80077e6:	431a      	orrs	r2, r3
                       Data->DPSM);
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80077ec:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	431a      	orrs	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007804:	2300      	movs	r3, #0

}
 8007806:	4618      	mov	r0, r3
 8007808:	3714      	adds	r7, #20
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr

08007812 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b088      	sub	sp, #32
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
 800781a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007820:	2310      	movs	r3, #16
 8007822:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007824:	2340      	movs	r3, #64	; 0x40
 8007826:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007828:	2300      	movs	r3, #0
 800782a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800782c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007830:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007832:	f107 0308 	add.w	r3, r7, #8
 8007836:	4619      	mov	r1, r3
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f7ff ff74 	bl	8007726 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800783e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007842:	2110      	movs	r1, #16
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 f979 	bl	8007b3c <SDMMC_GetCmdResp1>
 800784a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800784c:	69fb      	ldr	r3, [r7, #28]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3720      	adds	r7, #32
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b08a      	sub	sp, #40	; 0x28
 800785a:	af00      	add	r7, sp, #0
 800785c:	60f8      	str	r0, [r7, #12]
 800785e:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007866:	2307      	movs	r3, #7
 8007868:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800786a:	2340      	movs	r3, #64	; 0x40
 800786c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800786e:	2300      	movs	r3, #0
 8007870:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007876:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007878:	f107 0310 	add.w	r3, r7, #16
 800787c:	4619      	mov	r1, r3
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f7ff ff51 	bl	8007726 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007884:	f241 3288 	movw	r2, #5000	; 0x1388
 8007888:	2107      	movs	r1, #7
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f000 f956 	bl	8007b3c <SDMMC_GetCmdResp1>
 8007890:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007894:	4618      	mov	r0, r3
 8007896:	3728      	adds	r7, #40	; 0x28
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b088      	sub	sp, #32
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80078a4:	2300      	movs	r3, #0
 80078a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80078a8:	2300      	movs	r3, #0
 80078aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80078ac:	2300      	movs	r3, #0
 80078ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078b0:	2300      	movs	r3, #0
 80078b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078ba:	f107 0308 	add.w	r3, r7, #8
 80078be:	4619      	mov	r1, r3
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f7ff ff30 	bl	8007726 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f90c 	bl	8007ae4 <SDMMC_GetCmdError>
 80078cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078ce:	69fb      	ldr	r3, [r7, #28]
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3720      	adds	r7, #32
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b088      	sub	sp, #32
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80078e0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80078e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80078e6:	2308      	movs	r3, #8
 80078e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80078ea:	2340      	movs	r3, #64	; 0x40
 80078ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078ee:	2300      	movs	r3, #0
 80078f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078f8:	f107 0308 	add.w	r3, r7, #8
 80078fc:	4619      	mov	r1, r3
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f7ff ff11 	bl	8007726 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fb03 	bl	8007f10 <SDMMC_GetCmdResp7>
 800790a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800790c:	69fb      	ldr	r3, [r7, #28]
}
 800790e:	4618      	mov	r0, r3
 8007910:	3720      	adds	r7, #32
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b088      	sub	sp, #32
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007924:	2337      	movs	r3, #55	; 0x37
 8007926:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007928:	2340      	movs	r3, #64	; 0x40
 800792a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800792c:	2300      	movs	r3, #0
 800792e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007934:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007936:	f107 0308 	add.w	r3, r7, #8
 800793a:	4619      	mov	r1, r3
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f7ff fef2 	bl	8007726 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007942:	f241 3288 	movw	r2, #5000	; 0x1388
 8007946:	2137      	movs	r1, #55	; 0x37
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 f8f7 	bl	8007b3c <SDMMC_GetCmdResp1>
 800794e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007950:	69fb      	ldr	r3, [r7, #28]
}
 8007952:	4618      	mov	r0, r3
 8007954:	3720      	adds	r7, #32
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b088      	sub	sp, #32
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
 8007962:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800796a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800796e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007970:	2329      	movs	r3, #41	; 0x29
 8007972:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007974:	2340      	movs	r3, #64	; 0x40
 8007976:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007978:	2300      	movs	r3, #0
 800797a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800797c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007980:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007982:	f107 0308 	add.w	r3, r7, #8
 8007986:	4619      	mov	r1, r3
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f7ff fecc 	bl	8007726 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 fa0a 	bl	8007da8 <SDMMC_GetCmdResp3>
 8007994:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007996:	69fb      	ldr	r3, [r7, #28]
}
 8007998:	4618      	mov	r0, r3
 800799a:	3720      	adds	r7, #32
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b088      	sub	sp, #32
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80079ae:	2306      	movs	r3, #6
 80079b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80079b2:	2340      	movs	r3, #64	; 0x40
 80079b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079b6:	2300      	movs	r3, #0
 80079b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079c0:	f107 0308 	add.w	r3, r7, #8
 80079c4:	4619      	mov	r1, r3
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f7ff fead 	bl	8007726 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80079cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80079d0:	2106      	movs	r1, #6
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f8b2 	bl	8007b3c <SDMMC_GetCmdResp1>
 80079d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079da:	69fb      	ldr	r3, [r7, #28]
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3720      	adds	r7, #32
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b088      	sub	sp, #32
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80079ec:	2300      	movs	r3, #0
 80079ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80079f0:	2333      	movs	r3, #51	; 0x33
 80079f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80079f4:	2340      	movs	r3, #64	; 0x40
 80079f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079f8:	2300      	movs	r3, #0
 80079fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a02:	f107 0308 	add.w	r3, r7, #8
 8007a06:	4619      	mov	r1, r3
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f7ff fe8c 	bl	8007726 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a12:	2133      	movs	r1, #51	; 0x33
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 f891 	bl	8007b3c <SDMMC_GetCmdResp1>
 8007a1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a1c:	69fb      	ldr	r3, [r7, #28]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3720      	adds	r7, #32
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b088      	sub	sp, #32
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007a32:	2302      	movs	r3, #2
 8007a34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007a36:	23c0      	movs	r3, #192	; 0xc0
 8007a38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a44:	f107 0308 	add.w	r3, r7, #8
 8007a48:	4619      	mov	r1, r3
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f7ff fe6b 	bl	8007726 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 f961 	bl	8007d18 <SDMMC_GetCmdResp2>
 8007a56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a58:	69fb      	ldr	r3, [r7, #28]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3720      	adds	r7, #32
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b088      	sub	sp, #32
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007a70:	2309      	movs	r3, #9
 8007a72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007a74:	23c0      	movs	r3, #192	; 0xc0
 8007a76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a82:	f107 0308 	add.w	r3, r7, #8
 8007a86:	4619      	mov	r1, r3
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f7ff fe4c 	bl	8007726 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f942 	bl	8007d18 <SDMMC_GetCmdResp2>
 8007a94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a96:	69fb      	ldr	r3, [r7, #28]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3720      	adds	r7, #32
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b088      	sub	sp, #32
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ab2:	2340      	movs	r3, #64	; 0x40
 8007ab4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007abe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ac0:	f107 0308 	add.w	r3, r7, #8
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f7ff fe2d 	bl	8007726 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007acc:	683a      	ldr	r2, [r7, #0]
 8007ace:	2103      	movs	r1, #3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 f9a7 	bl	8007e24 <SDMMC_GetCmdResp6>
 8007ad6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ad8:	69fb      	ldr	r3, [r7, #28]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3720      	adds	r7, #32
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
	...

08007ae4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007aec:	4b11      	ldr	r3, [pc, #68]	; (8007b34 <SDMMC_GetCmdError+0x50>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a11      	ldr	r2, [pc, #68]	; (8007b38 <SDMMC_GetCmdError+0x54>)
 8007af2:	fba2 2303 	umull	r2, r3, r2, r3
 8007af6:	0a5b      	lsrs	r3, r3, #9
 8007af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007afc:	fb02 f303 	mul.w	r3, r2, r3
 8007b00:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	1e5a      	subs	r2, r3, #1
 8007b06:	60fa      	str	r2, [r7, #12]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d102      	bne.n	8007b12 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b10:	e009      	b.n	8007b26 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d0f1      	beq.n	8007b02 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	22c5      	movs	r2, #197	; 0xc5
 8007b22:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3714      	adds	r7, #20
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	20000118 	.word	0x20000118
 8007b38:	10624dd3 	.word	0x10624dd3

08007b3c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b088      	sub	sp, #32
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	460b      	mov	r3, r1
 8007b46:	607a      	str	r2, [r7, #4]
 8007b48:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007b4a:	4b70      	ldr	r3, [pc, #448]	; (8007d0c <SDMMC_GetCmdResp1+0x1d0>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a70      	ldr	r2, [pc, #448]	; (8007d10 <SDMMC_GetCmdResp1+0x1d4>)
 8007b50:	fba2 2303 	umull	r2, r3, r2, r3
 8007b54:	0a5a      	lsrs	r2, r3, #9
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	fb02 f303 	mul.w	r3, r2, r3
 8007b5c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	1e5a      	subs	r2, r3, #1
 8007b62:	61fa      	str	r2, [r7, #28]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d102      	bne.n	8007b6e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b6c:	e0c9      	b.n	8007d02 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b72:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d0ef      	beq.n	8007b5e <SDMMC_GetCmdResp1+0x22>
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1ea      	bne.n	8007b5e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b8c:	f003 0304 	and.w	r3, r3, #4
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d004      	beq.n	8007b9e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2204      	movs	r2, #4
 8007b98:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007b9a:	2304      	movs	r3, #4
 8007b9c:	e0b1      	b.n	8007d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ba2:	f003 0301 	and.w	r3, r3, #1
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d004      	beq.n	8007bb4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2201      	movs	r2, #1
 8007bae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e0a6      	b.n	8007d02 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	22c5      	movs	r2, #197	; 0xc5
 8007bb8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f7ff fddd 	bl	800777a <SDIO_GetCommandResponse>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	7afb      	ldrb	r3, [r7, #11]
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d001      	beq.n	8007bce <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e099      	b.n	8007d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007bce:	2100      	movs	r1, #0
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f7ff fddf 	bl	8007794 <SDIO_GetResponse>
 8007bd6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	4b4e      	ldr	r3, [pc, #312]	; (8007d14 <SDMMC_GetCmdResp1+0x1d8>)
 8007bdc:	4013      	ands	r3, r2
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d101      	bne.n	8007be6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007be2:	2300      	movs	r3, #0
 8007be4:	e08d      	b.n	8007d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	da02      	bge.n	8007bf2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007bec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007bf0:	e087      	b.n	8007d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d001      	beq.n	8007c00 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007bfc:	2340      	movs	r3, #64	; 0x40
 8007bfe:	e080      	b.n	8007d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d001      	beq.n	8007c0e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007c0a:	2380      	movs	r3, #128	; 0x80
 8007c0c:	e079      	b.n	8007d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d002      	beq.n	8007c1e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007c18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c1c:	e071      	b.n	8007d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d002      	beq.n	8007c2e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007c28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c2c:	e069      	b.n	8007d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d002      	beq.n	8007c3e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c3c:	e061      	b.n	8007d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d002      	beq.n	8007c4e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007c48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c4c:	e059      	b.n	8007d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d002      	beq.n	8007c5e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c5c:	e051      	b.n	8007d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d002      	beq.n	8007c6e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007c68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c6c:	e049      	b.n	8007d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d002      	beq.n	8007c7e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007c78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007c7c:	e041      	b.n	8007d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d002      	beq.n	8007c8e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007c88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c8c:	e039      	b.n	8007d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d002      	beq.n	8007c9e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007c98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007c9c:	e031      	b.n	8007d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d002      	beq.n	8007cae <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007ca8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007cac:	e029      	b.n	8007d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d002      	beq.n	8007cbe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007cb8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007cbc:	e021      	b.n	8007d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d002      	beq.n	8007cce <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007cc8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007ccc:	e019      	b.n	8007d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d002      	beq.n	8007cde <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007cd8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007cdc:	e011      	b.n	8007d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d002      	beq.n	8007cee <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007ce8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007cec:	e009      	b.n	8007d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	f003 0308 	and.w	r3, r3, #8
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d002      	beq.n	8007cfe <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007cf8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007cfc:	e001      	b.n	8007d02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007cfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3720      	adds	r7, #32
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	20000118 	.word	0x20000118
 8007d10:	10624dd3 	.word	0x10624dd3
 8007d14:	fdffe008 	.word	0xfdffe008

08007d18 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d20:	4b1f      	ldr	r3, [pc, #124]	; (8007da0 <SDMMC_GetCmdResp2+0x88>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a1f      	ldr	r2, [pc, #124]	; (8007da4 <SDMMC_GetCmdResp2+0x8c>)
 8007d26:	fba2 2303 	umull	r2, r3, r2, r3
 8007d2a:	0a5b      	lsrs	r3, r3, #9
 8007d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d30:	fb02 f303 	mul.w	r3, r2, r3
 8007d34:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	1e5a      	subs	r2, r3, #1
 8007d3a:	60fa      	str	r2, [r7, #12]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d102      	bne.n	8007d46 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007d40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d44:	e026      	b.n	8007d94 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d4a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d0ef      	beq.n	8007d36 <SDMMC_GetCmdResp2+0x1e>
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d1ea      	bne.n	8007d36 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d64:	f003 0304 	and.w	r3, r3, #4
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d004      	beq.n	8007d76 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2204      	movs	r2, #4
 8007d70:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007d72:	2304      	movs	r3, #4
 8007d74:	e00e      	b.n	8007d94 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d7a:	f003 0301 	and.w	r3, r3, #1
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d004      	beq.n	8007d8c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2201      	movs	r2, #1
 8007d86:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e003      	b.n	8007d94 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	22c5      	movs	r2, #197	; 0xc5
 8007d90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr
 8007da0:	20000118 	.word	0x20000118
 8007da4:	10624dd3 	.word	0x10624dd3

08007da8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007db0:	4b1a      	ldr	r3, [pc, #104]	; (8007e1c <SDMMC_GetCmdResp3+0x74>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a1a      	ldr	r2, [pc, #104]	; (8007e20 <SDMMC_GetCmdResp3+0x78>)
 8007db6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dba:	0a5b      	lsrs	r3, r3, #9
 8007dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dc0:	fb02 f303 	mul.w	r3, r2, r3
 8007dc4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	1e5a      	subs	r2, r3, #1
 8007dca:	60fa      	str	r2, [r7, #12]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d102      	bne.n	8007dd6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007dd0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007dd4:	e01b      	b.n	8007e0e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dda:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d0ef      	beq.n	8007dc6 <SDMMC_GetCmdResp3+0x1e>
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1ea      	bne.n	8007dc6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df4:	f003 0304 	and.w	r3, r3, #4
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d004      	beq.n	8007e06 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2204      	movs	r2, #4
 8007e00:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e02:	2304      	movs	r3, #4
 8007e04:	e003      	b.n	8007e0e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	22c5      	movs	r2, #197	; 0xc5
 8007e0a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3714      	adds	r7, #20
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	20000118 	.word	0x20000118
 8007e20:	10624dd3 	.word	0x10624dd3

08007e24 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b088      	sub	sp, #32
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	607a      	str	r2, [r7, #4]
 8007e30:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e32:	4b35      	ldr	r3, [pc, #212]	; (8007f08 <SDMMC_GetCmdResp6+0xe4>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a35      	ldr	r2, [pc, #212]	; (8007f0c <SDMMC_GetCmdResp6+0xe8>)
 8007e38:	fba2 2303 	umull	r2, r3, r2, r3
 8007e3c:	0a5b      	lsrs	r3, r3, #9
 8007e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e42:	fb02 f303 	mul.w	r3, r2, r3
 8007e46:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	1e5a      	subs	r2, r3, #1
 8007e4c:	61fa      	str	r2, [r7, #28]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d102      	bne.n	8007e58 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007e52:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e56:	e052      	b.n	8007efe <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e5c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d0ef      	beq.n	8007e48 <SDMMC_GetCmdResp6+0x24>
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1ea      	bne.n	8007e48 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e76:	f003 0304 	and.w	r3, r3, #4
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d004      	beq.n	8007e88 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2204      	movs	r2, #4
 8007e82:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e84:	2304      	movs	r3, #4
 8007e86:	e03a      	b.n	8007efe <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e8c:	f003 0301 	and.w	r3, r3, #1
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d004      	beq.n	8007e9e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2201      	movs	r2, #1
 8007e98:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e02f      	b.n	8007efe <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007e9e:	68f8      	ldr	r0, [r7, #12]
 8007ea0:	f7ff fc6b 	bl	800777a <SDIO_GetCommandResponse>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	7afb      	ldrb	r3, [r7, #11]
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d001      	beq.n	8007eb2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e025      	b.n	8007efe <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	22c5      	movs	r2, #197	; 0xc5
 8007eb6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007eb8:	2100      	movs	r1, #0
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f7ff fc6a 	bl	8007794 <SDIO_GetResponse>
 8007ec0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d106      	bne.n	8007eda <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	0c1b      	lsrs	r3, r3, #16
 8007ed0:	b29a      	uxth	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	e011      	b.n	8007efe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d002      	beq.n	8007eea <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007ee4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007ee8:	e009      	b.n	8007efe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d002      	beq.n	8007efa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ef8:	e001      	b.n	8007efe <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007efa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3720      	adds	r7, #32
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	20000118 	.word	0x20000118
 8007f0c:	10624dd3 	.word	0x10624dd3

08007f10 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007f18:	4b22      	ldr	r3, [pc, #136]	; (8007fa4 <SDMMC_GetCmdResp7+0x94>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a22      	ldr	r2, [pc, #136]	; (8007fa8 <SDMMC_GetCmdResp7+0x98>)
 8007f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f22:	0a5b      	lsrs	r3, r3, #9
 8007f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f28:	fb02 f303 	mul.w	r3, r2, r3
 8007f2c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	1e5a      	subs	r2, r3, #1
 8007f32:	60fa      	str	r2, [r7, #12]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d102      	bne.n	8007f3e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007f3c:	e02c      	b.n	8007f98 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f42:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d0ef      	beq.n	8007f2e <SDMMC_GetCmdResp7+0x1e>
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d1ea      	bne.n	8007f2e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f5c:	f003 0304 	and.w	r3, r3, #4
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d004      	beq.n	8007f6e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2204      	movs	r2, #4
 8007f68:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f6a:	2304      	movs	r3, #4
 8007f6c:	e014      	b.n	8007f98 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f72:	f003 0301 	and.w	r3, r3, #1
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d004      	beq.n	8007f84 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f80:	2301      	movs	r3, #1
 8007f82:	e009      	b.n	8007f98 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d002      	beq.n	8007f96 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2240      	movs	r2, #64	; 0x40
 8007f94:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007f96:	2300      	movs	r3, #0
  
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3714      	adds	r7, #20
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr
 8007fa4:	20000118 	.word	0x20000118
 8007fa8:	10624dd3 	.word	0x10624dd3

08007fac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007fac:	b084      	sub	sp, #16
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b084      	sub	sp, #16
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
 8007fb6:	f107 001c 	add.w	r0, r7, #28
 8007fba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d122      	bne.n	800800a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007fd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d105      	bne.n	8007ffe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f001 fb1c 	bl	800963c <USB_CoreReset>
 8008004:	4603      	mov	r3, r0
 8008006:	73fb      	strb	r3, [r7, #15]
 8008008:	e01a      	b.n	8008040 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f001 fb10 	bl	800963c <USB_CoreReset>
 800801c:	4603      	mov	r3, r0
 800801e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008022:	2b00      	cmp	r3, #0
 8008024:	d106      	bne.n	8008034 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800802a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	639a      	str	r2, [r3, #56]	; 0x38
 8008032:	e005      	b.n	8008040 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008038:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008042:	2b01      	cmp	r3, #1
 8008044:	d10b      	bne.n	800805e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	f043 0206 	orr.w	r2, r3, #6
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	f043 0220 	orr.w	r2, r3, #32
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800805e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008060:	4618      	mov	r0, r3
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800806a:	b004      	add	sp, #16
 800806c:	4770      	bx	lr
	...

08008070 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008070:	b480      	push	{r7}
 8008072:	b087      	sub	sp, #28
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	4613      	mov	r3, r2
 800807c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800807e:	79fb      	ldrb	r3, [r7, #7]
 8008080:	2b02      	cmp	r3, #2
 8008082:	d165      	bne.n	8008150 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	4a41      	ldr	r2, [pc, #260]	; (800818c <USB_SetTurnaroundTime+0x11c>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d906      	bls.n	800809a <USB_SetTurnaroundTime+0x2a>
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	4a40      	ldr	r2, [pc, #256]	; (8008190 <USB_SetTurnaroundTime+0x120>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d202      	bcs.n	800809a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008094:	230f      	movs	r3, #15
 8008096:	617b      	str	r3, [r7, #20]
 8008098:	e062      	b.n	8008160 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	4a3c      	ldr	r2, [pc, #240]	; (8008190 <USB_SetTurnaroundTime+0x120>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d306      	bcc.n	80080b0 <USB_SetTurnaroundTime+0x40>
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	4a3b      	ldr	r2, [pc, #236]	; (8008194 <USB_SetTurnaroundTime+0x124>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d202      	bcs.n	80080b0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80080aa:	230e      	movs	r3, #14
 80080ac:	617b      	str	r3, [r7, #20]
 80080ae:	e057      	b.n	8008160 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	4a38      	ldr	r2, [pc, #224]	; (8008194 <USB_SetTurnaroundTime+0x124>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d306      	bcc.n	80080c6 <USB_SetTurnaroundTime+0x56>
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	4a37      	ldr	r2, [pc, #220]	; (8008198 <USB_SetTurnaroundTime+0x128>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d202      	bcs.n	80080c6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80080c0:	230d      	movs	r3, #13
 80080c2:	617b      	str	r3, [r7, #20]
 80080c4:	e04c      	b.n	8008160 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	4a33      	ldr	r2, [pc, #204]	; (8008198 <USB_SetTurnaroundTime+0x128>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d306      	bcc.n	80080dc <USB_SetTurnaroundTime+0x6c>
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	4a32      	ldr	r2, [pc, #200]	; (800819c <USB_SetTurnaroundTime+0x12c>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d802      	bhi.n	80080dc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80080d6:	230c      	movs	r3, #12
 80080d8:	617b      	str	r3, [r7, #20]
 80080da:	e041      	b.n	8008160 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	4a2f      	ldr	r2, [pc, #188]	; (800819c <USB_SetTurnaroundTime+0x12c>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d906      	bls.n	80080f2 <USB_SetTurnaroundTime+0x82>
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	4a2e      	ldr	r2, [pc, #184]	; (80081a0 <USB_SetTurnaroundTime+0x130>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d802      	bhi.n	80080f2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80080ec:	230b      	movs	r3, #11
 80080ee:	617b      	str	r3, [r7, #20]
 80080f0:	e036      	b.n	8008160 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	4a2a      	ldr	r2, [pc, #168]	; (80081a0 <USB_SetTurnaroundTime+0x130>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d906      	bls.n	8008108 <USB_SetTurnaroundTime+0x98>
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	4a29      	ldr	r2, [pc, #164]	; (80081a4 <USB_SetTurnaroundTime+0x134>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d802      	bhi.n	8008108 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008102:	230a      	movs	r3, #10
 8008104:	617b      	str	r3, [r7, #20]
 8008106:	e02b      	b.n	8008160 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	4a26      	ldr	r2, [pc, #152]	; (80081a4 <USB_SetTurnaroundTime+0x134>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d906      	bls.n	800811e <USB_SetTurnaroundTime+0xae>
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	4a25      	ldr	r2, [pc, #148]	; (80081a8 <USB_SetTurnaroundTime+0x138>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d202      	bcs.n	800811e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008118:	2309      	movs	r3, #9
 800811a:	617b      	str	r3, [r7, #20]
 800811c:	e020      	b.n	8008160 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	4a21      	ldr	r2, [pc, #132]	; (80081a8 <USB_SetTurnaroundTime+0x138>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d306      	bcc.n	8008134 <USB_SetTurnaroundTime+0xc4>
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	4a20      	ldr	r2, [pc, #128]	; (80081ac <USB_SetTurnaroundTime+0x13c>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d802      	bhi.n	8008134 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800812e:	2308      	movs	r3, #8
 8008130:	617b      	str	r3, [r7, #20]
 8008132:	e015      	b.n	8008160 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	4a1d      	ldr	r2, [pc, #116]	; (80081ac <USB_SetTurnaroundTime+0x13c>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d906      	bls.n	800814a <USB_SetTurnaroundTime+0xda>
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	4a1c      	ldr	r2, [pc, #112]	; (80081b0 <USB_SetTurnaroundTime+0x140>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d202      	bcs.n	800814a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008144:	2307      	movs	r3, #7
 8008146:	617b      	str	r3, [r7, #20]
 8008148:	e00a      	b.n	8008160 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800814a:	2306      	movs	r3, #6
 800814c:	617b      	str	r3, [r7, #20]
 800814e:	e007      	b.n	8008160 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008150:	79fb      	ldrb	r3, [r7, #7]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d102      	bne.n	800815c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008156:	2309      	movs	r3, #9
 8008158:	617b      	str	r3, [r7, #20]
 800815a:	e001      	b.n	8008160 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800815c:	2309      	movs	r3, #9
 800815e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	68da      	ldr	r2, [r3, #12]
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	029b      	lsls	r3, r3, #10
 8008174:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008178:	431a      	orrs	r2, r3
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800817e:	2300      	movs	r3, #0
}
 8008180:	4618      	mov	r0, r3
 8008182:	371c      	adds	r7, #28
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr
 800818c:	00d8acbf 	.word	0x00d8acbf
 8008190:	00e4e1c0 	.word	0x00e4e1c0
 8008194:	00f42400 	.word	0x00f42400
 8008198:	01067380 	.word	0x01067380
 800819c:	011a499f 	.word	0x011a499f
 80081a0:	01312cff 	.word	0x01312cff
 80081a4:	014ca43f 	.word	0x014ca43f
 80081a8:	016e3600 	.word	0x016e3600
 80081ac:	01a6ab1f 	.word	0x01a6ab1f
 80081b0:	01e84800 	.word	0x01e84800

080081b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	f043 0201 	orr.w	r2, r3, #1
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	370c      	adds	r7, #12
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr

080081d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80081d6:	b480      	push	{r7}
 80081d8:	b083      	sub	sp, #12
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	f023 0201 	bic.w	r2, r3, #1
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	460b      	mov	r3, r1
 8008202:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008204:	2300      	movs	r3, #0
 8008206:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008214:	78fb      	ldrb	r3, [r7, #3]
 8008216:	2b01      	cmp	r3, #1
 8008218:	d115      	bne.n	8008246 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008226:	2001      	movs	r0, #1
 8008228:	f7f9 f814 	bl	8001254 <HAL_Delay>
      ms++;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	3301      	adds	r3, #1
 8008230:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f001 f972 	bl	800951c <USB_GetMode>
 8008238:	4603      	mov	r3, r0
 800823a:	2b01      	cmp	r3, #1
 800823c:	d01e      	beq.n	800827c <USB_SetCurrentMode+0x84>
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2b31      	cmp	r3, #49	; 0x31
 8008242:	d9f0      	bls.n	8008226 <USB_SetCurrentMode+0x2e>
 8008244:	e01a      	b.n	800827c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008246:	78fb      	ldrb	r3, [r7, #3]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d115      	bne.n	8008278 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008258:	2001      	movs	r0, #1
 800825a:	f7f8 fffb 	bl	8001254 <HAL_Delay>
      ms++;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	3301      	adds	r3, #1
 8008262:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f001 f959 	bl	800951c <USB_GetMode>
 800826a:	4603      	mov	r3, r0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d005      	beq.n	800827c <USB_SetCurrentMode+0x84>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2b31      	cmp	r3, #49	; 0x31
 8008274:	d9f0      	bls.n	8008258 <USB_SetCurrentMode+0x60>
 8008276:	e001      	b.n	800827c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	e005      	b.n	8008288 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2b32      	cmp	r3, #50	; 0x32
 8008280:	d101      	bne.n	8008286 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	e000      	b.n	8008288 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	3710      	adds	r7, #16
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008290:	b084      	sub	sp, #16
 8008292:	b580      	push	{r7, lr}
 8008294:	b086      	sub	sp, #24
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
 800829a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800829e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80082a2:	2300      	movs	r3, #0
 80082a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80082aa:	2300      	movs	r3, #0
 80082ac:	613b      	str	r3, [r7, #16]
 80082ae:	e009      	b.n	80082c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	3340      	adds	r3, #64	; 0x40
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	4413      	add	r3, r2
 80082ba:	2200      	movs	r2, #0
 80082bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	3301      	adds	r3, #1
 80082c2:	613b      	str	r3, [r7, #16]
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	2b0e      	cmp	r3, #14
 80082c8:	d9f2      	bls.n	80082b0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80082ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d11c      	bne.n	800830a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082de:	f043 0302 	orr.w	r3, r3, #2
 80082e2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008300:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	639a      	str	r2, [r3, #56]	; 0x38
 8008308:	e00b      	b.n	8008322 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800830e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008328:	461a      	mov	r2, r3
 800832a:	2300      	movs	r3, #0
 800832c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008334:	4619      	mov	r1, r3
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800833c:	461a      	mov	r2, r3
 800833e:	680b      	ldr	r3, [r1, #0]
 8008340:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008344:	2b01      	cmp	r3, #1
 8008346:	d10c      	bne.n	8008362 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834a:	2b00      	cmp	r3, #0
 800834c:	d104      	bne.n	8008358 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800834e:	2100      	movs	r1, #0
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f945 	bl	80085e0 <USB_SetDevSpeed>
 8008356:	e008      	b.n	800836a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008358:	2101      	movs	r1, #1
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f940 	bl	80085e0 <USB_SetDevSpeed>
 8008360:	e003      	b.n	800836a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008362:	2103      	movs	r1, #3
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f93b 	bl	80085e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800836a:	2110      	movs	r1, #16
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 f8f3 	bl	8008558 <USB_FlushTxFifo>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d001      	beq.n	800837c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 f90f 	bl	80085a0 <USB_FlushRxFifo>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d001      	beq.n	800838c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008392:	461a      	mov	r2, r3
 8008394:	2300      	movs	r3, #0
 8008396:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800839e:	461a      	mov	r2, r3
 80083a0:	2300      	movs	r3, #0
 80083a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083aa:	461a      	mov	r2, r3
 80083ac:	2300      	movs	r3, #0
 80083ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083b0:	2300      	movs	r3, #0
 80083b2:	613b      	str	r3, [r7, #16]
 80083b4:	e043      	b.n	800843e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	015a      	lsls	r2, r3, #5
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	4413      	add	r3, r2
 80083be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083cc:	d118      	bne.n	8008400 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d10a      	bne.n	80083ea <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	015a      	lsls	r2, r3, #5
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	4413      	add	r3, r2
 80083dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083e0:	461a      	mov	r2, r3
 80083e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80083e6:	6013      	str	r3, [r2, #0]
 80083e8:	e013      	b.n	8008412 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	015a      	lsls	r2, r3, #5
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	4413      	add	r3, r2
 80083f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083f6:	461a      	mov	r2, r3
 80083f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80083fc:	6013      	str	r3, [r2, #0]
 80083fe:	e008      	b.n	8008412 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	015a      	lsls	r2, r3, #5
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	4413      	add	r3, r2
 8008408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800840c:	461a      	mov	r2, r3
 800840e:	2300      	movs	r3, #0
 8008410:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	015a      	lsls	r2, r3, #5
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	4413      	add	r3, r2
 800841a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800841e:	461a      	mov	r2, r3
 8008420:	2300      	movs	r3, #0
 8008422:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	015a      	lsls	r2, r3, #5
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	4413      	add	r3, r2
 800842c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008430:	461a      	mov	r2, r3
 8008432:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008436:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	3301      	adds	r3, #1
 800843c:	613b      	str	r3, [r7, #16]
 800843e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008440:	693a      	ldr	r2, [r7, #16]
 8008442:	429a      	cmp	r2, r3
 8008444:	d3b7      	bcc.n	80083b6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008446:	2300      	movs	r3, #0
 8008448:	613b      	str	r3, [r7, #16]
 800844a:	e043      	b.n	80084d4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	015a      	lsls	r2, r3, #5
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	4413      	add	r3, r2
 8008454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800845e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008462:	d118      	bne.n	8008496 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d10a      	bne.n	8008480 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	015a      	lsls	r2, r3, #5
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	4413      	add	r3, r2
 8008472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008476:	461a      	mov	r2, r3
 8008478:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800847c:	6013      	str	r3, [r2, #0]
 800847e:	e013      	b.n	80084a8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	015a      	lsls	r2, r3, #5
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	4413      	add	r3, r2
 8008488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800848c:	461a      	mov	r2, r3
 800848e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008492:	6013      	str	r3, [r2, #0]
 8008494:	e008      	b.n	80084a8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	015a      	lsls	r2, r3, #5
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	4413      	add	r3, r2
 800849e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084a2:	461a      	mov	r2, r3
 80084a4:	2300      	movs	r3, #0
 80084a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	015a      	lsls	r2, r3, #5
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	4413      	add	r3, r2
 80084b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084b4:	461a      	mov	r2, r3
 80084b6:	2300      	movs	r3, #0
 80084b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	015a      	lsls	r2, r3, #5
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	4413      	add	r3, r2
 80084c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c6:	461a      	mov	r2, r3
 80084c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80084cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	3301      	adds	r3, #1
 80084d2:	613b      	str	r3, [r7, #16]
 80084d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d6:	693a      	ldr	r2, [r7, #16]
 80084d8:	429a      	cmp	r2, r3
 80084da:	d3b7      	bcc.n	800844c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80084fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80084fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008500:	2b00      	cmp	r3, #0
 8008502:	d105      	bne.n	8008510 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	f043 0210 	orr.w	r2, r3, #16
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	699a      	ldr	r2, [r3, #24]
 8008514:	4b0f      	ldr	r3, [pc, #60]	; (8008554 <USB_DevInit+0x2c4>)
 8008516:	4313      	orrs	r3, r2
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800851c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800851e:	2b00      	cmp	r3, #0
 8008520:	d005      	beq.n	800852e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	699b      	ldr	r3, [r3, #24]
 8008526:	f043 0208 	orr.w	r2, r3, #8
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800852e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008530:	2b01      	cmp	r3, #1
 8008532:	d107      	bne.n	8008544 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	699b      	ldr	r3, [r3, #24]
 8008538:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800853c:	f043 0304 	orr.w	r3, r3, #4
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008544:	7dfb      	ldrb	r3, [r7, #23]
}
 8008546:	4618      	mov	r0, r3
 8008548:	3718      	adds	r7, #24
 800854a:	46bd      	mov	sp, r7
 800854c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008550:	b004      	add	sp, #16
 8008552:	4770      	bx	lr
 8008554:	803c3800 	.word	0x803c3800

08008558 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008562:	2300      	movs	r3, #0
 8008564:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	019b      	lsls	r3, r3, #6
 800856a:	f043 0220 	orr.w	r2, r3, #32
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	3301      	adds	r3, #1
 8008576:	60fb      	str	r3, [r7, #12]
 8008578:	4a08      	ldr	r2, [pc, #32]	; (800859c <USB_FlushTxFifo+0x44>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d901      	bls.n	8008582 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800857e:	2303      	movs	r3, #3
 8008580:	e006      	b.n	8008590 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	691b      	ldr	r3, [r3, #16]
 8008586:	f003 0320 	and.w	r3, r3, #32
 800858a:	2b20      	cmp	r3, #32
 800858c:	d0f1      	beq.n	8008572 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800858e:	2300      	movs	r3, #0
}
 8008590:	4618      	mov	r0, r3
 8008592:	3714      	adds	r7, #20
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr
 800859c:	00030d40 	.word	0x00030d40

080085a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085a8:	2300      	movs	r3, #0
 80085aa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2210      	movs	r2, #16
 80085b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	3301      	adds	r3, #1
 80085b6:	60fb      	str	r3, [r7, #12]
 80085b8:	4a08      	ldr	r2, [pc, #32]	; (80085dc <USB_FlushRxFifo+0x3c>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d901      	bls.n	80085c2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80085be:	2303      	movs	r3, #3
 80085c0:	e006      	b.n	80085d0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	f003 0310 	and.w	r3, r3, #16
 80085ca:	2b10      	cmp	r3, #16
 80085cc:	d0f1      	beq.n	80085b2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3714      	adds	r7, #20
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr
 80085dc:	00030d40 	.word	0x00030d40

080085e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b085      	sub	sp, #20
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	460b      	mov	r3, r1
 80085ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	78fb      	ldrb	r3, [r7, #3]
 80085fa:	68f9      	ldr	r1, [r7, #12]
 80085fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008600:	4313      	orrs	r3, r2
 8008602:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3714      	adds	r7, #20
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr

08008612 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008612:	b480      	push	{r7}
 8008614:	b087      	sub	sp, #28
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	f003 0306 	and.w	r3, r3, #6
 800862a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d102      	bne.n	8008638 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008632:	2300      	movs	r3, #0
 8008634:	75fb      	strb	r3, [r7, #23]
 8008636:	e00a      	b.n	800864e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2b02      	cmp	r3, #2
 800863c:	d002      	beq.n	8008644 <USB_GetDevSpeed+0x32>
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2b06      	cmp	r3, #6
 8008642:	d102      	bne.n	800864a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008644:	2302      	movs	r3, #2
 8008646:	75fb      	strb	r3, [r7, #23]
 8008648:	e001      	b.n	800864e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800864a:	230f      	movs	r3, #15
 800864c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800864e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008650:	4618      	mov	r0, r3
 8008652:	371c      	adds	r7, #28
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800865c:	b480      	push	{r7}
 800865e:	b085      	sub	sp, #20
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	785b      	ldrb	r3, [r3, #1]
 8008674:	2b01      	cmp	r3, #1
 8008676:	d13a      	bne.n	80086ee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800867e:	69da      	ldr	r2, [r3, #28]
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	f003 030f 	and.w	r3, r3, #15
 8008688:	2101      	movs	r1, #1
 800868a:	fa01 f303 	lsl.w	r3, r1, r3
 800868e:	b29b      	uxth	r3, r3
 8008690:	68f9      	ldr	r1, [r7, #12]
 8008692:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008696:	4313      	orrs	r3, r2
 8008698:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	015a      	lsls	r2, r3, #5
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	4413      	add	r3, r2
 80086a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d155      	bne.n	800875c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	015a      	lsls	r2, r3, #5
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	4413      	add	r3, r2
 80086b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	78db      	ldrb	r3, [r3, #3]
 80086ca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80086cc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	059b      	lsls	r3, r3, #22
 80086d2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80086d4:	4313      	orrs	r3, r2
 80086d6:	68ba      	ldr	r2, [r7, #8]
 80086d8:	0151      	lsls	r1, r2, #5
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	440a      	add	r2, r1
 80086de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086ea:	6013      	str	r3, [r2, #0]
 80086ec:	e036      	b.n	800875c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086f4:	69da      	ldr	r2, [r3, #28]
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	f003 030f 	and.w	r3, r3, #15
 80086fe:	2101      	movs	r1, #1
 8008700:	fa01 f303 	lsl.w	r3, r1, r3
 8008704:	041b      	lsls	r3, r3, #16
 8008706:	68f9      	ldr	r1, [r7, #12]
 8008708:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800870c:	4313      	orrs	r3, r2
 800870e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	015a      	lsls	r2, r3, #5
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	4413      	add	r3, r2
 8008718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008722:	2b00      	cmp	r3, #0
 8008724:	d11a      	bne.n	800875c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	015a      	lsls	r2, r3, #5
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	4413      	add	r3, r2
 800872e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	78db      	ldrb	r3, [r3, #3]
 8008740:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008742:	430b      	orrs	r3, r1
 8008744:	4313      	orrs	r3, r2
 8008746:	68ba      	ldr	r2, [r7, #8]
 8008748:	0151      	lsls	r1, r2, #5
 800874a:	68fa      	ldr	r2, [r7, #12]
 800874c:	440a      	add	r2, r1
 800874e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800875a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3714      	adds	r7, #20
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr
	...

0800876c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800876c:	b480      	push	{r7}
 800876e:	b085      	sub	sp, #20
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	785b      	ldrb	r3, [r3, #1]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d161      	bne.n	800884c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	015a      	lsls	r2, r3, #5
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	4413      	add	r3, r2
 8008790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800879a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800879e:	d11f      	bne.n	80087e0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	015a      	lsls	r2, r3, #5
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	4413      	add	r3, r2
 80087a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	68ba      	ldr	r2, [r7, #8]
 80087b0:	0151      	lsls	r1, r2, #5
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	440a      	add	r2, r1
 80087b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80087be:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	015a      	lsls	r2, r3, #5
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	4413      	add	r3, r2
 80087c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	68ba      	ldr	r2, [r7, #8]
 80087d0:	0151      	lsls	r1, r2, #5
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	440a      	add	r2, r1
 80087d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	f003 030f 	and.w	r3, r3, #15
 80087f0:	2101      	movs	r1, #1
 80087f2:	fa01 f303 	lsl.w	r3, r1, r3
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	43db      	mvns	r3, r3
 80087fa:	68f9      	ldr	r1, [r7, #12]
 80087fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008800:	4013      	ands	r3, r2
 8008802:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800880a:	69da      	ldr	r2, [r3, #28]
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	f003 030f 	and.w	r3, r3, #15
 8008814:	2101      	movs	r1, #1
 8008816:	fa01 f303 	lsl.w	r3, r1, r3
 800881a:	b29b      	uxth	r3, r3
 800881c:	43db      	mvns	r3, r3
 800881e:	68f9      	ldr	r1, [r7, #12]
 8008820:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008824:	4013      	ands	r3, r2
 8008826:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	015a      	lsls	r2, r3, #5
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	4413      	add	r3, r2
 8008830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	0159      	lsls	r1, r3, #5
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	440b      	add	r3, r1
 800883e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008842:	4619      	mov	r1, r3
 8008844:	4b35      	ldr	r3, [pc, #212]	; (800891c <USB_DeactivateEndpoint+0x1b0>)
 8008846:	4013      	ands	r3, r2
 8008848:	600b      	str	r3, [r1, #0]
 800884a:	e060      	b.n	800890e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	015a      	lsls	r2, r3, #5
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	4413      	add	r3, r2
 8008854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800885e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008862:	d11f      	bne.n	80088a4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	015a      	lsls	r2, r3, #5
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	4413      	add	r3, r2
 800886c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68ba      	ldr	r2, [r7, #8]
 8008874:	0151      	lsls	r1, r2, #5
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	440a      	add	r2, r1
 800887a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800887e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008882:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	015a      	lsls	r2, r3, #5
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	4413      	add	r3, r2
 800888c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	68ba      	ldr	r2, [r7, #8]
 8008894:	0151      	lsls	r1, r2, #5
 8008896:	68fa      	ldr	r2, [r7, #12]
 8008898:	440a      	add	r2, r1
 800889a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800889e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	f003 030f 	and.w	r3, r3, #15
 80088b4:	2101      	movs	r1, #1
 80088b6:	fa01 f303 	lsl.w	r3, r1, r3
 80088ba:	041b      	lsls	r3, r3, #16
 80088bc:	43db      	mvns	r3, r3
 80088be:	68f9      	ldr	r1, [r7, #12]
 80088c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088c4:	4013      	ands	r3, r2
 80088c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ce:	69da      	ldr	r2, [r3, #28]
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	f003 030f 	and.w	r3, r3, #15
 80088d8:	2101      	movs	r1, #1
 80088da:	fa01 f303 	lsl.w	r3, r1, r3
 80088de:	041b      	lsls	r3, r3, #16
 80088e0:	43db      	mvns	r3, r3
 80088e2:	68f9      	ldr	r1, [r7, #12]
 80088e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088e8:	4013      	ands	r3, r2
 80088ea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	015a      	lsls	r2, r3, #5
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	4413      	add	r3, r2
 80088f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	0159      	lsls	r1, r3, #5
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	440b      	add	r3, r1
 8008902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008906:	4619      	mov	r1, r3
 8008908:	4b05      	ldr	r3, [pc, #20]	; (8008920 <USB_DeactivateEndpoint+0x1b4>)
 800890a:	4013      	ands	r3, r2
 800890c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	3714      	adds	r7, #20
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr
 800891c:	ec337800 	.word	0xec337800
 8008920:	eff37800 	.word	0xeff37800

08008924 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b08a      	sub	sp, #40	; 0x28
 8008928:	af02      	add	r7, sp, #8
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	4613      	mov	r3, r2
 8008930:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	785b      	ldrb	r3, [r3, #1]
 8008940:	2b01      	cmp	r3, #1
 8008942:	f040 815c 	bne.w	8008bfe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	695b      	ldr	r3, [r3, #20]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d132      	bne.n	80089b4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	015a      	lsls	r2, r3, #5
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	4413      	add	r3, r2
 8008956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800895a:	691b      	ldr	r3, [r3, #16]
 800895c:	69ba      	ldr	r2, [r7, #24]
 800895e:	0151      	lsls	r1, r2, #5
 8008960:	69fa      	ldr	r2, [r7, #28]
 8008962:	440a      	add	r2, r1
 8008964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008968:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800896c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008970:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	015a      	lsls	r2, r3, #5
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	4413      	add	r3, r2
 800897a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800897e:	691b      	ldr	r3, [r3, #16]
 8008980:	69ba      	ldr	r2, [r7, #24]
 8008982:	0151      	lsls	r1, r2, #5
 8008984:	69fa      	ldr	r2, [r7, #28]
 8008986:	440a      	add	r2, r1
 8008988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800898c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008990:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	015a      	lsls	r2, r3, #5
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	4413      	add	r3, r2
 800899a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800899e:	691b      	ldr	r3, [r3, #16]
 80089a0:	69ba      	ldr	r2, [r7, #24]
 80089a2:	0151      	lsls	r1, r2, #5
 80089a4:	69fa      	ldr	r2, [r7, #28]
 80089a6:	440a      	add	r2, r1
 80089a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089ac:	0cdb      	lsrs	r3, r3, #19
 80089ae:	04db      	lsls	r3, r3, #19
 80089b0:	6113      	str	r3, [r2, #16]
 80089b2:	e074      	b.n	8008a9e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	015a      	lsls	r2, r3, #5
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	4413      	add	r3, r2
 80089bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	69ba      	ldr	r2, [r7, #24]
 80089c4:	0151      	lsls	r1, r2, #5
 80089c6:	69fa      	ldr	r2, [r7, #28]
 80089c8:	440a      	add	r2, r1
 80089ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089ce:	0cdb      	lsrs	r3, r3, #19
 80089d0:	04db      	lsls	r3, r3, #19
 80089d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	015a      	lsls	r2, r3, #5
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	4413      	add	r3, r2
 80089dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	69ba      	ldr	r2, [r7, #24]
 80089e4:	0151      	lsls	r1, r2, #5
 80089e6:	69fa      	ldr	r2, [r7, #28]
 80089e8:	440a      	add	r2, r1
 80089ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80089f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80089f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	015a      	lsls	r2, r3, #5
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	4413      	add	r3, r2
 8008a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a04:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	6959      	ldr	r1, [r3, #20]
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	440b      	add	r3, r1
 8008a10:	1e59      	subs	r1, r3, #1
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	fbb1 f3f3 	udiv	r3, r1, r3
 8008a1a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008a1c:	4b9d      	ldr	r3, [pc, #628]	; (8008c94 <USB_EPStartXfer+0x370>)
 8008a1e:	400b      	ands	r3, r1
 8008a20:	69b9      	ldr	r1, [r7, #24]
 8008a22:	0148      	lsls	r0, r1, #5
 8008a24:	69f9      	ldr	r1, [r7, #28]
 8008a26:	4401      	add	r1, r0
 8008a28:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	015a      	lsls	r2, r3, #5
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	4413      	add	r3, r2
 8008a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a3c:	691a      	ldr	r2, [r3, #16]
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	695b      	ldr	r3, [r3, #20]
 8008a42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a46:	69b9      	ldr	r1, [r7, #24]
 8008a48:	0148      	lsls	r0, r1, #5
 8008a4a:	69f9      	ldr	r1, [r7, #28]
 8008a4c:	4401      	add	r1, r0
 8008a4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008a52:	4313      	orrs	r3, r2
 8008a54:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	78db      	ldrb	r3, [r3, #3]
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d11f      	bne.n	8008a9e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	015a      	lsls	r2, r3, #5
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	4413      	add	r3, r2
 8008a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a6a:	691b      	ldr	r3, [r3, #16]
 8008a6c:	69ba      	ldr	r2, [r7, #24]
 8008a6e:	0151      	lsls	r1, r2, #5
 8008a70:	69fa      	ldr	r2, [r7, #28]
 8008a72:	440a      	add	r2, r1
 8008a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a78:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008a7c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	015a      	lsls	r2, r3, #5
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	4413      	add	r3, r2
 8008a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a8a:	691b      	ldr	r3, [r3, #16]
 8008a8c:	69ba      	ldr	r2, [r7, #24]
 8008a8e:	0151      	lsls	r1, r2, #5
 8008a90:	69fa      	ldr	r2, [r7, #28]
 8008a92:	440a      	add	r2, r1
 8008a94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a9c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008a9e:	79fb      	ldrb	r3, [r7, #7]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d14b      	bne.n	8008b3c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d009      	beq.n	8008ac0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008aac:	69bb      	ldr	r3, [r7, #24]
 8008aae:	015a      	lsls	r2, r3, #5
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ab8:	461a      	mov	r2, r3
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	78db      	ldrb	r3, [r3, #3]
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d128      	bne.n	8008b1a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d110      	bne.n	8008afa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	015a      	lsls	r2, r3, #5
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	4413      	add	r3, r2
 8008ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	69ba      	ldr	r2, [r7, #24]
 8008ae8:	0151      	lsls	r1, r2, #5
 8008aea:	69fa      	ldr	r2, [r7, #28]
 8008aec:	440a      	add	r2, r1
 8008aee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008af2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008af6:	6013      	str	r3, [r2, #0]
 8008af8:	e00f      	b.n	8008b1a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	015a      	lsls	r2, r3, #5
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	4413      	add	r3, r2
 8008b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	69ba      	ldr	r2, [r7, #24]
 8008b0a:	0151      	lsls	r1, r2, #5
 8008b0c:	69fa      	ldr	r2, [r7, #28]
 8008b0e:	440a      	add	r2, r1
 8008b10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b18:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	015a      	lsls	r2, r3, #5
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	4413      	add	r3, r2
 8008b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	69ba      	ldr	r2, [r7, #24]
 8008b2a:	0151      	lsls	r1, r2, #5
 8008b2c:	69fa      	ldr	r2, [r7, #28]
 8008b2e:	440a      	add	r2, r1
 8008b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b38:	6013      	str	r3, [r2, #0]
 8008b3a:	e12f      	b.n	8008d9c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	015a      	lsls	r2, r3, #5
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	4413      	add	r3, r2
 8008b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	69ba      	ldr	r2, [r7, #24]
 8008b4c:	0151      	lsls	r1, r2, #5
 8008b4e:	69fa      	ldr	r2, [r7, #28]
 8008b50:	440a      	add	r2, r1
 8008b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b5a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	78db      	ldrb	r3, [r3, #3]
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d015      	beq.n	8008b90 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	695b      	ldr	r3, [r3, #20]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	f000 8117 	beq.w	8008d9c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	f003 030f 	and.w	r3, r3, #15
 8008b7e:	2101      	movs	r1, #1
 8008b80:	fa01 f303 	lsl.w	r3, r1, r3
 8008b84:	69f9      	ldr	r1, [r7, #28]
 8008b86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	634b      	str	r3, [r1, #52]	; 0x34
 8008b8e:	e105      	b.n	8008d9c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d110      	bne.n	8008bc2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	015a      	lsls	r2, r3, #5
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	69ba      	ldr	r2, [r7, #24]
 8008bb0:	0151      	lsls	r1, r2, #5
 8008bb2:	69fa      	ldr	r2, [r7, #28]
 8008bb4:	440a      	add	r2, r1
 8008bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008bbe:	6013      	str	r3, [r2, #0]
 8008bc0:	e00f      	b.n	8008be2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	015a      	lsls	r2, r3, #5
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	4413      	add	r3, r2
 8008bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	69ba      	ldr	r2, [r7, #24]
 8008bd2:	0151      	lsls	r1, r2, #5
 8008bd4:	69fa      	ldr	r2, [r7, #28]
 8008bd6:	440a      	add	r2, r1
 8008bd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008be0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	68d9      	ldr	r1, [r3, #12]
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	781a      	ldrb	r2, [r3, #0]
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	695b      	ldr	r3, [r3, #20]
 8008bee:	b298      	uxth	r0, r3
 8008bf0:	79fb      	ldrb	r3, [r7, #7]
 8008bf2:	9300      	str	r3, [sp, #0]
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f000 fa2b 	bl	8009052 <USB_WritePacket>
 8008bfc:	e0ce      	b.n	8008d9c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	015a      	lsls	r2, r3, #5
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	4413      	add	r3, r2
 8008c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c0a:	691b      	ldr	r3, [r3, #16]
 8008c0c:	69ba      	ldr	r2, [r7, #24]
 8008c0e:	0151      	lsls	r1, r2, #5
 8008c10:	69fa      	ldr	r2, [r7, #28]
 8008c12:	440a      	add	r2, r1
 8008c14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c18:	0cdb      	lsrs	r3, r3, #19
 8008c1a:	04db      	lsls	r3, r3, #19
 8008c1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	015a      	lsls	r2, r3, #5
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	4413      	add	r3, r2
 8008c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c2a:	691b      	ldr	r3, [r3, #16]
 8008c2c:	69ba      	ldr	r2, [r7, #24]
 8008c2e:	0151      	lsls	r1, r2, #5
 8008c30:	69fa      	ldr	r2, [r7, #28]
 8008c32:	440a      	add	r2, r1
 8008c34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c38:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c3c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c40:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	695b      	ldr	r3, [r3, #20]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d126      	bne.n	8008c98 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	015a      	lsls	r2, r3, #5
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	4413      	add	r3, r2
 8008c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c56:	691a      	ldr	r2, [r3, #16]
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c60:	69b9      	ldr	r1, [r7, #24]
 8008c62:	0148      	lsls	r0, r1, #5
 8008c64:	69f9      	ldr	r1, [r7, #28]
 8008c66:	4401      	add	r1, r0
 8008c68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c70:	69bb      	ldr	r3, [r7, #24]
 8008c72:	015a      	lsls	r2, r3, #5
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	4413      	add	r3, r2
 8008c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c7c:	691b      	ldr	r3, [r3, #16]
 8008c7e:	69ba      	ldr	r2, [r7, #24]
 8008c80:	0151      	lsls	r1, r2, #5
 8008c82:	69fa      	ldr	r2, [r7, #28]
 8008c84:	440a      	add	r2, r1
 8008c86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c8e:	6113      	str	r3, [r2, #16]
 8008c90:	e036      	b.n	8008d00 <USB_EPStartXfer+0x3dc>
 8008c92:	bf00      	nop
 8008c94:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	695a      	ldr	r2, [r3, #20]
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	1e5a      	subs	r2, r3, #1
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cac:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	015a      	lsls	r2, r3, #5
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	4413      	add	r3, r2
 8008cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cba:	691a      	ldr	r2, [r3, #16]
 8008cbc:	8afb      	ldrh	r3, [r7, #22]
 8008cbe:	04d9      	lsls	r1, r3, #19
 8008cc0:	4b39      	ldr	r3, [pc, #228]	; (8008da8 <USB_EPStartXfer+0x484>)
 8008cc2:	400b      	ands	r3, r1
 8008cc4:	69b9      	ldr	r1, [r7, #24]
 8008cc6:	0148      	lsls	r0, r1, #5
 8008cc8:	69f9      	ldr	r1, [r7, #28]
 8008cca:	4401      	add	r1, r0
 8008ccc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	015a      	lsls	r2, r3, #5
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	4413      	add	r3, r2
 8008cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce0:	691a      	ldr	r2, [r3, #16]
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	8af9      	ldrh	r1, [r7, #22]
 8008ce8:	fb01 f303 	mul.w	r3, r1, r3
 8008cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cf0:	69b9      	ldr	r1, [r7, #24]
 8008cf2:	0148      	lsls	r0, r1, #5
 8008cf4:	69f9      	ldr	r1, [r7, #28]
 8008cf6:	4401      	add	r1, r0
 8008cf8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008d00:	79fb      	ldrb	r3, [r7, #7]
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d10d      	bne.n	8008d22 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d009      	beq.n	8008d22 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	68d9      	ldr	r1, [r3, #12]
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	015a      	lsls	r2, r3, #5
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	4413      	add	r3, r2
 8008d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d1e:	460a      	mov	r2, r1
 8008d20:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	78db      	ldrb	r3, [r3, #3]
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d128      	bne.n	8008d7c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008d2a:	69fb      	ldr	r3, [r7, #28]
 8008d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d110      	bne.n	8008d5c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	015a      	lsls	r2, r3, #5
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	4413      	add	r3, r2
 8008d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	69ba      	ldr	r2, [r7, #24]
 8008d4a:	0151      	lsls	r1, r2, #5
 8008d4c:	69fa      	ldr	r2, [r7, #28]
 8008d4e:	440a      	add	r2, r1
 8008d50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008d58:	6013      	str	r3, [r2, #0]
 8008d5a:	e00f      	b.n	8008d7c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008d5c:	69bb      	ldr	r3, [r7, #24]
 8008d5e:	015a      	lsls	r2, r3, #5
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	4413      	add	r3, r2
 8008d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	69ba      	ldr	r2, [r7, #24]
 8008d6c:	0151      	lsls	r1, r2, #5
 8008d6e:	69fa      	ldr	r2, [r7, #28]
 8008d70:	440a      	add	r2, r1
 8008d72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d7a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	015a      	lsls	r2, r3, #5
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	4413      	add	r3, r2
 8008d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	69ba      	ldr	r2, [r7, #24]
 8008d8c:	0151      	lsls	r1, r2, #5
 8008d8e:	69fa      	ldr	r2, [r7, #28]
 8008d90:	440a      	add	r2, r1
 8008d92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3720      	adds	r7, #32
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop
 8008da8:	1ff80000 	.word	0x1ff80000

08008dac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b087      	sub	sp, #28
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	4613      	mov	r3, r2
 8008db8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	785b      	ldrb	r3, [r3, #1]
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	f040 80cd 	bne.w	8008f68 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	695b      	ldr	r3, [r3, #20]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d132      	bne.n	8008e3c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	015a      	lsls	r2, r3, #5
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	4413      	add	r3, r2
 8008dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008de2:	691b      	ldr	r3, [r3, #16]
 8008de4:	693a      	ldr	r2, [r7, #16]
 8008de6:	0151      	lsls	r1, r2, #5
 8008de8:	697a      	ldr	r2, [r7, #20]
 8008dea:	440a      	add	r2, r1
 8008dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008df0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008df4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008df8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	015a      	lsls	r2, r3, #5
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	4413      	add	r3, r2
 8008e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	693a      	ldr	r2, [r7, #16]
 8008e0a:	0151      	lsls	r1, r2, #5
 8008e0c:	697a      	ldr	r2, [r7, #20]
 8008e0e:	440a      	add	r2, r1
 8008e10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	015a      	lsls	r2, r3, #5
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	4413      	add	r3, r2
 8008e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e26:	691b      	ldr	r3, [r3, #16]
 8008e28:	693a      	ldr	r2, [r7, #16]
 8008e2a:	0151      	lsls	r1, r2, #5
 8008e2c:	697a      	ldr	r2, [r7, #20]
 8008e2e:	440a      	add	r2, r1
 8008e30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e34:	0cdb      	lsrs	r3, r3, #19
 8008e36:	04db      	lsls	r3, r3, #19
 8008e38:	6113      	str	r3, [r2, #16]
 8008e3a:	e04e      	b.n	8008eda <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	015a      	lsls	r2, r3, #5
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	4413      	add	r3, r2
 8008e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	693a      	ldr	r2, [r7, #16]
 8008e4c:	0151      	lsls	r1, r2, #5
 8008e4e:	697a      	ldr	r2, [r7, #20]
 8008e50:	440a      	add	r2, r1
 8008e52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e56:	0cdb      	lsrs	r3, r3, #19
 8008e58:	04db      	lsls	r3, r3, #19
 8008e5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	015a      	lsls	r2, r3, #5
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	4413      	add	r3, r2
 8008e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	693a      	ldr	r2, [r7, #16]
 8008e6c:	0151      	lsls	r1, r2, #5
 8008e6e:	697a      	ldr	r2, [r7, #20]
 8008e70:	440a      	add	r2, r1
 8008e72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e76:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e7a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e7e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	695a      	ldr	r2, [r3, #20]
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d903      	bls.n	8008e94 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	689a      	ldr	r2, [r3, #8]
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	015a      	lsls	r2, r3, #5
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	693a      	ldr	r2, [r7, #16]
 8008ea4:	0151      	lsls	r1, r2, #5
 8008ea6:	697a      	ldr	r2, [r7, #20]
 8008ea8:	440a      	add	r2, r1
 8008eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008eb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	015a      	lsls	r2, r3, #5
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	4413      	add	r3, r2
 8008ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec0:	691a      	ldr	r2, [r3, #16]
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008eca:	6939      	ldr	r1, [r7, #16]
 8008ecc:	0148      	lsls	r0, r1, #5
 8008ece:	6979      	ldr	r1, [r7, #20]
 8008ed0:	4401      	add	r1, r0
 8008ed2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008eda:	79fb      	ldrb	r3, [r7, #7]
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d11e      	bne.n	8008f1e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	691b      	ldr	r3, [r3, #16]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d009      	beq.n	8008efc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	015a      	lsls	r2, r3, #5
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	4413      	add	r3, r2
 8008ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	015a      	lsls	r2, r3, #5
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	4413      	add	r3, r2
 8008f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	693a      	ldr	r2, [r7, #16]
 8008f0c:	0151      	lsls	r1, r2, #5
 8008f0e:	697a      	ldr	r2, [r7, #20]
 8008f10:	440a      	add	r2, r1
 8008f12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f1a:	6013      	str	r3, [r2, #0]
 8008f1c:	e092      	b.n	8009044 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	015a      	lsls	r2, r3, #5
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	4413      	add	r3, r2
 8008f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	693a      	ldr	r2, [r7, #16]
 8008f2e:	0151      	lsls	r1, r2, #5
 8008f30:	697a      	ldr	r2, [r7, #20]
 8008f32:	440a      	add	r2, r1
 8008f34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f3c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	695b      	ldr	r3, [r3, #20]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d07e      	beq.n	8009044 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	f003 030f 	and.w	r3, r3, #15
 8008f56:	2101      	movs	r1, #1
 8008f58:	fa01 f303 	lsl.w	r3, r1, r3
 8008f5c:	6979      	ldr	r1, [r7, #20]
 8008f5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f62:	4313      	orrs	r3, r2
 8008f64:	634b      	str	r3, [r1, #52]	; 0x34
 8008f66:	e06d      	b.n	8009044 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	015a      	lsls	r2, r3, #5
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	4413      	add	r3, r2
 8008f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f74:	691b      	ldr	r3, [r3, #16]
 8008f76:	693a      	ldr	r2, [r7, #16]
 8008f78:	0151      	lsls	r1, r2, #5
 8008f7a:	697a      	ldr	r2, [r7, #20]
 8008f7c:	440a      	add	r2, r1
 8008f7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f82:	0cdb      	lsrs	r3, r3, #19
 8008f84:	04db      	lsls	r3, r3, #19
 8008f86:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	015a      	lsls	r2, r3, #5
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	4413      	add	r3, r2
 8008f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	693a      	ldr	r2, [r7, #16]
 8008f98:	0151      	lsls	r1, r2, #5
 8008f9a:	697a      	ldr	r2, [r7, #20]
 8008f9c:	440a      	add	r2, r1
 8008f9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fa2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008fa6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008faa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	695b      	ldr	r3, [r3, #20]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d003      	beq.n	8008fbc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	689a      	ldr	r2, [r3, #8]
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	015a      	lsls	r2, r3, #5
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fc8:	691b      	ldr	r3, [r3, #16]
 8008fca:	693a      	ldr	r2, [r7, #16]
 8008fcc:	0151      	lsls	r1, r2, #5
 8008fce:	697a      	ldr	r2, [r7, #20]
 8008fd0:	440a      	add	r2, r1
 8008fd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008fda:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	015a      	lsls	r2, r3, #5
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fe8:	691a      	ldr	r2, [r3, #16]
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ff2:	6939      	ldr	r1, [r7, #16]
 8008ff4:	0148      	lsls	r0, r1, #5
 8008ff6:	6979      	ldr	r1, [r7, #20]
 8008ff8:	4401      	add	r1, r0
 8008ffa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008ffe:	4313      	orrs	r3, r2
 8009000:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009002:	79fb      	ldrb	r3, [r7, #7]
 8009004:	2b01      	cmp	r3, #1
 8009006:	d10d      	bne.n	8009024 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d009      	beq.n	8009024 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	68d9      	ldr	r1, [r3, #12]
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	015a      	lsls	r2, r3, #5
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	4413      	add	r3, r2
 800901c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009020:	460a      	mov	r2, r1
 8009022:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	015a      	lsls	r2, r3, #5
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	4413      	add	r3, r2
 800902c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	693a      	ldr	r2, [r7, #16]
 8009034:	0151      	lsls	r1, r2, #5
 8009036:	697a      	ldr	r2, [r7, #20]
 8009038:	440a      	add	r2, r1
 800903a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800903e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009042:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009044:	2300      	movs	r3, #0
}
 8009046:	4618      	mov	r0, r3
 8009048:	371c      	adds	r7, #28
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr

08009052 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009052:	b480      	push	{r7}
 8009054:	b089      	sub	sp, #36	; 0x24
 8009056:	af00      	add	r7, sp, #0
 8009058:	60f8      	str	r0, [r7, #12]
 800905a:	60b9      	str	r1, [r7, #8]
 800905c:	4611      	mov	r1, r2
 800905e:	461a      	mov	r2, r3
 8009060:	460b      	mov	r3, r1
 8009062:	71fb      	strb	r3, [r7, #7]
 8009064:	4613      	mov	r3, r2
 8009066:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009070:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009074:	2b00      	cmp	r3, #0
 8009076:	d123      	bne.n	80090c0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009078:	88bb      	ldrh	r3, [r7, #4]
 800907a:	3303      	adds	r3, #3
 800907c:	089b      	lsrs	r3, r3, #2
 800907e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009080:	2300      	movs	r3, #0
 8009082:	61bb      	str	r3, [r7, #24]
 8009084:	e018      	b.n	80090b8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009086:	79fb      	ldrb	r3, [r7, #7]
 8009088:	031a      	lsls	r2, r3, #12
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	4413      	add	r3, r2
 800908e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009092:	461a      	mov	r2, r3
 8009094:	69fb      	ldr	r3, [r7, #28]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	6013      	str	r3, [r2, #0]
      pSrc++;
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	3301      	adds	r3, #1
 800909e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	3301      	adds	r3, #1
 80090a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	3301      	adds	r3, #1
 80090aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	3301      	adds	r3, #1
 80090b0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	3301      	adds	r3, #1
 80090b6:	61bb      	str	r3, [r7, #24]
 80090b8:	69ba      	ldr	r2, [r7, #24]
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d3e2      	bcc.n	8009086 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3724      	adds	r7, #36	; 0x24
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr

080090ce <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80090ce:	b480      	push	{r7}
 80090d0:	b08b      	sub	sp, #44	; 0x2c
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	60f8      	str	r0, [r7, #12]
 80090d6:	60b9      	str	r1, [r7, #8]
 80090d8:	4613      	mov	r3, r2
 80090da:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80090e4:	88fb      	ldrh	r3, [r7, #6]
 80090e6:	089b      	lsrs	r3, r3, #2
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80090ec:	88fb      	ldrh	r3, [r7, #6]
 80090ee:	f003 0303 	and.w	r3, r3, #3
 80090f2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80090f4:	2300      	movs	r3, #0
 80090f6:	623b      	str	r3, [r7, #32]
 80090f8:	e014      	b.n	8009124 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009104:	601a      	str	r2, [r3, #0]
    pDest++;
 8009106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009108:	3301      	adds	r3, #1
 800910a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800910c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910e:	3301      	adds	r3, #1
 8009110:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009114:	3301      	adds	r3, #1
 8009116:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911a:	3301      	adds	r3, #1
 800911c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800911e:	6a3b      	ldr	r3, [r7, #32]
 8009120:	3301      	adds	r3, #1
 8009122:	623b      	str	r3, [r7, #32]
 8009124:	6a3a      	ldr	r2, [r7, #32]
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	429a      	cmp	r2, r3
 800912a:	d3e6      	bcc.n	80090fa <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800912c:	8bfb      	ldrh	r3, [r7, #30]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d01e      	beq.n	8009170 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009132:	2300      	movs	r3, #0
 8009134:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800913c:	461a      	mov	r2, r3
 800913e:	f107 0310 	add.w	r3, r7, #16
 8009142:	6812      	ldr	r2, [r2, #0]
 8009144:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009146:	693a      	ldr	r2, [r7, #16]
 8009148:	6a3b      	ldr	r3, [r7, #32]
 800914a:	b2db      	uxtb	r3, r3
 800914c:	00db      	lsls	r3, r3, #3
 800914e:	fa22 f303 	lsr.w	r3, r2, r3
 8009152:	b2da      	uxtb	r2, r3
 8009154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009156:	701a      	strb	r2, [r3, #0]
      i++;
 8009158:	6a3b      	ldr	r3, [r7, #32]
 800915a:	3301      	adds	r3, #1
 800915c:	623b      	str	r3, [r7, #32]
      pDest++;
 800915e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009160:	3301      	adds	r3, #1
 8009162:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009164:	8bfb      	ldrh	r3, [r7, #30]
 8009166:	3b01      	subs	r3, #1
 8009168:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800916a:	8bfb      	ldrh	r3, [r7, #30]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1ea      	bne.n	8009146 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009172:	4618      	mov	r0, r3
 8009174:	372c      	adds	r7, #44	; 0x2c
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr

0800917e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800917e:	b480      	push	{r7}
 8009180:	b085      	sub	sp, #20
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
 8009186:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	785b      	ldrb	r3, [r3, #1]
 8009196:	2b01      	cmp	r3, #1
 8009198:	d12c      	bne.n	80091f4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	015a      	lsls	r2, r3, #5
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	4413      	add	r3, r2
 80091a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	db12      	blt.n	80091d2 <USB_EPSetStall+0x54>
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00f      	beq.n	80091d2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	015a      	lsls	r2, r3, #5
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	4413      	add	r3, r2
 80091ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	68ba      	ldr	r2, [r7, #8]
 80091c2:	0151      	lsls	r1, r2, #5
 80091c4:	68fa      	ldr	r2, [r7, #12]
 80091c6:	440a      	add	r2, r1
 80091c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80091d0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	015a      	lsls	r2, r3, #5
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	4413      	add	r3, r2
 80091da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	68ba      	ldr	r2, [r7, #8]
 80091e2:	0151      	lsls	r1, r2, #5
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	440a      	add	r2, r1
 80091e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80091f0:	6013      	str	r3, [r2, #0]
 80091f2:	e02b      	b.n	800924c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	015a      	lsls	r2, r3, #5
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	4413      	add	r3, r2
 80091fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	db12      	blt.n	800922c <USB_EPSetStall+0xae>
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d00f      	beq.n	800922c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	015a      	lsls	r2, r3, #5
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	4413      	add	r3, r2
 8009214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	0151      	lsls	r1, r2, #5
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	440a      	add	r2, r1
 8009222:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009226:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800922a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	015a      	lsls	r2, r3, #5
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	4413      	add	r3, r2
 8009234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	68ba      	ldr	r2, [r7, #8]
 800923c:	0151      	lsls	r1, r2, #5
 800923e:	68fa      	ldr	r2, [r7, #12]
 8009240:	440a      	add	r2, r1
 8009242:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009246:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800924a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3714      	adds	r7, #20
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr

0800925a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800925a:	b480      	push	{r7}
 800925c:	b085      	sub	sp, #20
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
 8009262:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	785b      	ldrb	r3, [r3, #1]
 8009272:	2b01      	cmp	r3, #1
 8009274:	d128      	bne.n	80092c8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	015a      	lsls	r2, r3, #5
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	4413      	add	r3, r2
 800927e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	68ba      	ldr	r2, [r7, #8]
 8009286:	0151      	lsls	r1, r2, #5
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	440a      	add	r2, r1
 800928c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009290:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009294:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	78db      	ldrb	r3, [r3, #3]
 800929a:	2b03      	cmp	r3, #3
 800929c:	d003      	beq.n	80092a6 <USB_EPClearStall+0x4c>
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	78db      	ldrb	r3, [r3, #3]
 80092a2:	2b02      	cmp	r3, #2
 80092a4:	d138      	bne.n	8009318 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	015a      	lsls	r2, r3, #5
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	4413      	add	r3, r2
 80092ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	68ba      	ldr	r2, [r7, #8]
 80092b6:	0151      	lsls	r1, r2, #5
 80092b8:	68fa      	ldr	r2, [r7, #12]
 80092ba:	440a      	add	r2, r1
 80092bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092c4:	6013      	str	r3, [r2, #0]
 80092c6:	e027      	b.n	8009318 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	015a      	lsls	r2, r3, #5
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	4413      	add	r3, r2
 80092d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	68ba      	ldr	r2, [r7, #8]
 80092d8:	0151      	lsls	r1, r2, #5
 80092da:	68fa      	ldr	r2, [r7, #12]
 80092dc:	440a      	add	r2, r1
 80092de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80092e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	78db      	ldrb	r3, [r3, #3]
 80092ec:	2b03      	cmp	r3, #3
 80092ee:	d003      	beq.n	80092f8 <USB_EPClearStall+0x9e>
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	78db      	ldrb	r3, [r3, #3]
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	d10f      	bne.n	8009318 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	015a      	lsls	r2, r3, #5
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	4413      	add	r3, r2
 8009300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	68ba      	ldr	r2, [r7, #8]
 8009308:	0151      	lsls	r1, r2, #5
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	440a      	add	r2, r1
 800930e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009316:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009318:	2300      	movs	r3, #0
}
 800931a:	4618      	mov	r0, r3
 800931c:	3714      	adds	r7, #20
 800931e:	46bd      	mov	sp, r7
 8009320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009324:	4770      	bx	lr

08009326 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009326:	b480      	push	{r7}
 8009328:	b085      	sub	sp, #20
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
 800932e:	460b      	mov	r3, r1
 8009330:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	68fa      	ldr	r2, [r7, #12]
 8009340:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009344:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009348:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	78fb      	ldrb	r3, [r7, #3]
 8009354:	011b      	lsls	r3, r3, #4
 8009356:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800935a:	68f9      	ldr	r1, [r7, #12]
 800935c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009360:	4313      	orrs	r3, r2
 8009362:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009364:	2300      	movs	r3, #0
}
 8009366:	4618      	mov	r0, r3
 8009368:	3714      	adds	r7, #20
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr

08009372 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009372:	b480      	push	{r7}
 8009374:	b085      	sub	sp, #20
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	68fa      	ldr	r2, [r7, #12]
 8009388:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800938c:	f023 0303 	bic.w	r3, r3, #3
 8009390:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	68fa      	ldr	r2, [r7, #12]
 800939c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093a0:	f023 0302 	bic.w	r3, r3, #2
 80093a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3714      	adds	r7, #20
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80093ce:	f023 0303 	bic.w	r3, r3, #3
 80093d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093e2:	f043 0302 	orr.w	r3, r3, #2
 80093e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3714      	adds	r7, #20
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr

080093f6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80093f6:	b480      	push	{r7}
 80093f8:	b085      	sub	sp, #20
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	695b      	ldr	r3, [r3, #20]
 8009402:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	699b      	ldr	r3, [r3, #24]
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	4013      	ands	r3, r2
 800940c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800940e:	68fb      	ldr	r3, [r7, #12]
}
 8009410:	4618      	mov	r0, r3
 8009412:	3714      	adds	r7, #20
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800941c:	b480      	push	{r7}
 800941e:	b085      	sub	sp, #20
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800942e:	699b      	ldr	r3, [r3, #24]
 8009430:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009438:	69db      	ldr	r3, [r3, #28]
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	4013      	ands	r3, r2
 800943e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	0c1b      	lsrs	r3, r3, #16
}
 8009444:	4618      	mov	r0, r3
 8009446:	3714      	adds	r7, #20
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009462:	699b      	ldr	r3, [r3, #24]
 8009464:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800946c:	69db      	ldr	r3, [r3, #28]
 800946e:	68ba      	ldr	r2, [r7, #8]
 8009470:	4013      	ands	r3, r2
 8009472:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	b29b      	uxth	r3, r3
}
 8009478:	4618      	mov	r0, r3
 800947a:	3714      	adds	r7, #20
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	460b      	mov	r3, r1
 800948e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009494:	78fb      	ldrb	r3, [r7, #3]
 8009496:	015a      	lsls	r2, r3, #5
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	4413      	add	r3, r2
 800949c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094aa:	695b      	ldr	r3, [r3, #20]
 80094ac:	68ba      	ldr	r2, [r7, #8]
 80094ae:	4013      	ands	r3, r2
 80094b0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80094b2:	68bb      	ldr	r3, [r7, #8]
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3714      	adds	r7, #20
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b087      	sub	sp, #28
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	460b      	mov	r3, r1
 80094ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094d6:	691b      	ldr	r3, [r3, #16]
 80094d8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80094e4:	78fb      	ldrb	r3, [r7, #3]
 80094e6:	f003 030f 	and.w	r3, r3, #15
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	fa22 f303 	lsr.w	r3, r2, r3
 80094f0:	01db      	lsls	r3, r3, #7
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	693a      	ldr	r2, [r7, #16]
 80094f6:	4313      	orrs	r3, r2
 80094f8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80094fa:	78fb      	ldrb	r3, [r7, #3]
 80094fc:	015a      	lsls	r2, r3, #5
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	4413      	add	r3, r2
 8009502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	693a      	ldr	r2, [r7, #16]
 800950a:	4013      	ands	r3, r2
 800950c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800950e:	68bb      	ldr	r3, [r7, #8]
}
 8009510:	4618      	mov	r0, r3
 8009512:	371c      	adds	r7, #28
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	695b      	ldr	r3, [r3, #20]
 8009528:	f003 0301 	and.w	r3, r3, #1
}
 800952c:	4618      	mov	r0, r3
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009538:	b480      	push	{r7}
 800953a:	b085      	sub	sp, #20
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	68fa      	ldr	r2, [r7, #12]
 800954e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009552:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009556:	f023 0307 	bic.w	r3, r3, #7
 800955a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	68fa      	ldr	r2, [r7, #12]
 8009566:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800956a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800956e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	3714      	adds	r7, #20
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr
	...

08009580 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009580:	b480      	push	{r7}
 8009582:	b087      	sub	sp, #28
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	460b      	mov	r3, r1
 800958a:	607a      	str	r2, [r7, #4]
 800958c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	333c      	adds	r3, #60	; 0x3c
 8009596:	3304      	adds	r3, #4
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	4a26      	ldr	r2, [pc, #152]	; (8009638 <USB_EP0_OutStart+0xb8>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d90a      	bls.n	80095ba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095b4:	d101      	bne.n	80095ba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80095b6:	2300      	movs	r3, #0
 80095b8:	e037      	b.n	800962a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095c0:	461a      	mov	r2, r3
 80095c2:	2300      	movs	r3, #0
 80095c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095cc:	691b      	ldr	r3, [r3, #16]
 80095ce:	697a      	ldr	r2, [r7, #20]
 80095d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80095d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095e0:	691b      	ldr	r3, [r3, #16]
 80095e2:	697a      	ldr	r2, [r7, #20]
 80095e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095e8:	f043 0318 	orr.w	r3, r3, #24
 80095ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095f4:	691b      	ldr	r3, [r3, #16]
 80095f6:	697a      	ldr	r2, [r7, #20]
 80095f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095fc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009600:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009602:	7afb      	ldrb	r3, [r7, #11]
 8009604:	2b01      	cmp	r3, #1
 8009606:	d10f      	bne.n	8009628 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800960e:	461a      	mov	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	697a      	ldr	r2, [r7, #20]
 800961e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009622:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009626:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009628:	2300      	movs	r3, #0
}
 800962a:	4618      	mov	r0, r3
 800962c:	371c      	adds	r7, #28
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr
 8009636:	bf00      	nop
 8009638:	4f54300a 	.word	0x4f54300a

0800963c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800963c:	b480      	push	{r7}
 800963e:	b085      	sub	sp, #20
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009644:	2300      	movs	r3, #0
 8009646:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	3301      	adds	r3, #1
 800964c:	60fb      	str	r3, [r7, #12]
 800964e:	4a13      	ldr	r2, [pc, #76]	; (800969c <USB_CoreReset+0x60>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d901      	bls.n	8009658 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8009654:	2303      	movs	r3, #3
 8009656:	e01a      	b.n	800968e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	691b      	ldr	r3, [r3, #16]
 800965c:	2b00      	cmp	r3, #0
 800965e:	daf3      	bge.n	8009648 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009660:	2300      	movs	r3, #0
 8009662:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	691b      	ldr	r3, [r3, #16]
 8009668:	f043 0201 	orr.w	r2, r3, #1
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	3301      	adds	r3, #1
 8009674:	60fb      	str	r3, [r7, #12]
 8009676:	4a09      	ldr	r2, [pc, #36]	; (800969c <USB_CoreReset+0x60>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d901      	bls.n	8009680 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800967c:	2303      	movs	r3, #3
 800967e:	e006      	b.n	800968e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	691b      	ldr	r3, [r3, #16]
 8009684:	f003 0301 	and.w	r3, r3, #1
 8009688:	2b01      	cmp	r3, #1
 800968a:	d0f1      	beq.n	8009670 <USB_CoreReset+0x34>

  return HAL_OK;
 800968c:	2300      	movs	r3, #0
}
 800968e:	4618      	mov	r0, r3
 8009690:	3714      	adds	r7, #20
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop
 800969c:	00030d40 	.word	0x00030d40

080096a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	460b      	mov	r3, r1
 80096aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80096ac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80096b0:	f003 fba4 	bl	800cdfc <USBD_static_malloc>
 80096b4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d105      	bne.n	80096c8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80096c4:	2302      	movs	r3, #2
 80096c6:	e066      	b.n	8009796 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	68fa      	ldr	r2, [r7, #12]
 80096cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	7c1b      	ldrb	r3, [r3, #16]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d119      	bne.n	800970c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80096d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096dc:	2202      	movs	r2, #2
 80096de:	2181      	movs	r1, #129	; 0x81
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f003 fa68 	bl	800cbb6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2201      	movs	r2, #1
 80096ea:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80096ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096f0:	2202      	movs	r2, #2
 80096f2:	2101      	movs	r1, #1
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f003 fa5e 	bl	800cbb6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2201      	movs	r2, #1
 80096fe:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2210      	movs	r2, #16
 8009706:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800970a:	e016      	b.n	800973a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800970c:	2340      	movs	r3, #64	; 0x40
 800970e:	2202      	movs	r2, #2
 8009710:	2181      	movs	r1, #129	; 0x81
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f003 fa4f 	bl	800cbb6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800971e:	2340      	movs	r3, #64	; 0x40
 8009720:	2202      	movs	r2, #2
 8009722:	2101      	movs	r1, #1
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f003 fa46 	bl	800cbb6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2201      	movs	r2, #1
 800972e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2210      	movs	r2, #16
 8009736:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800973a:	2308      	movs	r3, #8
 800973c:	2203      	movs	r2, #3
 800973e:	2182      	movs	r1, #130	; 0x82
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f003 fa38 	bl	800cbb6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2201      	movs	r2, #1
 800974a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2200      	movs	r2, #0
 800975c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2200      	movs	r2, #0
 8009764:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	7c1b      	ldrb	r3, [r3, #16]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d109      	bne.n	8009784 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009776:	f44f 7300 	mov.w	r3, #512	; 0x200
 800977a:	2101      	movs	r1, #1
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f003 fb09 	bl	800cd94 <USBD_LL_PrepareReceive>
 8009782:	e007      	b.n	8009794 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800978a:	2340      	movs	r3, #64	; 0x40
 800978c:	2101      	movs	r1, #1
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f003 fb00 	bl	800cd94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009794:	2300      	movs	r3, #0
}
 8009796:	4618      	mov	r0, r3
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800979e:	b580      	push	{r7, lr}
 80097a0:	b082      	sub	sp, #8
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
 80097a6:	460b      	mov	r3, r1
 80097a8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80097aa:	2181      	movs	r1, #129	; 0x81
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f003 fa28 	bl	800cc02 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80097b8:	2101      	movs	r1, #1
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f003 fa21 	bl	800cc02 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80097c8:	2182      	movs	r1, #130	; 0x82
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f003 fa19 	bl	800cc02 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2200      	movs	r2, #0
 80097d4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00e      	beq.n	8009808 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097fa:	4618      	mov	r0, r3
 80097fc:	f003 fb0c 	bl	800ce18 <USBD_static_free>
    pdev->pClassData = NULL;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	3708      	adds	r7, #8
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
	...

08009814 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b086      	sub	sp, #24
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009824:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009826:	2300      	movs	r3, #0
 8009828:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800982a:	2300      	movs	r3, #0
 800982c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800982e:	2300      	movs	r3, #0
 8009830:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d101      	bne.n	800983c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009838:	2303      	movs	r3, #3
 800983a:	e0af      	b.n	800999c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009844:	2b00      	cmp	r3, #0
 8009846:	d03f      	beq.n	80098c8 <USBD_CDC_Setup+0xb4>
 8009848:	2b20      	cmp	r3, #32
 800984a:	f040 809f 	bne.w	800998c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	88db      	ldrh	r3, [r3, #6]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d02e      	beq.n	80098b4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	b25b      	sxtb	r3, r3
 800985c:	2b00      	cmp	r3, #0
 800985e:	da16      	bge.n	800988e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	683a      	ldr	r2, [r7, #0]
 800986a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800986c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800986e:	683a      	ldr	r2, [r7, #0]
 8009870:	88d2      	ldrh	r2, [r2, #6]
 8009872:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	88db      	ldrh	r3, [r3, #6]
 8009878:	2b07      	cmp	r3, #7
 800987a:	bf28      	it	cs
 800987c:	2307      	movcs	r3, #7
 800987e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	89fa      	ldrh	r2, [r7, #14]
 8009884:	4619      	mov	r1, r3
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f001 fb19 	bl	800aebe <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800988c:	e085      	b.n	800999a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	785a      	ldrb	r2, [r3, #1]
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	88db      	ldrh	r3, [r3, #6]
 800989c:	b2da      	uxtb	r2, r3
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80098a4:	6939      	ldr	r1, [r7, #16]
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	88db      	ldrh	r3, [r3, #6]
 80098aa:	461a      	mov	r2, r3
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f001 fb32 	bl	800af16 <USBD_CtlPrepareRx>
      break;
 80098b2:	e072      	b.n	800999a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	683a      	ldr	r2, [r7, #0]
 80098be:	7850      	ldrb	r0, [r2, #1]
 80098c0:	2200      	movs	r2, #0
 80098c2:	6839      	ldr	r1, [r7, #0]
 80098c4:	4798      	blx	r3
      break;
 80098c6:	e068      	b.n	800999a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	785b      	ldrb	r3, [r3, #1]
 80098cc:	2b0b      	cmp	r3, #11
 80098ce:	d852      	bhi.n	8009976 <USBD_CDC_Setup+0x162>
 80098d0:	a201      	add	r2, pc, #4	; (adr r2, 80098d8 <USBD_CDC_Setup+0xc4>)
 80098d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d6:	bf00      	nop
 80098d8:	08009909 	.word	0x08009909
 80098dc:	08009985 	.word	0x08009985
 80098e0:	08009977 	.word	0x08009977
 80098e4:	08009977 	.word	0x08009977
 80098e8:	08009977 	.word	0x08009977
 80098ec:	08009977 	.word	0x08009977
 80098f0:	08009977 	.word	0x08009977
 80098f4:	08009977 	.word	0x08009977
 80098f8:	08009977 	.word	0x08009977
 80098fc:	08009977 	.word	0x08009977
 8009900:	08009933 	.word	0x08009933
 8009904:	0800995d 	.word	0x0800995d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800990e:	b2db      	uxtb	r3, r3
 8009910:	2b03      	cmp	r3, #3
 8009912:	d107      	bne.n	8009924 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009914:	f107 030a 	add.w	r3, r7, #10
 8009918:	2202      	movs	r2, #2
 800991a:	4619      	mov	r1, r3
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f001 face 	bl	800aebe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009922:	e032      	b.n	800998a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009924:	6839      	ldr	r1, [r7, #0]
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f001 fa58 	bl	800addc <USBD_CtlError>
            ret = USBD_FAIL;
 800992c:	2303      	movs	r3, #3
 800992e:	75fb      	strb	r3, [r7, #23]
          break;
 8009930:	e02b      	b.n	800998a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009938:	b2db      	uxtb	r3, r3
 800993a:	2b03      	cmp	r3, #3
 800993c:	d107      	bne.n	800994e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800993e:	f107 030d 	add.w	r3, r7, #13
 8009942:	2201      	movs	r2, #1
 8009944:	4619      	mov	r1, r3
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f001 fab9 	bl	800aebe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800994c:	e01d      	b.n	800998a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800994e:	6839      	ldr	r1, [r7, #0]
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f001 fa43 	bl	800addc <USBD_CtlError>
            ret = USBD_FAIL;
 8009956:	2303      	movs	r3, #3
 8009958:	75fb      	strb	r3, [r7, #23]
          break;
 800995a:	e016      	b.n	800998a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009962:	b2db      	uxtb	r3, r3
 8009964:	2b03      	cmp	r3, #3
 8009966:	d00f      	beq.n	8009988 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009968:	6839      	ldr	r1, [r7, #0]
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f001 fa36 	bl	800addc <USBD_CtlError>
            ret = USBD_FAIL;
 8009970:	2303      	movs	r3, #3
 8009972:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009974:	e008      	b.n	8009988 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009976:	6839      	ldr	r1, [r7, #0]
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f001 fa2f 	bl	800addc <USBD_CtlError>
          ret = USBD_FAIL;
 800997e:	2303      	movs	r3, #3
 8009980:	75fb      	strb	r3, [r7, #23]
          break;
 8009982:	e002      	b.n	800998a <USBD_CDC_Setup+0x176>
          break;
 8009984:	bf00      	nop
 8009986:	e008      	b.n	800999a <USBD_CDC_Setup+0x186>
          break;
 8009988:	bf00      	nop
      }
      break;
 800998a:	e006      	b.n	800999a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800998c:	6839      	ldr	r1, [r7, #0]
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f001 fa24 	bl	800addc <USBD_CtlError>
      ret = USBD_FAIL;
 8009994:	2303      	movs	r3, #3
 8009996:	75fb      	strb	r3, [r7, #23]
      break;
 8009998:	bf00      	nop
  }

  return (uint8_t)ret;
 800999a:	7dfb      	ldrb	r3, [r7, #23]
}
 800999c:	4618      	mov	r0, r3
 800999e:	3718      	adds	r7, #24
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	460b      	mov	r3, r1
 80099ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80099b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d101      	bne.n	80099c6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80099c2:	2303      	movs	r3, #3
 80099c4:	e04f      	b.n	8009a66 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80099cc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80099ce:	78fa      	ldrb	r2, [r7, #3]
 80099d0:	6879      	ldr	r1, [r7, #4]
 80099d2:	4613      	mov	r3, r2
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	4413      	add	r3, r2
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	440b      	add	r3, r1
 80099dc:	3318      	adds	r3, #24
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d029      	beq.n	8009a38 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80099e4:	78fa      	ldrb	r2, [r7, #3]
 80099e6:	6879      	ldr	r1, [r7, #4]
 80099e8:	4613      	mov	r3, r2
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	4413      	add	r3, r2
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	440b      	add	r3, r1
 80099f2:	3318      	adds	r3, #24
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	78f9      	ldrb	r1, [r7, #3]
 80099f8:	68f8      	ldr	r0, [r7, #12]
 80099fa:	460b      	mov	r3, r1
 80099fc:	00db      	lsls	r3, r3, #3
 80099fe:	1a5b      	subs	r3, r3, r1
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	4403      	add	r3, r0
 8009a04:	3344      	adds	r3, #68	; 0x44
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	fbb2 f1f3 	udiv	r1, r2, r3
 8009a0c:	fb03 f301 	mul.w	r3, r3, r1
 8009a10:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d110      	bne.n	8009a38 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009a16:	78fa      	ldrb	r2, [r7, #3]
 8009a18:	6879      	ldr	r1, [r7, #4]
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	4413      	add	r3, r2
 8009a20:	009b      	lsls	r3, r3, #2
 8009a22:	440b      	add	r3, r1
 8009a24:	3318      	adds	r3, #24
 8009a26:	2200      	movs	r2, #0
 8009a28:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009a2a:	78f9      	ldrb	r1, [r7, #3]
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	2200      	movs	r2, #0
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f003 f98e 	bl	800cd52 <USBD_LL_Transmit>
 8009a36:	e015      	b.n	8009a64 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a46:	691b      	ldr	r3, [r3, #16]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00b      	beq.n	8009a64 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a52:	691b      	ldr	r3, [r3, #16]
 8009a54:	68ba      	ldr	r2, [r7, #8]
 8009a56:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009a5a:	68ba      	ldr	r2, [r7, #8]
 8009a5c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009a60:	78fa      	ldrb	r2, [r7, #3]
 8009a62:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	b084      	sub	sp, #16
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
 8009a76:	460b      	mov	r3, r1
 8009a78:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a80:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d101      	bne.n	8009a90 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009a8c:	2303      	movs	r3, #3
 8009a8e:	e015      	b.n	8009abc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009a90:	78fb      	ldrb	r3, [r7, #3]
 8009a92:	4619      	mov	r1, r3
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f003 f99e 	bl	800cdd6 <USBD_LL_GetRxDataSize>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009aa8:	68db      	ldr	r3, [r3, #12]
 8009aaa:	68fa      	ldr	r2, [r7, #12]
 8009aac:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009ab0:	68fa      	ldr	r2, [r7, #12]
 8009ab2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009ab6:	4611      	mov	r1, r2
 8009ab8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009aba:	2300      	movs	r3, #0
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3710      	adds	r7, #16
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ad2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d101      	bne.n	8009ade <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009ada:	2303      	movs	r3, #3
 8009adc:	e01b      	b.n	8009b16 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d015      	beq.n	8009b14 <USBD_CDC_EP0_RxReady+0x50>
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009aee:	2bff      	cmp	r3, #255	; 0xff
 8009af0:	d010      	beq.n	8009b14 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	68fa      	ldr	r2, [r7, #12]
 8009afc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009b00:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009b02:	68fa      	ldr	r2, [r7, #12]
 8009b04:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009b08:	b292      	uxth	r2, r2
 8009b0a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	22ff      	movs	r2, #255	; 0xff
 8009b10:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009b14:	2300      	movs	r3, #0
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3710      	adds	r7, #16
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
	...

08009b20 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b083      	sub	sp, #12
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2243      	movs	r2, #67	; 0x43
 8009b2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009b2e:	4b03      	ldr	r3, [pc, #12]	; (8009b3c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr
 8009b3c:	20000090 	.word	0x20000090

08009b40 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b083      	sub	sp, #12
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2243      	movs	r2, #67	; 0x43
 8009b4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009b4e:	4b03      	ldr	r3, [pc, #12]	; (8009b5c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	370c      	adds	r7, #12
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr
 8009b5c:	2000004c 	.word	0x2000004c

08009b60 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2243      	movs	r2, #67	; 0x43
 8009b6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009b6e:	4b03      	ldr	r3, [pc, #12]	; (8009b7c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	370c      	adds	r7, #12
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr
 8009b7c:	200000d4 	.word	0x200000d4

08009b80 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	220a      	movs	r2, #10
 8009b8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009b8e:	4b03      	ldr	r3, [pc, #12]	; (8009b9c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr
 8009b9c:	20000008 	.word	0x20000008

08009ba0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b083      	sub	sp, #12
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d101      	bne.n	8009bb4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009bb0:	2303      	movs	r3, #3
 8009bb2:	e004      	b.n	8009bbe <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	683a      	ldr	r2, [r7, #0]
 8009bb8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009bbc:	2300      	movs	r3, #0
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	370c      	adds	r7, #12
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr

08009bca <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009bca:	b480      	push	{r7}
 8009bcc:	b087      	sub	sp, #28
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	60f8      	str	r0, [r7, #12]
 8009bd2:	60b9      	str	r1, [r7, #8]
 8009bd4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009bdc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d101      	bne.n	8009be8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009be4:	2303      	movs	r3, #3
 8009be6:	e008      	b.n	8009bfa <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	68ba      	ldr	r2, [r7, #8]
 8009bec:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	371c      	adds	r7, #28
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr

08009c06 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009c06:	b480      	push	{r7}
 8009c08:	b085      	sub	sp, #20
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
 8009c0e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c16:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d101      	bne.n	8009c22 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8009c1e:	2303      	movs	r3, #3
 8009c20:	e004      	b.n	8009c2c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	683a      	ldr	r2, [r7, #0]
 8009c26:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3714      	adds	r7, #20
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c46:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d101      	bne.n	8009c5a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009c56:	2303      	movs	r3, #3
 8009c58:	e01a      	b.n	8009c90 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d114      	bne.n	8009c8e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	2201      	movs	r2, #1
 8009c68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009c82:	2181      	movs	r1, #129	; 0x81
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f003 f864 	bl	800cd52 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3710      	adds	r7, #16
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b084      	sub	sp, #16
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ca6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d101      	bne.n	8009cb6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009cb2:	2303      	movs	r3, #3
 8009cb4:	e016      	b.n	8009ce4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	7c1b      	ldrb	r3, [r3, #16]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d109      	bne.n	8009cd2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009cc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cc8:	2101      	movs	r1, #1
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f003 f862 	bl	800cd94 <USBD_LL_PrepareReceive>
 8009cd0:	e007      	b.n	8009ce2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009cd8:	2340      	movs	r3, #64	; 0x40
 8009cda:	2101      	movs	r1, #1
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f003 f859 	bl	800cd94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009ce2:	2300      	movs	r3, #0
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3710      	adds	r7, #16
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b086      	sub	sp, #24
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d101      	bne.n	8009d04 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009d00:	2303      	movs	r3, #3
 8009d02:	e01f      	b.n	8009d44 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2200      	movs	r2, #0
 8009d18:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d003      	beq.n	8009d2a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	68ba      	ldr	r2, [r7, #8]
 8009d26:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	79fa      	ldrb	r2, [r7, #7]
 8009d36:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f002 fed5 	bl	800cae8 <USBD_LL_Init>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3718      	adds	r7, #24
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d56:	2300      	movs	r3, #0
 8009d58:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d101      	bne.n	8009d64 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009d60:	2303      	movs	r3, #3
 8009d62:	e016      	b.n	8009d92 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	683a      	ldr	r2, [r7, #0]
 8009d68:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d00b      	beq.n	8009d90 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d80:	f107 020e 	add.w	r2, r7, #14
 8009d84:	4610      	mov	r0, r2
 8009d86:	4798      	blx	r3
 8009d88:	4602      	mov	r2, r0
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009d90:	2300      	movs	r3, #0
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3710      	adds	r7, #16
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b082      	sub	sp, #8
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f002 feec 	bl	800cb80 <USBD_LL_Start>
 8009da8:	4603      	mov	r3, r0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3708      	adds	r7, #8
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009db2:	b480      	push	{r7}
 8009db4:	b083      	sub	sp, #12
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	370c      	adds	r7, #12
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr

08009dc8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009dd4:	2303      	movs	r3, #3
 8009dd6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d009      	beq.n	8009df6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	78fa      	ldrb	r2, [r7, #3]
 8009dec:	4611      	mov	r1, r2
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	4798      	blx	r3
 8009df2:	4603      	mov	r3, r0
 8009df4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3710      	adds	r7, #16
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	460b      	mov	r3, r1
 8009e0a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d007      	beq.n	8009e26 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	78fa      	ldrb	r2, [r7, #3]
 8009e20:	4611      	mov	r1, r2
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	4798      	blx	r3
  }

  return USBD_OK;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3708      	adds	r7, #8
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e40:	6839      	ldr	r1, [r7, #0]
 8009e42:	4618      	mov	r0, r3
 8009e44:	f000 ff90 	bl	800ad68 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009e56:	461a      	mov	r2, r3
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009e64:	f003 031f 	and.w	r3, r3, #31
 8009e68:	2b02      	cmp	r3, #2
 8009e6a:	d01a      	beq.n	8009ea2 <USBD_LL_SetupStage+0x72>
 8009e6c:	2b02      	cmp	r3, #2
 8009e6e:	d822      	bhi.n	8009eb6 <USBD_LL_SetupStage+0x86>
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d002      	beq.n	8009e7a <USBD_LL_SetupStage+0x4a>
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d00a      	beq.n	8009e8e <USBD_LL_SetupStage+0x5e>
 8009e78:	e01d      	b.n	8009eb6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e80:	4619      	mov	r1, r3
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 fa62 	bl	800a34c <USBD_StdDevReq>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8009e8c:	e020      	b.n	8009ed0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e94:	4619      	mov	r1, r3
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 fac6 	bl	800a428 <USBD_StdItfReq>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8009ea0:	e016      	b.n	8009ed0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fb05 	bl	800a4ba <USBD_StdEPReq>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8009eb4:	e00c      	b.n	8009ed0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009ebc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f002 febb 	bl	800cc40 <USBD_LL_StallEP>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	73fb      	strb	r3, [r7, #15]
      break;
 8009ece:	bf00      	nop
  }

  return ret;
 8009ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}

08009eda <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b086      	sub	sp, #24
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	60f8      	str	r0, [r7, #12]
 8009ee2:	460b      	mov	r3, r1
 8009ee4:	607a      	str	r2, [r7, #4]
 8009ee6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009ee8:	7afb      	ldrb	r3, [r7, #11]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d138      	bne.n	8009f60 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009ef4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009efc:	2b03      	cmp	r3, #3
 8009efe:	d14a      	bne.n	8009f96 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	689a      	ldr	r2, [r3, #8]
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d913      	bls.n	8009f34 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	689a      	ldr	r2, [r3, #8]
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	1ad2      	subs	r2, r2, r3
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	68da      	ldr	r2, [r3, #12]
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	4293      	cmp	r3, r2
 8009f24:	bf28      	it	cs
 8009f26:	4613      	movcs	r3, r2
 8009f28:	461a      	mov	r2, r3
 8009f2a:	6879      	ldr	r1, [r7, #4]
 8009f2c:	68f8      	ldr	r0, [r7, #12]
 8009f2e:	f001 f80f 	bl	800af50 <USBD_CtlContinueRx>
 8009f32:	e030      	b.n	8009f96 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	2b03      	cmp	r3, #3
 8009f3e:	d10b      	bne.n	8009f58 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f46:	691b      	ldr	r3, [r3, #16]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d005      	beq.n	8009f58 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f52:	691b      	ldr	r3, [r3, #16]
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009f58:	68f8      	ldr	r0, [r7, #12]
 8009f5a:	f001 f80a 	bl	800af72 <USBD_CtlSendStatus>
 8009f5e:	e01a      	b.n	8009f96 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	2b03      	cmp	r3, #3
 8009f6a:	d114      	bne.n	8009f96 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f72:	699b      	ldr	r3, [r3, #24]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d00e      	beq.n	8009f96 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f7e:	699b      	ldr	r3, [r3, #24]
 8009f80:	7afa      	ldrb	r2, [r7, #11]
 8009f82:	4611      	mov	r1, r2
 8009f84:	68f8      	ldr	r0, [r7, #12]
 8009f86:	4798      	blx	r3
 8009f88:	4603      	mov	r3, r0
 8009f8a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009f8c:	7dfb      	ldrb	r3, [r7, #23]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d001      	beq.n	8009f96 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009f92:	7dfb      	ldrb	r3, [r7, #23]
 8009f94:	e000      	b.n	8009f98 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3718      	adds	r7, #24
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b086      	sub	sp, #24
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	60f8      	str	r0, [r7, #12]
 8009fa8:	460b      	mov	r3, r1
 8009faa:	607a      	str	r2, [r7, #4]
 8009fac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009fae:	7afb      	ldrb	r3, [r7, #11]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d16b      	bne.n	800a08c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	3314      	adds	r3, #20
 8009fb8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	d156      	bne.n	800a072 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	689a      	ldr	r2, [r3, #8]
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d914      	bls.n	8009ffa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	689a      	ldr	r2, [r3, #8]
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	1ad2      	subs	r2, r2, r3
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	6879      	ldr	r1, [r7, #4]
 8009fe6:	68f8      	ldr	r0, [r7, #12]
 8009fe8:	f000 ff84 	bl	800aef4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fec:	2300      	movs	r3, #0
 8009fee:	2200      	movs	r2, #0
 8009ff0:	2100      	movs	r1, #0
 8009ff2:	68f8      	ldr	r0, [r7, #12]
 8009ff4:	f002 fece 	bl	800cd94 <USBD_LL_PrepareReceive>
 8009ff8:	e03b      	b.n	800a072 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	68da      	ldr	r2, [r3, #12]
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	429a      	cmp	r2, r3
 800a004:	d11c      	bne.n	800a040 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	685a      	ldr	r2, [r3, #4]
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a00e:	429a      	cmp	r2, r3
 800a010:	d316      	bcc.n	800a040 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	685a      	ldr	r2, [r3, #4]
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d20f      	bcs.n	800a040 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a020:	2200      	movs	r2, #0
 800a022:	2100      	movs	r1, #0
 800a024:	68f8      	ldr	r0, [r7, #12]
 800a026:	f000 ff65 	bl	800aef4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a032:	2300      	movs	r3, #0
 800a034:	2200      	movs	r2, #0
 800a036:	2100      	movs	r1, #0
 800a038:	68f8      	ldr	r0, [r7, #12]
 800a03a:	f002 feab 	bl	800cd94 <USBD_LL_PrepareReceive>
 800a03e:	e018      	b.n	800a072 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a046:	b2db      	uxtb	r3, r3
 800a048:	2b03      	cmp	r3, #3
 800a04a:	d10b      	bne.n	800a064 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d005      	beq.n	800a064 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	68f8      	ldr	r0, [r7, #12]
 800a062:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a064:	2180      	movs	r1, #128	; 0x80
 800a066:	68f8      	ldr	r0, [r7, #12]
 800a068:	f002 fdea 	bl	800cc40 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a06c:	68f8      	ldr	r0, [r7, #12]
 800a06e:	f000 ff93 	bl	800af98 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d122      	bne.n	800a0c2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a07c:	68f8      	ldr	r0, [r7, #12]
 800a07e:	f7ff fe98 	bl	8009db2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2200      	movs	r2, #0
 800a086:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a08a:	e01a      	b.n	800a0c2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a092:	b2db      	uxtb	r3, r3
 800a094:	2b03      	cmp	r3, #3
 800a096:	d114      	bne.n	800a0c2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a09e:	695b      	ldr	r3, [r3, #20]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d00e      	beq.n	800a0c2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0aa:	695b      	ldr	r3, [r3, #20]
 800a0ac:	7afa      	ldrb	r2, [r7, #11]
 800a0ae:	4611      	mov	r1, r2
 800a0b0:	68f8      	ldr	r0, [r7, #12]
 800a0b2:	4798      	blx	r3
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a0b8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d001      	beq.n	800a0c2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a0be:	7dfb      	ldrb	r3, [r7, #23]
 800a0c0:	e000      	b.n	800a0c4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a0c2:	2300      	movs	r3, #0
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3718      	adds	r7, #24
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d101      	bne.n	800a100 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a0fc:	2303      	movs	r3, #3
 800a0fe:	e02f      	b.n	800a160 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a106:	2b00      	cmp	r3, #0
 800a108:	d00f      	beq.n	800a12a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d009      	beq.n	800a12a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	6852      	ldr	r2, [r2, #4]
 800a122:	b2d2      	uxtb	r2, r2
 800a124:	4611      	mov	r1, r2
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a12a:	2340      	movs	r3, #64	; 0x40
 800a12c:	2200      	movs	r2, #0
 800a12e:	2100      	movs	r1, #0
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f002 fd40 	bl	800cbb6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2201      	movs	r2, #1
 800a13a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2240      	movs	r2, #64	; 0x40
 800a142:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a146:	2340      	movs	r3, #64	; 0x40
 800a148:	2200      	movs	r2, #0
 800a14a:	2180      	movs	r1, #128	; 0x80
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f002 fd32 	bl	800cbb6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2201      	movs	r2, #1
 800a156:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2240      	movs	r2, #64	; 0x40
 800a15c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a15e:	2300      	movs	r3, #0
}
 800a160:	4618      	mov	r0, r3
 800a162:	3708      	adds	r7, #8
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	460b      	mov	r3, r1
 800a172:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	78fa      	ldrb	r2, [r7, #3]
 800a178:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a17a:	2300      	movs	r3, #0
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	370c      	adds	r7, #12
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr

0800a188 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a196:	b2da      	uxtb	r2, r3
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2204      	movs	r2, #4
 800a1a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a1a6:	2300      	movs	r3, #0
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	370c      	adds	r7, #12
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b083      	sub	sp, #12
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	2b04      	cmp	r3, #4
 800a1c6:	d106      	bne.n	800a1d6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a1ce:	b2da      	uxtb	r2, r3
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a1d6:	2300      	movs	r3, #0
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	370c      	adds	r7, #12
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d101      	bne.n	800a1fa <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a1f6:	2303      	movs	r3, #3
 800a1f8:	e012      	b.n	800a220 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a200:	b2db      	uxtb	r3, r3
 800a202:	2b03      	cmp	r3, #3
 800a204:	d10b      	bne.n	800a21e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a20c:	69db      	ldr	r3, [r3, #28]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d005      	beq.n	800a21e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a218:	69db      	ldr	r3, [r3, #28]
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a21e:	2300      	movs	r3, #0
}
 800a220:	4618      	mov	r0, r3
 800a222:	3708      	adds	r7, #8
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	460b      	mov	r3, r1
 800a232:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d101      	bne.n	800a242 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a23e:	2303      	movs	r3, #3
 800a240:	e014      	b.n	800a26c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a248:	b2db      	uxtb	r3, r3
 800a24a:	2b03      	cmp	r3, #3
 800a24c:	d10d      	bne.n	800a26a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a254:	6a1b      	ldr	r3, [r3, #32]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d007      	beq.n	800a26a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a260:	6a1b      	ldr	r3, [r3, #32]
 800a262:	78fa      	ldrb	r2, [r7, #3]
 800a264:	4611      	mov	r1, r2
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a26a:	2300      	movs	r3, #0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3708      	adds	r7, #8
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	460b      	mov	r3, r1
 800a27e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a286:	2b00      	cmp	r3, #0
 800a288:	d101      	bne.n	800a28e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a28a:	2303      	movs	r3, #3
 800a28c:	e014      	b.n	800a2b8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a294:	b2db      	uxtb	r3, r3
 800a296:	2b03      	cmp	r3, #3
 800a298:	d10d      	bne.n	800a2b6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d007      	beq.n	800a2b6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ae:	78fa      	ldrb	r2, [r7, #3]
 800a2b0:	4611      	mov	r1, r2
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a2b6:	2300      	movs	r3, #0
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3708      	adds	r7, #8
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a2c8:	2300      	movs	r3, #0
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	370c      	adds	r7, #12
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr

0800a2d6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a2d6:	b580      	push	{r7, lr}
 800a2d8:	b082      	sub	sp, #8
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d009      	beq.n	800a304 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	6852      	ldr	r2, [r2, #4]
 800a2fc:	b2d2      	uxtb	r2, r2
 800a2fe:	4611      	mov	r1, r2
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	4798      	blx	r3
  }

  return USBD_OK;
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a30e:	b480      	push	{r7}
 800a310:	b087      	sub	sp, #28
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	3301      	adds	r3, #1
 800a324:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a32c:	8a3b      	ldrh	r3, [r7, #16]
 800a32e:	021b      	lsls	r3, r3, #8
 800a330:	b21a      	sxth	r2, r3
 800a332:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a336:	4313      	orrs	r3, r2
 800a338:	b21b      	sxth	r3, r3
 800a33a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a33c:	89fb      	ldrh	r3, [r7, #14]
}
 800a33e:	4618      	mov	r0, r3
 800a340:	371c      	adds	r7, #28
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr
	...

0800a34c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b084      	sub	sp, #16
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a356:	2300      	movs	r3, #0
 800a358:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a362:	2b40      	cmp	r3, #64	; 0x40
 800a364:	d005      	beq.n	800a372 <USBD_StdDevReq+0x26>
 800a366:	2b40      	cmp	r3, #64	; 0x40
 800a368:	d853      	bhi.n	800a412 <USBD_StdDevReq+0xc6>
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d00b      	beq.n	800a386 <USBD_StdDevReq+0x3a>
 800a36e:	2b20      	cmp	r3, #32
 800a370:	d14f      	bne.n	800a412 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a378:	689b      	ldr	r3, [r3, #8]
 800a37a:	6839      	ldr	r1, [r7, #0]
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	4798      	blx	r3
 800a380:	4603      	mov	r3, r0
 800a382:	73fb      	strb	r3, [r7, #15]
      break;
 800a384:	e04a      	b.n	800a41c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	785b      	ldrb	r3, [r3, #1]
 800a38a:	2b09      	cmp	r3, #9
 800a38c:	d83b      	bhi.n	800a406 <USBD_StdDevReq+0xba>
 800a38e:	a201      	add	r2, pc, #4	; (adr r2, 800a394 <USBD_StdDevReq+0x48>)
 800a390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a394:	0800a3e9 	.word	0x0800a3e9
 800a398:	0800a3fd 	.word	0x0800a3fd
 800a39c:	0800a407 	.word	0x0800a407
 800a3a0:	0800a3f3 	.word	0x0800a3f3
 800a3a4:	0800a407 	.word	0x0800a407
 800a3a8:	0800a3c7 	.word	0x0800a3c7
 800a3ac:	0800a3bd 	.word	0x0800a3bd
 800a3b0:	0800a407 	.word	0x0800a407
 800a3b4:	0800a3df 	.word	0x0800a3df
 800a3b8:	0800a3d1 	.word	0x0800a3d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a3bc:	6839      	ldr	r1, [r7, #0]
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 f9de 	bl	800a780 <USBD_GetDescriptor>
          break;
 800a3c4:	e024      	b.n	800a410 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a3c6:	6839      	ldr	r1, [r7, #0]
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f000 fb43 	bl	800aa54 <USBD_SetAddress>
          break;
 800a3ce:	e01f      	b.n	800a410 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a3d0:	6839      	ldr	r1, [r7, #0]
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 fb82 	bl	800aadc <USBD_SetConfig>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	73fb      	strb	r3, [r7, #15]
          break;
 800a3dc:	e018      	b.n	800a410 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a3de:	6839      	ldr	r1, [r7, #0]
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 fc21 	bl	800ac28 <USBD_GetConfig>
          break;
 800a3e6:	e013      	b.n	800a410 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a3e8:	6839      	ldr	r1, [r7, #0]
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 fc52 	bl	800ac94 <USBD_GetStatus>
          break;
 800a3f0:	e00e      	b.n	800a410 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a3f2:	6839      	ldr	r1, [r7, #0]
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 fc81 	bl	800acfc <USBD_SetFeature>
          break;
 800a3fa:	e009      	b.n	800a410 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a3fc:	6839      	ldr	r1, [r7, #0]
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f000 fc90 	bl	800ad24 <USBD_ClrFeature>
          break;
 800a404:	e004      	b.n	800a410 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a406:	6839      	ldr	r1, [r7, #0]
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f000 fce7 	bl	800addc <USBD_CtlError>
          break;
 800a40e:	bf00      	nop
      }
      break;
 800a410:	e004      	b.n	800a41c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a412:	6839      	ldr	r1, [r7, #0]
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f000 fce1 	bl	800addc <USBD_CtlError>
      break;
 800a41a:	bf00      	nop
  }

  return ret;
 800a41c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3710      	adds	r7, #16
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop

0800a428 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b084      	sub	sp, #16
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a432:	2300      	movs	r3, #0
 800a434:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a43e:	2b40      	cmp	r3, #64	; 0x40
 800a440:	d005      	beq.n	800a44e <USBD_StdItfReq+0x26>
 800a442:	2b40      	cmp	r3, #64	; 0x40
 800a444:	d82f      	bhi.n	800a4a6 <USBD_StdItfReq+0x7e>
 800a446:	2b00      	cmp	r3, #0
 800a448:	d001      	beq.n	800a44e <USBD_StdItfReq+0x26>
 800a44a:	2b20      	cmp	r3, #32
 800a44c:	d12b      	bne.n	800a4a6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a454:	b2db      	uxtb	r3, r3
 800a456:	3b01      	subs	r3, #1
 800a458:	2b02      	cmp	r3, #2
 800a45a:	d81d      	bhi.n	800a498 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	889b      	ldrh	r3, [r3, #4]
 800a460:	b2db      	uxtb	r3, r3
 800a462:	2b01      	cmp	r3, #1
 800a464:	d813      	bhi.n	800a48e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	6839      	ldr	r1, [r7, #0]
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	4798      	blx	r3
 800a474:	4603      	mov	r3, r0
 800a476:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	88db      	ldrh	r3, [r3, #6]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d110      	bne.n	800a4a2 <USBD_StdItfReq+0x7a>
 800a480:	7bfb      	ldrb	r3, [r7, #15]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d10d      	bne.n	800a4a2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f000 fd73 	bl	800af72 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a48c:	e009      	b.n	800a4a2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a48e:	6839      	ldr	r1, [r7, #0]
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 fca3 	bl	800addc <USBD_CtlError>
          break;
 800a496:	e004      	b.n	800a4a2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a498:	6839      	ldr	r1, [r7, #0]
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 fc9e 	bl	800addc <USBD_CtlError>
          break;
 800a4a0:	e000      	b.n	800a4a4 <USBD_StdItfReq+0x7c>
          break;
 800a4a2:	bf00      	nop
      }
      break;
 800a4a4:	e004      	b.n	800a4b0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a4a6:	6839      	ldr	r1, [r7, #0]
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f000 fc97 	bl	800addc <USBD_CtlError>
      break;
 800a4ae:	bf00      	nop
  }

  return ret;
 800a4b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3710      	adds	r7, #16
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}

0800a4ba <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4ba:	b580      	push	{r7, lr}
 800a4bc:	b084      	sub	sp, #16
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
 800a4c2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	889b      	ldrh	r3, [r3, #4]
 800a4cc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a4d6:	2b40      	cmp	r3, #64	; 0x40
 800a4d8:	d007      	beq.n	800a4ea <USBD_StdEPReq+0x30>
 800a4da:	2b40      	cmp	r3, #64	; 0x40
 800a4dc:	f200 8145 	bhi.w	800a76a <USBD_StdEPReq+0x2b0>
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d00c      	beq.n	800a4fe <USBD_StdEPReq+0x44>
 800a4e4:	2b20      	cmp	r3, #32
 800a4e6:	f040 8140 	bne.w	800a76a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	6839      	ldr	r1, [r7, #0]
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	4798      	blx	r3
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	73fb      	strb	r3, [r7, #15]
      break;
 800a4fc:	e13a      	b.n	800a774 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	785b      	ldrb	r3, [r3, #1]
 800a502:	2b03      	cmp	r3, #3
 800a504:	d007      	beq.n	800a516 <USBD_StdEPReq+0x5c>
 800a506:	2b03      	cmp	r3, #3
 800a508:	f300 8129 	bgt.w	800a75e <USBD_StdEPReq+0x2a4>
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d07f      	beq.n	800a610 <USBD_StdEPReq+0x156>
 800a510:	2b01      	cmp	r3, #1
 800a512:	d03c      	beq.n	800a58e <USBD_StdEPReq+0xd4>
 800a514:	e123      	b.n	800a75e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	2b02      	cmp	r3, #2
 800a520:	d002      	beq.n	800a528 <USBD_StdEPReq+0x6e>
 800a522:	2b03      	cmp	r3, #3
 800a524:	d016      	beq.n	800a554 <USBD_StdEPReq+0x9a>
 800a526:	e02c      	b.n	800a582 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a528:	7bbb      	ldrb	r3, [r7, #14]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00d      	beq.n	800a54a <USBD_StdEPReq+0x90>
 800a52e:	7bbb      	ldrb	r3, [r7, #14]
 800a530:	2b80      	cmp	r3, #128	; 0x80
 800a532:	d00a      	beq.n	800a54a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a534:	7bbb      	ldrb	r3, [r7, #14]
 800a536:	4619      	mov	r1, r3
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f002 fb81 	bl	800cc40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a53e:	2180      	movs	r1, #128	; 0x80
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f002 fb7d 	bl	800cc40 <USBD_LL_StallEP>
 800a546:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a548:	e020      	b.n	800a58c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a54a:	6839      	ldr	r1, [r7, #0]
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 fc45 	bl	800addc <USBD_CtlError>
              break;
 800a552:	e01b      	b.n	800a58c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	885b      	ldrh	r3, [r3, #2]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d10e      	bne.n	800a57a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a55c:	7bbb      	ldrb	r3, [r7, #14]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d00b      	beq.n	800a57a <USBD_StdEPReq+0xc0>
 800a562:	7bbb      	ldrb	r3, [r7, #14]
 800a564:	2b80      	cmp	r3, #128	; 0x80
 800a566:	d008      	beq.n	800a57a <USBD_StdEPReq+0xc0>
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	88db      	ldrh	r3, [r3, #6]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d104      	bne.n	800a57a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a570:	7bbb      	ldrb	r3, [r7, #14]
 800a572:	4619      	mov	r1, r3
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f002 fb63 	bl	800cc40 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f000 fcf9 	bl	800af72 <USBD_CtlSendStatus>

              break;
 800a580:	e004      	b.n	800a58c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a582:	6839      	ldr	r1, [r7, #0]
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 fc29 	bl	800addc <USBD_CtlError>
              break;
 800a58a:	bf00      	nop
          }
          break;
 800a58c:	e0ec      	b.n	800a768 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a594:	b2db      	uxtb	r3, r3
 800a596:	2b02      	cmp	r3, #2
 800a598:	d002      	beq.n	800a5a0 <USBD_StdEPReq+0xe6>
 800a59a:	2b03      	cmp	r3, #3
 800a59c:	d016      	beq.n	800a5cc <USBD_StdEPReq+0x112>
 800a59e:	e030      	b.n	800a602 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a5a0:	7bbb      	ldrb	r3, [r7, #14]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d00d      	beq.n	800a5c2 <USBD_StdEPReq+0x108>
 800a5a6:	7bbb      	ldrb	r3, [r7, #14]
 800a5a8:	2b80      	cmp	r3, #128	; 0x80
 800a5aa:	d00a      	beq.n	800a5c2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a5ac:	7bbb      	ldrb	r3, [r7, #14]
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f002 fb45 	bl	800cc40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5b6:	2180      	movs	r1, #128	; 0x80
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f002 fb41 	bl	800cc40 <USBD_LL_StallEP>
 800a5be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a5c0:	e025      	b.n	800a60e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a5c2:	6839      	ldr	r1, [r7, #0]
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 fc09 	bl	800addc <USBD_CtlError>
              break;
 800a5ca:	e020      	b.n	800a60e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	885b      	ldrh	r3, [r3, #2]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d11b      	bne.n	800a60c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a5d4:	7bbb      	ldrb	r3, [r7, #14]
 800a5d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d004      	beq.n	800a5e8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a5de:	7bbb      	ldrb	r3, [r7, #14]
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f002 fb4b 	bl	800cc7e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f000 fcc2 	bl	800af72 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5f4:	689b      	ldr	r3, [r3, #8]
 800a5f6:	6839      	ldr	r1, [r7, #0]
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	4798      	blx	r3
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a600:	e004      	b.n	800a60c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a602:	6839      	ldr	r1, [r7, #0]
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 fbe9 	bl	800addc <USBD_CtlError>
              break;
 800a60a:	e000      	b.n	800a60e <USBD_StdEPReq+0x154>
              break;
 800a60c:	bf00      	nop
          }
          break;
 800a60e:	e0ab      	b.n	800a768 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a616:	b2db      	uxtb	r3, r3
 800a618:	2b02      	cmp	r3, #2
 800a61a:	d002      	beq.n	800a622 <USBD_StdEPReq+0x168>
 800a61c:	2b03      	cmp	r3, #3
 800a61e:	d032      	beq.n	800a686 <USBD_StdEPReq+0x1cc>
 800a620:	e097      	b.n	800a752 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a622:	7bbb      	ldrb	r3, [r7, #14]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d007      	beq.n	800a638 <USBD_StdEPReq+0x17e>
 800a628:	7bbb      	ldrb	r3, [r7, #14]
 800a62a:	2b80      	cmp	r3, #128	; 0x80
 800a62c:	d004      	beq.n	800a638 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a62e:	6839      	ldr	r1, [r7, #0]
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 fbd3 	bl	800addc <USBD_CtlError>
                break;
 800a636:	e091      	b.n	800a75c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a638:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	da0b      	bge.n	800a658 <USBD_StdEPReq+0x19e>
 800a640:	7bbb      	ldrb	r3, [r7, #14]
 800a642:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a646:	4613      	mov	r3, r2
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	4413      	add	r3, r2
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	3310      	adds	r3, #16
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	4413      	add	r3, r2
 800a654:	3304      	adds	r3, #4
 800a656:	e00b      	b.n	800a670 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a658:	7bbb      	ldrb	r3, [r7, #14]
 800a65a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a65e:	4613      	mov	r3, r2
 800a660:	009b      	lsls	r3, r3, #2
 800a662:	4413      	add	r3, r2
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a66a:	687a      	ldr	r2, [r7, #4]
 800a66c:	4413      	add	r3, r2
 800a66e:	3304      	adds	r3, #4
 800a670:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	2200      	movs	r2, #0
 800a676:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	2202      	movs	r2, #2
 800a67c:	4619      	mov	r1, r3
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 fc1d 	bl	800aebe <USBD_CtlSendData>
              break;
 800a684:	e06a      	b.n	800a75c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a686:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	da11      	bge.n	800a6b2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a68e:	7bbb      	ldrb	r3, [r7, #14]
 800a690:	f003 020f 	and.w	r2, r3, #15
 800a694:	6879      	ldr	r1, [r7, #4]
 800a696:	4613      	mov	r3, r2
 800a698:	009b      	lsls	r3, r3, #2
 800a69a:	4413      	add	r3, r2
 800a69c:	009b      	lsls	r3, r3, #2
 800a69e:	440b      	add	r3, r1
 800a6a0:	3324      	adds	r3, #36	; 0x24
 800a6a2:	881b      	ldrh	r3, [r3, #0]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d117      	bne.n	800a6d8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a6a8:	6839      	ldr	r1, [r7, #0]
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 fb96 	bl	800addc <USBD_CtlError>
                  break;
 800a6b0:	e054      	b.n	800a75c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a6b2:	7bbb      	ldrb	r3, [r7, #14]
 800a6b4:	f003 020f 	and.w	r2, r3, #15
 800a6b8:	6879      	ldr	r1, [r7, #4]
 800a6ba:	4613      	mov	r3, r2
 800a6bc:	009b      	lsls	r3, r3, #2
 800a6be:	4413      	add	r3, r2
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	440b      	add	r3, r1
 800a6c4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a6c8:	881b      	ldrh	r3, [r3, #0]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d104      	bne.n	800a6d8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a6ce:	6839      	ldr	r1, [r7, #0]
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 fb83 	bl	800addc <USBD_CtlError>
                  break;
 800a6d6:	e041      	b.n	800a75c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	da0b      	bge.n	800a6f8 <USBD_StdEPReq+0x23e>
 800a6e0:	7bbb      	ldrb	r3, [r7, #14]
 800a6e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a6e6:	4613      	mov	r3, r2
 800a6e8:	009b      	lsls	r3, r3, #2
 800a6ea:	4413      	add	r3, r2
 800a6ec:	009b      	lsls	r3, r3, #2
 800a6ee:	3310      	adds	r3, #16
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	4413      	add	r3, r2
 800a6f4:	3304      	adds	r3, #4
 800a6f6:	e00b      	b.n	800a710 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a6f8:	7bbb      	ldrb	r3, [r7, #14]
 800a6fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6fe:	4613      	mov	r3, r2
 800a700:	009b      	lsls	r3, r3, #2
 800a702:	4413      	add	r3, r2
 800a704:	009b      	lsls	r3, r3, #2
 800a706:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	4413      	add	r3, r2
 800a70e:	3304      	adds	r3, #4
 800a710:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a712:	7bbb      	ldrb	r3, [r7, #14]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d002      	beq.n	800a71e <USBD_StdEPReq+0x264>
 800a718:	7bbb      	ldrb	r3, [r7, #14]
 800a71a:	2b80      	cmp	r3, #128	; 0x80
 800a71c:	d103      	bne.n	800a726 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	2200      	movs	r2, #0
 800a722:	601a      	str	r2, [r3, #0]
 800a724:	e00e      	b.n	800a744 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a726:	7bbb      	ldrb	r3, [r7, #14]
 800a728:	4619      	mov	r1, r3
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f002 fac6 	bl	800ccbc <USBD_LL_IsStallEP>
 800a730:	4603      	mov	r3, r0
 800a732:	2b00      	cmp	r3, #0
 800a734:	d003      	beq.n	800a73e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	2201      	movs	r2, #1
 800a73a:	601a      	str	r2, [r3, #0]
 800a73c:	e002      	b.n	800a744 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	2200      	movs	r2, #0
 800a742:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	2202      	movs	r2, #2
 800a748:	4619      	mov	r1, r3
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f000 fbb7 	bl	800aebe <USBD_CtlSendData>
              break;
 800a750:	e004      	b.n	800a75c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a752:	6839      	ldr	r1, [r7, #0]
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 fb41 	bl	800addc <USBD_CtlError>
              break;
 800a75a:	bf00      	nop
          }
          break;
 800a75c:	e004      	b.n	800a768 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a75e:	6839      	ldr	r1, [r7, #0]
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 fb3b 	bl	800addc <USBD_CtlError>
          break;
 800a766:	bf00      	nop
      }
      break;
 800a768:	e004      	b.n	800a774 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a76a:	6839      	ldr	r1, [r7, #0]
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f000 fb35 	bl	800addc <USBD_CtlError>
      break;
 800a772:	bf00      	nop
  }

  return ret;
 800a774:	7bfb      	ldrb	r3, [r7, #15]
}
 800a776:	4618      	mov	r0, r3
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
	...

0800a780 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a78a:	2300      	movs	r3, #0
 800a78c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a78e:	2300      	movs	r3, #0
 800a790:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a792:	2300      	movs	r3, #0
 800a794:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	885b      	ldrh	r3, [r3, #2]
 800a79a:	0a1b      	lsrs	r3, r3, #8
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	3b01      	subs	r3, #1
 800a7a0:	2b06      	cmp	r3, #6
 800a7a2:	f200 8128 	bhi.w	800a9f6 <USBD_GetDescriptor+0x276>
 800a7a6:	a201      	add	r2, pc, #4	; (adr r2, 800a7ac <USBD_GetDescriptor+0x2c>)
 800a7a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ac:	0800a7c9 	.word	0x0800a7c9
 800a7b0:	0800a7e1 	.word	0x0800a7e1
 800a7b4:	0800a821 	.word	0x0800a821
 800a7b8:	0800a9f7 	.word	0x0800a9f7
 800a7bc:	0800a9f7 	.word	0x0800a9f7
 800a7c0:	0800a997 	.word	0x0800a997
 800a7c4:	0800a9c3 	.word	0x0800a9c3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	687a      	ldr	r2, [r7, #4]
 800a7d2:	7c12      	ldrb	r2, [r2, #16]
 800a7d4:	f107 0108 	add.w	r1, r7, #8
 800a7d8:	4610      	mov	r0, r2
 800a7da:	4798      	blx	r3
 800a7dc:	60f8      	str	r0, [r7, #12]
      break;
 800a7de:	e112      	b.n	800aa06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	7c1b      	ldrb	r3, [r3, #16]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d10d      	bne.n	800a804 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7f0:	f107 0208 	add.w	r2, r7, #8
 800a7f4:	4610      	mov	r0, r2
 800a7f6:	4798      	blx	r3
 800a7f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	3301      	adds	r3, #1
 800a7fe:	2202      	movs	r2, #2
 800a800:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a802:	e100      	b.n	800aa06 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a80c:	f107 0208 	add.w	r2, r7, #8
 800a810:	4610      	mov	r0, r2
 800a812:	4798      	blx	r3
 800a814:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	3301      	adds	r3, #1
 800a81a:	2202      	movs	r2, #2
 800a81c:	701a      	strb	r2, [r3, #0]
      break;
 800a81e:	e0f2      	b.n	800aa06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	885b      	ldrh	r3, [r3, #2]
 800a824:	b2db      	uxtb	r3, r3
 800a826:	2b05      	cmp	r3, #5
 800a828:	f200 80ac 	bhi.w	800a984 <USBD_GetDescriptor+0x204>
 800a82c:	a201      	add	r2, pc, #4	; (adr r2, 800a834 <USBD_GetDescriptor+0xb4>)
 800a82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a832:	bf00      	nop
 800a834:	0800a84d 	.word	0x0800a84d
 800a838:	0800a881 	.word	0x0800a881
 800a83c:	0800a8b5 	.word	0x0800a8b5
 800a840:	0800a8e9 	.word	0x0800a8e9
 800a844:	0800a91d 	.word	0x0800a91d
 800a848:	0800a951 	.word	0x0800a951
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d00b      	beq.n	800a870 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	687a      	ldr	r2, [r7, #4]
 800a862:	7c12      	ldrb	r2, [r2, #16]
 800a864:	f107 0108 	add.w	r1, r7, #8
 800a868:	4610      	mov	r0, r2
 800a86a:	4798      	blx	r3
 800a86c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a86e:	e091      	b.n	800a994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a870:	6839      	ldr	r1, [r7, #0]
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 fab2 	bl	800addc <USBD_CtlError>
            err++;
 800a878:	7afb      	ldrb	r3, [r7, #11]
 800a87a:	3301      	adds	r3, #1
 800a87c:	72fb      	strb	r3, [r7, #11]
          break;
 800a87e:	e089      	b.n	800a994 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a886:	689b      	ldr	r3, [r3, #8]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d00b      	beq.n	800a8a4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a892:	689b      	ldr	r3, [r3, #8]
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	7c12      	ldrb	r2, [r2, #16]
 800a898:	f107 0108 	add.w	r1, r7, #8
 800a89c:	4610      	mov	r0, r2
 800a89e:	4798      	blx	r3
 800a8a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8a2:	e077      	b.n	800a994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a8a4:	6839      	ldr	r1, [r7, #0]
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 fa98 	bl	800addc <USBD_CtlError>
            err++;
 800a8ac:	7afb      	ldrb	r3, [r7, #11]
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	72fb      	strb	r3, [r7, #11]
          break;
 800a8b2:	e06f      	b.n	800a994 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8ba:	68db      	ldr	r3, [r3, #12]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d00b      	beq.n	800a8d8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8c6:	68db      	ldr	r3, [r3, #12]
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	7c12      	ldrb	r2, [r2, #16]
 800a8cc:	f107 0108 	add.w	r1, r7, #8
 800a8d0:	4610      	mov	r0, r2
 800a8d2:	4798      	blx	r3
 800a8d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8d6:	e05d      	b.n	800a994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a8d8:	6839      	ldr	r1, [r7, #0]
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 fa7e 	bl	800addc <USBD_CtlError>
            err++;
 800a8e0:	7afb      	ldrb	r3, [r7, #11]
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	72fb      	strb	r3, [r7, #11]
          break;
 800a8e6:	e055      	b.n	800a994 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8ee:	691b      	ldr	r3, [r3, #16]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d00b      	beq.n	800a90c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8fa:	691b      	ldr	r3, [r3, #16]
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	7c12      	ldrb	r2, [r2, #16]
 800a900:	f107 0108 	add.w	r1, r7, #8
 800a904:	4610      	mov	r0, r2
 800a906:	4798      	blx	r3
 800a908:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a90a:	e043      	b.n	800a994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a90c:	6839      	ldr	r1, [r7, #0]
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 fa64 	bl	800addc <USBD_CtlError>
            err++;
 800a914:	7afb      	ldrb	r3, [r7, #11]
 800a916:	3301      	adds	r3, #1
 800a918:	72fb      	strb	r3, [r7, #11]
          break;
 800a91a:	e03b      	b.n	800a994 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a922:	695b      	ldr	r3, [r3, #20]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d00b      	beq.n	800a940 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a92e:	695b      	ldr	r3, [r3, #20]
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	7c12      	ldrb	r2, [r2, #16]
 800a934:	f107 0108 	add.w	r1, r7, #8
 800a938:	4610      	mov	r0, r2
 800a93a:	4798      	blx	r3
 800a93c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a93e:	e029      	b.n	800a994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a940:	6839      	ldr	r1, [r7, #0]
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f000 fa4a 	bl	800addc <USBD_CtlError>
            err++;
 800a948:	7afb      	ldrb	r3, [r7, #11]
 800a94a:	3301      	adds	r3, #1
 800a94c:	72fb      	strb	r3, [r7, #11]
          break;
 800a94e:	e021      	b.n	800a994 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a956:	699b      	ldr	r3, [r3, #24]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d00b      	beq.n	800a974 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a962:	699b      	ldr	r3, [r3, #24]
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	7c12      	ldrb	r2, [r2, #16]
 800a968:	f107 0108 	add.w	r1, r7, #8
 800a96c:	4610      	mov	r0, r2
 800a96e:	4798      	blx	r3
 800a970:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a972:	e00f      	b.n	800a994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a974:	6839      	ldr	r1, [r7, #0]
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 fa30 	bl	800addc <USBD_CtlError>
            err++;
 800a97c:	7afb      	ldrb	r3, [r7, #11]
 800a97e:	3301      	adds	r3, #1
 800a980:	72fb      	strb	r3, [r7, #11]
          break;
 800a982:	e007      	b.n	800a994 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a984:	6839      	ldr	r1, [r7, #0]
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 fa28 	bl	800addc <USBD_CtlError>
          err++;
 800a98c:	7afb      	ldrb	r3, [r7, #11]
 800a98e:	3301      	adds	r3, #1
 800a990:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a992:	bf00      	nop
      }
      break;
 800a994:	e037      	b.n	800aa06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	7c1b      	ldrb	r3, [r3, #16]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d109      	bne.n	800a9b2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9a6:	f107 0208 	add.w	r2, r7, #8
 800a9aa:	4610      	mov	r0, r2
 800a9ac:	4798      	blx	r3
 800a9ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a9b0:	e029      	b.n	800aa06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a9b2:	6839      	ldr	r1, [r7, #0]
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f000 fa11 	bl	800addc <USBD_CtlError>
        err++;
 800a9ba:	7afb      	ldrb	r3, [r7, #11]
 800a9bc:	3301      	adds	r3, #1
 800a9be:	72fb      	strb	r3, [r7, #11]
      break;
 800a9c0:	e021      	b.n	800aa06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	7c1b      	ldrb	r3, [r3, #16]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d10d      	bne.n	800a9e6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9d2:	f107 0208 	add.w	r2, r7, #8
 800a9d6:	4610      	mov	r0, r2
 800a9d8:	4798      	blx	r3
 800a9da:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	3301      	adds	r3, #1
 800a9e0:	2207      	movs	r2, #7
 800a9e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a9e4:	e00f      	b.n	800aa06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a9e6:	6839      	ldr	r1, [r7, #0]
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f000 f9f7 	bl	800addc <USBD_CtlError>
        err++;
 800a9ee:	7afb      	ldrb	r3, [r7, #11]
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	72fb      	strb	r3, [r7, #11]
      break;
 800a9f4:	e007      	b.n	800aa06 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a9f6:	6839      	ldr	r1, [r7, #0]
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 f9ef 	bl	800addc <USBD_CtlError>
      err++;
 800a9fe:	7afb      	ldrb	r3, [r7, #11]
 800aa00:	3301      	adds	r3, #1
 800aa02:	72fb      	strb	r3, [r7, #11]
      break;
 800aa04:	bf00      	nop
  }

  if (err != 0U)
 800aa06:	7afb      	ldrb	r3, [r7, #11]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d11e      	bne.n	800aa4a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	88db      	ldrh	r3, [r3, #6]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d016      	beq.n	800aa42 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800aa14:	893b      	ldrh	r3, [r7, #8]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d00e      	beq.n	800aa38 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	88da      	ldrh	r2, [r3, #6]
 800aa1e:	893b      	ldrh	r3, [r7, #8]
 800aa20:	4293      	cmp	r3, r2
 800aa22:	bf28      	it	cs
 800aa24:	4613      	movcs	r3, r2
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aa2a:	893b      	ldrh	r3, [r7, #8]
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	68f9      	ldr	r1, [r7, #12]
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 fa44 	bl	800aebe <USBD_CtlSendData>
 800aa36:	e009      	b.n	800aa4c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800aa38:	6839      	ldr	r1, [r7, #0]
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f000 f9ce 	bl	800addc <USBD_CtlError>
 800aa40:	e004      	b.n	800aa4c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 fa95 	bl	800af72 <USBD_CtlSendStatus>
 800aa48:	e000      	b.n	800aa4c <USBD_GetDescriptor+0x2cc>
    return;
 800aa4a:	bf00      	nop
  }
}
 800aa4c:	3710      	adds	r7, #16
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop

0800aa54 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b084      	sub	sp, #16
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	889b      	ldrh	r3, [r3, #4]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d131      	bne.n	800aaca <USBD_SetAddress+0x76>
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	88db      	ldrh	r3, [r3, #6]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d12d      	bne.n	800aaca <USBD_SetAddress+0x76>
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	885b      	ldrh	r3, [r3, #2]
 800aa72:	2b7f      	cmp	r3, #127	; 0x7f
 800aa74:	d829      	bhi.n	800aaca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	885b      	ldrh	r3, [r3, #2]
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa88:	b2db      	uxtb	r3, r3
 800aa8a:	2b03      	cmp	r3, #3
 800aa8c:	d104      	bne.n	800aa98 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aa8e:	6839      	ldr	r1, [r7, #0]
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f000 f9a3 	bl	800addc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa96:	e01d      	b.n	800aad4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	7bfa      	ldrb	r2, [r7, #15]
 800aa9c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aaa0:	7bfb      	ldrb	r3, [r7, #15]
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f002 f935 	bl	800cd14 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f000 fa61 	bl	800af72 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aab0:	7bfb      	ldrb	r3, [r7, #15]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d004      	beq.n	800aac0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2202      	movs	r2, #2
 800aaba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aabe:	e009      	b.n	800aad4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2201      	movs	r2, #1
 800aac4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aac8:	e004      	b.n	800aad4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aaca:	6839      	ldr	r1, [r7, #0]
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f000 f985 	bl	800addc <USBD_CtlError>
  }
}
 800aad2:	bf00      	nop
 800aad4:	bf00      	nop
 800aad6:	3710      	adds	r7, #16
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aae6:	2300      	movs	r3, #0
 800aae8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	885b      	ldrh	r3, [r3, #2]
 800aaee:	b2da      	uxtb	r2, r3
 800aaf0:	4b4c      	ldr	r3, [pc, #304]	; (800ac24 <USBD_SetConfig+0x148>)
 800aaf2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aaf4:	4b4b      	ldr	r3, [pc, #300]	; (800ac24 <USBD_SetConfig+0x148>)
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d905      	bls.n	800ab08 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800aafc:	6839      	ldr	r1, [r7, #0]
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f000 f96c 	bl	800addc <USBD_CtlError>
    return USBD_FAIL;
 800ab04:	2303      	movs	r3, #3
 800ab06:	e088      	b.n	800ac1a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	2b02      	cmp	r3, #2
 800ab12:	d002      	beq.n	800ab1a <USBD_SetConfig+0x3e>
 800ab14:	2b03      	cmp	r3, #3
 800ab16:	d025      	beq.n	800ab64 <USBD_SetConfig+0x88>
 800ab18:	e071      	b.n	800abfe <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ab1a:	4b42      	ldr	r3, [pc, #264]	; (800ac24 <USBD_SetConfig+0x148>)
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d01c      	beq.n	800ab5c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800ab22:	4b40      	ldr	r3, [pc, #256]	; (800ac24 <USBD_SetConfig+0x148>)
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	461a      	mov	r2, r3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ab2c:	4b3d      	ldr	r3, [pc, #244]	; (800ac24 <USBD_SetConfig+0x148>)
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	4619      	mov	r1, r3
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f7ff f948 	bl	8009dc8 <USBD_SetClassConfig>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ab3c:	7bfb      	ldrb	r3, [r7, #15]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d004      	beq.n	800ab4c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ab42:	6839      	ldr	r1, [r7, #0]
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f000 f949 	bl	800addc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ab4a:	e065      	b.n	800ac18 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 fa10 	bl	800af72 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2203      	movs	r2, #3
 800ab56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ab5a:	e05d      	b.n	800ac18 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 fa08 	bl	800af72 <USBD_CtlSendStatus>
      break;
 800ab62:	e059      	b.n	800ac18 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ab64:	4b2f      	ldr	r3, [pc, #188]	; (800ac24 <USBD_SetConfig+0x148>)
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d112      	bne.n	800ab92 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2202      	movs	r2, #2
 800ab70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ab74:	4b2b      	ldr	r3, [pc, #172]	; (800ac24 <USBD_SetConfig+0x148>)
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	461a      	mov	r2, r3
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ab7e:	4b29      	ldr	r3, [pc, #164]	; (800ac24 <USBD_SetConfig+0x148>)
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	4619      	mov	r1, r3
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f7ff f93b 	bl	8009e00 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f000 f9f1 	bl	800af72 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ab90:	e042      	b.n	800ac18 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800ab92:	4b24      	ldr	r3, [pc, #144]	; (800ac24 <USBD_SetConfig+0x148>)
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	461a      	mov	r2, r3
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d02a      	beq.n	800abf6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	4619      	mov	r1, r3
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f7ff f929 	bl	8009e00 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800abae:	4b1d      	ldr	r3, [pc, #116]	; (800ac24 <USBD_SetConfig+0x148>)
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	461a      	mov	r2, r3
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800abb8:	4b1a      	ldr	r3, [pc, #104]	; (800ac24 <USBD_SetConfig+0x148>)
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	4619      	mov	r1, r3
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f7ff f902 	bl	8009dc8 <USBD_SetClassConfig>
 800abc4:	4603      	mov	r3, r0
 800abc6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800abc8:	7bfb      	ldrb	r3, [r7, #15]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d00f      	beq.n	800abee <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800abce:	6839      	ldr	r1, [r7, #0]
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 f903 	bl	800addc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	4619      	mov	r1, r3
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f7ff f90e 	bl	8009e00 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2202      	movs	r2, #2
 800abe8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800abec:	e014      	b.n	800ac18 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 f9bf 	bl	800af72 <USBD_CtlSendStatus>
      break;
 800abf4:	e010      	b.n	800ac18 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f000 f9bb 	bl	800af72 <USBD_CtlSendStatus>
      break;
 800abfc:	e00c      	b.n	800ac18 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800abfe:	6839      	ldr	r1, [r7, #0]
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f000 f8eb 	bl	800addc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ac06:	4b07      	ldr	r3, [pc, #28]	; (800ac24 <USBD_SetConfig+0x148>)
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	4619      	mov	r1, r3
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f7ff f8f7 	bl	8009e00 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ac12:	2303      	movs	r3, #3
 800ac14:	73fb      	strb	r3, [r7, #15]
      break;
 800ac16:	bf00      	nop
  }

  return ret;
 800ac18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3710      	adds	r7, #16
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}
 800ac22:	bf00      	nop
 800ac24:	2000036c 	.word	0x2000036c

0800ac28 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	88db      	ldrh	r3, [r3, #6]
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	d004      	beq.n	800ac44 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ac3a:	6839      	ldr	r1, [r7, #0]
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 f8cd 	bl	800addc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ac42:	e023      	b.n	800ac8c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac4a:	b2db      	uxtb	r3, r3
 800ac4c:	2b02      	cmp	r3, #2
 800ac4e:	dc02      	bgt.n	800ac56 <USBD_GetConfig+0x2e>
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	dc03      	bgt.n	800ac5c <USBD_GetConfig+0x34>
 800ac54:	e015      	b.n	800ac82 <USBD_GetConfig+0x5a>
 800ac56:	2b03      	cmp	r3, #3
 800ac58:	d00b      	beq.n	800ac72 <USBD_GetConfig+0x4a>
 800ac5a:	e012      	b.n	800ac82 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	3308      	adds	r3, #8
 800ac66:	2201      	movs	r2, #1
 800ac68:	4619      	mov	r1, r3
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 f927 	bl	800aebe <USBD_CtlSendData>
        break;
 800ac70:	e00c      	b.n	800ac8c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	3304      	adds	r3, #4
 800ac76:	2201      	movs	r2, #1
 800ac78:	4619      	mov	r1, r3
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f000 f91f 	bl	800aebe <USBD_CtlSendData>
        break;
 800ac80:	e004      	b.n	800ac8c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ac82:	6839      	ldr	r1, [r7, #0]
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f000 f8a9 	bl	800addc <USBD_CtlError>
        break;
 800ac8a:	bf00      	nop
}
 800ac8c:	bf00      	nop
 800ac8e:	3708      	adds	r7, #8
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aca4:	b2db      	uxtb	r3, r3
 800aca6:	3b01      	subs	r3, #1
 800aca8:	2b02      	cmp	r3, #2
 800acaa:	d81e      	bhi.n	800acea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	88db      	ldrh	r3, [r3, #6]
 800acb0:	2b02      	cmp	r3, #2
 800acb2:	d004      	beq.n	800acbe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800acb4:	6839      	ldr	r1, [r7, #0]
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 f890 	bl	800addc <USBD_CtlError>
        break;
 800acbc:	e01a      	b.n	800acf4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2201      	movs	r2, #1
 800acc2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800acca:	2b00      	cmp	r3, #0
 800accc:	d005      	beq.n	800acda <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	68db      	ldr	r3, [r3, #12]
 800acd2:	f043 0202 	orr.w	r2, r3, #2
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	330c      	adds	r3, #12
 800acde:	2202      	movs	r2, #2
 800ace0:	4619      	mov	r1, r3
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f000 f8eb 	bl	800aebe <USBD_CtlSendData>
      break;
 800ace8:	e004      	b.n	800acf4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800acea:	6839      	ldr	r1, [r7, #0]
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f000 f875 	bl	800addc <USBD_CtlError>
      break;
 800acf2:	bf00      	nop
  }
}
 800acf4:	bf00      	nop
 800acf6:	3708      	adds	r7, #8
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b082      	sub	sp, #8
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	885b      	ldrh	r3, [r3, #2]
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d106      	bne.n	800ad1c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2201      	movs	r2, #1
 800ad12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 f92b 	bl	800af72 <USBD_CtlSendStatus>
  }
}
 800ad1c:	bf00      	nop
 800ad1e:	3708      	adds	r7, #8
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b082      	sub	sp, #8
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	3b01      	subs	r3, #1
 800ad38:	2b02      	cmp	r3, #2
 800ad3a:	d80b      	bhi.n	800ad54 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	885b      	ldrh	r3, [r3, #2]
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d10c      	bne.n	800ad5e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2200      	movs	r2, #0
 800ad48:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f000 f910 	bl	800af72 <USBD_CtlSendStatus>
      }
      break;
 800ad52:	e004      	b.n	800ad5e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ad54:	6839      	ldr	r1, [r7, #0]
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 f840 	bl	800addc <USBD_CtlError>
      break;
 800ad5c:	e000      	b.n	800ad60 <USBD_ClrFeature+0x3c>
      break;
 800ad5e:	bf00      	nop
  }
}
 800ad60:	bf00      	nop
 800ad62:	3708      	adds	r7, #8
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b084      	sub	sp, #16
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	781a      	ldrb	r2, [r3, #0]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	3301      	adds	r3, #1
 800ad82:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	781a      	ldrb	r2, [r3, #0]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	3301      	adds	r3, #1
 800ad90:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ad92:	68f8      	ldr	r0, [r7, #12]
 800ad94:	f7ff fabb 	bl	800a30e <SWAPBYTE>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	3301      	adds	r3, #1
 800ada4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	3301      	adds	r3, #1
 800adaa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800adac:	68f8      	ldr	r0, [r7, #12]
 800adae:	f7ff faae 	bl	800a30e <SWAPBYTE>
 800adb2:	4603      	mov	r3, r0
 800adb4:	461a      	mov	r2, r3
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	3301      	adds	r3, #1
 800adbe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	3301      	adds	r3, #1
 800adc4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800adc6:	68f8      	ldr	r0, [r7, #12]
 800adc8:	f7ff faa1 	bl	800a30e <SWAPBYTE>
 800adcc:	4603      	mov	r3, r0
 800adce:	461a      	mov	r2, r3
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	80da      	strh	r2, [r3, #6]
}
 800add4:	bf00      	nop
 800add6:	3710      	adds	r7, #16
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ade6:	2180      	movs	r1, #128	; 0x80
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f001 ff29 	bl	800cc40 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800adee:	2100      	movs	r1, #0
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f001 ff25 	bl	800cc40 <USBD_LL_StallEP>
}
 800adf6:	bf00      	nop
 800adf8:	3708      	adds	r7, #8
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}

0800adfe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800adfe:	b580      	push	{r7, lr}
 800ae00:	b086      	sub	sp, #24
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	60f8      	str	r0, [r7, #12]
 800ae06:	60b9      	str	r1, [r7, #8]
 800ae08:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d036      	beq.n	800ae82 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ae18:	6938      	ldr	r0, [r7, #16]
 800ae1a:	f000 f836 	bl	800ae8a <USBD_GetLen>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	3301      	adds	r3, #1
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	005b      	lsls	r3, r3, #1
 800ae26:	b29a      	uxth	r2, r3
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ae2c:	7dfb      	ldrb	r3, [r7, #23]
 800ae2e:	68ba      	ldr	r2, [r7, #8]
 800ae30:	4413      	add	r3, r2
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	7812      	ldrb	r2, [r2, #0]
 800ae36:	701a      	strb	r2, [r3, #0]
  idx++;
 800ae38:	7dfb      	ldrb	r3, [r7, #23]
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ae3e:	7dfb      	ldrb	r3, [r7, #23]
 800ae40:	68ba      	ldr	r2, [r7, #8]
 800ae42:	4413      	add	r3, r2
 800ae44:	2203      	movs	r2, #3
 800ae46:	701a      	strb	r2, [r3, #0]
  idx++;
 800ae48:	7dfb      	ldrb	r3, [r7, #23]
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ae4e:	e013      	b.n	800ae78 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ae50:	7dfb      	ldrb	r3, [r7, #23]
 800ae52:	68ba      	ldr	r2, [r7, #8]
 800ae54:	4413      	add	r3, r2
 800ae56:	693a      	ldr	r2, [r7, #16]
 800ae58:	7812      	ldrb	r2, [r2, #0]
 800ae5a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	3301      	adds	r3, #1
 800ae60:	613b      	str	r3, [r7, #16]
    idx++;
 800ae62:	7dfb      	ldrb	r3, [r7, #23]
 800ae64:	3301      	adds	r3, #1
 800ae66:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ae68:	7dfb      	ldrb	r3, [r7, #23]
 800ae6a:	68ba      	ldr	r2, [r7, #8]
 800ae6c:	4413      	add	r3, r2
 800ae6e:	2200      	movs	r2, #0
 800ae70:	701a      	strb	r2, [r3, #0]
    idx++;
 800ae72:	7dfb      	ldrb	r3, [r7, #23]
 800ae74:	3301      	adds	r3, #1
 800ae76:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d1e7      	bne.n	800ae50 <USBD_GetString+0x52>
 800ae80:	e000      	b.n	800ae84 <USBD_GetString+0x86>
    return;
 800ae82:	bf00      	nop
  }
}
 800ae84:	3718      	adds	r7, #24
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}

0800ae8a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ae8a:	b480      	push	{r7}
 800ae8c:	b085      	sub	sp, #20
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ae92:	2300      	movs	r3, #0
 800ae94:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ae9a:	e005      	b.n	800aea8 <USBD_GetLen+0x1e>
  {
    len++;
 800ae9c:	7bfb      	ldrb	r3, [r7, #15]
 800ae9e:	3301      	adds	r3, #1
 800aea0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	3301      	adds	r3, #1
 800aea6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d1f5      	bne.n	800ae9c <USBD_GetLen+0x12>
  }

  return len;
 800aeb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3714      	adds	r7, #20
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr

0800aebe <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b084      	sub	sp, #16
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	60f8      	str	r0, [r7, #12]
 800aec6:	60b9      	str	r1, [r7, #8]
 800aec8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2202      	movs	r2, #2
 800aece:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	687a      	ldr	r2, [r7, #4]
 800aed6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	68ba      	ldr	r2, [r7, #8]
 800aee2:	2100      	movs	r1, #0
 800aee4:	68f8      	ldr	r0, [r7, #12]
 800aee6:	f001 ff34 	bl	800cd52 <USBD_LL_Transmit>

  return USBD_OK;
 800aeea:	2300      	movs	r3, #0
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3710      	adds	r7, #16
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	60b9      	str	r1, [r7, #8]
 800aefe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	68ba      	ldr	r2, [r7, #8]
 800af04:	2100      	movs	r1, #0
 800af06:	68f8      	ldr	r0, [r7, #12]
 800af08:	f001 ff23 	bl	800cd52 <USBD_LL_Transmit>

  return USBD_OK;
 800af0c:	2300      	movs	r3, #0
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3710      	adds	r7, #16
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}

0800af16 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800af16:	b580      	push	{r7, lr}
 800af18:	b084      	sub	sp, #16
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	60f8      	str	r0, [r7, #12]
 800af1e:	60b9      	str	r1, [r7, #8]
 800af20:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2203      	movs	r2, #3
 800af26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	687a      	ldr	r2, [r7, #4]
 800af36:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	68ba      	ldr	r2, [r7, #8]
 800af3e:	2100      	movs	r1, #0
 800af40:	68f8      	ldr	r0, [r7, #12]
 800af42:	f001 ff27 	bl	800cd94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af46:	2300      	movs	r3, #0
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3710      	adds	r7, #16
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	68ba      	ldr	r2, [r7, #8]
 800af60:	2100      	movs	r1, #0
 800af62:	68f8      	ldr	r0, [r7, #12]
 800af64:	f001 ff16 	bl	800cd94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af68:	2300      	movs	r3, #0
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3710      	adds	r7, #16
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}

0800af72 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800af72:	b580      	push	{r7, lr}
 800af74:	b082      	sub	sp, #8
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2204      	movs	r2, #4
 800af7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800af82:	2300      	movs	r3, #0
 800af84:	2200      	movs	r2, #0
 800af86:	2100      	movs	r1, #0
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f001 fee2 	bl	800cd52 <USBD_LL_Transmit>

  return USBD_OK;
 800af8e:	2300      	movs	r3, #0
}
 800af90:	4618      	mov	r0, r3
 800af92:	3708      	adds	r7, #8
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b082      	sub	sp, #8
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2205      	movs	r2, #5
 800afa4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800afa8:	2300      	movs	r3, #0
 800afaa:	2200      	movs	r2, #0
 800afac:	2100      	movs	r1, #0
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f001 fef0 	bl	800cd94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800afb4:	2300      	movs	r3, #0
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3708      	adds	r7, #8
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
	...

0800afc0 <ApplicationPerform>:


/* Interfaced functions */

void ApplicationPerform()
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	af00      	add	r7, sp, #0

	switch(kApplicationBase.eApplicationState)
 800afc4:	4b19      	ldr	r3, [pc, #100]	; (800b02c <ApplicationPerform+0x6c>)
 800afc6:	7e5b      	ldrb	r3, [r3, #25]
 800afc8:	b2db      	uxtb	r3, r3
 800afca:	2b03      	cmp	r3, #3
 800afcc:	d826      	bhi.n	800b01c <ApplicationPerform+0x5c>
 800afce:	a201      	add	r2, pc, #4	; (adr r2, 800afd4 <ApplicationPerform+0x14>)
 800afd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd4:	0800afe5 	.word	0x0800afe5
 800afd8:	0800aff3 	.word	0x0800aff3
 800afdc:	0800b017 	.word	0x0800b017
 800afe0:	0800b025 	.word	0x0800b025
	{
	case eApp_EntryState:
		OperateLED_A(eLED_On);
 800afe4:	2000      	movs	r0, #0
 800afe6:	f7f5 ff63 	bl	8000eb0 <OperateLED_A>
		AppStateChangeRequest(eApp_Initialization);
 800afea:	2001      	movs	r0, #1
 800afec:	f000 f8b4 	bl	800b158 <AppStateChangeRequest>
		break;
 800aff0:	e019      	b.n	800b026 <ApplicationPerform+0x66>

	case eApp_Initialization:
		AppEnableResetTaskTimers();
 800aff2:	f000 f8fd 	bl	800b1f0 <AppEnableResetTaskTimers>
		TempCollect_Initialize();
 800aff6:	f000 fc69 	bl	800b8cc <TempCollect_Initialize>
		DataHandler_Initialize();
 800affa:	f000 f93d 	bl	800b278 <DataHandler_Initialize>
		CommManager_Initialize();
 800affe:	f000 fca1 	bl	800b944 <CommManager_Initialize>
		EventSystem_Initialize();
 800b002:	f000 fb15 	bl	800b630 <EventSystem_Initialize>
		TurnAllSensorOn();
 800b006:	f7f5 ffdb 	bl	8000fc0 <TurnAllSensorOn>
		TurnOnSynchronousEvent(); //todo: add actual on/off functionality to synchronous timers
 800b00a:	f000 f92d 	bl	800b268 <TurnOnSynchronousEvent>
		AppStateChangeRequest(eApp_Perform);
 800b00e:	2002      	movs	r0, #2
 800b010:	f000 f8a2 	bl	800b158 <AppStateChangeRequest>
		break;
 800b014:	e007      	b.n	800b026 <ApplicationPerform+0x66>

	case eApp_Perform:
		AsynchronousTaskScheduler();
 800b016:	f000 f86f 	bl	800b0f8 <AsynchronousTaskScheduler>
		break;
 800b01a:	e004      	b.n	800b026 <ApplicationPerform+0x66>

	case eApp_Shutdown:
		break;

	default:
		AssertError(AppError_AppDefaultStateEntryError);
 800b01c:	2010      	movs	r0, #16
 800b01e:	f000 f90f 	bl	800b240 <AssertError>
		break;
 800b022:	e000      	b.n	800b026 <ApplicationPerform+0x66>
		break;
 800b024:	bf00      	nop
	}

}
 800b026:	bf00      	nop
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	20000370 	.word	0x20000370

0800b030 <AsynchronousTaskTimerUpdate>:

void AsynchronousTaskTimerUpdate()
{
 800b030:	b480      	push	{r7}
 800b032:	af00      	add	r7, sp, #0
	if(kApplicationBase.sAsyncTimers.s1000ms.bEnabledFlag)
 800b034:	4b20      	ldr	r3, [pc, #128]	; (800b0b8 <AsynchronousTaskTimerUpdate+0x88>)
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	b2db      	uxtb	r3, r3
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d006      	beq.n	800b04c <AsynchronousTaskTimerUpdate+0x1c>
	{
		kApplicationBase.sAsyncTimers.s1000ms.u16Counter++;
 800b03e:	4b1e      	ldr	r3, [pc, #120]	; (800b0b8 <AsynchronousTaskTimerUpdate+0x88>)
 800b040:	885b      	ldrh	r3, [r3, #2]
 800b042:	b29b      	uxth	r3, r3
 800b044:	3301      	adds	r3, #1
 800b046:	b29a      	uxth	r2, r3
 800b048:	4b1b      	ldr	r3, [pc, #108]	; (800b0b8 <AsynchronousTaskTimerUpdate+0x88>)
 800b04a:	805a      	strh	r2, [r3, #2]
	}
	if(kApplicationBase.sAsyncTimers.s100ms.bEnabledFlag)
 800b04c:	4b1a      	ldr	r3, [pc, #104]	; (800b0b8 <AsynchronousTaskTimerUpdate+0x88>)
 800b04e:	791b      	ldrb	r3, [r3, #4]
 800b050:	b2db      	uxtb	r3, r3
 800b052:	2b00      	cmp	r3, #0
 800b054:	d006      	beq.n	800b064 <AsynchronousTaskTimerUpdate+0x34>
	{
		kApplicationBase.sAsyncTimers.s100ms.u16Counter++;
 800b056:	4b18      	ldr	r3, [pc, #96]	; (800b0b8 <AsynchronousTaskTimerUpdate+0x88>)
 800b058:	88db      	ldrh	r3, [r3, #6]
 800b05a:	b29b      	uxth	r3, r3
 800b05c:	3301      	adds	r3, #1
 800b05e:	b29a      	uxth	r2, r3
 800b060:	4b15      	ldr	r3, [pc, #84]	; (800b0b8 <AsynchronousTaskTimerUpdate+0x88>)
 800b062:	80da      	strh	r2, [r3, #6]
	}
	if(kApplicationBase.sAsyncTimers.s10ms.bEnabledFlag)
 800b064:	4b14      	ldr	r3, [pc, #80]	; (800b0b8 <AsynchronousTaskTimerUpdate+0x88>)
 800b066:	7a1b      	ldrb	r3, [r3, #8]
 800b068:	b2db      	uxtb	r3, r3
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d006      	beq.n	800b07c <AsynchronousTaskTimerUpdate+0x4c>
	{
		kApplicationBase.sAsyncTimers.s10ms.u16Counter++;
 800b06e:	4b12      	ldr	r3, [pc, #72]	; (800b0b8 <AsynchronousTaskTimerUpdate+0x88>)
 800b070:	895b      	ldrh	r3, [r3, #10]
 800b072:	b29b      	uxth	r3, r3
 800b074:	3301      	adds	r3, #1
 800b076:	b29a      	uxth	r2, r3
 800b078:	4b0f      	ldr	r3, [pc, #60]	; (800b0b8 <AsynchronousTaskTimerUpdate+0x88>)
 800b07a:	815a      	strh	r2, [r3, #10]
	}
	if(kApplicationBase.sAsyncTimers.s1ms.bEnabledFlag)
 800b07c:	4b0e      	ldr	r3, [pc, #56]	; (800b0b8 <AsynchronousTaskTimerUpdate+0x88>)
 800b07e:	7b1b      	ldrb	r3, [r3, #12]
 800b080:	b2db      	uxtb	r3, r3
 800b082:	2b00      	cmp	r3, #0
 800b084:	d006      	beq.n	800b094 <AsynchronousTaskTimerUpdate+0x64>
	{
		kApplicationBase.sAsyncTimers.s1ms.u16Counter++;
 800b086:	4b0c      	ldr	r3, [pc, #48]	; (800b0b8 <AsynchronousTaskTimerUpdate+0x88>)
 800b088:	89db      	ldrh	r3, [r3, #14]
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	3301      	adds	r3, #1
 800b08e:	b29a      	uxth	r2, r3
 800b090:	4b09      	ldr	r3, [pc, #36]	; (800b0b8 <AsynchronousTaskTimerUpdate+0x88>)
 800b092:	81da      	strh	r2, [r3, #14]
	}
	if(kApplicationBase.sAsyncTimers.s500us.bEnabledFlag)
 800b094:	4b08      	ldr	r3, [pc, #32]	; (800b0b8 <AsynchronousTaskTimerUpdate+0x88>)
 800b096:	7c1b      	ldrb	r3, [r3, #16]
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d006      	beq.n	800b0ac <AsynchronousTaskTimerUpdate+0x7c>
	{
		kApplicationBase.sAsyncTimers.s500us.u16Counter++;
 800b09e:	4b06      	ldr	r3, [pc, #24]	; (800b0b8 <AsynchronousTaskTimerUpdate+0x88>)
 800b0a0:	8a5b      	ldrh	r3, [r3, #18]
 800b0a2:	b29b      	uxth	r3, r3
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	b29a      	uxth	r2, r3
 800b0a8:	4b03      	ldr	r3, [pc, #12]	; (800b0b8 <AsynchronousTaskTimerUpdate+0x88>)
 800b0aa:	825a      	strh	r2, [r3, #18]
	}

}
 800b0ac:	bf00      	nop
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr
 800b0b6:	bf00      	nop
 800b0b8:	20000370 	.word	0x20000370

0800b0bc <AsynchronousTask_1ms>:

/* Internal functions */

void AsynchronousTask_1ms()
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	af00      	add	r7, sp, #0
	EventSystem_HandleEvent();
 800b0c0:	f000 fac2 	bl	800b648 <EventSystem_HandleEvent>
	CommManager_Operate();
 800b0c4:	f000 fc4a 	bl	800b95c <CommManager_Operate>
}
 800b0c8:	bf00      	nop
 800b0ca:	bd80      	pop	{r7, pc}

0800b0cc <AsynchronousTask_10ms>:

void AsynchronousTask_10ms()
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	af00      	add	r7, sp, #0
	TempCollect_Operate();
 800b0d0:	f000 fb04 	bl	800b6dc <TempCollect_Operate>
}
 800b0d4:	bf00      	nop
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <AsynchronousTask_100ms>:

void AsynchronousTask_100ms()
{
 800b0d8:	b480      	push	{r7}
 800b0da:	af00      	add	r7, sp, #0

}
 800b0dc:	bf00      	nop
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr

0800b0e6 <AsynchronousTask_1000ms>:

void AsynchronousTask_1000ms()
{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	af00      	add	r7, sp, #0
	ToggleLED_B();
 800b0ea:	f7f5 ff19 	bl	8000f20 <ToggleLED_B>
	DataHandler_Operate();
 800b0ee:	f000 fa1b 	bl	800b528 <DataHandler_Operate>
}
 800b0f2:	bf00      	nop
 800b0f4:	bd80      	pop	{r7, pc}
	...

0800b0f8 <AsynchronousTaskScheduler>:

void AsynchronousTaskScheduler()
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	af00      	add	r7, sp, #0
	if(kApplicationBase.sAsyncTimers.s1000ms.u16Counter >= dAsynchronousTaskPeriod1000ms)
 800b0fc:	4b15      	ldr	r3, [pc, #84]	; (800b154 <AsynchronousTaskScheduler+0x5c>)
 800b0fe:	885b      	ldrh	r3, [r3, #2]
 800b100:	b29b      	uxth	r3, r3
 800b102:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b106:	d304      	bcc.n	800b112 <AsynchronousTaskScheduler+0x1a>
	{
		AsynchronousTask_1000ms();
 800b108:	f7ff ffed 	bl	800b0e6 <AsynchronousTask_1000ms>
		kApplicationBase.sAsyncTimers.s1000ms.u16Counter = 0;
 800b10c:	4b11      	ldr	r3, [pc, #68]	; (800b154 <AsynchronousTaskScheduler+0x5c>)
 800b10e:	2200      	movs	r2, #0
 800b110:	805a      	strh	r2, [r3, #2]
	}

	if(kApplicationBase.sAsyncTimers.s100ms.u16Counter >= dAsynchronousTaskPeriod100ms)
 800b112:	4b10      	ldr	r3, [pc, #64]	; (800b154 <AsynchronousTaskScheduler+0x5c>)
 800b114:	88db      	ldrh	r3, [r3, #6]
 800b116:	b29b      	uxth	r3, r3
 800b118:	2b63      	cmp	r3, #99	; 0x63
 800b11a:	d904      	bls.n	800b126 <AsynchronousTaskScheduler+0x2e>
	{
		AsynchronousTask_100ms();
 800b11c:	f7ff ffdc 	bl	800b0d8 <AsynchronousTask_100ms>
		kApplicationBase.sAsyncTimers.s100ms.u16Counter = 0;
 800b120:	4b0c      	ldr	r3, [pc, #48]	; (800b154 <AsynchronousTaskScheduler+0x5c>)
 800b122:	2200      	movs	r2, #0
 800b124:	80da      	strh	r2, [r3, #6]
	}

	if(kApplicationBase.sAsyncTimers.s10ms.u16Counter >= dAsynchronousTaskPeriod10ms)
 800b126:	4b0b      	ldr	r3, [pc, #44]	; (800b154 <AsynchronousTaskScheduler+0x5c>)
 800b128:	895b      	ldrh	r3, [r3, #10]
 800b12a:	b29b      	uxth	r3, r3
 800b12c:	2b09      	cmp	r3, #9
 800b12e:	d904      	bls.n	800b13a <AsynchronousTaskScheduler+0x42>
	{
		AsynchronousTask_10ms();
 800b130:	f7ff ffcc 	bl	800b0cc <AsynchronousTask_10ms>
		kApplicationBase.sAsyncTimers.s10ms.u16Counter = 0;
 800b134:	4b07      	ldr	r3, [pc, #28]	; (800b154 <AsynchronousTaskScheduler+0x5c>)
 800b136:	2200      	movs	r2, #0
 800b138:	815a      	strh	r2, [r3, #10]
	}

	if(kApplicationBase.sAsyncTimers.s1ms.u16Counter >= dAsynchronousTaskPeriod1ms)
 800b13a:	4b06      	ldr	r3, [pc, #24]	; (800b154 <AsynchronousTaskScheduler+0x5c>)
 800b13c:	89db      	ldrh	r3, [r3, #14]
 800b13e:	b29b      	uxth	r3, r3
 800b140:	2b00      	cmp	r3, #0
 800b142:	d004      	beq.n	800b14e <AsynchronousTaskScheduler+0x56>
	{
		AsynchronousTask_1ms();
 800b144:	f7ff ffba 	bl	800b0bc <AsynchronousTask_1ms>
		kApplicationBase.sAsyncTimers.s1ms.u16Counter = 0;
 800b148:	4b02      	ldr	r3, [pc, #8]	; (800b154 <AsynchronousTaskScheduler+0x5c>)
 800b14a:	2200      	movs	r2, #0
 800b14c:	81da      	strh	r2, [r3, #14]
	}

}
 800b14e:	bf00      	nop
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	20000370 	.word	0x20000370

0800b158 <AppStateChangeRequest>:

void AppStateChangeRequest( ApplicationState_t eNewState)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b082      	sub	sp, #8
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	4603      	mov	r3, r0
 800b160:	71fb      	strb	r3, [r7, #7]
	switch(kApplicationBase.eApplicationState)
 800b162:	4b22      	ldr	r3, [pc, #136]	; (800b1ec <AppStateChangeRequest+0x94>)
 800b164:	7e5b      	ldrb	r3, [r3, #25]
 800b166:	b2db      	uxtb	r3, r3
 800b168:	2b03      	cmp	r3, #3
 800b16a:	d837      	bhi.n	800b1dc <AppStateChangeRequest+0x84>
 800b16c:	a201      	add	r2, pc, #4	; (adr r2, 800b174 <AppStateChangeRequest+0x1c>)
 800b16e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b172:	bf00      	nop
 800b174:	0800b185 	.word	0x0800b185
 800b178:	0800b19b 	.word	0x0800b19b
 800b17c:	0800b1b1 	.word	0x0800b1b1
 800b180:	0800b1d5 	.word	0x0800b1d5
	{
	case eApp_EntryState:
		if(eNewState == eApp_Initialization)
 800b184:	79fb      	ldrb	r3, [r7, #7]
 800b186:	2b01      	cmp	r3, #1
 800b188:	d103      	bne.n	800b192 <AppStateChangeRequest+0x3a>
		{
			kApplicationBase.eApplicationState = eApp_Initialization;
 800b18a:	4b18      	ldr	r3, [pc, #96]	; (800b1ec <AppStateChangeRequest+0x94>)
 800b18c:	2201      	movs	r2, #1
 800b18e:	765a      	strb	r2, [r3, #25]
		}
		else
		{
			AssertError(AppError_WrongStateTransition);
		}
		break;
 800b190:	e028      	b.n	800b1e4 <AppStateChangeRequest+0x8c>
			AssertError(AppError_WrongStateTransition);
 800b192:	2020      	movs	r0, #32
 800b194:	f000 f854 	bl	800b240 <AssertError>
		break;
 800b198:	e024      	b.n	800b1e4 <AppStateChangeRequest+0x8c>

	case eApp_Initialization:
		if(eNewState == eApp_Perform)
 800b19a:	79fb      	ldrb	r3, [r7, #7]
 800b19c:	2b02      	cmp	r3, #2
 800b19e:	d103      	bne.n	800b1a8 <AppStateChangeRequest+0x50>
		{
			kApplicationBase.eApplicationState = eApp_Perform;
 800b1a0:	4b12      	ldr	r3, [pc, #72]	; (800b1ec <AppStateChangeRequest+0x94>)
 800b1a2:	2202      	movs	r2, #2
 800b1a4:	765a      	strb	r2, [r3, #25]
		}
		else
		{
			AssertError(AppError_WrongStateTransition);
		}
		break;
 800b1a6:	e01d      	b.n	800b1e4 <AppStateChangeRequest+0x8c>
			AssertError(AppError_WrongStateTransition);
 800b1a8:	2020      	movs	r0, #32
 800b1aa:	f000 f849 	bl	800b240 <AssertError>
		break;
 800b1ae:	e019      	b.n	800b1e4 <AppStateChangeRequest+0x8c>

	case eApp_Perform:
		if(eNewState == eApp_Initialization)
 800b1b0:	79fb      	ldrb	r3, [r7, #7]
 800b1b2:	2b01      	cmp	r3, #1
 800b1b4:	d103      	bne.n	800b1be <AppStateChangeRequest+0x66>
		{
			kApplicationBase.eApplicationState = eApp_Initialization;
 800b1b6:	4b0d      	ldr	r3, [pc, #52]	; (800b1ec <AppStateChangeRequest+0x94>)
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	765a      	strb	r2, [r3, #25]
		}
		else
		{
			AssertError(AppError_WrongStateTransition);
		}
		break;
 800b1bc:	e012      	b.n	800b1e4 <AppStateChangeRequest+0x8c>
		else if(eNewState == eApp_Shutdown)
 800b1be:	79fb      	ldrb	r3, [r7, #7]
 800b1c0:	2b03      	cmp	r3, #3
 800b1c2:	d103      	bne.n	800b1cc <AppStateChangeRequest+0x74>
			kApplicationBase.eApplicationState = eApp_Shutdown;
 800b1c4:	4b09      	ldr	r3, [pc, #36]	; (800b1ec <AppStateChangeRequest+0x94>)
 800b1c6:	2203      	movs	r2, #3
 800b1c8:	765a      	strb	r2, [r3, #25]
		break;
 800b1ca:	e00b      	b.n	800b1e4 <AppStateChangeRequest+0x8c>
			AssertError(AppError_WrongStateTransition);
 800b1cc:	2020      	movs	r0, #32
 800b1ce:	f000 f837 	bl	800b240 <AssertError>
		break;
 800b1d2:	e007      	b.n	800b1e4 <AppStateChangeRequest+0x8c>

	case eApp_Shutdown:
		AssertError(AppError_WrongStateTransition);
 800b1d4:	2020      	movs	r0, #32
 800b1d6:	f000 f833 	bl	800b240 <AssertError>
		break;
 800b1da:	e003      	b.n	800b1e4 <AppStateChangeRequest+0x8c>

	default:
		AssertError(AppError_WrongStateTransition);
 800b1dc:	2020      	movs	r0, #32
 800b1de:	f000 f82f 	bl	800b240 <AssertError>
		break;
 800b1e2:	bf00      	nop
	}

}
 800b1e4:	bf00      	nop
 800b1e6:	3708      	adds	r7, #8
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	20000370 	.word	0x20000370

0800b1f0 <AppEnableResetTaskTimers>:

void AppEnableResetTaskTimers()
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	af00      	add	r7, sp, #0
	kApplicationBase.sAsyncTimers.s1000ms.bEnabledFlag = true;
 800b1f4:	4b11      	ldr	r3, [pc, #68]	; (800b23c <AppEnableResetTaskTimers+0x4c>)
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	701a      	strb	r2, [r3, #0]
	kApplicationBase.sAsyncTimers.s100ms.bEnabledFlag = true;
 800b1fa:	4b10      	ldr	r3, [pc, #64]	; (800b23c <AppEnableResetTaskTimers+0x4c>)
 800b1fc:	2201      	movs	r2, #1
 800b1fe:	711a      	strb	r2, [r3, #4]
	kApplicationBase.sAsyncTimers.s10ms.bEnabledFlag = true;
 800b200:	4b0e      	ldr	r3, [pc, #56]	; (800b23c <AppEnableResetTaskTimers+0x4c>)
 800b202:	2201      	movs	r2, #1
 800b204:	721a      	strb	r2, [r3, #8]
	kApplicationBase.sAsyncTimers.s1ms.bEnabledFlag = true;
 800b206:	4b0d      	ldr	r3, [pc, #52]	; (800b23c <AppEnableResetTaskTimers+0x4c>)
 800b208:	2201      	movs	r2, #1
 800b20a:	731a      	strb	r2, [r3, #12]
	kApplicationBase.sAsyncTimers.s500us.bEnabledFlag = true;
 800b20c:	4b0b      	ldr	r3, [pc, #44]	; (800b23c <AppEnableResetTaskTimers+0x4c>)
 800b20e:	2201      	movs	r2, #1
 800b210:	741a      	strb	r2, [r3, #16]

	kApplicationBase.sAsyncTimers.s1000ms.u16Counter = 0;
 800b212:	4b0a      	ldr	r3, [pc, #40]	; (800b23c <AppEnableResetTaskTimers+0x4c>)
 800b214:	2200      	movs	r2, #0
 800b216:	805a      	strh	r2, [r3, #2]
	kApplicationBase.sAsyncTimers.s100ms.u16Counter = 0;
 800b218:	4b08      	ldr	r3, [pc, #32]	; (800b23c <AppEnableResetTaskTimers+0x4c>)
 800b21a:	2200      	movs	r2, #0
 800b21c:	80da      	strh	r2, [r3, #6]
	kApplicationBase.sAsyncTimers.s10ms.u16Counter = 0;
 800b21e:	4b07      	ldr	r3, [pc, #28]	; (800b23c <AppEnableResetTaskTimers+0x4c>)
 800b220:	2200      	movs	r2, #0
 800b222:	815a      	strh	r2, [r3, #10]
	kApplicationBase.sAsyncTimers.s1ms.u16Counter = 0;
 800b224:	4b05      	ldr	r3, [pc, #20]	; (800b23c <AppEnableResetTaskTimers+0x4c>)
 800b226:	2200      	movs	r2, #0
 800b228:	81da      	strh	r2, [r3, #14]
	kApplicationBase.sAsyncTimers.s500us.u16Counter = 0;
 800b22a:	4b04      	ldr	r3, [pc, #16]	; (800b23c <AppEnableResetTaskTimers+0x4c>)
 800b22c:	2200      	movs	r2, #0
 800b22e:	825a      	strh	r2, [r3, #18]
}
 800b230:	bf00      	nop
 800b232:	46bd      	mov	sp, r7
 800b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b238:	4770      	bx	lr
 800b23a:	bf00      	nop
 800b23c:	20000370 	.word	0x20000370

0800b240 <AssertError>:

void AssertError( AppErrorList_t eAppError )
{
 800b240:	b480      	push	{r7}
 800b242:	b083      	sub	sp, #12
 800b244:	af00      	add	r7, sp, #0
 800b246:	4603      	mov	r3, r0
 800b248:	80fb      	strh	r3, [r7, #6]
	kApplicationBase.u32ErrorReg |= (uint32_t)eAppError;
 800b24a:	4b06      	ldr	r3, [pc, #24]	; (800b264 <AssertError+0x24>)
 800b24c:	695a      	ldr	r2, [r3, #20]
 800b24e:	88fb      	ldrh	r3, [r7, #6]
 800b250:	4313      	orrs	r3, r2
 800b252:	4a04      	ldr	r2, [pc, #16]	; (800b264 <AssertError+0x24>)
 800b254:	6153      	str	r3, [r2, #20]
}
 800b256:	bf00      	nop
 800b258:	370c      	adds	r7, #12
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr
 800b262:	bf00      	nop
 800b264:	20000370 	.word	0x20000370

0800b268 <TurnOnSynchronousEvent>:

void TurnOnSynchronousEvent()
{
 800b268:	b480      	push	{r7}
 800b26a:	af00      	add	r7, sp, #0

}
 800b26c:	bf00      	nop
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr
	...

0800b278 <DataHandler_Initialize>:
static MemoryInterchange_t kMemoryInterchange;

void DataHandler_CopyMemoryToTransmissionBuffer( float *pfMemoryArray );

void DataHandler_Initialize()
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	af00      	add	r7, sp, #0
	DataHandler_Reset();
 800b27c:	f000 f808 	bl	800b290 <DataHandler_Reset>
	kDataHandler.bEnabled = true;
 800b280:	4b02      	ldr	r3, [pc, #8]	; (800b28c <DataHandler_Initialize+0x14>)
 800b282:	2201      	movs	r2, #1
 800b284:	701a      	strb	r2, [r3, #0]

}
 800b286:	bf00      	nop
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop
 800b28c:	2000038c 	.word	0x2000038c

0800b290 <DataHandler_Reset>:
void DataHandler_Reset()
{
 800b290:	b490      	push	{r4, r7}
 800b292:	b082      	sub	sp, #8
 800b294:	af00      	add	r7, sp, #0
	kDataHandler.u8ActiveMemoryPage = 0;
 800b296:	4b35      	ldr	r3, [pc, #212]	; (800b36c <DataHandler_Reset+0xdc>)
 800b298:	2200      	movs	r2, #0
 800b29a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
	kDataHandler.u8LastMemoryPage = 0;
 800b29e:	4b33      	ldr	r3, [pc, #204]	; (800b36c <DataHandler_Reset+0xdc>)
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
	kDataHandler.u8WidthPointer = 0;
 800b2a6:	4b31      	ldr	r3, [pc, #196]	; (800b36c <DataHandler_Reset+0xdc>)
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
	kDataHandler.u8LengthPointer = 0;
 800b2ae:	4b2f      	ldr	r3, [pc, #188]	; (800b36c <DataHandler_Reset+0xdc>)
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
	kDataHandler.bPageFilled = false;
 800b2b6:	4b2d      	ldr	r3, [pc, #180]	; (800b36c <DataHandler_Reset+0xdc>)
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
	kDataHandler.bReadyToSend = false;
 800b2be:	4b2b      	ldr	r3, [pc, #172]	; (800b36c <DataHandler_Reset+0xdc>)
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

	for(uint8_t u8PageIdx = 0; u8PageIdx < dMemoryPagesCount; u8PageIdx++)
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	71fb      	strb	r3, [r7, #7]
 800b2ca:	e046      	b.n	800b35a <DataHandler_Reset+0xca>
	{
		for(uint8_t u8LengthIdx = 0; u8LengthIdx < dMemoryLength; u8LengthIdx++)
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	71bb      	strb	r3, [r7, #6]
 800b2d0:	e03d      	b.n	800b34e <DataHandler_Reset+0xbe>
		{
			kDataHandler.kMeasurementMemory[u8PageIdx].bAlreadySent = false;
 800b2d2:	79fa      	ldrb	r2, [r7, #7]
 800b2d4:	4925      	ldr	r1, [pc, #148]	; (800b36c <DataHandler_Reset+0xdc>)
 800b2d6:	4613      	mov	r3, r2
 800b2d8:	019b      	lsls	r3, r3, #6
 800b2da:	4413      	add	r3, r2
 800b2dc:	00db      	lsls	r3, r3, #3
 800b2de:	440b      	add	r3, r1
 800b2e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[u8PageIdx].bHardSaved = false;
 800b2e8:	79fa      	ldrb	r2, [r7, #7]
 800b2ea:	4920      	ldr	r1, [pc, #128]	; (800b36c <DataHandler_Reset+0xdc>)
 800b2ec:	4613      	mov	r3, r2
 800b2ee:	019b      	lsls	r3, r3, #6
 800b2f0:	4413      	add	r3, r2
 800b2f2:	00db      	lsls	r3, r3, #3
 800b2f4:	440b      	add	r3, r1
 800b2f6:	f203 2309 	addw	r3, r3, #521	; 0x209
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[u8PageIdx].bHardSaveRequest = false;
 800b2fe:	79fa      	ldrb	r2, [r7, #7]
 800b300:	491a      	ldr	r1, [pc, #104]	; (800b36c <DataHandler_Reset+0xdc>)
 800b302:	4613      	mov	r3, r2
 800b304:	019b      	lsls	r3, r3, #6
 800b306:	4413      	add	r3, r2
 800b308:	00db      	lsls	r3, r3, #3
 800b30a:	440b      	add	r3, r1
 800b30c:	f203 230a 	addw	r3, r3, #522	; 0x20a
 800b310:	2200      	movs	r2, #0
 800b312:	701a      	strb	r2, [r3, #0]

			for(uint8_t u8WidthIdx = 0; u8WidthIdx < dMemoryWidth; u8WidthIdx++)
 800b314:	2300      	movs	r3, #0
 800b316:	717b      	strb	r3, [r7, #5]
 800b318:	e013      	b.n	800b342 <DataHandler_Reset+0xb2>
			{
				kDataHandler.kMeasurementMemory[u8PageIdx].fMeasurementArray[u8LengthIdx][u8WidthIdx] = 0;
 800b31a:	79fa      	ldrb	r2, [r7, #7]
 800b31c:	79bb      	ldrb	r3, [r7, #6]
 800b31e:	7979      	ldrb	r1, [r7, #5]
 800b320:	4c12      	ldr	r4, [pc, #72]	; (800b36c <DataHandler_Reset+0xdc>)
 800b322:	0118      	lsls	r0, r3, #4
 800b324:	4613      	mov	r3, r2
 800b326:	019b      	lsls	r3, r3, #6
 800b328:	4413      	add	r3, r2
 800b32a:	005b      	lsls	r3, r3, #1
 800b32c:	4403      	add	r3, r0
 800b32e:	440b      	add	r3, r1
 800b330:	009b      	lsls	r3, r3, #2
 800b332:	4423      	add	r3, r4
 800b334:	3308      	adds	r3, #8
 800b336:	f04f 0200 	mov.w	r2, #0
 800b33a:	601a      	str	r2, [r3, #0]
			for(uint8_t u8WidthIdx = 0; u8WidthIdx < dMemoryWidth; u8WidthIdx++)
 800b33c:	797b      	ldrb	r3, [r7, #5]
 800b33e:	3301      	adds	r3, #1
 800b340:	717b      	strb	r3, [r7, #5]
 800b342:	797b      	ldrb	r3, [r7, #5]
 800b344:	2b0f      	cmp	r3, #15
 800b346:	d9e8      	bls.n	800b31a <DataHandler_Reset+0x8a>
		for(uint8_t u8LengthIdx = 0; u8LengthIdx < dMemoryLength; u8LengthIdx++)
 800b348:	79bb      	ldrb	r3, [r7, #6]
 800b34a:	3301      	adds	r3, #1
 800b34c:	71bb      	strb	r3, [r7, #6]
 800b34e:	79bb      	ldrb	r3, [r7, #6]
 800b350:	2b07      	cmp	r3, #7
 800b352:	d9be      	bls.n	800b2d2 <DataHandler_Reset+0x42>
	for(uint8_t u8PageIdx = 0; u8PageIdx < dMemoryPagesCount; u8PageIdx++)
 800b354:	79fb      	ldrb	r3, [r7, #7]
 800b356:	3301      	adds	r3, #1
 800b358:	71fb      	strb	r3, [r7, #7]
 800b35a:	79fb      	ldrb	r3, [r7, #7]
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d9b5      	bls.n	800b2cc <DataHandler_Reset+0x3c>
			}
		}
	}

}
 800b360:	bf00      	nop
 800b362:	bf00      	nop
 800b364:	3708      	adds	r7, #8
 800b366:	46bd      	mov	sp, r7
 800b368:	bc90      	pop	{r4, r7}
 800b36a:	4770      	bx	lr
 800b36c:	2000038c 	.word	0x2000038c

0800b370 <DataHandler_OpenNewMeasurement>:
void DataHandler_OpenNewMeasurement( uint32_t u32TimeStamp )
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]

	if( kDataHandler.bEnabled )
 800b378:	4b46      	ldr	r3, [pc, #280]	; (800b494 <DataHandler_OpenNewMeasurement+0x124>)
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	f000 8081 	beq.w	800b484 <DataHandler_OpenNewMeasurement+0x114>
	{
		kDataHandler.u8LengthPointer++;
 800b382:	4b44      	ldr	r3, [pc, #272]	; (800b494 <DataHandler_OpenNewMeasurement+0x124>)
 800b384:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 800b388:	3301      	adds	r3, #1
 800b38a:	b2da      	uxtb	r2, r3
 800b38c:	4b41      	ldr	r3, [pc, #260]	; (800b494 <DataHandler_OpenNewMeasurement+0x124>)
 800b38e:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
		kDataHandler.u8WidthPointer = 0;
 800b392:	4b40      	ldr	r3, [pc, #256]	; (800b494 <DataHandler_OpenNewMeasurement+0x124>)
 800b394:	2200      	movs	r2, #0
 800b396:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416

		/*
		 * Every time new measurement is opened the previous one is assumed to be ready for transmission
		 */
		kDataHandler.bReadyToSend = true;
 800b39a:	4b3e      	ldr	r3, [pc, #248]	; (800b494 <DataHandler_OpenNewMeasurement+0x124>)
 800b39c:	2201      	movs	r2, #1
 800b39e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

		if(kDataHandler.u8LengthPointer >= dMemoryLength)
 800b3a2:	4b3c      	ldr	r3, [pc, #240]	; (800b494 <DataHandler_OpenNewMeasurement+0x124>)
 800b3a4:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 800b3a8:	2b07      	cmp	r3, #7
 800b3aa:	d96f      	bls.n	800b48c <DataHandler_OpenNewMeasurement+0x11c>
		{
			kDataHandler.u8LengthPointer = 0;
 800b3ac:	4b39      	ldr	r3, [pc, #228]	; (800b494 <DataHandler_OpenNewMeasurement+0x124>)
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bAlreadySent = false;
 800b3b4:	4b37      	ldr	r3, [pc, #220]	; (800b494 <DataHandler_OpenNewMeasurement+0x124>)
 800b3b6:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	4a35      	ldr	r2, [pc, #212]	; (800b494 <DataHandler_OpenNewMeasurement+0x124>)
 800b3be:	460b      	mov	r3, r1
 800b3c0:	019b      	lsls	r3, r3, #6
 800b3c2:	440b      	add	r3, r1
 800b3c4:	00db      	lsls	r3, r3, #3
 800b3c6:	4413      	add	r3, r2
 800b3c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bHardSaveRequest = true;
 800b3d0:	4b30      	ldr	r3, [pc, #192]	; (800b494 <DataHandler_OpenNewMeasurement+0x124>)
 800b3d2:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	4a2e      	ldr	r2, [pc, #184]	; (800b494 <DataHandler_OpenNewMeasurement+0x124>)
 800b3da:	460b      	mov	r3, r1
 800b3dc:	019b      	lsls	r3, r3, #6
 800b3de:	440b      	add	r3, r1
 800b3e0:	00db      	lsls	r3, r3, #3
 800b3e2:	4413      	add	r3, r2
 800b3e4:	f203 230a 	addw	r3, r3, #522	; 0x20a
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bHardSaved = false;
 800b3ec:	4b29      	ldr	r3, [pc, #164]	; (800b494 <DataHandler_OpenNewMeasurement+0x124>)
 800b3ee:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	4a27      	ldr	r2, [pc, #156]	; (800b494 <DataHandler_OpenNewMeasurement+0x124>)
 800b3f6:	460b      	mov	r3, r1
 800b3f8:	019b      	lsls	r3, r3, #6
 800b3fa:	440b      	add	r3, r1
 800b3fc:	00db      	lsls	r3, r3, #3
 800b3fe:	4413      	add	r3, r2
 800b400:	f203 2309 	addw	r3, r3, #521	; 0x209
 800b404:	2200      	movs	r2, #0
 800b406:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].u16Timestamp = u32TimeStamp;
 800b408:	4b22      	ldr	r3, [pc, #136]	; (800b494 <DataHandler_OpenNewMeasurement+0x124>)
 800b40a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800b40e:	4619      	mov	r1, r3
 800b410:	4a20      	ldr	r2, [pc, #128]	; (800b494 <DataHandler_OpenNewMeasurement+0x124>)
 800b412:	460b      	mov	r3, r1
 800b414:	019b      	lsls	r3, r3, #6
 800b416:	440b      	add	r3, r1
 800b418:	00db      	lsls	r3, r3, #3
 800b41a:	4413      	add	r3, r2
 800b41c:	3304      	adds	r3, #4
 800b41e:	687a      	ldr	r2, [r7, #4]
 800b420:	601a      	str	r2, [r3, #0]

			if( !kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bHardSaved )
 800b422:	4b1c      	ldr	r3, [pc, #112]	; (800b494 <DataHandler_OpenNewMeasurement+0x124>)
 800b424:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800b428:	4619      	mov	r1, r3
 800b42a:	4a1a      	ldr	r2, [pc, #104]	; (800b494 <DataHandler_OpenNewMeasurement+0x124>)
 800b42c:	460b      	mov	r3, r1
 800b42e:	019b      	lsls	r3, r3, #6
 800b430:	440b      	add	r3, r1
 800b432:	00db      	lsls	r3, r3, #3
 800b434:	4413      	add	r3, r2
 800b436:	f203 2309 	addw	r3, r3, #521	; 0x209
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	f083 0301 	eor.w	r3, r3, #1
 800b440:	b2db      	uxtb	r3, r3
 800b442:	2b00      	cmp	r3, #0
 800b444:	d002      	beq.n	800b44c <DataHandler_OpenNewMeasurement+0xdc>
			{
				AssertError(AppError_DataLost); // Data not saved; possibly add timestamp to track lost data chunks
 800b446:	2040      	movs	r0, #64	; 0x40
 800b448:	f7ff fefa 	bl	800b240 <AssertError>
			}

			kDataHandler.u8LastMemoryPage = kDataHandler.u8ActiveMemoryPage;
 800b44c:	4b11      	ldr	r3, [pc, #68]	; (800b494 <DataHandler_OpenNewMeasurement+0x124>)
 800b44e:	f893 2414 	ldrb.w	r2, [r3, #1044]	; 0x414
 800b452:	4b10      	ldr	r3, [pc, #64]	; (800b494 <DataHandler_OpenNewMeasurement+0x124>)
 800b454:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
			kDataHandler.u8ActiveMemoryPage++;
 800b458:	4b0e      	ldr	r3, [pc, #56]	; (800b494 <DataHandler_OpenNewMeasurement+0x124>)
 800b45a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800b45e:	3301      	adds	r3, #1
 800b460:	b2da      	uxtb	r2, r3
 800b462:	4b0c      	ldr	r3, [pc, #48]	; (800b494 <DataHandler_OpenNewMeasurement+0x124>)
 800b464:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
			if(kDataHandler.u8ActiveMemoryPage >= dMemoryPagesCount)
 800b468:	4b0a      	ldr	r3, [pc, #40]	; (800b494 <DataHandler_OpenNewMeasurement+0x124>)
 800b46a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800b46e:	2b01      	cmp	r3, #1
 800b470:	d903      	bls.n	800b47a <DataHandler_OpenNewMeasurement+0x10a>
			{
				kDataHandler.u8ActiveMemoryPage = 0;
 800b472:	4b08      	ldr	r3, [pc, #32]	; (800b494 <DataHandler_OpenNewMeasurement+0x124>)
 800b474:	2200      	movs	r2, #0
 800b476:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
			}
			kDataHandler.bPageFilled = true;
 800b47a:	4b06      	ldr	r3, [pc, #24]	; (800b494 <DataHandler_OpenNewMeasurement+0x124>)
 800b47c:	2201      	movs	r2, #1
 800b47e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
	else
	{
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
	}

}
 800b482:	e003      	b.n	800b48c <DataHandler_OpenNewMeasurement+0x11c>
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
 800b484:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b488:	f7ff feda 	bl	800b240 <AssertError>
}
 800b48c:	bf00      	nop
 800b48e:	3708      	adds	r7, #8
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}
 800b494:	2000038c 	.word	0x2000038c

0800b498 <DataHandler_StoreMeasurement>:

void DataHandler_StoreMeasurement( float fNewMeasurement )
{
 800b498:	b590      	push	{r4, r7, lr}
 800b49a:	b085      	sub	sp, #20
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t u8MemPage = kDataHandler.u8ActiveMemoryPage;
 800b4a2:	4b20      	ldr	r3, [pc, #128]	; (800b524 <DataHandler_StoreMeasurement+0x8c>)
 800b4a4:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800b4a8:	73fb      	strb	r3, [r7, #15]
	uint8_t u8LenPtr = kDataHandler.u8LengthPointer;
 800b4aa:	4b1e      	ldr	r3, [pc, #120]	; (800b524 <DataHandler_StoreMeasurement+0x8c>)
 800b4ac:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 800b4b0:	73bb      	strb	r3, [r7, #14]
	uint8_t u8WidPtr = kDataHandler.u8WidthPointer;
 800b4b2:	4b1c      	ldr	r3, [pc, #112]	; (800b524 <DataHandler_StoreMeasurement+0x8c>)
 800b4b4:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 800b4b8:	737b      	strb	r3, [r7, #13]

	if( kDataHandler.bEnabled )
 800b4ba:	4b1a      	ldr	r3, [pc, #104]	; (800b524 <DataHandler_StoreMeasurement+0x8c>)
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d028      	beq.n	800b514 <DataHandler_StoreMeasurement+0x7c>
	{
		kDataHandler.kMeasurementMemory[u8MemPage].fMeasurementArray[u8LenPtr][u8WidPtr] = fNewMeasurement;
 800b4c2:	7bfa      	ldrb	r2, [r7, #15]
 800b4c4:	7bbb      	ldrb	r3, [r7, #14]
 800b4c6:	7b79      	ldrb	r1, [r7, #13]
 800b4c8:	4c16      	ldr	r4, [pc, #88]	; (800b524 <DataHandler_StoreMeasurement+0x8c>)
 800b4ca:	0118      	lsls	r0, r3, #4
 800b4cc:	4613      	mov	r3, r2
 800b4ce:	019b      	lsls	r3, r3, #6
 800b4d0:	4413      	add	r3, r2
 800b4d2:	005b      	lsls	r3, r3, #1
 800b4d4:	4403      	add	r3, r0
 800b4d6:	440b      	add	r3, r1
 800b4d8:	009b      	lsls	r3, r3, #2
 800b4da:	4423      	add	r3, r4
 800b4dc:	3308      	adds	r3, #8
 800b4de:	687a      	ldr	r2, [r7, #4]
 800b4e0:	601a      	str	r2, [r3, #0]
		kDataHandler.u8WidthPointer++;
 800b4e2:	4b10      	ldr	r3, [pc, #64]	; (800b524 <DataHandler_StoreMeasurement+0x8c>)
 800b4e4:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	b2da      	uxtb	r2, r3
 800b4ec:	4b0d      	ldr	r3, [pc, #52]	; (800b524 <DataHandler_StoreMeasurement+0x8c>)
 800b4ee:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416

		if(kDataHandler.u8WidthPointer >= dMemoryWidth)
 800b4f2:	4b0c      	ldr	r3, [pc, #48]	; (800b524 <DataHandler_StoreMeasurement+0x8c>)
 800b4f4:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 800b4f8:	2b0f      	cmp	r3, #15
 800b4fa:	d90f      	bls.n	800b51c <DataHandler_StoreMeasurement+0x84>
		{
			kDataHandler.u8WidthPointer--;
 800b4fc:	4b09      	ldr	r3, [pc, #36]	; (800b524 <DataHandler_StoreMeasurement+0x8c>)
 800b4fe:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 800b502:	3b01      	subs	r3, #1
 800b504:	b2da      	uxtb	r2, r3
 800b506:	4b07      	ldr	r3, [pc, #28]	; (800b524 <DataHandler_StoreMeasurement+0x8c>)
 800b508:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
			AssertError(AppError_WidthOverstretched); // Width overstretched - no new measurement was called;
 800b50c:	2080      	movs	r0, #128	; 0x80
 800b50e:	f7ff fe97 	bl	800b240 <AssertError>
	}
	else
	{
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
	}
}
 800b512:	e003      	b.n	800b51c <DataHandler_StoreMeasurement+0x84>
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
 800b514:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b518:	f7ff fe92 	bl	800b240 <AssertError>
}
 800b51c:	bf00      	nop
 800b51e:	3714      	adds	r7, #20
 800b520:	46bd      	mov	sp, r7
 800b522:	bd90      	pop	{r4, r7, pc}
 800b524:	2000038c 	.word	0x2000038c

0800b528 <DataHandler_Operate>:

void DataHandler_Operate()
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	af00      	add	r7, sp, #0
	if( kDataHandler.bEnabled )
 800b52c:	4b29      	ldr	r3, [pc, #164]	; (800b5d4 <DataHandler_Operate+0xac>)
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d048      	beq.n	800b5c6 <DataHandler_Operate+0x9e>
	{

		if( kDataHandler.bPageFilled )
 800b534:	4b27      	ldr	r3, [pc, #156]	; (800b5d4 <DataHandler_Operate+0xac>)
 800b536:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d011      	beq.n	800b562 <DataHandler_Operate+0x3a>
		{
			kDataHandler.kMeasurementMemory[kDataHandler.u8LastMemoryPage].bHardSaveRequest = true;
 800b53e:	4b25      	ldr	r3, [pc, #148]	; (800b5d4 <DataHandler_Operate+0xac>)
 800b540:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800b544:	4619      	mov	r1, r3
 800b546:	4a23      	ldr	r2, [pc, #140]	; (800b5d4 <DataHandler_Operate+0xac>)
 800b548:	460b      	mov	r3, r1
 800b54a:	019b      	lsls	r3, r3, #6
 800b54c:	440b      	add	r3, r1
 800b54e:	00db      	lsls	r3, r3, #3
 800b550:	4413      	add	r3, r2
 800b552:	f203 230a 	addw	r3, r3, #522	; 0x20a
 800b556:	2201      	movs	r2, #1
 800b558:	701a      	strb	r2, [r3, #0]
			kDataHandler.bPageFilled = false;
 800b55a:	4b1e      	ldr	r3, [pc, #120]	; (800b5d4 <DataHandler_Operate+0xac>)
 800b55c:	2200      	movs	r2, #0
 800b55e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
			// Call to save with SD card
		}

		if( kDataHandler.bReadyToSend )
 800b562:	4b1c      	ldr	r3, [pc, #112]	; (800b5d4 <DataHandler_Operate+0xac>)
 800b564:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d030      	beq.n	800b5ce <DataHandler_Operate+0xa6>
		{
			if(kDataHandler.u8LengthPointer == 0)
 800b56c:	4b19      	ldr	r3, [pc, #100]	; (800b5d4 <DataHandler_Operate+0xac>)
 800b56e:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 800b572:	2b00      	cmp	r3, #0
 800b574:	d110      	bne.n	800b598 <DataHandler_Operate+0x70>
			{
				DataHandler_CopyMemoryToTransmissionBuffer(kDataHandler.kMeasurementMemory[kDataHandler.u8LastMemoryPage].fMeasurementArray[dMemoryLength-1]);
 800b576:	4b17      	ldr	r3, [pc, #92]	; (800b5d4 <DataHandler_Operate+0xac>)
 800b578:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800b57c:	461a      	mov	r2, r3
 800b57e:	4613      	mov	r3, r2
 800b580:	019b      	lsls	r3, r3, #6
 800b582:	4413      	add	r3, r2
 800b584:	00db      	lsls	r3, r3, #3
 800b586:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800b58a:	4a12      	ldr	r2, [pc, #72]	; (800b5d4 <DataHandler_Operate+0xac>)
 800b58c:	4413      	add	r3, r2
 800b58e:	3308      	adds	r3, #8
 800b590:	4618      	mov	r0, r3
 800b592:	f000 f82f 	bl	800b5f4 <DataHandler_CopyMemoryToTransmissionBuffer>
 800b596:	e013      	b.n	800b5c0 <DataHandler_Operate+0x98>
//				bTransmissionStatus = USB_TransmitData(kDataHandler.kMeasurementMemory[kDataHandler.u8LastMemoryPage].fMeasurementArray[dMemoryLength-1]);
			}
			else
			{
//				bTransmissionStatus = USB_TransmitData(kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].fMeasurementArray[kDataHandler.u8LengthPointer-1]);
				DataHandler_CopyMemoryToTransmissionBuffer(kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].fMeasurementArray[kDataHandler.u8LengthPointer-1]);
 800b598:	4b0e      	ldr	r3, [pc, #56]	; (800b5d4 <DataHandler_Operate+0xac>)
 800b59a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800b59e:	4619      	mov	r1, r3
 800b5a0:	4b0c      	ldr	r3, [pc, #48]	; (800b5d4 <DataHandler_Operate+0xac>)
 800b5a2:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 800b5a6:	3b01      	subs	r3, #1
 800b5a8:	019a      	lsls	r2, r3, #6
 800b5aa:	460b      	mov	r3, r1
 800b5ac:	019b      	lsls	r3, r3, #6
 800b5ae:	440b      	add	r3, r1
 800b5b0:	00db      	lsls	r3, r3, #3
 800b5b2:	4413      	add	r3, r2
 800b5b4:	4a07      	ldr	r2, [pc, #28]	; (800b5d4 <DataHandler_Operate+0xac>)
 800b5b6:	4413      	add	r3, r2
 800b5b8:	3308      	adds	r3, #8
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f000 f81a 	bl	800b5f4 <DataHandler_CopyMemoryToTransmissionBuffer>
			}

			CallForTransmissionEvent(); //Inform main event system that there is a pending transmission and data is preloaded to Memory Interchange
 800b5c0:	f000 f884 	bl	800b6cc <CallForTransmissionEvent>
	}
	else
	{
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
	}
}
 800b5c4:	e003      	b.n	800b5ce <DataHandler_Operate+0xa6>
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
 800b5c6:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b5ca:	f7ff fe39 	bl	800b240 <AssertError>
}
 800b5ce:	bf00      	nop
 800b5d0:	bd80      	pop	{r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	2000038c 	.word	0x2000038c

0800b5d8 <DataHandler_AccessMemoryInterchange>:

void DataHandler_AccessMemoryInterchange( MemoryInterchange_t * pkMemoryInterchangeAddress)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b083      	sub	sp, #12
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
	pkMemoryInterchangeAddress = &kMemoryInterchange;
 800b5e0:	4b03      	ldr	r3, [pc, #12]	; (800b5f0 <DataHandler_AccessMemoryInterchange+0x18>)
 800b5e2:	607b      	str	r3, [r7, #4]
}
 800b5e4:	bf00      	nop
 800b5e6:	370c      	adds	r7, #12
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr
 800b5f0:	200007a8 	.word	0x200007a8

0800b5f4 <DataHandler_CopyMemoryToTransmissionBuffer>:

void DataHandler_CopyMemoryToTransmissionBuffer( float *pfMemoryArray )
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
	if( (kMemoryInterchange.eMemoryState != MemoryState_DataSent) && ( kMemoryInterchange.eMemoryState != MemoryState_DataSkipped ) )
 800b5fc:	4b0b      	ldr	r3, [pc, #44]	; (800b62c <DataHandler_CopyMemoryToTransmissionBuffer+0x38>)
 800b5fe:	791b      	ldrb	r3, [r3, #4]
 800b600:	2b02      	cmp	r3, #2
 800b602:	d007      	beq.n	800b614 <DataHandler_CopyMemoryToTransmissionBuffer+0x20>
 800b604:	4b09      	ldr	r3, [pc, #36]	; (800b62c <DataHandler_CopyMemoryToTransmissionBuffer+0x38>)
 800b606:	791b      	ldrb	r3, [r3, #4]
 800b608:	2b03      	cmp	r3, #3
 800b60a:	d003      	beq.n	800b614 <DataHandler_CopyMemoryToTransmissionBuffer+0x20>
	{
		AssertError(AppError_DataLost); // Memory would be overwritten;
 800b60c:	2040      	movs	r0, #64	; 0x40
 800b60e:	f7ff fe17 	bl	800b240 <AssertError>
 800b612:	e006      	b.n	800b622 <DataHandler_CopyMemoryToTransmissionBuffer+0x2e>
	}
	else
	{
		kMemoryInterchange.fDataPointer = pfMemoryArray;
 800b614:	4a05      	ldr	r2, [pc, #20]	; (800b62c <DataHandler_CopyMemoryToTransmissionBuffer+0x38>)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6013      	str	r3, [r2, #0]
		kMemoryInterchange.eMemoryState = MemoryState_NewData;
 800b61a:	4b04      	ldr	r3, [pc, #16]	; (800b62c <DataHandler_CopyMemoryToTransmissionBuffer+0x38>)
 800b61c:	2200      	movs	r2, #0
 800b61e:	711a      	strb	r2, [r3, #4]
	}

}
 800b620:	bf00      	nop
 800b622:	bf00      	nop
 800b624:	3708      	adds	r7, #8
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	bf00      	nop
 800b62c:	200007a8 	.word	0x200007a8

0800b630 <EventSystem_Initialize>:
}EventData_t;

static EventData_t kEventData;

void EventSystem_Initialize()
{
 800b630:	b480      	push	{r7}
 800b632:	af00      	add	r7, sp, #0
	kEventData.bInitalized = true;
 800b634:	4b03      	ldr	r3, [pc, #12]	; (800b644 <EventSystem_Initialize+0x14>)
 800b636:	2201      	movs	r2, #1
 800b638:	701a      	strb	r2, [r3, #0]
}
 800b63a:	bf00      	nop
 800b63c:	46bd      	mov	sp, r7
 800b63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b642:	4770      	bx	lr
 800b644:	200007b0 	.word	0x200007b0

0800b648 <EventSystem_HandleEvent>:
void EventSystem_HandleEvent()
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b082      	sub	sp, #8
 800b64c:	af00      	add	r7, sp, #0
	uint32_t u32EventCode = 0;
 800b64e:	2300      	movs	r3, #0
 800b650:	607b      	str	r3, [r7, #4]

	u32EventCode = (uint32_t)Event_DataReadyToTransmit;
 800b652:	2301      	movs	r3, #1
 800b654:	607b      	str	r3, [r7, #4]

	if( (kEventData.u32EventRegister & u32EventCode) == u32EventCode )
 800b656:	4b0a      	ldr	r3, [pc, #40]	; (800b680 <EventSystem_HandleEvent+0x38>)
 800b658:	685a      	ldr	r2, [r3, #4]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	4013      	ands	r3, r2
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	429a      	cmp	r2, r3
 800b662:	d108      	bne.n	800b676 <EventSystem_HandleEvent+0x2e>
	{
		ComManager_ArmTransmission();
 800b664:	f000 fa4e 	bl	800bb04 <ComManager_ArmTransmission>
		kEventData.u32EventRegister &= ~(u32EventCode);
 800b668:	4b05      	ldr	r3, [pc, #20]	; (800b680 <EventSystem_HandleEvent+0x38>)
 800b66a:	685a      	ldr	r2, [r3, #4]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	43db      	mvns	r3, r3
 800b670:	4013      	ands	r3, r2
 800b672:	4a03      	ldr	r2, [pc, #12]	; (800b680 <EventSystem_HandleEvent+0x38>)
 800b674:	6053      	str	r3, [r2, #4]
	}
}
 800b676:	bf00      	nop
 800b678:	3708      	adds	r7, #8
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}
 800b67e:	bf00      	nop
 800b680:	200007b0 	.word	0x200007b0

0800b684 <EventSystem_Signalize>:

void EventSystem_Signalize(Event_t eEvent)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b084      	sub	sp, #16
 800b688:	af00      	add	r7, sp, #0
 800b68a:	4603      	mov	r3, r0
 800b68c:	71fb      	strb	r3, [r7, #7]
	uint32_t u32EventCode = (uint32_t)eEvent;
 800b68e:	79fb      	ldrb	r3, [r7, #7]
 800b690:	60fb      	str	r3, [r7, #12]

	if(kEventData.bInitalized)
 800b692:	4b0d      	ldr	r3, [pc, #52]	; (800b6c8 <EventSystem_Signalize+0x44>)
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d011      	beq.n	800b6be <EventSystem_Signalize+0x3a>
	{
		if( (kEventData.u32EventRegister & u32EventCode) == u32EventCode )
 800b69a:	4b0b      	ldr	r3, [pc, #44]	; (800b6c8 <EventSystem_Signalize+0x44>)
 800b69c:	685a      	ldr	r2, [r3, #4]
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	4013      	ands	r3, r2
 800b6a2:	68fa      	ldr	r2, [r7, #12]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d104      	bne.n	800b6b2 <EventSystem_Signalize+0x2e>
		{
			AssertError(AppError_EventOverlap); // Event already set, before handling it
 800b6a8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b6ac:	f7ff fdc8 	bl	800b240 <AssertError>
		else
		{
			kEventData.u32EventRegister |= u32EventCode; // Set bit in register according to the event code
		}
	}
}
 800b6b0:	e005      	b.n	800b6be <EventSystem_Signalize+0x3a>
			kEventData.u32EventRegister |= u32EventCode; // Set bit in register according to the event code
 800b6b2:	4b05      	ldr	r3, [pc, #20]	; (800b6c8 <EventSystem_Signalize+0x44>)
 800b6b4:	685a      	ldr	r2, [r3, #4]
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	4313      	orrs	r3, r2
 800b6ba:	4a03      	ldr	r2, [pc, #12]	; (800b6c8 <EventSystem_Signalize+0x44>)
 800b6bc:	6053      	str	r3, [r2, #4]
}
 800b6be:	bf00      	nop
 800b6c0:	3710      	adds	r7, #16
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	200007b0 	.word	0x200007b0

0800b6cc <CallForTransmissionEvent>:
#include "ModuleInterconnect.h"
#include "EventSystem.h"
#include "DataCommon.h"

void CallForTransmissionEvent()
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	af00      	add	r7, sp, #0
	EventSystem_Signalize(Event_DataReadyToTransmit);
 800b6d0:	2001      	movs	r0, #1
 800b6d2:	f7ff ffd7 	bl	800b684 <EventSystem_Signalize>
}
 800b6d6:	bf00      	nop
 800b6d8:	bd80      	pop	{r7, pc}
	...

0800b6dc <TempCollect_Operate>:
	.bEnabledFlag = false,
	.eState = TempCollect_EntryState,
};

void TempCollect_Operate()
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	af00      	add	r7, sp, #0
	switch(kTemperatureData.eState)
 800b6e0:	4b77      	ldr	r3, [pc, #476]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b6e2:	79db      	ldrb	r3, [r3, #7]
 800b6e4:	2b05      	cmp	r3, #5
 800b6e6:	f200 80e3 	bhi.w	800b8b0 <TempCollect_Operate+0x1d4>
 800b6ea:	a201      	add	r2, pc, #4	; (adr r2, 800b6f0 <TempCollect_Operate+0x14>)
 800b6ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6f0:	0800b709 	.word	0x0800b709
 800b6f4:	0800b713 	.word	0x0800b713
 800b6f8:	0800b743 	.word	0x0800b743
 800b6fc:	0800b7c9 	.word	0x0800b7c9
 800b700:	0800b84d 	.word	0x0800b84d
 800b704:	0800b79d 	.word	0x0800b79d
	{
	case(TempCollect_EntryState):
		AssertError(AppError_TempCollectUninitialized); // Incorrect entry - before initialization
 800b708:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b70c:	f7ff fd98 	bl	800b240 <AssertError>
		break;
 800b710:	e0d4      	b.n	800b8bc <TempCollect_Operate+0x1e0>
	case(TempCollect_Initialized):
		if(kTemperatureData.bScheduleMeasurement)
 800b712:	4b6b      	ldr	r3, [pc, #428]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b714:	799b      	ldrb	r3, [r3, #6]
 800b716:	2b00      	cmp	r3, #0
 800b718:	f000 80cf 	beq.w	800b8ba <TempCollect_Operate+0x1de>
		{
			kTemperatureData.eState = TempCollect_TemperatureReadRequest;
 800b71c:	4b68      	ldr	r3, [pc, #416]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b71e:	2202      	movs	r2, #2
 800b720:	71da      	strb	r2, [r3, #7]
			kTemperatureData.u16ArrayASensorIndex = 0;
 800b722:	4b67      	ldr	r3, [pc, #412]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b724:	2200      	movs	r2, #0
 800b726:	829a      	strh	r2, [r3, #20]
			kTemperatureData.u16ArrayBSensorIndex = 0;
 800b728:	4b65      	ldr	r3, [pc, #404]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b72a:	2200      	movs	r2, #0
 800b72c:	82da      	strh	r2, [r3, #22]
			kTemperatureData.bReadFinished[0] = false;
 800b72e:	4b64      	ldr	r3, [pc, #400]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b730:	2200      	movs	r2, #0
 800b732:	721a      	strb	r2, [r3, #8]
			kTemperatureData.bReadFinished[1] = false;
 800b734:	4b62      	ldr	r3, [pc, #392]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b736:	2200      	movs	r2, #0
 800b738:	725a      	strb	r2, [r3, #9]
			kTemperatureData.u8TimeoutCounter = 0;
 800b73a:	4b61      	ldr	r3, [pc, #388]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b73c:	2200      	movs	r2, #0
 800b73e:	771a      	strb	r2, [r3, #28]
		}
		break;
 800b740:	e0bb      	b.n	800b8ba <TempCollect_Operate+0x1de>
	case(TempCollect_TemperatureReadRequest):
		kTemperatureData.bScheduleMeasurement = false;
 800b742:	4b5f      	ldr	r3, [pc, #380]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b744:	2200      	movs	r2, #0
 800b746:	719a      	strb	r2, [r3, #6]
		if(kTemperatureData.u16ArrayASensorIndex < MCP9808_I2CA_DeviceCount)
 800b748:	4b5d      	ldr	r3, [pc, #372]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b74a:	8a9b      	ldrh	r3, [r3, #20]
 800b74c:	2b04      	cmp	r3, #4
 800b74e:	d80e      	bhi.n	800b76e <TempCollect_Operate+0x92>
		{
			/*
			 * By placing "ready" flag clearing here this app will not get stuck
			 * if the sensor number on each array branch would be not equal
			 */
			kTemperatureData.bStateReady[0] = false;
 800b750:	4b5b      	ldr	r3, [pc, #364]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b752:	2200      	movs	r2, #0
 800b754:	729a      	strb	r2, [r3, #10]
			MCP9808_Read(&kaSensorArrayDataA[kTemperatureData.u16ArrayASensorIndex]);
 800b756:	4b5a      	ldr	r3, [pc, #360]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b758:	8a9b      	ldrh	r3, [r3, #20]
 800b75a:	461a      	mov	r2, r3
 800b75c:	4613      	mov	r3, r2
 800b75e:	005b      	lsls	r3, r3, #1
 800b760:	4413      	add	r3, r2
 800b762:	009b      	lsls	r3, r3, #2
 800b764:	4a57      	ldr	r2, [pc, #348]	; (800b8c4 <TempCollect_Operate+0x1e8>)
 800b766:	4413      	add	r3, r2
 800b768:	4618      	mov	r0, r3
 800b76a:	f7f5 fc9d 	bl	80010a8 <MCP9808_Read>
		}
		if(kTemperatureData.u16ArrayBSensorIndex < MCP9808_I2CB_DeviceCount)
 800b76e:	4b54      	ldr	r3, [pc, #336]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b770:	8adb      	ldrh	r3, [r3, #22]
 800b772:	2b04      	cmp	r3, #4
 800b774:	d80e      	bhi.n	800b794 <TempCollect_Operate+0xb8>
		{
			kTemperatureData.bStateReady[1] = false;
 800b776:	4b52      	ldr	r3, [pc, #328]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b778:	2200      	movs	r2, #0
 800b77a:	72da      	strb	r2, [r3, #11]
			MCP9808_Read(&kaSensorArrayDataB[kTemperatureData.u16ArrayBSensorIndex]);
 800b77c:	4b50      	ldr	r3, [pc, #320]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b77e:	8adb      	ldrh	r3, [r3, #22]
 800b780:	461a      	mov	r2, r3
 800b782:	4613      	mov	r3, r2
 800b784:	005b      	lsls	r3, r3, #1
 800b786:	4413      	add	r3, r2
 800b788:	009b      	lsls	r3, r3, #2
 800b78a:	4a4f      	ldr	r2, [pc, #316]	; (800b8c8 <TempCollect_Operate+0x1ec>)
 800b78c:	4413      	add	r3, r2
 800b78e:	4618      	mov	r0, r3
 800b790:	f7f5 fc8a 	bl	80010a8 <MCP9808_Read>
		}
		kTemperatureData.eState = TempCollect_Waiting;
 800b794:	4b4a      	ldr	r3, [pc, #296]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b796:	2205      	movs	r2, #5
 800b798:	71da      	strb	r2, [r3, #7]
		break;
 800b79a:	e08f      	b.n	800b8bc <TempCollect_Operate+0x1e0>
	case(TempCollect_Waiting):
		if(kTemperatureData.bStateReady[0] && kTemperatureData.bStateReady[1])
 800b79c:	4b48      	ldr	r3, [pc, #288]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b79e:	7a9b      	ldrb	r3, [r3, #10]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d00a      	beq.n	800b7ba <TempCollect_Operate+0xde>
 800b7a4:	4b46      	ldr	r3, [pc, #280]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b7a6:	7adb      	ldrb	r3, [r3, #11]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d006      	beq.n	800b7ba <TempCollect_Operate+0xde>
		{
			kTemperatureData.eState = TempCollect_ProcessData;
 800b7ac:	4b44      	ldr	r3, [pc, #272]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b7ae:	2203      	movs	r2, #3
 800b7b0:	71da      	strb	r2, [r3, #7]
			kTemperatureData.u8TimeoutCounter = 0;
 800b7b2:	4b43      	ldr	r3, [pc, #268]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	771a      	strb	r2, [r3, #28]
		else
		{
			kTemperatureData.u8TimeoutCounter++;
			//todo: implement a timeout comm reset function
		}
		break;
 800b7b8:	e080      	b.n	800b8bc <TempCollect_Operate+0x1e0>
			kTemperatureData.u8TimeoutCounter++;
 800b7ba:	4b41      	ldr	r3, [pc, #260]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b7bc:	7f1b      	ldrb	r3, [r3, #28]
 800b7be:	3301      	adds	r3, #1
 800b7c0:	b2da      	uxtb	r2, r3
 800b7c2:	4b3f      	ldr	r3, [pc, #252]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b7c4:	771a      	strb	r2, [r3, #28]
		break;
 800b7c6:	e079      	b.n	800b8bc <TempCollect_Operate+0x1e0>
	case(TempCollect_ProcessData):
		if( !kTemperatureData.bReadFinished[0] )
 800b7c8:	4b3d      	ldr	r3, [pc, #244]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b7ca:	7a1b      	ldrb	r3, [r3, #8]
 800b7cc:	f083 0301 	eor.w	r3, r3, #1
 800b7d0:	b2db      	uxtb	r3, r3
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d017      	beq.n	800b806 <TempCollect_Operate+0x12a>
		{
			kTemperatureData.fConvertedTemperature[0] = MCP9808_DecodeTemperature(&kaSensorArrayDataA[kTemperatureData.u16ArrayASensorIndex]);
 800b7d6:	4b3a      	ldr	r3, [pc, #232]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b7d8:	8a9b      	ldrh	r3, [r3, #20]
 800b7da:	461a      	mov	r2, r3
 800b7dc:	4613      	mov	r3, r2
 800b7de:	005b      	lsls	r3, r3, #1
 800b7e0:	4413      	add	r3, r2
 800b7e2:	009b      	lsls	r3, r3, #2
 800b7e4:	4a37      	ldr	r2, [pc, #220]	; (800b8c4 <TempCollect_Operate+0x1e8>)
 800b7e6:	4413      	add	r3, r2
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7f5 fc73 	bl	80010d4 <MCP9808_DecodeTemperature>
 800b7ee:	eef0 7a40 	vmov.f32	s15, s0
 800b7f2:	4b33      	ldr	r3, [pc, #204]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b7f4:	edc3 7a03 	vstr	s15, [r3, #12]
			DataHandler_StoreMeasurement(kTemperatureData.fConvertedTemperature[0]);
 800b7f8:	4b31      	ldr	r3, [pc, #196]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b7fa:	edd3 7a03 	vldr	s15, [r3, #12]
 800b7fe:	eeb0 0a67 	vmov.f32	s0, s15
 800b802:	f7ff fe49 	bl	800b498 <DataHandler_StoreMeasurement>
		}
		if( !kTemperatureData.bReadFinished[1] )
 800b806:	4b2e      	ldr	r3, [pc, #184]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b808:	7a5b      	ldrb	r3, [r3, #9]
 800b80a:	f083 0301 	eor.w	r3, r3, #1
 800b80e:	b2db      	uxtb	r3, r3
 800b810:	2b00      	cmp	r3, #0
 800b812:	d017      	beq.n	800b844 <TempCollect_Operate+0x168>
		{
			kTemperatureData.fConvertedTemperature[1] = MCP9808_DecodeTemperature(&kaSensorArrayDataB[kTemperatureData.u16ArrayBSensorIndex]);
 800b814:	4b2a      	ldr	r3, [pc, #168]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b816:	8adb      	ldrh	r3, [r3, #22]
 800b818:	461a      	mov	r2, r3
 800b81a:	4613      	mov	r3, r2
 800b81c:	005b      	lsls	r3, r3, #1
 800b81e:	4413      	add	r3, r2
 800b820:	009b      	lsls	r3, r3, #2
 800b822:	4a29      	ldr	r2, [pc, #164]	; (800b8c8 <TempCollect_Operate+0x1ec>)
 800b824:	4413      	add	r3, r2
 800b826:	4618      	mov	r0, r3
 800b828:	f7f5 fc54 	bl	80010d4 <MCP9808_DecodeTemperature>
 800b82c:	eef0 7a40 	vmov.f32	s15, s0
 800b830:	4b23      	ldr	r3, [pc, #140]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b832:	edc3 7a04 	vstr	s15, [r3, #16]
			DataHandler_StoreMeasurement(kTemperatureData.fConvertedTemperature[0]);
 800b836:	4b22      	ldr	r3, [pc, #136]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b838:	edd3 7a03 	vldr	s15, [r3, #12]
 800b83c:	eeb0 0a67 	vmov.f32	s0, s15
 800b840:	f7ff fe2a 	bl	800b498 <DataHandler_StoreMeasurement>
		}

		kTemperatureData.eState = TempCollect_ArmNewReading;
 800b844:	4b1e      	ldr	r3, [pc, #120]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b846:	2204      	movs	r2, #4
 800b848:	71da      	strb	r2, [r3, #7]
		break;
 800b84a:	e037      	b.n	800b8bc <TempCollect_Operate+0x1e0>

	case(TempCollect_ArmNewReading):
		kTemperatureData.u16ArrayASensorIndex++;
 800b84c:	4b1c      	ldr	r3, [pc, #112]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b84e:	8a9b      	ldrh	r3, [r3, #20]
 800b850:	3301      	adds	r3, #1
 800b852:	b29a      	uxth	r2, r3
 800b854:	4b1a      	ldr	r3, [pc, #104]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b856:	829a      	strh	r2, [r3, #20]

		if( kTemperatureData.u16ArrayASensorIndex >= MCP9808_I2CA_DeviceCount)
 800b858:	4b19      	ldr	r3, [pc, #100]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b85a:	8a9b      	ldrh	r3, [r3, #20]
 800b85c:	2b04      	cmp	r3, #4
 800b85e:	d902      	bls.n	800b866 <TempCollect_Operate+0x18a>
		{
			kTemperatureData.bReadFinished[0] = true;
 800b860:	4b17      	ldr	r3, [pc, #92]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b862:	2201      	movs	r2, #1
 800b864:	721a      	strb	r2, [r3, #8]
		}

		kTemperatureData.u16ArrayBSensorIndex++;
 800b866:	4b16      	ldr	r3, [pc, #88]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b868:	8adb      	ldrh	r3, [r3, #22]
 800b86a:	3301      	adds	r3, #1
 800b86c:	b29a      	uxth	r2, r3
 800b86e:	4b14      	ldr	r3, [pc, #80]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b870:	82da      	strh	r2, [r3, #22]

		if( kTemperatureData.u16ArrayBSensorIndex >= MCP9808_I2CB_DeviceCount)
 800b872:	4b13      	ldr	r3, [pc, #76]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b874:	8adb      	ldrh	r3, [r3, #22]
 800b876:	2b04      	cmp	r3, #4
 800b878:	d902      	bls.n	800b880 <TempCollect_Operate+0x1a4>
		{
			kTemperatureData.bReadFinished[1] = true;
 800b87a:	4b11      	ldr	r3, [pc, #68]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b87c:	2201      	movs	r2, #1
 800b87e:	725a      	strb	r2, [r3, #9]
		}

		if ( kTemperatureData.bReadFinished[0] && kTemperatureData.bReadFinished[1] )
 800b880:	4b0f      	ldr	r3, [pc, #60]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b882:	7a1b      	ldrb	r3, [r3, #8]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d00f      	beq.n	800b8a8 <TempCollect_Operate+0x1cc>
 800b888:	4b0d      	ldr	r3, [pc, #52]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b88a:	7a5b      	ldrb	r3, [r3, #9]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d00b      	beq.n	800b8a8 <TempCollect_Operate+0x1cc>
		{
			kTemperatureData.eState = TempCollect_Initialized;
 800b890:	4b0b      	ldr	r3, [pc, #44]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b892:	2201      	movs	r2, #1
 800b894:	71da      	strb	r2, [r3, #7]

			/*
			 * Open new measurement at the end of current session
			 */
			DataHandler_OpenNewMeasurement(kTemperatureData.u32MeasurementCounter++);
 800b896:	4b0a      	ldr	r3, [pc, #40]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b898:	699b      	ldr	r3, [r3, #24]
 800b89a:	1c5a      	adds	r2, r3, #1
 800b89c:	4908      	ldr	r1, [pc, #32]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b89e:	618a      	str	r2, [r1, #24]
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f7ff fd65 	bl	800b370 <DataHandler_OpenNewMeasurement>
		}
		else
		{
			kTemperatureData.eState = TempCollect_TemperatureReadRequest;
		}
		break;
 800b8a6:	e009      	b.n	800b8bc <TempCollect_Operate+0x1e0>
			kTemperatureData.eState = TempCollect_TemperatureReadRequest;
 800b8a8:	4b05      	ldr	r3, [pc, #20]	; (800b8c0 <TempCollect_Operate+0x1e4>)
 800b8aa:	2202      	movs	r2, #2
 800b8ac:	71da      	strb	r2, [r3, #7]
		break;
 800b8ae:	e005      	b.n	800b8bc <TempCollect_Operate+0x1e0>
	default:
		AssertError(AppError_TempCollectDefaultState); // Incorrect entry
 800b8b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800b8b4:	f7ff fcc4 	bl	800b240 <AssertError>
	break;
 800b8b8:	e000      	b.n	800b8bc <TempCollect_Operate+0x1e0>
		break;
 800b8ba:	bf00      	nop
	}
}
 800b8bc:	bf00      	nop
 800b8be:	bd80      	pop	{r7, pc}
 800b8c0:	200007b8 	.word	0x200007b8
 800b8c4:	20000a20 	.word	0x20000a20
 800b8c8:	20000a5c 	.word	0x20000a5c

0800b8cc <TempCollect_Initialize>:

void TempCollect_Initialize()
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	af00      	add	r7, sp, #0
	kTemperatureData.eState = TempCollect_Initialized;
 800b8d0:	4b05      	ldr	r3, [pc, #20]	; (800b8e8 <TempCollect_Initialize+0x1c>)
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	71da      	strb	r2, [r3, #7]
	kTemperatureData.bEnabledFlag = true;
 800b8d6:	4b04      	ldr	r3, [pc, #16]	; (800b8e8 <TempCollect_Initialize+0x1c>)
 800b8d8:	2201      	movs	r2, #1
 800b8da:	715a      	strb	r2, [r3, #5]
	}
	if(MCP9808_I2CB_DeviceCount == 0)
	{
		kTemperatureData.bStateReady[1] = true;
	}
}
 800b8dc:	bf00      	nop
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr
 800b8e6:	bf00      	nop
 800b8e8:	200007b8 	.word	0x200007b8

0800b8ec <TempCollect_ScheduleMeasurement>:
void TempCollect_RetrieveResult(TemperatureData_t *sTemperatureData);

/* Interrupt callback functions */

void TempCollect_ScheduleMeasurement()
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	af00      	add	r7, sp, #0
	ToggleLED_D();
 800b8f0:	f7f5 fb20 	bl	8000f34 <ToggleLED_D>
	if(kTemperatureData.bScheduleMeasurement)
 800b8f4:	4b06      	ldr	r3, [pc, #24]	; (800b910 <TempCollect_ScheduleMeasurement+0x24>)
 800b8f6:	799b      	ldrb	r3, [r3, #6]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d004      	beq.n	800b906 <TempCollect_ScheduleMeasurement+0x1a>
	{
		AssertError(AppError_TempCollectRequestOverlap); // Overlap of requests;
 800b8fc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b900:	f7ff fc9e 	bl	800b240 <AssertError>
	}
	else
	{
		kTemperatureData.bScheduleMeasurement = true;
	}
}
 800b904:	e002      	b.n	800b90c <TempCollect_ScheduleMeasurement+0x20>
		kTemperatureData.bScheduleMeasurement = true;
 800b906:	4b02      	ldr	r3, [pc, #8]	; (800b910 <TempCollect_ScheduleMeasurement+0x24>)
 800b908:	2201      	movs	r2, #1
 800b90a:	719a      	strb	r2, [r3, #6]
}
 800b90c:	bf00      	nop
 800b90e:	bd80      	pop	{r7, pc}
 800b910:	200007b8 	.word	0x200007b8

0800b914 <TempCollect_I2CA_Done>:

void TempCollect_I2CA_Done()
{
 800b914:	b480      	push	{r7}
 800b916:	af00      	add	r7, sp, #0
	kTemperatureData.bStateReady[0] = true;
 800b918:	4b03      	ldr	r3, [pc, #12]	; (800b928 <TempCollect_I2CA_Done+0x14>)
 800b91a:	2201      	movs	r2, #1
 800b91c:	729a      	strb	r2, [r3, #10]
}
 800b91e:	bf00      	nop
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr
 800b928:	200007b8 	.word	0x200007b8

0800b92c <TempCollect_I2CB_Done>:
void TempCollect_I2CB_Done()
{
 800b92c:	b480      	push	{r7}
 800b92e:	af00      	add	r7, sp, #0
	kTemperatureData.bStateReady[1] = true;
 800b930:	4b03      	ldr	r3, [pc, #12]	; (800b940 <TempCollect_I2CB_Done+0x14>)
 800b932:	2201      	movs	r2, #1
 800b934:	72da      	strb	r2, [r3, #11]
}
 800b936:	bf00      	nop
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr
 800b940:	200007b8 	.word	0x200007b8

0800b944 <CommManager_Initialize>:
}CommunicationData_t;

static CommunicationData_t kCommData;

void CommManager_Initialize()
{
 800b944:	b580      	push	{r7, lr}
 800b946:	af00      	add	r7, sp, #0
	kCommData.bInitialized = true;
 800b948:	4b03      	ldr	r3, [pc, #12]	; (800b958 <CommManager_Initialize+0x14>)
 800b94a:	2201      	movs	r2, #1
 800b94c:	701a      	strb	r2, [r3, #0]
	CommManager_FlushFrame();
 800b94e:	f000 f8f7 	bl	800bb40 <CommManager_FlushFrame>
}
 800b952:	bf00      	nop
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop
 800b958:	200007d8 	.word	0x200007d8

0800b95c <CommManager_Operate>:
void CommManager_Operate()
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0
	bool bResult;

	switch (kCommData.eState)
 800b962:	4b57      	ldr	r3, [pc, #348]	; (800bac0 <CommManager_Operate+0x164>)
 800b964:	7a1b      	ldrb	r3, [r3, #8]
 800b966:	2b07      	cmp	r3, #7
 800b968:	f200 80a3 	bhi.w	800bab2 <CommManager_Operate+0x156>
 800b96c:	a201      	add	r2, pc, #4	; (adr r2, 800b974 <CommManager_Operate+0x18>)
 800b96e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b972:	bf00      	nop
 800b974:	0800b995 	.word	0x0800b995
 800b978:	0800bab3 	.word	0x0800bab3
 800b97c:	0800b99d 	.word	0x0800b99d
 800b980:	0800b9b9 	.word	0x0800b9b9
 800b984:	0800b9cf 	.word	0x0800b9cf
 800b988:	0800b9eb 	.word	0x0800b9eb
 800b98c:	0800bab3 	.word	0x0800bab3
 800b990:	0800ba99 	.word	0x0800ba99
	{
	case Comm_Initialized:

		kCommData.eState = Comm_Idle;
 800b994:	4b4a      	ldr	r3, [pc, #296]	; (800bac0 <CommManager_Operate+0x164>)
 800b996:	2201      	movs	r2, #1
 800b998:	721a      	strb	r2, [r3, #8]
		break;
 800b99a:	e08d      	b.n	800bab8 <CommManager_Operate+0x15c>

		//Wait for new Arm_Transmission call
		break;
	case Comm_OpenTransmission:

		kCommData.u8Frame[0] = dOpeningByte;
 800b99c:	4b48      	ldr	r3, [pc, #288]	; (800bac0 <CommManager_Operate+0x164>)
 800b99e:	220a      	movs	r2, #10
 800b9a0:	731a      	strb	r2, [r3, #12]
		kCommData.u8CurrentFrameLength = 1;
 800b9a2:	4b47      	ldr	r3, [pc, #284]	; (800bac0 <CommManager_Operate+0x164>)
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	759a      	strb	r2, [r3, #22]
		kCommData.ePreviousState = kCommData.eState;
 800b9a8:	4b45      	ldr	r3, [pc, #276]	; (800bac0 <CommManager_Operate+0x164>)
 800b9aa:	7a1a      	ldrb	r2, [r3, #8]
 800b9ac:	4b44      	ldr	r3, [pc, #272]	; (800bac0 <CommManager_Operate+0x164>)
 800b9ae:	725a      	strb	r2, [r3, #9]
		kCommData.eState = Comm_Transmit;
 800b9b0:	4b43      	ldr	r3, [pc, #268]	; (800bac0 <CommManager_Operate+0x164>)
 800b9b2:	2205      	movs	r2, #5
 800b9b4:	721a      	strb	r2, [r3, #8]
		break;
 800b9b6:	e07f      	b.n	800bab8 <CommManager_Operate+0x15c>
	case Comm_AssembleFrame:


		kCommData.u8CurrentFrameLength = 10;
 800b9b8:	4b41      	ldr	r3, [pc, #260]	; (800bac0 <CommManager_Operate+0x164>)
 800b9ba:	220a      	movs	r2, #10
 800b9bc:	759a      	strb	r2, [r3, #22]
		kCommData.ePreviousState = kCommData.eState;
 800b9be:	4b40      	ldr	r3, [pc, #256]	; (800bac0 <CommManager_Operate+0x164>)
 800b9c0:	7a1a      	ldrb	r2, [r3, #8]
 800b9c2:	4b3f      	ldr	r3, [pc, #252]	; (800bac0 <CommManager_Operate+0x164>)
 800b9c4:	725a      	strb	r2, [r3, #9]
		kCommData.eState = Comm_Transmit;
 800b9c6:	4b3e      	ldr	r3, [pc, #248]	; (800bac0 <CommManager_Operate+0x164>)
 800b9c8:	2205      	movs	r2, #5
 800b9ca:	721a      	strb	r2, [r3, #8]
		break;
 800b9cc:	e074      	b.n	800bab8 <CommManager_Operate+0x15c>
	case Comm_CloseTransmission:

		kCommData.u8Frame[0] = dClosingByte;
 800b9ce:	4b3c      	ldr	r3, [pc, #240]	; (800bac0 <CommManager_Operate+0x164>)
 800b9d0:	220d      	movs	r2, #13
 800b9d2:	731a      	strb	r2, [r3, #12]
		kCommData.u8CurrentFrameLength = 1;
 800b9d4:	4b3a      	ldr	r3, [pc, #232]	; (800bac0 <CommManager_Operate+0x164>)
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	759a      	strb	r2, [r3, #22]
		kCommData.ePreviousState = kCommData.eState;
 800b9da:	4b39      	ldr	r3, [pc, #228]	; (800bac0 <CommManager_Operate+0x164>)
 800b9dc:	7a1a      	ldrb	r2, [r3, #8]
 800b9de:	4b38      	ldr	r3, [pc, #224]	; (800bac0 <CommManager_Operate+0x164>)
 800b9e0:	725a      	strb	r2, [r3, #9]
		kCommData.eState = Comm_Transmit;
 800b9e2:	4b37      	ldr	r3, [pc, #220]	; (800bac0 <CommManager_Operate+0x164>)
 800b9e4:	2205      	movs	r2, #5
 800b9e6:	721a      	strb	r2, [r3, #8]
		break;
 800b9e8:	e066      	b.n	800bab8 <CommManager_Operate+0x15c>
	case Comm_Transmit:

		bResult = USB_TransmitData(kCommData.u8Frame, kCommData.u8CurrentFrameLength);
 800b9ea:	4b35      	ldr	r3, [pc, #212]	; (800bac0 <CommManager_Operate+0x164>)
 800b9ec:	7d9b      	ldrb	r3, [r3, #22]
 800b9ee:	4619      	mov	r1, r3
 800b9f0:	4834      	ldr	r0, [pc, #208]	; (800bac4 <CommManager_Operate+0x168>)
 800b9f2:	f000 f8bf 	bl	800bb74 <USB_TransmitData>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	71fb      	strb	r3, [r7, #7]
		if( !bResult )
 800b9fa:	79fb      	ldrb	r3, [r7, #7]
 800b9fc:	f083 0301 	eor.w	r3, r3, #1
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d036      	beq.n	800ba74 <CommManager_Operate+0x118>
		{
			kCommData.u8TrialsCounter = 0;
 800ba06:	4b2e      	ldr	r3, [pc, #184]	; (800bac0 <CommManager_Operate+0x164>)
 800ba08:	2200      	movs	r2, #0
 800ba0a:	75da      	strb	r2, [r3, #23]
			if ( kCommData.ePreviousState == Comm_AssembleFrame )
 800ba0c:	4b2c      	ldr	r3, [pc, #176]	; (800bac0 <CommManager_Operate+0x164>)
 800ba0e:	7a5b      	ldrb	r3, [r3, #9]
 800ba10:	2b03      	cmp	r3, #3
 800ba12:	d110      	bne.n	800ba36 <CommManager_Operate+0xda>
			{
				kCommData.u16ReadoutPointer++;
 800ba14:	4b2a      	ldr	r3, [pc, #168]	; (800bac0 <CommManager_Operate+0x164>)
 800ba16:	895b      	ldrh	r3, [r3, #10]
 800ba18:	3301      	adds	r3, #1
 800ba1a:	b29a      	uxth	r2, r3
 800ba1c:	4b28      	ldr	r3, [pc, #160]	; (800bac0 <CommManager_Operate+0x164>)
 800ba1e:	815a      	strh	r2, [r3, #10]
				if( kCommData.u16ReadoutPointer >= dMemoryWidth)
 800ba20:	4b27      	ldr	r3, [pc, #156]	; (800bac0 <CommManager_Operate+0x164>)
 800ba22:	895b      	ldrh	r3, [r3, #10]
 800ba24:	2b0f      	cmp	r3, #15
 800ba26:	d946      	bls.n	800bab6 <CommManager_Operate+0x15a>
				{
					kCommData.eState = Comm_CloseTransmission;
 800ba28:	4b25      	ldr	r3, [pc, #148]	; (800bac0 <CommManager_Operate+0x164>)
 800ba2a:	2204      	movs	r2, #4
 800ba2c:	721a      	strb	r2, [r3, #8]
					kCommData.u16ReadoutPointer = 0;
 800ba2e:	4b24      	ldr	r3, [pc, #144]	; (800bac0 <CommManager_Operate+0x164>)
 800ba30:	2200      	movs	r2, #0
 800ba32:	815a      	strh	r2, [r3, #10]
			if(kCommData.u8TrialsCounter > dMaxTrialsCount)
			{
				kCommData.eState = Comm_Abort;
			}
		}
		break;
 800ba34:	e03f      	b.n	800bab6 <CommManager_Operate+0x15a>
			else if( kCommData.ePreviousState == Comm_CloseTransmission)
 800ba36:	4b22      	ldr	r3, [pc, #136]	; (800bac0 <CommManager_Operate+0x164>)
 800ba38:	7a5b      	ldrb	r3, [r3, #9]
 800ba3a:	2b04      	cmp	r3, #4
 800ba3c:	d107      	bne.n	800ba4e <CommManager_Operate+0xf2>
				kCommData.pkMemoryPointer->eMemoryState = MemoryState_DataSent;
 800ba3e:	4b20      	ldr	r3, [pc, #128]	; (800bac0 <CommManager_Operate+0x164>)
 800ba40:	685b      	ldr	r3, [r3, #4]
 800ba42:	2202      	movs	r2, #2
 800ba44:	711a      	strb	r2, [r3, #4]
				kCommData.eState = Comm_Idle;
 800ba46:	4b1e      	ldr	r3, [pc, #120]	; (800bac0 <CommManager_Operate+0x164>)
 800ba48:	2201      	movs	r2, #1
 800ba4a:	721a      	strb	r2, [r3, #8]
		break;
 800ba4c:	e033      	b.n	800bab6 <CommManager_Operate+0x15a>
			else if ( kCommData.ePreviousState == Comm_OpenTransmission )
 800ba4e:	4b1c      	ldr	r3, [pc, #112]	; (800bac0 <CommManager_Operate+0x164>)
 800ba50:	7a5b      	ldrb	r3, [r3, #9]
 800ba52:	2b02      	cmp	r3, #2
 800ba54:	d106      	bne.n	800ba64 <CommManager_Operate+0x108>
				kCommData.u16ReadoutPointer = 0;
 800ba56:	4b1a      	ldr	r3, [pc, #104]	; (800bac0 <CommManager_Operate+0x164>)
 800ba58:	2200      	movs	r2, #0
 800ba5a:	815a      	strh	r2, [r3, #10]
				kCommData.eState = Comm_AssembleFrame;
 800ba5c:	4b18      	ldr	r3, [pc, #96]	; (800bac0 <CommManager_Operate+0x164>)
 800ba5e:	2203      	movs	r2, #3
 800ba60:	721a      	strb	r2, [r3, #8]
		break;
 800ba62:	e028      	b.n	800bab6 <CommManager_Operate+0x15a>
				AssertError(AppError_TransmissionLogicBroken);
 800ba64:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800ba68:	f7ff fbea 	bl	800b240 <AssertError>
				kCommData.eState = Comm_Abort;
 800ba6c:	4b14      	ldr	r3, [pc, #80]	; (800bac0 <CommManager_Operate+0x164>)
 800ba6e:	2207      	movs	r2, #7
 800ba70:	721a      	strb	r2, [r3, #8]
		break;
 800ba72:	e020      	b.n	800bab6 <CommManager_Operate+0x15a>
			kCommData.eState = kCommData.ePreviousState;
 800ba74:	4b12      	ldr	r3, [pc, #72]	; (800bac0 <CommManager_Operate+0x164>)
 800ba76:	7a5a      	ldrb	r2, [r3, #9]
 800ba78:	4b11      	ldr	r3, [pc, #68]	; (800bac0 <CommManager_Operate+0x164>)
 800ba7a:	721a      	strb	r2, [r3, #8]
			kCommData.u8TrialsCounter++;
 800ba7c:	4b10      	ldr	r3, [pc, #64]	; (800bac0 <CommManager_Operate+0x164>)
 800ba7e:	7ddb      	ldrb	r3, [r3, #23]
 800ba80:	3301      	adds	r3, #1
 800ba82:	b2da      	uxtb	r2, r3
 800ba84:	4b0e      	ldr	r3, [pc, #56]	; (800bac0 <CommManager_Operate+0x164>)
 800ba86:	75da      	strb	r2, [r3, #23]
			if(kCommData.u8TrialsCounter > dMaxTrialsCount)
 800ba88:	4b0d      	ldr	r3, [pc, #52]	; (800bac0 <CommManager_Operate+0x164>)
 800ba8a:	7ddb      	ldrb	r3, [r3, #23]
 800ba8c:	2b03      	cmp	r3, #3
 800ba8e:	d912      	bls.n	800bab6 <CommManager_Operate+0x15a>
				kCommData.eState = Comm_Abort;
 800ba90:	4b0b      	ldr	r3, [pc, #44]	; (800bac0 <CommManager_Operate+0x164>)
 800ba92:	2207      	movs	r2, #7
 800ba94:	721a      	strb	r2, [r3, #8]
		break;
 800ba96:	e00e      	b.n	800bab6 <CommManager_Operate+0x15a>
	case Comm_Receiving:

		break;
	case Comm_Abort:

		kCommData.eState = Comm_Idle;
 800ba98:	4b09      	ldr	r3, [pc, #36]	; (800bac0 <CommManager_Operate+0x164>)
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	721a      	strb	r2, [r3, #8]

		kCommData.pkMemoryPointer->eMemoryState = MemoryState_DataSkipped;
 800ba9e:	4b08      	ldr	r3, [pc, #32]	; (800bac0 <CommManager_Operate+0x164>)
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	2203      	movs	r2, #3
 800baa4:	711a      	strb	r2, [r3, #4]
		kCommData.u16ReadoutPointer = 0;
 800baa6:	4b06      	ldr	r3, [pc, #24]	; (800bac0 <CommManager_Operate+0x164>)
 800baa8:	2200      	movs	r2, #0
 800baaa:	815a      	strh	r2, [r3, #10]
		CommManager_FlushFrame();
 800baac:	f000 f848 	bl	800bb40 <CommManager_FlushFrame>
		break;
 800bab0:	e002      	b.n	800bab8 <CommManager_Operate+0x15c>
	default:

		break;
 800bab2:	bf00      	nop
 800bab4:	e000      	b.n	800bab8 <CommManager_Operate+0x15c>
		break;
 800bab6:	bf00      	nop
	}
}
 800bab8:	bf00      	nop
 800baba:	3708      	adds	r7, #8
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}
 800bac0:	200007d8 	.word	0x200007d8
 800bac4:	200007e4 	.word	0x200007e4

0800bac8 <CommManager_SetUSBConnectionState>:

void CommManager_SetUSBConnectionState( USBState_t eState )
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
 800bace:	4603      	mov	r3, r0
 800bad0:	71fb      	strb	r3, [r7, #7]
	//todo: Add periodic change of the VSENSE pin
	if( eState == USB_Connected)
 800bad2:	79fb      	ldrb	r3, [r7, #7]
 800bad4:	2b01      	cmp	r3, #1
 800bad6:	d106      	bne.n	800bae6 <CommManager_SetUSBConnectionState+0x1e>
	{
		kCommData.bUSBConnected = true;
 800bad8:	4b09      	ldr	r3, [pc, #36]	; (800bb00 <CommManager_SetUSBConnectionState+0x38>)
 800bada:	2201      	movs	r2, #1
 800badc:	761a      	strb	r2, [r3, #24]
		OperateLED_C(eLED_On);
 800bade:	2000      	movs	r0, #0
 800bae0:	f7f5 fa02 	bl	8000ee8 <OperateLED_C>
	{
		kCommData.bUSBConnected = false;
		kCommData.eState = Comm_Abort; // Cancel transmission - clear buffer, stop frame assembly and other;
		OperateLED_C(eLED_Off);
	}
}
 800bae4:	e008      	b.n	800baf8 <CommManager_SetUSBConnectionState+0x30>
		kCommData.bUSBConnected = false;
 800bae6:	4b06      	ldr	r3, [pc, #24]	; (800bb00 <CommManager_SetUSBConnectionState+0x38>)
 800bae8:	2200      	movs	r2, #0
 800baea:	761a      	strb	r2, [r3, #24]
		kCommData.eState = Comm_Abort; // Cancel transmission - clear buffer, stop frame assembly and other;
 800baec:	4b04      	ldr	r3, [pc, #16]	; (800bb00 <CommManager_SetUSBConnectionState+0x38>)
 800baee:	2207      	movs	r2, #7
 800baf0:	721a      	strb	r2, [r3, #8]
		OperateLED_C(eLED_Off);
 800baf2:	2001      	movs	r0, #1
 800baf4:	f7f5 f9f8 	bl	8000ee8 <OperateLED_C>
}
 800baf8:	bf00      	nop
 800bafa:	3708      	adds	r7, #8
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}
 800bb00:	200007d8 	.word	0x200007d8

0800bb04 <ComManager_ArmTransmission>:

void ComManager_ArmTransmission()
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	af00      	add	r7, sp, #0
	if( kCommData.bUSBConnected)
 800bb08:	4b0c      	ldr	r3, [pc, #48]	; (800bb3c <ComManager_ArmTransmission+0x38>)
 800bb0a:	7e1b      	ldrb	r3, [r3, #24]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d013      	beq.n	800bb38 <ComManager_ArmTransmission+0x34>
	{
		if(kCommData.eState == Comm_Idle)
 800bb10:	4b0a      	ldr	r3, [pc, #40]	; (800bb3c <ComManager_ArmTransmission+0x38>)
 800bb12:	7a1b      	ldrb	r3, [r3, #8]
 800bb14:	2b01      	cmp	r3, #1
 800bb16:	d10b      	bne.n	800bb30 <ComManager_ArmTransmission+0x2c>
		{
			kCommData.eState = Comm_AssembleFrame;
 800bb18:	4b08      	ldr	r3, [pc, #32]	; (800bb3c <ComManager_ArmTransmission+0x38>)
 800bb1a:	2203      	movs	r2, #3
 800bb1c:	721a      	strb	r2, [r3, #8]
			kCommData.u16ReadoutPointer = 0;
 800bb1e:	4b07      	ldr	r3, [pc, #28]	; (800bb3c <ComManager_ArmTransmission+0x38>)
 800bb20:	2200      	movs	r2, #0
 800bb22:	815a      	strh	r2, [r3, #10]
			DataHandler_AccessMemoryInterchange(kCommData.pkMemoryPointer);
 800bb24:	4b05      	ldr	r3, [pc, #20]	; (800bb3c <ComManager_ArmTransmission+0x38>)
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f7ff fd55 	bl	800b5d8 <DataHandler_AccessMemoryInterchange>
		else
		{
			AssertError(AppError_TransmissionOverlap);
		}
	}
}
 800bb2e:	e003      	b.n	800bb38 <ComManager_ArmTransmission+0x34>
			AssertError(AppError_TransmissionOverlap);
 800bb30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800bb34:	f7ff fb84 	bl	800b240 <AssertError>
}
 800bb38:	bf00      	nop
 800bb3a:	bd80      	pop	{r7, pc}
 800bb3c:	200007d8 	.word	0x200007d8

0800bb40 <CommManager_FlushFrame>:

/* Internal functions */

void CommManager_FlushFrame()
{
 800bb40:	b480      	push	{r7}
 800bb42:	b083      	sub	sp, #12
 800bb44:	af00      	add	r7, sp, #0
	for(uint8_t u8Idx = 0; u8Idx < dMaxDataLenght; u8Idx++)
 800bb46:	2300      	movs	r3, #0
 800bb48:	71fb      	strb	r3, [r7, #7]
 800bb4a:	e007      	b.n	800bb5c <CommManager_FlushFrame+0x1c>
	{
		kCommData.u8Frame[u8Idx] = 0;
 800bb4c:	79fb      	ldrb	r3, [r7, #7]
 800bb4e:	4a08      	ldr	r2, [pc, #32]	; (800bb70 <CommManager_FlushFrame+0x30>)
 800bb50:	4413      	add	r3, r2
 800bb52:	2200      	movs	r2, #0
 800bb54:	731a      	strb	r2, [r3, #12]
	for(uint8_t u8Idx = 0; u8Idx < dMaxDataLenght; u8Idx++)
 800bb56:	79fb      	ldrb	r3, [r7, #7]
 800bb58:	3301      	adds	r3, #1
 800bb5a:	71fb      	strb	r3, [r7, #7]
 800bb5c:	79fb      	ldrb	r3, [r7, #7]
 800bb5e:	2b09      	cmp	r3, #9
 800bb60:	d9f4      	bls.n	800bb4c <CommManager_FlushFrame+0xc>
	}
}
 800bb62:	bf00      	nop
 800bb64:	bf00      	nop
 800bb66:	370c      	adds	r7, #12
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr
 800bb70:	200007d8 	.word	0x200007d8

0800bb74 <USB_TransmitData>:
//static uint8_t Buf[] = "Test/r/n";

void ConvertDataToBytes(float *Dataset);

bool USB_TransmitData(uint8_t *Dataset, uint8_t u8Length)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b084      	sub	sp, #16
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	70fb      	strb	r3, [r7, #3]
	bool bResult = false;
 800bb80:	2300      	movs	r3, #0
 800bb82:	73fb      	strb	r3, [r7, #15]
	/*
	 * result = true means that a fault occurred
	 */
	bResult = CDC_Transmit_FS(Dataset,  u8Length);
 800bb84:	78fb      	ldrb	r3, [r7, #3]
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	4619      	mov	r1, r3
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f000 fe38 	bl	800c800 <CDC_Transmit_FS>
 800bb90:	4603      	mov	r3, r0
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	bf14      	ite	ne
 800bb96:	2301      	movne	r3, #1
 800bb98:	2300      	moveq	r3, #0
 800bb9a:	73fb      	strb	r3, [r7, #15]

	return bResult;
 800bb9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3710      	adds	r7, #16
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}
	...

0800bba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800bbac:	f7f5 fae0 	bl	8001170 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800bbb0:	f000 f836 	bl	800bc20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800bbb4:	f000 fa0e 	bl	800bfd4 <MX_GPIO_Init>
  MX_DMA_Init();
 800bbb8:	f000 f9ec 	bl	800bf94 <MX_DMA_Init>
  MX_RTC_Init();
 800bbbc:	f000 f8f8 	bl	800bdb0 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 800bbc0:	f000 f91c 	bl	800bdfc <MX_SDIO_SD_Init>
  MX_I2C1_Init();
 800bbc4:	f000 f898 	bl	800bcf8 <MX_I2C1_Init>
  MX_I2C2_Init();
 800bbc8:	f000 f8c4 	bl	800bd54 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800bbcc:	f000 f9b8 	bl	800bf40 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800bbd0:	f000 fd58 	bl	800c684 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 800bbd4:	f000 f942 	bl	800be5c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  SensorArray_Init(&hi2c1, &hi2c2);
 800bbd8:	490d      	ldr	r1, [pc, #52]	; (800bc10 <main+0x68>)
 800bbda:	480e      	ldr	r0, [pc, #56]	; (800bc14 <main+0x6c>)
 800bbdc:	f7f5 f9fa 	bl	8000fd4 <SensorArray_Init>
//  HAL_TIM_Base_MspInit(&htim2);
  HAL_TIM_Base_Start_IT(&htim2);
 800bbe0:	480d      	ldr	r0, [pc, #52]	; (800bc18 <main+0x70>)
 800bbe2:	f7fa fcf3 	bl	80065cc <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, SET);
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	2101      	movs	r1, #1
 800bbea:	480c      	ldr	r0, [pc, #48]	; (800bc1c <main+0x74>)
 800bbec:	f7f6 f91e 	bl	8001e2c <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, SET);
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800bbf6:	4809      	ldr	r0, [pc, #36]	; (800bc1c <main+0x74>)
 800bbf8:	f7f6 f918 	bl	8001e2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, SET);
 800bbfc:	2201      	movs	r2, #1
 800bbfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bc02:	4806      	ldr	r0, [pc, #24]	; (800bc1c <main+0x74>)
 800bc04:	f7f6 f912 	bl	8001e2c <HAL_GPIO_WritePin>

  while (1)
  {
	  ApplicationPerform();
 800bc08:	f7ff f9da 	bl	800afc0 <ApplicationPerform>
 800bc0c:	e7fc      	b.n	800bc08 <main+0x60>
 800bc0e:	bf00      	nop
 800bc10:	20000b50 	.word	0x20000b50
 800bc14:	20000afc 	.word	0x20000afc
 800bc18:	20000c8c 	.word	0x20000c8c
 800bc1c:	40020800 	.word	0x40020800

0800bc20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b094      	sub	sp, #80	; 0x50
 800bc24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800bc26:	f107 0320 	add.w	r3, r7, #32
 800bc2a:	2230      	movs	r2, #48	; 0x30
 800bc2c:	2100      	movs	r1, #0
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f001 fa86 	bl	800d140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800bc34:	f107 030c 	add.w	r3, r7, #12
 800bc38:	2200      	movs	r2, #0
 800bc3a:	601a      	str	r2, [r3, #0]
 800bc3c:	605a      	str	r2, [r3, #4]
 800bc3e:	609a      	str	r2, [r3, #8]
 800bc40:	60da      	str	r2, [r3, #12]
 800bc42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800bc44:	2300      	movs	r3, #0
 800bc46:	60bb      	str	r3, [r7, #8]
 800bc48:	4b29      	ldr	r3, [pc, #164]	; (800bcf0 <SystemClock_Config+0xd0>)
 800bc4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc4c:	4a28      	ldr	r2, [pc, #160]	; (800bcf0 <SystemClock_Config+0xd0>)
 800bc4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc52:	6413      	str	r3, [r2, #64]	; 0x40
 800bc54:	4b26      	ldr	r3, [pc, #152]	; (800bcf0 <SystemClock_Config+0xd0>)
 800bc56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc5c:	60bb      	str	r3, [r7, #8]
 800bc5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800bc60:	2300      	movs	r3, #0
 800bc62:	607b      	str	r3, [r7, #4]
 800bc64:	4b23      	ldr	r3, [pc, #140]	; (800bcf4 <SystemClock_Config+0xd4>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	4a22      	ldr	r2, [pc, #136]	; (800bcf4 <SystemClock_Config+0xd4>)
 800bc6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bc6e:	6013      	str	r3, [r2, #0]
 800bc70:	4b20      	ldr	r3, [pc, #128]	; (800bcf4 <SystemClock_Config+0xd4>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bc78:	607b      	str	r3, [r7, #4]
 800bc7a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800bc7c:	2305      	movs	r3, #5
 800bc7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800bc80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bc84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800bc86:	2301      	movs	r3, #1
 800bc88:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800bc8a:	2302      	movs	r3, #2
 800bc8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800bc8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bc92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800bc94:	230c      	movs	r3, #12
 800bc96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800bc98:	2348      	movs	r3, #72	; 0x48
 800bc9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800bc9c:	2302      	movs	r3, #2
 800bc9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800bca0:	2303      	movs	r3, #3
 800bca2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800bca4:	f107 0320 	add.w	r3, r7, #32
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f7f9 f84d 	bl	8004d48 <HAL_RCC_OscConfig>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d001      	beq.n	800bcb8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800bcb4:	f000 fa1a 	bl	800c0ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800bcb8:	230f      	movs	r3, #15
 800bcba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800bcbc:	2302      	movs	r3, #2
 800bcbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800bcc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bcc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800bcca:	2300      	movs	r3, #0
 800bccc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800bcce:	f107 030c 	add.w	r3, r7, #12
 800bcd2:	2102      	movs	r1, #2
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f7f9 faad 	bl	8005234 <HAL_RCC_ClockConfig>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d001      	beq.n	800bce4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800bce0:	f000 fa04 	bl	800c0ec <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800bce4:	f7f9 fb8c 	bl	8005400 <HAL_RCC_EnableCSS>
}
 800bce8:	bf00      	nop
 800bcea:	3750      	adds	r7, #80	; 0x50
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}
 800bcf0:	40023800 	.word	0x40023800
 800bcf4:	40007000 	.word	0x40007000

0800bcf8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800bcfc:	4b13      	ldr	r3, [pc, #76]	; (800bd4c <MX_I2C1_Init+0x54>)
 800bcfe:	4a14      	ldr	r2, [pc, #80]	; (800bd50 <MX_I2C1_Init+0x58>)
 800bd00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 25000;
 800bd02:	4b12      	ldr	r3, [pc, #72]	; (800bd4c <MX_I2C1_Init+0x54>)
 800bd04:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800bd08:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800bd0a:	4b10      	ldr	r3, [pc, #64]	; (800bd4c <MX_I2C1_Init+0x54>)
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800bd10:	4b0e      	ldr	r3, [pc, #56]	; (800bd4c <MX_I2C1_Init+0x54>)
 800bd12:	2200      	movs	r2, #0
 800bd14:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800bd16:	4b0d      	ldr	r3, [pc, #52]	; (800bd4c <MX_I2C1_Init+0x54>)
 800bd18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800bd1c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800bd1e:	4b0b      	ldr	r3, [pc, #44]	; (800bd4c <MX_I2C1_Init+0x54>)
 800bd20:	2200      	movs	r2, #0
 800bd22:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800bd24:	4b09      	ldr	r3, [pc, #36]	; (800bd4c <MX_I2C1_Init+0x54>)
 800bd26:	2200      	movs	r2, #0
 800bd28:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800bd2a:	4b08      	ldr	r3, [pc, #32]	; (800bd4c <MX_I2C1_Init+0x54>)
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800bd30:	4b06      	ldr	r3, [pc, #24]	; (800bd4c <MX_I2C1_Init+0x54>)
 800bd32:	2200      	movs	r2, #0
 800bd34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800bd36:	4805      	ldr	r0, [pc, #20]	; (800bd4c <MX_I2C1_Init+0x54>)
 800bd38:	f7f6 f8d0 	bl	8001edc <HAL_I2C_Init>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d001      	beq.n	800bd46 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800bd42:	f000 f9d3 	bl	800c0ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800bd46:	bf00      	nop
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	bf00      	nop
 800bd4c:	20000afc 	.word	0x20000afc
 800bd50:	40005400 	.word	0x40005400

0800bd54 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800bd58:	4b13      	ldr	r3, [pc, #76]	; (800bda8 <MX_I2C2_Init+0x54>)
 800bd5a:	4a14      	ldr	r2, [pc, #80]	; (800bdac <MX_I2C2_Init+0x58>)
 800bd5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 25000;
 800bd5e:	4b12      	ldr	r3, [pc, #72]	; (800bda8 <MX_I2C2_Init+0x54>)
 800bd60:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800bd64:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800bd66:	4b10      	ldr	r3, [pc, #64]	; (800bda8 <MX_I2C2_Init+0x54>)
 800bd68:	2200      	movs	r2, #0
 800bd6a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800bd6c:	4b0e      	ldr	r3, [pc, #56]	; (800bda8 <MX_I2C2_Init+0x54>)
 800bd6e:	2200      	movs	r2, #0
 800bd70:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800bd72:	4b0d      	ldr	r3, [pc, #52]	; (800bda8 <MX_I2C2_Init+0x54>)
 800bd74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800bd78:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800bd7a:	4b0b      	ldr	r3, [pc, #44]	; (800bda8 <MX_I2C2_Init+0x54>)
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800bd80:	4b09      	ldr	r3, [pc, #36]	; (800bda8 <MX_I2C2_Init+0x54>)
 800bd82:	2200      	movs	r2, #0
 800bd84:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800bd86:	4b08      	ldr	r3, [pc, #32]	; (800bda8 <MX_I2C2_Init+0x54>)
 800bd88:	2200      	movs	r2, #0
 800bd8a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800bd8c:	4b06      	ldr	r3, [pc, #24]	; (800bda8 <MX_I2C2_Init+0x54>)
 800bd8e:	2200      	movs	r2, #0
 800bd90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800bd92:	4805      	ldr	r0, [pc, #20]	; (800bda8 <MX_I2C2_Init+0x54>)
 800bd94:	f7f6 f8a2 	bl	8001edc <HAL_I2C_Init>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d001      	beq.n	800bda2 <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 800bd9e:	f000 f9a5 	bl	800c0ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800bda2:	bf00      	nop
 800bda4:	bd80      	pop	{r7, pc}
 800bda6:	bf00      	nop
 800bda8:	20000b50 	.word	0x20000b50
 800bdac:	40005800 	.word	0x40005800

0800bdb0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800bdb4:	4b0f      	ldr	r3, [pc, #60]	; (800bdf4 <MX_RTC_Init+0x44>)
 800bdb6:	4a10      	ldr	r2, [pc, #64]	; (800bdf8 <MX_RTC_Init+0x48>)
 800bdb8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800bdba:	4b0e      	ldr	r3, [pc, #56]	; (800bdf4 <MX_RTC_Init+0x44>)
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800bdc0:	4b0c      	ldr	r3, [pc, #48]	; (800bdf4 <MX_RTC_Init+0x44>)
 800bdc2:	227f      	movs	r2, #127	; 0x7f
 800bdc4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800bdc6:	4b0b      	ldr	r3, [pc, #44]	; (800bdf4 <MX_RTC_Init+0x44>)
 800bdc8:	22ff      	movs	r2, #255	; 0xff
 800bdca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800bdcc:	4b09      	ldr	r3, [pc, #36]	; (800bdf4 <MX_RTC_Init+0x44>)
 800bdce:	2200      	movs	r2, #0
 800bdd0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800bdd2:	4b08      	ldr	r3, [pc, #32]	; (800bdf4 <MX_RTC_Init+0x44>)
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800bdd8:	4b06      	ldr	r3, [pc, #24]	; (800bdf4 <MX_RTC_Init+0x44>)
 800bdda:	2200      	movs	r2, #0
 800bddc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800bdde:	4805      	ldr	r0, [pc, #20]	; (800bdf4 <MX_RTC_Init+0x44>)
 800bde0:	f7f9 fd10 	bl	8005804 <HAL_RTC_Init>
 800bde4:	4603      	mov	r3, r0
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d001      	beq.n	800bdee <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800bdea:	f000 f97f 	bl	800c0ec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800bdee:	bf00      	nop
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	20000be8 	.word	0x20000be8
 800bdf8:	40002800 	.word	0x40002800

0800bdfc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800be00:	4b14      	ldr	r3, [pc, #80]	; (800be54 <MX_SDIO_SD_Init+0x58>)
 800be02:	4a15      	ldr	r2, [pc, #84]	; (800be58 <MX_SDIO_SD_Init+0x5c>)
 800be04:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800be06:	4b13      	ldr	r3, [pc, #76]	; (800be54 <MX_SDIO_SD_Init+0x58>)
 800be08:	2200      	movs	r2, #0
 800be0a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800be0c:	4b11      	ldr	r3, [pc, #68]	; (800be54 <MX_SDIO_SD_Init+0x58>)
 800be0e:	2200      	movs	r2, #0
 800be10:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800be12:	4b10      	ldr	r3, [pc, #64]	; (800be54 <MX_SDIO_SD_Init+0x58>)
 800be14:	2200      	movs	r2, #0
 800be16:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800be18:	4b0e      	ldr	r3, [pc, #56]	; (800be54 <MX_SDIO_SD_Init+0x58>)
 800be1a:	2200      	movs	r2, #0
 800be1c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800be1e:	4b0d      	ldr	r3, [pc, #52]	; (800be54 <MX_SDIO_SD_Init+0x58>)
 800be20:	2200      	movs	r2, #0
 800be22:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800be24:	4b0b      	ldr	r3, [pc, #44]	; (800be54 <MX_SDIO_SD_Init+0x58>)
 800be26:	2200      	movs	r2, #0
 800be28:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 800be2a:	480a      	ldr	r0, [pc, #40]	; (800be54 <MX_SDIO_SD_Init+0x58>)
 800be2c:	f7f9 fdcf 	bl	80059ce <HAL_SD_Init>
 800be30:	4603      	mov	r3, r0
 800be32:	2b00      	cmp	r3, #0
 800be34:	d001      	beq.n	800be3a <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 800be36:	f000 f959 	bl	800c0ec <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800be3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800be3e:	4805      	ldr	r0, [pc, #20]	; (800be54 <MX_SDIO_SD_Init+0x58>)
 800be40:	f7fa f818 	bl	8005e74 <HAL_SD_ConfigWideBusOperation>
 800be44:	4603      	mov	r3, r0
 800be46:	2b00      	cmp	r3, #0
 800be48:	d001      	beq.n	800be4e <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 800be4a:	f000 f94f 	bl	800c0ec <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800be4e:	bf00      	nop
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	20000c08 	.word	0x20000c08
 800be58:	40012c00 	.word	0x40012c00

0800be5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b08e      	sub	sp, #56	; 0x38
 800be60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800be62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800be66:	2200      	movs	r2, #0
 800be68:	601a      	str	r2, [r3, #0]
 800be6a:	605a      	str	r2, [r3, #4]
 800be6c:	609a      	str	r2, [r3, #8]
 800be6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800be70:	f107 0320 	add.w	r3, r7, #32
 800be74:	2200      	movs	r2, #0
 800be76:	601a      	str	r2, [r3, #0]
 800be78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800be7a:	1d3b      	adds	r3, r7, #4
 800be7c:	2200      	movs	r2, #0
 800be7e:	601a      	str	r2, [r3, #0]
 800be80:	605a      	str	r2, [r3, #4]
 800be82:	609a      	str	r2, [r3, #8]
 800be84:	60da      	str	r2, [r3, #12]
 800be86:	611a      	str	r2, [r3, #16]
 800be88:	615a      	str	r2, [r3, #20]
 800be8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800be8c:	4b2b      	ldr	r3, [pc, #172]	; (800bf3c <MX_TIM2_Init+0xe0>)
 800be8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800be92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 800be94:	4b29      	ldr	r3, [pc, #164]	; (800bf3c <MX_TIM2_Init+0xe0>)
 800be96:	2248      	movs	r2, #72	; 0x48
 800be98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800be9a:	4b28      	ldr	r3, [pc, #160]	; (800bf3c <MX_TIM2_Init+0xe0>)
 800be9c:	2200      	movs	r2, #0
 800be9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 25000;
 800bea0:	4b26      	ldr	r3, [pc, #152]	; (800bf3c <MX_TIM2_Init+0xe0>)
 800bea2:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800bea6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bea8:	4b24      	ldr	r3, [pc, #144]	; (800bf3c <MX_TIM2_Init+0xe0>)
 800beaa:	2200      	movs	r2, #0
 800beac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800beae:	4b23      	ldr	r3, [pc, #140]	; (800bf3c <MX_TIM2_Init+0xe0>)
 800beb0:	2280      	movs	r2, #128	; 0x80
 800beb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800beb4:	4821      	ldr	r0, [pc, #132]	; (800bf3c <MX_TIM2_Init+0xe0>)
 800beb6:	f7fa fb3a 	bl	800652e <HAL_TIM_Base_Init>
 800beba:	4603      	mov	r3, r0
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d001      	beq.n	800bec4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800bec0:	f000 f914 	bl	800c0ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800bec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bec8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800beca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bece:	4619      	mov	r1, r3
 800bed0:	481a      	ldr	r0, [pc, #104]	; (800bf3c <MX_TIM2_Init+0xe0>)
 800bed2:	f7fa fd9b 	bl	8006a0c <HAL_TIM_ConfigClockSource>
 800bed6:	4603      	mov	r3, r0
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d001      	beq.n	800bee0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800bedc:	f000 f906 	bl	800c0ec <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800bee0:	4816      	ldr	r0, [pc, #88]	; (800bf3c <MX_TIM2_Init+0xe0>)
 800bee2:	f7fa fbd5 	bl	8006690 <HAL_TIM_OC_Init>
 800bee6:	4603      	mov	r3, r0
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d001      	beq.n	800bef0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800beec:	f000 f8fe 	bl	800c0ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bef0:	2300      	movs	r3, #0
 800bef2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bef4:	2300      	movs	r3, #0
 800bef6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800bef8:	f107 0320 	add.w	r3, r7, #32
 800befc:	4619      	mov	r1, r3
 800befe:	480f      	ldr	r0, [pc, #60]	; (800bf3c <MX_TIM2_Init+0xe0>)
 800bf00:	f7fb f924 	bl	800714c <HAL_TIMEx_MasterConfigSynchronization>
 800bf04:	4603      	mov	r3, r0
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d001      	beq.n	800bf0e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800bf0a:	f000 f8ef 	bl	800c0ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800bf12:	2300      	movs	r3, #0
 800bf14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800bf16:	2300      	movs	r3, #0
 800bf18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800bf1e:	1d3b      	adds	r3, r7, #4
 800bf20:	2200      	movs	r2, #0
 800bf22:	4619      	mov	r1, r3
 800bf24:	4805      	ldr	r0, [pc, #20]	; (800bf3c <MX_TIM2_Init+0xe0>)
 800bf26:	f7fa fd15 	bl	8006954 <HAL_TIM_OC_ConfigChannel>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d001      	beq.n	800bf34 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800bf30:	f000 f8dc 	bl	800c0ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800bf34:	bf00      	nop
 800bf36:	3738      	adds	r7, #56	; 0x38
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	20000c8c 	.word	0x20000c8c

0800bf40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800bf44:	4b11      	ldr	r3, [pc, #68]	; (800bf8c <MX_USART1_UART_Init+0x4c>)
 800bf46:	4a12      	ldr	r2, [pc, #72]	; (800bf90 <MX_USART1_UART_Init+0x50>)
 800bf48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800bf4a:	4b10      	ldr	r3, [pc, #64]	; (800bf8c <MX_USART1_UART_Init+0x4c>)
 800bf4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800bf50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800bf52:	4b0e      	ldr	r3, [pc, #56]	; (800bf8c <MX_USART1_UART_Init+0x4c>)
 800bf54:	2200      	movs	r2, #0
 800bf56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800bf58:	4b0c      	ldr	r3, [pc, #48]	; (800bf8c <MX_USART1_UART_Init+0x4c>)
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800bf5e:	4b0b      	ldr	r3, [pc, #44]	; (800bf8c <MX_USART1_UART_Init+0x4c>)
 800bf60:	2200      	movs	r2, #0
 800bf62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800bf64:	4b09      	ldr	r3, [pc, #36]	; (800bf8c <MX_USART1_UART_Init+0x4c>)
 800bf66:	220c      	movs	r2, #12
 800bf68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800bf6a:	4b08      	ldr	r3, [pc, #32]	; (800bf8c <MX_USART1_UART_Init+0x4c>)
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800bf70:	4b06      	ldr	r3, [pc, #24]	; (800bf8c <MX_USART1_UART_Init+0x4c>)
 800bf72:	2200      	movs	r2, #0
 800bf74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800bf76:	4805      	ldr	r0, [pc, #20]	; (800bf8c <MX_USART1_UART_Init+0x4c>)
 800bf78:	f7fb f96a 	bl	8007250 <HAL_UART_Init>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d001      	beq.n	800bf86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800bf82:	f000 f8b3 	bl	800c0ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800bf86:	bf00      	nop
 800bf88:	bd80      	pop	{r7, pc}
 800bf8a:	bf00      	nop
 800bf8c:	20000ba4 	.word	0x20000ba4
 800bf90:	40011000 	.word	0x40011000

0800bf94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b082      	sub	sp, #8
 800bf98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	607b      	str	r3, [r7, #4]
 800bf9e:	4b0c      	ldr	r3, [pc, #48]	; (800bfd0 <MX_DMA_Init+0x3c>)
 800bfa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfa2:	4a0b      	ldr	r2, [pc, #44]	; (800bfd0 <MX_DMA_Init+0x3c>)
 800bfa4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bfa8:	6313      	str	r3, [r2, #48]	; 0x30
 800bfaa:	4b09      	ldr	r3, [pc, #36]	; (800bfd0 <MX_DMA_Init+0x3c>)
 800bfac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bfb2:	607b      	str	r3, [r7, #4]
 800bfb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	2100      	movs	r1, #0
 800bfba:	200c      	movs	r0, #12
 800bfbc:	f7f5 fa49 	bl	8001452 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800bfc0:	200c      	movs	r0, #12
 800bfc2:	f7f5 fa62 	bl	800148a <HAL_NVIC_EnableIRQ>

}
 800bfc6:	bf00      	nop
 800bfc8:	3708      	adds	r7, #8
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	40023800 	.word	0x40023800

0800bfd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b08a      	sub	sp, #40	; 0x28
 800bfd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bfda:	f107 0314 	add.w	r3, r7, #20
 800bfde:	2200      	movs	r2, #0
 800bfe0:	601a      	str	r2, [r3, #0]
 800bfe2:	605a      	str	r2, [r3, #4]
 800bfe4:	609a      	str	r2, [r3, #8]
 800bfe6:	60da      	str	r2, [r3, #12]
 800bfe8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800bfea:	2300      	movs	r3, #0
 800bfec:	613b      	str	r3, [r7, #16]
 800bfee:	4b3c      	ldr	r3, [pc, #240]	; (800c0e0 <MX_GPIO_Init+0x10c>)
 800bff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bff2:	4a3b      	ldr	r2, [pc, #236]	; (800c0e0 <MX_GPIO_Init+0x10c>)
 800bff4:	f043 0304 	orr.w	r3, r3, #4
 800bff8:	6313      	str	r3, [r2, #48]	; 0x30
 800bffa:	4b39      	ldr	r3, [pc, #228]	; (800c0e0 <MX_GPIO_Init+0x10c>)
 800bffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bffe:	f003 0304 	and.w	r3, r3, #4
 800c002:	613b      	str	r3, [r7, #16]
 800c004:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c006:	2300      	movs	r3, #0
 800c008:	60fb      	str	r3, [r7, #12]
 800c00a:	4b35      	ldr	r3, [pc, #212]	; (800c0e0 <MX_GPIO_Init+0x10c>)
 800c00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c00e:	4a34      	ldr	r2, [pc, #208]	; (800c0e0 <MX_GPIO_Init+0x10c>)
 800c010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c014:	6313      	str	r3, [r2, #48]	; 0x30
 800c016:	4b32      	ldr	r3, [pc, #200]	; (800c0e0 <MX_GPIO_Init+0x10c>)
 800c018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c01a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c01e:	60fb      	str	r3, [r7, #12]
 800c020:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c022:	2300      	movs	r3, #0
 800c024:	60bb      	str	r3, [r7, #8]
 800c026:	4b2e      	ldr	r3, [pc, #184]	; (800c0e0 <MX_GPIO_Init+0x10c>)
 800c028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c02a:	4a2d      	ldr	r2, [pc, #180]	; (800c0e0 <MX_GPIO_Init+0x10c>)
 800c02c:	f043 0301 	orr.w	r3, r3, #1
 800c030:	6313      	str	r3, [r2, #48]	; 0x30
 800c032:	4b2b      	ldr	r3, [pc, #172]	; (800c0e0 <MX_GPIO_Init+0x10c>)
 800c034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c036:	f003 0301 	and.w	r3, r3, #1
 800c03a:	60bb      	str	r3, [r7, #8]
 800c03c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c03e:	2300      	movs	r3, #0
 800c040:	607b      	str	r3, [r7, #4]
 800c042:	4b27      	ldr	r3, [pc, #156]	; (800c0e0 <MX_GPIO_Init+0x10c>)
 800c044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c046:	4a26      	ldr	r2, [pc, #152]	; (800c0e0 <MX_GPIO_Init+0x10c>)
 800c048:	f043 0302 	orr.w	r3, r3, #2
 800c04c:	6313      	str	r3, [r2, #48]	; 0x30
 800c04e:	4b24      	ldr	r3, [pc, #144]	; (800c0e0 <MX_GPIO_Init+0x10c>)
 800c050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c052:	f003 0302 	and.w	r3, r3, #2
 800c056:	607b      	str	r3, [r7, #4]
 800c058:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, I2C2_VDD_Pin|LED0_Pin|LED1_Pin|LED2_Pin
 800c05a:	2200      	movs	r2, #0
 800c05c:	f243 010f 	movw	r1, #12303	; 0x300f
 800c060:	4820      	ldr	r0, [pc, #128]	; (800c0e4 <MX_GPIO_Init+0x110>)
 800c062:	f7f5 fee3 	bl	8001e2c <HAL_GPIO_WritePin>
                          |LED3_Pin|I2C1_VDD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PIN_0_Pin|PIN_1_Pin|PIN_2_Pin, GPIO_PIN_RESET);
 800c066:	2200      	movs	r2, #0
 800c068:	2107      	movs	r1, #7
 800c06a:	481f      	ldr	r0, [pc, #124]	; (800c0e8 <MX_GPIO_Init+0x114>)
 800c06c:	f7f5 fede 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : I2C2_VDD_Pin LED0_Pin LED1_Pin LED2_Pin
                           LED3_Pin I2C1_VDD_Pin */
  GPIO_InitStruct.Pin = I2C2_VDD_Pin|LED0_Pin|LED1_Pin|LED2_Pin
 800c070:	f243 030f 	movw	r3, #12303	; 0x300f
 800c074:	617b      	str	r3, [r7, #20]
                          |LED3_Pin|I2C1_VDD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c076:	2301      	movs	r3, #1
 800c078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c07a:	2300      	movs	r3, #0
 800c07c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c07e:	2300      	movs	r3, #0
 800c080:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c082:	f107 0314 	add.w	r3, r7, #20
 800c086:	4619      	mov	r1, r3
 800c088:	4816      	ldr	r0, [pc, #88]	; (800c0e4 <MX_GPIO_Init+0x110>)
 800c08a:	f7f5 fd33 	bl	8001af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN_0_Pin PIN_1_Pin PIN_2_Pin */
  GPIO_InitStruct.Pin = PIN_0_Pin|PIN_1_Pin|PIN_2_Pin;
 800c08e:	2307      	movs	r3, #7
 800c090:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c092:	2301      	movs	r3, #1
 800c094:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c096:	2300      	movs	r3, #0
 800c098:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c09a:	2300      	movs	r3, #0
 800c09c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c09e:	f107 0314 	add.w	r3, r7, #20
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	4810      	ldr	r0, [pc, #64]	; (800c0e8 <MX_GPIO_Init+0x114>)
 800c0a6:	f7f5 fd25 	bl	8001af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VSENSE_Pin */
  GPIO_InitStruct.Pin = USB_VSENSE_Pin;
 800c0aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c0ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800c0b0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800c0b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_VSENSE_GPIO_Port, &GPIO_InitStruct);
 800c0ba:	f107 0314 	add.w	r3, r7, #20
 800c0be:	4619      	mov	r1, r3
 800c0c0:	4809      	ldr	r0, [pc, #36]	; (800c0e8 <MX_GPIO_Init+0x114>)
 800c0c2:	f7f5 fd17 	bl	8001af4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	2100      	movs	r1, #0
 800c0ca:	2017      	movs	r0, #23
 800c0cc:	f7f5 f9c1 	bl	8001452 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800c0d0:	2017      	movs	r0, #23
 800c0d2:	f7f5 f9da 	bl	800148a <HAL_NVIC_EnableIRQ>

}
 800c0d6:	bf00      	nop
 800c0d8:	3728      	adds	r7, #40	; 0x28
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop
 800c0e0:	40023800 	.word	0x40023800
 800c0e4:	40020800 	.word	0x40020800
 800c0e8:	40020000 	.word	0x40020000

0800c0ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800c0f0:	b672      	cpsid	i
}
 800c0f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800c0f4:	e7fe      	b.n	800c0f4 <Error_Handler+0x8>
	...

0800c0f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b083      	sub	sp, #12
 800c0fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c0fe:	2300      	movs	r3, #0
 800c100:	607b      	str	r3, [r7, #4]
 800c102:	4b10      	ldr	r3, [pc, #64]	; (800c144 <HAL_MspInit+0x4c>)
 800c104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c106:	4a0f      	ldr	r2, [pc, #60]	; (800c144 <HAL_MspInit+0x4c>)
 800c108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c10c:	6453      	str	r3, [r2, #68]	; 0x44
 800c10e:	4b0d      	ldr	r3, [pc, #52]	; (800c144 <HAL_MspInit+0x4c>)
 800c110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c116:	607b      	str	r3, [r7, #4]
 800c118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c11a:	2300      	movs	r3, #0
 800c11c:	603b      	str	r3, [r7, #0]
 800c11e:	4b09      	ldr	r3, [pc, #36]	; (800c144 <HAL_MspInit+0x4c>)
 800c120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c122:	4a08      	ldr	r2, [pc, #32]	; (800c144 <HAL_MspInit+0x4c>)
 800c124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c128:	6413      	str	r3, [r2, #64]	; 0x40
 800c12a:	4b06      	ldr	r3, [pc, #24]	; (800c144 <HAL_MspInit+0x4c>)
 800c12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c12e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c132:	603b      	str	r3, [r7, #0]
 800c134:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c136:	bf00      	nop
 800c138:	370c      	adds	r7, #12
 800c13a:	46bd      	mov	sp, r7
 800c13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c140:	4770      	bx	lr
 800c142:	bf00      	nop
 800c144:	40023800 	.word	0x40023800

0800c148 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b08c      	sub	sp, #48	; 0x30
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c150:	f107 031c 	add.w	r3, r7, #28
 800c154:	2200      	movs	r2, #0
 800c156:	601a      	str	r2, [r3, #0]
 800c158:	605a      	str	r2, [r3, #4]
 800c15a:	609a      	str	r2, [r3, #8]
 800c15c:	60da      	str	r2, [r3, #12]
 800c15e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	4a59      	ldr	r2, [pc, #356]	; (800c2cc <HAL_I2C_MspInit+0x184>)
 800c166:	4293      	cmp	r3, r2
 800c168:	d162      	bne.n	800c230 <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c16a:	2300      	movs	r3, #0
 800c16c:	61bb      	str	r3, [r7, #24]
 800c16e:	4b58      	ldr	r3, [pc, #352]	; (800c2d0 <HAL_I2C_MspInit+0x188>)
 800c170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c172:	4a57      	ldr	r2, [pc, #348]	; (800c2d0 <HAL_I2C_MspInit+0x188>)
 800c174:	f043 0302 	orr.w	r3, r3, #2
 800c178:	6313      	str	r3, [r2, #48]	; 0x30
 800c17a:	4b55      	ldr	r3, [pc, #340]	; (800c2d0 <HAL_I2C_MspInit+0x188>)
 800c17c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c17e:	f003 0302 	and.w	r3, r3, #2
 800c182:	61bb      	str	r3, [r7, #24]
 800c184:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c186:	23c0      	movs	r3, #192	; 0xc0
 800c188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c18a:	2312      	movs	r3, #18
 800c18c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c18e:	2301      	movs	r3, #1
 800c190:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c192:	2303      	movs	r3, #3
 800c194:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800c196:	2304      	movs	r3, #4
 800c198:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c19a:	f107 031c 	add.w	r3, r7, #28
 800c19e:	4619      	mov	r1, r3
 800c1a0:	484c      	ldr	r0, [pc, #304]	; (800c2d4 <HAL_I2C_MspInit+0x18c>)
 800c1a2:	f7f5 fca7 	bl	8001af4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	617b      	str	r3, [r7, #20]
 800c1aa:	4b49      	ldr	r3, [pc, #292]	; (800c2d0 <HAL_I2C_MspInit+0x188>)
 800c1ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ae:	4a48      	ldr	r2, [pc, #288]	; (800c2d0 <HAL_I2C_MspInit+0x188>)
 800c1b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c1b4:	6413      	str	r3, [r2, #64]	; 0x40
 800c1b6:	4b46      	ldr	r3, [pc, #280]	; (800c2d0 <HAL_I2C_MspInit+0x188>)
 800c1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c1be:	617b      	str	r3, [r7, #20]
 800c1c0:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 800c1c2:	4b45      	ldr	r3, [pc, #276]	; (800c2d8 <HAL_I2C_MspInit+0x190>)
 800c1c4:	4a45      	ldr	r2, [pc, #276]	; (800c2dc <HAL_I2C_MspInit+0x194>)
 800c1c6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800c1c8:	4b43      	ldr	r3, [pc, #268]	; (800c2d8 <HAL_I2C_MspInit+0x190>)
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c1ce:	4b42      	ldr	r3, [pc, #264]	; (800c2d8 <HAL_I2C_MspInit+0x190>)
 800c1d0:	2240      	movs	r2, #64	; 0x40
 800c1d2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c1d4:	4b40      	ldr	r3, [pc, #256]	; (800c2d8 <HAL_I2C_MspInit+0x190>)
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c1da:	4b3f      	ldr	r3, [pc, #252]	; (800c2d8 <HAL_I2C_MspInit+0x190>)
 800c1dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c1e0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c1e2:	4b3d      	ldr	r3, [pc, #244]	; (800c2d8 <HAL_I2C_MspInit+0x190>)
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c1e8:	4b3b      	ldr	r3, [pc, #236]	; (800c2d8 <HAL_I2C_MspInit+0x190>)
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800c1ee:	4b3a      	ldr	r3, [pc, #232]	; (800c2d8 <HAL_I2C_MspInit+0x190>)
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800c1f4:	4b38      	ldr	r3, [pc, #224]	; (800c2d8 <HAL_I2C_MspInit+0x190>)
 800c1f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c1fa:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c1fc:	4b36      	ldr	r3, [pc, #216]	; (800c2d8 <HAL_I2C_MspInit+0x190>)
 800c1fe:	2200      	movs	r2, #0
 800c200:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800c202:	4835      	ldr	r0, [pc, #212]	; (800c2d8 <HAL_I2C_MspInit+0x190>)
 800c204:	f7f5 f95c 	bl	80014c0 <HAL_DMA_Init>
 800c208:	4603      	mov	r3, r0
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d001      	beq.n	800c212 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 800c20e:	f7ff ff6d 	bl	800c0ec <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	4a30      	ldr	r2, [pc, #192]	; (800c2d8 <HAL_I2C_MspInit+0x190>)
 800c216:	635a      	str	r2, [r3, #52]	; 0x34
 800c218:	4a2f      	ldr	r2, [pc, #188]	; (800c2d8 <HAL_I2C_MspInit+0x190>)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800c21e:	2200      	movs	r2, #0
 800c220:	2100      	movs	r1, #0
 800c222:	201f      	movs	r0, #31
 800c224:	f7f5 f915 	bl	8001452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800c228:	201f      	movs	r0, #31
 800c22a:	f7f5 f92e 	bl	800148a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800c22e:	e049      	b.n	800c2c4 <HAL_I2C_MspInit+0x17c>
  else if(hi2c->Instance==I2C2)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	4a2a      	ldr	r2, [pc, #168]	; (800c2e0 <HAL_I2C_MspInit+0x198>)
 800c236:	4293      	cmp	r3, r2
 800c238:	d144      	bne.n	800c2c4 <HAL_I2C_MspInit+0x17c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c23a:	2300      	movs	r3, #0
 800c23c:	613b      	str	r3, [r7, #16]
 800c23e:	4b24      	ldr	r3, [pc, #144]	; (800c2d0 <HAL_I2C_MspInit+0x188>)
 800c240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c242:	4a23      	ldr	r2, [pc, #140]	; (800c2d0 <HAL_I2C_MspInit+0x188>)
 800c244:	f043 0302 	orr.w	r3, r3, #2
 800c248:	6313      	str	r3, [r2, #48]	; 0x30
 800c24a:	4b21      	ldr	r3, [pc, #132]	; (800c2d0 <HAL_I2C_MspInit+0x188>)
 800c24c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c24e:	f003 0302 	and.w	r3, r3, #2
 800c252:	613b      	str	r3, [r7, #16]
 800c254:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800c256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c25a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c25c:	2312      	movs	r3, #18
 800c25e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c260:	2301      	movs	r3, #1
 800c262:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c264:	2303      	movs	r3, #3
 800c266:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800c268:	2304      	movs	r3, #4
 800c26a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c26c:	f107 031c 	add.w	r3, r7, #28
 800c270:	4619      	mov	r1, r3
 800c272:	4818      	ldr	r0, [pc, #96]	; (800c2d4 <HAL_I2C_MspInit+0x18c>)
 800c274:	f7f5 fc3e 	bl	8001af4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800c278:	2308      	movs	r3, #8
 800c27a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c27c:	2312      	movs	r3, #18
 800c27e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c280:	2301      	movs	r3, #1
 800c282:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c284:	2303      	movs	r3, #3
 800c286:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800c288:	2309      	movs	r3, #9
 800c28a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c28c:	f107 031c 	add.w	r3, r7, #28
 800c290:	4619      	mov	r1, r3
 800c292:	4810      	ldr	r0, [pc, #64]	; (800c2d4 <HAL_I2C_MspInit+0x18c>)
 800c294:	f7f5 fc2e 	bl	8001af4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800c298:	2300      	movs	r3, #0
 800c29a:	60fb      	str	r3, [r7, #12]
 800c29c:	4b0c      	ldr	r3, [pc, #48]	; (800c2d0 <HAL_I2C_MspInit+0x188>)
 800c29e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2a0:	4a0b      	ldr	r2, [pc, #44]	; (800c2d0 <HAL_I2C_MspInit+0x188>)
 800c2a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c2a6:	6413      	str	r3, [r2, #64]	; 0x40
 800c2a8:	4b09      	ldr	r3, [pc, #36]	; (800c2d0 <HAL_I2C_MspInit+0x188>)
 800c2aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c2b0:	60fb      	str	r3, [r7, #12]
 800c2b2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	2100      	movs	r1, #0
 800c2b8:	2021      	movs	r0, #33	; 0x21
 800c2ba:	f7f5 f8ca 	bl	8001452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800c2be:	2021      	movs	r0, #33	; 0x21
 800c2c0:	f7f5 f8e3 	bl	800148a <HAL_NVIC_EnableIRQ>
}
 800c2c4:	bf00      	nop
 800c2c6:	3730      	adds	r7, #48	; 0x30
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}
 800c2cc:	40005400 	.word	0x40005400
 800c2d0:	40023800 	.word	0x40023800
 800c2d4:	40020400 	.word	0x40020400
 800c2d8:	20000a9c 	.word	0x20000a9c
 800c2dc:	40026028 	.word	0x40026028
 800c2e0:	40005800 	.word	0x40005800

0800c2e4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b088      	sub	sp, #32
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c2ec:	f107 0308 	add.w	r3, r7, #8
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	601a      	str	r2, [r3, #0]
 800c2f4:	605a      	str	r2, [r3, #4]
 800c2f6:	609a      	str	r2, [r3, #8]
 800c2f8:	60da      	str	r2, [r3, #12]
 800c2fa:	611a      	str	r2, [r3, #16]
 800c2fc:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	4a0c      	ldr	r2, [pc, #48]	; (800c334 <HAL_RTC_MspInit+0x50>)
 800c304:	4293      	cmp	r3, r2
 800c306:	d111      	bne.n	800c32c <HAL_RTC_MspInit+0x48>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800c308:	2302      	movs	r3, #2
 800c30a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800c30c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c310:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c312:	f107 0308 	add.w	r3, r7, #8
 800c316:	4618      	mov	r0, r3
 800c318:	f7f9 f984 	bl	8005624 <HAL_RCCEx_PeriphCLKConfig>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d001      	beq.n	800c326 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800c322:	f7ff fee3 	bl	800c0ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800c326:	4b04      	ldr	r3, [pc, #16]	; (800c338 <HAL_RTC_MspInit+0x54>)
 800c328:	2201      	movs	r2, #1
 800c32a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800c32c:	bf00      	nop
 800c32e:	3720      	adds	r7, #32
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}
 800c334:	40002800 	.word	0x40002800
 800c338:	42470e3c 	.word	0x42470e3c

0800c33c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b08c      	sub	sp, #48	; 0x30
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c344:	f107 031c 	add.w	r3, r7, #28
 800c348:	2200      	movs	r2, #0
 800c34a:	601a      	str	r2, [r3, #0]
 800c34c:	605a      	str	r2, [r3, #4]
 800c34e:	609a      	str	r2, [r3, #8]
 800c350:	60da      	str	r2, [r3, #12]
 800c352:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4a38      	ldr	r2, [pc, #224]	; (800c43c <HAL_SD_MspInit+0x100>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d169      	bne.n	800c432 <HAL_SD_MspInit+0xf6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800c35e:	2300      	movs	r3, #0
 800c360:	61bb      	str	r3, [r7, #24]
 800c362:	4b37      	ldr	r3, [pc, #220]	; (800c440 <HAL_SD_MspInit+0x104>)
 800c364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c366:	4a36      	ldr	r2, [pc, #216]	; (800c440 <HAL_SD_MspInit+0x104>)
 800c368:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c36c:	6453      	str	r3, [r2, #68]	; 0x44
 800c36e:	4b34      	ldr	r3, [pc, #208]	; (800c440 <HAL_SD_MspInit+0x104>)
 800c370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c372:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c376:	61bb      	str	r3, [r7, #24]
 800c378:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c37a:	2300      	movs	r3, #0
 800c37c:	617b      	str	r3, [r7, #20]
 800c37e:	4b30      	ldr	r3, [pc, #192]	; (800c440 <HAL_SD_MspInit+0x104>)
 800c380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c382:	4a2f      	ldr	r2, [pc, #188]	; (800c440 <HAL_SD_MspInit+0x104>)
 800c384:	f043 0301 	orr.w	r3, r3, #1
 800c388:	6313      	str	r3, [r2, #48]	; 0x30
 800c38a:	4b2d      	ldr	r3, [pc, #180]	; (800c440 <HAL_SD_MspInit+0x104>)
 800c38c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c38e:	f003 0301 	and.w	r3, r3, #1
 800c392:	617b      	str	r3, [r7, #20]
 800c394:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c396:	2300      	movs	r3, #0
 800c398:	613b      	str	r3, [r7, #16]
 800c39a:	4b29      	ldr	r3, [pc, #164]	; (800c440 <HAL_SD_MspInit+0x104>)
 800c39c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c39e:	4a28      	ldr	r2, [pc, #160]	; (800c440 <HAL_SD_MspInit+0x104>)
 800c3a0:	f043 0302 	orr.w	r3, r3, #2
 800c3a4:	6313      	str	r3, [r2, #48]	; 0x30
 800c3a6:	4b26      	ldr	r3, [pc, #152]	; (800c440 <HAL_SD_MspInit+0x104>)
 800c3a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3aa:	f003 0302 	and.w	r3, r3, #2
 800c3ae:	613b      	str	r3, [r7, #16]
 800c3b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	60fb      	str	r3, [r7, #12]
 800c3b6:	4b22      	ldr	r3, [pc, #136]	; (800c440 <HAL_SD_MspInit+0x104>)
 800c3b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3ba:	4a21      	ldr	r2, [pc, #132]	; (800c440 <HAL_SD_MspInit+0x104>)
 800c3bc:	f043 0304 	orr.w	r3, r3, #4
 800c3c0:	6313      	str	r3, [r2, #48]	; 0x30
 800c3c2:	4b1f      	ldr	r3, [pc, #124]	; (800c440 <HAL_SD_MspInit+0x104>)
 800c3c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3c6:	f003 0304 	and.w	r3, r3, #4
 800c3ca:	60fb      	str	r3, [r7, #12]
 800c3cc:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800c3ce:	2340      	movs	r3, #64	; 0x40
 800c3d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c3d2:	2302      	movs	r3, #2
 800c3d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c3da:	2303      	movs	r3, #3
 800c3dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800c3de:	230c      	movs	r3, #12
 800c3e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c3e2:	f107 031c 	add.w	r3, r7, #28
 800c3e6:	4619      	mov	r1, r3
 800c3e8:	4816      	ldr	r0, [pc, #88]	; (800c444 <HAL_SD_MspInit+0x108>)
 800c3ea:	f7f5 fb83 	bl	8001af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800c3ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c3f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c3f4:	2302      	movs	r3, #2
 800c3f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c3fc:	2303      	movs	r3, #3
 800c3fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800c400:	230c      	movs	r3, #12
 800c402:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c404:	f107 031c 	add.w	r3, r7, #28
 800c408:	4619      	mov	r1, r3
 800c40a:	480f      	ldr	r0, [pc, #60]	; (800c448 <HAL_SD_MspInit+0x10c>)
 800c40c:	f7f5 fb72 	bl	8001af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800c410:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800c414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c416:	2302      	movs	r3, #2
 800c418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c41a:	2300      	movs	r3, #0
 800c41c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c41e:	2303      	movs	r3, #3
 800c420:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800c422:	230c      	movs	r3, #12
 800c424:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c426:	f107 031c 	add.w	r3, r7, #28
 800c42a:	4619      	mov	r1, r3
 800c42c:	4807      	ldr	r0, [pc, #28]	; (800c44c <HAL_SD_MspInit+0x110>)
 800c42e:	f7f5 fb61 	bl	8001af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800c432:	bf00      	nop
 800c434:	3730      	adds	r7, #48	; 0x30
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}
 800c43a:	bf00      	nop
 800c43c:	40012c00 	.word	0x40012c00
 800c440:	40023800 	.word	0x40023800
 800c444:	40020000 	.word	0x40020000
 800c448:	40020400 	.word	0x40020400
 800c44c:	40020800 	.word	0x40020800

0800c450 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b084      	sub	sp, #16
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c460:	d115      	bne.n	800c48e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800c462:	2300      	movs	r3, #0
 800c464:	60fb      	str	r3, [r7, #12]
 800c466:	4b0c      	ldr	r3, [pc, #48]	; (800c498 <HAL_TIM_Base_MspInit+0x48>)
 800c468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c46a:	4a0b      	ldr	r2, [pc, #44]	; (800c498 <HAL_TIM_Base_MspInit+0x48>)
 800c46c:	f043 0301 	orr.w	r3, r3, #1
 800c470:	6413      	str	r3, [r2, #64]	; 0x40
 800c472:	4b09      	ldr	r3, [pc, #36]	; (800c498 <HAL_TIM_Base_MspInit+0x48>)
 800c474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c476:	f003 0301 	and.w	r3, r3, #1
 800c47a:	60fb      	str	r3, [r7, #12]
 800c47c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800c47e:	2200      	movs	r2, #0
 800c480:	2100      	movs	r1, #0
 800c482:	201c      	movs	r0, #28
 800c484:	f7f4 ffe5 	bl	8001452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800c488:	201c      	movs	r0, #28
 800c48a:	f7f4 fffe 	bl	800148a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800c48e:	bf00      	nop
 800c490:	3710      	adds	r7, #16
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	40023800 	.word	0x40023800

0800c49c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b08a      	sub	sp, #40	; 0x28
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c4a4:	f107 0314 	add.w	r3, r7, #20
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	601a      	str	r2, [r3, #0]
 800c4ac:	605a      	str	r2, [r3, #4]
 800c4ae:	609a      	str	r2, [r3, #8]
 800c4b0:	60da      	str	r2, [r3, #12]
 800c4b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	4a19      	ldr	r2, [pc, #100]	; (800c520 <HAL_UART_MspInit+0x84>)
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d12c      	bne.n	800c518 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800c4be:	2300      	movs	r3, #0
 800c4c0:	613b      	str	r3, [r7, #16]
 800c4c2:	4b18      	ldr	r3, [pc, #96]	; (800c524 <HAL_UART_MspInit+0x88>)
 800c4c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4c6:	4a17      	ldr	r2, [pc, #92]	; (800c524 <HAL_UART_MspInit+0x88>)
 800c4c8:	f043 0310 	orr.w	r3, r3, #16
 800c4cc:	6453      	str	r3, [r2, #68]	; 0x44
 800c4ce:	4b15      	ldr	r3, [pc, #84]	; (800c524 <HAL_UART_MspInit+0x88>)
 800c4d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4d2:	f003 0310 	and.w	r3, r3, #16
 800c4d6:	613b      	str	r3, [r7, #16]
 800c4d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c4da:	2300      	movs	r3, #0
 800c4dc:	60fb      	str	r3, [r7, #12]
 800c4de:	4b11      	ldr	r3, [pc, #68]	; (800c524 <HAL_UART_MspInit+0x88>)
 800c4e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4e2:	4a10      	ldr	r2, [pc, #64]	; (800c524 <HAL_UART_MspInit+0x88>)
 800c4e4:	f043 0301 	orr.w	r3, r3, #1
 800c4e8:	6313      	str	r3, [r2, #48]	; 0x30
 800c4ea:	4b0e      	ldr	r3, [pc, #56]	; (800c524 <HAL_UART_MspInit+0x88>)
 800c4ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4ee:	f003 0301 	and.w	r3, r3, #1
 800c4f2:	60fb      	str	r3, [r7, #12]
 800c4f4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800c4f6:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800c4fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c4fc:	2302      	movs	r3, #2
 800c4fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c500:	2300      	movs	r3, #0
 800c502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c504:	2303      	movs	r3, #3
 800c506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800c508:	2307      	movs	r3, #7
 800c50a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c50c:	f107 0314 	add.w	r3, r7, #20
 800c510:	4619      	mov	r1, r3
 800c512:	4805      	ldr	r0, [pc, #20]	; (800c528 <HAL_UART_MspInit+0x8c>)
 800c514:	f7f5 faee 	bl	8001af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800c518:	bf00      	nop
 800c51a:	3728      	adds	r7, #40	; 0x28
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}
 800c520:	40011000 	.word	0x40011000
 800c524:	40023800 	.word	0x40023800
 800c528:	40020000 	.word	0x40020000

0800c52c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800c530:	f7f9 f85c 	bl	80055ec <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800c534:	e7fe      	b.n	800c534 <NMI_Handler+0x8>

0800c536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c536:	b480      	push	{r7}
 800c538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c53a:	e7fe      	b.n	800c53a <HardFault_Handler+0x4>

0800c53c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c53c:	b480      	push	{r7}
 800c53e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800c540:	e7fe      	b.n	800c540 <MemManage_Handler+0x4>

0800c542 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c542:	b480      	push	{r7}
 800c544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800c546:	e7fe      	b.n	800c546 <BusFault_Handler+0x4>

0800c548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c548:	b480      	push	{r7}
 800c54a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800c54c:	e7fe      	b.n	800c54c <UsageFault_Handler+0x4>

0800c54e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800c54e:	b480      	push	{r7}
 800c550:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800c552:	bf00      	nop
 800c554:	46bd      	mov	sp, r7
 800c556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55a:	4770      	bx	lr

0800c55c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c55c:	b480      	push	{r7}
 800c55e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c560:	bf00      	nop
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr

0800c56a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c56a:	b480      	push	{r7}
 800c56c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c56e:	bf00      	nop
 800c570:	46bd      	mov	sp, r7
 800c572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c576:	4770      	bx	lr

0800c578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
    AsynchronousTaskTimerUpdate();
 800c57c:	f7fe fd58 	bl	800b030 <AsynchronousTaskTimerUpdate>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c580:	f7f4 fe48 	bl	8001214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800c584:	bf00      	nop
 800c586:	bd80      	pop	{r7, pc}

0800c588 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800c58c:	4802      	ldr	r0, [pc, #8]	; (800c598 <DMA1_Stream1_IRQHandler+0x10>)
 800c58e:	f7f5 f867 	bl	8001660 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800c592:	bf00      	nop
 800c594:	bd80      	pop	{r7, pc}
 800c596:	bf00      	nop
 800c598:	20000a9c 	.word	0x20000a9c

0800c59c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == GPIO_PIN_SET)
 800c5a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c5a4:	4809      	ldr	r0, [pc, #36]	; (800c5cc <EXTI9_5_IRQHandler+0x30>)
 800c5a6:	f7f5 fc29 	bl	8001dfc <HAL_GPIO_ReadPin>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	2b01      	cmp	r3, #1
 800c5ae:	d103      	bne.n	800c5b8 <EXTI9_5_IRQHandler+0x1c>
	{
		CommManager_SetUSBConnectionState(USB_Connected);
 800c5b0:	2001      	movs	r0, #1
 800c5b2:	f7ff fa89 	bl	800bac8 <CommManager_SetUSBConnectionState>
 800c5b6:	e002      	b.n	800c5be <EXTI9_5_IRQHandler+0x22>
	}
	else
	{
		CommManager_SetUSBConnectionState(USB_Disconnected);
 800c5b8:	2000      	movs	r0, #0
 800c5ba:	f7ff fa85 	bl	800bac8 <CommManager_SetUSBConnectionState>
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800c5be:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c5c2:	f7f5 fc67 	bl	8001e94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800c5c6:	bf00      	nop
 800c5c8:	bd80      	pop	{r7, pc}
 800c5ca:	bf00      	nop
 800c5cc:	40020800 	.word	0x40020800

0800c5d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800c5d4:	4803      	ldr	r0, [pc, #12]	; (800c5e4 <TIM2_IRQHandler+0x14>)
 800c5d6:	f7fa f8b4 	bl	8006742 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  TempCollect_ScheduleMeasurement();
 800c5da:	f7ff f987 	bl	800b8ec <TempCollect_ScheduleMeasurement>

  /* USER CODE END TIM2_IRQn 1 */
}
 800c5de:	bf00      	nop
 800c5e0:	bd80      	pop	{r7, pc}
 800c5e2:	bf00      	nop
 800c5e4:	20000c8c 	.word	0x20000c8c

0800c5e8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

//	TempCollect_I2CA_Done();

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800c5ec:	4802      	ldr	r0, [pc, #8]	; (800c5f8 <I2C1_EV_IRQHandler+0x10>)
 800c5ee:	f7f5 fe77 	bl	80022e0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800c5f2:	bf00      	nop
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	20000afc 	.word	0x20000afc

0800c5fc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */
//	TempCollect_I2CB_Done();

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800c600:	4802      	ldr	r0, [pc, #8]	; (800c60c <I2C2_EV_IRQHandler+0x10>)
 800c602:	f7f5 fe6d 	bl	80022e0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800c606:	bf00      	nop
 800c608:	bd80      	pop	{r7, pc}
 800c60a:	bf00      	nop
 800c60c:	20000b50 	.word	0x20000b50

0800c610 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800c614:	4802      	ldr	r0, [pc, #8]	; (800c620 <OTG_FS_IRQHandler+0x10>)
 800c616:	f7f7 fb64 	bl	8003ce2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800c61a:	bf00      	nop
 800c61c:	bd80      	pop	{r7, pc}
 800c61e:	bf00      	nop
 800c620:	20001fa4 	.word	0x20001fa4

0800c624 <HAL_I2C_MemRxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b082      	sub	sp, #8
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	4a0a      	ldr	r2, [pc, #40]	; (800c658 <HAL_I2C_MemRxCpltCallback+0x34>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d102      	bne.n	800c63a <HAL_I2C_MemRxCpltCallback+0x16>
	{
		TempCollect_I2CA_Done();
 800c634:	f7ff f96e 	bl	800b914 <TempCollect_I2CA_Done>
	}
	else
	{
		AssertError(AppError_UndefinedError);
	}
}
 800c638:	e009      	b.n	800c64e <HAL_I2C_MemRxCpltCallback+0x2a>
	else if ( hi2c == &hi2c2)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	4a07      	ldr	r2, [pc, #28]	; (800c65c <HAL_I2C_MemRxCpltCallback+0x38>)
 800c63e:	4293      	cmp	r3, r2
 800c640:	d102      	bne.n	800c648 <HAL_I2C_MemRxCpltCallback+0x24>
		TempCollect_I2CB_Done();
 800c642:	f7ff f973 	bl	800b92c <TempCollect_I2CB_Done>
}
 800c646:	e002      	b.n	800c64e <HAL_I2C_MemRxCpltCallback+0x2a>
		AssertError(AppError_UndefinedError);
 800c648:	2008      	movs	r0, #8
 800c64a:	f7fe fdf9 	bl	800b240 <AssertError>
}
 800c64e:	bf00      	nop
 800c650:	3708      	adds	r7, #8
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}
 800c656:	bf00      	nop
 800c658:	20000afc 	.word	0x20000afc
 800c65c:	20000b50 	.word	0x20000b50

0800c660 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c660:	b480      	push	{r7}
 800c662:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c664:	4b06      	ldr	r3, [pc, #24]	; (800c680 <SystemInit+0x20>)
 800c666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c66a:	4a05      	ldr	r2, [pc, #20]	; (800c680 <SystemInit+0x20>)
 800c66c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c670:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800c674:	bf00      	nop
 800c676:	46bd      	mov	sp, r7
 800c678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67c:	4770      	bx	lr
 800c67e:	bf00      	nop
 800c680:	e000ed00 	.word	0xe000ed00

0800c684 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c688:	2200      	movs	r2, #0
 800c68a:	4912      	ldr	r1, [pc, #72]	; (800c6d4 <MX_USB_DEVICE_Init+0x50>)
 800c68c:	4812      	ldr	r0, [pc, #72]	; (800c6d8 <MX_USB_DEVICE_Init+0x54>)
 800c68e:	f7fd fb2d 	bl	8009cec <USBD_Init>
 800c692:	4603      	mov	r3, r0
 800c694:	2b00      	cmp	r3, #0
 800c696:	d001      	beq.n	800c69c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c698:	f7ff fd28 	bl	800c0ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c69c:	490f      	ldr	r1, [pc, #60]	; (800c6dc <MX_USB_DEVICE_Init+0x58>)
 800c69e:	480e      	ldr	r0, [pc, #56]	; (800c6d8 <MX_USB_DEVICE_Init+0x54>)
 800c6a0:	f7fd fb54 	bl	8009d4c <USBD_RegisterClass>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d001      	beq.n	800c6ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c6aa:	f7ff fd1f 	bl	800c0ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c6ae:	490c      	ldr	r1, [pc, #48]	; (800c6e0 <MX_USB_DEVICE_Init+0x5c>)
 800c6b0:	4809      	ldr	r0, [pc, #36]	; (800c6d8 <MX_USB_DEVICE_Init+0x54>)
 800c6b2:	f7fd fa75 	bl	8009ba0 <USBD_CDC_RegisterInterface>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d001      	beq.n	800c6c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c6bc:	f7ff fd16 	bl	800c0ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c6c0:	4805      	ldr	r0, [pc, #20]	; (800c6d8 <MX_USB_DEVICE_Init+0x54>)
 800c6c2:	f7fd fb6a 	bl	8009d9a <USBD_Start>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d001      	beq.n	800c6d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c6cc:	f7ff fd0e 	bl	800c0ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c6d0:	bf00      	nop
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	20000130 	.word	0x20000130
 800c6d8:	20000cd4 	.word	0x20000cd4
 800c6dc:	20000014 	.word	0x20000014
 800c6e0:	2000011c 	.word	0x2000011c

0800c6e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	4905      	ldr	r1, [pc, #20]	; (800c700 <CDC_Init_FS+0x1c>)
 800c6ec:	4805      	ldr	r0, [pc, #20]	; (800c704 <CDC_Init_FS+0x20>)
 800c6ee:	f7fd fa6c 	bl	8009bca <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c6f2:	4905      	ldr	r1, [pc, #20]	; (800c708 <CDC_Init_FS+0x24>)
 800c6f4:	4803      	ldr	r0, [pc, #12]	; (800c704 <CDC_Init_FS+0x20>)
 800c6f6:	f7fd fa86 	bl	8009c06 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c6fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	bd80      	pop	{r7, pc}
 800c700:	200017a4 	.word	0x200017a4
 800c704:	20000cd4 	.word	0x20000cd4
 800c708:	20000fa4 	.word	0x20000fa4

0800c70c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c70c:	b480      	push	{r7}
 800c70e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c710:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c712:	4618      	mov	r0, r3
 800c714:	46bd      	mov	sp, r7
 800c716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71a:	4770      	bx	lr

0800c71c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c71c:	b480      	push	{r7}
 800c71e:	b083      	sub	sp, #12
 800c720:	af00      	add	r7, sp, #0
 800c722:	4603      	mov	r3, r0
 800c724:	6039      	str	r1, [r7, #0]
 800c726:	71fb      	strb	r3, [r7, #7]
 800c728:	4613      	mov	r3, r2
 800c72a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c72c:	79fb      	ldrb	r3, [r7, #7]
 800c72e:	2b23      	cmp	r3, #35	; 0x23
 800c730:	d84a      	bhi.n	800c7c8 <CDC_Control_FS+0xac>
 800c732:	a201      	add	r2, pc, #4	; (adr r2, 800c738 <CDC_Control_FS+0x1c>)
 800c734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c738:	0800c7c9 	.word	0x0800c7c9
 800c73c:	0800c7c9 	.word	0x0800c7c9
 800c740:	0800c7c9 	.word	0x0800c7c9
 800c744:	0800c7c9 	.word	0x0800c7c9
 800c748:	0800c7c9 	.word	0x0800c7c9
 800c74c:	0800c7c9 	.word	0x0800c7c9
 800c750:	0800c7c9 	.word	0x0800c7c9
 800c754:	0800c7c9 	.word	0x0800c7c9
 800c758:	0800c7c9 	.word	0x0800c7c9
 800c75c:	0800c7c9 	.word	0x0800c7c9
 800c760:	0800c7c9 	.word	0x0800c7c9
 800c764:	0800c7c9 	.word	0x0800c7c9
 800c768:	0800c7c9 	.word	0x0800c7c9
 800c76c:	0800c7c9 	.word	0x0800c7c9
 800c770:	0800c7c9 	.word	0x0800c7c9
 800c774:	0800c7c9 	.word	0x0800c7c9
 800c778:	0800c7c9 	.word	0x0800c7c9
 800c77c:	0800c7c9 	.word	0x0800c7c9
 800c780:	0800c7c9 	.word	0x0800c7c9
 800c784:	0800c7c9 	.word	0x0800c7c9
 800c788:	0800c7c9 	.word	0x0800c7c9
 800c78c:	0800c7c9 	.word	0x0800c7c9
 800c790:	0800c7c9 	.word	0x0800c7c9
 800c794:	0800c7c9 	.word	0x0800c7c9
 800c798:	0800c7c9 	.word	0x0800c7c9
 800c79c:	0800c7c9 	.word	0x0800c7c9
 800c7a0:	0800c7c9 	.word	0x0800c7c9
 800c7a4:	0800c7c9 	.word	0x0800c7c9
 800c7a8:	0800c7c9 	.word	0x0800c7c9
 800c7ac:	0800c7c9 	.word	0x0800c7c9
 800c7b0:	0800c7c9 	.word	0x0800c7c9
 800c7b4:	0800c7c9 	.word	0x0800c7c9
 800c7b8:	0800c7c9 	.word	0x0800c7c9
 800c7bc:	0800c7c9 	.word	0x0800c7c9
 800c7c0:	0800c7c9 	.word	0x0800c7c9
 800c7c4:	0800c7c9 	.word	0x0800c7c9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c7c8:	bf00      	nop
  }

  return (USBD_OK);
 800c7ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	370c      	adds	r7, #12
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d6:	4770      	bx	lr

0800c7d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b082      	sub	sp, #8
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c7e2:	6879      	ldr	r1, [r7, #4]
 800c7e4:	4805      	ldr	r0, [pc, #20]	; (800c7fc <CDC_Receive_FS+0x24>)
 800c7e6:	f7fd fa0e 	bl	8009c06 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c7ea:	4804      	ldr	r0, [pc, #16]	; (800c7fc <CDC_Receive_FS+0x24>)
 800c7ec:	f7fd fa54 	bl	8009c98 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c7f0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3708      	adds	r7, #8
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}
 800c7fa:	bf00      	nop
 800c7fc:	20000cd4 	.word	0x20000cd4

0800c800 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b084      	sub	sp, #16
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	460b      	mov	r3, r1
 800c80a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c80c:	2300      	movs	r3, #0
 800c80e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c810:	4b0d      	ldr	r3, [pc, #52]	; (800c848 <CDC_Transmit_FS+0x48>)
 800c812:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c816:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d001      	beq.n	800c826 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c822:	2301      	movs	r3, #1
 800c824:	e00b      	b.n	800c83e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c826:	887b      	ldrh	r3, [r7, #2]
 800c828:	461a      	mov	r2, r3
 800c82a:	6879      	ldr	r1, [r7, #4]
 800c82c:	4806      	ldr	r0, [pc, #24]	; (800c848 <CDC_Transmit_FS+0x48>)
 800c82e:	f7fd f9cc 	bl	8009bca <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c832:	4805      	ldr	r0, [pc, #20]	; (800c848 <CDC_Transmit_FS+0x48>)
 800c834:	f7fd fa00 	bl	8009c38 <USBD_CDC_TransmitPacket>
 800c838:	4603      	mov	r3, r0
 800c83a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c83c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3710      	adds	r7, #16
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
 800c846:	bf00      	nop
 800c848:	20000cd4 	.word	0x20000cd4

0800c84c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b087      	sub	sp, #28
 800c850:	af00      	add	r7, sp, #0
 800c852:	60f8      	str	r0, [r7, #12]
 800c854:	60b9      	str	r1, [r7, #8]
 800c856:	4613      	mov	r3, r2
 800c858:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c85a:	2300      	movs	r3, #0
 800c85c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c85e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c862:	4618      	mov	r0, r3
 800c864:	371c      	adds	r7, #28
 800c866:	46bd      	mov	sp, r7
 800c868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86c:	4770      	bx	lr
	...

0800c870 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b08a      	sub	sp, #40	; 0x28
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c878:	f107 0314 	add.w	r3, r7, #20
 800c87c:	2200      	movs	r2, #0
 800c87e:	601a      	str	r2, [r3, #0]
 800c880:	605a      	str	r2, [r3, #4]
 800c882:	609a      	str	r2, [r3, #8]
 800c884:	60da      	str	r2, [r3, #12]
 800c886:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c890:	d13a      	bne.n	800c908 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c892:	2300      	movs	r3, #0
 800c894:	613b      	str	r3, [r7, #16]
 800c896:	4b1e      	ldr	r3, [pc, #120]	; (800c910 <HAL_PCD_MspInit+0xa0>)
 800c898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c89a:	4a1d      	ldr	r2, [pc, #116]	; (800c910 <HAL_PCD_MspInit+0xa0>)
 800c89c:	f043 0301 	orr.w	r3, r3, #1
 800c8a0:	6313      	str	r3, [r2, #48]	; 0x30
 800c8a2:	4b1b      	ldr	r3, [pc, #108]	; (800c910 <HAL_PCD_MspInit+0xa0>)
 800c8a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8a6:	f003 0301 	and.w	r3, r3, #1
 800c8aa:	613b      	str	r3, [r7, #16]
 800c8ac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c8ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c8b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c8b4:	2302      	movs	r3, #2
 800c8b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c8bc:	2303      	movs	r3, #3
 800c8be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c8c0:	230a      	movs	r3, #10
 800c8c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c8c4:	f107 0314 	add.w	r3, r7, #20
 800c8c8:	4619      	mov	r1, r3
 800c8ca:	4812      	ldr	r0, [pc, #72]	; (800c914 <HAL_PCD_MspInit+0xa4>)
 800c8cc:	f7f5 f912 	bl	8001af4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c8d0:	4b0f      	ldr	r3, [pc, #60]	; (800c910 <HAL_PCD_MspInit+0xa0>)
 800c8d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8d4:	4a0e      	ldr	r2, [pc, #56]	; (800c910 <HAL_PCD_MspInit+0xa0>)
 800c8d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8da:	6353      	str	r3, [r2, #52]	; 0x34
 800c8dc:	2300      	movs	r3, #0
 800c8de:	60fb      	str	r3, [r7, #12]
 800c8e0:	4b0b      	ldr	r3, [pc, #44]	; (800c910 <HAL_PCD_MspInit+0xa0>)
 800c8e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8e4:	4a0a      	ldr	r2, [pc, #40]	; (800c910 <HAL_PCD_MspInit+0xa0>)
 800c8e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c8ea:	6453      	str	r3, [r2, #68]	; 0x44
 800c8ec:	4b08      	ldr	r3, [pc, #32]	; (800c910 <HAL_PCD_MspInit+0xa0>)
 800c8ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c8f4:	60fb      	str	r3, [r7, #12]
 800c8f6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	2100      	movs	r1, #0
 800c8fc:	2043      	movs	r0, #67	; 0x43
 800c8fe:	f7f4 fda8 	bl	8001452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c902:	2043      	movs	r0, #67	; 0x43
 800c904:	f7f4 fdc1 	bl	800148a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c908:	bf00      	nop
 800c90a:	3728      	adds	r7, #40	; 0x28
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	40023800 	.word	0x40023800
 800c914:	40020000 	.word	0x40020000

0800c918 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b082      	sub	sp, #8
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c92c:	4619      	mov	r1, r3
 800c92e:	4610      	mov	r0, r2
 800c930:	f7fd fa7e 	bl	8009e30 <USBD_LL_SetupStage>
}
 800c934:	bf00      	nop
 800c936:	3708      	adds	r7, #8
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b082      	sub	sp, #8
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	460b      	mov	r3, r1
 800c946:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c94e:	78fa      	ldrb	r2, [r7, #3]
 800c950:	6879      	ldr	r1, [r7, #4]
 800c952:	4613      	mov	r3, r2
 800c954:	00db      	lsls	r3, r3, #3
 800c956:	1a9b      	subs	r3, r3, r2
 800c958:	009b      	lsls	r3, r3, #2
 800c95a:	440b      	add	r3, r1
 800c95c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c960:	681a      	ldr	r2, [r3, #0]
 800c962:	78fb      	ldrb	r3, [r7, #3]
 800c964:	4619      	mov	r1, r3
 800c966:	f7fd fab8 	bl	8009eda <USBD_LL_DataOutStage>
}
 800c96a:	bf00      	nop
 800c96c:	3708      	adds	r7, #8
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}

0800c972 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c972:	b580      	push	{r7, lr}
 800c974:	b082      	sub	sp, #8
 800c976:	af00      	add	r7, sp, #0
 800c978:	6078      	str	r0, [r7, #4]
 800c97a:	460b      	mov	r3, r1
 800c97c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c984:	78fa      	ldrb	r2, [r7, #3]
 800c986:	6879      	ldr	r1, [r7, #4]
 800c988:	4613      	mov	r3, r2
 800c98a:	00db      	lsls	r3, r3, #3
 800c98c:	1a9b      	subs	r3, r3, r2
 800c98e:	009b      	lsls	r3, r3, #2
 800c990:	440b      	add	r3, r1
 800c992:	3348      	adds	r3, #72	; 0x48
 800c994:	681a      	ldr	r2, [r3, #0]
 800c996:	78fb      	ldrb	r3, [r7, #3]
 800c998:	4619      	mov	r1, r3
 800c99a:	f7fd fb01 	bl	8009fa0 <USBD_LL_DataInStage>
}
 800c99e:	bf00      	nop
 800c9a0:	3708      	adds	r7, #8
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}

0800c9a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9a6:	b580      	push	{r7, lr}
 800c9a8:	b082      	sub	sp, #8
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f7fd fc15 	bl	800a1e4 <USBD_LL_SOF>
}
 800c9ba:	bf00      	nop
 800c9bc:	3708      	adds	r7, #8
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}

0800c9c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9c2:	b580      	push	{r7, lr}
 800c9c4:	b084      	sub	sp, #16
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	68db      	ldr	r3, [r3, #12]
 800c9d2:	2b02      	cmp	r3, #2
 800c9d4:	d001      	beq.n	800c9da <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c9d6:	f7ff fb89 	bl	800c0ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c9e0:	7bfa      	ldrb	r2, [r7, #15]
 800c9e2:	4611      	mov	r1, r2
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f7fd fbbf 	bl	800a168 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f7fd fb6b 	bl	800a0cc <USBD_LL_Reset>
}
 800c9f6:	bf00      	nop
 800c9f8:	3710      	adds	r7, #16
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
	...

0800ca00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b082      	sub	sp, #8
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7fd fbba 	bl	800a188 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	687a      	ldr	r2, [r7, #4]
 800ca20:	6812      	ldr	r2, [r2, #0]
 800ca22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ca26:	f043 0301 	orr.w	r3, r3, #1
 800ca2a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6a1b      	ldr	r3, [r3, #32]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d005      	beq.n	800ca40 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca34:	4b04      	ldr	r3, [pc, #16]	; (800ca48 <HAL_PCD_SuspendCallback+0x48>)
 800ca36:	691b      	ldr	r3, [r3, #16]
 800ca38:	4a03      	ldr	r2, [pc, #12]	; (800ca48 <HAL_PCD_SuspendCallback+0x48>)
 800ca3a:	f043 0306 	orr.w	r3, r3, #6
 800ca3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ca40:	bf00      	nop
 800ca42:	3708      	adds	r7, #8
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	e000ed00 	.word	0xe000ed00

0800ca4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b082      	sub	sp, #8
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f7fd fbaa 	bl	800a1b4 <USBD_LL_Resume>
}
 800ca60:	bf00      	nop
 800ca62:	3708      	adds	r7, #8
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b082      	sub	sp, #8
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
 800ca70:	460b      	mov	r3, r1
 800ca72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ca7a:	78fa      	ldrb	r2, [r7, #3]
 800ca7c:	4611      	mov	r1, r2
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f7fd fbf8 	bl	800a274 <USBD_LL_IsoOUTIncomplete>
}
 800ca84:	bf00      	nop
 800ca86:	3708      	adds	r7, #8
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}

0800ca8c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b082      	sub	sp, #8
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
 800ca94:	460b      	mov	r3, r1
 800ca96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ca9e:	78fa      	ldrb	r2, [r7, #3]
 800caa0:	4611      	mov	r1, r2
 800caa2:	4618      	mov	r0, r3
 800caa4:	f7fd fbc0 	bl	800a228 <USBD_LL_IsoINIncomplete>
}
 800caa8:	bf00      	nop
 800caaa:	3708      	adds	r7, #8
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}

0800cab0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b082      	sub	sp, #8
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cabe:	4618      	mov	r0, r3
 800cac0:	f7fd fbfe 	bl	800a2c0 <USBD_LL_DevConnected>
}
 800cac4:	bf00      	nop
 800cac6:	3708      	adds	r7, #8
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b082      	sub	sp, #8
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cada:	4618      	mov	r0, r3
 800cadc:	f7fd fbfb 	bl	800a2d6 <USBD_LL_DevDisconnected>
}
 800cae0:	bf00      	nop
 800cae2:	3708      	adds	r7, #8
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b082      	sub	sp, #8
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d13c      	bne.n	800cb72 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800caf8:	4a20      	ldr	r2, [pc, #128]	; (800cb7c <USBD_LL_Init+0x94>)
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	4a1e      	ldr	r2, [pc, #120]	; (800cb7c <USBD_LL_Init+0x94>)
 800cb04:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cb08:	4b1c      	ldr	r3, [pc, #112]	; (800cb7c <USBD_LL_Init+0x94>)
 800cb0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800cb0e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cb10:	4b1a      	ldr	r3, [pc, #104]	; (800cb7c <USBD_LL_Init+0x94>)
 800cb12:	2204      	movs	r2, #4
 800cb14:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cb16:	4b19      	ldr	r3, [pc, #100]	; (800cb7c <USBD_LL_Init+0x94>)
 800cb18:	2202      	movs	r2, #2
 800cb1a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cb1c:	4b17      	ldr	r3, [pc, #92]	; (800cb7c <USBD_LL_Init+0x94>)
 800cb1e:	2200      	movs	r2, #0
 800cb20:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cb22:	4b16      	ldr	r3, [pc, #88]	; (800cb7c <USBD_LL_Init+0x94>)
 800cb24:	2202      	movs	r2, #2
 800cb26:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cb28:	4b14      	ldr	r3, [pc, #80]	; (800cb7c <USBD_LL_Init+0x94>)
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cb2e:	4b13      	ldr	r3, [pc, #76]	; (800cb7c <USBD_LL_Init+0x94>)
 800cb30:	2200      	movs	r2, #0
 800cb32:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cb34:	4b11      	ldr	r3, [pc, #68]	; (800cb7c <USBD_LL_Init+0x94>)
 800cb36:	2200      	movs	r2, #0
 800cb38:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800cb3a:	4b10      	ldr	r3, [pc, #64]	; (800cb7c <USBD_LL_Init+0x94>)
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cb40:	4b0e      	ldr	r3, [pc, #56]	; (800cb7c <USBD_LL_Init+0x94>)
 800cb42:	2200      	movs	r2, #0
 800cb44:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cb46:	480d      	ldr	r0, [pc, #52]	; (800cb7c <USBD_LL_Init+0x94>)
 800cb48:	f7f6 ff7b 	bl	8003a42 <HAL_PCD_Init>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d001      	beq.n	800cb56 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cb52:	f7ff facb 	bl	800c0ec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cb56:	2180      	movs	r1, #128	; 0x80
 800cb58:	4808      	ldr	r0, [pc, #32]	; (800cb7c <USBD_LL_Init+0x94>)
 800cb5a:	f7f8 f8d8 	bl	8004d0e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cb5e:	2240      	movs	r2, #64	; 0x40
 800cb60:	2100      	movs	r1, #0
 800cb62:	4806      	ldr	r0, [pc, #24]	; (800cb7c <USBD_LL_Init+0x94>)
 800cb64:	f7f8 f88c 	bl	8004c80 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cb68:	2280      	movs	r2, #128	; 0x80
 800cb6a:	2101      	movs	r1, #1
 800cb6c:	4803      	ldr	r0, [pc, #12]	; (800cb7c <USBD_LL_Init+0x94>)
 800cb6e:	f7f8 f887 	bl	8004c80 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cb72:	2300      	movs	r3, #0
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3708      	adds	r7, #8
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}
 800cb7c:	20001fa4 	.word	0x20001fa4

0800cb80 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b084      	sub	sp, #16
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cb96:	4618      	mov	r0, r3
 800cb98:	f7f7 f870 	bl	8003c7c <HAL_PCD_Start>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cba0:	7bfb      	ldrb	r3, [r7, #15]
 800cba2:	4618      	mov	r0, r3
 800cba4:	f000 f942 	bl	800ce2c <USBD_Get_USB_Status>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbac:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3710      	adds	r7, #16
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}

0800cbb6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cbb6:	b580      	push	{r7, lr}
 800cbb8:	b084      	sub	sp, #16
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	6078      	str	r0, [r7, #4]
 800cbbe:	4608      	mov	r0, r1
 800cbc0:	4611      	mov	r1, r2
 800cbc2:	461a      	mov	r2, r3
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	70fb      	strb	r3, [r7, #3]
 800cbc8:	460b      	mov	r3, r1
 800cbca:	70bb      	strb	r3, [r7, #2]
 800cbcc:	4613      	mov	r3, r2
 800cbce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cbde:	78bb      	ldrb	r3, [r7, #2]
 800cbe0:	883a      	ldrh	r2, [r7, #0]
 800cbe2:	78f9      	ldrb	r1, [r7, #3]
 800cbe4:	f7f7 fc54 	bl	8004490 <HAL_PCD_EP_Open>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbec:	7bfb      	ldrb	r3, [r7, #15]
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f000 f91c 	bl	800ce2c <USBD_Get_USB_Status>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3710      	adds	r7, #16
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}

0800cc02 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc02:	b580      	push	{r7, lr}
 800cc04:	b084      	sub	sp, #16
 800cc06:	af00      	add	r7, sp, #0
 800cc08:	6078      	str	r0, [r7, #4]
 800cc0a:	460b      	mov	r3, r1
 800cc0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc12:	2300      	movs	r3, #0
 800cc14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cc1c:	78fa      	ldrb	r2, [r7, #3]
 800cc1e:	4611      	mov	r1, r2
 800cc20:	4618      	mov	r0, r3
 800cc22:	f7f7 fc9d 	bl	8004560 <HAL_PCD_EP_Close>
 800cc26:	4603      	mov	r3, r0
 800cc28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc2a:	7bfb      	ldrb	r3, [r7, #15]
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f000 f8fd 	bl	800ce2c <USBD_Get_USB_Status>
 800cc32:	4603      	mov	r3, r0
 800cc34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc36:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3710      	adds	r7, #16
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}

0800cc40 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b084      	sub	sp, #16
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	460b      	mov	r3, r1
 800cc4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc50:	2300      	movs	r3, #0
 800cc52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cc5a:	78fa      	ldrb	r2, [r7, #3]
 800cc5c:	4611      	mov	r1, r2
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f7f7 fd75 	bl	800474e <HAL_PCD_EP_SetStall>
 800cc64:	4603      	mov	r3, r0
 800cc66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc68:	7bfb      	ldrb	r3, [r7, #15]
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f000 f8de 	bl	800ce2c <USBD_Get_USB_Status>
 800cc70:	4603      	mov	r3, r0
 800cc72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc74:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3710      	adds	r7, #16
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}

0800cc7e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc7e:	b580      	push	{r7, lr}
 800cc80:	b084      	sub	sp, #16
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	6078      	str	r0, [r7, #4]
 800cc86:	460b      	mov	r3, r1
 800cc88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cc98:	78fa      	ldrb	r2, [r7, #3]
 800cc9a:	4611      	mov	r1, r2
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f7f7 fdba 	bl	8004816 <HAL_PCD_EP_ClrStall>
 800cca2:	4603      	mov	r3, r0
 800cca4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cca6:	7bfb      	ldrb	r3, [r7, #15]
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f000 f8bf 	bl	800ce2c <USBD_Get_USB_Status>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccb2:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	3710      	adds	r7, #16
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd80      	pop	{r7, pc}

0800ccbc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b085      	sub	sp, #20
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	460b      	mov	r3, r1
 800ccc6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ccce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ccd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	da0b      	bge.n	800ccf0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ccd8:	78fb      	ldrb	r3, [r7, #3]
 800ccda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ccde:	68f9      	ldr	r1, [r7, #12]
 800cce0:	4613      	mov	r3, r2
 800cce2:	00db      	lsls	r3, r3, #3
 800cce4:	1a9b      	subs	r3, r3, r2
 800cce6:	009b      	lsls	r3, r3, #2
 800cce8:	440b      	add	r3, r1
 800ccea:	333e      	adds	r3, #62	; 0x3e
 800ccec:	781b      	ldrb	r3, [r3, #0]
 800ccee:	e00b      	b.n	800cd08 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ccf0:	78fb      	ldrb	r3, [r7, #3]
 800ccf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ccf6:	68f9      	ldr	r1, [r7, #12]
 800ccf8:	4613      	mov	r3, r2
 800ccfa:	00db      	lsls	r3, r3, #3
 800ccfc:	1a9b      	subs	r3, r3, r2
 800ccfe:	009b      	lsls	r3, r3, #2
 800cd00:	440b      	add	r3, r1
 800cd02:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cd06:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3714      	adds	r7, #20
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd12:	4770      	bx	lr

0800cd14 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	460b      	mov	r3, r1
 800cd1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd20:	2300      	movs	r3, #0
 800cd22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd24:	2300      	movs	r3, #0
 800cd26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cd2e:	78fa      	ldrb	r2, [r7, #3]
 800cd30:	4611      	mov	r1, r2
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7f7 fb87 	bl	8004446 <HAL_PCD_SetAddress>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd3c:	7bfb      	ldrb	r3, [r7, #15]
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f000 f874 	bl	800ce2c <USBD_Get_USB_Status>
 800cd44:	4603      	mov	r3, r0
 800cd46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd48:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3710      	adds	r7, #16
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}

0800cd52 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cd52:	b580      	push	{r7, lr}
 800cd54:	b086      	sub	sp, #24
 800cd56:	af00      	add	r7, sp, #0
 800cd58:	60f8      	str	r0, [r7, #12]
 800cd5a:	607a      	str	r2, [r7, #4]
 800cd5c:	603b      	str	r3, [r7, #0]
 800cd5e:	460b      	mov	r3, r1
 800cd60:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd62:	2300      	movs	r3, #0
 800cd64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd66:	2300      	movs	r3, #0
 800cd68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cd70:	7af9      	ldrb	r1, [r7, #11]
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	687a      	ldr	r2, [r7, #4]
 800cd76:	f7f7 fca0 	bl	80046ba <HAL_PCD_EP_Transmit>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd7e:	7dfb      	ldrb	r3, [r7, #23]
 800cd80:	4618      	mov	r0, r3
 800cd82:	f000 f853 	bl	800ce2c <USBD_Get_USB_Status>
 800cd86:	4603      	mov	r3, r0
 800cd88:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cd8a:	7dbb      	ldrb	r3, [r7, #22]
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3718      	adds	r7, #24
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}

0800cd94 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b086      	sub	sp, #24
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	60f8      	str	r0, [r7, #12]
 800cd9c:	607a      	str	r2, [r7, #4]
 800cd9e:	603b      	str	r3, [r7, #0]
 800cda0:	460b      	mov	r3, r1
 800cda2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cda4:	2300      	movs	r3, #0
 800cda6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cdb2:	7af9      	ldrb	r1, [r7, #11]
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	687a      	ldr	r2, [r7, #4]
 800cdb8:	f7f7 fc1c 	bl	80045f4 <HAL_PCD_EP_Receive>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdc0:	7dfb      	ldrb	r3, [r7, #23]
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f000 f832 	bl	800ce2c <USBD_Get_USB_Status>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cdcc:	7dbb      	ldrb	r3, [r7, #22]
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3718      	adds	r7, #24
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}

0800cdd6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdd6:	b580      	push	{r7, lr}
 800cdd8:	b082      	sub	sp, #8
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	6078      	str	r0, [r7, #4]
 800cdde:	460b      	mov	r3, r1
 800cde0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cde8:	78fa      	ldrb	r2, [r7, #3]
 800cdea:	4611      	mov	r1, r2
 800cdec:	4618      	mov	r0, r3
 800cdee:	f7f7 fc4c 	bl	800468a <HAL_PCD_EP_GetRxCount>
 800cdf2:	4603      	mov	r3, r0
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3708      	adds	r7, #8
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}

0800cdfc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b083      	sub	sp, #12
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ce04:	4b03      	ldr	r3, [pc, #12]	; (800ce14 <USBD_static_malloc+0x18>)
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	370c      	adds	r7, #12
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce10:	4770      	bx	lr
 800ce12:	bf00      	nop
 800ce14:	200007f4 	.word	0x200007f4

0800ce18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b083      	sub	sp, #12
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]

}
 800ce20:	bf00      	nop
 800ce22:	370c      	adds	r7, #12
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr

0800ce2c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b085      	sub	sp, #20
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	4603      	mov	r3, r0
 800ce34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce36:	2300      	movs	r3, #0
 800ce38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ce3a:	79fb      	ldrb	r3, [r7, #7]
 800ce3c:	2b03      	cmp	r3, #3
 800ce3e:	d817      	bhi.n	800ce70 <USBD_Get_USB_Status+0x44>
 800ce40:	a201      	add	r2, pc, #4	; (adr r2, 800ce48 <USBD_Get_USB_Status+0x1c>)
 800ce42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce46:	bf00      	nop
 800ce48:	0800ce59 	.word	0x0800ce59
 800ce4c:	0800ce5f 	.word	0x0800ce5f
 800ce50:	0800ce65 	.word	0x0800ce65
 800ce54:	0800ce6b 	.word	0x0800ce6b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ce58:	2300      	movs	r3, #0
 800ce5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ce5c:	e00b      	b.n	800ce76 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce5e:	2303      	movs	r3, #3
 800ce60:	73fb      	strb	r3, [r7, #15]
    break;
 800ce62:	e008      	b.n	800ce76 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce64:	2301      	movs	r3, #1
 800ce66:	73fb      	strb	r3, [r7, #15]
    break;
 800ce68:	e005      	b.n	800ce76 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce6a:	2303      	movs	r3, #3
 800ce6c:	73fb      	strb	r3, [r7, #15]
    break;
 800ce6e:	e002      	b.n	800ce76 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ce70:	2303      	movs	r3, #3
 800ce72:	73fb      	strb	r3, [r7, #15]
    break;
 800ce74:	bf00      	nop
  }
  return usb_status;
 800ce76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3714      	adds	r7, #20
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce82:	4770      	bx	lr

0800ce84 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce84:	b480      	push	{r7}
 800ce86:	b083      	sub	sp, #12
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	6039      	str	r1, [r7, #0]
 800ce8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	2212      	movs	r2, #18
 800ce94:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ce96:	4b03      	ldr	r3, [pc, #12]	; (800cea4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	370c      	adds	r7, #12
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea2:	4770      	bx	lr
 800cea4:	2000014c 	.word	0x2000014c

0800cea8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cea8:	b480      	push	{r7}
 800ceaa:	b083      	sub	sp, #12
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	4603      	mov	r3, r0
 800ceb0:	6039      	str	r1, [r7, #0]
 800ceb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	2204      	movs	r2, #4
 800ceb8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ceba:	4b03      	ldr	r3, [pc, #12]	; (800cec8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	370c      	adds	r7, #12
 800cec0:	46bd      	mov	sp, r7
 800cec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec6:	4770      	bx	lr
 800cec8:	20000160 	.word	0x20000160

0800cecc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b082      	sub	sp, #8
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	4603      	mov	r3, r0
 800ced4:	6039      	str	r1, [r7, #0]
 800ced6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ced8:	79fb      	ldrb	r3, [r7, #7]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d105      	bne.n	800ceea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cede:	683a      	ldr	r2, [r7, #0]
 800cee0:	4907      	ldr	r1, [pc, #28]	; (800cf00 <USBD_FS_ProductStrDescriptor+0x34>)
 800cee2:	4808      	ldr	r0, [pc, #32]	; (800cf04 <USBD_FS_ProductStrDescriptor+0x38>)
 800cee4:	f7fd ff8b 	bl	800adfe <USBD_GetString>
 800cee8:	e004      	b.n	800cef4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ceea:	683a      	ldr	r2, [r7, #0]
 800ceec:	4904      	ldr	r1, [pc, #16]	; (800cf00 <USBD_FS_ProductStrDescriptor+0x34>)
 800ceee:	4805      	ldr	r0, [pc, #20]	; (800cf04 <USBD_FS_ProductStrDescriptor+0x38>)
 800cef0:	f7fd ff85 	bl	800adfe <USBD_GetString>
  }
  return USBD_StrDesc;
 800cef4:	4b02      	ldr	r3, [pc, #8]	; (800cf00 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3708      	adds	r7, #8
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}
 800cefe:	bf00      	nop
 800cf00:	200023ac 	.word	0x200023ac
 800cf04:	0800fbb0 	.word	0x0800fbb0

0800cf08 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	4603      	mov	r3, r0
 800cf10:	6039      	str	r1, [r7, #0]
 800cf12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cf14:	683a      	ldr	r2, [r7, #0]
 800cf16:	4904      	ldr	r1, [pc, #16]	; (800cf28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cf18:	4804      	ldr	r0, [pc, #16]	; (800cf2c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cf1a:	f7fd ff70 	bl	800adfe <USBD_GetString>
  return USBD_StrDesc;
 800cf1e:	4b02      	ldr	r3, [pc, #8]	; (800cf28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	3708      	adds	r7, #8
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}
 800cf28:	200023ac 	.word	0x200023ac
 800cf2c:	0800fbc8 	.word	0x0800fbc8

0800cf30 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b082      	sub	sp, #8
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	4603      	mov	r3, r0
 800cf38:	6039      	str	r1, [r7, #0]
 800cf3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	221a      	movs	r2, #26
 800cf40:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cf42:	f000 f843 	bl	800cfcc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cf46:	4b02      	ldr	r3, [pc, #8]	; (800cf50 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	3708      	adds	r7, #8
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}
 800cf50:	20000164 	.word	0x20000164

0800cf54 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b082      	sub	sp, #8
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	6039      	str	r1, [r7, #0]
 800cf5e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cf60:	79fb      	ldrb	r3, [r7, #7]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d105      	bne.n	800cf72 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cf66:	683a      	ldr	r2, [r7, #0]
 800cf68:	4907      	ldr	r1, [pc, #28]	; (800cf88 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cf6a:	4808      	ldr	r0, [pc, #32]	; (800cf8c <USBD_FS_ConfigStrDescriptor+0x38>)
 800cf6c:	f7fd ff47 	bl	800adfe <USBD_GetString>
 800cf70:	e004      	b.n	800cf7c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cf72:	683a      	ldr	r2, [r7, #0]
 800cf74:	4904      	ldr	r1, [pc, #16]	; (800cf88 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cf76:	4805      	ldr	r0, [pc, #20]	; (800cf8c <USBD_FS_ConfigStrDescriptor+0x38>)
 800cf78:	f7fd ff41 	bl	800adfe <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf7c:	4b02      	ldr	r3, [pc, #8]	; (800cf88 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3708      	adds	r7, #8
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}
 800cf86:	bf00      	nop
 800cf88:	200023ac 	.word	0x200023ac
 800cf8c:	0800fbdc 	.word	0x0800fbdc

0800cf90 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b082      	sub	sp, #8
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	4603      	mov	r3, r0
 800cf98:	6039      	str	r1, [r7, #0]
 800cf9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cf9c:	79fb      	ldrb	r3, [r7, #7]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d105      	bne.n	800cfae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cfa2:	683a      	ldr	r2, [r7, #0]
 800cfa4:	4907      	ldr	r1, [pc, #28]	; (800cfc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cfa6:	4808      	ldr	r0, [pc, #32]	; (800cfc8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cfa8:	f7fd ff29 	bl	800adfe <USBD_GetString>
 800cfac:	e004      	b.n	800cfb8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cfae:	683a      	ldr	r2, [r7, #0]
 800cfb0:	4904      	ldr	r1, [pc, #16]	; (800cfc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cfb2:	4805      	ldr	r0, [pc, #20]	; (800cfc8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cfb4:	f7fd ff23 	bl	800adfe <USBD_GetString>
  }
  return USBD_StrDesc;
 800cfb8:	4b02      	ldr	r3, [pc, #8]	; (800cfc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3708      	adds	r7, #8
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}
 800cfc2:	bf00      	nop
 800cfc4:	200023ac 	.word	0x200023ac
 800cfc8:	0800fbe8 	.word	0x0800fbe8

0800cfcc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b084      	sub	sp, #16
 800cfd0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cfd2:	4b0f      	ldr	r3, [pc, #60]	; (800d010 <Get_SerialNum+0x44>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cfd8:	4b0e      	ldr	r3, [pc, #56]	; (800d014 <Get_SerialNum+0x48>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cfde:	4b0e      	ldr	r3, [pc, #56]	; (800d018 <Get_SerialNum+0x4c>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cfe4:	68fa      	ldr	r2, [r7, #12]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	4413      	add	r3, r2
 800cfea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d009      	beq.n	800d006 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cff2:	2208      	movs	r2, #8
 800cff4:	4909      	ldr	r1, [pc, #36]	; (800d01c <Get_SerialNum+0x50>)
 800cff6:	68f8      	ldr	r0, [r7, #12]
 800cff8:	f000 f814 	bl	800d024 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cffc:	2204      	movs	r2, #4
 800cffe:	4908      	ldr	r1, [pc, #32]	; (800d020 <Get_SerialNum+0x54>)
 800d000:	68b8      	ldr	r0, [r7, #8]
 800d002:	f000 f80f 	bl	800d024 <IntToUnicode>
  }
}
 800d006:	bf00      	nop
 800d008:	3710      	adds	r7, #16
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}
 800d00e:	bf00      	nop
 800d010:	1fff7a10 	.word	0x1fff7a10
 800d014:	1fff7a14 	.word	0x1fff7a14
 800d018:	1fff7a18 	.word	0x1fff7a18
 800d01c:	20000166 	.word	0x20000166
 800d020:	20000176 	.word	0x20000176

0800d024 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d024:	b480      	push	{r7}
 800d026:	b087      	sub	sp, #28
 800d028:	af00      	add	r7, sp, #0
 800d02a:	60f8      	str	r0, [r7, #12]
 800d02c:	60b9      	str	r1, [r7, #8]
 800d02e:	4613      	mov	r3, r2
 800d030:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d032:	2300      	movs	r3, #0
 800d034:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d036:	2300      	movs	r3, #0
 800d038:	75fb      	strb	r3, [r7, #23]
 800d03a:	e027      	b.n	800d08c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	0f1b      	lsrs	r3, r3, #28
 800d040:	2b09      	cmp	r3, #9
 800d042:	d80b      	bhi.n	800d05c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	0f1b      	lsrs	r3, r3, #28
 800d048:	b2da      	uxtb	r2, r3
 800d04a:	7dfb      	ldrb	r3, [r7, #23]
 800d04c:	005b      	lsls	r3, r3, #1
 800d04e:	4619      	mov	r1, r3
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	440b      	add	r3, r1
 800d054:	3230      	adds	r2, #48	; 0x30
 800d056:	b2d2      	uxtb	r2, r2
 800d058:	701a      	strb	r2, [r3, #0]
 800d05a:	e00a      	b.n	800d072 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	0f1b      	lsrs	r3, r3, #28
 800d060:	b2da      	uxtb	r2, r3
 800d062:	7dfb      	ldrb	r3, [r7, #23]
 800d064:	005b      	lsls	r3, r3, #1
 800d066:	4619      	mov	r1, r3
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	440b      	add	r3, r1
 800d06c:	3237      	adds	r2, #55	; 0x37
 800d06e:	b2d2      	uxtb	r2, r2
 800d070:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	011b      	lsls	r3, r3, #4
 800d076:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d078:	7dfb      	ldrb	r3, [r7, #23]
 800d07a:	005b      	lsls	r3, r3, #1
 800d07c:	3301      	adds	r3, #1
 800d07e:	68ba      	ldr	r2, [r7, #8]
 800d080:	4413      	add	r3, r2
 800d082:	2200      	movs	r2, #0
 800d084:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d086:	7dfb      	ldrb	r3, [r7, #23]
 800d088:	3301      	adds	r3, #1
 800d08a:	75fb      	strb	r3, [r7, #23]
 800d08c:	7dfa      	ldrb	r2, [r7, #23]
 800d08e:	79fb      	ldrb	r3, [r7, #7]
 800d090:	429a      	cmp	r2, r3
 800d092:	d3d3      	bcc.n	800d03c <IntToUnicode+0x18>
  }
}
 800d094:	bf00      	nop
 800d096:	bf00      	nop
 800d098:	371c      	adds	r7, #28
 800d09a:	46bd      	mov	sp, r7
 800d09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a0:	4770      	bx	lr
	...

0800d0a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800d0a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d0dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800d0a8:	480d      	ldr	r0, [pc, #52]	; (800d0e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800d0aa:	490e      	ldr	r1, [pc, #56]	; (800d0e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800d0ac:	4a0e      	ldr	r2, [pc, #56]	; (800d0e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800d0ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800d0b0:	e002      	b.n	800d0b8 <LoopCopyDataInit>

0800d0b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800d0b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d0b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d0b6:	3304      	adds	r3, #4

0800d0b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d0b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d0ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800d0bc:	d3f9      	bcc.n	800d0b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800d0be:	4a0b      	ldr	r2, [pc, #44]	; (800d0ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800d0c0:	4c0b      	ldr	r4, [pc, #44]	; (800d0f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 800d0c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800d0c4:	e001      	b.n	800d0ca <LoopFillZerobss>

0800d0c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800d0c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d0c8:	3204      	adds	r2, #4

0800d0ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800d0ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800d0cc:	d3fb      	bcc.n	800d0c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d0ce:	f7ff fac7 	bl	800c660 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d0d2:	f000 f811 	bl	800d0f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d0d6:	f7fe fd67 	bl	800bba8 <main>
  bx  lr    
 800d0da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800d0dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800d0e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800d0e4:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 800d0e8:	0801001c 	.word	0x0801001c
  ldr r2, =_sbss
 800d0ec:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 800d0f0:	200025bc 	.word	0x200025bc

0800d0f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d0f4:	e7fe      	b.n	800d0f4 <ADC_IRQHandler>
	...

0800d0f8 <__libc_init_array>:
 800d0f8:	b570      	push	{r4, r5, r6, lr}
 800d0fa:	4d0d      	ldr	r5, [pc, #52]	; (800d130 <__libc_init_array+0x38>)
 800d0fc:	4c0d      	ldr	r4, [pc, #52]	; (800d134 <__libc_init_array+0x3c>)
 800d0fe:	1b64      	subs	r4, r4, r5
 800d100:	10a4      	asrs	r4, r4, #2
 800d102:	2600      	movs	r6, #0
 800d104:	42a6      	cmp	r6, r4
 800d106:	d109      	bne.n	800d11c <__libc_init_array+0x24>
 800d108:	4d0b      	ldr	r5, [pc, #44]	; (800d138 <__libc_init_array+0x40>)
 800d10a:	4c0c      	ldr	r4, [pc, #48]	; (800d13c <__libc_init_array+0x44>)
 800d10c:	f002 fd42 	bl	800fb94 <_init>
 800d110:	1b64      	subs	r4, r4, r5
 800d112:	10a4      	asrs	r4, r4, #2
 800d114:	2600      	movs	r6, #0
 800d116:	42a6      	cmp	r6, r4
 800d118:	d105      	bne.n	800d126 <__libc_init_array+0x2e>
 800d11a:	bd70      	pop	{r4, r5, r6, pc}
 800d11c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d120:	4798      	blx	r3
 800d122:	3601      	adds	r6, #1
 800d124:	e7ee      	b.n	800d104 <__libc_init_array+0xc>
 800d126:	f855 3b04 	ldr.w	r3, [r5], #4
 800d12a:	4798      	blx	r3
 800d12c:	3601      	adds	r6, #1
 800d12e:	e7f2      	b.n	800d116 <__libc_init_array+0x1e>
 800d130:	08010014 	.word	0x08010014
 800d134:	08010014 	.word	0x08010014
 800d138:	08010014 	.word	0x08010014
 800d13c:	08010018 	.word	0x08010018

0800d140 <memset>:
 800d140:	4402      	add	r2, r0
 800d142:	4603      	mov	r3, r0
 800d144:	4293      	cmp	r3, r2
 800d146:	d100      	bne.n	800d14a <memset+0xa>
 800d148:	4770      	bx	lr
 800d14a:	f803 1b01 	strb.w	r1, [r3], #1
 800d14e:	e7f9      	b.n	800d144 <memset+0x4>

0800d150 <__cvt>:
 800d150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d154:	ec55 4b10 	vmov	r4, r5, d0
 800d158:	2d00      	cmp	r5, #0
 800d15a:	460e      	mov	r6, r1
 800d15c:	4619      	mov	r1, r3
 800d15e:	462b      	mov	r3, r5
 800d160:	bfbb      	ittet	lt
 800d162:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d166:	461d      	movlt	r5, r3
 800d168:	2300      	movge	r3, #0
 800d16a:	232d      	movlt	r3, #45	; 0x2d
 800d16c:	700b      	strb	r3, [r1, #0]
 800d16e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d170:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d174:	4691      	mov	r9, r2
 800d176:	f023 0820 	bic.w	r8, r3, #32
 800d17a:	bfbc      	itt	lt
 800d17c:	4622      	movlt	r2, r4
 800d17e:	4614      	movlt	r4, r2
 800d180:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d184:	d005      	beq.n	800d192 <__cvt+0x42>
 800d186:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d18a:	d100      	bne.n	800d18e <__cvt+0x3e>
 800d18c:	3601      	adds	r6, #1
 800d18e:	2102      	movs	r1, #2
 800d190:	e000      	b.n	800d194 <__cvt+0x44>
 800d192:	2103      	movs	r1, #3
 800d194:	ab03      	add	r3, sp, #12
 800d196:	9301      	str	r3, [sp, #4]
 800d198:	ab02      	add	r3, sp, #8
 800d19a:	9300      	str	r3, [sp, #0]
 800d19c:	ec45 4b10 	vmov	d0, r4, r5
 800d1a0:	4653      	mov	r3, sl
 800d1a2:	4632      	mov	r2, r6
 800d1a4:	f000 fccc 	bl	800db40 <_dtoa_r>
 800d1a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d1ac:	4607      	mov	r7, r0
 800d1ae:	d102      	bne.n	800d1b6 <__cvt+0x66>
 800d1b0:	f019 0f01 	tst.w	r9, #1
 800d1b4:	d022      	beq.n	800d1fc <__cvt+0xac>
 800d1b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d1ba:	eb07 0906 	add.w	r9, r7, r6
 800d1be:	d110      	bne.n	800d1e2 <__cvt+0x92>
 800d1c0:	783b      	ldrb	r3, [r7, #0]
 800d1c2:	2b30      	cmp	r3, #48	; 0x30
 800d1c4:	d10a      	bne.n	800d1dc <__cvt+0x8c>
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	4620      	mov	r0, r4
 800d1cc:	4629      	mov	r1, r5
 800d1ce:	f7f3 fc83 	bl	8000ad8 <__aeabi_dcmpeq>
 800d1d2:	b918      	cbnz	r0, 800d1dc <__cvt+0x8c>
 800d1d4:	f1c6 0601 	rsb	r6, r6, #1
 800d1d8:	f8ca 6000 	str.w	r6, [sl]
 800d1dc:	f8da 3000 	ldr.w	r3, [sl]
 800d1e0:	4499      	add	r9, r3
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	4620      	mov	r0, r4
 800d1e8:	4629      	mov	r1, r5
 800d1ea:	f7f3 fc75 	bl	8000ad8 <__aeabi_dcmpeq>
 800d1ee:	b108      	cbz	r0, 800d1f4 <__cvt+0xa4>
 800d1f0:	f8cd 900c 	str.w	r9, [sp, #12]
 800d1f4:	2230      	movs	r2, #48	; 0x30
 800d1f6:	9b03      	ldr	r3, [sp, #12]
 800d1f8:	454b      	cmp	r3, r9
 800d1fa:	d307      	bcc.n	800d20c <__cvt+0xbc>
 800d1fc:	9b03      	ldr	r3, [sp, #12]
 800d1fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d200:	1bdb      	subs	r3, r3, r7
 800d202:	4638      	mov	r0, r7
 800d204:	6013      	str	r3, [r2, #0]
 800d206:	b004      	add	sp, #16
 800d208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d20c:	1c59      	adds	r1, r3, #1
 800d20e:	9103      	str	r1, [sp, #12]
 800d210:	701a      	strb	r2, [r3, #0]
 800d212:	e7f0      	b.n	800d1f6 <__cvt+0xa6>

0800d214 <__exponent>:
 800d214:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d216:	4603      	mov	r3, r0
 800d218:	2900      	cmp	r1, #0
 800d21a:	bfb8      	it	lt
 800d21c:	4249      	neglt	r1, r1
 800d21e:	f803 2b02 	strb.w	r2, [r3], #2
 800d222:	bfb4      	ite	lt
 800d224:	222d      	movlt	r2, #45	; 0x2d
 800d226:	222b      	movge	r2, #43	; 0x2b
 800d228:	2909      	cmp	r1, #9
 800d22a:	7042      	strb	r2, [r0, #1]
 800d22c:	dd2a      	ble.n	800d284 <__exponent+0x70>
 800d22e:	f10d 0407 	add.w	r4, sp, #7
 800d232:	46a4      	mov	ip, r4
 800d234:	270a      	movs	r7, #10
 800d236:	46a6      	mov	lr, r4
 800d238:	460a      	mov	r2, r1
 800d23a:	fb91 f6f7 	sdiv	r6, r1, r7
 800d23e:	fb07 1516 	mls	r5, r7, r6, r1
 800d242:	3530      	adds	r5, #48	; 0x30
 800d244:	2a63      	cmp	r2, #99	; 0x63
 800d246:	f104 34ff 	add.w	r4, r4, #4294967295
 800d24a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d24e:	4631      	mov	r1, r6
 800d250:	dcf1      	bgt.n	800d236 <__exponent+0x22>
 800d252:	3130      	adds	r1, #48	; 0x30
 800d254:	f1ae 0502 	sub.w	r5, lr, #2
 800d258:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d25c:	1c44      	adds	r4, r0, #1
 800d25e:	4629      	mov	r1, r5
 800d260:	4561      	cmp	r1, ip
 800d262:	d30a      	bcc.n	800d27a <__exponent+0x66>
 800d264:	f10d 0209 	add.w	r2, sp, #9
 800d268:	eba2 020e 	sub.w	r2, r2, lr
 800d26c:	4565      	cmp	r5, ip
 800d26e:	bf88      	it	hi
 800d270:	2200      	movhi	r2, #0
 800d272:	4413      	add	r3, r2
 800d274:	1a18      	subs	r0, r3, r0
 800d276:	b003      	add	sp, #12
 800d278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d27a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d27e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d282:	e7ed      	b.n	800d260 <__exponent+0x4c>
 800d284:	2330      	movs	r3, #48	; 0x30
 800d286:	3130      	adds	r1, #48	; 0x30
 800d288:	7083      	strb	r3, [r0, #2]
 800d28a:	70c1      	strb	r1, [r0, #3]
 800d28c:	1d03      	adds	r3, r0, #4
 800d28e:	e7f1      	b.n	800d274 <__exponent+0x60>

0800d290 <_printf_float>:
 800d290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d294:	ed2d 8b02 	vpush	{d8}
 800d298:	b08d      	sub	sp, #52	; 0x34
 800d29a:	460c      	mov	r4, r1
 800d29c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d2a0:	4616      	mov	r6, r2
 800d2a2:	461f      	mov	r7, r3
 800d2a4:	4605      	mov	r5, r0
 800d2a6:	f001 fa37 	bl	800e718 <_localeconv_r>
 800d2aa:	f8d0 a000 	ldr.w	sl, [r0]
 800d2ae:	4650      	mov	r0, sl
 800d2b0:	f7f2 ff96 	bl	80001e0 <strlen>
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	930a      	str	r3, [sp, #40]	; 0x28
 800d2b8:	6823      	ldr	r3, [r4, #0]
 800d2ba:	9305      	str	r3, [sp, #20]
 800d2bc:	f8d8 3000 	ldr.w	r3, [r8]
 800d2c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d2c4:	3307      	adds	r3, #7
 800d2c6:	f023 0307 	bic.w	r3, r3, #7
 800d2ca:	f103 0208 	add.w	r2, r3, #8
 800d2ce:	f8c8 2000 	str.w	r2, [r8]
 800d2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d2da:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d2de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d2e2:	9307      	str	r3, [sp, #28]
 800d2e4:	f8cd 8018 	str.w	r8, [sp, #24]
 800d2e8:	ee08 0a10 	vmov	s16, r0
 800d2ec:	4b9f      	ldr	r3, [pc, #636]	; (800d56c <_printf_float+0x2dc>)
 800d2ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d2f2:	f04f 32ff 	mov.w	r2, #4294967295
 800d2f6:	f7f3 fc21 	bl	8000b3c <__aeabi_dcmpun>
 800d2fa:	bb88      	cbnz	r0, 800d360 <_printf_float+0xd0>
 800d2fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d300:	4b9a      	ldr	r3, [pc, #616]	; (800d56c <_printf_float+0x2dc>)
 800d302:	f04f 32ff 	mov.w	r2, #4294967295
 800d306:	f7f3 fbfb 	bl	8000b00 <__aeabi_dcmple>
 800d30a:	bb48      	cbnz	r0, 800d360 <_printf_float+0xd0>
 800d30c:	2200      	movs	r2, #0
 800d30e:	2300      	movs	r3, #0
 800d310:	4640      	mov	r0, r8
 800d312:	4649      	mov	r1, r9
 800d314:	f7f3 fbea 	bl	8000aec <__aeabi_dcmplt>
 800d318:	b110      	cbz	r0, 800d320 <_printf_float+0x90>
 800d31a:	232d      	movs	r3, #45	; 0x2d
 800d31c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d320:	4b93      	ldr	r3, [pc, #588]	; (800d570 <_printf_float+0x2e0>)
 800d322:	4894      	ldr	r0, [pc, #592]	; (800d574 <_printf_float+0x2e4>)
 800d324:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d328:	bf94      	ite	ls
 800d32a:	4698      	movls	r8, r3
 800d32c:	4680      	movhi	r8, r0
 800d32e:	2303      	movs	r3, #3
 800d330:	6123      	str	r3, [r4, #16]
 800d332:	9b05      	ldr	r3, [sp, #20]
 800d334:	f023 0204 	bic.w	r2, r3, #4
 800d338:	6022      	str	r2, [r4, #0]
 800d33a:	f04f 0900 	mov.w	r9, #0
 800d33e:	9700      	str	r7, [sp, #0]
 800d340:	4633      	mov	r3, r6
 800d342:	aa0b      	add	r2, sp, #44	; 0x2c
 800d344:	4621      	mov	r1, r4
 800d346:	4628      	mov	r0, r5
 800d348:	f000 f9d8 	bl	800d6fc <_printf_common>
 800d34c:	3001      	adds	r0, #1
 800d34e:	f040 8090 	bne.w	800d472 <_printf_float+0x1e2>
 800d352:	f04f 30ff 	mov.w	r0, #4294967295
 800d356:	b00d      	add	sp, #52	; 0x34
 800d358:	ecbd 8b02 	vpop	{d8}
 800d35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d360:	4642      	mov	r2, r8
 800d362:	464b      	mov	r3, r9
 800d364:	4640      	mov	r0, r8
 800d366:	4649      	mov	r1, r9
 800d368:	f7f3 fbe8 	bl	8000b3c <__aeabi_dcmpun>
 800d36c:	b140      	cbz	r0, 800d380 <_printf_float+0xf0>
 800d36e:	464b      	mov	r3, r9
 800d370:	2b00      	cmp	r3, #0
 800d372:	bfbc      	itt	lt
 800d374:	232d      	movlt	r3, #45	; 0x2d
 800d376:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d37a:	487f      	ldr	r0, [pc, #508]	; (800d578 <_printf_float+0x2e8>)
 800d37c:	4b7f      	ldr	r3, [pc, #508]	; (800d57c <_printf_float+0x2ec>)
 800d37e:	e7d1      	b.n	800d324 <_printf_float+0x94>
 800d380:	6863      	ldr	r3, [r4, #4]
 800d382:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d386:	9206      	str	r2, [sp, #24]
 800d388:	1c5a      	adds	r2, r3, #1
 800d38a:	d13f      	bne.n	800d40c <_printf_float+0x17c>
 800d38c:	2306      	movs	r3, #6
 800d38e:	6063      	str	r3, [r4, #4]
 800d390:	9b05      	ldr	r3, [sp, #20]
 800d392:	6861      	ldr	r1, [r4, #4]
 800d394:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d398:	2300      	movs	r3, #0
 800d39a:	9303      	str	r3, [sp, #12]
 800d39c:	ab0a      	add	r3, sp, #40	; 0x28
 800d39e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d3a2:	ab09      	add	r3, sp, #36	; 0x24
 800d3a4:	ec49 8b10 	vmov	d0, r8, r9
 800d3a8:	9300      	str	r3, [sp, #0]
 800d3aa:	6022      	str	r2, [r4, #0]
 800d3ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d3b0:	4628      	mov	r0, r5
 800d3b2:	f7ff fecd 	bl	800d150 <__cvt>
 800d3b6:	9b06      	ldr	r3, [sp, #24]
 800d3b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d3ba:	2b47      	cmp	r3, #71	; 0x47
 800d3bc:	4680      	mov	r8, r0
 800d3be:	d108      	bne.n	800d3d2 <_printf_float+0x142>
 800d3c0:	1cc8      	adds	r0, r1, #3
 800d3c2:	db02      	blt.n	800d3ca <_printf_float+0x13a>
 800d3c4:	6863      	ldr	r3, [r4, #4]
 800d3c6:	4299      	cmp	r1, r3
 800d3c8:	dd41      	ble.n	800d44e <_printf_float+0x1be>
 800d3ca:	f1ab 0b02 	sub.w	fp, fp, #2
 800d3ce:	fa5f fb8b 	uxtb.w	fp, fp
 800d3d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d3d6:	d820      	bhi.n	800d41a <_printf_float+0x18a>
 800d3d8:	3901      	subs	r1, #1
 800d3da:	465a      	mov	r2, fp
 800d3dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d3e0:	9109      	str	r1, [sp, #36]	; 0x24
 800d3e2:	f7ff ff17 	bl	800d214 <__exponent>
 800d3e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d3e8:	1813      	adds	r3, r2, r0
 800d3ea:	2a01      	cmp	r2, #1
 800d3ec:	4681      	mov	r9, r0
 800d3ee:	6123      	str	r3, [r4, #16]
 800d3f0:	dc02      	bgt.n	800d3f8 <_printf_float+0x168>
 800d3f2:	6822      	ldr	r2, [r4, #0]
 800d3f4:	07d2      	lsls	r2, r2, #31
 800d3f6:	d501      	bpl.n	800d3fc <_printf_float+0x16c>
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	6123      	str	r3, [r4, #16]
 800d3fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d400:	2b00      	cmp	r3, #0
 800d402:	d09c      	beq.n	800d33e <_printf_float+0xae>
 800d404:	232d      	movs	r3, #45	; 0x2d
 800d406:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d40a:	e798      	b.n	800d33e <_printf_float+0xae>
 800d40c:	9a06      	ldr	r2, [sp, #24]
 800d40e:	2a47      	cmp	r2, #71	; 0x47
 800d410:	d1be      	bne.n	800d390 <_printf_float+0x100>
 800d412:	2b00      	cmp	r3, #0
 800d414:	d1bc      	bne.n	800d390 <_printf_float+0x100>
 800d416:	2301      	movs	r3, #1
 800d418:	e7b9      	b.n	800d38e <_printf_float+0xfe>
 800d41a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d41e:	d118      	bne.n	800d452 <_printf_float+0x1c2>
 800d420:	2900      	cmp	r1, #0
 800d422:	6863      	ldr	r3, [r4, #4]
 800d424:	dd0b      	ble.n	800d43e <_printf_float+0x1ae>
 800d426:	6121      	str	r1, [r4, #16]
 800d428:	b913      	cbnz	r3, 800d430 <_printf_float+0x1a0>
 800d42a:	6822      	ldr	r2, [r4, #0]
 800d42c:	07d0      	lsls	r0, r2, #31
 800d42e:	d502      	bpl.n	800d436 <_printf_float+0x1a6>
 800d430:	3301      	adds	r3, #1
 800d432:	440b      	add	r3, r1
 800d434:	6123      	str	r3, [r4, #16]
 800d436:	65a1      	str	r1, [r4, #88]	; 0x58
 800d438:	f04f 0900 	mov.w	r9, #0
 800d43c:	e7de      	b.n	800d3fc <_printf_float+0x16c>
 800d43e:	b913      	cbnz	r3, 800d446 <_printf_float+0x1b6>
 800d440:	6822      	ldr	r2, [r4, #0]
 800d442:	07d2      	lsls	r2, r2, #31
 800d444:	d501      	bpl.n	800d44a <_printf_float+0x1ba>
 800d446:	3302      	adds	r3, #2
 800d448:	e7f4      	b.n	800d434 <_printf_float+0x1a4>
 800d44a:	2301      	movs	r3, #1
 800d44c:	e7f2      	b.n	800d434 <_printf_float+0x1a4>
 800d44e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d454:	4299      	cmp	r1, r3
 800d456:	db05      	blt.n	800d464 <_printf_float+0x1d4>
 800d458:	6823      	ldr	r3, [r4, #0]
 800d45a:	6121      	str	r1, [r4, #16]
 800d45c:	07d8      	lsls	r0, r3, #31
 800d45e:	d5ea      	bpl.n	800d436 <_printf_float+0x1a6>
 800d460:	1c4b      	adds	r3, r1, #1
 800d462:	e7e7      	b.n	800d434 <_printf_float+0x1a4>
 800d464:	2900      	cmp	r1, #0
 800d466:	bfd4      	ite	le
 800d468:	f1c1 0202 	rsble	r2, r1, #2
 800d46c:	2201      	movgt	r2, #1
 800d46e:	4413      	add	r3, r2
 800d470:	e7e0      	b.n	800d434 <_printf_float+0x1a4>
 800d472:	6823      	ldr	r3, [r4, #0]
 800d474:	055a      	lsls	r2, r3, #21
 800d476:	d407      	bmi.n	800d488 <_printf_float+0x1f8>
 800d478:	6923      	ldr	r3, [r4, #16]
 800d47a:	4642      	mov	r2, r8
 800d47c:	4631      	mov	r1, r6
 800d47e:	4628      	mov	r0, r5
 800d480:	47b8      	blx	r7
 800d482:	3001      	adds	r0, #1
 800d484:	d12c      	bne.n	800d4e0 <_printf_float+0x250>
 800d486:	e764      	b.n	800d352 <_printf_float+0xc2>
 800d488:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d48c:	f240 80e0 	bls.w	800d650 <_printf_float+0x3c0>
 800d490:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d494:	2200      	movs	r2, #0
 800d496:	2300      	movs	r3, #0
 800d498:	f7f3 fb1e 	bl	8000ad8 <__aeabi_dcmpeq>
 800d49c:	2800      	cmp	r0, #0
 800d49e:	d034      	beq.n	800d50a <_printf_float+0x27a>
 800d4a0:	4a37      	ldr	r2, [pc, #220]	; (800d580 <_printf_float+0x2f0>)
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	4631      	mov	r1, r6
 800d4a6:	4628      	mov	r0, r5
 800d4a8:	47b8      	blx	r7
 800d4aa:	3001      	adds	r0, #1
 800d4ac:	f43f af51 	beq.w	800d352 <_printf_float+0xc2>
 800d4b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	db02      	blt.n	800d4be <_printf_float+0x22e>
 800d4b8:	6823      	ldr	r3, [r4, #0]
 800d4ba:	07d8      	lsls	r0, r3, #31
 800d4bc:	d510      	bpl.n	800d4e0 <_printf_float+0x250>
 800d4be:	ee18 3a10 	vmov	r3, s16
 800d4c2:	4652      	mov	r2, sl
 800d4c4:	4631      	mov	r1, r6
 800d4c6:	4628      	mov	r0, r5
 800d4c8:	47b8      	blx	r7
 800d4ca:	3001      	adds	r0, #1
 800d4cc:	f43f af41 	beq.w	800d352 <_printf_float+0xc2>
 800d4d0:	f04f 0800 	mov.w	r8, #0
 800d4d4:	f104 091a 	add.w	r9, r4, #26
 800d4d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4da:	3b01      	subs	r3, #1
 800d4dc:	4543      	cmp	r3, r8
 800d4de:	dc09      	bgt.n	800d4f4 <_printf_float+0x264>
 800d4e0:	6823      	ldr	r3, [r4, #0]
 800d4e2:	079b      	lsls	r3, r3, #30
 800d4e4:	f100 8105 	bmi.w	800d6f2 <_printf_float+0x462>
 800d4e8:	68e0      	ldr	r0, [r4, #12]
 800d4ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4ec:	4298      	cmp	r0, r3
 800d4ee:	bfb8      	it	lt
 800d4f0:	4618      	movlt	r0, r3
 800d4f2:	e730      	b.n	800d356 <_printf_float+0xc6>
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	464a      	mov	r2, r9
 800d4f8:	4631      	mov	r1, r6
 800d4fa:	4628      	mov	r0, r5
 800d4fc:	47b8      	blx	r7
 800d4fe:	3001      	adds	r0, #1
 800d500:	f43f af27 	beq.w	800d352 <_printf_float+0xc2>
 800d504:	f108 0801 	add.w	r8, r8, #1
 800d508:	e7e6      	b.n	800d4d8 <_printf_float+0x248>
 800d50a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	dc39      	bgt.n	800d584 <_printf_float+0x2f4>
 800d510:	4a1b      	ldr	r2, [pc, #108]	; (800d580 <_printf_float+0x2f0>)
 800d512:	2301      	movs	r3, #1
 800d514:	4631      	mov	r1, r6
 800d516:	4628      	mov	r0, r5
 800d518:	47b8      	blx	r7
 800d51a:	3001      	adds	r0, #1
 800d51c:	f43f af19 	beq.w	800d352 <_printf_float+0xc2>
 800d520:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d524:	4313      	orrs	r3, r2
 800d526:	d102      	bne.n	800d52e <_printf_float+0x29e>
 800d528:	6823      	ldr	r3, [r4, #0]
 800d52a:	07d9      	lsls	r1, r3, #31
 800d52c:	d5d8      	bpl.n	800d4e0 <_printf_float+0x250>
 800d52e:	ee18 3a10 	vmov	r3, s16
 800d532:	4652      	mov	r2, sl
 800d534:	4631      	mov	r1, r6
 800d536:	4628      	mov	r0, r5
 800d538:	47b8      	blx	r7
 800d53a:	3001      	adds	r0, #1
 800d53c:	f43f af09 	beq.w	800d352 <_printf_float+0xc2>
 800d540:	f04f 0900 	mov.w	r9, #0
 800d544:	f104 0a1a 	add.w	sl, r4, #26
 800d548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d54a:	425b      	negs	r3, r3
 800d54c:	454b      	cmp	r3, r9
 800d54e:	dc01      	bgt.n	800d554 <_printf_float+0x2c4>
 800d550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d552:	e792      	b.n	800d47a <_printf_float+0x1ea>
 800d554:	2301      	movs	r3, #1
 800d556:	4652      	mov	r2, sl
 800d558:	4631      	mov	r1, r6
 800d55a:	4628      	mov	r0, r5
 800d55c:	47b8      	blx	r7
 800d55e:	3001      	adds	r0, #1
 800d560:	f43f aef7 	beq.w	800d352 <_printf_float+0xc2>
 800d564:	f109 0901 	add.w	r9, r9, #1
 800d568:	e7ee      	b.n	800d548 <_printf_float+0x2b8>
 800d56a:	bf00      	nop
 800d56c:	7fefffff 	.word	0x7fefffff
 800d570:	0800fc2c 	.word	0x0800fc2c
 800d574:	0800fc30 	.word	0x0800fc30
 800d578:	0800fc38 	.word	0x0800fc38
 800d57c:	0800fc34 	.word	0x0800fc34
 800d580:	0800fc3c 	.word	0x0800fc3c
 800d584:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d586:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d588:	429a      	cmp	r2, r3
 800d58a:	bfa8      	it	ge
 800d58c:	461a      	movge	r2, r3
 800d58e:	2a00      	cmp	r2, #0
 800d590:	4691      	mov	r9, r2
 800d592:	dc37      	bgt.n	800d604 <_printf_float+0x374>
 800d594:	f04f 0b00 	mov.w	fp, #0
 800d598:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d59c:	f104 021a 	add.w	r2, r4, #26
 800d5a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d5a2:	9305      	str	r3, [sp, #20]
 800d5a4:	eba3 0309 	sub.w	r3, r3, r9
 800d5a8:	455b      	cmp	r3, fp
 800d5aa:	dc33      	bgt.n	800d614 <_printf_float+0x384>
 800d5ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d5b0:	429a      	cmp	r2, r3
 800d5b2:	db3b      	blt.n	800d62c <_printf_float+0x39c>
 800d5b4:	6823      	ldr	r3, [r4, #0]
 800d5b6:	07da      	lsls	r2, r3, #31
 800d5b8:	d438      	bmi.n	800d62c <_printf_float+0x39c>
 800d5ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5bc:	9b05      	ldr	r3, [sp, #20]
 800d5be:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d5c0:	1ad3      	subs	r3, r2, r3
 800d5c2:	eba2 0901 	sub.w	r9, r2, r1
 800d5c6:	4599      	cmp	r9, r3
 800d5c8:	bfa8      	it	ge
 800d5ca:	4699      	movge	r9, r3
 800d5cc:	f1b9 0f00 	cmp.w	r9, #0
 800d5d0:	dc35      	bgt.n	800d63e <_printf_float+0x3ae>
 800d5d2:	f04f 0800 	mov.w	r8, #0
 800d5d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d5da:	f104 0a1a 	add.w	sl, r4, #26
 800d5de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d5e2:	1a9b      	subs	r3, r3, r2
 800d5e4:	eba3 0309 	sub.w	r3, r3, r9
 800d5e8:	4543      	cmp	r3, r8
 800d5ea:	f77f af79 	ble.w	800d4e0 <_printf_float+0x250>
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	4652      	mov	r2, sl
 800d5f2:	4631      	mov	r1, r6
 800d5f4:	4628      	mov	r0, r5
 800d5f6:	47b8      	blx	r7
 800d5f8:	3001      	adds	r0, #1
 800d5fa:	f43f aeaa 	beq.w	800d352 <_printf_float+0xc2>
 800d5fe:	f108 0801 	add.w	r8, r8, #1
 800d602:	e7ec      	b.n	800d5de <_printf_float+0x34e>
 800d604:	4613      	mov	r3, r2
 800d606:	4631      	mov	r1, r6
 800d608:	4642      	mov	r2, r8
 800d60a:	4628      	mov	r0, r5
 800d60c:	47b8      	blx	r7
 800d60e:	3001      	adds	r0, #1
 800d610:	d1c0      	bne.n	800d594 <_printf_float+0x304>
 800d612:	e69e      	b.n	800d352 <_printf_float+0xc2>
 800d614:	2301      	movs	r3, #1
 800d616:	4631      	mov	r1, r6
 800d618:	4628      	mov	r0, r5
 800d61a:	9205      	str	r2, [sp, #20]
 800d61c:	47b8      	blx	r7
 800d61e:	3001      	adds	r0, #1
 800d620:	f43f ae97 	beq.w	800d352 <_printf_float+0xc2>
 800d624:	9a05      	ldr	r2, [sp, #20]
 800d626:	f10b 0b01 	add.w	fp, fp, #1
 800d62a:	e7b9      	b.n	800d5a0 <_printf_float+0x310>
 800d62c:	ee18 3a10 	vmov	r3, s16
 800d630:	4652      	mov	r2, sl
 800d632:	4631      	mov	r1, r6
 800d634:	4628      	mov	r0, r5
 800d636:	47b8      	blx	r7
 800d638:	3001      	adds	r0, #1
 800d63a:	d1be      	bne.n	800d5ba <_printf_float+0x32a>
 800d63c:	e689      	b.n	800d352 <_printf_float+0xc2>
 800d63e:	9a05      	ldr	r2, [sp, #20]
 800d640:	464b      	mov	r3, r9
 800d642:	4442      	add	r2, r8
 800d644:	4631      	mov	r1, r6
 800d646:	4628      	mov	r0, r5
 800d648:	47b8      	blx	r7
 800d64a:	3001      	adds	r0, #1
 800d64c:	d1c1      	bne.n	800d5d2 <_printf_float+0x342>
 800d64e:	e680      	b.n	800d352 <_printf_float+0xc2>
 800d650:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d652:	2a01      	cmp	r2, #1
 800d654:	dc01      	bgt.n	800d65a <_printf_float+0x3ca>
 800d656:	07db      	lsls	r3, r3, #31
 800d658:	d538      	bpl.n	800d6cc <_printf_float+0x43c>
 800d65a:	2301      	movs	r3, #1
 800d65c:	4642      	mov	r2, r8
 800d65e:	4631      	mov	r1, r6
 800d660:	4628      	mov	r0, r5
 800d662:	47b8      	blx	r7
 800d664:	3001      	adds	r0, #1
 800d666:	f43f ae74 	beq.w	800d352 <_printf_float+0xc2>
 800d66a:	ee18 3a10 	vmov	r3, s16
 800d66e:	4652      	mov	r2, sl
 800d670:	4631      	mov	r1, r6
 800d672:	4628      	mov	r0, r5
 800d674:	47b8      	blx	r7
 800d676:	3001      	adds	r0, #1
 800d678:	f43f ae6b 	beq.w	800d352 <_printf_float+0xc2>
 800d67c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d680:	2200      	movs	r2, #0
 800d682:	2300      	movs	r3, #0
 800d684:	f7f3 fa28 	bl	8000ad8 <__aeabi_dcmpeq>
 800d688:	b9d8      	cbnz	r0, 800d6c2 <_printf_float+0x432>
 800d68a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d68c:	f108 0201 	add.w	r2, r8, #1
 800d690:	3b01      	subs	r3, #1
 800d692:	4631      	mov	r1, r6
 800d694:	4628      	mov	r0, r5
 800d696:	47b8      	blx	r7
 800d698:	3001      	adds	r0, #1
 800d69a:	d10e      	bne.n	800d6ba <_printf_float+0x42a>
 800d69c:	e659      	b.n	800d352 <_printf_float+0xc2>
 800d69e:	2301      	movs	r3, #1
 800d6a0:	4652      	mov	r2, sl
 800d6a2:	4631      	mov	r1, r6
 800d6a4:	4628      	mov	r0, r5
 800d6a6:	47b8      	blx	r7
 800d6a8:	3001      	adds	r0, #1
 800d6aa:	f43f ae52 	beq.w	800d352 <_printf_float+0xc2>
 800d6ae:	f108 0801 	add.w	r8, r8, #1
 800d6b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6b4:	3b01      	subs	r3, #1
 800d6b6:	4543      	cmp	r3, r8
 800d6b8:	dcf1      	bgt.n	800d69e <_printf_float+0x40e>
 800d6ba:	464b      	mov	r3, r9
 800d6bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d6c0:	e6dc      	b.n	800d47c <_printf_float+0x1ec>
 800d6c2:	f04f 0800 	mov.w	r8, #0
 800d6c6:	f104 0a1a 	add.w	sl, r4, #26
 800d6ca:	e7f2      	b.n	800d6b2 <_printf_float+0x422>
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	4642      	mov	r2, r8
 800d6d0:	e7df      	b.n	800d692 <_printf_float+0x402>
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	464a      	mov	r2, r9
 800d6d6:	4631      	mov	r1, r6
 800d6d8:	4628      	mov	r0, r5
 800d6da:	47b8      	blx	r7
 800d6dc:	3001      	adds	r0, #1
 800d6de:	f43f ae38 	beq.w	800d352 <_printf_float+0xc2>
 800d6e2:	f108 0801 	add.w	r8, r8, #1
 800d6e6:	68e3      	ldr	r3, [r4, #12]
 800d6e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d6ea:	1a5b      	subs	r3, r3, r1
 800d6ec:	4543      	cmp	r3, r8
 800d6ee:	dcf0      	bgt.n	800d6d2 <_printf_float+0x442>
 800d6f0:	e6fa      	b.n	800d4e8 <_printf_float+0x258>
 800d6f2:	f04f 0800 	mov.w	r8, #0
 800d6f6:	f104 0919 	add.w	r9, r4, #25
 800d6fa:	e7f4      	b.n	800d6e6 <_printf_float+0x456>

0800d6fc <_printf_common>:
 800d6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d700:	4616      	mov	r6, r2
 800d702:	4699      	mov	r9, r3
 800d704:	688a      	ldr	r2, [r1, #8]
 800d706:	690b      	ldr	r3, [r1, #16]
 800d708:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d70c:	4293      	cmp	r3, r2
 800d70e:	bfb8      	it	lt
 800d710:	4613      	movlt	r3, r2
 800d712:	6033      	str	r3, [r6, #0]
 800d714:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d718:	4607      	mov	r7, r0
 800d71a:	460c      	mov	r4, r1
 800d71c:	b10a      	cbz	r2, 800d722 <_printf_common+0x26>
 800d71e:	3301      	adds	r3, #1
 800d720:	6033      	str	r3, [r6, #0]
 800d722:	6823      	ldr	r3, [r4, #0]
 800d724:	0699      	lsls	r1, r3, #26
 800d726:	bf42      	ittt	mi
 800d728:	6833      	ldrmi	r3, [r6, #0]
 800d72a:	3302      	addmi	r3, #2
 800d72c:	6033      	strmi	r3, [r6, #0]
 800d72e:	6825      	ldr	r5, [r4, #0]
 800d730:	f015 0506 	ands.w	r5, r5, #6
 800d734:	d106      	bne.n	800d744 <_printf_common+0x48>
 800d736:	f104 0a19 	add.w	sl, r4, #25
 800d73a:	68e3      	ldr	r3, [r4, #12]
 800d73c:	6832      	ldr	r2, [r6, #0]
 800d73e:	1a9b      	subs	r3, r3, r2
 800d740:	42ab      	cmp	r3, r5
 800d742:	dc26      	bgt.n	800d792 <_printf_common+0x96>
 800d744:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d748:	1e13      	subs	r3, r2, #0
 800d74a:	6822      	ldr	r2, [r4, #0]
 800d74c:	bf18      	it	ne
 800d74e:	2301      	movne	r3, #1
 800d750:	0692      	lsls	r2, r2, #26
 800d752:	d42b      	bmi.n	800d7ac <_printf_common+0xb0>
 800d754:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d758:	4649      	mov	r1, r9
 800d75a:	4638      	mov	r0, r7
 800d75c:	47c0      	blx	r8
 800d75e:	3001      	adds	r0, #1
 800d760:	d01e      	beq.n	800d7a0 <_printf_common+0xa4>
 800d762:	6823      	ldr	r3, [r4, #0]
 800d764:	68e5      	ldr	r5, [r4, #12]
 800d766:	6832      	ldr	r2, [r6, #0]
 800d768:	f003 0306 	and.w	r3, r3, #6
 800d76c:	2b04      	cmp	r3, #4
 800d76e:	bf08      	it	eq
 800d770:	1aad      	subeq	r5, r5, r2
 800d772:	68a3      	ldr	r3, [r4, #8]
 800d774:	6922      	ldr	r2, [r4, #16]
 800d776:	bf0c      	ite	eq
 800d778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d77c:	2500      	movne	r5, #0
 800d77e:	4293      	cmp	r3, r2
 800d780:	bfc4      	itt	gt
 800d782:	1a9b      	subgt	r3, r3, r2
 800d784:	18ed      	addgt	r5, r5, r3
 800d786:	2600      	movs	r6, #0
 800d788:	341a      	adds	r4, #26
 800d78a:	42b5      	cmp	r5, r6
 800d78c:	d11a      	bne.n	800d7c4 <_printf_common+0xc8>
 800d78e:	2000      	movs	r0, #0
 800d790:	e008      	b.n	800d7a4 <_printf_common+0xa8>
 800d792:	2301      	movs	r3, #1
 800d794:	4652      	mov	r2, sl
 800d796:	4649      	mov	r1, r9
 800d798:	4638      	mov	r0, r7
 800d79a:	47c0      	blx	r8
 800d79c:	3001      	adds	r0, #1
 800d79e:	d103      	bne.n	800d7a8 <_printf_common+0xac>
 800d7a0:	f04f 30ff 	mov.w	r0, #4294967295
 800d7a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7a8:	3501      	adds	r5, #1
 800d7aa:	e7c6      	b.n	800d73a <_printf_common+0x3e>
 800d7ac:	18e1      	adds	r1, r4, r3
 800d7ae:	1c5a      	adds	r2, r3, #1
 800d7b0:	2030      	movs	r0, #48	; 0x30
 800d7b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d7b6:	4422      	add	r2, r4
 800d7b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d7bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d7c0:	3302      	adds	r3, #2
 800d7c2:	e7c7      	b.n	800d754 <_printf_common+0x58>
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	4622      	mov	r2, r4
 800d7c8:	4649      	mov	r1, r9
 800d7ca:	4638      	mov	r0, r7
 800d7cc:	47c0      	blx	r8
 800d7ce:	3001      	adds	r0, #1
 800d7d0:	d0e6      	beq.n	800d7a0 <_printf_common+0xa4>
 800d7d2:	3601      	adds	r6, #1
 800d7d4:	e7d9      	b.n	800d78a <_printf_common+0x8e>
	...

0800d7d8 <_printf_i>:
 800d7d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d7dc:	460c      	mov	r4, r1
 800d7de:	4691      	mov	r9, r2
 800d7e0:	7e27      	ldrb	r7, [r4, #24]
 800d7e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d7e4:	2f78      	cmp	r7, #120	; 0x78
 800d7e6:	4680      	mov	r8, r0
 800d7e8:	469a      	mov	sl, r3
 800d7ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d7ee:	d807      	bhi.n	800d800 <_printf_i+0x28>
 800d7f0:	2f62      	cmp	r7, #98	; 0x62
 800d7f2:	d80a      	bhi.n	800d80a <_printf_i+0x32>
 800d7f4:	2f00      	cmp	r7, #0
 800d7f6:	f000 80d8 	beq.w	800d9aa <_printf_i+0x1d2>
 800d7fa:	2f58      	cmp	r7, #88	; 0x58
 800d7fc:	f000 80a3 	beq.w	800d946 <_printf_i+0x16e>
 800d800:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d804:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d808:	e03a      	b.n	800d880 <_printf_i+0xa8>
 800d80a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d80e:	2b15      	cmp	r3, #21
 800d810:	d8f6      	bhi.n	800d800 <_printf_i+0x28>
 800d812:	a001      	add	r0, pc, #4	; (adr r0, 800d818 <_printf_i+0x40>)
 800d814:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d818:	0800d871 	.word	0x0800d871
 800d81c:	0800d885 	.word	0x0800d885
 800d820:	0800d801 	.word	0x0800d801
 800d824:	0800d801 	.word	0x0800d801
 800d828:	0800d801 	.word	0x0800d801
 800d82c:	0800d801 	.word	0x0800d801
 800d830:	0800d885 	.word	0x0800d885
 800d834:	0800d801 	.word	0x0800d801
 800d838:	0800d801 	.word	0x0800d801
 800d83c:	0800d801 	.word	0x0800d801
 800d840:	0800d801 	.word	0x0800d801
 800d844:	0800d991 	.word	0x0800d991
 800d848:	0800d8b5 	.word	0x0800d8b5
 800d84c:	0800d973 	.word	0x0800d973
 800d850:	0800d801 	.word	0x0800d801
 800d854:	0800d801 	.word	0x0800d801
 800d858:	0800d9b3 	.word	0x0800d9b3
 800d85c:	0800d801 	.word	0x0800d801
 800d860:	0800d8b5 	.word	0x0800d8b5
 800d864:	0800d801 	.word	0x0800d801
 800d868:	0800d801 	.word	0x0800d801
 800d86c:	0800d97b 	.word	0x0800d97b
 800d870:	680b      	ldr	r3, [r1, #0]
 800d872:	1d1a      	adds	r2, r3, #4
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	600a      	str	r2, [r1, #0]
 800d878:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d87c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d880:	2301      	movs	r3, #1
 800d882:	e0a3      	b.n	800d9cc <_printf_i+0x1f4>
 800d884:	6825      	ldr	r5, [r4, #0]
 800d886:	6808      	ldr	r0, [r1, #0]
 800d888:	062e      	lsls	r6, r5, #24
 800d88a:	f100 0304 	add.w	r3, r0, #4
 800d88e:	d50a      	bpl.n	800d8a6 <_printf_i+0xce>
 800d890:	6805      	ldr	r5, [r0, #0]
 800d892:	600b      	str	r3, [r1, #0]
 800d894:	2d00      	cmp	r5, #0
 800d896:	da03      	bge.n	800d8a0 <_printf_i+0xc8>
 800d898:	232d      	movs	r3, #45	; 0x2d
 800d89a:	426d      	negs	r5, r5
 800d89c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8a0:	485e      	ldr	r0, [pc, #376]	; (800da1c <_printf_i+0x244>)
 800d8a2:	230a      	movs	r3, #10
 800d8a4:	e019      	b.n	800d8da <_printf_i+0x102>
 800d8a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d8aa:	6805      	ldr	r5, [r0, #0]
 800d8ac:	600b      	str	r3, [r1, #0]
 800d8ae:	bf18      	it	ne
 800d8b0:	b22d      	sxthne	r5, r5
 800d8b2:	e7ef      	b.n	800d894 <_printf_i+0xbc>
 800d8b4:	680b      	ldr	r3, [r1, #0]
 800d8b6:	6825      	ldr	r5, [r4, #0]
 800d8b8:	1d18      	adds	r0, r3, #4
 800d8ba:	6008      	str	r0, [r1, #0]
 800d8bc:	0628      	lsls	r0, r5, #24
 800d8be:	d501      	bpl.n	800d8c4 <_printf_i+0xec>
 800d8c0:	681d      	ldr	r5, [r3, #0]
 800d8c2:	e002      	b.n	800d8ca <_printf_i+0xf2>
 800d8c4:	0669      	lsls	r1, r5, #25
 800d8c6:	d5fb      	bpl.n	800d8c0 <_printf_i+0xe8>
 800d8c8:	881d      	ldrh	r5, [r3, #0]
 800d8ca:	4854      	ldr	r0, [pc, #336]	; (800da1c <_printf_i+0x244>)
 800d8cc:	2f6f      	cmp	r7, #111	; 0x6f
 800d8ce:	bf0c      	ite	eq
 800d8d0:	2308      	moveq	r3, #8
 800d8d2:	230a      	movne	r3, #10
 800d8d4:	2100      	movs	r1, #0
 800d8d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d8da:	6866      	ldr	r6, [r4, #4]
 800d8dc:	60a6      	str	r6, [r4, #8]
 800d8de:	2e00      	cmp	r6, #0
 800d8e0:	bfa2      	ittt	ge
 800d8e2:	6821      	ldrge	r1, [r4, #0]
 800d8e4:	f021 0104 	bicge.w	r1, r1, #4
 800d8e8:	6021      	strge	r1, [r4, #0]
 800d8ea:	b90d      	cbnz	r5, 800d8f0 <_printf_i+0x118>
 800d8ec:	2e00      	cmp	r6, #0
 800d8ee:	d04d      	beq.n	800d98c <_printf_i+0x1b4>
 800d8f0:	4616      	mov	r6, r2
 800d8f2:	fbb5 f1f3 	udiv	r1, r5, r3
 800d8f6:	fb03 5711 	mls	r7, r3, r1, r5
 800d8fa:	5dc7      	ldrb	r7, [r0, r7]
 800d8fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d900:	462f      	mov	r7, r5
 800d902:	42bb      	cmp	r3, r7
 800d904:	460d      	mov	r5, r1
 800d906:	d9f4      	bls.n	800d8f2 <_printf_i+0x11a>
 800d908:	2b08      	cmp	r3, #8
 800d90a:	d10b      	bne.n	800d924 <_printf_i+0x14c>
 800d90c:	6823      	ldr	r3, [r4, #0]
 800d90e:	07df      	lsls	r7, r3, #31
 800d910:	d508      	bpl.n	800d924 <_printf_i+0x14c>
 800d912:	6923      	ldr	r3, [r4, #16]
 800d914:	6861      	ldr	r1, [r4, #4]
 800d916:	4299      	cmp	r1, r3
 800d918:	bfde      	ittt	le
 800d91a:	2330      	movle	r3, #48	; 0x30
 800d91c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d920:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d924:	1b92      	subs	r2, r2, r6
 800d926:	6122      	str	r2, [r4, #16]
 800d928:	f8cd a000 	str.w	sl, [sp]
 800d92c:	464b      	mov	r3, r9
 800d92e:	aa03      	add	r2, sp, #12
 800d930:	4621      	mov	r1, r4
 800d932:	4640      	mov	r0, r8
 800d934:	f7ff fee2 	bl	800d6fc <_printf_common>
 800d938:	3001      	adds	r0, #1
 800d93a:	d14c      	bne.n	800d9d6 <_printf_i+0x1fe>
 800d93c:	f04f 30ff 	mov.w	r0, #4294967295
 800d940:	b004      	add	sp, #16
 800d942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d946:	4835      	ldr	r0, [pc, #212]	; (800da1c <_printf_i+0x244>)
 800d948:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d94c:	6823      	ldr	r3, [r4, #0]
 800d94e:	680e      	ldr	r6, [r1, #0]
 800d950:	061f      	lsls	r7, r3, #24
 800d952:	f856 5b04 	ldr.w	r5, [r6], #4
 800d956:	600e      	str	r6, [r1, #0]
 800d958:	d514      	bpl.n	800d984 <_printf_i+0x1ac>
 800d95a:	07d9      	lsls	r1, r3, #31
 800d95c:	bf44      	itt	mi
 800d95e:	f043 0320 	orrmi.w	r3, r3, #32
 800d962:	6023      	strmi	r3, [r4, #0]
 800d964:	b91d      	cbnz	r5, 800d96e <_printf_i+0x196>
 800d966:	6823      	ldr	r3, [r4, #0]
 800d968:	f023 0320 	bic.w	r3, r3, #32
 800d96c:	6023      	str	r3, [r4, #0]
 800d96e:	2310      	movs	r3, #16
 800d970:	e7b0      	b.n	800d8d4 <_printf_i+0xfc>
 800d972:	6823      	ldr	r3, [r4, #0]
 800d974:	f043 0320 	orr.w	r3, r3, #32
 800d978:	6023      	str	r3, [r4, #0]
 800d97a:	2378      	movs	r3, #120	; 0x78
 800d97c:	4828      	ldr	r0, [pc, #160]	; (800da20 <_printf_i+0x248>)
 800d97e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d982:	e7e3      	b.n	800d94c <_printf_i+0x174>
 800d984:	065e      	lsls	r6, r3, #25
 800d986:	bf48      	it	mi
 800d988:	b2ad      	uxthmi	r5, r5
 800d98a:	e7e6      	b.n	800d95a <_printf_i+0x182>
 800d98c:	4616      	mov	r6, r2
 800d98e:	e7bb      	b.n	800d908 <_printf_i+0x130>
 800d990:	680b      	ldr	r3, [r1, #0]
 800d992:	6826      	ldr	r6, [r4, #0]
 800d994:	6960      	ldr	r0, [r4, #20]
 800d996:	1d1d      	adds	r5, r3, #4
 800d998:	600d      	str	r5, [r1, #0]
 800d99a:	0635      	lsls	r5, r6, #24
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	d501      	bpl.n	800d9a4 <_printf_i+0x1cc>
 800d9a0:	6018      	str	r0, [r3, #0]
 800d9a2:	e002      	b.n	800d9aa <_printf_i+0x1d2>
 800d9a4:	0671      	lsls	r1, r6, #25
 800d9a6:	d5fb      	bpl.n	800d9a0 <_printf_i+0x1c8>
 800d9a8:	8018      	strh	r0, [r3, #0]
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	6123      	str	r3, [r4, #16]
 800d9ae:	4616      	mov	r6, r2
 800d9b0:	e7ba      	b.n	800d928 <_printf_i+0x150>
 800d9b2:	680b      	ldr	r3, [r1, #0]
 800d9b4:	1d1a      	adds	r2, r3, #4
 800d9b6:	600a      	str	r2, [r1, #0]
 800d9b8:	681e      	ldr	r6, [r3, #0]
 800d9ba:	6862      	ldr	r2, [r4, #4]
 800d9bc:	2100      	movs	r1, #0
 800d9be:	4630      	mov	r0, r6
 800d9c0:	f7f2 fc16 	bl	80001f0 <memchr>
 800d9c4:	b108      	cbz	r0, 800d9ca <_printf_i+0x1f2>
 800d9c6:	1b80      	subs	r0, r0, r6
 800d9c8:	6060      	str	r0, [r4, #4]
 800d9ca:	6863      	ldr	r3, [r4, #4]
 800d9cc:	6123      	str	r3, [r4, #16]
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9d4:	e7a8      	b.n	800d928 <_printf_i+0x150>
 800d9d6:	6923      	ldr	r3, [r4, #16]
 800d9d8:	4632      	mov	r2, r6
 800d9da:	4649      	mov	r1, r9
 800d9dc:	4640      	mov	r0, r8
 800d9de:	47d0      	blx	sl
 800d9e0:	3001      	adds	r0, #1
 800d9e2:	d0ab      	beq.n	800d93c <_printf_i+0x164>
 800d9e4:	6823      	ldr	r3, [r4, #0]
 800d9e6:	079b      	lsls	r3, r3, #30
 800d9e8:	d413      	bmi.n	800da12 <_printf_i+0x23a>
 800d9ea:	68e0      	ldr	r0, [r4, #12]
 800d9ec:	9b03      	ldr	r3, [sp, #12]
 800d9ee:	4298      	cmp	r0, r3
 800d9f0:	bfb8      	it	lt
 800d9f2:	4618      	movlt	r0, r3
 800d9f4:	e7a4      	b.n	800d940 <_printf_i+0x168>
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	4632      	mov	r2, r6
 800d9fa:	4649      	mov	r1, r9
 800d9fc:	4640      	mov	r0, r8
 800d9fe:	47d0      	blx	sl
 800da00:	3001      	adds	r0, #1
 800da02:	d09b      	beq.n	800d93c <_printf_i+0x164>
 800da04:	3501      	adds	r5, #1
 800da06:	68e3      	ldr	r3, [r4, #12]
 800da08:	9903      	ldr	r1, [sp, #12]
 800da0a:	1a5b      	subs	r3, r3, r1
 800da0c:	42ab      	cmp	r3, r5
 800da0e:	dcf2      	bgt.n	800d9f6 <_printf_i+0x21e>
 800da10:	e7eb      	b.n	800d9ea <_printf_i+0x212>
 800da12:	2500      	movs	r5, #0
 800da14:	f104 0619 	add.w	r6, r4, #25
 800da18:	e7f5      	b.n	800da06 <_printf_i+0x22e>
 800da1a:	bf00      	nop
 800da1c:	0800fc3e 	.word	0x0800fc3e
 800da20:	0800fc4f 	.word	0x0800fc4f

0800da24 <quorem>:
 800da24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da28:	6903      	ldr	r3, [r0, #16]
 800da2a:	690c      	ldr	r4, [r1, #16]
 800da2c:	42a3      	cmp	r3, r4
 800da2e:	4607      	mov	r7, r0
 800da30:	f2c0 8081 	blt.w	800db36 <quorem+0x112>
 800da34:	3c01      	subs	r4, #1
 800da36:	f101 0814 	add.w	r8, r1, #20
 800da3a:	f100 0514 	add.w	r5, r0, #20
 800da3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800da42:	9301      	str	r3, [sp, #4]
 800da44:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800da48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800da4c:	3301      	adds	r3, #1
 800da4e:	429a      	cmp	r2, r3
 800da50:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800da54:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800da58:	fbb2 f6f3 	udiv	r6, r2, r3
 800da5c:	d331      	bcc.n	800dac2 <quorem+0x9e>
 800da5e:	f04f 0e00 	mov.w	lr, #0
 800da62:	4640      	mov	r0, r8
 800da64:	46ac      	mov	ip, r5
 800da66:	46f2      	mov	sl, lr
 800da68:	f850 2b04 	ldr.w	r2, [r0], #4
 800da6c:	b293      	uxth	r3, r2
 800da6e:	fb06 e303 	mla	r3, r6, r3, lr
 800da72:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800da76:	b29b      	uxth	r3, r3
 800da78:	ebaa 0303 	sub.w	r3, sl, r3
 800da7c:	0c12      	lsrs	r2, r2, #16
 800da7e:	f8dc a000 	ldr.w	sl, [ip]
 800da82:	fb06 e202 	mla	r2, r6, r2, lr
 800da86:	fa13 f38a 	uxtah	r3, r3, sl
 800da8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800da8e:	fa1f fa82 	uxth.w	sl, r2
 800da92:	f8dc 2000 	ldr.w	r2, [ip]
 800da96:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800da9a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800da9e:	b29b      	uxth	r3, r3
 800daa0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800daa4:	4581      	cmp	r9, r0
 800daa6:	f84c 3b04 	str.w	r3, [ip], #4
 800daaa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800daae:	d2db      	bcs.n	800da68 <quorem+0x44>
 800dab0:	f855 300b 	ldr.w	r3, [r5, fp]
 800dab4:	b92b      	cbnz	r3, 800dac2 <quorem+0x9e>
 800dab6:	9b01      	ldr	r3, [sp, #4]
 800dab8:	3b04      	subs	r3, #4
 800daba:	429d      	cmp	r5, r3
 800dabc:	461a      	mov	r2, r3
 800dabe:	d32e      	bcc.n	800db1e <quorem+0xfa>
 800dac0:	613c      	str	r4, [r7, #16]
 800dac2:	4638      	mov	r0, r7
 800dac4:	f001 f8c0 	bl	800ec48 <__mcmp>
 800dac8:	2800      	cmp	r0, #0
 800daca:	db24      	blt.n	800db16 <quorem+0xf2>
 800dacc:	3601      	adds	r6, #1
 800dace:	4628      	mov	r0, r5
 800dad0:	f04f 0c00 	mov.w	ip, #0
 800dad4:	f858 2b04 	ldr.w	r2, [r8], #4
 800dad8:	f8d0 e000 	ldr.w	lr, [r0]
 800dadc:	b293      	uxth	r3, r2
 800dade:	ebac 0303 	sub.w	r3, ip, r3
 800dae2:	0c12      	lsrs	r2, r2, #16
 800dae4:	fa13 f38e 	uxtah	r3, r3, lr
 800dae8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800daec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800daf0:	b29b      	uxth	r3, r3
 800daf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800daf6:	45c1      	cmp	r9, r8
 800daf8:	f840 3b04 	str.w	r3, [r0], #4
 800dafc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800db00:	d2e8      	bcs.n	800dad4 <quorem+0xb0>
 800db02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800db06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800db0a:	b922      	cbnz	r2, 800db16 <quorem+0xf2>
 800db0c:	3b04      	subs	r3, #4
 800db0e:	429d      	cmp	r5, r3
 800db10:	461a      	mov	r2, r3
 800db12:	d30a      	bcc.n	800db2a <quorem+0x106>
 800db14:	613c      	str	r4, [r7, #16]
 800db16:	4630      	mov	r0, r6
 800db18:	b003      	add	sp, #12
 800db1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db1e:	6812      	ldr	r2, [r2, #0]
 800db20:	3b04      	subs	r3, #4
 800db22:	2a00      	cmp	r2, #0
 800db24:	d1cc      	bne.n	800dac0 <quorem+0x9c>
 800db26:	3c01      	subs	r4, #1
 800db28:	e7c7      	b.n	800daba <quorem+0x96>
 800db2a:	6812      	ldr	r2, [r2, #0]
 800db2c:	3b04      	subs	r3, #4
 800db2e:	2a00      	cmp	r2, #0
 800db30:	d1f0      	bne.n	800db14 <quorem+0xf0>
 800db32:	3c01      	subs	r4, #1
 800db34:	e7eb      	b.n	800db0e <quorem+0xea>
 800db36:	2000      	movs	r0, #0
 800db38:	e7ee      	b.n	800db18 <quorem+0xf4>
 800db3a:	0000      	movs	r0, r0
 800db3c:	0000      	movs	r0, r0
	...

0800db40 <_dtoa_r>:
 800db40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db44:	ed2d 8b02 	vpush	{d8}
 800db48:	ec57 6b10 	vmov	r6, r7, d0
 800db4c:	b095      	sub	sp, #84	; 0x54
 800db4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800db50:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800db54:	9105      	str	r1, [sp, #20]
 800db56:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800db5a:	4604      	mov	r4, r0
 800db5c:	9209      	str	r2, [sp, #36]	; 0x24
 800db5e:	930f      	str	r3, [sp, #60]	; 0x3c
 800db60:	b975      	cbnz	r5, 800db80 <_dtoa_r+0x40>
 800db62:	2010      	movs	r0, #16
 800db64:	f000 fddc 	bl	800e720 <malloc>
 800db68:	4602      	mov	r2, r0
 800db6a:	6260      	str	r0, [r4, #36]	; 0x24
 800db6c:	b920      	cbnz	r0, 800db78 <_dtoa_r+0x38>
 800db6e:	4bb2      	ldr	r3, [pc, #712]	; (800de38 <_dtoa_r+0x2f8>)
 800db70:	21ea      	movs	r1, #234	; 0xea
 800db72:	48b2      	ldr	r0, [pc, #712]	; (800de3c <_dtoa_r+0x2fc>)
 800db74:	f001 fa32 	bl	800efdc <__assert_func>
 800db78:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800db7c:	6005      	str	r5, [r0, #0]
 800db7e:	60c5      	str	r5, [r0, #12]
 800db80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db82:	6819      	ldr	r1, [r3, #0]
 800db84:	b151      	cbz	r1, 800db9c <_dtoa_r+0x5c>
 800db86:	685a      	ldr	r2, [r3, #4]
 800db88:	604a      	str	r2, [r1, #4]
 800db8a:	2301      	movs	r3, #1
 800db8c:	4093      	lsls	r3, r2
 800db8e:	608b      	str	r3, [r1, #8]
 800db90:	4620      	mov	r0, r4
 800db92:	f000 fe1b 	bl	800e7cc <_Bfree>
 800db96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db98:	2200      	movs	r2, #0
 800db9a:	601a      	str	r2, [r3, #0]
 800db9c:	1e3b      	subs	r3, r7, #0
 800db9e:	bfb9      	ittee	lt
 800dba0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dba4:	9303      	strlt	r3, [sp, #12]
 800dba6:	2300      	movge	r3, #0
 800dba8:	f8c8 3000 	strge.w	r3, [r8]
 800dbac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800dbb0:	4ba3      	ldr	r3, [pc, #652]	; (800de40 <_dtoa_r+0x300>)
 800dbb2:	bfbc      	itt	lt
 800dbb4:	2201      	movlt	r2, #1
 800dbb6:	f8c8 2000 	strlt.w	r2, [r8]
 800dbba:	ea33 0309 	bics.w	r3, r3, r9
 800dbbe:	d11b      	bne.n	800dbf8 <_dtoa_r+0xb8>
 800dbc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dbc2:	f242 730f 	movw	r3, #9999	; 0x270f
 800dbc6:	6013      	str	r3, [r2, #0]
 800dbc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dbcc:	4333      	orrs	r3, r6
 800dbce:	f000 857a 	beq.w	800e6c6 <_dtoa_r+0xb86>
 800dbd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dbd4:	b963      	cbnz	r3, 800dbf0 <_dtoa_r+0xb0>
 800dbd6:	4b9b      	ldr	r3, [pc, #620]	; (800de44 <_dtoa_r+0x304>)
 800dbd8:	e024      	b.n	800dc24 <_dtoa_r+0xe4>
 800dbda:	4b9b      	ldr	r3, [pc, #620]	; (800de48 <_dtoa_r+0x308>)
 800dbdc:	9300      	str	r3, [sp, #0]
 800dbde:	3308      	adds	r3, #8
 800dbe0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dbe2:	6013      	str	r3, [r2, #0]
 800dbe4:	9800      	ldr	r0, [sp, #0]
 800dbe6:	b015      	add	sp, #84	; 0x54
 800dbe8:	ecbd 8b02 	vpop	{d8}
 800dbec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbf0:	4b94      	ldr	r3, [pc, #592]	; (800de44 <_dtoa_r+0x304>)
 800dbf2:	9300      	str	r3, [sp, #0]
 800dbf4:	3303      	adds	r3, #3
 800dbf6:	e7f3      	b.n	800dbe0 <_dtoa_r+0xa0>
 800dbf8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	ec51 0b17 	vmov	r0, r1, d7
 800dc02:	2300      	movs	r3, #0
 800dc04:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800dc08:	f7f2 ff66 	bl	8000ad8 <__aeabi_dcmpeq>
 800dc0c:	4680      	mov	r8, r0
 800dc0e:	b158      	cbz	r0, 800dc28 <_dtoa_r+0xe8>
 800dc10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dc12:	2301      	movs	r3, #1
 800dc14:	6013      	str	r3, [r2, #0]
 800dc16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	f000 8551 	beq.w	800e6c0 <_dtoa_r+0xb80>
 800dc1e:	488b      	ldr	r0, [pc, #556]	; (800de4c <_dtoa_r+0x30c>)
 800dc20:	6018      	str	r0, [r3, #0]
 800dc22:	1e43      	subs	r3, r0, #1
 800dc24:	9300      	str	r3, [sp, #0]
 800dc26:	e7dd      	b.n	800dbe4 <_dtoa_r+0xa4>
 800dc28:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800dc2c:	aa12      	add	r2, sp, #72	; 0x48
 800dc2e:	a913      	add	r1, sp, #76	; 0x4c
 800dc30:	4620      	mov	r0, r4
 800dc32:	f001 f8ad 	bl	800ed90 <__d2b>
 800dc36:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dc3a:	4683      	mov	fp, r0
 800dc3c:	2d00      	cmp	r5, #0
 800dc3e:	d07c      	beq.n	800dd3a <_dtoa_r+0x1fa>
 800dc40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc42:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800dc46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc4a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800dc4e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800dc52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800dc56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dc5a:	4b7d      	ldr	r3, [pc, #500]	; (800de50 <_dtoa_r+0x310>)
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	4630      	mov	r0, r6
 800dc60:	4639      	mov	r1, r7
 800dc62:	f7f2 fb19 	bl	8000298 <__aeabi_dsub>
 800dc66:	a36e      	add	r3, pc, #440	; (adr r3, 800de20 <_dtoa_r+0x2e0>)
 800dc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc6c:	f7f2 fccc 	bl	8000608 <__aeabi_dmul>
 800dc70:	a36d      	add	r3, pc, #436	; (adr r3, 800de28 <_dtoa_r+0x2e8>)
 800dc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc76:	f7f2 fb11 	bl	800029c <__adddf3>
 800dc7a:	4606      	mov	r6, r0
 800dc7c:	4628      	mov	r0, r5
 800dc7e:	460f      	mov	r7, r1
 800dc80:	f7f2 fc58 	bl	8000534 <__aeabi_i2d>
 800dc84:	a36a      	add	r3, pc, #424	; (adr r3, 800de30 <_dtoa_r+0x2f0>)
 800dc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc8a:	f7f2 fcbd 	bl	8000608 <__aeabi_dmul>
 800dc8e:	4602      	mov	r2, r0
 800dc90:	460b      	mov	r3, r1
 800dc92:	4630      	mov	r0, r6
 800dc94:	4639      	mov	r1, r7
 800dc96:	f7f2 fb01 	bl	800029c <__adddf3>
 800dc9a:	4606      	mov	r6, r0
 800dc9c:	460f      	mov	r7, r1
 800dc9e:	f7f2 ff63 	bl	8000b68 <__aeabi_d2iz>
 800dca2:	2200      	movs	r2, #0
 800dca4:	4682      	mov	sl, r0
 800dca6:	2300      	movs	r3, #0
 800dca8:	4630      	mov	r0, r6
 800dcaa:	4639      	mov	r1, r7
 800dcac:	f7f2 ff1e 	bl	8000aec <__aeabi_dcmplt>
 800dcb0:	b148      	cbz	r0, 800dcc6 <_dtoa_r+0x186>
 800dcb2:	4650      	mov	r0, sl
 800dcb4:	f7f2 fc3e 	bl	8000534 <__aeabi_i2d>
 800dcb8:	4632      	mov	r2, r6
 800dcba:	463b      	mov	r3, r7
 800dcbc:	f7f2 ff0c 	bl	8000ad8 <__aeabi_dcmpeq>
 800dcc0:	b908      	cbnz	r0, 800dcc6 <_dtoa_r+0x186>
 800dcc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dcc6:	f1ba 0f16 	cmp.w	sl, #22
 800dcca:	d854      	bhi.n	800dd76 <_dtoa_r+0x236>
 800dccc:	4b61      	ldr	r3, [pc, #388]	; (800de54 <_dtoa_r+0x314>)
 800dcce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcd6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dcda:	f7f2 ff07 	bl	8000aec <__aeabi_dcmplt>
 800dcde:	2800      	cmp	r0, #0
 800dce0:	d04b      	beq.n	800dd7a <_dtoa_r+0x23a>
 800dce2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dce6:	2300      	movs	r3, #0
 800dce8:	930e      	str	r3, [sp, #56]	; 0x38
 800dcea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dcec:	1b5d      	subs	r5, r3, r5
 800dcee:	1e6b      	subs	r3, r5, #1
 800dcf0:	9304      	str	r3, [sp, #16]
 800dcf2:	bf43      	ittte	mi
 800dcf4:	2300      	movmi	r3, #0
 800dcf6:	f1c5 0801 	rsbmi	r8, r5, #1
 800dcfa:	9304      	strmi	r3, [sp, #16]
 800dcfc:	f04f 0800 	movpl.w	r8, #0
 800dd00:	f1ba 0f00 	cmp.w	sl, #0
 800dd04:	db3b      	blt.n	800dd7e <_dtoa_r+0x23e>
 800dd06:	9b04      	ldr	r3, [sp, #16]
 800dd08:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800dd0c:	4453      	add	r3, sl
 800dd0e:	9304      	str	r3, [sp, #16]
 800dd10:	2300      	movs	r3, #0
 800dd12:	9306      	str	r3, [sp, #24]
 800dd14:	9b05      	ldr	r3, [sp, #20]
 800dd16:	2b09      	cmp	r3, #9
 800dd18:	d869      	bhi.n	800ddee <_dtoa_r+0x2ae>
 800dd1a:	2b05      	cmp	r3, #5
 800dd1c:	bfc4      	itt	gt
 800dd1e:	3b04      	subgt	r3, #4
 800dd20:	9305      	strgt	r3, [sp, #20]
 800dd22:	9b05      	ldr	r3, [sp, #20]
 800dd24:	f1a3 0302 	sub.w	r3, r3, #2
 800dd28:	bfcc      	ite	gt
 800dd2a:	2500      	movgt	r5, #0
 800dd2c:	2501      	movle	r5, #1
 800dd2e:	2b03      	cmp	r3, #3
 800dd30:	d869      	bhi.n	800de06 <_dtoa_r+0x2c6>
 800dd32:	e8df f003 	tbb	[pc, r3]
 800dd36:	4e2c      	.short	0x4e2c
 800dd38:	5a4c      	.short	0x5a4c
 800dd3a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800dd3e:	441d      	add	r5, r3
 800dd40:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dd44:	2b20      	cmp	r3, #32
 800dd46:	bfc1      	itttt	gt
 800dd48:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dd4c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800dd50:	fa09 f303 	lslgt.w	r3, r9, r3
 800dd54:	fa26 f000 	lsrgt.w	r0, r6, r0
 800dd58:	bfda      	itte	le
 800dd5a:	f1c3 0320 	rsble	r3, r3, #32
 800dd5e:	fa06 f003 	lslle.w	r0, r6, r3
 800dd62:	4318      	orrgt	r0, r3
 800dd64:	f7f2 fbd6 	bl	8000514 <__aeabi_ui2d>
 800dd68:	2301      	movs	r3, #1
 800dd6a:	4606      	mov	r6, r0
 800dd6c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800dd70:	3d01      	subs	r5, #1
 800dd72:	9310      	str	r3, [sp, #64]	; 0x40
 800dd74:	e771      	b.n	800dc5a <_dtoa_r+0x11a>
 800dd76:	2301      	movs	r3, #1
 800dd78:	e7b6      	b.n	800dce8 <_dtoa_r+0x1a8>
 800dd7a:	900e      	str	r0, [sp, #56]	; 0x38
 800dd7c:	e7b5      	b.n	800dcea <_dtoa_r+0x1aa>
 800dd7e:	f1ca 0300 	rsb	r3, sl, #0
 800dd82:	9306      	str	r3, [sp, #24]
 800dd84:	2300      	movs	r3, #0
 800dd86:	eba8 080a 	sub.w	r8, r8, sl
 800dd8a:	930d      	str	r3, [sp, #52]	; 0x34
 800dd8c:	e7c2      	b.n	800dd14 <_dtoa_r+0x1d4>
 800dd8e:	2300      	movs	r3, #0
 800dd90:	9308      	str	r3, [sp, #32]
 800dd92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	dc39      	bgt.n	800de0c <_dtoa_r+0x2cc>
 800dd98:	f04f 0901 	mov.w	r9, #1
 800dd9c:	f8cd 9004 	str.w	r9, [sp, #4]
 800dda0:	464b      	mov	r3, r9
 800dda2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800dda6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dda8:	2200      	movs	r2, #0
 800ddaa:	6042      	str	r2, [r0, #4]
 800ddac:	2204      	movs	r2, #4
 800ddae:	f102 0614 	add.w	r6, r2, #20
 800ddb2:	429e      	cmp	r6, r3
 800ddb4:	6841      	ldr	r1, [r0, #4]
 800ddb6:	d92f      	bls.n	800de18 <_dtoa_r+0x2d8>
 800ddb8:	4620      	mov	r0, r4
 800ddba:	f000 fcc7 	bl	800e74c <_Balloc>
 800ddbe:	9000      	str	r0, [sp, #0]
 800ddc0:	2800      	cmp	r0, #0
 800ddc2:	d14b      	bne.n	800de5c <_dtoa_r+0x31c>
 800ddc4:	4b24      	ldr	r3, [pc, #144]	; (800de58 <_dtoa_r+0x318>)
 800ddc6:	4602      	mov	r2, r0
 800ddc8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ddcc:	e6d1      	b.n	800db72 <_dtoa_r+0x32>
 800ddce:	2301      	movs	r3, #1
 800ddd0:	e7de      	b.n	800dd90 <_dtoa_r+0x250>
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	9308      	str	r3, [sp, #32]
 800ddd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddd8:	eb0a 0903 	add.w	r9, sl, r3
 800dddc:	f109 0301 	add.w	r3, r9, #1
 800dde0:	2b01      	cmp	r3, #1
 800dde2:	9301      	str	r3, [sp, #4]
 800dde4:	bfb8      	it	lt
 800dde6:	2301      	movlt	r3, #1
 800dde8:	e7dd      	b.n	800dda6 <_dtoa_r+0x266>
 800ddea:	2301      	movs	r3, #1
 800ddec:	e7f2      	b.n	800ddd4 <_dtoa_r+0x294>
 800ddee:	2501      	movs	r5, #1
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	9305      	str	r3, [sp, #20]
 800ddf4:	9508      	str	r5, [sp, #32]
 800ddf6:	f04f 39ff 	mov.w	r9, #4294967295
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	f8cd 9004 	str.w	r9, [sp, #4]
 800de00:	2312      	movs	r3, #18
 800de02:	9209      	str	r2, [sp, #36]	; 0x24
 800de04:	e7cf      	b.n	800dda6 <_dtoa_r+0x266>
 800de06:	2301      	movs	r3, #1
 800de08:	9308      	str	r3, [sp, #32]
 800de0a:	e7f4      	b.n	800ddf6 <_dtoa_r+0x2b6>
 800de0c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800de10:	f8cd 9004 	str.w	r9, [sp, #4]
 800de14:	464b      	mov	r3, r9
 800de16:	e7c6      	b.n	800dda6 <_dtoa_r+0x266>
 800de18:	3101      	adds	r1, #1
 800de1a:	6041      	str	r1, [r0, #4]
 800de1c:	0052      	lsls	r2, r2, #1
 800de1e:	e7c6      	b.n	800ddae <_dtoa_r+0x26e>
 800de20:	636f4361 	.word	0x636f4361
 800de24:	3fd287a7 	.word	0x3fd287a7
 800de28:	8b60c8b3 	.word	0x8b60c8b3
 800de2c:	3fc68a28 	.word	0x3fc68a28
 800de30:	509f79fb 	.word	0x509f79fb
 800de34:	3fd34413 	.word	0x3fd34413
 800de38:	0800fc6d 	.word	0x0800fc6d
 800de3c:	0800fc84 	.word	0x0800fc84
 800de40:	7ff00000 	.word	0x7ff00000
 800de44:	0800fc69 	.word	0x0800fc69
 800de48:	0800fc60 	.word	0x0800fc60
 800de4c:	0800fc3d 	.word	0x0800fc3d
 800de50:	3ff80000 	.word	0x3ff80000
 800de54:	0800fd80 	.word	0x0800fd80
 800de58:	0800fce3 	.word	0x0800fce3
 800de5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de5e:	9a00      	ldr	r2, [sp, #0]
 800de60:	601a      	str	r2, [r3, #0]
 800de62:	9b01      	ldr	r3, [sp, #4]
 800de64:	2b0e      	cmp	r3, #14
 800de66:	f200 80ad 	bhi.w	800dfc4 <_dtoa_r+0x484>
 800de6a:	2d00      	cmp	r5, #0
 800de6c:	f000 80aa 	beq.w	800dfc4 <_dtoa_r+0x484>
 800de70:	f1ba 0f00 	cmp.w	sl, #0
 800de74:	dd36      	ble.n	800dee4 <_dtoa_r+0x3a4>
 800de76:	4ac3      	ldr	r2, [pc, #780]	; (800e184 <_dtoa_r+0x644>)
 800de78:	f00a 030f 	and.w	r3, sl, #15
 800de7c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800de80:	ed93 7b00 	vldr	d7, [r3]
 800de84:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800de88:	ea4f 172a 	mov.w	r7, sl, asr #4
 800de8c:	eeb0 8a47 	vmov.f32	s16, s14
 800de90:	eef0 8a67 	vmov.f32	s17, s15
 800de94:	d016      	beq.n	800dec4 <_dtoa_r+0x384>
 800de96:	4bbc      	ldr	r3, [pc, #752]	; (800e188 <_dtoa_r+0x648>)
 800de98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800de9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dea0:	f7f2 fcdc 	bl	800085c <__aeabi_ddiv>
 800dea4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dea8:	f007 070f 	and.w	r7, r7, #15
 800deac:	2503      	movs	r5, #3
 800deae:	4eb6      	ldr	r6, [pc, #728]	; (800e188 <_dtoa_r+0x648>)
 800deb0:	b957      	cbnz	r7, 800dec8 <_dtoa_r+0x388>
 800deb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800deb6:	ec53 2b18 	vmov	r2, r3, d8
 800deba:	f7f2 fccf 	bl	800085c <__aeabi_ddiv>
 800debe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dec2:	e029      	b.n	800df18 <_dtoa_r+0x3d8>
 800dec4:	2502      	movs	r5, #2
 800dec6:	e7f2      	b.n	800deae <_dtoa_r+0x36e>
 800dec8:	07f9      	lsls	r1, r7, #31
 800deca:	d508      	bpl.n	800dede <_dtoa_r+0x39e>
 800decc:	ec51 0b18 	vmov	r0, r1, d8
 800ded0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ded4:	f7f2 fb98 	bl	8000608 <__aeabi_dmul>
 800ded8:	ec41 0b18 	vmov	d8, r0, r1
 800dedc:	3501      	adds	r5, #1
 800dede:	107f      	asrs	r7, r7, #1
 800dee0:	3608      	adds	r6, #8
 800dee2:	e7e5      	b.n	800deb0 <_dtoa_r+0x370>
 800dee4:	f000 80a6 	beq.w	800e034 <_dtoa_r+0x4f4>
 800dee8:	f1ca 0600 	rsb	r6, sl, #0
 800deec:	4ba5      	ldr	r3, [pc, #660]	; (800e184 <_dtoa_r+0x644>)
 800deee:	4fa6      	ldr	r7, [pc, #664]	; (800e188 <_dtoa_r+0x648>)
 800def0:	f006 020f 	and.w	r2, r6, #15
 800def4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800def8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800defc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800df00:	f7f2 fb82 	bl	8000608 <__aeabi_dmul>
 800df04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df08:	1136      	asrs	r6, r6, #4
 800df0a:	2300      	movs	r3, #0
 800df0c:	2502      	movs	r5, #2
 800df0e:	2e00      	cmp	r6, #0
 800df10:	f040 8085 	bne.w	800e01e <_dtoa_r+0x4de>
 800df14:	2b00      	cmp	r3, #0
 800df16:	d1d2      	bne.n	800debe <_dtoa_r+0x37e>
 800df18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	f000 808c 	beq.w	800e038 <_dtoa_r+0x4f8>
 800df20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800df24:	4b99      	ldr	r3, [pc, #612]	; (800e18c <_dtoa_r+0x64c>)
 800df26:	2200      	movs	r2, #0
 800df28:	4630      	mov	r0, r6
 800df2a:	4639      	mov	r1, r7
 800df2c:	f7f2 fdde 	bl	8000aec <__aeabi_dcmplt>
 800df30:	2800      	cmp	r0, #0
 800df32:	f000 8081 	beq.w	800e038 <_dtoa_r+0x4f8>
 800df36:	9b01      	ldr	r3, [sp, #4]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d07d      	beq.n	800e038 <_dtoa_r+0x4f8>
 800df3c:	f1b9 0f00 	cmp.w	r9, #0
 800df40:	dd3c      	ble.n	800dfbc <_dtoa_r+0x47c>
 800df42:	f10a 33ff 	add.w	r3, sl, #4294967295
 800df46:	9307      	str	r3, [sp, #28]
 800df48:	2200      	movs	r2, #0
 800df4a:	4b91      	ldr	r3, [pc, #580]	; (800e190 <_dtoa_r+0x650>)
 800df4c:	4630      	mov	r0, r6
 800df4e:	4639      	mov	r1, r7
 800df50:	f7f2 fb5a 	bl	8000608 <__aeabi_dmul>
 800df54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df58:	3501      	adds	r5, #1
 800df5a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800df5e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800df62:	4628      	mov	r0, r5
 800df64:	f7f2 fae6 	bl	8000534 <__aeabi_i2d>
 800df68:	4632      	mov	r2, r6
 800df6a:	463b      	mov	r3, r7
 800df6c:	f7f2 fb4c 	bl	8000608 <__aeabi_dmul>
 800df70:	4b88      	ldr	r3, [pc, #544]	; (800e194 <_dtoa_r+0x654>)
 800df72:	2200      	movs	r2, #0
 800df74:	f7f2 f992 	bl	800029c <__adddf3>
 800df78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800df7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df80:	9303      	str	r3, [sp, #12]
 800df82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800df84:	2b00      	cmp	r3, #0
 800df86:	d15c      	bne.n	800e042 <_dtoa_r+0x502>
 800df88:	4b83      	ldr	r3, [pc, #524]	; (800e198 <_dtoa_r+0x658>)
 800df8a:	2200      	movs	r2, #0
 800df8c:	4630      	mov	r0, r6
 800df8e:	4639      	mov	r1, r7
 800df90:	f7f2 f982 	bl	8000298 <__aeabi_dsub>
 800df94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800df98:	4606      	mov	r6, r0
 800df9a:	460f      	mov	r7, r1
 800df9c:	f7f2 fdc4 	bl	8000b28 <__aeabi_dcmpgt>
 800dfa0:	2800      	cmp	r0, #0
 800dfa2:	f040 8296 	bne.w	800e4d2 <_dtoa_r+0x992>
 800dfa6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800dfaa:	4630      	mov	r0, r6
 800dfac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dfb0:	4639      	mov	r1, r7
 800dfb2:	f7f2 fd9b 	bl	8000aec <__aeabi_dcmplt>
 800dfb6:	2800      	cmp	r0, #0
 800dfb8:	f040 8288 	bne.w	800e4cc <_dtoa_r+0x98c>
 800dfbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800dfc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dfc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	f2c0 8158 	blt.w	800e27c <_dtoa_r+0x73c>
 800dfcc:	f1ba 0f0e 	cmp.w	sl, #14
 800dfd0:	f300 8154 	bgt.w	800e27c <_dtoa_r+0x73c>
 800dfd4:	4b6b      	ldr	r3, [pc, #428]	; (800e184 <_dtoa_r+0x644>)
 800dfd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dfda:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dfde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	f280 80e3 	bge.w	800e1ac <_dtoa_r+0x66c>
 800dfe6:	9b01      	ldr	r3, [sp, #4]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	f300 80df 	bgt.w	800e1ac <_dtoa_r+0x66c>
 800dfee:	f040 826d 	bne.w	800e4cc <_dtoa_r+0x98c>
 800dff2:	4b69      	ldr	r3, [pc, #420]	; (800e198 <_dtoa_r+0x658>)
 800dff4:	2200      	movs	r2, #0
 800dff6:	4640      	mov	r0, r8
 800dff8:	4649      	mov	r1, r9
 800dffa:	f7f2 fb05 	bl	8000608 <__aeabi_dmul>
 800dffe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e002:	f7f2 fd87 	bl	8000b14 <__aeabi_dcmpge>
 800e006:	9e01      	ldr	r6, [sp, #4]
 800e008:	4637      	mov	r7, r6
 800e00a:	2800      	cmp	r0, #0
 800e00c:	f040 8243 	bne.w	800e496 <_dtoa_r+0x956>
 800e010:	9d00      	ldr	r5, [sp, #0]
 800e012:	2331      	movs	r3, #49	; 0x31
 800e014:	f805 3b01 	strb.w	r3, [r5], #1
 800e018:	f10a 0a01 	add.w	sl, sl, #1
 800e01c:	e23f      	b.n	800e49e <_dtoa_r+0x95e>
 800e01e:	07f2      	lsls	r2, r6, #31
 800e020:	d505      	bpl.n	800e02e <_dtoa_r+0x4ee>
 800e022:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e026:	f7f2 faef 	bl	8000608 <__aeabi_dmul>
 800e02a:	3501      	adds	r5, #1
 800e02c:	2301      	movs	r3, #1
 800e02e:	1076      	asrs	r6, r6, #1
 800e030:	3708      	adds	r7, #8
 800e032:	e76c      	b.n	800df0e <_dtoa_r+0x3ce>
 800e034:	2502      	movs	r5, #2
 800e036:	e76f      	b.n	800df18 <_dtoa_r+0x3d8>
 800e038:	9b01      	ldr	r3, [sp, #4]
 800e03a:	f8cd a01c 	str.w	sl, [sp, #28]
 800e03e:	930c      	str	r3, [sp, #48]	; 0x30
 800e040:	e78d      	b.n	800df5e <_dtoa_r+0x41e>
 800e042:	9900      	ldr	r1, [sp, #0]
 800e044:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e046:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e048:	4b4e      	ldr	r3, [pc, #312]	; (800e184 <_dtoa_r+0x644>)
 800e04a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e04e:	4401      	add	r1, r0
 800e050:	9102      	str	r1, [sp, #8]
 800e052:	9908      	ldr	r1, [sp, #32]
 800e054:	eeb0 8a47 	vmov.f32	s16, s14
 800e058:	eef0 8a67 	vmov.f32	s17, s15
 800e05c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e060:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e064:	2900      	cmp	r1, #0
 800e066:	d045      	beq.n	800e0f4 <_dtoa_r+0x5b4>
 800e068:	494c      	ldr	r1, [pc, #304]	; (800e19c <_dtoa_r+0x65c>)
 800e06a:	2000      	movs	r0, #0
 800e06c:	f7f2 fbf6 	bl	800085c <__aeabi_ddiv>
 800e070:	ec53 2b18 	vmov	r2, r3, d8
 800e074:	f7f2 f910 	bl	8000298 <__aeabi_dsub>
 800e078:	9d00      	ldr	r5, [sp, #0]
 800e07a:	ec41 0b18 	vmov	d8, r0, r1
 800e07e:	4639      	mov	r1, r7
 800e080:	4630      	mov	r0, r6
 800e082:	f7f2 fd71 	bl	8000b68 <__aeabi_d2iz>
 800e086:	900c      	str	r0, [sp, #48]	; 0x30
 800e088:	f7f2 fa54 	bl	8000534 <__aeabi_i2d>
 800e08c:	4602      	mov	r2, r0
 800e08e:	460b      	mov	r3, r1
 800e090:	4630      	mov	r0, r6
 800e092:	4639      	mov	r1, r7
 800e094:	f7f2 f900 	bl	8000298 <__aeabi_dsub>
 800e098:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e09a:	3330      	adds	r3, #48	; 0x30
 800e09c:	f805 3b01 	strb.w	r3, [r5], #1
 800e0a0:	ec53 2b18 	vmov	r2, r3, d8
 800e0a4:	4606      	mov	r6, r0
 800e0a6:	460f      	mov	r7, r1
 800e0a8:	f7f2 fd20 	bl	8000aec <__aeabi_dcmplt>
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	d165      	bne.n	800e17c <_dtoa_r+0x63c>
 800e0b0:	4632      	mov	r2, r6
 800e0b2:	463b      	mov	r3, r7
 800e0b4:	4935      	ldr	r1, [pc, #212]	; (800e18c <_dtoa_r+0x64c>)
 800e0b6:	2000      	movs	r0, #0
 800e0b8:	f7f2 f8ee 	bl	8000298 <__aeabi_dsub>
 800e0bc:	ec53 2b18 	vmov	r2, r3, d8
 800e0c0:	f7f2 fd14 	bl	8000aec <__aeabi_dcmplt>
 800e0c4:	2800      	cmp	r0, #0
 800e0c6:	f040 80b9 	bne.w	800e23c <_dtoa_r+0x6fc>
 800e0ca:	9b02      	ldr	r3, [sp, #8]
 800e0cc:	429d      	cmp	r5, r3
 800e0ce:	f43f af75 	beq.w	800dfbc <_dtoa_r+0x47c>
 800e0d2:	4b2f      	ldr	r3, [pc, #188]	; (800e190 <_dtoa_r+0x650>)
 800e0d4:	ec51 0b18 	vmov	r0, r1, d8
 800e0d8:	2200      	movs	r2, #0
 800e0da:	f7f2 fa95 	bl	8000608 <__aeabi_dmul>
 800e0de:	4b2c      	ldr	r3, [pc, #176]	; (800e190 <_dtoa_r+0x650>)
 800e0e0:	ec41 0b18 	vmov	d8, r0, r1
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	4630      	mov	r0, r6
 800e0e8:	4639      	mov	r1, r7
 800e0ea:	f7f2 fa8d 	bl	8000608 <__aeabi_dmul>
 800e0ee:	4606      	mov	r6, r0
 800e0f0:	460f      	mov	r7, r1
 800e0f2:	e7c4      	b.n	800e07e <_dtoa_r+0x53e>
 800e0f4:	ec51 0b17 	vmov	r0, r1, d7
 800e0f8:	f7f2 fa86 	bl	8000608 <__aeabi_dmul>
 800e0fc:	9b02      	ldr	r3, [sp, #8]
 800e0fe:	9d00      	ldr	r5, [sp, #0]
 800e100:	930c      	str	r3, [sp, #48]	; 0x30
 800e102:	ec41 0b18 	vmov	d8, r0, r1
 800e106:	4639      	mov	r1, r7
 800e108:	4630      	mov	r0, r6
 800e10a:	f7f2 fd2d 	bl	8000b68 <__aeabi_d2iz>
 800e10e:	9011      	str	r0, [sp, #68]	; 0x44
 800e110:	f7f2 fa10 	bl	8000534 <__aeabi_i2d>
 800e114:	4602      	mov	r2, r0
 800e116:	460b      	mov	r3, r1
 800e118:	4630      	mov	r0, r6
 800e11a:	4639      	mov	r1, r7
 800e11c:	f7f2 f8bc 	bl	8000298 <__aeabi_dsub>
 800e120:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e122:	3330      	adds	r3, #48	; 0x30
 800e124:	f805 3b01 	strb.w	r3, [r5], #1
 800e128:	9b02      	ldr	r3, [sp, #8]
 800e12a:	429d      	cmp	r5, r3
 800e12c:	4606      	mov	r6, r0
 800e12e:	460f      	mov	r7, r1
 800e130:	f04f 0200 	mov.w	r2, #0
 800e134:	d134      	bne.n	800e1a0 <_dtoa_r+0x660>
 800e136:	4b19      	ldr	r3, [pc, #100]	; (800e19c <_dtoa_r+0x65c>)
 800e138:	ec51 0b18 	vmov	r0, r1, d8
 800e13c:	f7f2 f8ae 	bl	800029c <__adddf3>
 800e140:	4602      	mov	r2, r0
 800e142:	460b      	mov	r3, r1
 800e144:	4630      	mov	r0, r6
 800e146:	4639      	mov	r1, r7
 800e148:	f7f2 fcee 	bl	8000b28 <__aeabi_dcmpgt>
 800e14c:	2800      	cmp	r0, #0
 800e14e:	d175      	bne.n	800e23c <_dtoa_r+0x6fc>
 800e150:	ec53 2b18 	vmov	r2, r3, d8
 800e154:	4911      	ldr	r1, [pc, #68]	; (800e19c <_dtoa_r+0x65c>)
 800e156:	2000      	movs	r0, #0
 800e158:	f7f2 f89e 	bl	8000298 <__aeabi_dsub>
 800e15c:	4602      	mov	r2, r0
 800e15e:	460b      	mov	r3, r1
 800e160:	4630      	mov	r0, r6
 800e162:	4639      	mov	r1, r7
 800e164:	f7f2 fcc2 	bl	8000aec <__aeabi_dcmplt>
 800e168:	2800      	cmp	r0, #0
 800e16a:	f43f af27 	beq.w	800dfbc <_dtoa_r+0x47c>
 800e16e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e170:	1e6b      	subs	r3, r5, #1
 800e172:	930c      	str	r3, [sp, #48]	; 0x30
 800e174:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e178:	2b30      	cmp	r3, #48	; 0x30
 800e17a:	d0f8      	beq.n	800e16e <_dtoa_r+0x62e>
 800e17c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e180:	e04a      	b.n	800e218 <_dtoa_r+0x6d8>
 800e182:	bf00      	nop
 800e184:	0800fd80 	.word	0x0800fd80
 800e188:	0800fd58 	.word	0x0800fd58
 800e18c:	3ff00000 	.word	0x3ff00000
 800e190:	40240000 	.word	0x40240000
 800e194:	401c0000 	.word	0x401c0000
 800e198:	40140000 	.word	0x40140000
 800e19c:	3fe00000 	.word	0x3fe00000
 800e1a0:	4baf      	ldr	r3, [pc, #700]	; (800e460 <_dtoa_r+0x920>)
 800e1a2:	f7f2 fa31 	bl	8000608 <__aeabi_dmul>
 800e1a6:	4606      	mov	r6, r0
 800e1a8:	460f      	mov	r7, r1
 800e1aa:	e7ac      	b.n	800e106 <_dtoa_r+0x5c6>
 800e1ac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e1b0:	9d00      	ldr	r5, [sp, #0]
 800e1b2:	4642      	mov	r2, r8
 800e1b4:	464b      	mov	r3, r9
 800e1b6:	4630      	mov	r0, r6
 800e1b8:	4639      	mov	r1, r7
 800e1ba:	f7f2 fb4f 	bl	800085c <__aeabi_ddiv>
 800e1be:	f7f2 fcd3 	bl	8000b68 <__aeabi_d2iz>
 800e1c2:	9002      	str	r0, [sp, #8]
 800e1c4:	f7f2 f9b6 	bl	8000534 <__aeabi_i2d>
 800e1c8:	4642      	mov	r2, r8
 800e1ca:	464b      	mov	r3, r9
 800e1cc:	f7f2 fa1c 	bl	8000608 <__aeabi_dmul>
 800e1d0:	4602      	mov	r2, r0
 800e1d2:	460b      	mov	r3, r1
 800e1d4:	4630      	mov	r0, r6
 800e1d6:	4639      	mov	r1, r7
 800e1d8:	f7f2 f85e 	bl	8000298 <__aeabi_dsub>
 800e1dc:	9e02      	ldr	r6, [sp, #8]
 800e1de:	9f01      	ldr	r7, [sp, #4]
 800e1e0:	3630      	adds	r6, #48	; 0x30
 800e1e2:	f805 6b01 	strb.w	r6, [r5], #1
 800e1e6:	9e00      	ldr	r6, [sp, #0]
 800e1e8:	1bae      	subs	r6, r5, r6
 800e1ea:	42b7      	cmp	r7, r6
 800e1ec:	4602      	mov	r2, r0
 800e1ee:	460b      	mov	r3, r1
 800e1f0:	d137      	bne.n	800e262 <_dtoa_r+0x722>
 800e1f2:	f7f2 f853 	bl	800029c <__adddf3>
 800e1f6:	4642      	mov	r2, r8
 800e1f8:	464b      	mov	r3, r9
 800e1fa:	4606      	mov	r6, r0
 800e1fc:	460f      	mov	r7, r1
 800e1fe:	f7f2 fc93 	bl	8000b28 <__aeabi_dcmpgt>
 800e202:	b9c8      	cbnz	r0, 800e238 <_dtoa_r+0x6f8>
 800e204:	4642      	mov	r2, r8
 800e206:	464b      	mov	r3, r9
 800e208:	4630      	mov	r0, r6
 800e20a:	4639      	mov	r1, r7
 800e20c:	f7f2 fc64 	bl	8000ad8 <__aeabi_dcmpeq>
 800e210:	b110      	cbz	r0, 800e218 <_dtoa_r+0x6d8>
 800e212:	9b02      	ldr	r3, [sp, #8]
 800e214:	07d9      	lsls	r1, r3, #31
 800e216:	d40f      	bmi.n	800e238 <_dtoa_r+0x6f8>
 800e218:	4620      	mov	r0, r4
 800e21a:	4659      	mov	r1, fp
 800e21c:	f000 fad6 	bl	800e7cc <_Bfree>
 800e220:	2300      	movs	r3, #0
 800e222:	702b      	strb	r3, [r5, #0]
 800e224:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e226:	f10a 0001 	add.w	r0, sl, #1
 800e22a:	6018      	str	r0, [r3, #0]
 800e22c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e22e:	2b00      	cmp	r3, #0
 800e230:	f43f acd8 	beq.w	800dbe4 <_dtoa_r+0xa4>
 800e234:	601d      	str	r5, [r3, #0]
 800e236:	e4d5      	b.n	800dbe4 <_dtoa_r+0xa4>
 800e238:	f8cd a01c 	str.w	sl, [sp, #28]
 800e23c:	462b      	mov	r3, r5
 800e23e:	461d      	mov	r5, r3
 800e240:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e244:	2a39      	cmp	r2, #57	; 0x39
 800e246:	d108      	bne.n	800e25a <_dtoa_r+0x71a>
 800e248:	9a00      	ldr	r2, [sp, #0]
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d1f7      	bne.n	800e23e <_dtoa_r+0x6fe>
 800e24e:	9a07      	ldr	r2, [sp, #28]
 800e250:	9900      	ldr	r1, [sp, #0]
 800e252:	3201      	adds	r2, #1
 800e254:	9207      	str	r2, [sp, #28]
 800e256:	2230      	movs	r2, #48	; 0x30
 800e258:	700a      	strb	r2, [r1, #0]
 800e25a:	781a      	ldrb	r2, [r3, #0]
 800e25c:	3201      	adds	r2, #1
 800e25e:	701a      	strb	r2, [r3, #0]
 800e260:	e78c      	b.n	800e17c <_dtoa_r+0x63c>
 800e262:	4b7f      	ldr	r3, [pc, #508]	; (800e460 <_dtoa_r+0x920>)
 800e264:	2200      	movs	r2, #0
 800e266:	f7f2 f9cf 	bl	8000608 <__aeabi_dmul>
 800e26a:	2200      	movs	r2, #0
 800e26c:	2300      	movs	r3, #0
 800e26e:	4606      	mov	r6, r0
 800e270:	460f      	mov	r7, r1
 800e272:	f7f2 fc31 	bl	8000ad8 <__aeabi_dcmpeq>
 800e276:	2800      	cmp	r0, #0
 800e278:	d09b      	beq.n	800e1b2 <_dtoa_r+0x672>
 800e27a:	e7cd      	b.n	800e218 <_dtoa_r+0x6d8>
 800e27c:	9a08      	ldr	r2, [sp, #32]
 800e27e:	2a00      	cmp	r2, #0
 800e280:	f000 80c4 	beq.w	800e40c <_dtoa_r+0x8cc>
 800e284:	9a05      	ldr	r2, [sp, #20]
 800e286:	2a01      	cmp	r2, #1
 800e288:	f300 80a8 	bgt.w	800e3dc <_dtoa_r+0x89c>
 800e28c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e28e:	2a00      	cmp	r2, #0
 800e290:	f000 80a0 	beq.w	800e3d4 <_dtoa_r+0x894>
 800e294:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e298:	9e06      	ldr	r6, [sp, #24]
 800e29a:	4645      	mov	r5, r8
 800e29c:	9a04      	ldr	r2, [sp, #16]
 800e29e:	2101      	movs	r1, #1
 800e2a0:	441a      	add	r2, r3
 800e2a2:	4620      	mov	r0, r4
 800e2a4:	4498      	add	r8, r3
 800e2a6:	9204      	str	r2, [sp, #16]
 800e2a8:	f000 fb4c 	bl	800e944 <__i2b>
 800e2ac:	4607      	mov	r7, r0
 800e2ae:	2d00      	cmp	r5, #0
 800e2b0:	dd0b      	ble.n	800e2ca <_dtoa_r+0x78a>
 800e2b2:	9b04      	ldr	r3, [sp, #16]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	dd08      	ble.n	800e2ca <_dtoa_r+0x78a>
 800e2b8:	42ab      	cmp	r3, r5
 800e2ba:	9a04      	ldr	r2, [sp, #16]
 800e2bc:	bfa8      	it	ge
 800e2be:	462b      	movge	r3, r5
 800e2c0:	eba8 0803 	sub.w	r8, r8, r3
 800e2c4:	1aed      	subs	r5, r5, r3
 800e2c6:	1ad3      	subs	r3, r2, r3
 800e2c8:	9304      	str	r3, [sp, #16]
 800e2ca:	9b06      	ldr	r3, [sp, #24]
 800e2cc:	b1fb      	cbz	r3, 800e30e <_dtoa_r+0x7ce>
 800e2ce:	9b08      	ldr	r3, [sp, #32]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	f000 809f 	beq.w	800e414 <_dtoa_r+0x8d4>
 800e2d6:	2e00      	cmp	r6, #0
 800e2d8:	dd11      	ble.n	800e2fe <_dtoa_r+0x7be>
 800e2da:	4639      	mov	r1, r7
 800e2dc:	4632      	mov	r2, r6
 800e2de:	4620      	mov	r0, r4
 800e2e0:	f000 fbec 	bl	800eabc <__pow5mult>
 800e2e4:	465a      	mov	r2, fp
 800e2e6:	4601      	mov	r1, r0
 800e2e8:	4607      	mov	r7, r0
 800e2ea:	4620      	mov	r0, r4
 800e2ec:	f000 fb40 	bl	800e970 <__multiply>
 800e2f0:	4659      	mov	r1, fp
 800e2f2:	9007      	str	r0, [sp, #28]
 800e2f4:	4620      	mov	r0, r4
 800e2f6:	f000 fa69 	bl	800e7cc <_Bfree>
 800e2fa:	9b07      	ldr	r3, [sp, #28]
 800e2fc:	469b      	mov	fp, r3
 800e2fe:	9b06      	ldr	r3, [sp, #24]
 800e300:	1b9a      	subs	r2, r3, r6
 800e302:	d004      	beq.n	800e30e <_dtoa_r+0x7ce>
 800e304:	4659      	mov	r1, fp
 800e306:	4620      	mov	r0, r4
 800e308:	f000 fbd8 	bl	800eabc <__pow5mult>
 800e30c:	4683      	mov	fp, r0
 800e30e:	2101      	movs	r1, #1
 800e310:	4620      	mov	r0, r4
 800e312:	f000 fb17 	bl	800e944 <__i2b>
 800e316:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e318:	2b00      	cmp	r3, #0
 800e31a:	4606      	mov	r6, r0
 800e31c:	dd7c      	ble.n	800e418 <_dtoa_r+0x8d8>
 800e31e:	461a      	mov	r2, r3
 800e320:	4601      	mov	r1, r0
 800e322:	4620      	mov	r0, r4
 800e324:	f000 fbca 	bl	800eabc <__pow5mult>
 800e328:	9b05      	ldr	r3, [sp, #20]
 800e32a:	2b01      	cmp	r3, #1
 800e32c:	4606      	mov	r6, r0
 800e32e:	dd76      	ble.n	800e41e <_dtoa_r+0x8de>
 800e330:	2300      	movs	r3, #0
 800e332:	9306      	str	r3, [sp, #24]
 800e334:	6933      	ldr	r3, [r6, #16]
 800e336:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e33a:	6918      	ldr	r0, [r3, #16]
 800e33c:	f000 fab2 	bl	800e8a4 <__hi0bits>
 800e340:	f1c0 0020 	rsb	r0, r0, #32
 800e344:	9b04      	ldr	r3, [sp, #16]
 800e346:	4418      	add	r0, r3
 800e348:	f010 001f 	ands.w	r0, r0, #31
 800e34c:	f000 8086 	beq.w	800e45c <_dtoa_r+0x91c>
 800e350:	f1c0 0320 	rsb	r3, r0, #32
 800e354:	2b04      	cmp	r3, #4
 800e356:	dd7f      	ble.n	800e458 <_dtoa_r+0x918>
 800e358:	f1c0 001c 	rsb	r0, r0, #28
 800e35c:	9b04      	ldr	r3, [sp, #16]
 800e35e:	4403      	add	r3, r0
 800e360:	4480      	add	r8, r0
 800e362:	4405      	add	r5, r0
 800e364:	9304      	str	r3, [sp, #16]
 800e366:	f1b8 0f00 	cmp.w	r8, #0
 800e36a:	dd05      	ble.n	800e378 <_dtoa_r+0x838>
 800e36c:	4659      	mov	r1, fp
 800e36e:	4642      	mov	r2, r8
 800e370:	4620      	mov	r0, r4
 800e372:	f000 fbfd 	bl	800eb70 <__lshift>
 800e376:	4683      	mov	fp, r0
 800e378:	9b04      	ldr	r3, [sp, #16]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	dd05      	ble.n	800e38a <_dtoa_r+0x84a>
 800e37e:	4631      	mov	r1, r6
 800e380:	461a      	mov	r2, r3
 800e382:	4620      	mov	r0, r4
 800e384:	f000 fbf4 	bl	800eb70 <__lshift>
 800e388:	4606      	mov	r6, r0
 800e38a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d069      	beq.n	800e464 <_dtoa_r+0x924>
 800e390:	4631      	mov	r1, r6
 800e392:	4658      	mov	r0, fp
 800e394:	f000 fc58 	bl	800ec48 <__mcmp>
 800e398:	2800      	cmp	r0, #0
 800e39a:	da63      	bge.n	800e464 <_dtoa_r+0x924>
 800e39c:	2300      	movs	r3, #0
 800e39e:	4659      	mov	r1, fp
 800e3a0:	220a      	movs	r2, #10
 800e3a2:	4620      	mov	r0, r4
 800e3a4:	f000 fa34 	bl	800e810 <__multadd>
 800e3a8:	9b08      	ldr	r3, [sp, #32]
 800e3aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e3ae:	4683      	mov	fp, r0
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	f000 818f 	beq.w	800e6d4 <_dtoa_r+0xb94>
 800e3b6:	4639      	mov	r1, r7
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	220a      	movs	r2, #10
 800e3bc:	4620      	mov	r0, r4
 800e3be:	f000 fa27 	bl	800e810 <__multadd>
 800e3c2:	f1b9 0f00 	cmp.w	r9, #0
 800e3c6:	4607      	mov	r7, r0
 800e3c8:	f300 808e 	bgt.w	800e4e8 <_dtoa_r+0x9a8>
 800e3cc:	9b05      	ldr	r3, [sp, #20]
 800e3ce:	2b02      	cmp	r3, #2
 800e3d0:	dc50      	bgt.n	800e474 <_dtoa_r+0x934>
 800e3d2:	e089      	b.n	800e4e8 <_dtoa_r+0x9a8>
 800e3d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e3d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e3da:	e75d      	b.n	800e298 <_dtoa_r+0x758>
 800e3dc:	9b01      	ldr	r3, [sp, #4]
 800e3de:	1e5e      	subs	r6, r3, #1
 800e3e0:	9b06      	ldr	r3, [sp, #24]
 800e3e2:	42b3      	cmp	r3, r6
 800e3e4:	bfbf      	itttt	lt
 800e3e6:	9b06      	ldrlt	r3, [sp, #24]
 800e3e8:	9606      	strlt	r6, [sp, #24]
 800e3ea:	1af2      	sublt	r2, r6, r3
 800e3ec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800e3ee:	bfb6      	itet	lt
 800e3f0:	189b      	addlt	r3, r3, r2
 800e3f2:	1b9e      	subge	r6, r3, r6
 800e3f4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800e3f6:	9b01      	ldr	r3, [sp, #4]
 800e3f8:	bfb8      	it	lt
 800e3fa:	2600      	movlt	r6, #0
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	bfb5      	itete	lt
 800e400:	eba8 0503 	sublt.w	r5, r8, r3
 800e404:	9b01      	ldrge	r3, [sp, #4]
 800e406:	2300      	movlt	r3, #0
 800e408:	4645      	movge	r5, r8
 800e40a:	e747      	b.n	800e29c <_dtoa_r+0x75c>
 800e40c:	9e06      	ldr	r6, [sp, #24]
 800e40e:	9f08      	ldr	r7, [sp, #32]
 800e410:	4645      	mov	r5, r8
 800e412:	e74c      	b.n	800e2ae <_dtoa_r+0x76e>
 800e414:	9a06      	ldr	r2, [sp, #24]
 800e416:	e775      	b.n	800e304 <_dtoa_r+0x7c4>
 800e418:	9b05      	ldr	r3, [sp, #20]
 800e41a:	2b01      	cmp	r3, #1
 800e41c:	dc18      	bgt.n	800e450 <_dtoa_r+0x910>
 800e41e:	9b02      	ldr	r3, [sp, #8]
 800e420:	b9b3      	cbnz	r3, 800e450 <_dtoa_r+0x910>
 800e422:	9b03      	ldr	r3, [sp, #12]
 800e424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e428:	b9a3      	cbnz	r3, 800e454 <_dtoa_r+0x914>
 800e42a:	9b03      	ldr	r3, [sp, #12]
 800e42c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e430:	0d1b      	lsrs	r3, r3, #20
 800e432:	051b      	lsls	r3, r3, #20
 800e434:	b12b      	cbz	r3, 800e442 <_dtoa_r+0x902>
 800e436:	9b04      	ldr	r3, [sp, #16]
 800e438:	3301      	adds	r3, #1
 800e43a:	9304      	str	r3, [sp, #16]
 800e43c:	f108 0801 	add.w	r8, r8, #1
 800e440:	2301      	movs	r3, #1
 800e442:	9306      	str	r3, [sp, #24]
 800e444:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e446:	2b00      	cmp	r3, #0
 800e448:	f47f af74 	bne.w	800e334 <_dtoa_r+0x7f4>
 800e44c:	2001      	movs	r0, #1
 800e44e:	e779      	b.n	800e344 <_dtoa_r+0x804>
 800e450:	2300      	movs	r3, #0
 800e452:	e7f6      	b.n	800e442 <_dtoa_r+0x902>
 800e454:	9b02      	ldr	r3, [sp, #8]
 800e456:	e7f4      	b.n	800e442 <_dtoa_r+0x902>
 800e458:	d085      	beq.n	800e366 <_dtoa_r+0x826>
 800e45a:	4618      	mov	r0, r3
 800e45c:	301c      	adds	r0, #28
 800e45e:	e77d      	b.n	800e35c <_dtoa_r+0x81c>
 800e460:	40240000 	.word	0x40240000
 800e464:	9b01      	ldr	r3, [sp, #4]
 800e466:	2b00      	cmp	r3, #0
 800e468:	dc38      	bgt.n	800e4dc <_dtoa_r+0x99c>
 800e46a:	9b05      	ldr	r3, [sp, #20]
 800e46c:	2b02      	cmp	r3, #2
 800e46e:	dd35      	ble.n	800e4dc <_dtoa_r+0x99c>
 800e470:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e474:	f1b9 0f00 	cmp.w	r9, #0
 800e478:	d10d      	bne.n	800e496 <_dtoa_r+0x956>
 800e47a:	4631      	mov	r1, r6
 800e47c:	464b      	mov	r3, r9
 800e47e:	2205      	movs	r2, #5
 800e480:	4620      	mov	r0, r4
 800e482:	f000 f9c5 	bl	800e810 <__multadd>
 800e486:	4601      	mov	r1, r0
 800e488:	4606      	mov	r6, r0
 800e48a:	4658      	mov	r0, fp
 800e48c:	f000 fbdc 	bl	800ec48 <__mcmp>
 800e490:	2800      	cmp	r0, #0
 800e492:	f73f adbd 	bgt.w	800e010 <_dtoa_r+0x4d0>
 800e496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e498:	9d00      	ldr	r5, [sp, #0]
 800e49a:	ea6f 0a03 	mvn.w	sl, r3
 800e49e:	f04f 0800 	mov.w	r8, #0
 800e4a2:	4631      	mov	r1, r6
 800e4a4:	4620      	mov	r0, r4
 800e4a6:	f000 f991 	bl	800e7cc <_Bfree>
 800e4aa:	2f00      	cmp	r7, #0
 800e4ac:	f43f aeb4 	beq.w	800e218 <_dtoa_r+0x6d8>
 800e4b0:	f1b8 0f00 	cmp.w	r8, #0
 800e4b4:	d005      	beq.n	800e4c2 <_dtoa_r+0x982>
 800e4b6:	45b8      	cmp	r8, r7
 800e4b8:	d003      	beq.n	800e4c2 <_dtoa_r+0x982>
 800e4ba:	4641      	mov	r1, r8
 800e4bc:	4620      	mov	r0, r4
 800e4be:	f000 f985 	bl	800e7cc <_Bfree>
 800e4c2:	4639      	mov	r1, r7
 800e4c4:	4620      	mov	r0, r4
 800e4c6:	f000 f981 	bl	800e7cc <_Bfree>
 800e4ca:	e6a5      	b.n	800e218 <_dtoa_r+0x6d8>
 800e4cc:	2600      	movs	r6, #0
 800e4ce:	4637      	mov	r7, r6
 800e4d0:	e7e1      	b.n	800e496 <_dtoa_r+0x956>
 800e4d2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e4d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e4d8:	4637      	mov	r7, r6
 800e4da:	e599      	b.n	800e010 <_dtoa_r+0x4d0>
 800e4dc:	9b08      	ldr	r3, [sp, #32]
 800e4de:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	f000 80fd 	beq.w	800e6e2 <_dtoa_r+0xba2>
 800e4e8:	2d00      	cmp	r5, #0
 800e4ea:	dd05      	ble.n	800e4f8 <_dtoa_r+0x9b8>
 800e4ec:	4639      	mov	r1, r7
 800e4ee:	462a      	mov	r2, r5
 800e4f0:	4620      	mov	r0, r4
 800e4f2:	f000 fb3d 	bl	800eb70 <__lshift>
 800e4f6:	4607      	mov	r7, r0
 800e4f8:	9b06      	ldr	r3, [sp, #24]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d05c      	beq.n	800e5b8 <_dtoa_r+0xa78>
 800e4fe:	6879      	ldr	r1, [r7, #4]
 800e500:	4620      	mov	r0, r4
 800e502:	f000 f923 	bl	800e74c <_Balloc>
 800e506:	4605      	mov	r5, r0
 800e508:	b928      	cbnz	r0, 800e516 <_dtoa_r+0x9d6>
 800e50a:	4b80      	ldr	r3, [pc, #512]	; (800e70c <_dtoa_r+0xbcc>)
 800e50c:	4602      	mov	r2, r0
 800e50e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e512:	f7ff bb2e 	b.w	800db72 <_dtoa_r+0x32>
 800e516:	693a      	ldr	r2, [r7, #16]
 800e518:	3202      	adds	r2, #2
 800e51a:	0092      	lsls	r2, r2, #2
 800e51c:	f107 010c 	add.w	r1, r7, #12
 800e520:	300c      	adds	r0, #12
 800e522:	f000 f905 	bl	800e730 <memcpy>
 800e526:	2201      	movs	r2, #1
 800e528:	4629      	mov	r1, r5
 800e52a:	4620      	mov	r0, r4
 800e52c:	f000 fb20 	bl	800eb70 <__lshift>
 800e530:	9b00      	ldr	r3, [sp, #0]
 800e532:	3301      	adds	r3, #1
 800e534:	9301      	str	r3, [sp, #4]
 800e536:	9b00      	ldr	r3, [sp, #0]
 800e538:	444b      	add	r3, r9
 800e53a:	9307      	str	r3, [sp, #28]
 800e53c:	9b02      	ldr	r3, [sp, #8]
 800e53e:	f003 0301 	and.w	r3, r3, #1
 800e542:	46b8      	mov	r8, r7
 800e544:	9306      	str	r3, [sp, #24]
 800e546:	4607      	mov	r7, r0
 800e548:	9b01      	ldr	r3, [sp, #4]
 800e54a:	4631      	mov	r1, r6
 800e54c:	3b01      	subs	r3, #1
 800e54e:	4658      	mov	r0, fp
 800e550:	9302      	str	r3, [sp, #8]
 800e552:	f7ff fa67 	bl	800da24 <quorem>
 800e556:	4603      	mov	r3, r0
 800e558:	3330      	adds	r3, #48	; 0x30
 800e55a:	9004      	str	r0, [sp, #16]
 800e55c:	4641      	mov	r1, r8
 800e55e:	4658      	mov	r0, fp
 800e560:	9308      	str	r3, [sp, #32]
 800e562:	f000 fb71 	bl	800ec48 <__mcmp>
 800e566:	463a      	mov	r2, r7
 800e568:	4681      	mov	r9, r0
 800e56a:	4631      	mov	r1, r6
 800e56c:	4620      	mov	r0, r4
 800e56e:	f000 fb87 	bl	800ec80 <__mdiff>
 800e572:	68c2      	ldr	r2, [r0, #12]
 800e574:	9b08      	ldr	r3, [sp, #32]
 800e576:	4605      	mov	r5, r0
 800e578:	bb02      	cbnz	r2, 800e5bc <_dtoa_r+0xa7c>
 800e57a:	4601      	mov	r1, r0
 800e57c:	4658      	mov	r0, fp
 800e57e:	f000 fb63 	bl	800ec48 <__mcmp>
 800e582:	9b08      	ldr	r3, [sp, #32]
 800e584:	4602      	mov	r2, r0
 800e586:	4629      	mov	r1, r5
 800e588:	4620      	mov	r0, r4
 800e58a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800e58e:	f000 f91d 	bl	800e7cc <_Bfree>
 800e592:	9b05      	ldr	r3, [sp, #20]
 800e594:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e596:	9d01      	ldr	r5, [sp, #4]
 800e598:	ea43 0102 	orr.w	r1, r3, r2
 800e59c:	9b06      	ldr	r3, [sp, #24]
 800e59e:	430b      	orrs	r3, r1
 800e5a0:	9b08      	ldr	r3, [sp, #32]
 800e5a2:	d10d      	bne.n	800e5c0 <_dtoa_r+0xa80>
 800e5a4:	2b39      	cmp	r3, #57	; 0x39
 800e5a6:	d029      	beq.n	800e5fc <_dtoa_r+0xabc>
 800e5a8:	f1b9 0f00 	cmp.w	r9, #0
 800e5ac:	dd01      	ble.n	800e5b2 <_dtoa_r+0xa72>
 800e5ae:	9b04      	ldr	r3, [sp, #16]
 800e5b0:	3331      	adds	r3, #49	; 0x31
 800e5b2:	9a02      	ldr	r2, [sp, #8]
 800e5b4:	7013      	strb	r3, [r2, #0]
 800e5b6:	e774      	b.n	800e4a2 <_dtoa_r+0x962>
 800e5b8:	4638      	mov	r0, r7
 800e5ba:	e7b9      	b.n	800e530 <_dtoa_r+0x9f0>
 800e5bc:	2201      	movs	r2, #1
 800e5be:	e7e2      	b.n	800e586 <_dtoa_r+0xa46>
 800e5c0:	f1b9 0f00 	cmp.w	r9, #0
 800e5c4:	db06      	blt.n	800e5d4 <_dtoa_r+0xa94>
 800e5c6:	9905      	ldr	r1, [sp, #20]
 800e5c8:	ea41 0909 	orr.w	r9, r1, r9
 800e5cc:	9906      	ldr	r1, [sp, #24]
 800e5ce:	ea59 0101 	orrs.w	r1, r9, r1
 800e5d2:	d120      	bne.n	800e616 <_dtoa_r+0xad6>
 800e5d4:	2a00      	cmp	r2, #0
 800e5d6:	ddec      	ble.n	800e5b2 <_dtoa_r+0xa72>
 800e5d8:	4659      	mov	r1, fp
 800e5da:	2201      	movs	r2, #1
 800e5dc:	4620      	mov	r0, r4
 800e5de:	9301      	str	r3, [sp, #4]
 800e5e0:	f000 fac6 	bl	800eb70 <__lshift>
 800e5e4:	4631      	mov	r1, r6
 800e5e6:	4683      	mov	fp, r0
 800e5e8:	f000 fb2e 	bl	800ec48 <__mcmp>
 800e5ec:	2800      	cmp	r0, #0
 800e5ee:	9b01      	ldr	r3, [sp, #4]
 800e5f0:	dc02      	bgt.n	800e5f8 <_dtoa_r+0xab8>
 800e5f2:	d1de      	bne.n	800e5b2 <_dtoa_r+0xa72>
 800e5f4:	07da      	lsls	r2, r3, #31
 800e5f6:	d5dc      	bpl.n	800e5b2 <_dtoa_r+0xa72>
 800e5f8:	2b39      	cmp	r3, #57	; 0x39
 800e5fa:	d1d8      	bne.n	800e5ae <_dtoa_r+0xa6e>
 800e5fc:	9a02      	ldr	r2, [sp, #8]
 800e5fe:	2339      	movs	r3, #57	; 0x39
 800e600:	7013      	strb	r3, [r2, #0]
 800e602:	462b      	mov	r3, r5
 800e604:	461d      	mov	r5, r3
 800e606:	3b01      	subs	r3, #1
 800e608:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e60c:	2a39      	cmp	r2, #57	; 0x39
 800e60e:	d050      	beq.n	800e6b2 <_dtoa_r+0xb72>
 800e610:	3201      	adds	r2, #1
 800e612:	701a      	strb	r2, [r3, #0]
 800e614:	e745      	b.n	800e4a2 <_dtoa_r+0x962>
 800e616:	2a00      	cmp	r2, #0
 800e618:	dd03      	ble.n	800e622 <_dtoa_r+0xae2>
 800e61a:	2b39      	cmp	r3, #57	; 0x39
 800e61c:	d0ee      	beq.n	800e5fc <_dtoa_r+0xabc>
 800e61e:	3301      	adds	r3, #1
 800e620:	e7c7      	b.n	800e5b2 <_dtoa_r+0xa72>
 800e622:	9a01      	ldr	r2, [sp, #4]
 800e624:	9907      	ldr	r1, [sp, #28]
 800e626:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e62a:	428a      	cmp	r2, r1
 800e62c:	d02a      	beq.n	800e684 <_dtoa_r+0xb44>
 800e62e:	4659      	mov	r1, fp
 800e630:	2300      	movs	r3, #0
 800e632:	220a      	movs	r2, #10
 800e634:	4620      	mov	r0, r4
 800e636:	f000 f8eb 	bl	800e810 <__multadd>
 800e63a:	45b8      	cmp	r8, r7
 800e63c:	4683      	mov	fp, r0
 800e63e:	f04f 0300 	mov.w	r3, #0
 800e642:	f04f 020a 	mov.w	r2, #10
 800e646:	4641      	mov	r1, r8
 800e648:	4620      	mov	r0, r4
 800e64a:	d107      	bne.n	800e65c <_dtoa_r+0xb1c>
 800e64c:	f000 f8e0 	bl	800e810 <__multadd>
 800e650:	4680      	mov	r8, r0
 800e652:	4607      	mov	r7, r0
 800e654:	9b01      	ldr	r3, [sp, #4]
 800e656:	3301      	adds	r3, #1
 800e658:	9301      	str	r3, [sp, #4]
 800e65a:	e775      	b.n	800e548 <_dtoa_r+0xa08>
 800e65c:	f000 f8d8 	bl	800e810 <__multadd>
 800e660:	4639      	mov	r1, r7
 800e662:	4680      	mov	r8, r0
 800e664:	2300      	movs	r3, #0
 800e666:	220a      	movs	r2, #10
 800e668:	4620      	mov	r0, r4
 800e66a:	f000 f8d1 	bl	800e810 <__multadd>
 800e66e:	4607      	mov	r7, r0
 800e670:	e7f0      	b.n	800e654 <_dtoa_r+0xb14>
 800e672:	f1b9 0f00 	cmp.w	r9, #0
 800e676:	9a00      	ldr	r2, [sp, #0]
 800e678:	bfcc      	ite	gt
 800e67a:	464d      	movgt	r5, r9
 800e67c:	2501      	movle	r5, #1
 800e67e:	4415      	add	r5, r2
 800e680:	f04f 0800 	mov.w	r8, #0
 800e684:	4659      	mov	r1, fp
 800e686:	2201      	movs	r2, #1
 800e688:	4620      	mov	r0, r4
 800e68a:	9301      	str	r3, [sp, #4]
 800e68c:	f000 fa70 	bl	800eb70 <__lshift>
 800e690:	4631      	mov	r1, r6
 800e692:	4683      	mov	fp, r0
 800e694:	f000 fad8 	bl	800ec48 <__mcmp>
 800e698:	2800      	cmp	r0, #0
 800e69a:	dcb2      	bgt.n	800e602 <_dtoa_r+0xac2>
 800e69c:	d102      	bne.n	800e6a4 <_dtoa_r+0xb64>
 800e69e:	9b01      	ldr	r3, [sp, #4]
 800e6a0:	07db      	lsls	r3, r3, #31
 800e6a2:	d4ae      	bmi.n	800e602 <_dtoa_r+0xac2>
 800e6a4:	462b      	mov	r3, r5
 800e6a6:	461d      	mov	r5, r3
 800e6a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e6ac:	2a30      	cmp	r2, #48	; 0x30
 800e6ae:	d0fa      	beq.n	800e6a6 <_dtoa_r+0xb66>
 800e6b0:	e6f7      	b.n	800e4a2 <_dtoa_r+0x962>
 800e6b2:	9a00      	ldr	r2, [sp, #0]
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	d1a5      	bne.n	800e604 <_dtoa_r+0xac4>
 800e6b8:	f10a 0a01 	add.w	sl, sl, #1
 800e6bc:	2331      	movs	r3, #49	; 0x31
 800e6be:	e779      	b.n	800e5b4 <_dtoa_r+0xa74>
 800e6c0:	4b13      	ldr	r3, [pc, #76]	; (800e710 <_dtoa_r+0xbd0>)
 800e6c2:	f7ff baaf 	b.w	800dc24 <_dtoa_r+0xe4>
 800e6c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	f47f aa86 	bne.w	800dbda <_dtoa_r+0x9a>
 800e6ce:	4b11      	ldr	r3, [pc, #68]	; (800e714 <_dtoa_r+0xbd4>)
 800e6d0:	f7ff baa8 	b.w	800dc24 <_dtoa_r+0xe4>
 800e6d4:	f1b9 0f00 	cmp.w	r9, #0
 800e6d8:	dc03      	bgt.n	800e6e2 <_dtoa_r+0xba2>
 800e6da:	9b05      	ldr	r3, [sp, #20]
 800e6dc:	2b02      	cmp	r3, #2
 800e6de:	f73f aec9 	bgt.w	800e474 <_dtoa_r+0x934>
 800e6e2:	9d00      	ldr	r5, [sp, #0]
 800e6e4:	4631      	mov	r1, r6
 800e6e6:	4658      	mov	r0, fp
 800e6e8:	f7ff f99c 	bl	800da24 <quorem>
 800e6ec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e6f0:	f805 3b01 	strb.w	r3, [r5], #1
 800e6f4:	9a00      	ldr	r2, [sp, #0]
 800e6f6:	1aaa      	subs	r2, r5, r2
 800e6f8:	4591      	cmp	r9, r2
 800e6fa:	ddba      	ble.n	800e672 <_dtoa_r+0xb32>
 800e6fc:	4659      	mov	r1, fp
 800e6fe:	2300      	movs	r3, #0
 800e700:	220a      	movs	r2, #10
 800e702:	4620      	mov	r0, r4
 800e704:	f000 f884 	bl	800e810 <__multadd>
 800e708:	4683      	mov	fp, r0
 800e70a:	e7eb      	b.n	800e6e4 <_dtoa_r+0xba4>
 800e70c:	0800fce3 	.word	0x0800fce3
 800e710:	0800fc3c 	.word	0x0800fc3c
 800e714:	0800fc60 	.word	0x0800fc60

0800e718 <_localeconv_r>:
 800e718:	4800      	ldr	r0, [pc, #0]	; (800e71c <_localeconv_r+0x4>)
 800e71a:	4770      	bx	lr
 800e71c:	200002d4 	.word	0x200002d4

0800e720 <malloc>:
 800e720:	4b02      	ldr	r3, [pc, #8]	; (800e72c <malloc+0xc>)
 800e722:	4601      	mov	r1, r0
 800e724:	6818      	ldr	r0, [r3, #0]
 800e726:	f000 bbef 	b.w	800ef08 <_malloc_r>
 800e72a:	bf00      	nop
 800e72c:	20000180 	.word	0x20000180

0800e730 <memcpy>:
 800e730:	440a      	add	r2, r1
 800e732:	4291      	cmp	r1, r2
 800e734:	f100 33ff 	add.w	r3, r0, #4294967295
 800e738:	d100      	bne.n	800e73c <memcpy+0xc>
 800e73a:	4770      	bx	lr
 800e73c:	b510      	push	{r4, lr}
 800e73e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e742:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e746:	4291      	cmp	r1, r2
 800e748:	d1f9      	bne.n	800e73e <memcpy+0xe>
 800e74a:	bd10      	pop	{r4, pc}

0800e74c <_Balloc>:
 800e74c:	b570      	push	{r4, r5, r6, lr}
 800e74e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e750:	4604      	mov	r4, r0
 800e752:	460d      	mov	r5, r1
 800e754:	b976      	cbnz	r6, 800e774 <_Balloc+0x28>
 800e756:	2010      	movs	r0, #16
 800e758:	f7ff ffe2 	bl	800e720 <malloc>
 800e75c:	4602      	mov	r2, r0
 800e75e:	6260      	str	r0, [r4, #36]	; 0x24
 800e760:	b920      	cbnz	r0, 800e76c <_Balloc+0x20>
 800e762:	4b18      	ldr	r3, [pc, #96]	; (800e7c4 <_Balloc+0x78>)
 800e764:	4818      	ldr	r0, [pc, #96]	; (800e7c8 <_Balloc+0x7c>)
 800e766:	2166      	movs	r1, #102	; 0x66
 800e768:	f000 fc38 	bl	800efdc <__assert_func>
 800e76c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e770:	6006      	str	r6, [r0, #0]
 800e772:	60c6      	str	r6, [r0, #12]
 800e774:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e776:	68f3      	ldr	r3, [r6, #12]
 800e778:	b183      	cbz	r3, 800e79c <_Balloc+0x50>
 800e77a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e77c:	68db      	ldr	r3, [r3, #12]
 800e77e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e782:	b9b8      	cbnz	r0, 800e7b4 <_Balloc+0x68>
 800e784:	2101      	movs	r1, #1
 800e786:	fa01 f605 	lsl.w	r6, r1, r5
 800e78a:	1d72      	adds	r2, r6, #5
 800e78c:	0092      	lsls	r2, r2, #2
 800e78e:	4620      	mov	r0, r4
 800e790:	f000 fb5a 	bl	800ee48 <_calloc_r>
 800e794:	b160      	cbz	r0, 800e7b0 <_Balloc+0x64>
 800e796:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e79a:	e00e      	b.n	800e7ba <_Balloc+0x6e>
 800e79c:	2221      	movs	r2, #33	; 0x21
 800e79e:	2104      	movs	r1, #4
 800e7a0:	4620      	mov	r0, r4
 800e7a2:	f000 fb51 	bl	800ee48 <_calloc_r>
 800e7a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e7a8:	60f0      	str	r0, [r6, #12]
 800e7aa:	68db      	ldr	r3, [r3, #12]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d1e4      	bne.n	800e77a <_Balloc+0x2e>
 800e7b0:	2000      	movs	r0, #0
 800e7b2:	bd70      	pop	{r4, r5, r6, pc}
 800e7b4:	6802      	ldr	r2, [r0, #0]
 800e7b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e7c0:	e7f7      	b.n	800e7b2 <_Balloc+0x66>
 800e7c2:	bf00      	nop
 800e7c4:	0800fc6d 	.word	0x0800fc6d
 800e7c8:	0800fcf4 	.word	0x0800fcf4

0800e7cc <_Bfree>:
 800e7cc:	b570      	push	{r4, r5, r6, lr}
 800e7ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e7d0:	4605      	mov	r5, r0
 800e7d2:	460c      	mov	r4, r1
 800e7d4:	b976      	cbnz	r6, 800e7f4 <_Bfree+0x28>
 800e7d6:	2010      	movs	r0, #16
 800e7d8:	f7ff ffa2 	bl	800e720 <malloc>
 800e7dc:	4602      	mov	r2, r0
 800e7de:	6268      	str	r0, [r5, #36]	; 0x24
 800e7e0:	b920      	cbnz	r0, 800e7ec <_Bfree+0x20>
 800e7e2:	4b09      	ldr	r3, [pc, #36]	; (800e808 <_Bfree+0x3c>)
 800e7e4:	4809      	ldr	r0, [pc, #36]	; (800e80c <_Bfree+0x40>)
 800e7e6:	218a      	movs	r1, #138	; 0x8a
 800e7e8:	f000 fbf8 	bl	800efdc <__assert_func>
 800e7ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e7f0:	6006      	str	r6, [r0, #0]
 800e7f2:	60c6      	str	r6, [r0, #12]
 800e7f4:	b13c      	cbz	r4, 800e806 <_Bfree+0x3a>
 800e7f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e7f8:	6862      	ldr	r2, [r4, #4]
 800e7fa:	68db      	ldr	r3, [r3, #12]
 800e7fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e800:	6021      	str	r1, [r4, #0]
 800e802:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e806:	bd70      	pop	{r4, r5, r6, pc}
 800e808:	0800fc6d 	.word	0x0800fc6d
 800e80c:	0800fcf4 	.word	0x0800fcf4

0800e810 <__multadd>:
 800e810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e814:	690e      	ldr	r6, [r1, #16]
 800e816:	4607      	mov	r7, r0
 800e818:	4698      	mov	r8, r3
 800e81a:	460c      	mov	r4, r1
 800e81c:	f101 0014 	add.w	r0, r1, #20
 800e820:	2300      	movs	r3, #0
 800e822:	6805      	ldr	r5, [r0, #0]
 800e824:	b2a9      	uxth	r1, r5
 800e826:	fb02 8101 	mla	r1, r2, r1, r8
 800e82a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e82e:	0c2d      	lsrs	r5, r5, #16
 800e830:	fb02 c505 	mla	r5, r2, r5, ip
 800e834:	b289      	uxth	r1, r1
 800e836:	3301      	adds	r3, #1
 800e838:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e83c:	429e      	cmp	r6, r3
 800e83e:	f840 1b04 	str.w	r1, [r0], #4
 800e842:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e846:	dcec      	bgt.n	800e822 <__multadd+0x12>
 800e848:	f1b8 0f00 	cmp.w	r8, #0
 800e84c:	d022      	beq.n	800e894 <__multadd+0x84>
 800e84e:	68a3      	ldr	r3, [r4, #8]
 800e850:	42b3      	cmp	r3, r6
 800e852:	dc19      	bgt.n	800e888 <__multadd+0x78>
 800e854:	6861      	ldr	r1, [r4, #4]
 800e856:	4638      	mov	r0, r7
 800e858:	3101      	adds	r1, #1
 800e85a:	f7ff ff77 	bl	800e74c <_Balloc>
 800e85e:	4605      	mov	r5, r0
 800e860:	b928      	cbnz	r0, 800e86e <__multadd+0x5e>
 800e862:	4602      	mov	r2, r0
 800e864:	4b0d      	ldr	r3, [pc, #52]	; (800e89c <__multadd+0x8c>)
 800e866:	480e      	ldr	r0, [pc, #56]	; (800e8a0 <__multadd+0x90>)
 800e868:	21b5      	movs	r1, #181	; 0xb5
 800e86a:	f000 fbb7 	bl	800efdc <__assert_func>
 800e86e:	6922      	ldr	r2, [r4, #16]
 800e870:	3202      	adds	r2, #2
 800e872:	f104 010c 	add.w	r1, r4, #12
 800e876:	0092      	lsls	r2, r2, #2
 800e878:	300c      	adds	r0, #12
 800e87a:	f7ff ff59 	bl	800e730 <memcpy>
 800e87e:	4621      	mov	r1, r4
 800e880:	4638      	mov	r0, r7
 800e882:	f7ff ffa3 	bl	800e7cc <_Bfree>
 800e886:	462c      	mov	r4, r5
 800e888:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e88c:	3601      	adds	r6, #1
 800e88e:	f8c3 8014 	str.w	r8, [r3, #20]
 800e892:	6126      	str	r6, [r4, #16]
 800e894:	4620      	mov	r0, r4
 800e896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e89a:	bf00      	nop
 800e89c:	0800fce3 	.word	0x0800fce3
 800e8a0:	0800fcf4 	.word	0x0800fcf4

0800e8a4 <__hi0bits>:
 800e8a4:	0c03      	lsrs	r3, r0, #16
 800e8a6:	041b      	lsls	r3, r3, #16
 800e8a8:	b9d3      	cbnz	r3, 800e8e0 <__hi0bits+0x3c>
 800e8aa:	0400      	lsls	r0, r0, #16
 800e8ac:	2310      	movs	r3, #16
 800e8ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e8b2:	bf04      	itt	eq
 800e8b4:	0200      	lsleq	r0, r0, #8
 800e8b6:	3308      	addeq	r3, #8
 800e8b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e8bc:	bf04      	itt	eq
 800e8be:	0100      	lsleq	r0, r0, #4
 800e8c0:	3304      	addeq	r3, #4
 800e8c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e8c6:	bf04      	itt	eq
 800e8c8:	0080      	lsleq	r0, r0, #2
 800e8ca:	3302      	addeq	r3, #2
 800e8cc:	2800      	cmp	r0, #0
 800e8ce:	db05      	blt.n	800e8dc <__hi0bits+0x38>
 800e8d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e8d4:	f103 0301 	add.w	r3, r3, #1
 800e8d8:	bf08      	it	eq
 800e8da:	2320      	moveq	r3, #32
 800e8dc:	4618      	mov	r0, r3
 800e8de:	4770      	bx	lr
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	e7e4      	b.n	800e8ae <__hi0bits+0xa>

0800e8e4 <__lo0bits>:
 800e8e4:	6803      	ldr	r3, [r0, #0]
 800e8e6:	f013 0207 	ands.w	r2, r3, #7
 800e8ea:	4601      	mov	r1, r0
 800e8ec:	d00b      	beq.n	800e906 <__lo0bits+0x22>
 800e8ee:	07da      	lsls	r2, r3, #31
 800e8f0:	d424      	bmi.n	800e93c <__lo0bits+0x58>
 800e8f2:	0798      	lsls	r0, r3, #30
 800e8f4:	bf49      	itett	mi
 800e8f6:	085b      	lsrmi	r3, r3, #1
 800e8f8:	089b      	lsrpl	r3, r3, #2
 800e8fa:	2001      	movmi	r0, #1
 800e8fc:	600b      	strmi	r3, [r1, #0]
 800e8fe:	bf5c      	itt	pl
 800e900:	600b      	strpl	r3, [r1, #0]
 800e902:	2002      	movpl	r0, #2
 800e904:	4770      	bx	lr
 800e906:	b298      	uxth	r0, r3
 800e908:	b9b0      	cbnz	r0, 800e938 <__lo0bits+0x54>
 800e90a:	0c1b      	lsrs	r3, r3, #16
 800e90c:	2010      	movs	r0, #16
 800e90e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e912:	bf04      	itt	eq
 800e914:	0a1b      	lsreq	r3, r3, #8
 800e916:	3008      	addeq	r0, #8
 800e918:	071a      	lsls	r2, r3, #28
 800e91a:	bf04      	itt	eq
 800e91c:	091b      	lsreq	r3, r3, #4
 800e91e:	3004      	addeq	r0, #4
 800e920:	079a      	lsls	r2, r3, #30
 800e922:	bf04      	itt	eq
 800e924:	089b      	lsreq	r3, r3, #2
 800e926:	3002      	addeq	r0, #2
 800e928:	07da      	lsls	r2, r3, #31
 800e92a:	d403      	bmi.n	800e934 <__lo0bits+0x50>
 800e92c:	085b      	lsrs	r3, r3, #1
 800e92e:	f100 0001 	add.w	r0, r0, #1
 800e932:	d005      	beq.n	800e940 <__lo0bits+0x5c>
 800e934:	600b      	str	r3, [r1, #0]
 800e936:	4770      	bx	lr
 800e938:	4610      	mov	r0, r2
 800e93a:	e7e8      	b.n	800e90e <__lo0bits+0x2a>
 800e93c:	2000      	movs	r0, #0
 800e93e:	4770      	bx	lr
 800e940:	2020      	movs	r0, #32
 800e942:	4770      	bx	lr

0800e944 <__i2b>:
 800e944:	b510      	push	{r4, lr}
 800e946:	460c      	mov	r4, r1
 800e948:	2101      	movs	r1, #1
 800e94a:	f7ff feff 	bl	800e74c <_Balloc>
 800e94e:	4602      	mov	r2, r0
 800e950:	b928      	cbnz	r0, 800e95e <__i2b+0x1a>
 800e952:	4b05      	ldr	r3, [pc, #20]	; (800e968 <__i2b+0x24>)
 800e954:	4805      	ldr	r0, [pc, #20]	; (800e96c <__i2b+0x28>)
 800e956:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e95a:	f000 fb3f 	bl	800efdc <__assert_func>
 800e95e:	2301      	movs	r3, #1
 800e960:	6144      	str	r4, [r0, #20]
 800e962:	6103      	str	r3, [r0, #16]
 800e964:	bd10      	pop	{r4, pc}
 800e966:	bf00      	nop
 800e968:	0800fce3 	.word	0x0800fce3
 800e96c:	0800fcf4 	.word	0x0800fcf4

0800e970 <__multiply>:
 800e970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e974:	4614      	mov	r4, r2
 800e976:	690a      	ldr	r2, [r1, #16]
 800e978:	6923      	ldr	r3, [r4, #16]
 800e97a:	429a      	cmp	r2, r3
 800e97c:	bfb8      	it	lt
 800e97e:	460b      	movlt	r3, r1
 800e980:	460d      	mov	r5, r1
 800e982:	bfbc      	itt	lt
 800e984:	4625      	movlt	r5, r4
 800e986:	461c      	movlt	r4, r3
 800e988:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e98c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e990:	68ab      	ldr	r3, [r5, #8]
 800e992:	6869      	ldr	r1, [r5, #4]
 800e994:	eb0a 0709 	add.w	r7, sl, r9
 800e998:	42bb      	cmp	r3, r7
 800e99a:	b085      	sub	sp, #20
 800e99c:	bfb8      	it	lt
 800e99e:	3101      	addlt	r1, #1
 800e9a0:	f7ff fed4 	bl	800e74c <_Balloc>
 800e9a4:	b930      	cbnz	r0, 800e9b4 <__multiply+0x44>
 800e9a6:	4602      	mov	r2, r0
 800e9a8:	4b42      	ldr	r3, [pc, #264]	; (800eab4 <__multiply+0x144>)
 800e9aa:	4843      	ldr	r0, [pc, #268]	; (800eab8 <__multiply+0x148>)
 800e9ac:	f240 115d 	movw	r1, #349	; 0x15d
 800e9b0:	f000 fb14 	bl	800efdc <__assert_func>
 800e9b4:	f100 0614 	add.w	r6, r0, #20
 800e9b8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e9bc:	4633      	mov	r3, r6
 800e9be:	2200      	movs	r2, #0
 800e9c0:	4543      	cmp	r3, r8
 800e9c2:	d31e      	bcc.n	800ea02 <__multiply+0x92>
 800e9c4:	f105 0c14 	add.w	ip, r5, #20
 800e9c8:	f104 0314 	add.w	r3, r4, #20
 800e9cc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e9d0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e9d4:	9202      	str	r2, [sp, #8]
 800e9d6:	ebac 0205 	sub.w	r2, ip, r5
 800e9da:	3a15      	subs	r2, #21
 800e9dc:	f022 0203 	bic.w	r2, r2, #3
 800e9e0:	3204      	adds	r2, #4
 800e9e2:	f105 0115 	add.w	r1, r5, #21
 800e9e6:	458c      	cmp	ip, r1
 800e9e8:	bf38      	it	cc
 800e9ea:	2204      	movcc	r2, #4
 800e9ec:	9201      	str	r2, [sp, #4]
 800e9ee:	9a02      	ldr	r2, [sp, #8]
 800e9f0:	9303      	str	r3, [sp, #12]
 800e9f2:	429a      	cmp	r2, r3
 800e9f4:	d808      	bhi.n	800ea08 <__multiply+0x98>
 800e9f6:	2f00      	cmp	r7, #0
 800e9f8:	dc55      	bgt.n	800eaa6 <__multiply+0x136>
 800e9fa:	6107      	str	r7, [r0, #16]
 800e9fc:	b005      	add	sp, #20
 800e9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea02:	f843 2b04 	str.w	r2, [r3], #4
 800ea06:	e7db      	b.n	800e9c0 <__multiply+0x50>
 800ea08:	f8b3 a000 	ldrh.w	sl, [r3]
 800ea0c:	f1ba 0f00 	cmp.w	sl, #0
 800ea10:	d020      	beq.n	800ea54 <__multiply+0xe4>
 800ea12:	f105 0e14 	add.w	lr, r5, #20
 800ea16:	46b1      	mov	r9, r6
 800ea18:	2200      	movs	r2, #0
 800ea1a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ea1e:	f8d9 b000 	ldr.w	fp, [r9]
 800ea22:	b2a1      	uxth	r1, r4
 800ea24:	fa1f fb8b 	uxth.w	fp, fp
 800ea28:	fb0a b101 	mla	r1, sl, r1, fp
 800ea2c:	4411      	add	r1, r2
 800ea2e:	f8d9 2000 	ldr.w	r2, [r9]
 800ea32:	0c24      	lsrs	r4, r4, #16
 800ea34:	0c12      	lsrs	r2, r2, #16
 800ea36:	fb0a 2404 	mla	r4, sl, r4, r2
 800ea3a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ea3e:	b289      	uxth	r1, r1
 800ea40:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ea44:	45f4      	cmp	ip, lr
 800ea46:	f849 1b04 	str.w	r1, [r9], #4
 800ea4a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ea4e:	d8e4      	bhi.n	800ea1a <__multiply+0xaa>
 800ea50:	9901      	ldr	r1, [sp, #4]
 800ea52:	5072      	str	r2, [r6, r1]
 800ea54:	9a03      	ldr	r2, [sp, #12]
 800ea56:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ea5a:	3304      	adds	r3, #4
 800ea5c:	f1b9 0f00 	cmp.w	r9, #0
 800ea60:	d01f      	beq.n	800eaa2 <__multiply+0x132>
 800ea62:	6834      	ldr	r4, [r6, #0]
 800ea64:	f105 0114 	add.w	r1, r5, #20
 800ea68:	46b6      	mov	lr, r6
 800ea6a:	f04f 0a00 	mov.w	sl, #0
 800ea6e:	880a      	ldrh	r2, [r1, #0]
 800ea70:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ea74:	fb09 b202 	mla	r2, r9, r2, fp
 800ea78:	4492      	add	sl, r2
 800ea7a:	b2a4      	uxth	r4, r4
 800ea7c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ea80:	f84e 4b04 	str.w	r4, [lr], #4
 800ea84:	f851 4b04 	ldr.w	r4, [r1], #4
 800ea88:	f8be 2000 	ldrh.w	r2, [lr]
 800ea8c:	0c24      	lsrs	r4, r4, #16
 800ea8e:	fb09 2404 	mla	r4, r9, r4, r2
 800ea92:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ea96:	458c      	cmp	ip, r1
 800ea98:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ea9c:	d8e7      	bhi.n	800ea6e <__multiply+0xfe>
 800ea9e:	9a01      	ldr	r2, [sp, #4]
 800eaa0:	50b4      	str	r4, [r6, r2]
 800eaa2:	3604      	adds	r6, #4
 800eaa4:	e7a3      	b.n	800e9ee <__multiply+0x7e>
 800eaa6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d1a5      	bne.n	800e9fa <__multiply+0x8a>
 800eaae:	3f01      	subs	r7, #1
 800eab0:	e7a1      	b.n	800e9f6 <__multiply+0x86>
 800eab2:	bf00      	nop
 800eab4:	0800fce3 	.word	0x0800fce3
 800eab8:	0800fcf4 	.word	0x0800fcf4

0800eabc <__pow5mult>:
 800eabc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eac0:	4615      	mov	r5, r2
 800eac2:	f012 0203 	ands.w	r2, r2, #3
 800eac6:	4606      	mov	r6, r0
 800eac8:	460f      	mov	r7, r1
 800eaca:	d007      	beq.n	800eadc <__pow5mult+0x20>
 800eacc:	4c25      	ldr	r4, [pc, #148]	; (800eb64 <__pow5mult+0xa8>)
 800eace:	3a01      	subs	r2, #1
 800ead0:	2300      	movs	r3, #0
 800ead2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ead6:	f7ff fe9b 	bl	800e810 <__multadd>
 800eada:	4607      	mov	r7, r0
 800eadc:	10ad      	asrs	r5, r5, #2
 800eade:	d03d      	beq.n	800eb5c <__pow5mult+0xa0>
 800eae0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800eae2:	b97c      	cbnz	r4, 800eb04 <__pow5mult+0x48>
 800eae4:	2010      	movs	r0, #16
 800eae6:	f7ff fe1b 	bl	800e720 <malloc>
 800eaea:	4602      	mov	r2, r0
 800eaec:	6270      	str	r0, [r6, #36]	; 0x24
 800eaee:	b928      	cbnz	r0, 800eafc <__pow5mult+0x40>
 800eaf0:	4b1d      	ldr	r3, [pc, #116]	; (800eb68 <__pow5mult+0xac>)
 800eaf2:	481e      	ldr	r0, [pc, #120]	; (800eb6c <__pow5mult+0xb0>)
 800eaf4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800eaf8:	f000 fa70 	bl	800efdc <__assert_func>
 800eafc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eb00:	6004      	str	r4, [r0, #0]
 800eb02:	60c4      	str	r4, [r0, #12]
 800eb04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800eb08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800eb0c:	b94c      	cbnz	r4, 800eb22 <__pow5mult+0x66>
 800eb0e:	f240 2171 	movw	r1, #625	; 0x271
 800eb12:	4630      	mov	r0, r6
 800eb14:	f7ff ff16 	bl	800e944 <__i2b>
 800eb18:	2300      	movs	r3, #0
 800eb1a:	f8c8 0008 	str.w	r0, [r8, #8]
 800eb1e:	4604      	mov	r4, r0
 800eb20:	6003      	str	r3, [r0, #0]
 800eb22:	f04f 0900 	mov.w	r9, #0
 800eb26:	07eb      	lsls	r3, r5, #31
 800eb28:	d50a      	bpl.n	800eb40 <__pow5mult+0x84>
 800eb2a:	4639      	mov	r1, r7
 800eb2c:	4622      	mov	r2, r4
 800eb2e:	4630      	mov	r0, r6
 800eb30:	f7ff ff1e 	bl	800e970 <__multiply>
 800eb34:	4639      	mov	r1, r7
 800eb36:	4680      	mov	r8, r0
 800eb38:	4630      	mov	r0, r6
 800eb3a:	f7ff fe47 	bl	800e7cc <_Bfree>
 800eb3e:	4647      	mov	r7, r8
 800eb40:	106d      	asrs	r5, r5, #1
 800eb42:	d00b      	beq.n	800eb5c <__pow5mult+0xa0>
 800eb44:	6820      	ldr	r0, [r4, #0]
 800eb46:	b938      	cbnz	r0, 800eb58 <__pow5mult+0x9c>
 800eb48:	4622      	mov	r2, r4
 800eb4a:	4621      	mov	r1, r4
 800eb4c:	4630      	mov	r0, r6
 800eb4e:	f7ff ff0f 	bl	800e970 <__multiply>
 800eb52:	6020      	str	r0, [r4, #0]
 800eb54:	f8c0 9000 	str.w	r9, [r0]
 800eb58:	4604      	mov	r4, r0
 800eb5a:	e7e4      	b.n	800eb26 <__pow5mult+0x6a>
 800eb5c:	4638      	mov	r0, r7
 800eb5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb62:	bf00      	nop
 800eb64:	0800fe48 	.word	0x0800fe48
 800eb68:	0800fc6d 	.word	0x0800fc6d
 800eb6c:	0800fcf4 	.word	0x0800fcf4

0800eb70 <__lshift>:
 800eb70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb74:	460c      	mov	r4, r1
 800eb76:	6849      	ldr	r1, [r1, #4]
 800eb78:	6923      	ldr	r3, [r4, #16]
 800eb7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eb7e:	68a3      	ldr	r3, [r4, #8]
 800eb80:	4607      	mov	r7, r0
 800eb82:	4691      	mov	r9, r2
 800eb84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eb88:	f108 0601 	add.w	r6, r8, #1
 800eb8c:	42b3      	cmp	r3, r6
 800eb8e:	db0b      	blt.n	800eba8 <__lshift+0x38>
 800eb90:	4638      	mov	r0, r7
 800eb92:	f7ff fddb 	bl	800e74c <_Balloc>
 800eb96:	4605      	mov	r5, r0
 800eb98:	b948      	cbnz	r0, 800ebae <__lshift+0x3e>
 800eb9a:	4602      	mov	r2, r0
 800eb9c:	4b28      	ldr	r3, [pc, #160]	; (800ec40 <__lshift+0xd0>)
 800eb9e:	4829      	ldr	r0, [pc, #164]	; (800ec44 <__lshift+0xd4>)
 800eba0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800eba4:	f000 fa1a 	bl	800efdc <__assert_func>
 800eba8:	3101      	adds	r1, #1
 800ebaa:	005b      	lsls	r3, r3, #1
 800ebac:	e7ee      	b.n	800eb8c <__lshift+0x1c>
 800ebae:	2300      	movs	r3, #0
 800ebb0:	f100 0114 	add.w	r1, r0, #20
 800ebb4:	f100 0210 	add.w	r2, r0, #16
 800ebb8:	4618      	mov	r0, r3
 800ebba:	4553      	cmp	r3, sl
 800ebbc:	db33      	blt.n	800ec26 <__lshift+0xb6>
 800ebbe:	6920      	ldr	r0, [r4, #16]
 800ebc0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ebc4:	f104 0314 	add.w	r3, r4, #20
 800ebc8:	f019 091f 	ands.w	r9, r9, #31
 800ebcc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ebd0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ebd4:	d02b      	beq.n	800ec2e <__lshift+0xbe>
 800ebd6:	f1c9 0e20 	rsb	lr, r9, #32
 800ebda:	468a      	mov	sl, r1
 800ebdc:	2200      	movs	r2, #0
 800ebde:	6818      	ldr	r0, [r3, #0]
 800ebe0:	fa00 f009 	lsl.w	r0, r0, r9
 800ebe4:	4302      	orrs	r2, r0
 800ebe6:	f84a 2b04 	str.w	r2, [sl], #4
 800ebea:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebee:	459c      	cmp	ip, r3
 800ebf0:	fa22 f20e 	lsr.w	r2, r2, lr
 800ebf4:	d8f3      	bhi.n	800ebde <__lshift+0x6e>
 800ebf6:	ebac 0304 	sub.w	r3, ip, r4
 800ebfa:	3b15      	subs	r3, #21
 800ebfc:	f023 0303 	bic.w	r3, r3, #3
 800ec00:	3304      	adds	r3, #4
 800ec02:	f104 0015 	add.w	r0, r4, #21
 800ec06:	4584      	cmp	ip, r0
 800ec08:	bf38      	it	cc
 800ec0a:	2304      	movcc	r3, #4
 800ec0c:	50ca      	str	r2, [r1, r3]
 800ec0e:	b10a      	cbz	r2, 800ec14 <__lshift+0xa4>
 800ec10:	f108 0602 	add.w	r6, r8, #2
 800ec14:	3e01      	subs	r6, #1
 800ec16:	4638      	mov	r0, r7
 800ec18:	612e      	str	r6, [r5, #16]
 800ec1a:	4621      	mov	r1, r4
 800ec1c:	f7ff fdd6 	bl	800e7cc <_Bfree>
 800ec20:	4628      	mov	r0, r5
 800ec22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec26:	f842 0f04 	str.w	r0, [r2, #4]!
 800ec2a:	3301      	adds	r3, #1
 800ec2c:	e7c5      	b.n	800ebba <__lshift+0x4a>
 800ec2e:	3904      	subs	r1, #4
 800ec30:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec34:	f841 2f04 	str.w	r2, [r1, #4]!
 800ec38:	459c      	cmp	ip, r3
 800ec3a:	d8f9      	bhi.n	800ec30 <__lshift+0xc0>
 800ec3c:	e7ea      	b.n	800ec14 <__lshift+0xa4>
 800ec3e:	bf00      	nop
 800ec40:	0800fce3 	.word	0x0800fce3
 800ec44:	0800fcf4 	.word	0x0800fcf4

0800ec48 <__mcmp>:
 800ec48:	b530      	push	{r4, r5, lr}
 800ec4a:	6902      	ldr	r2, [r0, #16]
 800ec4c:	690c      	ldr	r4, [r1, #16]
 800ec4e:	1b12      	subs	r2, r2, r4
 800ec50:	d10e      	bne.n	800ec70 <__mcmp+0x28>
 800ec52:	f100 0314 	add.w	r3, r0, #20
 800ec56:	3114      	adds	r1, #20
 800ec58:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ec5c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ec60:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ec64:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ec68:	42a5      	cmp	r5, r4
 800ec6a:	d003      	beq.n	800ec74 <__mcmp+0x2c>
 800ec6c:	d305      	bcc.n	800ec7a <__mcmp+0x32>
 800ec6e:	2201      	movs	r2, #1
 800ec70:	4610      	mov	r0, r2
 800ec72:	bd30      	pop	{r4, r5, pc}
 800ec74:	4283      	cmp	r3, r0
 800ec76:	d3f3      	bcc.n	800ec60 <__mcmp+0x18>
 800ec78:	e7fa      	b.n	800ec70 <__mcmp+0x28>
 800ec7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ec7e:	e7f7      	b.n	800ec70 <__mcmp+0x28>

0800ec80 <__mdiff>:
 800ec80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec84:	460c      	mov	r4, r1
 800ec86:	4606      	mov	r6, r0
 800ec88:	4611      	mov	r1, r2
 800ec8a:	4620      	mov	r0, r4
 800ec8c:	4617      	mov	r7, r2
 800ec8e:	f7ff ffdb 	bl	800ec48 <__mcmp>
 800ec92:	1e05      	subs	r5, r0, #0
 800ec94:	d110      	bne.n	800ecb8 <__mdiff+0x38>
 800ec96:	4629      	mov	r1, r5
 800ec98:	4630      	mov	r0, r6
 800ec9a:	f7ff fd57 	bl	800e74c <_Balloc>
 800ec9e:	b930      	cbnz	r0, 800ecae <__mdiff+0x2e>
 800eca0:	4b39      	ldr	r3, [pc, #228]	; (800ed88 <__mdiff+0x108>)
 800eca2:	4602      	mov	r2, r0
 800eca4:	f240 2132 	movw	r1, #562	; 0x232
 800eca8:	4838      	ldr	r0, [pc, #224]	; (800ed8c <__mdiff+0x10c>)
 800ecaa:	f000 f997 	bl	800efdc <__assert_func>
 800ecae:	2301      	movs	r3, #1
 800ecb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ecb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecb8:	bfa4      	itt	ge
 800ecba:	463b      	movge	r3, r7
 800ecbc:	4627      	movge	r7, r4
 800ecbe:	4630      	mov	r0, r6
 800ecc0:	6879      	ldr	r1, [r7, #4]
 800ecc2:	bfa6      	itte	ge
 800ecc4:	461c      	movge	r4, r3
 800ecc6:	2500      	movge	r5, #0
 800ecc8:	2501      	movlt	r5, #1
 800ecca:	f7ff fd3f 	bl	800e74c <_Balloc>
 800ecce:	b920      	cbnz	r0, 800ecda <__mdiff+0x5a>
 800ecd0:	4b2d      	ldr	r3, [pc, #180]	; (800ed88 <__mdiff+0x108>)
 800ecd2:	4602      	mov	r2, r0
 800ecd4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ecd8:	e7e6      	b.n	800eca8 <__mdiff+0x28>
 800ecda:	693e      	ldr	r6, [r7, #16]
 800ecdc:	60c5      	str	r5, [r0, #12]
 800ecde:	6925      	ldr	r5, [r4, #16]
 800ece0:	f107 0114 	add.w	r1, r7, #20
 800ece4:	f104 0914 	add.w	r9, r4, #20
 800ece8:	f100 0e14 	add.w	lr, r0, #20
 800ecec:	f107 0210 	add.w	r2, r7, #16
 800ecf0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ecf4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ecf8:	46f2      	mov	sl, lr
 800ecfa:	2700      	movs	r7, #0
 800ecfc:	f859 3b04 	ldr.w	r3, [r9], #4
 800ed00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ed04:	fa1f f883 	uxth.w	r8, r3
 800ed08:	fa17 f78b 	uxtah	r7, r7, fp
 800ed0c:	0c1b      	lsrs	r3, r3, #16
 800ed0e:	eba7 0808 	sub.w	r8, r7, r8
 800ed12:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ed16:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ed1a:	fa1f f888 	uxth.w	r8, r8
 800ed1e:	141f      	asrs	r7, r3, #16
 800ed20:	454d      	cmp	r5, r9
 800ed22:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ed26:	f84a 3b04 	str.w	r3, [sl], #4
 800ed2a:	d8e7      	bhi.n	800ecfc <__mdiff+0x7c>
 800ed2c:	1b2b      	subs	r3, r5, r4
 800ed2e:	3b15      	subs	r3, #21
 800ed30:	f023 0303 	bic.w	r3, r3, #3
 800ed34:	3304      	adds	r3, #4
 800ed36:	3415      	adds	r4, #21
 800ed38:	42a5      	cmp	r5, r4
 800ed3a:	bf38      	it	cc
 800ed3c:	2304      	movcc	r3, #4
 800ed3e:	4419      	add	r1, r3
 800ed40:	4473      	add	r3, lr
 800ed42:	469e      	mov	lr, r3
 800ed44:	460d      	mov	r5, r1
 800ed46:	4565      	cmp	r5, ip
 800ed48:	d30e      	bcc.n	800ed68 <__mdiff+0xe8>
 800ed4a:	f10c 0203 	add.w	r2, ip, #3
 800ed4e:	1a52      	subs	r2, r2, r1
 800ed50:	f022 0203 	bic.w	r2, r2, #3
 800ed54:	3903      	subs	r1, #3
 800ed56:	458c      	cmp	ip, r1
 800ed58:	bf38      	it	cc
 800ed5a:	2200      	movcc	r2, #0
 800ed5c:	441a      	add	r2, r3
 800ed5e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ed62:	b17b      	cbz	r3, 800ed84 <__mdiff+0x104>
 800ed64:	6106      	str	r6, [r0, #16]
 800ed66:	e7a5      	b.n	800ecb4 <__mdiff+0x34>
 800ed68:	f855 8b04 	ldr.w	r8, [r5], #4
 800ed6c:	fa17 f488 	uxtah	r4, r7, r8
 800ed70:	1422      	asrs	r2, r4, #16
 800ed72:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ed76:	b2a4      	uxth	r4, r4
 800ed78:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ed7c:	f84e 4b04 	str.w	r4, [lr], #4
 800ed80:	1417      	asrs	r7, r2, #16
 800ed82:	e7e0      	b.n	800ed46 <__mdiff+0xc6>
 800ed84:	3e01      	subs	r6, #1
 800ed86:	e7ea      	b.n	800ed5e <__mdiff+0xde>
 800ed88:	0800fce3 	.word	0x0800fce3
 800ed8c:	0800fcf4 	.word	0x0800fcf4

0800ed90 <__d2b>:
 800ed90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ed94:	4689      	mov	r9, r1
 800ed96:	2101      	movs	r1, #1
 800ed98:	ec57 6b10 	vmov	r6, r7, d0
 800ed9c:	4690      	mov	r8, r2
 800ed9e:	f7ff fcd5 	bl	800e74c <_Balloc>
 800eda2:	4604      	mov	r4, r0
 800eda4:	b930      	cbnz	r0, 800edb4 <__d2b+0x24>
 800eda6:	4602      	mov	r2, r0
 800eda8:	4b25      	ldr	r3, [pc, #148]	; (800ee40 <__d2b+0xb0>)
 800edaa:	4826      	ldr	r0, [pc, #152]	; (800ee44 <__d2b+0xb4>)
 800edac:	f240 310a 	movw	r1, #778	; 0x30a
 800edb0:	f000 f914 	bl	800efdc <__assert_func>
 800edb4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800edb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800edbc:	bb35      	cbnz	r5, 800ee0c <__d2b+0x7c>
 800edbe:	2e00      	cmp	r6, #0
 800edc0:	9301      	str	r3, [sp, #4]
 800edc2:	d028      	beq.n	800ee16 <__d2b+0x86>
 800edc4:	4668      	mov	r0, sp
 800edc6:	9600      	str	r6, [sp, #0]
 800edc8:	f7ff fd8c 	bl	800e8e4 <__lo0bits>
 800edcc:	9900      	ldr	r1, [sp, #0]
 800edce:	b300      	cbz	r0, 800ee12 <__d2b+0x82>
 800edd0:	9a01      	ldr	r2, [sp, #4]
 800edd2:	f1c0 0320 	rsb	r3, r0, #32
 800edd6:	fa02 f303 	lsl.w	r3, r2, r3
 800edda:	430b      	orrs	r3, r1
 800eddc:	40c2      	lsrs	r2, r0
 800edde:	6163      	str	r3, [r4, #20]
 800ede0:	9201      	str	r2, [sp, #4]
 800ede2:	9b01      	ldr	r3, [sp, #4]
 800ede4:	61a3      	str	r3, [r4, #24]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	bf14      	ite	ne
 800edea:	2202      	movne	r2, #2
 800edec:	2201      	moveq	r2, #1
 800edee:	6122      	str	r2, [r4, #16]
 800edf0:	b1d5      	cbz	r5, 800ee28 <__d2b+0x98>
 800edf2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800edf6:	4405      	add	r5, r0
 800edf8:	f8c9 5000 	str.w	r5, [r9]
 800edfc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ee00:	f8c8 0000 	str.w	r0, [r8]
 800ee04:	4620      	mov	r0, r4
 800ee06:	b003      	add	sp, #12
 800ee08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ee10:	e7d5      	b.n	800edbe <__d2b+0x2e>
 800ee12:	6161      	str	r1, [r4, #20]
 800ee14:	e7e5      	b.n	800ede2 <__d2b+0x52>
 800ee16:	a801      	add	r0, sp, #4
 800ee18:	f7ff fd64 	bl	800e8e4 <__lo0bits>
 800ee1c:	9b01      	ldr	r3, [sp, #4]
 800ee1e:	6163      	str	r3, [r4, #20]
 800ee20:	2201      	movs	r2, #1
 800ee22:	6122      	str	r2, [r4, #16]
 800ee24:	3020      	adds	r0, #32
 800ee26:	e7e3      	b.n	800edf0 <__d2b+0x60>
 800ee28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ee2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ee30:	f8c9 0000 	str.w	r0, [r9]
 800ee34:	6918      	ldr	r0, [r3, #16]
 800ee36:	f7ff fd35 	bl	800e8a4 <__hi0bits>
 800ee3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ee3e:	e7df      	b.n	800ee00 <__d2b+0x70>
 800ee40:	0800fce3 	.word	0x0800fce3
 800ee44:	0800fcf4 	.word	0x0800fcf4

0800ee48 <_calloc_r>:
 800ee48:	b513      	push	{r0, r1, r4, lr}
 800ee4a:	434a      	muls	r2, r1
 800ee4c:	4611      	mov	r1, r2
 800ee4e:	9201      	str	r2, [sp, #4]
 800ee50:	f000 f85a 	bl	800ef08 <_malloc_r>
 800ee54:	4604      	mov	r4, r0
 800ee56:	b118      	cbz	r0, 800ee60 <_calloc_r+0x18>
 800ee58:	9a01      	ldr	r2, [sp, #4]
 800ee5a:	2100      	movs	r1, #0
 800ee5c:	f7fe f970 	bl	800d140 <memset>
 800ee60:	4620      	mov	r0, r4
 800ee62:	b002      	add	sp, #8
 800ee64:	bd10      	pop	{r4, pc}
	...

0800ee68 <_free_r>:
 800ee68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ee6a:	2900      	cmp	r1, #0
 800ee6c:	d048      	beq.n	800ef00 <_free_r+0x98>
 800ee6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee72:	9001      	str	r0, [sp, #4]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	f1a1 0404 	sub.w	r4, r1, #4
 800ee7a:	bfb8      	it	lt
 800ee7c:	18e4      	addlt	r4, r4, r3
 800ee7e:	f000 f8ef 	bl	800f060 <__malloc_lock>
 800ee82:	4a20      	ldr	r2, [pc, #128]	; (800ef04 <_free_r+0x9c>)
 800ee84:	9801      	ldr	r0, [sp, #4]
 800ee86:	6813      	ldr	r3, [r2, #0]
 800ee88:	4615      	mov	r5, r2
 800ee8a:	b933      	cbnz	r3, 800ee9a <_free_r+0x32>
 800ee8c:	6063      	str	r3, [r4, #4]
 800ee8e:	6014      	str	r4, [r2, #0]
 800ee90:	b003      	add	sp, #12
 800ee92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ee96:	f000 b8e9 	b.w	800f06c <__malloc_unlock>
 800ee9a:	42a3      	cmp	r3, r4
 800ee9c:	d90b      	bls.n	800eeb6 <_free_r+0x4e>
 800ee9e:	6821      	ldr	r1, [r4, #0]
 800eea0:	1862      	adds	r2, r4, r1
 800eea2:	4293      	cmp	r3, r2
 800eea4:	bf04      	itt	eq
 800eea6:	681a      	ldreq	r2, [r3, #0]
 800eea8:	685b      	ldreq	r3, [r3, #4]
 800eeaa:	6063      	str	r3, [r4, #4]
 800eeac:	bf04      	itt	eq
 800eeae:	1852      	addeq	r2, r2, r1
 800eeb0:	6022      	streq	r2, [r4, #0]
 800eeb2:	602c      	str	r4, [r5, #0]
 800eeb4:	e7ec      	b.n	800ee90 <_free_r+0x28>
 800eeb6:	461a      	mov	r2, r3
 800eeb8:	685b      	ldr	r3, [r3, #4]
 800eeba:	b10b      	cbz	r3, 800eec0 <_free_r+0x58>
 800eebc:	42a3      	cmp	r3, r4
 800eebe:	d9fa      	bls.n	800eeb6 <_free_r+0x4e>
 800eec0:	6811      	ldr	r1, [r2, #0]
 800eec2:	1855      	adds	r5, r2, r1
 800eec4:	42a5      	cmp	r5, r4
 800eec6:	d10b      	bne.n	800eee0 <_free_r+0x78>
 800eec8:	6824      	ldr	r4, [r4, #0]
 800eeca:	4421      	add	r1, r4
 800eecc:	1854      	adds	r4, r2, r1
 800eece:	42a3      	cmp	r3, r4
 800eed0:	6011      	str	r1, [r2, #0]
 800eed2:	d1dd      	bne.n	800ee90 <_free_r+0x28>
 800eed4:	681c      	ldr	r4, [r3, #0]
 800eed6:	685b      	ldr	r3, [r3, #4]
 800eed8:	6053      	str	r3, [r2, #4]
 800eeda:	4421      	add	r1, r4
 800eedc:	6011      	str	r1, [r2, #0]
 800eede:	e7d7      	b.n	800ee90 <_free_r+0x28>
 800eee0:	d902      	bls.n	800eee8 <_free_r+0x80>
 800eee2:	230c      	movs	r3, #12
 800eee4:	6003      	str	r3, [r0, #0]
 800eee6:	e7d3      	b.n	800ee90 <_free_r+0x28>
 800eee8:	6825      	ldr	r5, [r4, #0]
 800eeea:	1961      	adds	r1, r4, r5
 800eeec:	428b      	cmp	r3, r1
 800eeee:	bf04      	itt	eq
 800eef0:	6819      	ldreq	r1, [r3, #0]
 800eef2:	685b      	ldreq	r3, [r3, #4]
 800eef4:	6063      	str	r3, [r4, #4]
 800eef6:	bf04      	itt	eq
 800eef8:	1949      	addeq	r1, r1, r5
 800eefa:	6021      	streq	r1, [r4, #0]
 800eefc:	6054      	str	r4, [r2, #4]
 800eefe:	e7c7      	b.n	800ee90 <_free_r+0x28>
 800ef00:	b003      	add	sp, #12
 800ef02:	bd30      	pop	{r4, r5, pc}
 800ef04:	20000a14 	.word	0x20000a14

0800ef08 <_malloc_r>:
 800ef08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef0a:	1ccd      	adds	r5, r1, #3
 800ef0c:	f025 0503 	bic.w	r5, r5, #3
 800ef10:	3508      	adds	r5, #8
 800ef12:	2d0c      	cmp	r5, #12
 800ef14:	bf38      	it	cc
 800ef16:	250c      	movcc	r5, #12
 800ef18:	2d00      	cmp	r5, #0
 800ef1a:	4606      	mov	r6, r0
 800ef1c:	db01      	blt.n	800ef22 <_malloc_r+0x1a>
 800ef1e:	42a9      	cmp	r1, r5
 800ef20:	d903      	bls.n	800ef2a <_malloc_r+0x22>
 800ef22:	230c      	movs	r3, #12
 800ef24:	6033      	str	r3, [r6, #0]
 800ef26:	2000      	movs	r0, #0
 800ef28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef2a:	f000 f899 	bl	800f060 <__malloc_lock>
 800ef2e:	4921      	ldr	r1, [pc, #132]	; (800efb4 <_malloc_r+0xac>)
 800ef30:	680a      	ldr	r2, [r1, #0]
 800ef32:	4614      	mov	r4, r2
 800ef34:	b99c      	cbnz	r4, 800ef5e <_malloc_r+0x56>
 800ef36:	4f20      	ldr	r7, [pc, #128]	; (800efb8 <_malloc_r+0xb0>)
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	b923      	cbnz	r3, 800ef46 <_malloc_r+0x3e>
 800ef3c:	4621      	mov	r1, r4
 800ef3e:	4630      	mov	r0, r6
 800ef40:	f000 f83c 	bl	800efbc <_sbrk_r>
 800ef44:	6038      	str	r0, [r7, #0]
 800ef46:	4629      	mov	r1, r5
 800ef48:	4630      	mov	r0, r6
 800ef4a:	f000 f837 	bl	800efbc <_sbrk_r>
 800ef4e:	1c43      	adds	r3, r0, #1
 800ef50:	d123      	bne.n	800ef9a <_malloc_r+0x92>
 800ef52:	230c      	movs	r3, #12
 800ef54:	6033      	str	r3, [r6, #0]
 800ef56:	4630      	mov	r0, r6
 800ef58:	f000 f888 	bl	800f06c <__malloc_unlock>
 800ef5c:	e7e3      	b.n	800ef26 <_malloc_r+0x1e>
 800ef5e:	6823      	ldr	r3, [r4, #0]
 800ef60:	1b5b      	subs	r3, r3, r5
 800ef62:	d417      	bmi.n	800ef94 <_malloc_r+0x8c>
 800ef64:	2b0b      	cmp	r3, #11
 800ef66:	d903      	bls.n	800ef70 <_malloc_r+0x68>
 800ef68:	6023      	str	r3, [r4, #0]
 800ef6a:	441c      	add	r4, r3
 800ef6c:	6025      	str	r5, [r4, #0]
 800ef6e:	e004      	b.n	800ef7a <_malloc_r+0x72>
 800ef70:	6863      	ldr	r3, [r4, #4]
 800ef72:	42a2      	cmp	r2, r4
 800ef74:	bf0c      	ite	eq
 800ef76:	600b      	streq	r3, [r1, #0]
 800ef78:	6053      	strne	r3, [r2, #4]
 800ef7a:	4630      	mov	r0, r6
 800ef7c:	f000 f876 	bl	800f06c <__malloc_unlock>
 800ef80:	f104 000b 	add.w	r0, r4, #11
 800ef84:	1d23      	adds	r3, r4, #4
 800ef86:	f020 0007 	bic.w	r0, r0, #7
 800ef8a:	1ac2      	subs	r2, r0, r3
 800ef8c:	d0cc      	beq.n	800ef28 <_malloc_r+0x20>
 800ef8e:	1a1b      	subs	r3, r3, r0
 800ef90:	50a3      	str	r3, [r4, r2]
 800ef92:	e7c9      	b.n	800ef28 <_malloc_r+0x20>
 800ef94:	4622      	mov	r2, r4
 800ef96:	6864      	ldr	r4, [r4, #4]
 800ef98:	e7cc      	b.n	800ef34 <_malloc_r+0x2c>
 800ef9a:	1cc4      	adds	r4, r0, #3
 800ef9c:	f024 0403 	bic.w	r4, r4, #3
 800efa0:	42a0      	cmp	r0, r4
 800efa2:	d0e3      	beq.n	800ef6c <_malloc_r+0x64>
 800efa4:	1a21      	subs	r1, r4, r0
 800efa6:	4630      	mov	r0, r6
 800efa8:	f000 f808 	bl	800efbc <_sbrk_r>
 800efac:	3001      	adds	r0, #1
 800efae:	d1dd      	bne.n	800ef6c <_malloc_r+0x64>
 800efb0:	e7cf      	b.n	800ef52 <_malloc_r+0x4a>
 800efb2:	bf00      	nop
 800efb4:	20000a14 	.word	0x20000a14
 800efb8:	20000a18 	.word	0x20000a18

0800efbc <_sbrk_r>:
 800efbc:	b538      	push	{r3, r4, r5, lr}
 800efbe:	4d06      	ldr	r5, [pc, #24]	; (800efd8 <_sbrk_r+0x1c>)
 800efc0:	2300      	movs	r3, #0
 800efc2:	4604      	mov	r4, r0
 800efc4:	4608      	mov	r0, r1
 800efc6:	602b      	str	r3, [r5, #0]
 800efc8:	f000 fdcc 	bl	800fb64 <_sbrk>
 800efcc:	1c43      	adds	r3, r0, #1
 800efce:	d102      	bne.n	800efd6 <_sbrk_r+0x1a>
 800efd0:	682b      	ldr	r3, [r5, #0]
 800efd2:	b103      	cbz	r3, 800efd6 <_sbrk_r+0x1a>
 800efd4:	6023      	str	r3, [r4, #0]
 800efd6:	bd38      	pop	{r3, r4, r5, pc}
 800efd8:	200025ac 	.word	0x200025ac

0800efdc <__assert_func>:
 800efdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800efde:	4614      	mov	r4, r2
 800efe0:	461a      	mov	r2, r3
 800efe2:	4b09      	ldr	r3, [pc, #36]	; (800f008 <__assert_func+0x2c>)
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	4605      	mov	r5, r0
 800efe8:	68d8      	ldr	r0, [r3, #12]
 800efea:	b14c      	cbz	r4, 800f000 <__assert_func+0x24>
 800efec:	4b07      	ldr	r3, [pc, #28]	; (800f00c <__assert_func+0x30>)
 800efee:	9100      	str	r1, [sp, #0]
 800eff0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eff4:	4906      	ldr	r1, [pc, #24]	; (800f010 <__assert_func+0x34>)
 800eff6:	462b      	mov	r3, r5
 800eff8:	f000 f80e 	bl	800f018 <fiprintf>
 800effc:	f000 fa64 	bl	800f4c8 <abort>
 800f000:	4b04      	ldr	r3, [pc, #16]	; (800f014 <__assert_func+0x38>)
 800f002:	461c      	mov	r4, r3
 800f004:	e7f3      	b.n	800efee <__assert_func+0x12>
 800f006:	bf00      	nop
 800f008:	20000180 	.word	0x20000180
 800f00c:	0800fe54 	.word	0x0800fe54
 800f010:	0800fe61 	.word	0x0800fe61
 800f014:	0800fe8f 	.word	0x0800fe8f

0800f018 <fiprintf>:
 800f018:	b40e      	push	{r1, r2, r3}
 800f01a:	b503      	push	{r0, r1, lr}
 800f01c:	4601      	mov	r1, r0
 800f01e:	ab03      	add	r3, sp, #12
 800f020:	4805      	ldr	r0, [pc, #20]	; (800f038 <fiprintf+0x20>)
 800f022:	f853 2b04 	ldr.w	r2, [r3], #4
 800f026:	6800      	ldr	r0, [r0, #0]
 800f028:	9301      	str	r3, [sp, #4]
 800f02a:	f000 f84f 	bl	800f0cc <_vfiprintf_r>
 800f02e:	b002      	add	sp, #8
 800f030:	f85d eb04 	ldr.w	lr, [sp], #4
 800f034:	b003      	add	sp, #12
 800f036:	4770      	bx	lr
 800f038:	20000180 	.word	0x20000180

0800f03c <__ascii_mbtowc>:
 800f03c:	b082      	sub	sp, #8
 800f03e:	b901      	cbnz	r1, 800f042 <__ascii_mbtowc+0x6>
 800f040:	a901      	add	r1, sp, #4
 800f042:	b142      	cbz	r2, 800f056 <__ascii_mbtowc+0x1a>
 800f044:	b14b      	cbz	r3, 800f05a <__ascii_mbtowc+0x1e>
 800f046:	7813      	ldrb	r3, [r2, #0]
 800f048:	600b      	str	r3, [r1, #0]
 800f04a:	7812      	ldrb	r2, [r2, #0]
 800f04c:	1e10      	subs	r0, r2, #0
 800f04e:	bf18      	it	ne
 800f050:	2001      	movne	r0, #1
 800f052:	b002      	add	sp, #8
 800f054:	4770      	bx	lr
 800f056:	4610      	mov	r0, r2
 800f058:	e7fb      	b.n	800f052 <__ascii_mbtowc+0x16>
 800f05a:	f06f 0001 	mvn.w	r0, #1
 800f05e:	e7f8      	b.n	800f052 <__ascii_mbtowc+0x16>

0800f060 <__malloc_lock>:
 800f060:	4801      	ldr	r0, [pc, #4]	; (800f068 <__malloc_lock+0x8>)
 800f062:	f000 bbf1 	b.w	800f848 <__retarget_lock_acquire_recursive>
 800f066:	bf00      	nop
 800f068:	200025b4 	.word	0x200025b4

0800f06c <__malloc_unlock>:
 800f06c:	4801      	ldr	r0, [pc, #4]	; (800f074 <__malloc_unlock+0x8>)
 800f06e:	f000 bbec 	b.w	800f84a <__retarget_lock_release_recursive>
 800f072:	bf00      	nop
 800f074:	200025b4 	.word	0x200025b4

0800f078 <__sfputc_r>:
 800f078:	6893      	ldr	r3, [r2, #8]
 800f07a:	3b01      	subs	r3, #1
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	b410      	push	{r4}
 800f080:	6093      	str	r3, [r2, #8]
 800f082:	da08      	bge.n	800f096 <__sfputc_r+0x1e>
 800f084:	6994      	ldr	r4, [r2, #24]
 800f086:	42a3      	cmp	r3, r4
 800f088:	db01      	blt.n	800f08e <__sfputc_r+0x16>
 800f08a:	290a      	cmp	r1, #10
 800f08c:	d103      	bne.n	800f096 <__sfputc_r+0x1e>
 800f08e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f092:	f000 b94b 	b.w	800f32c <__swbuf_r>
 800f096:	6813      	ldr	r3, [r2, #0]
 800f098:	1c58      	adds	r0, r3, #1
 800f09a:	6010      	str	r0, [r2, #0]
 800f09c:	7019      	strb	r1, [r3, #0]
 800f09e:	4608      	mov	r0, r1
 800f0a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0a4:	4770      	bx	lr

0800f0a6 <__sfputs_r>:
 800f0a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0a8:	4606      	mov	r6, r0
 800f0aa:	460f      	mov	r7, r1
 800f0ac:	4614      	mov	r4, r2
 800f0ae:	18d5      	adds	r5, r2, r3
 800f0b0:	42ac      	cmp	r4, r5
 800f0b2:	d101      	bne.n	800f0b8 <__sfputs_r+0x12>
 800f0b4:	2000      	movs	r0, #0
 800f0b6:	e007      	b.n	800f0c8 <__sfputs_r+0x22>
 800f0b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0bc:	463a      	mov	r2, r7
 800f0be:	4630      	mov	r0, r6
 800f0c0:	f7ff ffda 	bl	800f078 <__sfputc_r>
 800f0c4:	1c43      	adds	r3, r0, #1
 800f0c6:	d1f3      	bne.n	800f0b0 <__sfputs_r+0xa>
 800f0c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f0cc <_vfiprintf_r>:
 800f0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0d0:	460d      	mov	r5, r1
 800f0d2:	b09d      	sub	sp, #116	; 0x74
 800f0d4:	4614      	mov	r4, r2
 800f0d6:	4698      	mov	r8, r3
 800f0d8:	4606      	mov	r6, r0
 800f0da:	b118      	cbz	r0, 800f0e4 <_vfiprintf_r+0x18>
 800f0dc:	6983      	ldr	r3, [r0, #24]
 800f0de:	b90b      	cbnz	r3, 800f0e4 <_vfiprintf_r+0x18>
 800f0e0:	f000 fb14 	bl	800f70c <__sinit>
 800f0e4:	4b89      	ldr	r3, [pc, #548]	; (800f30c <_vfiprintf_r+0x240>)
 800f0e6:	429d      	cmp	r5, r3
 800f0e8:	d11b      	bne.n	800f122 <_vfiprintf_r+0x56>
 800f0ea:	6875      	ldr	r5, [r6, #4]
 800f0ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f0ee:	07d9      	lsls	r1, r3, #31
 800f0f0:	d405      	bmi.n	800f0fe <_vfiprintf_r+0x32>
 800f0f2:	89ab      	ldrh	r3, [r5, #12]
 800f0f4:	059a      	lsls	r2, r3, #22
 800f0f6:	d402      	bmi.n	800f0fe <_vfiprintf_r+0x32>
 800f0f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f0fa:	f000 fba5 	bl	800f848 <__retarget_lock_acquire_recursive>
 800f0fe:	89ab      	ldrh	r3, [r5, #12]
 800f100:	071b      	lsls	r3, r3, #28
 800f102:	d501      	bpl.n	800f108 <_vfiprintf_r+0x3c>
 800f104:	692b      	ldr	r3, [r5, #16]
 800f106:	b9eb      	cbnz	r3, 800f144 <_vfiprintf_r+0x78>
 800f108:	4629      	mov	r1, r5
 800f10a:	4630      	mov	r0, r6
 800f10c:	f000 f96e 	bl	800f3ec <__swsetup_r>
 800f110:	b1c0      	cbz	r0, 800f144 <_vfiprintf_r+0x78>
 800f112:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f114:	07dc      	lsls	r4, r3, #31
 800f116:	d50e      	bpl.n	800f136 <_vfiprintf_r+0x6a>
 800f118:	f04f 30ff 	mov.w	r0, #4294967295
 800f11c:	b01d      	add	sp, #116	; 0x74
 800f11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f122:	4b7b      	ldr	r3, [pc, #492]	; (800f310 <_vfiprintf_r+0x244>)
 800f124:	429d      	cmp	r5, r3
 800f126:	d101      	bne.n	800f12c <_vfiprintf_r+0x60>
 800f128:	68b5      	ldr	r5, [r6, #8]
 800f12a:	e7df      	b.n	800f0ec <_vfiprintf_r+0x20>
 800f12c:	4b79      	ldr	r3, [pc, #484]	; (800f314 <_vfiprintf_r+0x248>)
 800f12e:	429d      	cmp	r5, r3
 800f130:	bf08      	it	eq
 800f132:	68f5      	ldreq	r5, [r6, #12]
 800f134:	e7da      	b.n	800f0ec <_vfiprintf_r+0x20>
 800f136:	89ab      	ldrh	r3, [r5, #12]
 800f138:	0598      	lsls	r0, r3, #22
 800f13a:	d4ed      	bmi.n	800f118 <_vfiprintf_r+0x4c>
 800f13c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f13e:	f000 fb84 	bl	800f84a <__retarget_lock_release_recursive>
 800f142:	e7e9      	b.n	800f118 <_vfiprintf_r+0x4c>
 800f144:	2300      	movs	r3, #0
 800f146:	9309      	str	r3, [sp, #36]	; 0x24
 800f148:	2320      	movs	r3, #32
 800f14a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f14e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f152:	2330      	movs	r3, #48	; 0x30
 800f154:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f318 <_vfiprintf_r+0x24c>
 800f158:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f15c:	f04f 0901 	mov.w	r9, #1
 800f160:	4623      	mov	r3, r4
 800f162:	469a      	mov	sl, r3
 800f164:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f168:	b10a      	cbz	r2, 800f16e <_vfiprintf_r+0xa2>
 800f16a:	2a25      	cmp	r2, #37	; 0x25
 800f16c:	d1f9      	bne.n	800f162 <_vfiprintf_r+0x96>
 800f16e:	ebba 0b04 	subs.w	fp, sl, r4
 800f172:	d00b      	beq.n	800f18c <_vfiprintf_r+0xc0>
 800f174:	465b      	mov	r3, fp
 800f176:	4622      	mov	r2, r4
 800f178:	4629      	mov	r1, r5
 800f17a:	4630      	mov	r0, r6
 800f17c:	f7ff ff93 	bl	800f0a6 <__sfputs_r>
 800f180:	3001      	adds	r0, #1
 800f182:	f000 80aa 	beq.w	800f2da <_vfiprintf_r+0x20e>
 800f186:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f188:	445a      	add	r2, fp
 800f18a:	9209      	str	r2, [sp, #36]	; 0x24
 800f18c:	f89a 3000 	ldrb.w	r3, [sl]
 800f190:	2b00      	cmp	r3, #0
 800f192:	f000 80a2 	beq.w	800f2da <_vfiprintf_r+0x20e>
 800f196:	2300      	movs	r3, #0
 800f198:	f04f 32ff 	mov.w	r2, #4294967295
 800f19c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1a0:	f10a 0a01 	add.w	sl, sl, #1
 800f1a4:	9304      	str	r3, [sp, #16]
 800f1a6:	9307      	str	r3, [sp, #28]
 800f1a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f1ac:	931a      	str	r3, [sp, #104]	; 0x68
 800f1ae:	4654      	mov	r4, sl
 800f1b0:	2205      	movs	r2, #5
 800f1b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1b6:	4858      	ldr	r0, [pc, #352]	; (800f318 <_vfiprintf_r+0x24c>)
 800f1b8:	f7f1 f81a 	bl	80001f0 <memchr>
 800f1bc:	9a04      	ldr	r2, [sp, #16]
 800f1be:	b9d8      	cbnz	r0, 800f1f8 <_vfiprintf_r+0x12c>
 800f1c0:	06d1      	lsls	r1, r2, #27
 800f1c2:	bf44      	itt	mi
 800f1c4:	2320      	movmi	r3, #32
 800f1c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1ca:	0713      	lsls	r3, r2, #28
 800f1cc:	bf44      	itt	mi
 800f1ce:	232b      	movmi	r3, #43	; 0x2b
 800f1d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1d4:	f89a 3000 	ldrb.w	r3, [sl]
 800f1d8:	2b2a      	cmp	r3, #42	; 0x2a
 800f1da:	d015      	beq.n	800f208 <_vfiprintf_r+0x13c>
 800f1dc:	9a07      	ldr	r2, [sp, #28]
 800f1de:	4654      	mov	r4, sl
 800f1e0:	2000      	movs	r0, #0
 800f1e2:	f04f 0c0a 	mov.w	ip, #10
 800f1e6:	4621      	mov	r1, r4
 800f1e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f1ec:	3b30      	subs	r3, #48	; 0x30
 800f1ee:	2b09      	cmp	r3, #9
 800f1f0:	d94e      	bls.n	800f290 <_vfiprintf_r+0x1c4>
 800f1f2:	b1b0      	cbz	r0, 800f222 <_vfiprintf_r+0x156>
 800f1f4:	9207      	str	r2, [sp, #28]
 800f1f6:	e014      	b.n	800f222 <_vfiprintf_r+0x156>
 800f1f8:	eba0 0308 	sub.w	r3, r0, r8
 800f1fc:	fa09 f303 	lsl.w	r3, r9, r3
 800f200:	4313      	orrs	r3, r2
 800f202:	9304      	str	r3, [sp, #16]
 800f204:	46a2      	mov	sl, r4
 800f206:	e7d2      	b.n	800f1ae <_vfiprintf_r+0xe2>
 800f208:	9b03      	ldr	r3, [sp, #12]
 800f20a:	1d19      	adds	r1, r3, #4
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	9103      	str	r1, [sp, #12]
 800f210:	2b00      	cmp	r3, #0
 800f212:	bfbb      	ittet	lt
 800f214:	425b      	neglt	r3, r3
 800f216:	f042 0202 	orrlt.w	r2, r2, #2
 800f21a:	9307      	strge	r3, [sp, #28]
 800f21c:	9307      	strlt	r3, [sp, #28]
 800f21e:	bfb8      	it	lt
 800f220:	9204      	strlt	r2, [sp, #16]
 800f222:	7823      	ldrb	r3, [r4, #0]
 800f224:	2b2e      	cmp	r3, #46	; 0x2e
 800f226:	d10c      	bne.n	800f242 <_vfiprintf_r+0x176>
 800f228:	7863      	ldrb	r3, [r4, #1]
 800f22a:	2b2a      	cmp	r3, #42	; 0x2a
 800f22c:	d135      	bne.n	800f29a <_vfiprintf_r+0x1ce>
 800f22e:	9b03      	ldr	r3, [sp, #12]
 800f230:	1d1a      	adds	r2, r3, #4
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	9203      	str	r2, [sp, #12]
 800f236:	2b00      	cmp	r3, #0
 800f238:	bfb8      	it	lt
 800f23a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f23e:	3402      	adds	r4, #2
 800f240:	9305      	str	r3, [sp, #20]
 800f242:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f328 <_vfiprintf_r+0x25c>
 800f246:	7821      	ldrb	r1, [r4, #0]
 800f248:	2203      	movs	r2, #3
 800f24a:	4650      	mov	r0, sl
 800f24c:	f7f0 ffd0 	bl	80001f0 <memchr>
 800f250:	b140      	cbz	r0, 800f264 <_vfiprintf_r+0x198>
 800f252:	2340      	movs	r3, #64	; 0x40
 800f254:	eba0 000a 	sub.w	r0, r0, sl
 800f258:	fa03 f000 	lsl.w	r0, r3, r0
 800f25c:	9b04      	ldr	r3, [sp, #16]
 800f25e:	4303      	orrs	r3, r0
 800f260:	3401      	adds	r4, #1
 800f262:	9304      	str	r3, [sp, #16]
 800f264:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f268:	482c      	ldr	r0, [pc, #176]	; (800f31c <_vfiprintf_r+0x250>)
 800f26a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f26e:	2206      	movs	r2, #6
 800f270:	f7f0 ffbe 	bl	80001f0 <memchr>
 800f274:	2800      	cmp	r0, #0
 800f276:	d03f      	beq.n	800f2f8 <_vfiprintf_r+0x22c>
 800f278:	4b29      	ldr	r3, [pc, #164]	; (800f320 <_vfiprintf_r+0x254>)
 800f27a:	bb1b      	cbnz	r3, 800f2c4 <_vfiprintf_r+0x1f8>
 800f27c:	9b03      	ldr	r3, [sp, #12]
 800f27e:	3307      	adds	r3, #7
 800f280:	f023 0307 	bic.w	r3, r3, #7
 800f284:	3308      	adds	r3, #8
 800f286:	9303      	str	r3, [sp, #12]
 800f288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f28a:	443b      	add	r3, r7
 800f28c:	9309      	str	r3, [sp, #36]	; 0x24
 800f28e:	e767      	b.n	800f160 <_vfiprintf_r+0x94>
 800f290:	fb0c 3202 	mla	r2, ip, r2, r3
 800f294:	460c      	mov	r4, r1
 800f296:	2001      	movs	r0, #1
 800f298:	e7a5      	b.n	800f1e6 <_vfiprintf_r+0x11a>
 800f29a:	2300      	movs	r3, #0
 800f29c:	3401      	adds	r4, #1
 800f29e:	9305      	str	r3, [sp, #20]
 800f2a0:	4619      	mov	r1, r3
 800f2a2:	f04f 0c0a 	mov.w	ip, #10
 800f2a6:	4620      	mov	r0, r4
 800f2a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2ac:	3a30      	subs	r2, #48	; 0x30
 800f2ae:	2a09      	cmp	r2, #9
 800f2b0:	d903      	bls.n	800f2ba <_vfiprintf_r+0x1ee>
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d0c5      	beq.n	800f242 <_vfiprintf_r+0x176>
 800f2b6:	9105      	str	r1, [sp, #20]
 800f2b8:	e7c3      	b.n	800f242 <_vfiprintf_r+0x176>
 800f2ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800f2be:	4604      	mov	r4, r0
 800f2c0:	2301      	movs	r3, #1
 800f2c2:	e7f0      	b.n	800f2a6 <_vfiprintf_r+0x1da>
 800f2c4:	ab03      	add	r3, sp, #12
 800f2c6:	9300      	str	r3, [sp, #0]
 800f2c8:	462a      	mov	r2, r5
 800f2ca:	4b16      	ldr	r3, [pc, #88]	; (800f324 <_vfiprintf_r+0x258>)
 800f2cc:	a904      	add	r1, sp, #16
 800f2ce:	4630      	mov	r0, r6
 800f2d0:	f7fd ffde 	bl	800d290 <_printf_float>
 800f2d4:	4607      	mov	r7, r0
 800f2d6:	1c78      	adds	r0, r7, #1
 800f2d8:	d1d6      	bne.n	800f288 <_vfiprintf_r+0x1bc>
 800f2da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f2dc:	07d9      	lsls	r1, r3, #31
 800f2de:	d405      	bmi.n	800f2ec <_vfiprintf_r+0x220>
 800f2e0:	89ab      	ldrh	r3, [r5, #12]
 800f2e2:	059a      	lsls	r2, r3, #22
 800f2e4:	d402      	bmi.n	800f2ec <_vfiprintf_r+0x220>
 800f2e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f2e8:	f000 faaf 	bl	800f84a <__retarget_lock_release_recursive>
 800f2ec:	89ab      	ldrh	r3, [r5, #12]
 800f2ee:	065b      	lsls	r3, r3, #25
 800f2f0:	f53f af12 	bmi.w	800f118 <_vfiprintf_r+0x4c>
 800f2f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f2f6:	e711      	b.n	800f11c <_vfiprintf_r+0x50>
 800f2f8:	ab03      	add	r3, sp, #12
 800f2fa:	9300      	str	r3, [sp, #0]
 800f2fc:	462a      	mov	r2, r5
 800f2fe:	4b09      	ldr	r3, [pc, #36]	; (800f324 <_vfiprintf_r+0x258>)
 800f300:	a904      	add	r1, sp, #16
 800f302:	4630      	mov	r0, r6
 800f304:	f7fe fa68 	bl	800d7d8 <_printf_i>
 800f308:	e7e4      	b.n	800f2d4 <_vfiprintf_r+0x208>
 800f30a:	bf00      	nop
 800f30c:	0800ffcc 	.word	0x0800ffcc
 800f310:	0800ffec 	.word	0x0800ffec
 800f314:	0800ffac 	.word	0x0800ffac
 800f318:	0800fe9a 	.word	0x0800fe9a
 800f31c:	0800fea4 	.word	0x0800fea4
 800f320:	0800d291 	.word	0x0800d291
 800f324:	0800f0a7 	.word	0x0800f0a7
 800f328:	0800fea0 	.word	0x0800fea0

0800f32c <__swbuf_r>:
 800f32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f32e:	460e      	mov	r6, r1
 800f330:	4614      	mov	r4, r2
 800f332:	4605      	mov	r5, r0
 800f334:	b118      	cbz	r0, 800f33e <__swbuf_r+0x12>
 800f336:	6983      	ldr	r3, [r0, #24]
 800f338:	b90b      	cbnz	r3, 800f33e <__swbuf_r+0x12>
 800f33a:	f000 f9e7 	bl	800f70c <__sinit>
 800f33e:	4b21      	ldr	r3, [pc, #132]	; (800f3c4 <__swbuf_r+0x98>)
 800f340:	429c      	cmp	r4, r3
 800f342:	d12b      	bne.n	800f39c <__swbuf_r+0x70>
 800f344:	686c      	ldr	r4, [r5, #4]
 800f346:	69a3      	ldr	r3, [r4, #24]
 800f348:	60a3      	str	r3, [r4, #8]
 800f34a:	89a3      	ldrh	r3, [r4, #12]
 800f34c:	071a      	lsls	r2, r3, #28
 800f34e:	d52f      	bpl.n	800f3b0 <__swbuf_r+0x84>
 800f350:	6923      	ldr	r3, [r4, #16]
 800f352:	b36b      	cbz	r3, 800f3b0 <__swbuf_r+0x84>
 800f354:	6923      	ldr	r3, [r4, #16]
 800f356:	6820      	ldr	r0, [r4, #0]
 800f358:	1ac0      	subs	r0, r0, r3
 800f35a:	6963      	ldr	r3, [r4, #20]
 800f35c:	b2f6      	uxtb	r6, r6
 800f35e:	4283      	cmp	r3, r0
 800f360:	4637      	mov	r7, r6
 800f362:	dc04      	bgt.n	800f36e <__swbuf_r+0x42>
 800f364:	4621      	mov	r1, r4
 800f366:	4628      	mov	r0, r5
 800f368:	f000 f93c 	bl	800f5e4 <_fflush_r>
 800f36c:	bb30      	cbnz	r0, 800f3bc <__swbuf_r+0x90>
 800f36e:	68a3      	ldr	r3, [r4, #8]
 800f370:	3b01      	subs	r3, #1
 800f372:	60a3      	str	r3, [r4, #8]
 800f374:	6823      	ldr	r3, [r4, #0]
 800f376:	1c5a      	adds	r2, r3, #1
 800f378:	6022      	str	r2, [r4, #0]
 800f37a:	701e      	strb	r6, [r3, #0]
 800f37c:	6963      	ldr	r3, [r4, #20]
 800f37e:	3001      	adds	r0, #1
 800f380:	4283      	cmp	r3, r0
 800f382:	d004      	beq.n	800f38e <__swbuf_r+0x62>
 800f384:	89a3      	ldrh	r3, [r4, #12]
 800f386:	07db      	lsls	r3, r3, #31
 800f388:	d506      	bpl.n	800f398 <__swbuf_r+0x6c>
 800f38a:	2e0a      	cmp	r6, #10
 800f38c:	d104      	bne.n	800f398 <__swbuf_r+0x6c>
 800f38e:	4621      	mov	r1, r4
 800f390:	4628      	mov	r0, r5
 800f392:	f000 f927 	bl	800f5e4 <_fflush_r>
 800f396:	b988      	cbnz	r0, 800f3bc <__swbuf_r+0x90>
 800f398:	4638      	mov	r0, r7
 800f39a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f39c:	4b0a      	ldr	r3, [pc, #40]	; (800f3c8 <__swbuf_r+0x9c>)
 800f39e:	429c      	cmp	r4, r3
 800f3a0:	d101      	bne.n	800f3a6 <__swbuf_r+0x7a>
 800f3a2:	68ac      	ldr	r4, [r5, #8]
 800f3a4:	e7cf      	b.n	800f346 <__swbuf_r+0x1a>
 800f3a6:	4b09      	ldr	r3, [pc, #36]	; (800f3cc <__swbuf_r+0xa0>)
 800f3a8:	429c      	cmp	r4, r3
 800f3aa:	bf08      	it	eq
 800f3ac:	68ec      	ldreq	r4, [r5, #12]
 800f3ae:	e7ca      	b.n	800f346 <__swbuf_r+0x1a>
 800f3b0:	4621      	mov	r1, r4
 800f3b2:	4628      	mov	r0, r5
 800f3b4:	f000 f81a 	bl	800f3ec <__swsetup_r>
 800f3b8:	2800      	cmp	r0, #0
 800f3ba:	d0cb      	beq.n	800f354 <__swbuf_r+0x28>
 800f3bc:	f04f 37ff 	mov.w	r7, #4294967295
 800f3c0:	e7ea      	b.n	800f398 <__swbuf_r+0x6c>
 800f3c2:	bf00      	nop
 800f3c4:	0800ffcc 	.word	0x0800ffcc
 800f3c8:	0800ffec 	.word	0x0800ffec
 800f3cc:	0800ffac 	.word	0x0800ffac

0800f3d0 <__ascii_wctomb>:
 800f3d0:	b149      	cbz	r1, 800f3e6 <__ascii_wctomb+0x16>
 800f3d2:	2aff      	cmp	r2, #255	; 0xff
 800f3d4:	bf85      	ittet	hi
 800f3d6:	238a      	movhi	r3, #138	; 0x8a
 800f3d8:	6003      	strhi	r3, [r0, #0]
 800f3da:	700a      	strbls	r2, [r1, #0]
 800f3dc:	f04f 30ff 	movhi.w	r0, #4294967295
 800f3e0:	bf98      	it	ls
 800f3e2:	2001      	movls	r0, #1
 800f3e4:	4770      	bx	lr
 800f3e6:	4608      	mov	r0, r1
 800f3e8:	4770      	bx	lr
	...

0800f3ec <__swsetup_r>:
 800f3ec:	4b32      	ldr	r3, [pc, #200]	; (800f4b8 <__swsetup_r+0xcc>)
 800f3ee:	b570      	push	{r4, r5, r6, lr}
 800f3f0:	681d      	ldr	r5, [r3, #0]
 800f3f2:	4606      	mov	r6, r0
 800f3f4:	460c      	mov	r4, r1
 800f3f6:	b125      	cbz	r5, 800f402 <__swsetup_r+0x16>
 800f3f8:	69ab      	ldr	r3, [r5, #24]
 800f3fa:	b913      	cbnz	r3, 800f402 <__swsetup_r+0x16>
 800f3fc:	4628      	mov	r0, r5
 800f3fe:	f000 f985 	bl	800f70c <__sinit>
 800f402:	4b2e      	ldr	r3, [pc, #184]	; (800f4bc <__swsetup_r+0xd0>)
 800f404:	429c      	cmp	r4, r3
 800f406:	d10f      	bne.n	800f428 <__swsetup_r+0x3c>
 800f408:	686c      	ldr	r4, [r5, #4]
 800f40a:	89a3      	ldrh	r3, [r4, #12]
 800f40c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f410:	0719      	lsls	r1, r3, #28
 800f412:	d42c      	bmi.n	800f46e <__swsetup_r+0x82>
 800f414:	06dd      	lsls	r5, r3, #27
 800f416:	d411      	bmi.n	800f43c <__swsetup_r+0x50>
 800f418:	2309      	movs	r3, #9
 800f41a:	6033      	str	r3, [r6, #0]
 800f41c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f420:	81a3      	strh	r3, [r4, #12]
 800f422:	f04f 30ff 	mov.w	r0, #4294967295
 800f426:	e03e      	b.n	800f4a6 <__swsetup_r+0xba>
 800f428:	4b25      	ldr	r3, [pc, #148]	; (800f4c0 <__swsetup_r+0xd4>)
 800f42a:	429c      	cmp	r4, r3
 800f42c:	d101      	bne.n	800f432 <__swsetup_r+0x46>
 800f42e:	68ac      	ldr	r4, [r5, #8]
 800f430:	e7eb      	b.n	800f40a <__swsetup_r+0x1e>
 800f432:	4b24      	ldr	r3, [pc, #144]	; (800f4c4 <__swsetup_r+0xd8>)
 800f434:	429c      	cmp	r4, r3
 800f436:	bf08      	it	eq
 800f438:	68ec      	ldreq	r4, [r5, #12]
 800f43a:	e7e6      	b.n	800f40a <__swsetup_r+0x1e>
 800f43c:	0758      	lsls	r0, r3, #29
 800f43e:	d512      	bpl.n	800f466 <__swsetup_r+0x7a>
 800f440:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f442:	b141      	cbz	r1, 800f456 <__swsetup_r+0x6a>
 800f444:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f448:	4299      	cmp	r1, r3
 800f44a:	d002      	beq.n	800f452 <__swsetup_r+0x66>
 800f44c:	4630      	mov	r0, r6
 800f44e:	f7ff fd0b 	bl	800ee68 <_free_r>
 800f452:	2300      	movs	r3, #0
 800f454:	6363      	str	r3, [r4, #52]	; 0x34
 800f456:	89a3      	ldrh	r3, [r4, #12]
 800f458:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f45c:	81a3      	strh	r3, [r4, #12]
 800f45e:	2300      	movs	r3, #0
 800f460:	6063      	str	r3, [r4, #4]
 800f462:	6923      	ldr	r3, [r4, #16]
 800f464:	6023      	str	r3, [r4, #0]
 800f466:	89a3      	ldrh	r3, [r4, #12]
 800f468:	f043 0308 	orr.w	r3, r3, #8
 800f46c:	81a3      	strh	r3, [r4, #12]
 800f46e:	6923      	ldr	r3, [r4, #16]
 800f470:	b94b      	cbnz	r3, 800f486 <__swsetup_r+0x9a>
 800f472:	89a3      	ldrh	r3, [r4, #12]
 800f474:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f47c:	d003      	beq.n	800f486 <__swsetup_r+0x9a>
 800f47e:	4621      	mov	r1, r4
 800f480:	4630      	mov	r0, r6
 800f482:	f000 fa07 	bl	800f894 <__smakebuf_r>
 800f486:	89a0      	ldrh	r0, [r4, #12]
 800f488:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f48c:	f010 0301 	ands.w	r3, r0, #1
 800f490:	d00a      	beq.n	800f4a8 <__swsetup_r+0xbc>
 800f492:	2300      	movs	r3, #0
 800f494:	60a3      	str	r3, [r4, #8]
 800f496:	6963      	ldr	r3, [r4, #20]
 800f498:	425b      	negs	r3, r3
 800f49a:	61a3      	str	r3, [r4, #24]
 800f49c:	6923      	ldr	r3, [r4, #16]
 800f49e:	b943      	cbnz	r3, 800f4b2 <__swsetup_r+0xc6>
 800f4a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f4a4:	d1ba      	bne.n	800f41c <__swsetup_r+0x30>
 800f4a6:	bd70      	pop	{r4, r5, r6, pc}
 800f4a8:	0781      	lsls	r1, r0, #30
 800f4aa:	bf58      	it	pl
 800f4ac:	6963      	ldrpl	r3, [r4, #20]
 800f4ae:	60a3      	str	r3, [r4, #8]
 800f4b0:	e7f4      	b.n	800f49c <__swsetup_r+0xb0>
 800f4b2:	2000      	movs	r0, #0
 800f4b4:	e7f7      	b.n	800f4a6 <__swsetup_r+0xba>
 800f4b6:	bf00      	nop
 800f4b8:	20000180 	.word	0x20000180
 800f4bc:	0800ffcc 	.word	0x0800ffcc
 800f4c0:	0800ffec 	.word	0x0800ffec
 800f4c4:	0800ffac 	.word	0x0800ffac

0800f4c8 <abort>:
 800f4c8:	b508      	push	{r3, lr}
 800f4ca:	2006      	movs	r0, #6
 800f4cc:	f000 fa4a 	bl	800f964 <raise>
 800f4d0:	2001      	movs	r0, #1
 800f4d2:	f000 fb5d 	bl	800fb90 <_exit>
	...

0800f4d8 <__sflush_r>:
 800f4d8:	898a      	ldrh	r2, [r1, #12]
 800f4da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4de:	4605      	mov	r5, r0
 800f4e0:	0710      	lsls	r0, r2, #28
 800f4e2:	460c      	mov	r4, r1
 800f4e4:	d458      	bmi.n	800f598 <__sflush_r+0xc0>
 800f4e6:	684b      	ldr	r3, [r1, #4]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	dc05      	bgt.n	800f4f8 <__sflush_r+0x20>
 800f4ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	dc02      	bgt.n	800f4f8 <__sflush_r+0x20>
 800f4f2:	2000      	movs	r0, #0
 800f4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f4fa:	2e00      	cmp	r6, #0
 800f4fc:	d0f9      	beq.n	800f4f2 <__sflush_r+0x1a>
 800f4fe:	2300      	movs	r3, #0
 800f500:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f504:	682f      	ldr	r7, [r5, #0]
 800f506:	602b      	str	r3, [r5, #0]
 800f508:	d032      	beq.n	800f570 <__sflush_r+0x98>
 800f50a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f50c:	89a3      	ldrh	r3, [r4, #12]
 800f50e:	075a      	lsls	r2, r3, #29
 800f510:	d505      	bpl.n	800f51e <__sflush_r+0x46>
 800f512:	6863      	ldr	r3, [r4, #4]
 800f514:	1ac0      	subs	r0, r0, r3
 800f516:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f518:	b10b      	cbz	r3, 800f51e <__sflush_r+0x46>
 800f51a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f51c:	1ac0      	subs	r0, r0, r3
 800f51e:	2300      	movs	r3, #0
 800f520:	4602      	mov	r2, r0
 800f522:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f524:	6a21      	ldr	r1, [r4, #32]
 800f526:	4628      	mov	r0, r5
 800f528:	47b0      	blx	r6
 800f52a:	1c43      	adds	r3, r0, #1
 800f52c:	89a3      	ldrh	r3, [r4, #12]
 800f52e:	d106      	bne.n	800f53e <__sflush_r+0x66>
 800f530:	6829      	ldr	r1, [r5, #0]
 800f532:	291d      	cmp	r1, #29
 800f534:	d82c      	bhi.n	800f590 <__sflush_r+0xb8>
 800f536:	4a2a      	ldr	r2, [pc, #168]	; (800f5e0 <__sflush_r+0x108>)
 800f538:	40ca      	lsrs	r2, r1
 800f53a:	07d6      	lsls	r6, r2, #31
 800f53c:	d528      	bpl.n	800f590 <__sflush_r+0xb8>
 800f53e:	2200      	movs	r2, #0
 800f540:	6062      	str	r2, [r4, #4]
 800f542:	04d9      	lsls	r1, r3, #19
 800f544:	6922      	ldr	r2, [r4, #16]
 800f546:	6022      	str	r2, [r4, #0]
 800f548:	d504      	bpl.n	800f554 <__sflush_r+0x7c>
 800f54a:	1c42      	adds	r2, r0, #1
 800f54c:	d101      	bne.n	800f552 <__sflush_r+0x7a>
 800f54e:	682b      	ldr	r3, [r5, #0]
 800f550:	b903      	cbnz	r3, 800f554 <__sflush_r+0x7c>
 800f552:	6560      	str	r0, [r4, #84]	; 0x54
 800f554:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f556:	602f      	str	r7, [r5, #0]
 800f558:	2900      	cmp	r1, #0
 800f55a:	d0ca      	beq.n	800f4f2 <__sflush_r+0x1a>
 800f55c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f560:	4299      	cmp	r1, r3
 800f562:	d002      	beq.n	800f56a <__sflush_r+0x92>
 800f564:	4628      	mov	r0, r5
 800f566:	f7ff fc7f 	bl	800ee68 <_free_r>
 800f56a:	2000      	movs	r0, #0
 800f56c:	6360      	str	r0, [r4, #52]	; 0x34
 800f56e:	e7c1      	b.n	800f4f4 <__sflush_r+0x1c>
 800f570:	6a21      	ldr	r1, [r4, #32]
 800f572:	2301      	movs	r3, #1
 800f574:	4628      	mov	r0, r5
 800f576:	47b0      	blx	r6
 800f578:	1c41      	adds	r1, r0, #1
 800f57a:	d1c7      	bne.n	800f50c <__sflush_r+0x34>
 800f57c:	682b      	ldr	r3, [r5, #0]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d0c4      	beq.n	800f50c <__sflush_r+0x34>
 800f582:	2b1d      	cmp	r3, #29
 800f584:	d001      	beq.n	800f58a <__sflush_r+0xb2>
 800f586:	2b16      	cmp	r3, #22
 800f588:	d101      	bne.n	800f58e <__sflush_r+0xb6>
 800f58a:	602f      	str	r7, [r5, #0]
 800f58c:	e7b1      	b.n	800f4f2 <__sflush_r+0x1a>
 800f58e:	89a3      	ldrh	r3, [r4, #12]
 800f590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f594:	81a3      	strh	r3, [r4, #12]
 800f596:	e7ad      	b.n	800f4f4 <__sflush_r+0x1c>
 800f598:	690f      	ldr	r7, [r1, #16]
 800f59a:	2f00      	cmp	r7, #0
 800f59c:	d0a9      	beq.n	800f4f2 <__sflush_r+0x1a>
 800f59e:	0793      	lsls	r3, r2, #30
 800f5a0:	680e      	ldr	r6, [r1, #0]
 800f5a2:	bf08      	it	eq
 800f5a4:	694b      	ldreq	r3, [r1, #20]
 800f5a6:	600f      	str	r7, [r1, #0]
 800f5a8:	bf18      	it	ne
 800f5aa:	2300      	movne	r3, #0
 800f5ac:	eba6 0807 	sub.w	r8, r6, r7
 800f5b0:	608b      	str	r3, [r1, #8]
 800f5b2:	f1b8 0f00 	cmp.w	r8, #0
 800f5b6:	dd9c      	ble.n	800f4f2 <__sflush_r+0x1a>
 800f5b8:	6a21      	ldr	r1, [r4, #32]
 800f5ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f5bc:	4643      	mov	r3, r8
 800f5be:	463a      	mov	r2, r7
 800f5c0:	4628      	mov	r0, r5
 800f5c2:	47b0      	blx	r6
 800f5c4:	2800      	cmp	r0, #0
 800f5c6:	dc06      	bgt.n	800f5d6 <__sflush_r+0xfe>
 800f5c8:	89a3      	ldrh	r3, [r4, #12]
 800f5ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5ce:	81a3      	strh	r3, [r4, #12]
 800f5d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f5d4:	e78e      	b.n	800f4f4 <__sflush_r+0x1c>
 800f5d6:	4407      	add	r7, r0
 800f5d8:	eba8 0800 	sub.w	r8, r8, r0
 800f5dc:	e7e9      	b.n	800f5b2 <__sflush_r+0xda>
 800f5de:	bf00      	nop
 800f5e0:	20400001 	.word	0x20400001

0800f5e4 <_fflush_r>:
 800f5e4:	b538      	push	{r3, r4, r5, lr}
 800f5e6:	690b      	ldr	r3, [r1, #16]
 800f5e8:	4605      	mov	r5, r0
 800f5ea:	460c      	mov	r4, r1
 800f5ec:	b913      	cbnz	r3, 800f5f4 <_fflush_r+0x10>
 800f5ee:	2500      	movs	r5, #0
 800f5f0:	4628      	mov	r0, r5
 800f5f2:	bd38      	pop	{r3, r4, r5, pc}
 800f5f4:	b118      	cbz	r0, 800f5fe <_fflush_r+0x1a>
 800f5f6:	6983      	ldr	r3, [r0, #24]
 800f5f8:	b90b      	cbnz	r3, 800f5fe <_fflush_r+0x1a>
 800f5fa:	f000 f887 	bl	800f70c <__sinit>
 800f5fe:	4b14      	ldr	r3, [pc, #80]	; (800f650 <_fflush_r+0x6c>)
 800f600:	429c      	cmp	r4, r3
 800f602:	d11b      	bne.n	800f63c <_fflush_r+0x58>
 800f604:	686c      	ldr	r4, [r5, #4]
 800f606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d0ef      	beq.n	800f5ee <_fflush_r+0xa>
 800f60e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f610:	07d0      	lsls	r0, r2, #31
 800f612:	d404      	bmi.n	800f61e <_fflush_r+0x3a>
 800f614:	0599      	lsls	r1, r3, #22
 800f616:	d402      	bmi.n	800f61e <_fflush_r+0x3a>
 800f618:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f61a:	f000 f915 	bl	800f848 <__retarget_lock_acquire_recursive>
 800f61e:	4628      	mov	r0, r5
 800f620:	4621      	mov	r1, r4
 800f622:	f7ff ff59 	bl	800f4d8 <__sflush_r>
 800f626:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f628:	07da      	lsls	r2, r3, #31
 800f62a:	4605      	mov	r5, r0
 800f62c:	d4e0      	bmi.n	800f5f0 <_fflush_r+0xc>
 800f62e:	89a3      	ldrh	r3, [r4, #12]
 800f630:	059b      	lsls	r3, r3, #22
 800f632:	d4dd      	bmi.n	800f5f0 <_fflush_r+0xc>
 800f634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f636:	f000 f908 	bl	800f84a <__retarget_lock_release_recursive>
 800f63a:	e7d9      	b.n	800f5f0 <_fflush_r+0xc>
 800f63c:	4b05      	ldr	r3, [pc, #20]	; (800f654 <_fflush_r+0x70>)
 800f63e:	429c      	cmp	r4, r3
 800f640:	d101      	bne.n	800f646 <_fflush_r+0x62>
 800f642:	68ac      	ldr	r4, [r5, #8]
 800f644:	e7df      	b.n	800f606 <_fflush_r+0x22>
 800f646:	4b04      	ldr	r3, [pc, #16]	; (800f658 <_fflush_r+0x74>)
 800f648:	429c      	cmp	r4, r3
 800f64a:	bf08      	it	eq
 800f64c:	68ec      	ldreq	r4, [r5, #12]
 800f64e:	e7da      	b.n	800f606 <_fflush_r+0x22>
 800f650:	0800ffcc 	.word	0x0800ffcc
 800f654:	0800ffec 	.word	0x0800ffec
 800f658:	0800ffac 	.word	0x0800ffac

0800f65c <std>:
 800f65c:	2300      	movs	r3, #0
 800f65e:	b510      	push	{r4, lr}
 800f660:	4604      	mov	r4, r0
 800f662:	e9c0 3300 	strd	r3, r3, [r0]
 800f666:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f66a:	6083      	str	r3, [r0, #8]
 800f66c:	8181      	strh	r1, [r0, #12]
 800f66e:	6643      	str	r3, [r0, #100]	; 0x64
 800f670:	81c2      	strh	r2, [r0, #14]
 800f672:	6183      	str	r3, [r0, #24]
 800f674:	4619      	mov	r1, r3
 800f676:	2208      	movs	r2, #8
 800f678:	305c      	adds	r0, #92	; 0x5c
 800f67a:	f7fd fd61 	bl	800d140 <memset>
 800f67e:	4b05      	ldr	r3, [pc, #20]	; (800f694 <std+0x38>)
 800f680:	6263      	str	r3, [r4, #36]	; 0x24
 800f682:	4b05      	ldr	r3, [pc, #20]	; (800f698 <std+0x3c>)
 800f684:	62a3      	str	r3, [r4, #40]	; 0x28
 800f686:	4b05      	ldr	r3, [pc, #20]	; (800f69c <std+0x40>)
 800f688:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f68a:	4b05      	ldr	r3, [pc, #20]	; (800f6a0 <std+0x44>)
 800f68c:	6224      	str	r4, [r4, #32]
 800f68e:	6323      	str	r3, [r4, #48]	; 0x30
 800f690:	bd10      	pop	{r4, pc}
 800f692:	bf00      	nop
 800f694:	0800f99d 	.word	0x0800f99d
 800f698:	0800f9bf 	.word	0x0800f9bf
 800f69c:	0800f9f7 	.word	0x0800f9f7
 800f6a0:	0800fa1b 	.word	0x0800fa1b

0800f6a4 <_cleanup_r>:
 800f6a4:	4901      	ldr	r1, [pc, #4]	; (800f6ac <_cleanup_r+0x8>)
 800f6a6:	f000 b8af 	b.w	800f808 <_fwalk_reent>
 800f6aa:	bf00      	nop
 800f6ac:	0800f5e5 	.word	0x0800f5e5

0800f6b0 <__sfmoreglue>:
 800f6b0:	b570      	push	{r4, r5, r6, lr}
 800f6b2:	1e4a      	subs	r2, r1, #1
 800f6b4:	2568      	movs	r5, #104	; 0x68
 800f6b6:	4355      	muls	r5, r2
 800f6b8:	460e      	mov	r6, r1
 800f6ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f6be:	f7ff fc23 	bl	800ef08 <_malloc_r>
 800f6c2:	4604      	mov	r4, r0
 800f6c4:	b140      	cbz	r0, 800f6d8 <__sfmoreglue+0x28>
 800f6c6:	2100      	movs	r1, #0
 800f6c8:	e9c0 1600 	strd	r1, r6, [r0]
 800f6cc:	300c      	adds	r0, #12
 800f6ce:	60a0      	str	r0, [r4, #8]
 800f6d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f6d4:	f7fd fd34 	bl	800d140 <memset>
 800f6d8:	4620      	mov	r0, r4
 800f6da:	bd70      	pop	{r4, r5, r6, pc}

0800f6dc <__sfp_lock_acquire>:
 800f6dc:	4801      	ldr	r0, [pc, #4]	; (800f6e4 <__sfp_lock_acquire+0x8>)
 800f6de:	f000 b8b3 	b.w	800f848 <__retarget_lock_acquire_recursive>
 800f6e2:	bf00      	nop
 800f6e4:	200025b8 	.word	0x200025b8

0800f6e8 <__sfp_lock_release>:
 800f6e8:	4801      	ldr	r0, [pc, #4]	; (800f6f0 <__sfp_lock_release+0x8>)
 800f6ea:	f000 b8ae 	b.w	800f84a <__retarget_lock_release_recursive>
 800f6ee:	bf00      	nop
 800f6f0:	200025b8 	.word	0x200025b8

0800f6f4 <__sinit_lock_acquire>:
 800f6f4:	4801      	ldr	r0, [pc, #4]	; (800f6fc <__sinit_lock_acquire+0x8>)
 800f6f6:	f000 b8a7 	b.w	800f848 <__retarget_lock_acquire_recursive>
 800f6fa:	bf00      	nop
 800f6fc:	200025b3 	.word	0x200025b3

0800f700 <__sinit_lock_release>:
 800f700:	4801      	ldr	r0, [pc, #4]	; (800f708 <__sinit_lock_release+0x8>)
 800f702:	f000 b8a2 	b.w	800f84a <__retarget_lock_release_recursive>
 800f706:	bf00      	nop
 800f708:	200025b3 	.word	0x200025b3

0800f70c <__sinit>:
 800f70c:	b510      	push	{r4, lr}
 800f70e:	4604      	mov	r4, r0
 800f710:	f7ff fff0 	bl	800f6f4 <__sinit_lock_acquire>
 800f714:	69a3      	ldr	r3, [r4, #24]
 800f716:	b11b      	cbz	r3, 800f720 <__sinit+0x14>
 800f718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f71c:	f7ff bff0 	b.w	800f700 <__sinit_lock_release>
 800f720:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f724:	6523      	str	r3, [r4, #80]	; 0x50
 800f726:	4b13      	ldr	r3, [pc, #76]	; (800f774 <__sinit+0x68>)
 800f728:	4a13      	ldr	r2, [pc, #76]	; (800f778 <__sinit+0x6c>)
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	62a2      	str	r2, [r4, #40]	; 0x28
 800f72e:	42a3      	cmp	r3, r4
 800f730:	bf04      	itt	eq
 800f732:	2301      	moveq	r3, #1
 800f734:	61a3      	streq	r3, [r4, #24]
 800f736:	4620      	mov	r0, r4
 800f738:	f000 f820 	bl	800f77c <__sfp>
 800f73c:	6060      	str	r0, [r4, #4]
 800f73e:	4620      	mov	r0, r4
 800f740:	f000 f81c 	bl	800f77c <__sfp>
 800f744:	60a0      	str	r0, [r4, #8]
 800f746:	4620      	mov	r0, r4
 800f748:	f000 f818 	bl	800f77c <__sfp>
 800f74c:	2200      	movs	r2, #0
 800f74e:	60e0      	str	r0, [r4, #12]
 800f750:	2104      	movs	r1, #4
 800f752:	6860      	ldr	r0, [r4, #4]
 800f754:	f7ff ff82 	bl	800f65c <std>
 800f758:	68a0      	ldr	r0, [r4, #8]
 800f75a:	2201      	movs	r2, #1
 800f75c:	2109      	movs	r1, #9
 800f75e:	f7ff ff7d 	bl	800f65c <std>
 800f762:	68e0      	ldr	r0, [r4, #12]
 800f764:	2202      	movs	r2, #2
 800f766:	2112      	movs	r1, #18
 800f768:	f7ff ff78 	bl	800f65c <std>
 800f76c:	2301      	movs	r3, #1
 800f76e:	61a3      	str	r3, [r4, #24]
 800f770:	e7d2      	b.n	800f718 <__sinit+0xc>
 800f772:	bf00      	nop
 800f774:	0800fc28 	.word	0x0800fc28
 800f778:	0800f6a5 	.word	0x0800f6a5

0800f77c <__sfp>:
 800f77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f77e:	4607      	mov	r7, r0
 800f780:	f7ff ffac 	bl	800f6dc <__sfp_lock_acquire>
 800f784:	4b1e      	ldr	r3, [pc, #120]	; (800f800 <__sfp+0x84>)
 800f786:	681e      	ldr	r6, [r3, #0]
 800f788:	69b3      	ldr	r3, [r6, #24]
 800f78a:	b913      	cbnz	r3, 800f792 <__sfp+0x16>
 800f78c:	4630      	mov	r0, r6
 800f78e:	f7ff ffbd 	bl	800f70c <__sinit>
 800f792:	3648      	adds	r6, #72	; 0x48
 800f794:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f798:	3b01      	subs	r3, #1
 800f79a:	d503      	bpl.n	800f7a4 <__sfp+0x28>
 800f79c:	6833      	ldr	r3, [r6, #0]
 800f79e:	b30b      	cbz	r3, 800f7e4 <__sfp+0x68>
 800f7a0:	6836      	ldr	r6, [r6, #0]
 800f7a2:	e7f7      	b.n	800f794 <__sfp+0x18>
 800f7a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f7a8:	b9d5      	cbnz	r5, 800f7e0 <__sfp+0x64>
 800f7aa:	4b16      	ldr	r3, [pc, #88]	; (800f804 <__sfp+0x88>)
 800f7ac:	60e3      	str	r3, [r4, #12]
 800f7ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f7b2:	6665      	str	r5, [r4, #100]	; 0x64
 800f7b4:	f000 f847 	bl	800f846 <__retarget_lock_init_recursive>
 800f7b8:	f7ff ff96 	bl	800f6e8 <__sfp_lock_release>
 800f7bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f7c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f7c4:	6025      	str	r5, [r4, #0]
 800f7c6:	61a5      	str	r5, [r4, #24]
 800f7c8:	2208      	movs	r2, #8
 800f7ca:	4629      	mov	r1, r5
 800f7cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f7d0:	f7fd fcb6 	bl	800d140 <memset>
 800f7d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f7d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f7dc:	4620      	mov	r0, r4
 800f7de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7e0:	3468      	adds	r4, #104	; 0x68
 800f7e2:	e7d9      	b.n	800f798 <__sfp+0x1c>
 800f7e4:	2104      	movs	r1, #4
 800f7e6:	4638      	mov	r0, r7
 800f7e8:	f7ff ff62 	bl	800f6b0 <__sfmoreglue>
 800f7ec:	4604      	mov	r4, r0
 800f7ee:	6030      	str	r0, [r6, #0]
 800f7f0:	2800      	cmp	r0, #0
 800f7f2:	d1d5      	bne.n	800f7a0 <__sfp+0x24>
 800f7f4:	f7ff ff78 	bl	800f6e8 <__sfp_lock_release>
 800f7f8:	230c      	movs	r3, #12
 800f7fa:	603b      	str	r3, [r7, #0]
 800f7fc:	e7ee      	b.n	800f7dc <__sfp+0x60>
 800f7fe:	bf00      	nop
 800f800:	0800fc28 	.word	0x0800fc28
 800f804:	ffff0001 	.word	0xffff0001

0800f808 <_fwalk_reent>:
 800f808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f80c:	4606      	mov	r6, r0
 800f80e:	4688      	mov	r8, r1
 800f810:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f814:	2700      	movs	r7, #0
 800f816:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f81a:	f1b9 0901 	subs.w	r9, r9, #1
 800f81e:	d505      	bpl.n	800f82c <_fwalk_reent+0x24>
 800f820:	6824      	ldr	r4, [r4, #0]
 800f822:	2c00      	cmp	r4, #0
 800f824:	d1f7      	bne.n	800f816 <_fwalk_reent+0xe>
 800f826:	4638      	mov	r0, r7
 800f828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f82c:	89ab      	ldrh	r3, [r5, #12]
 800f82e:	2b01      	cmp	r3, #1
 800f830:	d907      	bls.n	800f842 <_fwalk_reent+0x3a>
 800f832:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f836:	3301      	adds	r3, #1
 800f838:	d003      	beq.n	800f842 <_fwalk_reent+0x3a>
 800f83a:	4629      	mov	r1, r5
 800f83c:	4630      	mov	r0, r6
 800f83e:	47c0      	blx	r8
 800f840:	4307      	orrs	r7, r0
 800f842:	3568      	adds	r5, #104	; 0x68
 800f844:	e7e9      	b.n	800f81a <_fwalk_reent+0x12>

0800f846 <__retarget_lock_init_recursive>:
 800f846:	4770      	bx	lr

0800f848 <__retarget_lock_acquire_recursive>:
 800f848:	4770      	bx	lr

0800f84a <__retarget_lock_release_recursive>:
 800f84a:	4770      	bx	lr

0800f84c <__swhatbuf_r>:
 800f84c:	b570      	push	{r4, r5, r6, lr}
 800f84e:	460e      	mov	r6, r1
 800f850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f854:	2900      	cmp	r1, #0
 800f856:	b096      	sub	sp, #88	; 0x58
 800f858:	4614      	mov	r4, r2
 800f85a:	461d      	mov	r5, r3
 800f85c:	da07      	bge.n	800f86e <__swhatbuf_r+0x22>
 800f85e:	2300      	movs	r3, #0
 800f860:	602b      	str	r3, [r5, #0]
 800f862:	89b3      	ldrh	r3, [r6, #12]
 800f864:	061a      	lsls	r2, r3, #24
 800f866:	d410      	bmi.n	800f88a <__swhatbuf_r+0x3e>
 800f868:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f86c:	e00e      	b.n	800f88c <__swhatbuf_r+0x40>
 800f86e:	466a      	mov	r2, sp
 800f870:	f000 f8fa 	bl	800fa68 <_fstat_r>
 800f874:	2800      	cmp	r0, #0
 800f876:	dbf2      	blt.n	800f85e <__swhatbuf_r+0x12>
 800f878:	9a01      	ldr	r2, [sp, #4]
 800f87a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f87e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f882:	425a      	negs	r2, r3
 800f884:	415a      	adcs	r2, r3
 800f886:	602a      	str	r2, [r5, #0]
 800f888:	e7ee      	b.n	800f868 <__swhatbuf_r+0x1c>
 800f88a:	2340      	movs	r3, #64	; 0x40
 800f88c:	2000      	movs	r0, #0
 800f88e:	6023      	str	r3, [r4, #0]
 800f890:	b016      	add	sp, #88	; 0x58
 800f892:	bd70      	pop	{r4, r5, r6, pc}

0800f894 <__smakebuf_r>:
 800f894:	898b      	ldrh	r3, [r1, #12]
 800f896:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f898:	079d      	lsls	r5, r3, #30
 800f89a:	4606      	mov	r6, r0
 800f89c:	460c      	mov	r4, r1
 800f89e:	d507      	bpl.n	800f8b0 <__smakebuf_r+0x1c>
 800f8a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f8a4:	6023      	str	r3, [r4, #0]
 800f8a6:	6123      	str	r3, [r4, #16]
 800f8a8:	2301      	movs	r3, #1
 800f8aa:	6163      	str	r3, [r4, #20]
 800f8ac:	b002      	add	sp, #8
 800f8ae:	bd70      	pop	{r4, r5, r6, pc}
 800f8b0:	ab01      	add	r3, sp, #4
 800f8b2:	466a      	mov	r2, sp
 800f8b4:	f7ff ffca 	bl	800f84c <__swhatbuf_r>
 800f8b8:	9900      	ldr	r1, [sp, #0]
 800f8ba:	4605      	mov	r5, r0
 800f8bc:	4630      	mov	r0, r6
 800f8be:	f7ff fb23 	bl	800ef08 <_malloc_r>
 800f8c2:	b948      	cbnz	r0, 800f8d8 <__smakebuf_r+0x44>
 800f8c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8c8:	059a      	lsls	r2, r3, #22
 800f8ca:	d4ef      	bmi.n	800f8ac <__smakebuf_r+0x18>
 800f8cc:	f023 0303 	bic.w	r3, r3, #3
 800f8d0:	f043 0302 	orr.w	r3, r3, #2
 800f8d4:	81a3      	strh	r3, [r4, #12]
 800f8d6:	e7e3      	b.n	800f8a0 <__smakebuf_r+0xc>
 800f8d8:	4b0d      	ldr	r3, [pc, #52]	; (800f910 <__smakebuf_r+0x7c>)
 800f8da:	62b3      	str	r3, [r6, #40]	; 0x28
 800f8dc:	89a3      	ldrh	r3, [r4, #12]
 800f8de:	6020      	str	r0, [r4, #0]
 800f8e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8e4:	81a3      	strh	r3, [r4, #12]
 800f8e6:	9b00      	ldr	r3, [sp, #0]
 800f8e8:	6163      	str	r3, [r4, #20]
 800f8ea:	9b01      	ldr	r3, [sp, #4]
 800f8ec:	6120      	str	r0, [r4, #16]
 800f8ee:	b15b      	cbz	r3, 800f908 <__smakebuf_r+0x74>
 800f8f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f8f4:	4630      	mov	r0, r6
 800f8f6:	f000 f8c9 	bl	800fa8c <_isatty_r>
 800f8fa:	b128      	cbz	r0, 800f908 <__smakebuf_r+0x74>
 800f8fc:	89a3      	ldrh	r3, [r4, #12]
 800f8fe:	f023 0303 	bic.w	r3, r3, #3
 800f902:	f043 0301 	orr.w	r3, r3, #1
 800f906:	81a3      	strh	r3, [r4, #12]
 800f908:	89a0      	ldrh	r0, [r4, #12]
 800f90a:	4305      	orrs	r5, r0
 800f90c:	81a5      	strh	r5, [r4, #12]
 800f90e:	e7cd      	b.n	800f8ac <__smakebuf_r+0x18>
 800f910:	0800f6a5 	.word	0x0800f6a5

0800f914 <_raise_r>:
 800f914:	291f      	cmp	r1, #31
 800f916:	b538      	push	{r3, r4, r5, lr}
 800f918:	4604      	mov	r4, r0
 800f91a:	460d      	mov	r5, r1
 800f91c:	d904      	bls.n	800f928 <_raise_r+0x14>
 800f91e:	2316      	movs	r3, #22
 800f920:	6003      	str	r3, [r0, #0]
 800f922:	f04f 30ff 	mov.w	r0, #4294967295
 800f926:	bd38      	pop	{r3, r4, r5, pc}
 800f928:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f92a:	b112      	cbz	r2, 800f932 <_raise_r+0x1e>
 800f92c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f930:	b94b      	cbnz	r3, 800f946 <_raise_r+0x32>
 800f932:	4620      	mov	r0, r4
 800f934:	f000 f830 	bl	800f998 <_getpid_r>
 800f938:	462a      	mov	r2, r5
 800f93a:	4601      	mov	r1, r0
 800f93c:	4620      	mov	r0, r4
 800f93e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f942:	f000 b817 	b.w	800f974 <_kill_r>
 800f946:	2b01      	cmp	r3, #1
 800f948:	d00a      	beq.n	800f960 <_raise_r+0x4c>
 800f94a:	1c59      	adds	r1, r3, #1
 800f94c:	d103      	bne.n	800f956 <_raise_r+0x42>
 800f94e:	2316      	movs	r3, #22
 800f950:	6003      	str	r3, [r0, #0]
 800f952:	2001      	movs	r0, #1
 800f954:	e7e7      	b.n	800f926 <_raise_r+0x12>
 800f956:	2400      	movs	r4, #0
 800f958:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f95c:	4628      	mov	r0, r5
 800f95e:	4798      	blx	r3
 800f960:	2000      	movs	r0, #0
 800f962:	e7e0      	b.n	800f926 <_raise_r+0x12>

0800f964 <raise>:
 800f964:	4b02      	ldr	r3, [pc, #8]	; (800f970 <raise+0xc>)
 800f966:	4601      	mov	r1, r0
 800f968:	6818      	ldr	r0, [r3, #0]
 800f96a:	f7ff bfd3 	b.w	800f914 <_raise_r>
 800f96e:	bf00      	nop
 800f970:	20000180 	.word	0x20000180

0800f974 <_kill_r>:
 800f974:	b538      	push	{r3, r4, r5, lr}
 800f976:	4d07      	ldr	r5, [pc, #28]	; (800f994 <_kill_r+0x20>)
 800f978:	2300      	movs	r3, #0
 800f97a:	4604      	mov	r4, r0
 800f97c:	4608      	mov	r0, r1
 800f97e:	4611      	mov	r1, r2
 800f980:	602b      	str	r3, [r5, #0]
 800f982:	f000 f8d7 	bl	800fb34 <_kill>
 800f986:	1c43      	adds	r3, r0, #1
 800f988:	d102      	bne.n	800f990 <_kill_r+0x1c>
 800f98a:	682b      	ldr	r3, [r5, #0]
 800f98c:	b103      	cbz	r3, 800f990 <_kill_r+0x1c>
 800f98e:	6023      	str	r3, [r4, #0]
 800f990:	bd38      	pop	{r3, r4, r5, pc}
 800f992:	bf00      	nop
 800f994:	200025ac 	.word	0x200025ac

0800f998 <_getpid_r>:
 800f998:	f000 b8bc 	b.w	800fb14 <_getpid>

0800f99c <__sread>:
 800f99c:	b510      	push	{r4, lr}
 800f99e:	460c      	mov	r4, r1
 800f9a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9a4:	f000 f894 	bl	800fad0 <_read_r>
 800f9a8:	2800      	cmp	r0, #0
 800f9aa:	bfab      	itete	ge
 800f9ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f9ae:	89a3      	ldrhlt	r3, [r4, #12]
 800f9b0:	181b      	addge	r3, r3, r0
 800f9b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f9b6:	bfac      	ite	ge
 800f9b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800f9ba:	81a3      	strhlt	r3, [r4, #12]
 800f9bc:	bd10      	pop	{r4, pc}

0800f9be <__swrite>:
 800f9be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9c2:	461f      	mov	r7, r3
 800f9c4:	898b      	ldrh	r3, [r1, #12]
 800f9c6:	05db      	lsls	r3, r3, #23
 800f9c8:	4605      	mov	r5, r0
 800f9ca:	460c      	mov	r4, r1
 800f9cc:	4616      	mov	r6, r2
 800f9ce:	d505      	bpl.n	800f9dc <__swrite+0x1e>
 800f9d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9d4:	2302      	movs	r3, #2
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	f000 f868 	bl	800faac <_lseek_r>
 800f9dc:	89a3      	ldrh	r3, [r4, #12]
 800f9de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f9e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f9e6:	81a3      	strh	r3, [r4, #12]
 800f9e8:	4632      	mov	r2, r6
 800f9ea:	463b      	mov	r3, r7
 800f9ec:	4628      	mov	r0, r5
 800f9ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9f2:	f000 b817 	b.w	800fa24 <_write_r>

0800f9f6 <__sseek>:
 800f9f6:	b510      	push	{r4, lr}
 800f9f8:	460c      	mov	r4, r1
 800f9fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9fe:	f000 f855 	bl	800faac <_lseek_r>
 800fa02:	1c43      	adds	r3, r0, #1
 800fa04:	89a3      	ldrh	r3, [r4, #12]
 800fa06:	bf15      	itete	ne
 800fa08:	6560      	strne	r0, [r4, #84]	; 0x54
 800fa0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fa0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fa12:	81a3      	strheq	r3, [r4, #12]
 800fa14:	bf18      	it	ne
 800fa16:	81a3      	strhne	r3, [r4, #12]
 800fa18:	bd10      	pop	{r4, pc}

0800fa1a <__sclose>:
 800fa1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa1e:	f000 b813 	b.w	800fa48 <_close_r>
	...

0800fa24 <_write_r>:
 800fa24:	b538      	push	{r3, r4, r5, lr}
 800fa26:	4d07      	ldr	r5, [pc, #28]	; (800fa44 <_write_r+0x20>)
 800fa28:	4604      	mov	r4, r0
 800fa2a:	4608      	mov	r0, r1
 800fa2c:	4611      	mov	r1, r2
 800fa2e:	2200      	movs	r2, #0
 800fa30:	602a      	str	r2, [r5, #0]
 800fa32:	461a      	mov	r2, r3
 800fa34:	f000 f8a4 	bl	800fb80 <_write>
 800fa38:	1c43      	adds	r3, r0, #1
 800fa3a:	d102      	bne.n	800fa42 <_write_r+0x1e>
 800fa3c:	682b      	ldr	r3, [r5, #0]
 800fa3e:	b103      	cbz	r3, 800fa42 <_write_r+0x1e>
 800fa40:	6023      	str	r3, [r4, #0]
 800fa42:	bd38      	pop	{r3, r4, r5, pc}
 800fa44:	200025ac 	.word	0x200025ac

0800fa48 <_close_r>:
 800fa48:	b538      	push	{r3, r4, r5, lr}
 800fa4a:	4d06      	ldr	r5, [pc, #24]	; (800fa64 <_close_r+0x1c>)
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	4604      	mov	r4, r0
 800fa50:	4608      	mov	r0, r1
 800fa52:	602b      	str	r3, [r5, #0]
 800fa54:	f000 f84e 	bl	800faf4 <_close>
 800fa58:	1c43      	adds	r3, r0, #1
 800fa5a:	d102      	bne.n	800fa62 <_close_r+0x1a>
 800fa5c:	682b      	ldr	r3, [r5, #0]
 800fa5e:	b103      	cbz	r3, 800fa62 <_close_r+0x1a>
 800fa60:	6023      	str	r3, [r4, #0]
 800fa62:	bd38      	pop	{r3, r4, r5, pc}
 800fa64:	200025ac 	.word	0x200025ac

0800fa68 <_fstat_r>:
 800fa68:	b538      	push	{r3, r4, r5, lr}
 800fa6a:	4d07      	ldr	r5, [pc, #28]	; (800fa88 <_fstat_r+0x20>)
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	4604      	mov	r4, r0
 800fa70:	4608      	mov	r0, r1
 800fa72:	4611      	mov	r1, r2
 800fa74:	602b      	str	r3, [r5, #0]
 800fa76:	f000 f845 	bl	800fb04 <_fstat>
 800fa7a:	1c43      	adds	r3, r0, #1
 800fa7c:	d102      	bne.n	800fa84 <_fstat_r+0x1c>
 800fa7e:	682b      	ldr	r3, [r5, #0]
 800fa80:	b103      	cbz	r3, 800fa84 <_fstat_r+0x1c>
 800fa82:	6023      	str	r3, [r4, #0]
 800fa84:	bd38      	pop	{r3, r4, r5, pc}
 800fa86:	bf00      	nop
 800fa88:	200025ac 	.word	0x200025ac

0800fa8c <_isatty_r>:
 800fa8c:	b538      	push	{r3, r4, r5, lr}
 800fa8e:	4d06      	ldr	r5, [pc, #24]	; (800faa8 <_isatty_r+0x1c>)
 800fa90:	2300      	movs	r3, #0
 800fa92:	4604      	mov	r4, r0
 800fa94:	4608      	mov	r0, r1
 800fa96:	602b      	str	r3, [r5, #0]
 800fa98:	f000 f844 	bl	800fb24 <_isatty>
 800fa9c:	1c43      	adds	r3, r0, #1
 800fa9e:	d102      	bne.n	800faa6 <_isatty_r+0x1a>
 800faa0:	682b      	ldr	r3, [r5, #0]
 800faa2:	b103      	cbz	r3, 800faa6 <_isatty_r+0x1a>
 800faa4:	6023      	str	r3, [r4, #0]
 800faa6:	bd38      	pop	{r3, r4, r5, pc}
 800faa8:	200025ac 	.word	0x200025ac

0800faac <_lseek_r>:
 800faac:	b538      	push	{r3, r4, r5, lr}
 800faae:	4d07      	ldr	r5, [pc, #28]	; (800facc <_lseek_r+0x20>)
 800fab0:	4604      	mov	r4, r0
 800fab2:	4608      	mov	r0, r1
 800fab4:	4611      	mov	r1, r2
 800fab6:	2200      	movs	r2, #0
 800fab8:	602a      	str	r2, [r5, #0]
 800faba:	461a      	mov	r2, r3
 800fabc:	f000 f842 	bl	800fb44 <_lseek>
 800fac0:	1c43      	adds	r3, r0, #1
 800fac2:	d102      	bne.n	800faca <_lseek_r+0x1e>
 800fac4:	682b      	ldr	r3, [r5, #0]
 800fac6:	b103      	cbz	r3, 800faca <_lseek_r+0x1e>
 800fac8:	6023      	str	r3, [r4, #0]
 800faca:	bd38      	pop	{r3, r4, r5, pc}
 800facc:	200025ac 	.word	0x200025ac

0800fad0 <_read_r>:
 800fad0:	b538      	push	{r3, r4, r5, lr}
 800fad2:	4d07      	ldr	r5, [pc, #28]	; (800faf0 <_read_r+0x20>)
 800fad4:	4604      	mov	r4, r0
 800fad6:	4608      	mov	r0, r1
 800fad8:	4611      	mov	r1, r2
 800fada:	2200      	movs	r2, #0
 800fadc:	602a      	str	r2, [r5, #0]
 800fade:	461a      	mov	r2, r3
 800fae0:	f000 f838 	bl	800fb54 <_read>
 800fae4:	1c43      	adds	r3, r0, #1
 800fae6:	d102      	bne.n	800faee <_read_r+0x1e>
 800fae8:	682b      	ldr	r3, [r5, #0]
 800faea:	b103      	cbz	r3, 800faee <_read_r+0x1e>
 800faec:	6023      	str	r3, [r4, #0]
 800faee:	bd38      	pop	{r3, r4, r5, pc}
 800faf0:	200025ac 	.word	0x200025ac

0800faf4 <_close>:
 800faf4:	4b02      	ldr	r3, [pc, #8]	; (800fb00 <_close+0xc>)
 800faf6:	2258      	movs	r2, #88	; 0x58
 800faf8:	601a      	str	r2, [r3, #0]
 800fafa:	f04f 30ff 	mov.w	r0, #4294967295
 800fafe:	4770      	bx	lr
 800fb00:	200025ac 	.word	0x200025ac

0800fb04 <_fstat>:
 800fb04:	4b02      	ldr	r3, [pc, #8]	; (800fb10 <_fstat+0xc>)
 800fb06:	2258      	movs	r2, #88	; 0x58
 800fb08:	601a      	str	r2, [r3, #0]
 800fb0a:	f04f 30ff 	mov.w	r0, #4294967295
 800fb0e:	4770      	bx	lr
 800fb10:	200025ac 	.word	0x200025ac

0800fb14 <_getpid>:
 800fb14:	4b02      	ldr	r3, [pc, #8]	; (800fb20 <_getpid+0xc>)
 800fb16:	2258      	movs	r2, #88	; 0x58
 800fb18:	601a      	str	r2, [r3, #0]
 800fb1a:	f04f 30ff 	mov.w	r0, #4294967295
 800fb1e:	4770      	bx	lr
 800fb20:	200025ac 	.word	0x200025ac

0800fb24 <_isatty>:
 800fb24:	4b02      	ldr	r3, [pc, #8]	; (800fb30 <_isatty+0xc>)
 800fb26:	2258      	movs	r2, #88	; 0x58
 800fb28:	601a      	str	r2, [r3, #0]
 800fb2a:	2000      	movs	r0, #0
 800fb2c:	4770      	bx	lr
 800fb2e:	bf00      	nop
 800fb30:	200025ac 	.word	0x200025ac

0800fb34 <_kill>:
 800fb34:	4b02      	ldr	r3, [pc, #8]	; (800fb40 <_kill+0xc>)
 800fb36:	2258      	movs	r2, #88	; 0x58
 800fb38:	601a      	str	r2, [r3, #0]
 800fb3a:	f04f 30ff 	mov.w	r0, #4294967295
 800fb3e:	4770      	bx	lr
 800fb40:	200025ac 	.word	0x200025ac

0800fb44 <_lseek>:
 800fb44:	4b02      	ldr	r3, [pc, #8]	; (800fb50 <_lseek+0xc>)
 800fb46:	2258      	movs	r2, #88	; 0x58
 800fb48:	601a      	str	r2, [r3, #0]
 800fb4a:	f04f 30ff 	mov.w	r0, #4294967295
 800fb4e:	4770      	bx	lr
 800fb50:	200025ac 	.word	0x200025ac

0800fb54 <_read>:
 800fb54:	4b02      	ldr	r3, [pc, #8]	; (800fb60 <_read+0xc>)
 800fb56:	2258      	movs	r2, #88	; 0x58
 800fb58:	601a      	str	r2, [r3, #0]
 800fb5a:	f04f 30ff 	mov.w	r0, #4294967295
 800fb5e:	4770      	bx	lr
 800fb60:	200025ac 	.word	0x200025ac

0800fb64 <_sbrk>:
 800fb64:	4b04      	ldr	r3, [pc, #16]	; (800fb78 <_sbrk+0x14>)
 800fb66:	6819      	ldr	r1, [r3, #0]
 800fb68:	4602      	mov	r2, r0
 800fb6a:	b909      	cbnz	r1, 800fb70 <_sbrk+0xc>
 800fb6c:	4903      	ldr	r1, [pc, #12]	; (800fb7c <_sbrk+0x18>)
 800fb6e:	6019      	str	r1, [r3, #0]
 800fb70:	6818      	ldr	r0, [r3, #0]
 800fb72:	4402      	add	r2, r0
 800fb74:	601a      	str	r2, [r3, #0]
 800fb76:	4770      	bx	lr
 800fb78:	20000a1c 	.word	0x20000a1c
 800fb7c:	200025c0 	.word	0x200025c0

0800fb80 <_write>:
 800fb80:	4b02      	ldr	r3, [pc, #8]	; (800fb8c <_write+0xc>)
 800fb82:	2258      	movs	r2, #88	; 0x58
 800fb84:	601a      	str	r2, [r3, #0]
 800fb86:	f04f 30ff 	mov.w	r0, #4294967295
 800fb8a:	4770      	bx	lr
 800fb8c:	200025ac 	.word	0x200025ac

0800fb90 <_exit>:
 800fb90:	e7fe      	b.n	800fb90 <_exit>
	...

0800fb94 <_init>:
 800fb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb96:	bf00      	nop
 800fb98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb9a:	bc08      	pop	{r3}
 800fb9c:	469e      	mov	lr, r3
 800fb9e:	4770      	bx	lr

0800fba0 <_fini>:
 800fba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fba2:	bf00      	nop
 800fba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fba6:	bc08      	pop	{r3}
 800fba8:	469e      	mov	lr, r3
 800fbaa:	4770      	bx	lr
