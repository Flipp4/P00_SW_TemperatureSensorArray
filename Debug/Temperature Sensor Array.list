
Temperature Sensor Array.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5fc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800a794  0800a794  0001a794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7fc  0800a7fc  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7fc  0800a7fc  0001a7fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a804  0800a804  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a804  0800a804  0001a804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a808  0800a808  0001a808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800a80c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d0c  20000180  0800a98c  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e8c  0800a98c  00021e8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001efed  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e4d  00000000  00000000  0003f19d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  00042ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001378  00000000  00000000  000444b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b45a  00000000  00000000  00045830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b40c  00000000  00000000  00060c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000972e7  00000000  00000000  0007c096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011337d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000572c  00000000  00000000  001133d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000180 	.word	0x20000180
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a77c 	.word	0x0800a77c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000184 	.word	0x20000184
 80001d4:	0800a77c 	.word	0x0800a77c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004d4:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <HAL_Init+0x40>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a0d      	ldr	r2, [pc, #52]	; (8000510 <HAL_Init+0x40>)
 80004da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e0:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <HAL_Init+0x40>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a0a      	ldr	r2, [pc, #40]	; (8000510 <HAL_Init+0x40>)
 80004e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004ec:	4b08      	ldr	r3, [pc, #32]	; (8000510 <HAL_Init+0x40>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a07      	ldr	r2, [pc, #28]	; (8000510 <HAL_Init+0x40>)
 80004f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f8:	2003      	movs	r0, #3
 80004fa:	f000 f94f 	bl	800079c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004fe:	2000      	movs	r0, #0
 8000500:	f000 f808 	bl	8000514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000504:	f009 f9ba 	bl	800987c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000508:	2300      	movs	r3, #0
}
 800050a:	4618      	mov	r0, r3
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40023c00 	.word	0x40023c00

08000514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800051c:	4b12      	ldr	r3, [pc, #72]	; (8000568 <HAL_InitTick+0x54>)
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <HAL_InitTick+0x58>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	4619      	mov	r1, r3
 8000526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052a:	fbb3 f3f1 	udiv	r3, r3, r1
 800052e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000532:	4618      	mov	r0, r3
 8000534:	f000 f967 	bl	8000806 <HAL_SYSTICK_Config>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800053e:	2301      	movs	r3, #1
 8000540:	e00e      	b.n	8000560 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2b0f      	cmp	r3, #15
 8000546:	d80a      	bhi.n	800055e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000548:	2200      	movs	r2, #0
 800054a:	6879      	ldr	r1, [r7, #4]
 800054c:	f04f 30ff 	mov.w	r0, #4294967295
 8000550:	f000 f92f 	bl	80007b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000554:	4a06      	ldr	r2, [pc, #24]	; (8000570 <HAL_InitTick+0x5c>)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800055a:	2300      	movs	r3, #0
 800055c:	e000      	b.n	8000560 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800055e:	2301      	movs	r3, #1
}
 8000560:	4618      	mov	r0, r3
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000118 	.word	0x20000118
 800056c:	20000004 	.word	0x20000004
 8000570:	20000000 	.word	0x20000000

08000574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <HAL_IncTick+0x20>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	461a      	mov	r2, r3
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <HAL_IncTick+0x24>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4413      	add	r3, r2
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <HAL_IncTick+0x24>)
 8000586:	6013      	str	r3, [r2, #0]
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000004 	.word	0x20000004
 8000598:	200003c0 	.word	0x200003c0

0800059c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  return uwTick;
 80005a0:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <HAL_GetTick+0x14>)
 80005a2:	681b      	ldr	r3, [r3, #0]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	200003c0 	.word	0x200003c0

080005b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005bc:	f7ff ffee 	bl	800059c <HAL_GetTick>
 80005c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005cc:	d005      	beq.n	80005da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <HAL_Delay+0x44>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	461a      	mov	r2, r3
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	4413      	add	r3, r2
 80005d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005da:	bf00      	nop
 80005dc:	f7ff ffde 	bl	800059c <HAL_GetTick>
 80005e0:	4602      	mov	r2, r0
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	1ad3      	subs	r3, r2, r3
 80005e6:	68fa      	ldr	r2, [r7, #12]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d8f7      	bhi.n	80005dc <HAL_Delay+0x28>
  {
  }
}
 80005ec:	bf00      	nop
 80005ee:	bf00      	nop
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000004 	.word	0x20000004

080005fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f003 0307 	and.w	r3, r3, #7
 800060a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <__NVIC_SetPriorityGrouping+0x44>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000612:	68ba      	ldr	r2, [r7, #8]
 8000614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000618:	4013      	ands	r3, r2
 800061a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800062c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800062e:	4a04      	ldr	r2, [pc, #16]	; (8000640 <__NVIC_SetPriorityGrouping+0x44>)
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	60d3      	str	r3, [r2, #12]
}
 8000634:	bf00      	nop
 8000636:	3714      	adds	r7, #20
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000648:	4b04      	ldr	r3, [pc, #16]	; (800065c <__NVIC_GetPriorityGrouping+0x18>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	0a1b      	lsrs	r3, r3, #8
 800064e:	f003 0307 	and.w	r3, r3, #7
}
 8000652:	4618      	mov	r0, r3
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800066a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066e:	2b00      	cmp	r3, #0
 8000670:	db0b      	blt.n	800068a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	f003 021f 	and.w	r2, r3, #31
 8000678:	4907      	ldr	r1, [pc, #28]	; (8000698 <__NVIC_EnableIRQ+0x38>)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	095b      	lsrs	r3, r3, #5
 8000680:	2001      	movs	r0, #1
 8000682:	fa00 f202 	lsl.w	r2, r0, r2
 8000686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	e000e100 	.word	0xe000e100

0800069c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	6039      	str	r1, [r7, #0]
 80006a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	db0a      	blt.n	80006c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	490c      	ldr	r1, [pc, #48]	; (80006e8 <__NVIC_SetPriority+0x4c>)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	0112      	lsls	r2, r2, #4
 80006bc:	b2d2      	uxtb	r2, r2
 80006be:	440b      	add	r3, r1
 80006c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c4:	e00a      	b.n	80006dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	4908      	ldr	r1, [pc, #32]	; (80006ec <__NVIC_SetPriority+0x50>)
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	f003 030f 	and.w	r3, r3, #15
 80006d2:	3b04      	subs	r3, #4
 80006d4:	0112      	lsls	r2, r2, #4
 80006d6:	b2d2      	uxtb	r2, r2
 80006d8:	440b      	add	r3, r1
 80006da:	761a      	strb	r2, [r3, #24]
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000e100 	.word	0xe000e100
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b089      	sub	sp, #36	; 0x24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	f003 0307 	and.w	r3, r3, #7
 8000702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000704:	69fb      	ldr	r3, [r7, #28]
 8000706:	f1c3 0307 	rsb	r3, r3, #7
 800070a:	2b04      	cmp	r3, #4
 800070c:	bf28      	it	cs
 800070e:	2304      	movcs	r3, #4
 8000710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	3304      	adds	r3, #4
 8000716:	2b06      	cmp	r3, #6
 8000718:	d902      	bls.n	8000720 <NVIC_EncodePriority+0x30>
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	3b03      	subs	r3, #3
 800071e:	e000      	b.n	8000722 <NVIC_EncodePriority+0x32>
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000724:	f04f 32ff 	mov.w	r2, #4294967295
 8000728:	69bb      	ldr	r3, [r7, #24]
 800072a:	fa02 f303 	lsl.w	r3, r2, r3
 800072e:	43da      	mvns	r2, r3
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	401a      	ands	r2, r3
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000738:	f04f 31ff 	mov.w	r1, #4294967295
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	fa01 f303 	lsl.w	r3, r1, r3
 8000742:	43d9      	mvns	r1, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000748:	4313      	orrs	r3, r2
         );
}
 800074a:	4618      	mov	r0, r3
 800074c:	3724      	adds	r7, #36	; 0x24
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
	...

08000758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000768:	d301      	bcc.n	800076e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800076a:	2301      	movs	r3, #1
 800076c:	e00f      	b.n	800078e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076e:	4a0a      	ldr	r2, [pc, #40]	; (8000798 <SysTick_Config+0x40>)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3b01      	subs	r3, #1
 8000774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000776:	210f      	movs	r1, #15
 8000778:	f04f 30ff 	mov.w	r0, #4294967295
 800077c:	f7ff ff8e 	bl	800069c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <SysTick_Config+0x40>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <SysTick_Config+0x40>)
 8000788:	2207      	movs	r2, #7
 800078a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800078c:	2300      	movs	r3, #0
}
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	e000e010 	.word	0xe000e010

0800079c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ff29 	bl	80005fc <__NVIC_SetPriorityGrouping>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b086      	sub	sp, #24
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	4603      	mov	r3, r0
 80007ba:	60b9      	str	r1, [r7, #8]
 80007bc:	607a      	str	r2, [r7, #4]
 80007be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c4:	f7ff ff3e 	bl	8000644 <__NVIC_GetPriorityGrouping>
 80007c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	68b9      	ldr	r1, [r7, #8]
 80007ce:	6978      	ldr	r0, [r7, #20]
 80007d0:	f7ff ff8e 	bl	80006f0 <NVIC_EncodePriority>
 80007d4:	4602      	mov	r2, r0
 80007d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007da:	4611      	mov	r1, r2
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff5d 	bl	800069c <__NVIC_SetPriority>
}
 80007e2:	bf00      	nop
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	4603      	mov	r3, r0
 80007f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff31 	bl	8000660 <__NVIC_EnableIRQ>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff ffa2 	bl	8000758 <SysTick_Config>
 8000814:	4603      	mov	r3, r0
}
 8000816:	4618      	mov	r0, r3
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800082c:	f7ff feb6 	bl	800059c <HAL_GetTick>
 8000830:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d101      	bne.n	800083c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000838:	2301      	movs	r3, #1
 800083a:	e099      	b.n	8000970 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2202      	movs	r2, #2
 8000840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2200      	movs	r2, #0
 8000848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f022 0201 	bic.w	r2, r2, #1
 800085a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800085c:	e00f      	b.n	800087e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800085e:	f7ff fe9d 	bl	800059c <HAL_GetTick>
 8000862:	4602      	mov	r2, r0
 8000864:	693b      	ldr	r3, [r7, #16]
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	2b05      	cmp	r3, #5
 800086a:	d908      	bls.n	800087e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2220      	movs	r2, #32
 8000870:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2203      	movs	r2, #3
 8000876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800087a:	2303      	movs	r3, #3
 800087c:	e078      	b.n	8000970 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f003 0301 	and.w	r3, r3, #1
 8000888:	2b00      	cmp	r3, #0
 800088a:	d1e8      	bne.n	800085e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000894:	697a      	ldr	r2, [r7, #20]
 8000896:	4b38      	ldr	r3, [pc, #224]	; (8000978 <HAL_DMA_Init+0x158>)
 8000898:	4013      	ands	r3, r2
 800089a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	685a      	ldr	r2, [r3, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	689b      	ldr	r3, [r3, #8]
 80008a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	691b      	ldr	r3, [r3, #16]
 80008b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	6a1b      	ldr	r3, [r3, #32]
 80008c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008ca:	697a      	ldr	r2, [r7, #20]
 80008cc:	4313      	orrs	r3, r2
 80008ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008d4:	2b04      	cmp	r3, #4
 80008d6:	d107      	bne.n	80008e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e0:	4313      	orrs	r3, r2
 80008e2:	697a      	ldr	r2, [r7, #20]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	697a      	ldr	r2, [r7, #20]
 80008ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	f023 0307 	bic.w	r3, r3, #7
 80008fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000904:	697a      	ldr	r2, [r7, #20]
 8000906:	4313      	orrs	r3, r2
 8000908:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800090e:	2b04      	cmp	r3, #4
 8000910:	d117      	bne.n	8000942 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000916:	697a      	ldr	r2, [r7, #20]
 8000918:	4313      	orrs	r3, r2
 800091a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000920:	2b00      	cmp	r3, #0
 8000922:	d00e      	beq.n	8000942 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f000 fa19 	bl	8000d5c <DMA_CheckFifoParam>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d008      	beq.n	8000942 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2240      	movs	r2, #64	; 0x40
 8000934:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2201      	movs	r2, #1
 800093a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800093e:	2301      	movs	r3, #1
 8000940:	e016      	b.n	8000970 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	697a      	ldr	r2, [r7, #20]
 8000948:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f000 f9d0 	bl	8000cf0 <DMA_CalcBaseAndBitshift>
 8000950:	4603      	mov	r3, r0
 8000952:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000958:	223f      	movs	r2, #63	; 0x3f
 800095a:	409a      	lsls	r2, r3
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2200      	movs	r2, #0
 8000964:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2201      	movs	r2, #1
 800096a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800096e:	2300      	movs	r3, #0
}
 8000970:	4618      	mov	r0, r3
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	f010803f 	.word	0xf010803f

0800097c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800098a:	b2db      	uxtb	r3, r3
 800098c:	2b02      	cmp	r3, #2
 800098e:	d004      	beq.n	800099a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2280      	movs	r2, #128	; 0x80
 8000994:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
 8000998:	e00c      	b.n	80009b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2205      	movs	r2, #5
 800099e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f022 0201 	bic.w	r2, r2, #1
 80009b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80009b2:	2300      	movs	r3, #0
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80009cc:	4b92      	ldr	r3, [pc, #584]	; (8000c18 <HAL_DMA_IRQHandler+0x258>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a92      	ldr	r2, [pc, #584]	; (8000c1c <HAL_DMA_IRQHandler+0x25c>)
 80009d2:	fba2 2303 	umull	r2, r3, r2, r3
 80009d6:	0a9b      	lsrs	r3, r3, #10
 80009d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009ea:	2208      	movs	r2, #8
 80009ec:	409a      	lsls	r2, r3
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	4013      	ands	r3, r2
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d01a      	beq.n	8000a2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f003 0304 	and.w	r3, r3, #4
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d013      	beq.n	8000a2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f022 0204 	bic.w	r2, r2, #4
 8000a12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a18:	2208      	movs	r2, #8
 8000a1a:	409a      	lsls	r2, r3
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a24:	f043 0201 	orr.w	r2, r3, #1
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a30:	2201      	movs	r2, #1
 8000a32:	409a      	lsls	r2, r3
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4013      	ands	r3, r2
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d012      	beq.n	8000a62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d00b      	beq.n	8000a62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a4e:	2201      	movs	r2, #1
 8000a50:	409a      	lsls	r2, r3
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a5a:	f043 0202 	orr.w	r2, r3, #2
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a66:	2204      	movs	r2, #4
 8000a68:	409a      	lsls	r2, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d012      	beq.n	8000a98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f003 0302 	and.w	r3, r3, #2
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d00b      	beq.n	8000a98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a84:	2204      	movs	r2, #4
 8000a86:	409a      	lsls	r2, r3
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a90:	f043 0204 	orr.w	r2, r3, #4
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a9c:	2210      	movs	r2, #16
 8000a9e:	409a      	lsls	r2, r3
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d043      	beq.n	8000b30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f003 0308 	and.w	r3, r3, #8
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d03c      	beq.n	8000b30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aba:	2210      	movs	r2, #16
 8000abc:	409a      	lsls	r2, r3
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d018      	beq.n	8000b02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d108      	bne.n	8000af0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d024      	beq.n	8000b30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	4798      	blx	r3
 8000aee:	e01f      	b.n	8000b30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d01b      	beq.n	8000b30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	4798      	blx	r3
 8000b00:	e016      	b.n	8000b30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d107      	bne.n	8000b20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f022 0208 	bic.w	r2, r2, #8
 8000b1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d003      	beq.n	8000b30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b34:	2220      	movs	r2, #32
 8000b36:	409a      	lsls	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	f000 808e 	beq.w	8000c5e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f003 0310 	and.w	r3, r3, #16
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	f000 8086 	beq.w	8000c5e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b56:	2220      	movs	r2, #32
 8000b58:	409a      	lsls	r2, r3
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	2b05      	cmp	r3, #5
 8000b68:	d136      	bne.n	8000bd8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f022 0216 	bic.w	r2, r2, #22
 8000b78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	695a      	ldr	r2, [r3, #20]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d103      	bne.n	8000b9a <HAL_DMA_IRQHandler+0x1da>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d007      	beq.n	8000baa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f022 0208 	bic.w	r2, r2, #8
 8000ba8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bae:	223f      	movs	r2, #63	; 0x3f
 8000bb0:	409a      	lsls	r2, r3
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2201      	movs	r2, #1
 8000bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d07d      	beq.n	8000cca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	4798      	blx	r3
        }
        return;
 8000bd6:	e078      	b.n	8000cca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d01c      	beq.n	8000c20 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d108      	bne.n	8000c06 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d030      	beq.n	8000c5e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	4798      	blx	r3
 8000c04:	e02b      	b.n	8000c5e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d027      	beq.n	8000c5e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	4798      	blx	r3
 8000c16:	e022      	b.n	8000c5e <HAL_DMA_IRQHandler+0x29e>
 8000c18:	20000118 	.word	0x20000118
 8000c1c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d10f      	bne.n	8000c4e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f022 0210 	bic.w	r2, r2, #16
 8000c3c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2201      	movs	r2, #1
 8000c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d003      	beq.n	8000c5e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d032      	beq.n	8000ccc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d022      	beq.n	8000cb8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2205      	movs	r2, #5
 8000c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f022 0201 	bic.w	r2, r2, #1
 8000c88:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	697a      	ldr	r2, [r7, #20]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d307      	bcc.n	8000ca6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d1f2      	bne.n	8000c8a <HAL_DMA_IRQHandler+0x2ca>
 8000ca4:	e000      	b.n	8000ca8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000ca6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2201      	movs	r2, #1
 8000cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d005      	beq.n	8000ccc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	4798      	blx	r3
 8000cc8:	e000      	b.n	8000ccc <HAL_DMA_IRQHandler+0x30c>
        return;
 8000cca:	bf00      	nop
    }
  }
}
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop

08000cd4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ce2:	b2db      	uxtb	r3, r3
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	3b10      	subs	r3, #16
 8000d00:	4a14      	ldr	r2, [pc, #80]	; (8000d54 <DMA_CalcBaseAndBitshift+0x64>)
 8000d02:	fba2 2303 	umull	r2, r3, r2, r3
 8000d06:	091b      	lsrs	r3, r3, #4
 8000d08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000d0a:	4a13      	ldr	r2, [pc, #76]	; (8000d58 <DMA_CalcBaseAndBitshift+0x68>)
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	4413      	add	r3, r2
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	461a      	mov	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2b03      	cmp	r3, #3
 8000d1c:	d909      	bls.n	8000d32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000d26:	f023 0303 	bic.w	r3, r3, #3
 8000d2a:	1d1a      	adds	r2, r3, #4
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	659a      	str	r2, [r3, #88]	; 0x58
 8000d30:	e007      	b.n	8000d42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000d3a:	f023 0303 	bic.w	r3, r3, #3
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	aaaaaaab 	.word	0xaaaaaaab
 8000d58:	0800a7dc 	.word	0x0800a7dc

08000d5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d64:	2300      	movs	r3, #0
 8000d66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d11f      	bne.n	8000db6 <DMA_CheckFifoParam+0x5a>
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	2b03      	cmp	r3, #3
 8000d7a:	d856      	bhi.n	8000e2a <DMA_CheckFifoParam+0xce>
 8000d7c:	a201      	add	r2, pc, #4	; (adr r2, 8000d84 <DMA_CheckFifoParam+0x28>)
 8000d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d82:	bf00      	nop
 8000d84:	08000d95 	.word	0x08000d95
 8000d88:	08000da7 	.word	0x08000da7
 8000d8c:	08000d95 	.word	0x08000d95
 8000d90:	08000e2b 	.word	0x08000e2b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d046      	beq.n	8000e2e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000da4:	e043      	b.n	8000e2e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000daa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000dae:	d140      	bne.n	8000e32 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000db4:	e03d      	b.n	8000e32 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000dbe:	d121      	bne.n	8000e04 <DMA_CheckFifoParam+0xa8>
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	2b03      	cmp	r3, #3
 8000dc4:	d837      	bhi.n	8000e36 <DMA_CheckFifoParam+0xda>
 8000dc6:	a201      	add	r2, pc, #4	; (adr r2, 8000dcc <DMA_CheckFifoParam+0x70>)
 8000dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dcc:	08000ddd 	.word	0x08000ddd
 8000dd0:	08000de3 	.word	0x08000de3
 8000dd4:	08000ddd 	.word	0x08000ddd
 8000dd8:	08000df5 	.word	0x08000df5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	73fb      	strb	r3, [r7, #15]
      break;
 8000de0:	e030      	b.n	8000e44 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d025      	beq.n	8000e3a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000df2:	e022      	b.n	8000e3a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000dfc:	d11f      	bne.n	8000e3e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000e02:	e01c      	b.n	8000e3e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d903      	bls.n	8000e12 <DMA_CheckFifoParam+0xb6>
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	2b03      	cmp	r3, #3
 8000e0e:	d003      	beq.n	8000e18 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000e10:	e018      	b.n	8000e44 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	73fb      	strb	r3, [r7, #15]
      break;
 8000e16:	e015      	b.n	8000e44 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d00e      	beq.n	8000e42 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	73fb      	strb	r3, [r7, #15]
      break;
 8000e28:	e00b      	b.n	8000e42 <DMA_CheckFifoParam+0xe6>
      break;
 8000e2a:	bf00      	nop
 8000e2c:	e00a      	b.n	8000e44 <DMA_CheckFifoParam+0xe8>
      break;
 8000e2e:	bf00      	nop
 8000e30:	e008      	b.n	8000e44 <DMA_CheckFifoParam+0xe8>
      break;
 8000e32:	bf00      	nop
 8000e34:	e006      	b.n	8000e44 <DMA_CheckFifoParam+0xe8>
      break;
 8000e36:	bf00      	nop
 8000e38:	e004      	b.n	8000e44 <DMA_CheckFifoParam+0xe8>
      break;
 8000e3a:	bf00      	nop
 8000e3c:	e002      	b.n	8000e44 <DMA_CheckFifoParam+0xe8>
      break;   
 8000e3e:	bf00      	nop
 8000e40:	e000      	b.n	8000e44 <DMA_CheckFifoParam+0xe8>
      break;
 8000e42:	bf00      	nop
    }
  } 
  
  return status; 
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	; 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
 8000e6e:	e159      	b.n	8001124 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e70:	2201      	movs	r2, #1
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	697a      	ldr	r2, [r7, #20]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	f040 8148 	bne.w	800111e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f003 0303 	and.w	r3, r3, #3
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d005      	beq.n	8000ea6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d130      	bne.n	8000f08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	68da      	ldr	r2, [r3, #12]
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000edc:	2201      	movs	r2, #1
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	091b      	lsrs	r3, r3, #4
 8000ef2:	f003 0201 	and.w	r2, r3, #1
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	d017      	beq.n	8000f44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0303 	and.w	r3, r3, #3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d123      	bne.n	8000f98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	08da      	lsrs	r2, r3, #3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3208      	adds	r2, #8
 8000f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	f003 0307 	and.w	r3, r3, #7
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	220f      	movs	r2, #15
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	691a      	ldr	r2, [r3, #16]
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	08da      	lsrs	r2, r3, #3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	3208      	adds	r2, #8
 8000f92:	69b9      	ldr	r1, [r7, #24]
 8000f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 0203 	and.w	r2, r3, #3
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	f000 80a2 	beq.w	800111e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	4b57      	ldr	r3, [pc, #348]	; (800113c <HAL_GPIO_Init+0x2e8>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	4a56      	ldr	r2, [pc, #344]	; (800113c <HAL_GPIO_Init+0x2e8>)
 8000fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fea:	4b54      	ldr	r3, [pc, #336]	; (800113c <HAL_GPIO_Init+0x2e8>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ff6:	4a52      	ldr	r2, [pc, #328]	; (8001140 <HAL_GPIO_Init+0x2ec>)
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	089b      	lsrs	r3, r3, #2
 8000ffc:	3302      	adds	r3, #2
 8000ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f003 0303 	and.w	r3, r3, #3
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	220f      	movs	r2, #15
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a49      	ldr	r2, [pc, #292]	; (8001144 <HAL_GPIO_Init+0x2f0>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d019      	beq.n	8001056 <HAL_GPIO_Init+0x202>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a48      	ldr	r2, [pc, #288]	; (8001148 <HAL_GPIO_Init+0x2f4>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d013      	beq.n	8001052 <HAL_GPIO_Init+0x1fe>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a47      	ldr	r2, [pc, #284]	; (800114c <HAL_GPIO_Init+0x2f8>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d00d      	beq.n	800104e <HAL_GPIO_Init+0x1fa>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a46      	ldr	r2, [pc, #280]	; (8001150 <HAL_GPIO_Init+0x2fc>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d007      	beq.n	800104a <HAL_GPIO_Init+0x1f6>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a45      	ldr	r2, [pc, #276]	; (8001154 <HAL_GPIO_Init+0x300>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d101      	bne.n	8001046 <HAL_GPIO_Init+0x1f2>
 8001042:	2304      	movs	r3, #4
 8001044:	e008      	b.n	8001058 <HAL_GPIO_Init+0x204>
 8001046:	2307      	movs	r3, #7
 8001048:	e006      	b.n	8001058 <HAL_GPIO_Init+0x204>
 800104a:	2303      	movs	r3, #3
 800104c:	e004      	b.n	8001058 <HAL_GPIO_Init+0x204>
 800104e:	2302      	movs	r3, #2
 8001050:	e002      	b.n	8001058 <HAL_GPIO_Init+0x204>
 8001052:	2301      	movs	r3, #1
 8001054:	e000      	b.n	8001058 <HAL_GPIO_Init+0x204>
 8001056:	2300      	movs	r3, #0
 8001058:	69fa      	ldr	r2, [r7, #28]
 800105a:	f002 0203 	and.w	r2, r2, #3
 800105e:	0092      	lsls	r2, r2, #2
 8001060:	4093      	lsls	r3, r2
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001068:	4935      	ldr	r1, [pc, #212]	; (8001140 <HAL_GPIO_Init+0x2ec>)
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	089b      	lsrs	r3, r3, #2
 800106e:	3302      	adds	r3, #2
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001076:	4b38      	ldr	r3, [pc, #224]	; (8001158 <HAL_GPIO_Init+0x304>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800109a:	4a2f      	ldr	r2, [pc, #188]	; (8001158 <HAL_GPIO_Init+0x304>)
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010a0:	4b2d      	ldr	r3, [pc, #180]	; (8001158 <HAL_GPIO_Init+0x304>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010c4:	4a24      	ldr	r2, [pc, #144]	; (8001158 <HAL_GPIO_Init+0x304>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ca:	4b23      	ldr	r3, [pc, #140]	; (8001158 <HAL_GPIO_Init+0x304>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ee:	4a1a      	ldr	r2, [pc, #104]	; (8001158 <HAL_GPIO_Init+0x304>)
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f4:	4b18      	ldr	r3, [pc, #96]	; (8001158 <HAL_GPIO_Init+0x304>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001118:	4a0f      	ldr	r2, [pc, #60]	; (8001158 <HAL_GPIO_Init+0x304>)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3301      	adds	r3, #1
 8001122:	61fb      	str	r3, [r7, #28]
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	2b0f      	cmp	r3, #15
 8001128:	f67f aea2 	bls.w	8000e70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3724      	adds	r7, #36	; 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	40013800 	.word	0x40013800
 8001144:	40020000 	.word	0x40020000
 8001148:	40020400 	.word	0x40020400
 800114c:	40020800 	.word	0x40020800
 8001150:	40020c00 	.word	0x40020c00
 8001154:	40021000 	.word	0x40021000
 8001158:	40013c00 	.word	0x40013c00

0800115c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	807b      	strh	r3, [r7, #2]
 8001168:	4613      	mov	r3, r2
 800116a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800116c:	787b      	ldrb	r3, [r7, #1]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001172:	887a      	ldrh	r2, [r7, #2]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001178:	e003      	b.n	8001182 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800117a:	887b      	ldrh	r3, [r7, #2]
 800117c:	041a      	lsls	r2, r3, #16
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	619a      	str	r2, [r3, #24]
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800118e:	b480      	push	{r7}
 8001190:	b085      	sub	sp, #20
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
 8001196:	460b      	mov	r3, r1
 8001198:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011a0:	887a      	ldrh	r2, [r7, #2]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4013      	ands	r3, r2
 80011a6:	041a      	lsls	r2, r3, #16
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	43d9      	mvns	r1, r3
 80011ac:	887b      	ldrh	r3, [r7, #2]
 80011ae:	400b      	ands	r3, r1
 80011b0:	431a      	orrs	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	619a      	str	r2, [r3, #24]
}
 80011b6:	bf00      	nop
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e12b      	b.n	800142e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d106      	bne.n	80011f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f008 fb6e 	bl	80098cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2224      	movs	r2, #36	; 0x24
 80011f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f022 0201 	bic.w	r2, r2, #1
 8001206:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001216:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001226:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001228:	f003 fa78 	bl	800471c <HAL_RCC_GetPCLK1Freq>
 800122c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	4a81      	ldr	r2, [pc, #516]	; (8001438 <HAL_I2C_Init+0x274>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d807      	bhi.n	8001248 <HAL_I2C_Init+0x84>
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4a80      	ldr	r2, [pc, #512]	; (800143c <HAL_I2C_Init+0x278>)
 800123c:	4293      	cmp	r3, r2
 800123e:	bf94      	ite	ls
 8001240:	2301      	movls	r3, #1
 8001242:	2300      	movhi	r3, #0
 8001244:	b2db      	uxtb	r3, r3
 8001246:	e006      	b.n	8001256 <HAL_I2C_Init+0x92>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4a7d      	ldr	r2, [pc, #500]	; (8001440 <HAL_I2C_Init+0x27c>)
 800124c:	4293      	cmp	r3, r2
 800124e:	bf94      	ite	ls
 8001250:	2301      	movls	r3, #1
 8001252:	2300      	movhi	r3, #0
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e0e7      	b.n	800142e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4a78      	ldr	r2, [pc, #480]	; (8001444 <HAL_I2C_Init+0x280>)
 8001262:	fba2 2303 	umull	r2, r3, r2, r3
 8001266:	0c9b      	lsrs	r3, r3, #18
 8001268:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	68ba      	ldr	r2, [r7, #8]
 800127a:	430a      	orrs	r2, r1
 800127c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6a1b      	ldr	r3, [r3, #32]
 8001284:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	4a6a      	ldr	r2, [pc, #424]	; (8001438 <HAL_I2C_Init+0x274>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d802      	bhi.n	8001298 <HAL_I2C_Init+0xd4>
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	3301      	adds	r3, #1
 8001296:	e009      	b.n	80012ac <HAL_I2C_Init+0xe8>
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800129e:	fb02 f303 	mul.w	r3, r2, r3
 80012a2:	4a69      	ldr	r2, [pc, #420]	; (8001448 <HAL_I2C_Init+0x284>)
 80012a4:	fba2 2303 	umull	r2, r3, r2, r3
 80012a8:	099b      	lsrs	r3, r3, #6
 80012aa:	3301      	adds	r3, #1
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	430b      	orrs	r3, r1
 80012b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80012be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	495c      	ldr	r1, [pc, #368]	; (8001438 <HAL_I2C_Init+0x274>)
 80012c8:	428b      	cmp	r3, r1
 80012ca:	d819      	bhi.n	8001300 <HAL_I2C_Init+0x13c>
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	1e59      	subs	r1, r3, #1
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80012da:	1c59      	adds	r1, r3, #1
 80012dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80012e0:	400b      	ands	r3, r1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d00a      	beq.n	80012fc <HAL_I2C_Init+0x138>
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	1e59      	subs	r1, r3, #1
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80012f4:	3301      	adds	r3, #1
 80012f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012fa:	e051      	b.n	80013a0 <HAL_I2C_Init+0x1dc>
 80012fc:	2304      	movs	r3, #4
 80012fe:	e04f      	b.n	80013a0 <HAL_I2C_Init+0x1dc>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d111      	bne.n	800132c <HAL_I2C_Init+0x168>
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	1e58      	subs	r0, r3, #1
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6859      	ldr	r1, [r3, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	440b      	add	r3, r1
 8001316:	fbb0 f3f3 	udiv	r3, r0, r3
 800131a:	3301      	adds	r3, #1
 800131c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001320:	2b00      	cmp	r3, #0
 8001322:	bf0c      	ite	eq
 8001324:	2301      	moveq	r3, #1
 8001326:	2300      	movne	r3, #0
 8001328:	b2db      	uxtb	r3, r3
 800132a:	e012      	b.n	8001352 <HAL_I2C_Init+0x18e>
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	1e58      	subs	r0, r3, #1
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6859      	ldr	r1, [r3, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	440b      	add	r3, r1
 800133a:	0099      	lsls	r1, r3, #2
 800133c:	440b      	add	r3, r1
 800133e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001342:	3301      	adds	r3, #1
 8001344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001348:	2b00      	cmp	r3, #0
 800134a:	bf0c      	ite	eq
 800134c:	2301      	moveq	r3, #1
 800134e:	2300      	movne	r3, #0
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_I2C_Init+0x196>
 8001356:	2301      	movs	r3, #1
 8001358:	e022      	b.n	80013a0 <HAL_I2C_Init+0x1dc>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d10e      	bne.n	8001380 <HAL_I2C_Init+0x1bc>
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	1e58      	subs	r0, r3, #1
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6859      	ldr	r1, [r3, #4]
 800136a:	460b      	mov	r3, r1
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	440b      	add	r3, r1
 8001370:	fbb0 f3f3 	udiv	r3, r0, r3
 8001374:	3301      	adds	r3, #1
 8001376:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800137a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800137e:	e00f      	b.n	80013a0 <HAL_I2C_Init+0x1dc>
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	1e58      	subs	r0, r3, #1
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6859      	ldr	r1, [r3, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	440b      	add	r3, r1
 800138e:	0099      	lsls	r1, r3, #2
 8001390:	440b      	add	r3, r1
 8001392:	fbb0 f3f3 	udiv	r3, r0, r3
 8001396:	3301      	adds	r3, #1
 8001398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800139c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013a0:	6879      	ldr	r1, [r7, #4]
 80013a2:	6809      	ldr	r1, [r1, #0]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69da      	ldr	r2, [r3, #28]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a1b      	ldr	r3, [r3, #32]
 80013ba:	431a      	orrs	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	430a      	orrs	r2, r1
 80013c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80013ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	6911      	ldr	r1, [r2, #16]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	68d2      	ldr	r2, [r2, #12]
 80013da:	4311      	orrs	r1, r2
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6812      	ldr	r2, [r2, #0]
 80013e0:	430b      	orrs	r3, r1
 80013e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	695a      	ldr	r2, [r3, #20]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	431a      	orrs	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	430a      	orrs	r2, r1
 80013fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f042 0201 	orr.w	r2, r2, #1
 800140e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2220      	movs	r2, #32
 800141a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	000186a0 	.word	0x000186a0
 800143c:	001e847f 	.word	0x001e847f
 8001440:	003d08ff 	.word	0x003d08ff
 8001444:	431bde83 	.word	0x431bde83
 8001448:	10624dd3 	.word	0x10624dd3

0800144c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001454:	2300      	movs	r3, #0
 8001456:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001464:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800146c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001474:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	2b10      	cmp	r3, #16
 800147a:	d003      	beq.n	8001484 <HAL_I2C_EV_IRQHandler+0x38>
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	2b40      	cmp	r3, #64	; 0x40
 8001480:	f040 80c1 	bne.w	8001606 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b00      	cmp	r3, #0
 800149c:	d10d      	bne.n	80014ba <HAL_I2C_EV_IRQHandler+0x6e>
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80014a4:	d003      	beq.n	80014ae <HAL_I2C_EV_IRQHandler+0x62>
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80014ac:	d101      	bne.n	80014b2 <HAL_I2C_EV_IRQHandler+0x66>
 80014ae:	2301      	movs	r3, #1
 80014b0:	e000      	b.n	80014b4 <HAL_I2C_EV_IRQHandler+0x68>
 80014b2:	2300      	movs	r3, #0
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	f000 8132 	beq.w	800171e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00c      	beq.n	80014de <HAL_I2C_EV_IRQHandler+0x92>
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	0a5b      	lsrs	r3, r3, #9
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d006      	beq.n	80014de <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f001 fb5b 	bl	8002b8c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f000 fcd2 	bl	8001e80 <I2C_Master_SB>
 80014dc:	e092      	b.n	8001604 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	08db      	lsrs	r3, r3, #3
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d009      	beq.n	80014fe <HAL_I2C_EV_IRQHandler+0xb2>
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	0a5b      	lsrs	r3, r3, #9
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 fd48 	bl	8001f8c <I2C_Master_ADD10>
 80014fc:	e082      	b.n	8001604 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	085b      	lsrs	r3, r3, #1
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b00      	cmp	r3, #0
 8001508:	d009      	beq.n	800151e <HAL_I2C_EV_IRQHandler+0xd2>
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	0a5b      	lsrs	r3, r3, #9
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f000 fd62 	bl	8001fe0 <I2C_Master_ADDR>
 800151c:	e072      	b.n	8001604 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	089b      	lsrs	r3, r3, #2
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b00      	cmp	r3, #0
 8001528:	d03b      	beq.n	80015a2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001534:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001538:	f000 80f3 	beq.w	8001722 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	09db      	lsrs	r3, r3, #7
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	2b00      	cmp	r3, #0
 8001546:	d00f      	beq.n	8001568 <HAL_I2C_EV_IRQHandler+0x11c>
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	0a9b      	lsrs	r3, r3, #10
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b00      	cmp	r3, #0
 8001552:	d009      	beq.n	8001568 <HAL_I2C_EV_IRQHandler+0x11c>
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	089b      	lsrs	r3, r3, #2
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	2b00      	cmp	r3, #0
 800155e:	d103      	bne.n	8001568 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 f94c 	bl	80017fe <I2C_MasterTransmit_TXE>
 8001566:	e04d      	b.n	8001604 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	089b      	lsrs	r3, r3, #2
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 80d6 	beq.w	8001722 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	0a5b      	lsrs	r3, r3, #9
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	f000 80cf 	beq.w	8001722 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001584:	7bbb      	ldrb	r3, [r7, #14]
 8001586:	2b21      	cmp	r3, #33	; 0x21
 8001588:	d103      	bne.n	8001592 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f000 f9d3 	bl	8001936 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001590:	e0c7      	b.n	8001722 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	2b40      	cmp	r3, #64	; 0x40
 8001596:	f040 80c4 	bne.w	8001722 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 fa41 	bl	8001a22 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015a0:	e0bf      	b.n	8001722 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015b0:	f000 80b7 	beq.w	8001722 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	099b      	lsrs	r3, r3, #6
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d00f      	beq.n	80015e0 <HAL_I2C_EV_IRQHandler+0x194>
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	0a9b      	lsrs	r3, r3, #10
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d009      	beq.n	80015e0 <HAL_I2C_EV_IRQHandler+0x194>
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	089b      	lsrs	r3, r3, #2
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d103      	bne.n	80015e0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 fab6 	bl	8001b4a <I2C_MasterReceive_RXNE>
 80015de:	e011      	b.n	8001604 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	089b      	lsrs	r3, r3, #2
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 809a 	beq.w	8001722 <HAL_I2C_EV_IRQHandler+0x2d6>
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	0a5b      	lsrs	r3, r3, #9
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 8093 	beq.w	8001722 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 fb55 	bl	8001cac <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001602:	e08e      	b.n	8001722 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001604:	e08d      	b.n	8001722 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	2b00      	cmp	r3, #0
 800160c:	d004      	beq.n	8001618 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	61fb      	str	r3, [r7, #28]
 8001616:	e007      	b.n	8001628 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	085b      	lsrs	r3, r3, #1
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	2b00      	cmp	r3, #0
 8001632:	d012      	beq.n	800165a <HAL_I2C_EV_IRQHandler+0x20e>
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	0a5b      	lsrs	r3, r3, #9
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	2b00      	cmp	r3, #0
 800163e:	d00c      	beq.n	800165a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001650:	69b9      	ldr	r1, [r7, #24]
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 ff13 	bl	800247e <I2C_Slave_ADDR>
 8001658:	e066      	b.n	8001728 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	091b      	lsrs	r3, r3, #4
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b00      	cmp	r3, #0
 8001664:	d009      	beq.n	800167a <HAL_I2C_EV_IRQHandler+0x22e>
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	0a5b      	lsrs	r3, r3, #9
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 ff4e 	bl	8002514 <I2C_Slave_STOPF>
 8001678:	e056      	b.n	8001728 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800167a:	7bbb      	ldrb	r3, [r7, #14]
 800167c:	2b21      	cmp	r3, #33	; 0x21
 800167e:	d002      	beq.n	8001686 <HAL_I2C_EV_IRQHandler+0x23a>
 8001680:	7bbb      	ldrb	r3, [r7, #14]
 8001682:	2b29      	cmp	r3, #41	; 0x29
 8001684:	d125      	bne.n	80016d2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	09db      	lsrs	r3, r3, #7
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00f      	beq.n	80016b2 <HAL_I2C_EV_IRQHandler+0x266>
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	0a9b      	lsrs	r3, r3, #10
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	d009      	beq.n	80016b2 <HAL_I2C_EV_IRQHandler+0x266>
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	089b      	lsrs	r3, r3, #2
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d103      	bne.n	80016b2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 fe29 	bl	8002302 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016b0:	e039      	b.n	8001726 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	089b      	lsrs	r3, r3, #2
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d033      	beq.n	8001726 <HAL_I2C_EV_IRQHandler+0x2da>
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	0a5b      	lsrs	r3, r3, #9
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d02d      	beq.n	8001726 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 fe56 	bl	800237c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016d0:	e029      	b.n	8001726 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	099b      	lsrs	r3, r3, #6
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00f      	beq.n	80016fe <HAL_I2C_EV_IRQHandler+0x2b2>
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	0a9b      	lsrs	r3, r3, #10
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d009      	beq.n	80016fe <HAL_I2C_EV_IRQHandler+0x2b2>
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	089b      	lsrs	r3, r3, #2
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d103      	bne.n	80016fe <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 fe61 	bl	80023be <I2C_SlaveReceive_RXNE>
 80016fc:	e014      	b.n	8001728 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	089b      	lsrs	r3, r3, #2
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00e      	beq.n	8001728 <HAL_I2C_EV_IRQHandler+0x2dc>
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	0a5b      	lsrs	r3, r3, #9
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d008      	beq.n	8001728 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 fe8f 	bl	800243a <I2C_SlaveReceive_BTF>
 800171c:	e004      	b.n	8001728 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800171e:	bf00      	nop
 8001720:	e002      	b.n	8001728 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001722:	bf00      	nop
 8001724:	e000      	b.n	8001728 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001726:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001728:	3720      	adds	r7, #32
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
 8001786:	460b      	mov	r3, r1
 8001788:	70fb      	strb	r3, [r7, #3]
 800178a:	4613      	mov	r3, r2
 800178c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b084      	sub	sp, #16
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800180c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001814:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001820:	2b00      	cmp	r3, #0
 8001822:	d150      	bne.n	80018c6 <I2C_MasterTransmit_TXE+0xc8>
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	2b21      	cmp	r3, #33	; 0x21
 8001828:	d14d      	bne.n	80018c6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	2b08      	cmp	r3, #8
 800182e:	d01d      	beq.n	800186c <I2C_MasterTransmit_TXE+0x6e>
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	2b20      	cmp	r3, #32
 8001834:	d01a      	beq.n	800186c <I2C_MasterTransmit_TXE+0x6e>
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800183c:	d016      	beq.n	800186c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800184c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2211      	movs	r2, #17
 8001852:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2220      	movs	r2, #32
 8001860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff ff62 	bl	800172e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800186a:	e060      	b.n	800192e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800187a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800188a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2220      	movs	r2, #32
 8001896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b40      	cmp	r3, #64	; 0x40
 80018a4:	d107      	bne.n	80018b6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff ff7d 	bl	80017ae <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80018b4:	e03b      	b.n	800192e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff ff35 	bl	800172e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80018c4:	e033      	b.n	800192e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	2b21      	cmp	r3, #33	; 0x21
 80018ca:	d005      	beq.n	80018d8 <I2C_MasterTransmit_TXE+0xda>
 80018cc:	7bbb      	ldrb	r3, [r7, #14]
 80018ce:	2b40      	cmp	r3, #64	; 0x40
 80018d0:	d12d      	bne.n	800192e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	2b22      	cmp	r3, #34	; 0x22
 80018d6:	d12a      	bne.n	800192e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018dc:	b29b      	uxth	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d108      	bne.n	80018f4 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018f0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80018f2:	e01c      	b.n	800192e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b40      	cmp	r3, #64	; 0x40
 80018fe:	d103      	bne.n	8001908 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 f88e 	bl	8001a22 <I2C_MemoryTransmit_TXE_BTF>
}
 8001906:	e012      	b.n	800192e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	781a      	ldrb	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001918:	1c5a      	adds	r2, r3, #1
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001922:	b29b      	uxth	r3, r3
 8001924:	3b01      	subs	r3, #1
 8001926:	b29a      	uxth	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800192c:	e7ff      	b.n	800192e <I2C_MasterTransmit_TXE+0x130>
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b084      	sub	sp, #16
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001942:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b21      	cmp	r3, #33	; 0x21
 800194e:	d164      	bne.n	8001a1a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001954:	b29b      	uxth	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d012      	beq.n	8001980 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195e:	781a      	ldrb	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196a:	1c5a      	adds	r2, r3, #1
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001974:	b29b      	uxth	r3, r3
 8001976:	3b01      	subs	r3, #1
 8001978:	b29a      	uxth	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800197e:	e04c      	b.n	8001a1a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2b08      	cmp	r3, #8
 8001984:	d01d      	beq.n	80019c2 <I2C_MasterTransmit_BTF+0x8c>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2b20      	cmp	r3, #32
 800198a:	d01a      	beq.n	80019c2 <I2C_MasterTransmit_BTF+0x8c>
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001992:	d016      	beq.n	80019c2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80019a2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2211      	movs	r2, #17
 80019a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2220      	movs	r2, #32
 80019b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff feb7 	bl	800172e <HAL_I2C_MasterTxCpltCallback>
}
 80019c0:	e02b      	b.n	8001a1a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80019d0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019e0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2220      	movs	r2, #32
 80019ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b40      	cmp	r3, #64	; 0x40
 80019fa:	d107      	bne.n	8001a0c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff fed2 	bl	80017ae <HAL_I2C_MemTxCpltCallback>
}
 8001a0a:	e006      	b.n	8001a1a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff fe8a 	bl	800172e <HAL_I2C_MasterTxCpltCallback>
}
 8001a1a:	bf00      	nop
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b084      	sub	sp, #16
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a30:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d11d      	bne.n	8001a76 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d10b      	bne.n	8001a5a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a52:	1c9a      	adds	r2, r3, #2
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001a58:	e073      	b.n	8001b42 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	121b      	asrs	r3, r3, #8
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a6e:	1c5a      	adds	r2, r3, #1
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001a74:	e065      	b.n	8001b42 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d10b      	bne.n	8001a96 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a8e:	1c5a      	adds	r2, r3, #1
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001a94:	e055      	b.n	8001b42 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d151      	bne.n	8001b42 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
 8001aa0:	2b22      	cmp	r3, #34	; 0x22
 8001aa2:	d10d      	bne.n	8001ac0 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ab2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ab8:	1c5a      	adds	r2, r3, #1
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001abe:	e040      	b.n	8001b42 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d015      	beq.n	8001af6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	2b21      	cmp	r3, #33	; 0x21
 8001ace:	d112      	bne.n	8001af6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	781a      	ldrb	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	1c5a      	adds	r2, r3, #1
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	3b01      	subs	r3, #1
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001af4:	e025      	b.n	8001b42 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d120      	bne.n	8001b42 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	2b21      	cmp	r3, #33	; 0x21
 8001b04:	d11d      	bne.n	8001b42 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b14:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b24:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff fe36 	bl	80017ae <HAL_I2C_MemTxCpltCallback>
}
 8001b42:	bf00      	nop
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b084      	sub	sp, #16
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b22      	cmp	r3, #34	; 0x22
 8001b5c:	f040 80a2 	bne.w	8001ca4 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d921      	bls.n	8001bb2 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	691a      	ldr	r2, [r3, #16]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	1c5a      	adds	r2, r3, #1
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	f040 8082 	bne.w	8001ca4 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bae:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8001bb0:	e078      	b.n	8001ca4 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d074      	beq.n	8001ca4 <I2C_MasterReceive_RXNE+0x15a>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d002      	beq.n	8001bc6 <I2C_MasterReceive_RXNE+0x7c>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d16e      	bne.n	8001ca4 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 ffae 	bl	8002b28 <I2C_WaitOnSTOPRequestThroughIT>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d142      	bne.n	8001c58 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001be0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001bf0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	691a      	ldr	r2, [r3, #16]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	3b01      	subs	r3, #1
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b40      	cmp	r3, #64	; 0x40
 8001c2a:	d10a      	bne.n	8001c42 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff fdc1 	bl	80017c2 <HAL_I2C_MemRxCpltCallback>
}
 8001c40:	e030      	b.n	8001ca4 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2212      	movs	r2, #18
 8001c4e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff fd76 	bl	8001742 <HAL_I2C_MasterRxCpltCallback>
}
 8001c56:	e025      	b.n	8001ca4 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c66:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	691a      	ldr	r2, [r3, #16]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	1c5a      	adds	r2, r3, #1
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	3b01      	subs	r3, #1
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2220      	movs	r2, #32
 8001c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff fd99 	bl	80017d6 <HAL_I2C_ErrorCallback>
}
 8001ca4:	bf00      	nop
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d11b      	bne.n	8001cfc <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cd2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	691a      	ldr	r2, [r3, #16]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	1c5a      	adds	r2, r3, #1
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001cfa:	e0bd      	b.n	8001e78 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d129      	bne.n	8001d5a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d14:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2b04      	cmp	r3, #4
 8001d1a:	d00a      	beq.n	8001d32 <I2C_MasterReceive_BTF+0x86>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d007      	beq.n	8001d32 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d30:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	3b01      	subs	r3, #1
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001d58:	e08e      	b.n	8001e78 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d176      	bne.n	8001e52 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d002      	beq.n	8001d70 <I2C_MasterReceive_BTF+0xc4>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2b10      	cmp	r3, #16
 8001d6e:	d108      	bne.n	8001d82 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	e019      	b.n	8001db6 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2b04      	cmp	r3, #4
 8001d86:	d002      	beq.n	8001d8e <I2C_MasterReceive_BTF+0xe2>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d108      	bne.n	8001da0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	e00a      	b.n	8001db6 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2b10      	cmp	r3, #16
 8001da4:	d007      	beq.n	8001db6 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001db4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	691a      	ldr	r2, [r3, #16]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691a      	ldr	r2, [r3, #16]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dee:	1c5a      	adds	r2, r3, #1
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001e10:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2220      	movs	r2, #32
 8001e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b40      	cmp	r3, #64	; 0x40
 8001e24:	d10a      	bne.n	8001e3c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff fcc4 	bl	80017c2 <HAL_I2C_MemRxCpltCallback>
}
 8001e3a:	e01d      	b.n	8001e78 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2212      	movs	r2, #18
 8001e48:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff fc79 	bl	8001742 <HAL_I2C_MasterRxCpltCallback>
}
 8001e50:	e012      	b.n	8001e78 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	691a      	ldr	r2, [r3, #16]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001e78:	bf00      	nop
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b40      	cmp	r3, #64	; 0x40
 8001e92:	d117      	bne.n	8001ec4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d109      	bne.n	8001eb0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001eac:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8001eae:	e067      	b.n	8001f80 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	611a      	str	r2, [r3, #16]
}
 8001ec2:	e05d      	b.n	8001f80 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ecc:	d133      	bne.n	8001f36 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b21      	cmp	r3, #33	; 0x21
 8001ed8:	d109      	bne.n	8001eee <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001eea:	611a      	str	r2, [r3, #16]
 8001eec:	e008      	b.n	8001f00 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d004      	beq.n	8001f12 <I2C_Master_SB+0x92>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d108      	bne.n	8001f24 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d032      	beq.n	8001f80 <I2C_Master_SB+0x100>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d02d      	beq.n	8001f80 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f32:	605a      	str	r2, [r3, #4]
}
 8001f34:	e024      	b.n	8001f80 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10e      	bne.n	8001f5c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	11db      	asrs	r3, r3, #7
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	f003 0306 	and.w	r3, r3, #6
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	f063 030f 	orn	r3, r3, #15
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	611a      	str	r2, [r3, #16]
}
 8001f5a:	e011      	b.n	8001f80 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d10d      	bne.n	8001f80 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	11db      	asrs	r3, r3, #7
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	f003 0306 	and.w	r3, r3, #6
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	f063 030e 	orn	r3, r3, #14
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	611a      	str	r2, [r3, #16]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d004      	beq.n	8001fb2 <I2C_Master_ADD10+0x26>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d108      	bne.n	8001fc4 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00c      	beq.n	8001fd4 <I2C_Master_ADD10+0x48>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d007      	beq.n	8001fd4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fd2:	605a      	str	r2, [r3, #4]
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b091      	sub	sp, #68	; 0x44
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffc:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b22      	cmp	r3, #34	; 0x22
 8002008:	f040 8169 	bne.w	80022de <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10f      	bne.n	8002034 <I2C_Master_ADDR+0x54>
 8002014:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002018:	2b40      	cmp	r3, #64	; 0x40
 800201a:	d10b      	bne.n	8002034 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800201c:	2300      	movs	r3, #0
 800201e:	633b      	str	r3, [r7, #48]	; 0x30
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	633b      	str	r3, [r7, #48]	; 0x30
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	633b      	str	r3, [r7, #48]	; 0x30
 8002030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002032:	e160      	b.n	80022f6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002038:	2b00      	cmp	r3, #0
 800203a:	d11d      	bne.n	8002078 <I2C_Master_ADDR+0x98>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002044:	d118      	bne.n	8002078 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002046:	2300      	movs	r3, #0
 8002048:	62fb      	str	r3, [r7, #44]	; 0x2c
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	62fb      	str	r3, [r7, #44]	; 0x2c
 800205a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800206a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002070:	1c5a      	adds	r2, r3, #1
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	651a      	str	r2, [r3, #80]	; 0x50
 8002076:	e13e      	b.n	80022f6 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207c:	b29b      	uxth	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d113      	bne.n	80020aa <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002082:	2300      	movs	r3, #0
 8002084:	62bb      	str	r3, [r7, #40]	; 0x28
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	62bb      	str	r3, [r7, #40]	; 0x28
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	62bb      	str	r3, [r7, #40]	; 0x28
 8002096:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	e115      	b.n	80022d6 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	f040 808a 	bne.w	80021ca <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80020b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80020bc:	d137      	bne.n	800212e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020cc:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020dc:	d113      	bne.n	8002106 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020ec:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ee:	2300      	movs	r3, #0
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	e0e7      	b.n	80022d6 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002106:	2300      	movs	r3, #0
 8002108:	623b      	str	r3, [r7, #32]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	623b      	str	r3, [r7, #32]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	623b      	str	r3, [r7, #32]
 800211a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	e0d3      	b.n	80022d6 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800212e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002130:	2b08      	cmp	r3, #8
 8002132:	d02e      	beq.n	8002192 <I2C_Master_ADDR+0x1b2>
 8002134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002136:	2b20      	cmp	r3, #32
 8002138:	d02b      	beq.n	8002192 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800213a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800213c:	2b12      	cmp	r3, #18
 800213e:	d102      	bne.n	8002146 <I2C_Master_ADDR+0x166>
 8002140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002142:	2b01      	cmp	r3, #1
 8002144:	d125      	bne.n	8002192 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002148:	2b04      	cmp	r3, #4
 800214a:	d00e      	beq.n	800216a <I2C_Master_ADDR+0x18a>
 800214c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800214e:	2b02      	cmp	r3, #2
 8002150:	d00b      	beq.n	800216a <I2C_Master_ADDR+0x18a>
 8002152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002154:	2b10      	cmp	r3, #16
 8002156:	d008      	beq.n	800216a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	e007      	b.n	800217a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002178:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	61fb      	str	r3, [r7, #28]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	61fb      	str	r3, [r7, #28]
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	e0a1      	b.n	80022d6 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021a0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021a2:	2300      	movs	r3, #0
 80021a4:	61bb      	str	r3, [r7, #24]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	61bb      	str	r3, [r7, #24]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	61bb      	str	r3, [r7, #24]
 80021b6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	e085      	b.n	80022d6 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d14d      	bne.n	8002270 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80021d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d016      	beq.n	8002208 <I2C_Master_ADDR+0x228>
 80021da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d013      	beq.n	8002208 <I2C_Master_ADDR+0x228>
 80021e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e2:	2b10      	cmp	r3, #16
 80021e4:	d010      	beq.n	8002208 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021f4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	e007      	b.n	8002218 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002216:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002222:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002226:	d117      	bne.n	8002258 <I2C_Master_ADDR+0x278>
 8002228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800222a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800222e:	d00b      	beq.n	8002248 <I2C_Master_ADDR+0x268>
 8002230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002232:	2b01      	cmp	r3, #1
 8002234:	d008      	beq.n	8002248 <I2C_Master_ADDR+0x268>
 8002236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002238:	2b08      	cmp	r3, #8
 800223a:	d005      	beq.n	8002248 <I2C_Master_ADDR+0x268>
 800223c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800223e:	2b10      	cmp	r3, #16
 8002240:	d002      	beq.n	8002248 <I2C_Master_ADDR+0x268>
 8002242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002244:	2b20      	cmp	r3, #32
 8002246:	d107      	bne.n	8002258 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002256:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	e032      	b.n	80022d6 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800227e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800228a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800228e:	d117      	bne.n	80022c0 <I2C_Master_ADDR+0x2e0>
 8002290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002292:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002296:	d00b      	beq.n	80022b0 <I2C_Master_ADDR+0x2d0>
 8002298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800229a:	2b01      	cmp	r3, #1
 800229c:	d008      	beq.n	80022b0 <I2C_Master_ADDR+0x2d0>
 800229e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d005      	beq.n	80022b0 <I2C_Master_ADDR+0x2d0>
 80022a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a6:	2b10      	cmp	r3, #16
 80022a8:	d002      	beq.n	80022b0 <I2C_Master_ADDR+0x2d0>
 80022aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ac:	2b20      	cmp	r3, #32
 80022ae:	d107      	bne.n	80022c0 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80022be:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022c0:	2300      	movs	r3, #0
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	613b      	str	r3, [r7, #16]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80022dc:	e00b      	b.n	80022f6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	68fb      	ldr	r3, [r7, #12]
}
 80022f4:	e7ff      	b.n	80022f6 <I2C_Master_ADDR+0x316>
 80022f6:	bf00      	nop
 80022f8:	3744      	adds	r7, #68	; 0x44
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b084      	sub	sp, #16
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002310:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002316:	b29b      	uxth	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d02b      	beq.n	8002374 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	781a      	ldrb	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002336:	b29b      	uxth	r3, r3
 8002338:	3b01      	subs	r3, #1
 800233a:	b29a      	uxth	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002344:	b29b      	uxth	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d114      	bne.n	8002374 <I2C_SlaveTransmit_TXE+0x72>
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	2b29      	cmp	r3, #41	; 0x29
 800234e:	d111      	bne.n	8002374 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800235e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2221      	movs	r2, #33	; 0x21
 8002364:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2228      	movs	r2, #40	; 0x28
 800236a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff f9f1 	bl	8001756 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002374:	bf00      	nop
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002388:	b29b      	uxth	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d011      	beq.n	80023b2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	781a      	ldrb	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b084      	sub	sp, #16
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023cc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d02c      	beq.n	8002432 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	691a      	ldr	r2, [r3, #16]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002402:	b29b      	uxth	r3, r3
 8002404:	2b00      	cmp	r3, #0
 8002406:	d114      	bne.n	8002432 <I2C_SlaveReceive_RXNE+0x74>
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	2b2a      	cmp	r3, #42	; 0x2a
 800240c:	d111      	bne.n	8002432 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800241c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2222      	movs	r2, #34	; 0x22
 8002422:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2228      	movs	r2, #40	; 0x28
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff f99c 	bl	800176a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002432:	bf00      	nop
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002446:	b29b      	uxth	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d012      	beq.n	8002472 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	691a      	ldr	r2, [r3, #16]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002468:	b29b      	uxth	r3, r3
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b084      	sub	sp, #16
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002488:	2300      	movs	r3, #0
 800248a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002492:	b2db      	uxtb	r3, r3
 8002494:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002498:	2b28      	cmp	r3, #40	; 0x28
 800249a:	d127      	bne.n	80024ec <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024aa:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	089b      	lsrs	r3, r3, #2
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80024b8:	2301      	movs	r3, #1
 80024ba:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	09db      	lsrs	r3, r3, #7
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d103      	bne.n	80024d0 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	81bb      	strh	r3, [r7, #12]
 80024ce:	e002      	b.n	80024d6 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80024de:	89ba      	ldrh	r2, [r7, #12]
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
 80024e2:	4619      	mov	r1, r3
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f7ff f94a 	bl	800177e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80024ea:	e00e      	b.n	800250a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ec:	2300      	movs	r3, #0
 80024ee:	60bb      	str	r3, [r7, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	60bb      	str	r3, [r7, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	60bb      	str	r3, [r7, #8]
 8002500:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800250a:	bf00      	nop
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002522:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002532:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002534:	2300      	movs	r3, #0
 8002536:	60bb      	str	r3, [r7, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002560:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800256c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002570:	d172      	bne.n	8002658 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002572:	7bfb      	ldrb	r3, [r7, #15]
 8002574:	2b22      	cmp	r3, #34	; 0x22
 8002576:	d002      	beq.n	800257e <I2C_Slave_STOPF+0x6a>
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	2b2a      	cmp	r3, #42	; 0x2a
 800257c:	d135      	bne.n	80025ea <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	b29a      	uxth	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002590:	b29b      	uxth	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d005      	beq.n	80025a2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f043 0204 	orr.w	r2, r3, #4
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025b0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe fb8c 	bl	8000cd4 <HAL_DMA_GetState>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d049      	beq.n	8002656 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c6:	4a69      	ldr	r2, [pc, #420]	; (800276c <I2C_Slave_STOPF+0x258>)
 80025c8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fe f9d4 	bl	800097c <HAL_DMA_Abort_IT>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d03d      	beq.n	8002656 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025e4:	4610      	mov	r0, r2
 80025e6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80025e8:	e035      	b.n	8002656 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d005      	beq.n	800260e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f043 0204 	orr.w	r2, r3, #4
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800261c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002622:	4618      	mov	r0, r3
 8002624:	f7fe fb56 	bl	8000cd4 <HAL_DMA_GetState>
 8002628:	4603      	mov	r3, r0
 800262a:	2b01      	cmp	r3, #1
 800262c:	d014      	beq.n	8002658 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002632:	4a4e      	ldr	r2, [pc, #312]	; (800276c <I2C_Slave_STOPF+0x258>)
 8002634:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800263a:	4618      	mov	r0, r3
 800263c:	f7fe f99e 	bl	800097c <HAL_DMA_Abort_IT>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d008      	beq.n	8002658 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800264a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002650:	4610      	mov	r0, r2
 8002652:	4798      	blx	r3
 8002654:	e000      	b.n	8002658 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002656:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265c:	b29b      	uxth	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d03e      	beq.n	80026e0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b04      	cmp	r3, #4
 800266e:	d112      	bne.n	8002696 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	691a      	ldr	r2, [r3, #16]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	1c5a      	adds	r2, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268c:	b29b      	uxth	r3, r3
 800268e:	3b01      	subs	r3, #1
 8002690:	b29a      	uxth	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a0:	2b40      	cmp	r3, #64	; 0x40
 80026a2:	d112      	bne.n	80026ca <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691a      	ldr	r2, [r3, #16]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d005      	beq.n	80026e0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	f043 0204 	orr.w	r2, r3, #4
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f843 	bl	8002774 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80026ee:	e039      	b.n	8002764 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
 80026f2:	2b2a      	cmp	r3, #42	; 0x2a
 80026f4:	d109      	bne.n	800270a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2228      	movs	r2, #40	; 0x28
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f7ff f830 	bl	800176a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b28      	cmp	r3, #40	; 0x28
 8002714:	d111      	bne.n	800273a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a15      	ldr	r2, [pc, #84]	; (8002770 <I2C_Slave_STOPF+0x25c>)
 800271a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2220      	movs	r2, #32
 8002726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7ff f831 	bl	800179a <HAL_I2C_ListenCpltCallback>
}
 8002738:	e014      	b.n	8002764 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	2b22      	cmp	r3, #34	; 0x22
 8002740:	d002      	beq.n	8002748 <I2C_Slave_STOPF+0x234>
 8002742:	7bfb      	ldrb	r3, [r7, #15]
 8002744:	2b22      	cmp	r3, #34	; 0x22
 8002746:	d10d      	bne.n	8002764 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2220      	movs	r2, #32
 8002752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff f803 	bl	800176a <HAL_I2C_SlaveRxCpltCallback>
}
 8002764:	bf00      	nop
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	080029d9 	.word	0x080029d9
 8002770:	ffff0000 	.word	0xffff0000

08002774 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002782:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800278a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800278c:	7bbb      	ldrb	r3, [r7, #14]
 800278e:	2b10      	cmp	r3, #16
 8002790:	d002      	beq.n	8002798 <I2C_ITError+0x24>
 8002792:	7bbb      	ldrb	r3, [r7, #14]
 8002794:	2b40      	cmp	r3, #64	; 0x40
 8002796:	d10a      	bne.n	80027ae <I2C_ITError+0x3a>
 8002798:	7bfb      	ldrb	r3, [r7, #15]
 800279a:	2b22      	cmp	r3, #34	; 0x22
 800279c:	d107      	bne.n	80027ae <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027ac:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
 80027b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80027b4:	2b28      	cmp	r3, #40	; 0x28
 80027b6:	d107      	bne.n	80027c8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2228      	movs	r2, #40	; 0x28
 80027c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80027c6:	e015      	b.n	80027f4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027d6:	d00a      	beq.n	80027ee <I2C_ITError+0x7a>
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
 80027da:	2b60      	cmp	r3, #96	; 0x60
 80027dc:	d007      	beq.n	80027ee <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2220      	movs	r2, #32
 80027e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002802:	d162      	bne.n	80028ca <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002812:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002818:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b01      	cmp	r3, #1
 8002820:	d020      	beq.n	8002864 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002826:	4a6a      	ldr	r2, [pc, #424]	; (80029d0 <I2C_ITError+0x25c>)
 8002828:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282e:	4618      	mov	r0, r3
 8002830:	f7fe f8a4 	bl	800097c <HAL_DMA_Abort_IT>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 8089 	beq.w	800294e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0201 	bic.w	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2220      	movs	r2, #32
 8002850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800285e:	4610      	mov	r0, r2
 8002860:	4798      	blx	r3
 8002862:	e074      	b.n	800294e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002868:	4a59      	ldr	r2, [pc, #356]	; (80029d0 <I2C_ITError+0x25c>)
 800286a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002870:	4618      	mov	r0, r3
 8002872:	f7fe f883 	bl	800097c <HAL_DMA_Abort_IT>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d068      	beq.n	800294e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002886:	2b40      	cmp	r3, #64	; 0x40
 8002888:	d10b      	bne.n	80028a2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	691a      	ldr	r2, [r3, #16]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	1c5a      	adds	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 0201 	bic.w	r2, r2, #1
 80028b0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2220      	movs	r2, #32
 80028b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028c4:	4610      	mov	r0, r2
 80028c6:	4798      	blx	r3
 80028c8:	e041      	b.n	800294e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b60      	cmp	r3, #96	; 0x60
 80028d4:	d125      	bne.n	8002922 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2220      	movs	r2, #32
 80028da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ee:	2b40      	cmp	r3, #64	; 0x40
 80028f0:	d10b      	bne.n	800290a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	691a      	ldr	r2, [r3, #16]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	b2d2      	uxtb	r2, r2
 80028fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	1c5a      	adds	r2, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 0201 	bic.w	r2, r2, #1
 8002918:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7fe ff65 	bl	80017ea <HAL_I2C_AbortCpltCallback>
 8002920:	e015      	b.n	800294e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292c:	2b40      	cmp	r3, #64	; 0x40
 800292e:	d10b      	bne.n	8002948 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	691a      	ldr	r2, [r3, #16]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7fe ff44 	bl	80017d6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10e      	bne.n	800297c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002964:	2b00      	cmp	r3, #0
 8002966:	d109      	bne.n	800297c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800296e:	2b00      	cmp	r3, #0
 8002970:	d104      	bne.n	800297c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002978:	2b00      	cmp	r3, #0
 800297a:	d007      	beq.n	800298c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800298a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002992:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b04      	cmp	r3, #4
 800299e:	d113      	bne.n	80029c8 <I2C_ITError+0x254>
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
 80029a2:	2b28      	cmp	r3, #40	; 0x28
 80029a4:	d110      	bne.n	80029c8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a0a      	ldr	r2, [pc, #40]	; (80029d4 <I2C_ITError+0x260>)
 80029aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2220      	movs	r2, #32
 80029b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7fe fee9 	bl	800179a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80029c8:	bf00      	nop
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	080029d9 	.word	0x080029d9
 80029d4:	ffff0000 	.word	0xffff0000

080029d8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80029e0:	2300      	movs	r3, #0
 80029e2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80029f2:	4b4b      	ldr	r3, [pc, #300]	; (8002b20 <I2C_DMAAbort+0x148>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	08db      	lsrs	r3, r3, #3
 80029f8:	4a4a      	ldr	r2, [pc, #296]	; (8002b24 <I2C_DMAAbort+0x14c>)
 80029fa:	fba2 2303 	umull	r2, r3, r2, r3
 80029fe:	0a1a      	lsrs	r2, r3, #8
 8002a00:	4613      	mov	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	00da      	lsls	r2, r3, #3
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d106      	bne.n	8002a20 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f043 0220 	orr.w	r2, r3, #32
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002a1e:	e00a      	b.n	8002a36 <I2C_DMAAbort+0x5e>
    }
    count--;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a34:	d0ea      	beq.n	8002a0c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a42:	2200      	movs	r2, #0
 8002a44:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a52:	2200      	movs	r2, #0
 8002a54:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a64:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a78:	2200      	movs	r2, #0
 8002a7a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a88:	2200      	movs	r2, #0
 8002a8a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 0201 	bic.w	r2, r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b60      	cmp	r3, #96	; 0x60
 8002aa6:	d10e      	bne.n	8002ac6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	2200      	movs	r2, #0
 8002abc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002abe:	6978      	ldr	r0, [r7, #20]
 8002ac0:	f7fe fe93 	bl	80017ea <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002ac4:	e027      	b.n	8002b16 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ac6:	7cfb      	ldrb	r3, [r7, #19]
 8002ac8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002acc:	2b28      	cmp	r3, #40	; 0x28
 8002ace:	d117      	bne.n	8002b00 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0201 	orr.w	r2, r2, #1
 8002ade:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002aee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2200      	movs	r2, #0
 8002af4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2228      	movs	r2, #40	; 0x28
 8002afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002afe:	e007      	b.n	8002b10 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	2220      	movs	r2, #32
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002b10:	6978      	ldr	r0, [r7, #20]
 8002b12:	f7fe fe60 	bl	80017d6 <HAL_I2C_ErrorCallback>
}
 8002b16:	bf00      	nop
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20000118 	.word	0x20000118
 8002b24:	14f8b589 	.word	0x14f8b589

08002b28 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b34:	4b13      	ldr	r3, [pc, #76]	; (8002b84 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	08db      	lsrs	r3, r3, #3
 8002b3a:	4a13      	ldr	r2, [pc, #76]	; (8002b88 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b40:	0a1a      	lsrs	r2, r3, #8
 8002b42:	4613      	mov	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d107      	bne.n	8002b66 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	f043 0220 	orr.w	r2, r3, #32
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e008      	b.n	8002b78 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b74:	d0e9      	beq.n	8002b4a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	20000118 	.word	0x20000118
 8002b88:	14f8b589 	.word	0x14f8b589

08002b8c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002b9c:	d103      	bne.n	8002ba6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002ba4:	e007      	b.n	8002bb6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002bae:	d102      	bne.n	8002bb6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2208      	movs	r2, #8
 8002bb4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bc4:	b08f      	sub	sp, #60	; 0x3c
 8002bc6:	af0a      	add	r7, sp, #40	; 0x28
 8002bc8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e10f      	b.n	8002df4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d106      	bne.n	8002bf4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f007 f946 	bl	8009e80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2203      	movs	r2, #3
 8002bf8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d102      	bne.n	8002c0e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f003 fd0d 	bl	8006632 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	603b      	str	r3, [r7, #0]
 8002c1e:	687e      	ldr	r6, [r7, #4]
 8002c20:	466d      	mov	r5, sp
 8002c22:	f106 0410 	add.w	r4, r6, #16
 8002c26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c32:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c36:	1d33      	adds	r3, r6, #4
 8002c38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c3a:	6838      	ldr	r0, [r7, #0]
 8002c3c:	f003 fbe4 	bl	8006408 <USB_CoreInit>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d005      	beq.n	8002c52 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2202      	movs	r2, #2
 8002c4a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e0d0      	b.n	8002df4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2100      	movs	r1, #0
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f003 fcfb 	bl	8006654 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c5e:	2300      	movs	r3, #0
 8002c60:	73fb      	strb	r3, [r7, #15]
 8002c62:	e04a      	b.n	8002cfa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c64:	7bfa      	ldrb	r2, [r7, #15]
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	1a9b      	subs	r3, r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	333d      	adds	r3, #61	; 0x3d
 8002c74:	2201      	movs	r2, #1
 8002c76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c78:	7bfa      	ldrb	r2, [r7, #15]
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	1a9b      	subs	r3, r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	333c      	adds	r3, #60	; 0x3c
 8002c88:	7bfa      	ldrb	r2, [r7, #15]
 8002c8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c8c:	7bfa      	ldrb	r2, [r7, #15]
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
 8002c90:	b298      	uxth	r0, r3
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	1a9b      	subs	r3, r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	3342      	adds	r3, #66	; 0x42
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ca4:	7bfa      	ldrb	r2, [r7, #15]
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	1a9b      	subs	r3, r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	333f      	adds	r3, #63	; 0x3f
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cb8:	7bfa      	ldrb	r2, [r7, #15]
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	1a9b      	subs	r3, r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	3344      	adds	r3, #68	; 0x44
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ccc:	7bfa      	ldrb	r2, [r7, #15]
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	1a9b      	subs	r3, r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	3348      	adds	r3, #72	; 0x48
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ce0:	7bfa      	ldrb	r2, [r7, #15]
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	1a9b      	subs	r3, r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	3350      	adds	r3, #80	; 0x50
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	73fb      	strb	r3, [r7, #15]
 8002cfa:	7bfa      	ldrb	r2, [r7, #15]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d3af      	bcc.n	8002c64 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d04:	2300      	movs	r3, #0
 8002d06:	73fb      	strb	r3, [r7, #15]
 8002d08:	e044      	b.n	8002d94 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d0a:	7bfa      	ldrb	r2, [r7, #15]
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	1a9b      	subs	r3, r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	440b      	add	r3, r1
 8002d18:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d20:	7bfa      	ldrb	r2, [r7, #15]
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	4613      	mov	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	1a9b      	subs	r3, r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002d32:	7bfa      	ldrb	r2, [r7, #15]
 8002d34:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d36:	7bfa      	ldrb	r2, [r7, #15]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	1a9b      	subs	r3, r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002d48:	2200      	movs	r2, #0
 8002d4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d4c:	7bfa      	ldrb	r2, [r7, #15]
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	4613      	mov	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	1a9b      	subs	r3, r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d62:	7bfa      	ldrb	r2, [r7, #15]
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	4613      	mov	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	1a9b      	subs	r3, r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	440b      	add	r3, r1
 8002d70:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d78:	7bfa      	ldrb	r2, [r7, #15]
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	1a9b      	subs	r3, r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	3301      	adds	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]
 8002d94:	7bfa      	ldrb	r2, [r7, #15]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d3b5      	bcc.n	8002d0a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	687e      	ldr	r6, [r7, #4]
 8002da6:	466d      	mov	r5, sp
 8002da8:	f106 0410 	add.w	r4, r6, #16
 8002dac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002db0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002db2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002db4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002db8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002dbc:	1d33      	adds	r3, r6, #4
 8002dbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dc0:	6838      	ldr	r0, [r7, #0]
 8002dc2:	f003 fc93 	bl	80066ec <USB_DevInit>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d005      	beq.n	8002dd8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e00d      	b.n	8002df4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f004 fd0f 	bl	8007810 <USB_DevDisconnect>

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002dfc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d101      	bne.n	8002e18 <HAL_PCD_Start+0x1c>
 8002e14:	2302      	movs	r3, #2
 8002e16:	e020      	b.n	8002e5a <HAL_PCD_Start+0x5e>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d109      	bne.n	8002e3c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d005      	beq.n	8002e3c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e34:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f003 fbe5 	bl	8006610 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f004 fcbf 	bl	80077ce <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e62:	b590      	push	{r4, r7, lr}
 8002e64:	b08d      	sub	sp, #52	; 0x34
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f004 fd7d 	bl	8007978 <USB_GetMode>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f040 839d 	bne.w	80035c0 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f004 fce1 	bl	8007852 <USB_ReadInterrupts>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 8393 	beq.w	80035be <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f004 fcd8 	bl	8007852 <USB_ReadInterrupts>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d107      	bne.n	8002ebc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695a      	ldr	r2, [r3, #20]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f002 0202 	and.w	r2, r2, #2
 8002eba:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f004 fcc6 	bl	8007852 <USB_ReadInterrupts>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	f003 0310 	and.w	r3, r3, #16
 8002ecc:	2b10      	cmp	r3, #16
 8002ece:	d161      	bne.n	8002f94 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699a      	ldr	r2, [r3, #24]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0210 	bic.w	r2, r2, #16
 8002ede:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	f003 020f 	and.w	r2, r3, #15
 8002eec:	4613      	mov	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	1a9b      	subs	r3, r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	4413      	add	r3, r2
 8002efc:	3304      	adds	r3, #4
 8002efe:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	0c5b      	lsrs	r3, r3, #17
 8002f04:	f003 030f 	and.w	r3, r3, #15
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d124      	bne.n	8002f56 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002f12:	4013      	ands	r3, r2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d035      	beq.n	8002f84 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	091b      	lsrs	r3, r3, #4
 8002f20:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	461a      	mov	r2, r3
 8002f2a:	6a38      	ldr	r0, [r7, #32]
 8002f2c:	f004 fafd 	bl	800752a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	091b      	lsrs	r3, r3, #4
 8002f38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f3c:	441a      	add	r2, r3
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	699a      	ldr	r2, [r3, #24]
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	091b      	lsrs	r3, r3, #4
 8002f4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f4e:	441a      	add	r2, r3
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	619a      	str	r2, [r3, #24]
 8002f54:	e016      	b.n	8002f84 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	0c5b      	lsrs	r3, r3, #17
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	2b06      	cmp	r3, #6
 8002f60:	d110      	bne.n	8002f84 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f68:	2208      	movs	r2, #8
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	6a38      	ldr	r0, [r7, #32]
 8002f6e:	f004 fadc 	bl	800752a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	699a      	ldr	r2, [r3, #24]
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	091b      	lsrs	r3, r3, #4
 8002f7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f7e:	441a      	add	r2, r3
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	699a      	ldr	r2, [r3, #24]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0210 	orr.w	r2, r2, #16
 8002f92:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f004 fc5a 	bl	8007852 <USB_ReadInterrupts>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fa4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002fa8:	d16e      	bne.n	8003088 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f004 fc60 	bl	8007878 <USB_ReadDevAllOutEpInterrupt>
 8002fb8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002fba:	e062      	b.n	8003082 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d057      	beq.n	8003076 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	4611      	mov	r1, r2
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f004 fc85 	bl	80078e0 <USB_ReadDevOutEPInterrupt>
 8002fd6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00c      	beq.n	8002ffc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	015a      	lsls	r2, r3, #5
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fee:	461a      	mov	r2, r3
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ff4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fdb0 	bl	8003b5c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00c      	beq.n	8003020 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	015a      	lsls	r2, r3, #5
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	4413      	add	r3, r2
 800300e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003012:	461a      	mov	r2, r3
 8003014:	2308      	movs	r3, #8
 8003016:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003018:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 feaa 	bl	8003d74 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	f003 0310 	and.w	r3, r3, #16
 8003026:	2b00      	cmp	r3, #0
 8003028:	d008      	beq.n	800303c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	4413      	add	r3, r2
 8003032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003036:	461a      	mov	r2, r3
 8003038:	2310      	movs	r3, #16
 800303a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	2b00      	cmp	r3, #0
 8003044:	d008      	beq.n	8003058 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	015a      	lsls	r2, r3, #5
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	4413      	add	r3, r2
 800304e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003052:	461a      	mov	r2, r3
 8003054:	2320      	movs	r3, #32
 8003056:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d009      	beq.n	8003076 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	015a      	lsls	r2, r3, #5
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	4413      	add	r3, r2
 800306a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800306e:	461a      	mov	r2, r3
 8003070:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003074:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	3301      	adds	r3, #1
 800307a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800307c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307e:	085b      	lsrs	r3, r3, #1
 8003080:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003084:	2b00      	cmp	r3, #0
 8003086:	d199      	bne.n	8002fbc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f004 fbe0 	bl	8007852 <USB_ReadInterrupts>
 8003092:	4603      	mov	r3, r0
 8003094:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003098:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800309c:	f040 80c0 	bne.w	8003220 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f004 fc01 	bl	80078ac <USB_ReadDevAllInEpInterrupt>
 80030aa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80030b0:	e0b2      	b.n	8003218 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80030b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 80a7 	beq.w	800320c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c4:	b2d2      	uxtb	r2, r2
 80030c6:	4611      	mov	r1, r2
 80030c8:	4618      	mov	r0, r3
 80030ca:	f004 fc27 	bl	800791c <USB_ReadDevInEPInterrupt>
 80030ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d057      	beq.n	800318a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	f003 030f 	and.w	r3, r3, #15
 80030e0:	2201      	movs	r2, #1
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	43db      	mvns	r3, r3
 80030f4:	69f9      	ldr	r1, [r7, #28]
 80030f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030fa:	4013      	ands	r3, r2
 80030fc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	015a      	lsls	r2, r3, #5
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	4413      	add	r3, r2
 8003106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800310a:	461a      	mov	r2, r3
 800310c:	2301      	movs	r3, #1
 800310e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d132      	bne.n	800317e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800311c:	4613      	mov	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	1a9b      	subs	r3, r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	3348      	adds	r3, #72	; 0x48
 8003128:	6819      	ldr	r1, [r3, #0]
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312e:	4613      	mov	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4403      	add	r3, r0
 8003138:	3344      	adds	r3, #68	; 0x44
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4419      	add	r1, r3
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003142:	4613      	mov	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	1a9b      	subs	r3, r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4403      	add	r3, r0
 800314c:	3348      	adds	r3, #72	; 0x48
 800314e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	2b00      	cmp	r3, #0
 8003154:	d113      	bne.n	800317e <HAL_PCD_IRQHandler+0x31c>
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800315a:	4613      	mov	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	1a9b      	subs	r3, r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	440b      	add	r3, r1
 8003164:	3350      	adds	r3, #80	; 0x50
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d108      	bne.n	800317e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6818      	ldr	r0, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003176:	461a      	mov	r2, r3
 8003178:	2101      	movs	r1, #1
 800317a:	f004 fc2f 	bl	80079dc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	b2db      	uxtb	r3, r3
 8003182:	4619      	mov	r1, r3
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f006 ff0a 	bl	8009f9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	f003 0308 	and.w	r3, r3, #8
 8003190:	2b00      	cmp	r3, #0
 8003192:	d008      	beq.n	80031a6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	015a      	lsls	r2, r3, #5
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	4413      	add	r3, r2
 800319c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031a0:	461a      	mov	r2, r3
 80031a2:	2308      	movs	r3, #8
 80031a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	f003 0310 	and.w	r3, r3, #16
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d008      	beq.n	80031c2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	015a      	lsls	r2, r3, #5
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	4413      	add	r3, r2
 80031b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031bc:	461a      	mov	r2, r3
 80031be:	2310      	movs	r3, #16
 80031c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d008      	beq.n	80031de <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031d8:	461a      	mov	r2, r3
 80031da:	2340      	movs	r3, #64	; 0x40
 80031dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d008      	beq.n	80031fa <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	015a      	lsls	r2, r3, #5
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	4413      	add	r3, r2
 80031f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031f4:	461a      	mov	r2, r3
 80031f6:	2302      	movs	r3, #2
 80031f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003204:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 fc1b 	bl	8003a42 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	3301      	adds	r3, #1
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003214:	085b      	lsrs	r3, r3, #1
 8003216:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321a:	2b00      	cmp	r3, #0
 800321c:	f47f af49 	bne.w	80030b2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f004 fb14 	bl	8007852 <USB_ReadInterrupts>
 800322a:	4603      	mov	r3, r0
 800322c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003230:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003234:	d122      	bne.n	800327c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	69fa      	ldr	r2, [r7, #28]
 8003240:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003244:	f023 0301 	bic.w	r3, r3, #1
 8003248:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003250:	2b01      	cmp	r3, #1
 8003252:	d108      	bne.n	8003266 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800325c:	2100      	movs	r1, #0
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 fe26 	bl	8003eb0 <HAL_PCDEx_LPM_Callback>
 8003264:	e002      	b.n	800326c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f006 ff06 	bl	800a078 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695a      	ldr	r2, [r3, #20]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800327a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f004 fae6 	bl	8007852 <USB_ReadInterrupts>
 8003286:	4603      	mov	r3, r0
 8003288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800328c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003290:	d112      	bne.n	80032b8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d102      	bne.n	80032a8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f006 fec2 	bl	800a02c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695a      	ldr	r2, [r3, #20]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80032b6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f004 fac8 	bl	8007852 <USB_ReadInterrupts>
 80032c2:	4603      	mov	r3, r0
 80032c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032cc:	f040 80c7 	bne.w	800345e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	69fa      	ldr	r2, [r7, #28]
 80032da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032de:	f023 0301 	bic.w	r3, r3, #1
 80032e2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2110      	movs	r1, #16
 80032ea:	4618      	mov	r0, r3
 80032ec:	f003 fb62 	bl	80069b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032f0:	2300      	movs	r3, #0
 80032f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032f4:	e056      	b.n	80033a4 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80032f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f8:	015a      	lsls	r2, r3, #5
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003302:	461a      	mov	r2, r3
 8003304:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003308:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800330a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330c:	015a      	lsls	r2, r3, #5
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	4413      	add	r3, r2
 8003312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800331a:	0151      	lsls	r1, r2, #5
 800331c:	69fa      	ldr	r2, [r7, #28]
 800331e:	440a      	add	r2, r1
 8003320:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003324:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003328:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800332a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332c:	015a      	lsls	r2, r3, #5
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	4413      	add	r3, r2
 8003332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800333a:	0151      	lsls	r1, r2, #5
 800333c:	69fa      	ldr	r2, [r7, #28]
 800333e:	440a      	add	r2, r1
 8003340:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003344:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003348:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800334a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	4413      	add	r3, r2
 8003352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003356:	461a      	mov	r2, r3
 8003358:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800335c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800335e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003360:	015a      	lsls	r2, r3, #5
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	4413      	add	r3, r2
 8003366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800336e:	0151      	lsls	r1, r2, #5
 8003370:	69fa      	ldr	r2, [r7, #28]
 8003372:	440a      	add	r2, r1
 8003374:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003378:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800337c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800337e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003380:	015a      	lsls	r2, r3, #5
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	4413      	add	r3, r2
 8003386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800338e:	0151      	lsls	r1, r2, #5
 8003390:	69fa      	ldr	r2, [r7, #28]
 8003392:	440a      	add	r2, r1
 8003394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003398:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800339c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800339e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a0:	3301      	adds	r3, #1
 80033a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d3a3      	bcc.n	80032f6 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	69fa      	ldr	r2, [r7, #28]
 80033b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033bc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80033c0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d016      	beq.n	80033f8 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033d4:	69fa      	ldr	r2, [r7, #28]
 80033d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033da:	f043 030b 	orr.w	r3, r3, #11
 80033de:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ea:	69fa      	ldr	r2, [r7, #28]
 80033ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033f0:	f043 030b 	orr.w	r3, r3, #11
 80033f4:	6453      	str	r3, [r2, #68]	; 0x44
 80033f6:	e015      	b.n	8003424 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	69fa      	ldr	r2, [r7, #28]
 8003402:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003406:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800340a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800340e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	69fa      	ldr	r2, [r7, #28]
 800341a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800341e:	f043 030b 	orr.w	r3, r3, #11
 8003422:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	69fa      	ldr	r2, [r7, #28]
 800342e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003432:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003436:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6818      	ldr	r0, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003448:	461a      	mov	r2, r3
 800344a:	f004 fac7 	bl	80079dc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695a      	ldr	r2, [r3, #20]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800345c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f004 f9f5 	bl	8007852 <USB_ReadInterrupts>
 8003468:	4603      	mov	r3, r0
 800346a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800346e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003472:	d124      	bne.n	80034be <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f004 fa8b 	bl	8007994 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f003 faf3 	bl	8006a6e <USB_GetDevSpeed>
 8003488:	4603      	mov	r3, r0
 800348a:	461a      	mov	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681c      	ldr	r4, [r3, #0]
 8003494:	f001 f936 	bl	8004704 <HAL_RCC_GetHCLKFreq>
 8003498:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	461a      	mov	r2, r3
 80034a2:	4620      	mov	r0, r4
 80034a4:	f003 f812 	bl	80064cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f006 fda0 	bl	8009fee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	695a      	ldr	r2, [r3, #20]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80034bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f004 f9c5 	bl	8007852 <USB_ReadInterrupts>
 80034c8:	4603      	mov	r3, r0
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d10a      	bne.n	80034e8 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f006 fd7d 	bl	8009fd2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	695a      	ldr	r2, [r3, #20]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f002 0208 	and.w	r2, r2, #8
 80034e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f004 f9b0 	bl	8007852 <USB_ReadInterrupts>
 80034f2:	4603      	mov	r3, r0
 80034f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034fc:	d10f      	bne.n	800351e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80034fe:	2300      	movs	r3, #0
 8003500:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	b2db      	uxtb	r3, r3
 8003506:	4619      	mov	r1, r3
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f006 fdd5 	bl	800a0b8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695a      	ldr	r2, [r3, #20]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800351c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f004 f995 	bl	8007852 <USB_ReadInterrupts>
 8003528:	4603      	mov	r3, r0
 800352a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800352e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003532:	d10f      	bne.n	8003554 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003534:	2300      	movs	r3, #0
 8003536:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	b2db      	uxtb	r3, r3
 800353c:	4619      	mov	r1, r3
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f006 fda8 	bl	800a094 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	695a      	ldr	r2, [r3, #20]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003552:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f004 f97a 	bl	8007852 <USB_ReadInterrupts>
 800355e:	4603      	mov	r3, r0
 8003560:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003568:	d10a      	bne.n	8003580 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f006 fdb6 	bl	800a0dc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695a      	ldr	r2, [r3, #20]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800357e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f004 f964 	bl	8007852 <USB_ReadInterrupts>
 800358a:	4603      	mov	r3, r0
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b04      	cmp	r3, #4
 8003592:	d115      	bne.n	80035c0 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d002      	beq.n	80035ac <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f006 fda6 	bl	800a0f8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6859      	ldr	r1, [r3, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	605a      	str	r2, [r3, #4]
 80035bc:	e000      	b.n	80035c0 <HAL_PCD_IRQHandler+0x75e>
      return;
 80035be:	bf00      	nop
    }
  }
}
 80035c0:	3734      	adds	r7, #52	; 0x34
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd90      	pop	{r4, r7, pc}

080035c6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b082      	sub	sp, #8
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	460b      	mov	r3, r1
 80035d0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d101      	bne.n	80035e0 <HAL_PCD_SetAddress+0x1a>
 80035dc:	2302      	movs	r3, #2
 80035de:	e013      	b.n	8003608 <HAL_PCD_SetAddress+0x42>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	78fa      	ldrb	r2, [r7, #3]
 80035ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	78fa      	ldrb	r2, [r7, #3]
 80035f6:	4611      	mov	r1, r2
 80035f8:	4618      	mov	r0, r3
 80035fa:	f004 f8c2 	bl	8007782 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	4608      	mov	r0, r1
 800361a:	4611      	mov	r1, r2
 800361c:	461a      	mov	r2, r3
 800361e:	4603      	mov	r3, r0
 8003620:	70fb      	strb	r3, [r7, #3]
 8003622:	460b      	mov	r3, r1
 8003624:	803b      	strh	r3, [r7, #0]
 8003626:	4613      	mov	r3, r2
 8003628:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800362a:	2300      	movs	r3, #0
 800362c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800362e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003632:	2b00      	cmp	r3, #0
 8003634:	da0f      	bge.n	8003656 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003636:	78fb      	ldrb	r3, [r7, #3]
 8003638:	f003 020f 	and.w	r2, r3, #15
 800363c:	4613      	mov	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	1a9b      	subs	r3, r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	3338      	adds	r3, #56	; 0x38
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	4413      	add	r3, r2
 800364a:	3304      	adds	r3, #4
 800364c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2201      	movs	r2, #1
 8003652:	705a      	strb	r2, [r3, #1]
 8003654:	e00f      	b.n	8003676 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003656:	78fb      	ldrb	r3, [r7, #3]
 8003658:	f003 020f 	and.w	r2, r3, #15
 800365c:	4613      	mov	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	1a9b      	subs	r3, r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	4413      	add	r3, r2
 800366c:	3304      	adds	r3, #4
 800366e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003676:	78fb      	ldrb	r3, [r7, #3]
 8003678:	f003 030f 	and.w	r3, r3, #15
 800367c:	b2da      	uxtb	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003682:	883a      	ldrh	r2, [r7, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	78ba      	ldrb	r2, [r7, #2]
 800368c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	785b      	ldrb	r3, [r3, #1]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d004      	beq.n	80036a0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80036a0:	78bb      	ldrb	r3, [r7, #2]
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d102      	bne.n	80036ac <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d101      	bne.n	80036ba <HAL_PCD_EP_Open+0xaa>
 80036b6:	2302      	movs	r3, #2
 80036b8:	e00e      	b.n	80036d8 <HAL_PCD_EP_Open+0xc8>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68f9      	ldr	r1, [r7, #12]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f003 f9f5 	bl	8006ab8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80036d6:	7afb      	ldrb	r3, [r7, #11]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	da0f      	bge.n	8003714 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036f4:	78fb      	ldrb	r3, [r7, #3]
 80036f6:	f003 020f 	and.w	r2, r3, #15
 80036fa:	4613      	mov	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	1a9b      	subs	r3, r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	3338      	adds	r3, #56	; 0x38
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	4413      	add	r3, r2
 8003708:	3304      	adds	r3, #4
 800370a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2201      	movs	r2, #1
 8003710:	705a      	strb	r2, [r3, #1]
 8003712:	e00f      	b.n	8003734 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003714:	78fb      	ldrb	r3, [r7, #3]
 8003716:	f003 020f 	and.w	r2, r3, #15
 800371a:	4613      	mov	r3, r2
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	1a9b      	subs	r3, r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	4413      	add	r3, r2
 800372a:	3304      	adds	r3, #4
 800372c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003734:	78fb      	ldrb	r3, [r7, #3]
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	b2da      	uxtb	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003746:	2b01      	cmp	r3, #1
 8003748:	d101      	bne.n	800374e <HAL_PCD_EP_Close+0x6e>
 800374a:	2302      	movs	r3, #2
 800374c:	e00e      	b.n	800376c <HAL_PCD_EP_Close+0x8c>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68f9      	ldr	r1, [r7, #12]
 800375c:	4618      	mov	r0, r3
 800375e:	f003 fa33 	bl	8006bc8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	607a      	str	r2, [r7, #4]
 800377e:	603b      	str	r3, [r7, #0]
 8003780:	460b      	mov	r3, r1
 8003782:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003784:	7afb      	ldrb	r3, [r7, #11]
 8003786:	f003 020f 	and.w	r2, r3, #15
 800378a:	4613      	mov	r3, r2
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	1a9b      	subs	r3, r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	4413      	add	r3, r2
 800379a:	3304      	adds	r3, #4
 800379c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	2200      	movs	r2, #0
 80037ae:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	2200      	movs	r2, #0
 80037b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037b6:	7afb      	ldrb	r3, [r7, #11]
 80037b8:	f003 030f 	and.w	r3, r3, #15
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d102      	bne.n	80037d0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037d0:	7afb      	ldrb	r3, [r7, #11]
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d109      	bne.n	80037ee <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6818      	ldr	r0, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	461a      	mov	r2, r3
 80037e6:	6979      	ldr	r1, [r7, #20]
 80037e8:	f003 fd0e 	bl	8007208 <USB_EP0StartXfer>
 80037ec:	e008      	b.n	8003800 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6818      	ldr	r0, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	461a      	mov	r2, r3
 80037fa:	6979      	ldr	r1, [r7, #20]
 80037fc:	f003 fac0 	bl	8006d80 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
 8003812:	460b      	mov	r3, r1
 8003814:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003816:	78fb      	ldrb	r3, [r7, #3]
 8003818:	f003 020f 	and.w	r2, r3, #15
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	4613      	mov	r3, r2
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	1a9b      	subs	r3, r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800382c:	681b      	ldr	r3, [r3, #0]
}
 800382e:	4618      	mov	r0, r3
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b086      	sub	sp, #24
 800383e:	af00      	add	r7, sp, #0
 8003840:	60f8      	str	r0, [r7, #12]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	603b      	str	r3, [r7, #0]
 8003846:	460b      	mov	r3, r1
 8003848:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800384a:	7afb      	ldrb	r3, [r7, #11]
 800384c:	f003 020f 	and.w	r2, r3, #15
 8003850:	4613      	mov	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	1a9b      	subs	r3, r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	3338      	adds	r3, #56	; 0x38
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	4413      	add	r3, r2
 800385e:	3304      	adds	r3, #4
 8003860:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2200      	movs	r2, #0
 8003872:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	2201      	movs	r2, #1
 8003878:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800387a:	7afb      	ldrb	r3, [r7, #11]
 800387c:	f003 030f 	and.w	r3, r3, #15
 8003880:	b2da      	uxtb	r2, r3
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d102      	bne.n	8003894 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003894:	7afb      	ldrb	r3, [r7, #11]
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	2b00      	cmp	r3, #0
 800389c:	d109      	bne.n	80038b2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6818      	ldr	r0, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	461a      	mov	r2, r3
 80038aa:	6979      	ldr	r1, [r7, #20]
 80038ac:	f003 fcac 	bl	8007208 <USB_EP0StartXfer>
 80038b0:	e008      	b.n	80038c4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6818      	ldr	r0, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	461a      	mov	r2, r3
 80038be:	6979      	ldr	r1, [r7, #20]
 80038c0:	f003 fa5e 	bl	8006d80 <USB_EPStartXfer>
  }

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3718      	adds	r7, #24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b084      	sub	sp, #16
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
 80038d6:	460b      	mov	r3, r1
 80038d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038da:	78fb      	ldrb	r3, [r7, #3]
 80038dc:	f003 020f 	and.w	r2, r3, #15
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d901      	bls.n	80038ec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e050      	b.n	800398e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	da0f      	bge.n	8003914 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038f4:	78fb      	ldrb	r3, [r7, #3]
 80038f6:	f003 020f 	and.w	r2, r3, #15
 80038fa:	4613      	mov	r3, r2
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	1a9b      	subs	r3, r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	3338      	adds	r3, #56	; 0x38
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	4413      	add	r3, r2
 8003908:	3304      	adds	r3, #4
 800390a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2201      	movs	r2, #1
 8003910:	705a      	strb	r2, [r3, #1]
 8003912:	e00d      	b.n	8003930 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003914:	78fa      	ldrb	r2, [r7, #3]
 8003916:	4613      	mov	r3, r2
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	1a9b      	subs	r3, r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	4413      	add	r3, r2
 8003926:	3304      	adds	r3, #4
 8003928:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2201      	movs	r2, #1
 8003934:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003936:	78fb      	ldrb	r3, [r7, #3]
 8003938:	f003 030f 	and.w	r3, r3, #15
 800393c:	b2da      	uxtb	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <HAL_PCD_EP_SetStall+0x82>
 800394c:	2302      	movs	r3, #2
 800394e:	e01e      	b.n	800398e <HAL_PCD_EP_SetStall+0xc0>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68f9      	ldr	r1, [r7, #12]
 800395e:	4618      	mov	r0, r3
 8003960:	f003 fe3b 	bl	80075da <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003964:	78fb      	ldrb	r3, [r7, #3]
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10a      	bne.n	8003984 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6818      	ldr	r0, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	b2d9      	uxtb	r1, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800397e:	461a      	mov	r2, r3
 8003980:	f004 f82c 	bl	80079dc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b084      	sub	sp, #16
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
 800399e:	460b      	mov	r3, r1
 80039a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80039a2:	78fb      	ldrb	r3, [r7, #3]
 80039a4:	f003 020f 	and.w	r2, r3, #15
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d901      	bls.n	80039b4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e042      	b.n	8003a3a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	da0f      	bge.n	80039dc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	f003 020f 	and.w	r2, r3, #15
 80039c2:	4613      	mov	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	1a9b      	subs	r3, r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	3338      	adds	r3, #56	; 0x38
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	4413      	add	r3, r2
 80039d0:	3304      	adds	r3, #4
 80039d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2201      	movs	r2, #1
 80039d8:	705a      	strb	r2, [r3, #1]
 80039da:	e00f      	b.n	80039fc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	f003 020f 	and.w	r2, r3, #15
 80039e2:	4613      	mov	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	1a9b      	subs	r3, r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	4413      	add	r3, r2
 80039f2:	3304      	adds	r3, #4
 80039f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a02:	78fb      	ldrb	r3, [r7, #3]
 8003a04:	f003 030f 	and.w	r3, r3, #15
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d101      	bne.n	8003a1c <HAL_PCD_EP_ClrStall+0x86>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	e00e      	b.n	8003a3a <HAL_PCD_EP_ClrStall+0xa4>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68f9      	ldr	r1, [r7, #12]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f003 fe43 	bl	80076b6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b08a      	sub	sp, #40	; 0x28
 8003a46:	af02      	add	r7, sp, #8
 8003a48:	6078      	str	r0, [r7, #4]
 8003a4a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	1a9b      	subs	r3, r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	3338      	adds	r3, #56	; 0x38
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	4413      	add	r3, r2
 8003a66:	3304      	adds	r3, #4
 8003a68:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	699a      	ldr	r2, [r3, #24]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d901      	bls.n	8003a7a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e06c      	b.n	8003b54 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	695a      	ldr	r2, [r3, #20]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	69fa      	ldr	r2, [r7, #28]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d902      	bls.n	8003a96 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	3303      	adds	r3, #3
 8003a9a:	089b      	lsrs	r3, r3, #2
 8003a9c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a9e:	e02b      	b.n	8003af8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	695a      	ldr	r2, [r3, #20]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	69fa      	ldr	r2, [r7, #28]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d902      	bls.n	8003abc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	3303      	adds	r3, #3
 8003ac0:	089b      	lsrs	r3, r3, #2
 8003ac2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	68d9      	ldr	r1, [r3, #12]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	4603      	mov	r3, r0
 8003ada:	6978      	ldr	r0, [r7, #20]
 8003adc:	f003 fce7 	bl	80074ae <USB_WritePacket>

    ep->xfer_buff  += len;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	68da      	ldr	r2, [r3, #12]
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	441a      	add	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	699a      	ldr	r2, [r3, #24]
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	441a      	add	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	015a      	lsls	r2, r3, #5
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	4413      	add	r3, r2
 8003b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d809      	bhi.n	8003b22 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	699a      	ldr	r2, [r3, #24]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d203      	bcs.n	8003b22 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1be      	bne.n	8003aa0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	695a      	ldr	r2, [r3, #20]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d811      	bhi.n	8003b52 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	f003 030f 	and.w	r3, r3, #15
 8003b34:	2201      	movs	r2, #1
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	43db      	mvns	r3, r3
 8003b48:	6939      	ldr	r1, [r7, #16]
 8003b4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b4e:	4013      	ands	r3, r2
 8003b50:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3720      	adds	r7, #32
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	333c      	adds	r3, #60	; 0x3c
 8003b74:	3304      	adds	r3, #4
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	015a      	lsls	r2, r3, #5
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	f040 80a0 	bne.w	8003cd4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d015      	beq.n	8003bca <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	4a72      	ldr	r2, [pc, #456]	; (8003d6c <PCD_EP_OutXfrComplete_int+0x210>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	f240 80dd 	bls.w	8003d62 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 80d7 	beq.w	8003d62 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bc6:	6093      	str	r3, [r2, #8]
 8003bc8:	e0cb      	b.n	8003d62 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f003 0320 	and.w	r3, r3, #32
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d009      	beq.n	8003be8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	015a      	lsls	r2, r3, #5
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be0:	461a      	mov	r2, r3
 8003be2:	2320      	movs	r3, #32
 8003be4:	6093      	str	r3, [r2, #8]
 8003be6:	e0bc      	b.n	8003d62 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f040 80b7 	bne.w	8003d62 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4a5d      	ldr	r2, [pc, #372]	; (8003d6c <PCD_EP_OutXfrComplete_int+0x210>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d90f      	bls.n	8003c1c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00a      	beq.n	8003c1c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c12:	461a      	mov	r2, r3
 8003c14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c18:	6093      	str	r3, [r2, #8]
 8003c1a:	e0a2      	b.n	8003d62 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	4613      	mov	r3, r2
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	1a9b      	subs	r3, r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	440b      	add	r3, r1
 8003c2a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003c2e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	0159      	lsls	r1, r3, #5
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	440b      	add	r3, r1
 8003c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003c42:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	1a9b      	subs	r3, r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4403      	add	r3, r0
 8003c52:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003c56:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	1a9b      	subs	r3, r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c6a:	6819      	ldr	r1, [r3, #0]
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	4613      	mov	r3, r2
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	1a9b      	subs	r3, r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4403      	add	r3, r0
 8003c7a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4419      	add	r1, r3
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	4613      	mov	r3, r2
 8003c88:	00db      	lsls	r3, r3, #3
 8003c8a:	1a9b      	subs	r3, r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4403      	add	r3, r0
 8003c90:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c94:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d114      	bne.n	8003cc6 <PCD_EP_OutXfrComplete_int+0x16a>
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	1a9b      	subs	r3, r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d108      	bne.n	8003cc6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6818      	ldr	r0, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	f003 fe8b 	bl	80079dc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	4619      	mov	r1, r3
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f006 f94b 	bl	8009f68 <HAL_PCD_DataOutStageCallback>
 8003cd2:	e046      	b.n	8003d62 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4a26      	ldr	r2, [pc, #152]	; (8003d70 <PCD_EP_OutXfrComplete_int+0x214>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d124      	bne.n	8003d26 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00a      	beq.n	8003cfc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	4413      	add	r3, r2
 8003cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cf8:	6093      	str	r3, [r2, #8]
 8003cfa:	e032      	b.n	8003d62 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	f003 0320 	and.w	r3, r3, #32
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d008      	beq.n	8003d18 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	015a      	lsls	r2, r3, #5
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d12:	461a      	mov	r2, r3
 8003d14:	2320      	movs	r3, #32
 8003d16:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f006 f922 	bl	8009f68 <HAL_PCD_DataOutStageCallback>
 8003d24:	e01d      	b.n	8003d62 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d114      	bne.n	8003d56 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	4613      	mov	r3, r2
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	1a9b      	subs	r3, r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	440b      	add	r3, r1
 8003d3a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d108      	bne.n	8003d56 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6818      	ldr	r0, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d4e:	461a      	mov	r2, r3
 8003d50:	2100      	movs	r1, #0
 8003d52:	f003 fe43 	bl	80079dc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f006 f903 	bl	8009f68 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	4f54300a 	.word	0x4f54300a
 8003d70:	4f54310a 	.word	0x4f54310a

08003d74 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	333c      	adds	r3, #60	; 0x3c
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	015a      	lsls	r2, r3, #5
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	4413      	add	r3, r2
 8003d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4a15      	ldr	r2, [pc, #84]	; (8003dfc <PCD_EP_OutSetupPacket_int+0x88>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d90e      	bls.n	8003dc8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d009      	beq.n	8003dc8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dc6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f006 f8bb 	bl	8009f44 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4a0a      	ldr	r2, [pc, #40]	; (8003dfc <PCD_EP_OutSetupPacket_int+0x88>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d90c      	bls.n	8003df0 <PCD_EP_OutSetupPacket_int+0x7c>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d108      	bne.n	8003df0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6818      	ldr	r0, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003de8:	461a      	mov	r2, r3
 8003dea:	2101      	movs	r1, #1
 8003dec:	f003 fdf6 	bl	80079dc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3718      	adds	r7, #24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	4f54300a 	.word	0x4f54300a

08003e00 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	70fb      	strb	r3, [r7, #3]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003e18:	78fb      	ldrb	r3, [r7, #3]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d107      	bne.n	8003e2e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003e1e:	883b      	ldrh	r3, [r7, #0]
 8003e20:	0419      	lsls	r1, r3, #16
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	629a      	str	r2, [r3, #40]	; 0x28
 8003e2c:	e028      	b.n	8003e80 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e34:	0c1b      	lsrs	r3, r3, #16
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	4413      	add	r3, r2
 8003e3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	73fb      	strb	r3, [r7, #15]
 8003e40:	e00d      	b.n	8003e5e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
 8003e48:	3340      	adds	r3, #64	; 0x40
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	0c1b      	lsrs	r3, r3, #16
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	4413      	add	r3, r2
 8003e56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	73fb      	strb	r3, [r7, #15]
 8003e5e:	7bfa      	ldrb	r2, [r7, #15]
 8003e60:	78fb      	ldrb	r3, [r7, #3]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d3ec      	bcc.n	8003e42 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003e68:	883b      	ldrh	r3, [r7, #0]
 8003e6a:	0418      	lsls	r0, r3, #16
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6819      	ldr	r1, [r3, #0]
 8003e70:	78fb      	ldrb	r3, [r7, #3]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	68ba      	ldr	r2, [r7, #8]
 8003e76:	4302      	orrs	r2, r0
 8003e78:	3340      	adds	r3, #64	; 0x40
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3714      	adds	r7, #20
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	460b      	mov	r3, r1
 8003e98:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	887a      	ldrh	r2, [r7, #2]
 8003ea0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	460b      	mov	r3, r1
 8003eba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e262      	b.n	80043a0 <HAL_RCC_OscConfig+0x4d8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d075      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ee6:	4ba3      	ldr	r3, [pc, #652]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 030c 	and.w	r3, r3, #12
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d00c      	beq.n	8003f0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ef2:	4ba0      	ldr	r3, [pc, #640]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d112      	bne.n	8003f24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003efe:	4b9d      	ldr	r3, [pc, #628]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f0a:	d10b      	bne.n	8003f24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f0c:	4b99      	ldr	r3, [pc, #612]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d05b      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x108>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d157      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e23d      	b.n	80043a0 <HAL_RCC_OscConfig+0x4d8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f2c:	d106      	bne.n	8003f3c <HAL_RCC_OscConfig+0x74>
 8003f2e:	4b91      	ldr	r3, [pc, #580]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a90      	ldr	r2, [pc, #576]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	e01d      	b.n	8003f78 <HAL_RCC_OscConfig+0xb0>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f44:	d10c      	bne.n	8003f60 <HAL_RCC_OscConfig+0x98>
 8003f46:	4b8b      	ldr	r3, [pc, #556]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a8a      	ldr	r2, [pc, #552]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	4b88      	ldr	r3, [pc, #544]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a87      	ldr	r2, [pc, #540]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	e00b      	b.n	8003f78 <HAL_RCC_OscConfig+0xb0>
 8003f60:	4b84      	ldr	r3, [pc, #528]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a83      	ldr	r2, [pc, #524]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f6a:	6013      	str	r3, [r2, #0]
 8003f6c:	4b81      	ldr	r3, [pc, #516]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a80      	ldr	r2, [pc, #512]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d013      	beq.n	8003fa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f80:	f7fc fb0c 	bl	800059c <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f88:	f7fc fb08 	bl	800059c <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b64      	cmp	r3, #100	; 0x64
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e202      	b.n	80043a0 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9a:	4b76      	ldr	r3, [pc, #472]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0f0      	beq.n	8003f88 <HAL_RCC_OscConfig+0xc0>
 8003fa6:	e014      	b.n	8003fd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa8:	f7fc faf8 	bl	800059c <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fb0:	f7fc faf4 	bl	800059c <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b64      	cmp	r3, #100	; 0x64
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e1ee      	b.n	80043a0 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fc2:	4b6c      	ldr	r3, [pc, #432]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1f0      	bne.n	8003fb0 <HAL_RCC_OscConfig+0xe8>
 8003fce:	e000      	b.n	8003fd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d063      	beq.n	80040a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fde:	4b65      	ldr	r3, [pc, #404]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 030c 	and.w	r3, r3, #12
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00b      	beq.n	8004002 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fea:	4b62      	ldr	r3, [pc, #392]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ff2:	2b08      	cmp	r3, #8
 8003ff4:	d11c      	bne.n	8004030 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ff6:	4b5f      	ldr	r3, [pc, #380]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d116      	bne.n	8004030 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004002:	4b5c      	ldr	r3, [pc, #368]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d005      	beq.n	800401a <HAL_RCC_OscConfig+0x152>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d001      	beq.n	800401a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e1c2      	b.n	80043a0 <HAL_RCC_OscConfig+0x4d8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800401a:	4b56      	ldr	r3, [pc, #344]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	4952      	ldr	r1, [pc, #328]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 800402a:	4313      	orrs	r3, r2
 800402c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800402e:	e03a      	b.n	80040a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d020      	beq.n	800407a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004038:	4b4f      	ldr	r3, [pc, #316]	; (8004178 <HAL_RCC_OscConfig+0x2b0>)
 800403a:	2201      	movs	r2, #1
 800403c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403e:	f7fc faad 	bl	800059c <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004046:	f7fc faa9 	bl	800059c <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e1a3      	b.n	80043a0 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004058:	4b46      	ldr	r3, [pc, #280]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0f0      	beq.n	8004046 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004064:	4b43      	ldr	r3, [pc, #268]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	4940      	ldr	r1, [pc, #256]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8004074:	4313      	orrs	r3, r2
 8004076:	600b      	str	r3, [r1, #0]
 8004078:	e015      	b.n	80040a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800407a:	4b3f      	ldr	r3, [pc, #252]	; (8004178 <HAL_RCC_OscConfig+0x2b0>)
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004080:	f7fc fa8c 	bl	800059c <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004088:	f7fc fa88 	bl	800059c <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e182      	b.n	80043a0 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800409a:	4b36      	ldr	r3, [pc, #216]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1f0      	bne.n	8004088 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0308 	and.w	r3, r3, #8
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d030      	beq.n	8004114 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d016      	beq.n	80040e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ba:	4b30      	ldr	r3, [pc, #192]	; (800417c <HAL_RCC_OscConfig+0x2b4>)
 80040bc:	2201      	movs	r2, #1
 80040be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c0:	f7fc fa6c 	bl	800059c <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040c8:	f7fc fa68 	bl	800059c <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e162      	b.n	80043a0 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040da:	4b26      	ldr	r3, [pc, #152]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 80040dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0f0      	beq.n	80040c8 <HAL_RCC_OscConfig+0x200>
 80040e6:	e015      	b.n	8004114 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040e8:	4b24      	ldr	r3, [pc, #144]	; (800417c <HAL_RCC_OscConfig+0x2b4>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ee:	f7fc fa55 	bl	800059c <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040f4:	e008      	b.n	8004108 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040f6:	f7fc fa51 	bl	800059c <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e14b      	b.n	80043a0 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004108:	4b1a      	ldr	r3, [pc, #104]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 800410a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1f0      	bne.n	80040f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 809e 	beq.w	800425e <HAL_RCC_OscConfig+0x396>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004122:	2300      	movs	r3, #0
 8004124:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004126:	4b13      	ldr	r3, [pc, #76]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10f      	bne.n	8004152 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004132:	2300      	movs	r3, #0
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	4b0f      	ldr	r3, [pc, #60]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	4a0e      	ldr	r2, [pc, #56]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 800413c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004140:	6413      	str	r3, [r2, #64]	; 0x40
 8004142:	4b0c      	ldr	r3, [pc, #48]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800414a:	60bb      	str	r3, [r7, #8]
 800414c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800414e:	2301      	movs	r3, #1
 8004150:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004152:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <HAL_RCC_OscConfig+0x2b8>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415a:	2b00      	cmp	r3, #0
 800415c:	d121      	bne.n	80041a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800415e:	4b08      	ldr	r3, [pc, #32]	; (8004180 <HAL_RCC_OscConfig+0x2b8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a07      	ldr	r2, [pc, #28]	; (8004180 <HAL_RCC_OscConfig+0x2b8>)
 8004164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004168:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800416a:	f7fc fa17 	bl	800059c <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004170:	e011      	b.n	8004196 <HAL_RCC_OscConfig+0x2ce>
 8004172:	bf00      	nop
 8004174:	40023800 	.word	0x40023800
 8004178:	42470000 	.word	0x42470000
 800417c:	42470e80 	.word	0x42470e80
 8004180:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004184:	f7fc fa0a 	bl	800059c <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e104      	b.n	80043a0 <HAL_RCC_OscConfig+0x4d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004196:	4b84      	ldr	r3, [pc, #528]	; (80043a8 <HAL_RCC_OscConfig+0x4e0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d0f0      	beq.n	8004184 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d106      	bne.n	80041b8 <HAL_RCC_OscConfig+0x2f0>
 80041aa:	4b80      	ldr	r3, [pc, #512]	; (80043ac <HAL_RCC_OscConfig+0x4e4>)
 80041ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ae:	4a7f      	ldr	r2, [pc, #508]	; (80043ac <HAL_RCC_OscConfig+0x4e4>)
 80041b0:	f043 0301 	orr.w	r3, r3, #1
 80041b4:	6713      	str	r3, [r2, #112]	; 0x70
 80041b6:	e01c      	b.n	80041f2 <HAL_RCC_OscConfig+0x32a>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	2b05      	cmp	r3, #5
 80041be:	d10c      	bne.n	80041da <HAL_RCC_OscConfig+0x312>
 80041c0:	4b7a      	ldr	r3, [pc, #488]	; (80043ac <HAL_RCC_OscConfig+0x4e4>)
 80041c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c4:	4a79      	ldr	r2, [pc, #484]	; (80043ac <HAL_RCC_OscConfig+0x4e4>)
 80041c6:	f043 0304 	orr.w	r3, r3, #4
 80041ca:	6713      	str	r3, [r2, #112]	; 0x70
 80041cc:	4b77      	ldr	r3, [pc, #476]	; (80043ac <HAL_RCC_OscConfig+0x4e4>)
 80041ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d0:	4a76      	ldr	r2, [pc, #472]	; (80043ac <HAL_RCC_OscConfig+0x4e4>)
 80041d2:	f043 0301 	orr.w	r3, r3, #1
 80041d6:	6713      	str	r3, [r2, #112]	; 0x70
 80041d8:	e00b      	b.n	80041f2 <HAL_RCC_OscConfig+0x32a>
 80041da:	4b74      	ldr	r3, [pc, #464]	; (80043ac <HAL_RCC_OscConfig+0x4e4>)
 80041dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041de:	4a73      	ldr	r2, [pc, #460]	; (80043ac <HAL_RCC_OscConfig+0x4e4>)
 80041e0:	f023 0301 	bic.w	r3, r3, #1
 80041e4:	6713      	str	r3, [r2, #112]	; 0x70
 80041e6:	4b71      	ldr	r3, [pc, #452]	; (80043ac <HAL_RCC_OscConfig+0x4e4>)
 80041e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ea:	4a70      	ldr	r2, [pc, #448]	; (80043ac <HAL_RCC_OscConfig+0x4e4>)
 80041ec:	f023 0304 	bic.w	r3, r3, #4
 80041f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d014      	beq.n	8004224 <HAL_RCC_OscConfig+0x35c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fa:	f7fc f9cf 	bl	800059c <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004200:	e009      	b.n	8004216 <HAL_RCC_OscConfig+0x34e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004202:	f7fc f9cb 	bl	800059c <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x34e>
        {
          return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e0c4      	b.n	80043a0 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004216:	4b65      	ldr	r3, [pc, #404]	; (80043ac <HAL_RCC_OscConfig+0x4e4>)
 8004218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d0ef      	beq.n	8004202 <HAL_RCC_OscConfig+0x33a>
 8004222:	e013      	b.n	800424c <HAL_RCC_OscConfig+0x384>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004224:	f7fc f9ba 	bl	800059c <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800422a:	e009      	b.n	8004240 <HAL_RCC_OscConfig+0x378>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800422c:	f7fc f9b6 	bl	800059c <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x378>
        {
          return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e0af      	b.n	80043a0 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004240:	4b5a      	ldr	r3, [pc, #360]	; (80043ac <HAL_RCC_OscConfig+0x4e4>)
 8004242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1ef      	bne.n	800422c <HAL_RCC_OscConfig+0x364>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800424c:	7dfb      	ldrb	r3, [r7, #23]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d105      	bne.n	800425e <HAL_RCC_OscConfig+0x396>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004252:	4b56      	ldr	r3, [pc, #344]	; (80043ac <HAL_RCC_OscConfig+0x4e4>)
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	4a55      	ldr	r2, [pc, #340]	; (80043ac <HAL_RCC_OscConfig+0x4e4>)
 8004258:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800425c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 809b 	beq.w	800439e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004268:	4b50      	ldr	r3, [pc, #320]	; (80043ac <HAL_RCC_OscConfig+0x4e4>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f003 030c 	and.w	r3, r3, #12
 8004270:	2b08      	cmp	r3, #8
 8004272:	d05c      	beq.n	800432e <HAL_RCC_OscConfig+0x466>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	2b02      	cmp	r3, #2
 800427a:	d141      	bne.n	8004300 <HAL_RCC_OscConfig+0x438>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800427c:	4b4c      	ldr	r3, [pc, #304]	; (80043b0 <HAL_RCC_OscConfig+0x4e8>)
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004282:	f7fc f98b 	bl	800059c <HAL_GetTick>
 8004286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004288:	e008      	b.n	800429c <HAL_RCC_OscConfig+0x3d4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800428a:	f7fc f987 	bl	800059c <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d901      	bls.n	800429c <HAL_RCC_OscConfig+0x3d4>
          {
            return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e081      	b.n	80043a0 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800429c:	4b43      	ldr	r3, [pc, #268]	; (80043ac <HAL_RCC_OscConfig+0x4e4>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1f0      	bne.n	800428a <HAL_RCC_OscConfig+0x3c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	69da      	ldr	r2, [r3, #28]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	431a      	orrs	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	019b      	lsls	r3, r3, #6
 80042b8:	431a      	orrs	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042be:	085b      	lsrs	r3, r3, #1
 80042c0:	3b01      	subs	r3, #1
 80042c2:	041b      	lsls	r3, r3, #16
 80042c4:	431a      	orrs	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ca:	061b      	lsls	r3, r3, #24
 80042cc:	4937      	ldr	r1, [pc, #220]	; (80043ac <HAL_RCC_OscConfig+0x4e4>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042d2:	4b37      	ldr	r3, [pc, #220]	; (80043b0 <HAL_RCC_OscConfig+0x4e8>)
 80042d4:	2201      	movs	r2, #1
 80042d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d8:	f7fc f960 	bl	800059c <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042de:	e008      	b.n	80042f2 <HAL_RCC_OscConfig+0x42a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042e0:	f7fc f95c 	bl	800059c <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e056      	b.n	80043a0 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f2:	4b2e      	ldr	r3, [pc, #184]	; (80043ac <HAL_RCC_OscConfig+0x4e4>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0f0      	beq.n	80042e0 <HAL_RCC_OscConfig+0x418>
 80042fe:	e04e      	b.n	800439e <HAL_RCC_OscConfig+0x4d6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004300:	4b2b      	ldr	r3, [pc, #172]	; (80043b0 <HAL_RCC_OscConfig+0x4e8>)
 8004302:	2200      	movs	r2, #0
 8004304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004306:	f7fc f949 	bl	800059c <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800430c:	e008      	b.n	8004320 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800430e:	f7fc f945 	bl	800059c <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d901      	bls.n	8004320 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e03f      	b.n	80043a0 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004320:	4b22      	ldr	r3, [pc, #136]	; (80043ac <HAL_RCC_OscConfig+0x4e4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1f0      	bne.n	800430e <HAL_RCC_OscConfig+0x446>
 800432c:	e037      	b.n	800439e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d101      	bne.n	800433a <HAL_RCC_OscConfig+0x472>
      {
        return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e032      	b.n	80043a0 <HAL_RCC_OscConfig+0x4d8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800433a:	4b1c      	ldr	r3, [pc, #112]	; (80043ac <HAL_RCC_OscConfig+0x4e4>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d028      	beq.n	800439a <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004352:	429a      	cmp	r2, r3
 8004354:	d121      	bne.n	800439a <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004360:	429a      	cmp	r2, r3
 8004362:	d11a      	bne.n	800439a <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800436a:	4013      	ands	r3, r2
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004370:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004372:	4293      	cmp	r3, r2
 8004374:	d111      	bne.n	800439a <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004380:	085b      	lsrs	r3, r3, #1
 8004382:	3b01      	subs	r3, #1
 8004384:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004386:	429a      	cmp	r2, r3
 8004388:	d107      	bne.n	800439a <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004394:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004396:	429a      	cmp	r2, r3
 8004398:	d001      	beq.n	800439e <HAL_RCC_OscConfig+0x4d6>
#endif
        {
          return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e000      	b.n	80043a0 <HAL_RCC_OscConfig+0x4d8>
        }
      }
    }
  }
  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	40007000 	.word	0x40007000
 80043ac:	40023800 	.word	0x40023800
 80043b0:	42470060 	.word	0x42470060

080043b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e0cc      	b.n	8004562 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043c8:	4b68      	ldr	r3, [pc, #416]	; (800456c <HAL_RCC_ClockConfig+0x1b8>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d90c      	bls.n	80043f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043d6:	4b65      	ldr	r3, [pc, #404]	; (800456c <HAL_RCC_ClockConfig+0x1b8>)
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043de:	4b63      	ldr	r3, [pc, #396]	; (800456c <HAL_RCC_ClockConfig+0x1b8>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0307 	and.w	r3, r3, #7
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d001      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e0b8      	b.n	8004562 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d020      	beq.n	800443e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0304 	and.w	r3, r3, #4
 8004404:	2b00      	cmp	r3, #0
 8004406:	d005      	beq.n	8004414 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004408:	4b59      	ldr	r3, [pc, #356]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	4a58      	ldr	r2, [pc, #352]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 800440e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004412:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0308 	and.w	r3, r3, #8
 800441c:	2b00      	cmp	r3, #0
 800441e:	d005      	beq.n	800442c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004420:	4b53      	ldr	r3, [pc, #332]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	4a52      	ldr	r2, [pc, #328]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800442a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800442c:	4b50      	ldr	r3, [pc, #320]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	494d      	ldr	r1, [pc, #308]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 800443a:	4313      	orrs	r3, r2
 800443c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d044      	beq.n	80044d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d107      	bne.n	8004462 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004452:	4b47      	ldr	r3, [pc, #284]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d119      	bne.n	8004492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e07f      	b.n	8004562 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2b02      	cmp	r3, #2
 8004468:	d003      	beq.n	8004472 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800446e:	2b03      	cmp	r3, #3
 8004470:	d107      	bne.n	8004482 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004472:	4b3f      	ldr	r3, [pc, #252]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d109      	bne.n	8004492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e06f      	b.n	8004562 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004482:	4b3b      	ldr	r3, [pc, #236]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e067      	b.n	8004562 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004492:	4b37      	ldr	r3, [pc, #220]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f023 0203 	bic.w	r2, r3, #3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	4934      	ldr	r1, [pc, #208]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044a4:	f7fc f87a 	bl	800059c <HAL_GetTick>
 80044a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044aa:	e00a      	b.n	80044c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044ac:	f7fc f876 	bl	800059c <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e04f      	b.n	8004562 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c2:	4b2b      	ldr	r3, [pc, #172]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 020c 	and.w	r2, r3, #12
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d1eb      	bne.n	80044ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044d4:	4b25      	ldr	r3, [pc, #148]	; (800456c <HAL_RCC_ClockConfig+0x1b8>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d20c      	bcs.n	80044fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e2:	4b22      	ldr	r3, [pc, #136]	; (800456c <HAL_RCC_ClockConfig+0x1b8>)
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	b2d2      	uxtb	r2, r2
 80044e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ea:	4b20      	ldr	r3, [pc, #128]	; (800456c <HAL_RCC_ClockConfig+0x1b8>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0307 	and.w	r3, r3, #7
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d001      	beq.n	80044fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e032      	b.n	8004562 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b00      	cmp	r3, #0
 8004506:	d008      	beq.n	800451a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004508:	4b19      	ldr	r3, [pc, #100]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	4916      	ldr	r1, [pc, #88]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 8004516:	4313      	orrs	r3, r2
 8004518:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0308 	and.w	r3, r3, #8
 8004522:	2b00      	cmp	r3, #0
 8004524:	d009      	beq.n	800453a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004526:	4b12      	ldr	r3, [pc, #72]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	490e      	ldr	r1, [pc, #56]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 8004536:	4313      	orrs	r3, r2
 8004538:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800453a:	f000 f82d 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 800453e:	4602      	mov	r2, r0
 8004540:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <HAL_RCC_ClockConfig+0x1bc>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	091b      	lsrs	r3, r3, #4
 8004546:	f003 030f 	and.w	r3, r3, #15
 800454a:	490a      	ldr	r1, [pc, #40]	; (8004574 <HAL_RCC_ClockConfig+0x1c0>)
 800454c:	5ccb      	ldrb	r3, [r1, r3]
 800454e:	fa22 f303 	lsr.w	r3, r2, r3
 8004552:	4a09      	ldr	r2, [pc, #36]	; (8004578 <HAL_RCC_ClockConfig+0x1c4>)
 8004554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004556:	4b09      	ldr	r3, [pc, #36]	; (800457c <HAL_RCC_ClockConfig+0x1c8>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f7fb ffda 	bl	8000514 <HAL_InitTick>

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	40023c00 	.word	0x40023c00
 8004570:	40023800 	.word	0x40023800
 8004574:	0800a7e4 	.word	0x0800a7e4
 8004578:	20000118 	.word	0x20000118
 800457c:	20000000 	.word	0x20000000

08004580 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004584:	4b03      	ldr	r3, [pc, #12]	; (8004594 <HAL_RCC_EnableCSS+0x14>)
 8004586:	2201      	movs	r2, #1
 8004588:	601a      	str	r2, [r3, #0]
}
 800458a:	bf00      	nop
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	4247004c 	.word	0x4247004c

08004598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004598:	b5b0      	push	{r4, r5, r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800459e:	2100      	movs	r1, #0
 80045a0:	6079      	str	r1, [r7, #4]
 80045a2:	2100      	movs	r1, #0
 80045a4:	60f9      	str	r1, [r7, #12]
 80045a6:	2100      	movs	r1, #0
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80045aa:	2100      	movs	r1, #0
 80045ac:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045ae:	4952      	ldr	r1, [pc, #328]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80045b0:	6889      	ldr	r1, [r1, #8]
 80045b2:	f001 010c 	and.w	r1, r1, #12
 80045b6:	2908      	cmp	r1, #8
 80045b8:	d00d      	beq.n	80045d6 <HAL_RCC_GetSysClockFreq+0x3e>
 80045ba:	2908      	cmp	r1, #8
 80045bc:	f200 8094 	bhi.w	80046e8 <HAL_RCC_GetSysClockFreq+0x150>
 80045c0:	2900      	cmp	r1, #0
 80045c2:	d002      	beq.n	80045ca <HAL_RCC_GetSysClockFreq+0x32>
 80045c4:	2904      	cmp	r1, #4
 80045c6:	d003      	beq.n	80045d0 <HAL_RCC_GetSysClockFreq+0x38>
 80045c8:	e08e      	b.n	80046e8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045ca:	4b4c      	ldr	r3, [pc, #304]	; (80046fc <HAL_RCC_GetSysClockFreq+0x164>)
 80045cc:	60bb      	str	r3, [r7, #8]
       break;
 80045ce:	e08e      	b.n	80046ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045d0:	4b4b      	ldr	r3, [pc, #300]	; (8004700 <HAL_RCC_GetSysClockFreq+0x168>)
 80045d2:	60bb      	str	r3, [r7, #8]
      break;
 80045d4:	e08b      	b.n	80046ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045d6:	4948      	ldr	r1, [pc, #288]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80045d8:	6849      	ldr	r1, [r1, #4]
 80045da:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80045de:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045e0:	4945      	ldr	r1, [pc, #276]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80045e2:	6849      	ldr	r1, [r1, #4]
 80045e4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80045e8:	2900      	cmp	r1, #0
 80045ea:	d024      	beq.n	8004636 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045ec:	4942      	ldr	r1, [pc, #264]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80045ee:	6849      	ldr	r1, [r1, #4]
 80045f0:	0989      	lsrs	r1, r1, #6
 80045f2:	4608      	mov	r0, r1
 80045f4:	f04f 0100 	mov.w	r1, #0
 80045f8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80045fc:	f04f 0500 	mov.w	r5, #0
 8004600:	ea00 0204 	and.w	r2, r0, r4
 8004604:	ea01 0305 	and.w	r3, r1, r5
 8004608:	493d      	ldr	r1, [pc, #244]	; (8004700 <HAL_RCC_GetSysClockFreq+0x168>)
 800460a:	fb01 f003 	mul.w	r0, r1, r3
 800460e:	2100      	movs	r1, #0
 8004610:	fb01 f102 	mul.w	r1, r1, r2
 8004614:	1844      	adds	r4, r0, r1
 8004616:	493a      	ldr	r1, [pc, #232]	; (8004700 <HAL_RCC_GetSysClockFreq+0x168>)
 8004618:	fba2 0101 	umull	r0, r1, r2, r1
 800461c:	1863      	adds	r3, r4, r1
 800461e:	4619      	mov	r1, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	461a      	mov	r2, r3
 8004624:	f04f 0300 	mov.w	r3, #0
 8004628:	f7fb fdd6 	bl	80001d8 <__aeabi_uldivmod>
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	4613      	mov	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	e04a      	b.n	80046cc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004636:	4b30      	ldr	r3, [pc, #192]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	099b      	lsrs	r3, r3, #6
 800463c:	461a      	mov	r2, r3
 800463e:	f04f 0300 	mov.w	r3, #0
 8004642:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004646:	f04f 0100 	mov.w	r1, #0
 800464a:	ea02 0400 	and.w	r4, r2, r0
 800464e:	ea03 0501 	and.w	r5, r3, r1
 8004652:	4620      	mov	r0, r4
 8004654:	4629      	mov	r1, r5
 8004656:	f04f 0200 	mov.w	r2, #0
 800465a:	f04f 0300 	mov.w	r3, #0
 800465e:	014b      	lsls	r3, r1, #5
 8004660:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004664:	0142      	lsls	r2, r0, #5
 8004666:	4610      	mov	r0, r2
 8004668:	4619      	mov	r1, r3
 800466a:	1b00      	subs	r0, r0, r4
 800466c:	eb61 0105 	sbc.w	r1, r1, r5
 8004670:	f04f 0200 	mov.w	r2, #0
 8004674:	f04f 0300 	mov.w	r3, #0
 8004678:	018b      	lsls	r3, r1, #6
 800467a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800467e:	0182      	lsls	r2, r0, #6
 8004680:	1a12      	subs	r2, r2, r0
 8004682:	eb63 0301 	sbc.w	r3, r3, r1
 8004686:	f04f 0000 	mov.w	r0, #0
 800468a:	f04f 0100 	mov.w	r1, #0
 800468e:	00d9      	lsls	r1, r3, #3
 8004690:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004694:	00d0      	lsls	r0, r2, #3
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	1912      	adds	r2, r2, r4
 800469c:	eb45 0303 	adc.w	r3, r5, r3
 80046a0:	f04f 0000 	mov.w	r0, #0
 80046a4:	f04f 0100 	mov.w	r1, #0
 80046a8:	0299      	lsls	r1, r3, #10
 80046aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80046ae:	0290      	lsls	r0, r2, #10
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4610      	mov	r0, r2
 80046b6:	4619      	mov	r1, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	461a      	mov	r2, r3
 80046bc:	f04f 0300 	mov.w	r3, #0
 80046c0:	f7fb fd8a 	bl	80001d8 <__aeabi_uldivmod>
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	4613      	mov	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046cc:	4b0a      	ldr	r3, [pc, #40]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	0c1b      	lsrs	r3, r3, #16
 80046d2:	f003 0303 	and.w	r3, r3, #3
 80046d6:	3301      	adds	r3, #1
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e4:	60bb      	str	r3, [r7, #8]
      break;
 80046e6:	e002      	b.n	80046ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046e8:	4b04      	ldr	r3, [pc, #16]	; (80046fc <HAL_RCC_GetSysClockFreq+0x164>)
 80046ea:	60bb      	str	r3, [r7, #8]
      break;
 80046ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046ee:	68bb      	ldr	r3, [r7, #8]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bdb0      	pop	{r4, r5, r7, pc}
 80046f8:	40023800 	.word	0x40023800
 80046fc:	00f42400 	.word	0x00f42400
 8004700:	016e3600 	.word	0x016e3600

08004704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004708:	4b03      	ldr	r3, [pc, #12]	; (8004718 <HAL_RCC_GetHCLKFreq+0x14>)
 800470a:	681b      	ldr	r3, [r3, #0]
}
 800470c:	4618      	mov	r0, r3
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	20000118 	.word	0x20000118

0800471c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004720:	f7ff fff0 	bl	8004704 <HAL_RCC_GetHCLKFreq>
 8004724:	4602      	mov	r2, r0
 8004726:	4b05      	ldr	r3, [pc, #20]	; (800473c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	0a9b      	lsrs	r3, r3, #10
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	4903      	ldr	r1, [pc, #12]	; (8004740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004732:	5ccb      	ldrb	r3, [r1, r3]
 8004734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004738:	4618      	mov	r0, r3
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40023800 	.word	0x40023800
 8004740:	0800a7f4 	.word	0x0800a7f4

08004744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004748:	f7ff ffdc 	bl	8004704 <HAL_RCC_GetHCLKFreq>
 800474c:	4602      	mov	r2, r0
 800474e:	4b05      	ldr	r3, [pc, #20]	; (8004764 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	0b5b      	lsrs	r3, r3, #13
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	4903      	ldr	r1, [pc, #12]	; (8004768 <HAL_RCC_GetPCLK2Freq+0x24>)
 800475a:	5ccb      	ldrb	r3, [r1, r3]
 800475c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004760:	4618      	mov	r0, r3
 8004762:	bd80      	pop	{r7, pc}
 8004764:	40023800 	.word	0x40023800
 8004768:	0800a7f4 	.word	0x0800a7f4

0800476c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004770:	4b06      	ldr	r3, [pc, #24]	; (800478c <HAL_RCC_NMI_IRQHandler+0x20>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004778:	2b80      	cmp	r3, #128	; 0x80
 800477a:	d104      	bne.n	8004786 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800477c:	f000 f80a 	bl	8004794 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004780:	4b03      	ldr	r3, [pc, #12]	; (8004790 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004782:	2280      	movs	r2, #128	; 0x80
 8004784:	701a      	strb	r2, [r3, #0]
  }
}
 8004786:	bf00      	nop
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	40023800 	.word	0x40023800
 8004790:	4002380e 	.word	0x4002380e

08004794 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004798:	bf00      	nop
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
	...

080047a4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d105      	bne.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d038      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047cc:	4b68      	ldr	r3, [pc, #416]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047d2:	f7fb fee3 	bl	800059c <HAL_GetTick>
 80047d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047d8:	e008      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80047da:	f7fb fedf 	bl	800059c <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d901      	bls.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e0bc      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047ec:	4b61      	ldr	r3, [pc, #388]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1f0      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	019b      	lsls	r3, r3, #6
 8004802:	431a      	orrs	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	071b      	lsls	r3, r3, #28
 800480a:	495a      	ldr	r1, [pc, #360]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800480c:	4313      	orrs	r3, r2
 800480e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004812:	4b57      	ldr	r3, [pc, #348]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004814:	2201      	movs	r2, #1
 8004816:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004818:	f7fb fec0 	bl	800059c <HAL_GetTick>
 800481c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800481e:	e008      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004820:	f7fb febc 	bl	800059c <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d901      	bls.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e099      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004832:	4b50      	ldr	r3, [pc, #320]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0f0      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 8082 	beq.w	8004950 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800484c:	2300      	movs	r3, #0
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	4b48      	ldr	r3, [pc, #288]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004854:	4a47      	ldr	r2, [pc, #284]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800485a:	6413      	str	r3, [r2, #64]	; 0x40
 800485c:	4b45      	ldr	r3, [pc, #276]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004868:	4b43      	ldr	r3, [pc, #268]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a42      	ldr	r2, [pc, #264]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800486e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004872:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004874:	f7fb fe92 	bl	800059c <HAL_GetTick>
 8004878:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800487a:	e008      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800487c:	f7fb fe8e 	bl	800059c <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d901      	bls.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e06b      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800488e:	4b3a      	ldr	r3, [pc, #232]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0f0      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800489a:	4b36      	ldr	r3, [pc, #216]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800489c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048a2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d02e      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x164>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d027      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048b8:	4b2e      	ldr	r3, [pc, #184]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048c0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048c2:	4b2e      	ldr	r3, [pc, #184]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80048c4:	2201      	movs	r2, #1
 80048c6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048c8:	4b2c      	ldr	r3, [pc, #176]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80048ce:	4a29      	ldr	r2, [pc, #164]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80048d4:	4b27      	ldr	r3, [pc, #156]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d113      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80048e0:	f7fb fe5c 	bl	800059c <HAL_GetTick>
 80048e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e6:	e009      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x158>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048e8:	f7fb fe58 	bl	800059c <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80048f6:	d901      	bls.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x158>
          {
            return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e034      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048fc:	4b1d      	ldr	r3, [pc, #116]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0ef      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004910:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004914:	d10d      	bne.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8004916:	4b17      	ldr	r3, [pc, #92]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800492a:	4912      	ldr	r1, [pc, #72]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800492c:	4313      	orrs	r3, r2
 800492e:	608b      	str	r3, [r1, #8]
 8004930:	e005      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8004932:	4b10      	ldr	r3, [pc, #64]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	4a0f      	ldr	r2, [pc, #60]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004938:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800493c:	6093      	str	r3, [r2, #8]
 800493e:	4b0d      	ldr	r3, [pc, #52]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004940:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800494a:	490a      	ldr	r1, [pc, #40]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800494c:	4313      	orrs	r3, r2
 800494e:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0308 	and.w	r3, r3, #8
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	7d1a      	ldrb	r2, [r3, #20]
 8004960:	4b07      	ldr	r3, [pc, #28]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004962:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	42470068 	.word	0x42470068
 8004974:	40023800 	.word	0x40023800
 8004978:	40007000 	.word	0x40007000
 800497c:	42470e40 	.word	0x42470e40
 8004980:	424711e0 	.word	0x424711e0

08004984 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e083      	b.n	8004a9e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	7f5b      	ldrb	r3, [r3, #29]
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	d105      	bne.n	80049ac <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f005 f856 	bl	8009a58 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	22ca      	movs	r2, #202	; 0xca
 80049b8:	625a      	str	r2, [r3, #36]	; 0x24
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2253      	movs	r2, #83	; 0x53
 80049c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f897 	bl	8004af6 <RTC_EnterInitMode>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d008      	beq.n	80049e0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	22ff      	movs	r2, #255	; 0xff
 80049d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2204      	movs	r2, #4
 80049da:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e05e      	b.n	8004a9e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	6812      	ldr	r2, [r2, #0]
 80049ea:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80049ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049f2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6899      	ldr	r1, [r3, #8]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	68d2      	ldr	r2, [r2, #12]
 8004a1a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6919      	ldr	r1, [r3, #16]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	041a      	lsls	r2, r3, #16
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a3e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f003 0320 	and.w	r3, r3, #32
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10e      	bne.n	8004a6c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f829 	bl	8004aa6 <HAL_RTC_WaitForSynchro>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d008      	beq.n	8004a6c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	22ff      	movs	r2, #255	; 0xff
 8004a60:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2204      	movs	r2, #4
 8004a66:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e018      	b.n	8004a9e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a7a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	699a      	ldr	r2, [r3, #24]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	22ff      	movs	r2, #255	; 0xff
 8004a94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
  }
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b084      	sub	sp, #16
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68da      	ldr	r2, [r3, #12]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ac0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ac2:	f7fb fd6b 	bl	800059c <HAL_GetTick>
 8004ac6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004ac8:	e009      	b.n	8004ade <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004aca:	f7fb fd67 	bl	800059c <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ad8:	d901      	bls.n	8004ade <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e007      	b.n	8004aee <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f003 0320 	and.w	r3, r3, #32
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0ee      	beq.n	8004aca <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b084      	sub	sp, #16
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004afe:	2300      	movs	r3, #0
 8004b00:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d119      	bne.n	8004b44 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f04f 32ff 	mov.w	r2, #4294967295
 8004b18:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b1a:	f7fb fd3f 	bl	800059c <HAL_GetTick>
 8004b1e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004b20:	e009      	b.n	8004b36 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004b22:	f7fb fd3b 	bl	800059c <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b30:	d901      	bls.n	8004b36 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e007      	b.n	8004b46 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0ee      	beq.n	8004b22 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b082      	sub	sp, #8
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e022      	b.n	8004ba6 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d105      	bne.n	8004b78 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f004 ff86 	bl	8009a84 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2203      	movs	r2, #3
 8004b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f815 	bl	8004bb0 <HAL_SD_InitCard>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d001      	beq.n	8004b90 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e00a      	b.n	8004ba6 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
	...

08004bb0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004bb0:	b5b0      	push	{r4, r5, r7, lr}
 8004bb2:	b08e      	sub	sp, #56	; 0x38
 8004bb4:	af04      	add	r7, sp, #16
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004bcc:	2376      	movs	r3, #118	; 0x76
 8004bce:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681d      	ldr	r5, [r3, #0]
 8004bd4:	466c      	mov	r4, sp
 8004bd6:	f107 0314 	add.w	r3, r7, #20
 8004bda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004bde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004be2:	f107 0308 	add.w	r3, r7, #8
 8004be6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004be8:	4628      	mov	r0, r5
 8004bea:	f000 ff75 	bl	8005ad8 <SDIO_Init>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d001      	beq.n	8004c00 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e04c      	b.n	8004c9a <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004c00:	4b28      	ldr	r3, [pc, #160]	; (8004ca4 <HAL_SD_InitCard+0xf4>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 ff9c 	bl	8005b48 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004c10:	4b24      	ldr	r3, [pc, #144]	; (8004ca4 <HAL_SD_InitCard+0xf4>)
 8004c12:	2201      	movs	r2, #1
 8004c14:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 fb52 	bl	80052c0 <SD_PowerON>
 8004c1c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c1e:	6a3b      	ldr	r3, [r7, #32]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00b      	beq.n	8004c3c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c30:	6a3b      	ldr	r3, [r7, #32]
 8004c32:	431a      	orrs	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e02e      	b.n	8004c9a <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 fa73 	bl	8005128 <SD_InitCard>
 8004c42:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00b      	beq.n	8004c62 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e01b      	b.n	8004c9a <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 ffff 	bl	8005c6e <SDMMC_CmdBlockLength>
 8004c70:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00f      	beq.n	8004c98 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a0a      	ldr	r2, [pc, #40]	; (8004ca8 <HAL_SD_InitCard+0xf8>)
 8004c7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c84:	6a3b      	ldr	r3, [r7, #32]
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e000      	b.n	8004c9a <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3728      	adds	r7, #40	; 0x28
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bdb0      	pop	{r4, r5, r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	422580a0 	.word	0x422580a0
 8004ca8:	004005ff 	.word	0x004005ff

08004cac <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cba:	0f9b      	lsrs	r3, r3, #30
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cc6:	0e9b      	lsrs	r3, r3, #26
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	f003 030f 	and.w	r3, r3, #15
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cd8:	0e1b      	lsrs	r3, r3, #24
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	f003 0303 	and.w	r3, r3, #3
 8004ce0:	b2da      	uxtb	r2, r3
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cea:	0c1b      	lsrs	r3, r3, #16
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cf6:	0a1b      	lsrs	r3, r3, #8
 8004cf8:	b2da      	uxtb	r2, r3
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d0c:	0d1b      	lsrs	r3, r3, #20
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d18:	0c1b      	lsrs	r3, r3, #16
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	f003 030f 	and.w	r3, r3, #15
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d2a:	0bdb      	lsrs	r3, r3, #15
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d3c:	0b9b      	lsrs	r3, r3, #14
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d4e:	0b5b      	lsrs	r3, r3, #13
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d60:	0b1b      	lsrs	r3, r3, #12
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2200      	movs	r2, #0
 8004d72:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d163      	bne.n	8004e44 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d80:	009a      	lsls	r2, r3, #2
 8004d82:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d86:	4013      	ands	r3, r2
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004d8c:	0f92      	lsrs	r2, r2, #30
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d98:	0edb      	lsrs	r3, r3, #27
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	f003 0307 	and.w	r3, r3, #7
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004daa:	0e1b      	lsrs	r3, r3, #24
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	f003 0307 	and.w	r3, r3, #7
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dbc:	0d5b      	lsrs	r3, r3, #21
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	f003 0307 	and.w	r3, r3, #7
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dce:	0c9b      	lsrs	r3, r3, #18
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	f003 0307 	and.w	r3, r3, #7
 8004dd6:	b2da      	uxtb	r2, r3
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004de0:	0bdb      	lsrs	r3, r3, #15
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	1c5a      	adds	r2, r3, #1
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	7e1b      	ldrb	r3, [r3, #24]
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	f003 0307 	and.w	r3, r3, #7
 8004e02:	3302      	adds	r3, #2
 8004e04:	2201      	movs	r2, #1
 8004e06:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004e0e:	fb02 f203 	mul.w	r2, r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	7a1b      	ldrb	r3, [r3, #8]
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	f003 030f 	and.w	r3, r3, #15
 8004e20:	2201      	movs	r2, #1
 8004e22:	409a      	lsls	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004e30:	0a52      	lsrs	r2, r2, #9
 8004e32:	fb02 f203 	mul.w	r2, r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e40:	661a      	str	r2, [r3, #96]	; 0x60
 8004e42:	e031      	b.n	8004ea8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d11d      	bne.n	8004e88 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e50:	041b      	lsls	r3, r3, #16
 8004e52:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e5a:	0c1b      	lsrs	r3, r3, #16
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	3301      	adds	r3, #1
 8004e68:	029a      	lsls	r2, r3, #10
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e7c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	661a      	str	r2, [r3, #96]	; 0x60
 8004e86:	e00f      	b.n	8004ea8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a58      	ldr	r2, [pc, #352]	; (8004ff0 <HAL_SD_GetCardCSD+0x344>)
 8004e8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e09d      	b.n	8004fe4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eac:	0b9b      	lsrs	r3, r3, #14
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ebe:	09db      	lsrs	r3, r3, #7
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ec6:	b2da      	uxtb	r2, r3
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee0:	0fdb      	lsrs	r3, r3, #31
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eec:	0f5b      	lsrs	r3, r3, #29
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	f003 0303 	and.w	r3, r3, #3
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efe:	0e9b      	lsrs	r3, r3, #26
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f10:	0d9b      	lsrs	r3, r3, #22
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	f003 030f 	and.w	r3, r3, #15
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f22:	0d5b      	lsrs	r3, r3, #21
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	b2da      	uxtb	r2, r3
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3e:	0c1b      	lsrs	r3, r3, #16
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f52:	0bdb      	lsrs	r3, r3, #15
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f66:	0b9b      	lsrs	r3, r3, #14
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7a:	0b5b      	lsrs	r3, r3, #13
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8e:	0b1b      	lsrs	r3, r3, #12
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa2:	0a9b      	lsrs	r3, r3, #10
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	f003 0303 	and.w	r3, r3, #3
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb6:	0a1b      	lsrs	r3, r3, #8
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	b2da      	uxtb	r2, r3
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fca:	085b      	lsrs	r3, r3, #1
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	004005ff 	.word	0x004005ff

08004ff4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004ff4:	b5b0      	push	{r4, r5, r7, lr}
 8004ff6:	b08e      	sub	sp, #56	; 0x38
 8004ff8:	af04      	add	r7, sp, #16
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2203      	movs	r2, #3
 8005008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005010:	2b03      	cmp	r3, #3
 8005012:	d02e      	beq.n	8005072 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800501a:	d106      	bne.n	800502a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005020:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	639a      	str	r2, [r3, #56]	; 0x38
 8005028:	e029      	b.n	800507e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005030:	d10a      	bne.n	8005048 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f9d2 	bl	80053dc <SD_WideBus_Enable>
 8005038:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800503e:	6a3b      	ldr	r3, [r7, #32]
 8005040:	431a      	orrs	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	639a      	str	r2, [r3, #56]	; 0x38
 8005046:	e01a      	b.n	800507e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10a      	bne.n	8005064 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 fa0f 	bl	8005472 <SD_WideBus_Disable>
 8005054:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	431a      	orrs	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	639a      	str	r2, [r3, #56]	; 0x38
 8005062:	e00c      	b.n	800507e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005068:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	639a      	str	r2, [r3, #56]	; 0x38
 8005070:	e005      	b.n	800507e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005076:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00b      	beq.n	800509e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a26      	ldr	r2, [pc, #152]	; (8005124 <HAL_SD_ConfigWideBusOperation+0x130>)
 800508c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800509c:	e01f      	b.n	80050de <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681d      	ldr	r5, [r3, #0]
 80050c4:	466c      	mov	r4, sp
 80050c6:	f107 0314 	add.w	r3, r7, #20
 80050ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80050ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80050d2:	f107 0308 	add.w	r3, r7, #8
 80050d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050d8:	4628      	mov	r0, r5
 80050da:	f000 fcfd 	bl	8005ad8 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 fdc1 	bl	8005c6e <SDMMC_CmdBlockLength>
 80050ec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00c      	beq.n	800510e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a0a      	ldr	r2, [pc, #40]	; (8005124 <HAL_SD_ConfigWideBusOperation+0x130>)
 80050fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005100:	6a3b      	ldr	r3, [r7, #32]
 8005102:	431a      	orrs	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005116:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800511a:	4618      	mov	r0, r3
 800511c:	3728      	adds	r7, #40	; 0x28
 800511e:	46bd      	mov	sp, r7
 8005120:	bdb0      	pop	{r4, r5, r7, pc}
 8005122:	bf00      	nop
 8005124:	004005ff 	.word	0x004005ff

08005128 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005128:	b5b0      	push	{r4, r5, r7, lr}
 800512a:	b094      	sub	sp, #80	; 0x50
 800512c:	af04      	add	r7, sp, #16
 800512e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005130:	2301      	movs	r3, #1
 8005132:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4618      	mov	r0, r3
 800513a:	f000 fd14 	bl	8005b66 <SDIO_GetPowerState>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d102      	bne.n	800514a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005144:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005148:	e0b6      	b.n	80052b8 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800514e:	2b03      	cmp	r3, #3
 8005150:	d02f      	beq.n	80051b2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4618      	mov	r0, r3
 8005158:	f000 fe93 	bl	8005e82 <SDMMC_CmdSendCID>
 800515c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800515e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005160:	2b00      	cmp	r3, #0
 8005162:	d001      	beq.n	8005168 <SD_InitCard+0x40>
    {
      return errorstate;
 8005164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005166:	e0a7      	b.n	80052b8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2100      	movs	r1, #0
 800516e:	4618      	mov	r0, r3
 8005170:	f000 fd3e 	bl	8005bf0 <SDIO_GetResponse>
 8005174:	4602      	mov	r2, r0
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2104      	movs	r1, #4
 8005180:	4618      	mov	r0, r3
 8005182:	f000 fd35 	bl	8005bf0 <SDIO_GetResponse>
 8005186:	4602      	mov	r2, r0
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2108      	movs	r1, #8
 8005192:	4618      	mov	r0, r3
 8005194:	f000 fd2c 	bl	8005bf0 <SDIO_GetResponse>
 8005198:	4602      	mov	r2, r0
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	210c      	movs	r1, #12
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 fd23 	bl	8005bf0 <SDIO_GetResponse>
 80051aa:	4602      	mov	r2, r0
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b6:	2b03      	cmp	r3, #3
 80051b8:	d00d      	beq.n	80051d6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f107 020e 	add.w	r2, r7, #14
 80051c2:	4611      	mov	r1, r2
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 fe99 	bl	8005efc <SDMMC_CmdSetRelAdd>
 80051ca:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80051cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <SD_InitCard+0xae>
    {
      return errorstate;
 80051d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051d4:	e070      	b.n	80052b8 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051da:	2b03      	cmp	r3, #3
 80051dc:	d036      	beq.n	800524c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80051de:	89fb      	ldrh	r3, [r7, #14]
 80051e0:	461a      	mov	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ee:	041b      	lsls	r3, r3, #16
 80051f0:	4619      	mov	r1, r3
 80051f2:	4610      	mov	r0, r2
 80051f4:	f000 fe63 	bl	8005ebe <SDMMC_CmdSendCSD>
 80051f8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80051fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d001      	beq.n	8005204 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005202:	e059      	b.n	80052b8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2100      	movs	r1, #0
 800520a:	4618      	mov	r0, r3
 800520c:	f000 fcf0 	bl	8005bf0 <SDIO_GetResponse>
 8005210:	4602      	mov	r2, r0
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2104      	movs	r1, #4
 800521c:	4618      	mov	r0, r3
 800521e:	f000 fce7 	bl	8005bf0 <SDIO_GetResponse>
 8005222:	4602      	mov	r2, r0
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2108      	movs	r1, #8
 800522e:	4618      	mov	r0, r3
 8005230:	f000 fcde 	bl	8005bf0 <SDIO_GetResponse>
 8005234:	4602      	mov	r2, r0
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	210c      	movs	r1, #12
 8005240:	4618      	mov	r0, r3
 8005242:	f000 fcd5 	bl	8005bf0 <SDIO_GetResponse>
 8005246:	4602      	mov	r2, r0
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2104      	movs	r1, #4
 8005252:	4618      	mov	r0, r3
 8005254:	f000 fccc 	bl	8005bf0 <SDIO_GetResponse>
 8005258:	4603      	mov	r3, r0
 800525a:	0d1a      	lsrs	r2, r3, #20
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005260:	f107 0310 	add.w	r3, r7, #16
 8005264:	4619      	mov	r1, r3
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7ff fd20 	bl	8004cac <HAL_SD_GetCardCSD>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d002      	beq.n	8005278 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005272:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005276:	e01f      	b.n	80052b8 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6819      	ldr	r1, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005280:	041b      	lsls	r3, r3, #16
 8005282:	461a      	mov	r2, r3
 8005284:	f04f 0300 	mov.w	r3, #0
 8005288:	4608      	mov	r0, r1
 800528a:	f000 fd12 	bl	8005cb2 <SDMMC_CmdSelDesel>
 800528e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <SD_InitCard+0x172>
  {
    return errorstate;
 8005296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005298:	e00e      	b.n	80052b8 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681d      	ldr	r5, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	466c      	mov	r4, sp
 80052a2:	f103 0210 	add.w	r2, r3, #16
 80052a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80052a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80052ac:	3304      	adds	r3, #4
 80052ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052b0:	4628      	mov	r0, r5
 80052b2:	f000 fc11 	bl	8005ad8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3740      	adds	r7, #64	; 0x40
 80052bc:	46bd      	mov	sp, r7
 80052be:	bdb0      	pop	{r4, r5, r7, pc}

080052c0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	2300      	movs	r3, #0
 80052d2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4618      	mov	r0, r3
 80052da:	f000 fd0d 	bl	8005cf8 <SDMMC_CmdGoIdleState>
 80052de:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <SD_PowerON+0x2a>
  {
    return errorstate;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	e072      	b.n	80053d0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 fd20 	bl	8005d34 <SDMMC_CmdOperCond>
 80052f4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00d      	beq.n	8005318 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4618      	mov	r0, r3
 8005308:	f000 fcf6 	bl	8005cf8 <SDMMC_CmdGoIdleState>
 800530c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d004      	beq.n	800531e <SD_PowerON+0x5e>
    {
      return errorstate;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	e05b      	b.n	80053d0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005322:	2b01      	cmp	r3, #1
 8005324:	d137      	bne.n	8005396 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2100      	movs	r1, #0
 800532c:	4618      	mov	r0, r3
 800532e:	f000 fd20 	bl	8005d72 <SDMMC_CmdAppCommand>
 8005332:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d02d      	beq.n	8005396 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800533a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800533e:	e047      	b.n	80053d0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2100      	movs	r1, #0
 8005346:	4618      	mov	r0, r3
 8005348:	f000 fd13 	bl	8005d72 <SDMMC_CmdAppCommand>
 800534c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <SD_PowerON+0x98>
    {
      return errorstate;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	e03b      	b.n	80053d0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	491e      	ldr	r1, [pc, #120]	; (80053d8 <SD_PowerON+0x118>)
 800535e:	4618      	mov	r0, r3
 8005360:	f000 fd29 	bl	8005db6 <SDMMC_CmdAppOperCommand>
 8005364:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d002      	beq.n	8005372 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800536c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005370:	e02e      	b.n	80053d0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2100      	movs	r1, #0
 8005378:	4618      	mov	r0, r3
 800537a:	f000 fc39 	bl	8005bf0 <SDIO_GetResponse>
 800537e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	0fdb      	lsrs	r3, r3, #31
 8005384:	2b01      	cmp	r3, #1
 8005386:	d101      	bne.n	800538c <SD_PowerON+0xcc>
 8005388:	2301      	movs	r3, #1
 800538a:	e000      	b.n	800538e <SD_PowerON+0xce>
 800538c:	2300      	movs	r3, #0
 800538e:	613b      	str	r3, [r7, #16]

    count++;
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	3301      	adds	r3, #1
 8005394:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800539c:	4293      	cmp	r3, r2
 800539e:	d802      	bhi.n	80053a6 <SD_PowerON+0xe6>
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0cc      	beq.n	8005340 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d902      	bls.n	80053b6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80053b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053b4:	e00c      	b.n	80053d0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d003      	beq.n	80053c8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	645a      	str	r2, [r3, #68]	; 0x44
 80053c6:	e002      	b.n	80053ce <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3718      	adds	r7, #24
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	c1100000 	.word	0xc1100000

080053dc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80053e4:	2300      	movs	r3, #0
 80053e6:	60fb      	str	r3, [r7, #12]
 80053e8:	2300      	movs	r3, #0
 80053ea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2100      	movs	r1, #0
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 fbfc 	bl	8005bf0 <SDIO_GetResponse>
 80053f8:	4603      	mov	r3, r0
 80053fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005402:	d102      	bne.n	800540a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005404:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005408:	e02f      	b.n	800546a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800540a:	f107 030c 	add.w	r3, r7, #12
 800540e:	4619      	mov	r1, r3
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 f879 	bl	8005508 <SD_FindSCR>
 8005416:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	e023      	b.n	800546a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d01c      	beq.n	8005466 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005434:	041b      	lsls	r3, r3, #16
 8005436:	4619      	mov	r1, r3
 8005438:	4610      	mov	r0, r2
 800543a:	f000 fc9a 	bl	8005d72 <SDMMC_CmdAppCommand>
 800543e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	e00f      	b.n	800546a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2102      	movs	r1, #2
 8005450:	4618      	mov	r0, r3
 8005452:	f000 fcd3 	bl	8005dfc <SDMMC_CmdBusWidth>
 8005456:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	e003      	b.n	800546a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005462:	2300      	movs	r3, #0
 8005464:	e001      	b.n	800546a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005466:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800546a:	4618      	mov	r0, r3
 800546c:	3718      	adds	r7, #24
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b086      	sub	sp, #24
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800547a:	2300      	movs	r3, #0
 800547c:	60fb      	str	r3, [r7, #12]
 800547e:	2300      	movs	r3, #0
 8005480:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2100      	movs	r1, #0
 8005488:	4618      	mov	r0, r3
 800548a:	f000 fbb1 	bl	8005bf0 <SDIO_GetResponse>
 800548e:	4603      	mov	r3, r0
 8005490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005494:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005498:	d102      	bne.n	80054a0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800549a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800549e:	e02f      	b.n	8005500 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80054a0:	f107 030c 	add.w	r3, r7, #12
 80054a4:	4619      	mov	r1, r3
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f82e 	bl	8005508 <SD_FindSCR>
 80054ac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	e023      	b.n	8005500 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d01c      	beq.n	80054fc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ca:	041b      	lsls	r3, r3, #16
 80054cc:	4619      	mov	r1, r3
 80054ce:	4610      	mov	r0, r2
 80054d0:	f000 fc4f 	bl	8005d72 <SDMMC_CmdAppCommand>
 80054d4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d001      	beq.n	80054e0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	e00f      	b.n	8005500 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2100      	movs	r1, #0
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fc88 	bl	8005dfc <SDMMC_CmdBusWidth>
 80054ec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d001      	beq.n	80054f8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	e003      	b.n	8005500 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80054f8:	2300      	movs	r3, #0
 80054fa:	e001      	b.n	8005500 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80054fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005500:	4618      	mov	r0, r3
 8005502:	3718      	adds	r7, #24
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005508:	b590      	push	{r4, r7, lr}
 800550a:	b08f      	sub	sp, #60	; 0x3c
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005512:	f7fb f843 	bl	800059c <HAL_GetTick>
 8005516:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800551c:	2300      	movs	r3, #0
 800551e:	60bb      	str	r3, [r7, #8]
 8005520:	2300      	movs	r3, #0
 8005522:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2108      	movs	r1, #8
 800552e:	4618      	mov	r0, r3
 8005530:	f000 fb9d 	bl	8005c6e <SDMMC_CmdBlockLength>
 8005534:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005538:	2b00      	cmp	r3, #0
 800553a:	d001      	beq.n	8005540 <SD_FindSCR+0x38>
  {
    return errorstate;
 800553c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553e:	e0b2      	b.n	80056a6 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005548:	041b      	lsls	r3, r3, #16
 800554a:	4619      	mov	r1, r3
 800554c:	4610      	mov	r0, r2
 800554e:	f000 fc10 	bl	8005d72 <SDMMC_CmdAppCommand>
 8005552:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <SD_FindSCR+0x56>
  {
    return errorstate;
 800555a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555c:	e0a3      	b.n	80056a6 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800555e:	f04f 33ff 	mov.w	r3, #4294967295
 8005562:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005564:	2308      	movs	r3, #8
 8005566:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005568:	2330      	movs	r3, #48	; 0x30
 800556a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800556c:	2302      	movs	r3, #2
 800556e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005570:	2300      	movs	r3, #0
 8005572:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005574:	2301      	movs	r3, #1
 8005576:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f107 0210 	add.w	r2, r7, #16
 8005580:	4611      	mov	r1, r2
 8005582:	4618      	mov	r0, r3
 8005584:	f000 fb47 	bl	8005c16 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4618      	mov	r0, r3
 800558e:	f000 fc57 	bl	8005e40 <SDMMC_CmdSendSCR>
 8005592:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005596:	2b00      	cmp	r3, #0
 8005598:	d02a      	beq.n	80055f0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800559a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559c:	e083      	b.n	80056a6 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00f      	beq.n	80055cc <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6819      	ldr	r1, [r3, #0]
 80055b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	f107 0208 	add.w	r2, r7, #8
 80055b8:	18d4      	adds	r4, r2, r3
 80055ba:	4608      	mov	r0, r1
 80055bc:	f000 fab7 	bl	8005b2e <SDIO_ReadFIFO>
 80055c0:	4603      	mov	r3, r0
 80055c2:	6023      	str	r3, [r4, #0]
      index++;
 80055c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c6:	3301      	adds	r3, #1
 80055c8:	637b      	str	r3, [r7, #52]	; 0x34
 80055ca:	e006      	b.n	80055da <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d012      	beq.n	8005600 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80055da:	f7fa ffdf 	bl	800059c <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e8:	d102      	bne.n	80055f0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80055ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80055ee:	e05a      	b.n	80056a6 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0cf      	beq.n	800559e <SD_FindSCR+0x96>
 80055fe:	e000      	b.n	8005602 <SD_FindSCR+0xfa>
      break;
 8005600:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005608:	f003 0308 	and.w	r3, r3, #8
 800560c:	2b00      	cmp	r3, #0
 800560e:	d005      	beq.n	800561c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2208      	movs	r2, #8
 8005616:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005618:	2308      	movs	r3, #8
 800561a:	e044      	b.n	80056a6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d005      	beq.n	8005636 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2202      	movs	r2, #2
 8005630:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005632:	2302      	movs	r3, #2
 8005634:	e037      	b.n	80056a6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800563c:	f003 0320 	and.w	r3, r3, #32
 8005640:	2b00      	cmp	r3, #0
 8005642:	d005      	beq.n	8005650 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2220      	movs	r2, #32
 800564a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800564c:	2320      	movs	r3, #32
 800564e:	e02a      	b.n	80056a6 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f240 523a 	movw	r2, #1338	; 0x53a
 8005658:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	061a      	lsls	r2, r3, #24
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	021b      	lsls	r3, r3, #8
 8005662:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005666:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	0a1b      	lsrs	r3, r3, #8
 800566c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005670:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	0e1b      	lsrs	r3, r3, #24
 8005676:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567a:	601a      	str	r2, [r3, #0]
    scr++;
 800567c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567e:	3304      	adds	r3, #4
 8005680:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	061a      	lsls	r2, r3, #24
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	021b      	lsls	r3, r3, #8
 800568a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800568e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	0a1b      	lsrs	r3, r3, #8
 8005694:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005698:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	0e1b      	lsrs	r3, r3, #24
 800569e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80056a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a2:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	373c      	adds	r7, #60	; 0x3c
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd90      	pop	{r4, r7, pc}

080056ae <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b082      	sub	sp, #8
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e03f      	b.n	8005740 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d106      	bne.n	80056da <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f004 fa5f 	bl	8009b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2224      	movs	r2, #36	; 0x24
 80056de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68da      	ldr	r2, [r3, #12]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056f0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f828 	bl	8005748 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	691a      	ldr	r2, [r3, #16]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005706:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	695a      	ldr	r2, [r3, #20]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005716:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68da      	ldr	r2, [r3, #12]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005726:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2220      	movs	r2, #32
 8005732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2220      	movs	r2, #32
 800573a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800574c:	b09f      	sub	sp, #124	; 0x7c
 800574e:	af00      	add	r7, sp, #0
 8005750:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800575c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800575e:	68d9      	ldr	r1, [r3, #12]
 8005760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	ea40 0301 	orr.w	r3, r0, r1
 8005768:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800576a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800576c:	689a      	ldr	r2, [r3, #8]
 800576e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	431a      	orrs	r2, r3
 8005774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	431a      	orrs	r2, r3
 800577a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	4313      	orrs	r3, r2
 8005780:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800578c:	f021 010c 	bic.w	r1, r1, #12
 8005790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005796:	430b      	orrs	r3, r1
 8005798:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800579a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80057a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a6:	6999      	ldr	r1, [r3, #24]
 80057a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	ea40 0301 	orr.w	r3, r0, r1
 80057b0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	4bc5      	ldr	r3, [pc, #788]	; (8005acc <UART_SetConfig+0x384>)
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d004      	beq.n	80057c6 <UART_SetConfig+0x7e>
 80057bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	4bc3      	ldr	r3, [pc, #780]	; (8005ad0 <UART_SetConfig+0x388>)
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d103      	bne.n	80057ce <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057c6:	f7fe ffbd 	bl	8004744 <HAL_RCC_GetPCLK2Freq>
 80057ca:	6778      	str	r0, [r7, #116]	; 0x74
 80057cc:	e002      	b.n	80057d4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057ce:	f7fe ffa5 	bl	800471c <HAL_RCC_GetPCLK1Freq>
 80057d2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057dc:	f040 80b6 	bne.w	800594c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057e2:	461c      	mov	r4, r3
 80057e4:	f04f 0500 	mov.w	r5, #0
 80057e8:	4622      	mov	r2, r4
 80057ea:	462b      	mov	r3, r5
 80057ec:	1891      	adds	r1, r2, r2
 80057ee:	6439      	str	r1, [r7, #64]	; 0x40
 80057f0:	415b      	adcs	r3, r3
 80057f2:	647b      	str	r3, [r7, #68]	; 0x44
 80057f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057f8:	1912      	adds	r2, r2, r4
 80057fa:	eb45 0303 	adc.w	r3, r5, r3
 80057fe:	f04f 0000 	mov.w	r0, #0
 8005802:	f04f 0100 	mov.w	r1, #0
 8005806:	00d9      	lsls	r1, r3, #3
 8005808:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800580c:	00d0      	lsls	r0, r2, #3
 800580e:	4602      	mov	r2, r0
 8005810:	460b      	mov	r3, r1
 8005812:	1911      	adds	r1, r2, r4
 8005814:	6639      	str	r1, [r7, #96]	; 0x60
 8005816:	416b      	adcs	r3, r5
 8005818:	667b      	str	r3, [r7, #100]	; 0x64
 800581a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	461a      	mov	r2, r3
 8005820:	f04f 0300 	mov.w	r3, #0
 8005824:	1891      	adds	r1, r2, r2
 8005826:	63b9      	str	r1, [r7, #56]	; 0x38
 8005828:	415b      	adcs	r3, r3
 800582a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800582c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005830:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005834:	f7fa fcd0 	bl	80001d8 <__aeabi_uldivmod>
 8005838:	4602      	mov	r2, r0
 800583a:	460b      	mov	r3, r1
 800583c:	4ba5      	ldr	r3, [pc, #660]	; (8005ad4 <UART_SetConfig+0x38c>)
 800583e:	fba3 2302 	umull	r2, r3, r3, r2
 8005842:	095b      	lsrs	r3, r3, #5
 8005844:	011e      	lsls	r6, r3, #4
 8005846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005848:	461c      	mov	r4, r3
 800584a:	f04f 0500 	mov.w	r5, #0
 800584e:	4622      	mov	r2, r4
 8005850:	462b      	mov	r3, r5
 8005852:	1891      	adds	r1, r2, r2
 8005854:	6339      	str	r1, [r7, #48]	; 0x30
 8005856:	415b      	adcs	r3, r3
 8005858:	637b      	str	r3, [r7, #52]	; 0x34
 800585a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800585e:	1912      	adds	r2, r2, r4
 8005860:	eb45 0303 	adc.w	r3, r5, r3
 8005864:	f04f 0000 	mov.w	r0, #0
 8005868:	f04f 0100 	mov.w	r1, #0
 800586c:	00d9      	lsls	r1, r3, #3
 800586e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005872:	00d0      	lsls	r0, r2, #3
 8005874:	4602      	mov	r2, r0
 8005876:	460b      	mov	r3, r1
 8005878:	1911      	adds	r1, r2, r4
 800587a:	65b9      	str	r1, [r7, #88]	; 0x58
 800587c:	416b      	adcs	r3, r5
 800587e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	461a      	mov	r2, r3
 8005886:	f04f 0300 	mov.w	r3, #0
 800588a:	1891      	adds	r1, r2, r2
 800588c:	62b9      	str	r1, [r7, #40]	; 0x28
 800588e:	415b      	adcs	r3, r3
 8005890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005892:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005896:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800589a:	f7fa fc9d 	bl	80001d8 <__aeabi_uldivmod>
 800589e:	4602      	mov	r2, r0
 80058a0:	460b      	mov	r3, r1
 80058a2:	4b8c      	ldr	r3, [pc, #560]	; (8005ad4 <UART_SetConfig+0x38c>)
 80058a4:	fba3 1302 	umull	r1, r3, r3, r2
 80058a8:	095b      	lsrs	r3, r3, #5
 80058aa:	2164      	movs	r1, #100	; 0x64
 80058ac:	fb01 f303 	mul.w	r3, r1, r3
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	3332      	adds	r3, #50	; 0x32
 80058b6:	4a87      	ldr	r2, [pc, #540]	; (8005ad4 <UART_SetConfig+0x38c>)
 80058b8:	fba2 2303 	umull	r2, r3, r2, r3
 80058bc:	095b      	lsrs	r3, r3, #5
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058c4:	441e      	add	r6, r3
 80058c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058c8:	4618      	mov	r0, r3
 80058ca:	f04f 0100 	mov.w	r1, #0
 80058ce:	4602      	mov	r2, r0
 80058d0:	460b      	mov	r3, r1
 80058d2:	1894      	adds	r4, r2, r2
 80058d4:	623c      	str	r4, [r7, #32]
 80058d6:	415b      	adcs	r3, r3
 80058d8:	627b      	str	r3, [r7, #36]	; 0x24
 80058da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058de:	1812      	adds	r2, r2, r0
 80058e0:	eb41 0303 	adc.w	r3, r1, r3
 80058e4:	f04f 0400 	mov.w	r4, #0
 80058e8:	f04f 0500 	mov.w	r5, #0
 80058ec:	00dd      	lsls	r5, r3, #3
 80058ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80058f2:	00d4      	lsls	r4, r2, #3
 80058f4:	4622      	mov	r2, r4
 80058f6:	462b      	mov	r3, r5
 80058f8:	1814      	adds	r4, r2, r0
 80058fa:	653c      	str	r4, [r7, #80]	; 0x50
 80058fc:	414b      	adcs	r3, r1
 80058fe:	657b      	str	r3, [r7, #84]	; 0x54
 8005900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	461a      	mov	r2, r3
 8005906:	f04f 0300 	mov.w	r3, #0
 800590a:	1891      	adds	r1, r2, r2
 800590c:	61b9      	str	r1, [r7, #24]
 800590e:	415b      	adcs	r3, r3
 8005910:	61fb      	str	r3, [r7, #28]
 8005912:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005916:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800591a:	f7fa fc5d 	bl	80001d8 <__aeabi_uldivmod>
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	4b6c      	ldr	r3, [pc, #432]	; (8005ad4 <UART_SetConfig+0x38c>)
 8005924:	fba3 1302 	umull	r1, r3, r3, r2
 8005928:	095b      	lsrs	r3, r3, #5
 800592a:	2164      	movs	r1, #100	; 0x64
 800592c:	fb01 f303 	mul.w	r3, r1, r3
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	3332      	adds	r3, #50	; 0x32
 8005936:	4a67      	ldr	r2, [pc, #412]	; (8005ad4 <UART_SetConfig+0x38c>)
 8005938:	fba2 2303 	umull	r2, r3, r2, r3
 800593c:	095b      	lsrs	r3, r3, #5
 800593e:	f003 0207 	and.w	r2, r3, #7
 8005942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4432      	add	r2, r6
 8005948:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800594a:	e0b9      	b.n	8005ac0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800594c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800594e:	461c      	mov	r4, r3
 8005950:	f04f 0500 	mov.w	r5, #0
 8005954:	4622      	mov	r2, r4
 8005956:	462b      	mov	r3, r5
 8005958:	1891      	adds	r1, r2, r2
 800595a:	6139      	str	r1, [r7, #16]
 800595c:	415b      	adcs	r3, r3
 800595e:	617b      	str	r3, [r7, #20]
 8005960:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005964:	1912      	adds	r2, r2, r4
 8005966:	eb45 0303 	adc.w	r3, r5, r3
 800596a:	f04f 0000 	mov.w	r0, #0
 800596e:	f04f 0100 	mov.w	r1, #0
 8005972:	00d9      	lsls	r1, r3, #3
 8005974:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005978:	00d0      	lsls	r0, r2, #3
 800597a:	4602      	mov	r2, r0
 800597c:	460b      	mov	r3, r1
 800597e:	eb12 0804 	adds.w	r8, r2, r4
 8005982:	eb43 0905 	adc.w	r9, r3, r5
 8005986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	4618      	mov	r0, r3
 800598c:	f04f 0100 	mov.w	r1, #0
 8005990:	f04f 0200 	mov.w	r2, #0
 8005994:	f04f 0300 	mov.w	r3, #0
 8005998:	008b      	lsls	r3, r1, #2
 800599a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800599e:	0082      	lsls	r2, r0, #2
 80059a0:	4640      	mov	r0, r8
 80059a2:	4649      	mov	r1, r9
 80059a4:	f7fa fc18 	bl	80001d8 <__aeabi_uldivmod>
 80059a8:	4602      	mov	r2, r0
 80059aa:	460b      	mov	r3, r1
 80059ac:	4b49      	ldr	r3, [pc, #292]	; (8005ad4 <UART_SetConfig+0x38c>)
 80059ae:	fba3 2302 	umull	r2, r3, r3, r2
 80059b2:	095b      	lsrs	r3, r3, #5
 80059b4:	011e      	lsls	r6, r3, #4
 80059b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059b8:	4618      	mov	r0, r3
 80059ba:	f04f 0100 	mov.w	r1, #0
 80059be:	4602      	mov	r2, r0
 80059c0:	460b      	mov	r3, r1
 80059c2:	1894      	adds	r4, r2, r2
 80059c4:	60bc      	str	r4, [r7, #8]
 80059c6:	415b      	adcs	r3, r3
 80059c8:	60fb      	str	r3, [r7, #12]
 80059ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059ce:	1812      	adds	r2, r2, r0
 80059d0:	eb41 0303 	adc.w	r3, r1, r3
 80059d4:	f04f 0400 	mov.w	r4, #0
 80059d8:	f04f 0500 	mov.w	r5, #0
 80059dc:	00dd      	lsls	r5, r3, #3
 80059de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059e2:	00d4      	lsls	r4, r2, #3
 80059e4:	4622      	mov	r2, r4
 80059e6:	462b      	mov	r3, r5
 80059e8:	1814      	adds	r4, r2, r0
 80059ea:	64bc      	str	r4, [r7, #72]	; 0x48
 80059ec:	414b      	adcs	r3, r1
 80059ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	4618      	mov	r0, r3
 80059f6:	f04f 0100 	mov.w	r1, #0
 80059fa:	f04f 0200 	mov.w	r2, #0
 80059fe:	f04f 0300 	mov.w	r3, #0
 8005a02:	008b      	lsls	r3, r1, #2
 8005a04:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a08:	0082      	lsls	r2, r0, #2
 8005a0a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005a0e:	f7fa fbe3 	bl	80001d8 <__aeabi_uldivmod>
 8005a12:	4602      	mov	r2, r0
 8005a14:	460b      	mov	r3, r1
 8005a16:	4b2f      	ldr	r3, [pc, #188]	; (8005ad4 <UART_SetConfig+0x38c>)
 8005a18:	fba3 1302 	umull	r1, r3, r3, r2
 8005a1c:	095b      	lsrs	r3, r3, #5
 8005a1e:	2164      	movs	r1, #100	; 0x64
 8005a20:	fb01 f303 	mul.w	r3, r1, r3
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	011b      	lsls	r3, r3, #4
 8005a28:	3332      	adds	r3, #50	; 0x32
 8005a2a:	4a2a      	ldr	r2, [pc, #168]	; (8005ad4 <UART_SetConfig+0x38c>)
 8005a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a30:	095b      	lsrs	r3, r3, #5
 8005a32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a36:	441e      	add	r6, r3
 8005a38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f04f 0100 	mov.w	r1, #0
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	1894      	adds	r4, r2, r2
 8005a46:	603c      	str	r4, [r7, #0]
 8005a48:	415b      	adcs	r3, r3
 8005a4a:	607b      	str	r3, [r7, #4]
 8005a4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a50:	1812      	adds	r2, r2, r0
 8005a52:	eb41 0303 	adc.w	r3, r1, r3
 8005a56:	f04f 0400 	mov.w	r4, #0
 8005a5a:	f04f 0500 	mov.w	r5, #0
 8005a5e:	00dd      	lsls	r5, r3, #3
 8005a60:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a64:	00d4      	lsls	r4, r2, #3
 8005a66:	4622      	mov	r2, r4
 8005a68:	462b      	mov	r3, r5
 8005a6a:	eb12 0a00 	adds.w	sl, r2, r0
 8005a6e:	eb43 0b01 	adc.w	fp, r3, r1
 8005a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f04f 0100 	mov.w	r1, #0
 8005a7c:	f04f 0200 	mov.w	r2, #0
 8005a80:	f04f 0300 	mov.w	r3, #0
 8005a84:	008b      	lsls	r3, r1, #2
 8005a86:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a8a:	0082      	lsls	r2, r0, #2
 8005a8c:	4650      	mov	r0, sl
 8005a8e:	4659      	mov	r1, fp
 8005a90:	f7fa fba2 	bl	80001d8 <__aeabi_uldivmod>
 8005a94:	4602      	mov	r2, r0
 8005a96:	460b      	mov	r3, r1
 8005a98:	4b0e      	ldr	r3, [pc, #56]	; (8005ad4 <UART_SetConfig+0x38c>)
 8005a9a:	fba3 1302 	umull	r1, r3, r3, r2
 8005a9e:	095b      	lsrs	r3, r3, #5
 8005aa0:	2164      	movs	r1, #100	; 0x64
 8005aa2:	fb01 f303 	mul.w	r3, r1, r3
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	011b      	lsls	r3, r3, #4
 8005aaa:	3332      	adds	r3, #50	; 0x32
 8005aac:	4a09      	ldr	r2, [pc, #36]	; (8005ad4 <UART_SetConfig+0x38c>)
 8005aae:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab2:	095b      	lsrs	r3, r3, #5
 8005ab4:	f003 020f 	and.w	r2, r3, #15
 8005ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4432      	add	r2, r6
 8005abe:	609a      	str	r2, [r3, #8]
}
 8005ac0:	bf00      	nop
 8005ac2:	377c      	adds	r7, #124	; 0x7c
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aca:	bf00      	nop
 8005acc:	40011000 	.word	0x40011000
 8005ad0:	40011400 	.word	0x40011400
 8005ad4:	51eb851f 	.word	0x51eb851f

08005ad8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005ad8:	b084      	sub	sp, #16
 8005ada:	b480      	push	{r7}
 8005adc:	b085      	sub	sp, #20
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
 8005ae2:	f107 001c 	add.w	r0, r7, #28
 8005ae6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005aea:	2300      	movs	r3, #0
 8005aec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005aee:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005af0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005af2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005af6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005afa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005afe:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005b02:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005b12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3714      	adds	r7, #20
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	b004      	add	sp, #16
 8005b2c:	4770      	bx	lr

08005b2e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b083      	sub	sp, #12
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2203      	movs	r2, #3
 8005b54:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8005b56:	2002      	movs	r0, #2
 8005b58:	f7fa fd2c 	bl	80005b4 <HAL_Delay>
  
  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005b66:	b480      	push	{r7}
 8005b68:	b083      	sub	sp, #12
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0303 	and.w	r3, r3, #3
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b085      	sub	sp, #20
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
 8005b8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005ba0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005ba6:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005bac:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005bbc:	f023 030f 	bic.w	r3, r3, #15
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b083      	sub	sp, #12
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	b2db      	uxtb	r3, r3
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	3314      	adds	r3, #20
 8005bfe:	461a      	mov	r2, r3
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	4413      	add	r3, r2
 8005c04:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
}  
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr

08005c16 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005c16:	b480      	push	{r7}
 8005c18:	b085      	sub	sp, #20
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
 8005c1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005c20:	2300      	movs	r3, #0
 8005c22:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005c3c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005c42:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005c48:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c54:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0

}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b088      	sub	sp, #32
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
 8005c76:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005c7c:	2310      	movs	r3, #16
 8005c7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005c80:	2340      	movs	r3, #64	; 0x40
 8005c82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c84:	2300      	movs	r3, #0
 8005c86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c8c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c8e:	f107 0308 	add.w	r3, r7, #8
 8005c92:	4619      	mov	r1, r3
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f7ff ff74 	bl	8005b82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c9e:	2110      	movs	r1, #16
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 f979 	bl	8005f98 <SDMMC_GetCmdResp1>
 8005ca6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ca8:	69fb      	ldr	r3, [r7, #28]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3720      	adds	r7, #32
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b08a      	sub	sp, #40	; 0x28
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	60f8      	str	r0, [r7, #12]
 8005cba:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005cc2:	2307      	movs	r3, #7
 8005cc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005cc6:	2340      	movs	r3, #64	; 0x40
 8005cc8:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005cce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cd2:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005cd4:	f107 0310 	add.w	r3, r7, #16
 8005cd8:	4619      	mov	r1, r3
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f7ff ff51 	bl	8005b82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce4:	2107      	movs	r1, #7
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 f956 	bl	8005f98 <SDMMC_GetCmdResp1>
 8005cec:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3728      	adds	r7, #40	; 0x28
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b088      	sub	sp, #32
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005d00:	2300      	movs	r3, #0
 8005d02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005d04:	2300      	movs	r3, #0
 8005d06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d16:	f107 0308 	add.w	r3, r7, #8
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f7ff ff30 	bl	8005b82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f90c 	bl	8005f40 <SDMMC_GetCmdError>
 8005d28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d2a:	69fb      	ldr	r3, [r7, #28]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3720      	adds	r7, #32
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b088      	sub	sp, #32
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005d3c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005d40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005d42:	2308      	movs	r3, #8
 8005d44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d46:	2340      	movs	r3, #64	; 0x40
 8005d48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d52:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d54:	f107 0308 	add.w	r3, r7, #8
 8005d58:	4619      	mov	r1, r3
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7ff ff11 	bl	8005b82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 fb03 	bl	800636c <SDMMC_GetCmdResp7>
 8005d66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d68:	69fb      	ldr	r3, [r7, #28]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3720      	adds	r7, #32
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b088      	sub	sp, #32
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
 8005d7a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005d80:	2337      	movs	r3, #55	; 0x37
 8005d82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d84:	2340      	movs	r3, #64	; 0x40
 8005d86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d90:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d92:	f107 0308 	add.w	r3, r7, #8
 8005d96:	4619      	mov	r1, r3
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f7ff fef2 	bl	8005b82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da2:	2137      	movs	r1, #55	; 0x37
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 f8f7 	bl	8005f98 <SDMMC_GetCmdResp1>
 8005daa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005dac:	69fb      	ldr	r3, [r7, #28]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3720      	adds	r7, #32
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b088      	sub	sp, #32
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
 8005dbe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005dcc:	2329      	movs	r3, #41	; 0x29
 8005dce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005dd0:	2340      	movs	r3, #64	; 0x40
 8005dd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005dd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ddc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005dde:	f107 0308 	add.w	r3, r7, #8
 8005de2:	4619      	mov	r1, r3
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f7ff fecc 	bl	8005b82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 fa0a 	bl	8006204 <SDMMC_GetCmdResp3>
 8005df0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005df2:	69fb      	ldr	r3, [r7, #28]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3720      	adds	r7, #32
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b088      	sub	sp, #32
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005e0a:	2306      	movs	r3, #6
 8005e0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e0e:	2340      	movs	r3, #64	; 0x40
 8005e10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e12:	2300      	movs	r3, #0
 8005e14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e1c:	f107 0308 	add.w	r3, r7, #8
 8005e20:	4619      	mov	r1, r3
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7ff fead 	bl	8005b82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8005e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e2c:	2106      	movs	r1, #6
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f8b2 	bl	8005f98 <SDMMC_GetCmdResp1>
 8005e34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e36:	69fb      	ldr	r3, [r7, #28]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3720      	adds	r7, #32
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b088      	sub	sp, #32
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005e4c:	2333      	movs	r3, #51	; 0x33
 8005e4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e50:	2340      	movs	r3, #64	; 0x40
 8005e52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e54:	2300      	movs	r3, #0
 8005e56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e5e:	f107 0308 	add.w	r3, r7, #8
 8005e62:	4619      	mov	r1, r3
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f7ff fe8c 	bl	8005b82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e6e:	2133      	movs	r1, #51	; 0x33
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 f891 	bl	8005f98 <SDMMC_GetCmdResp1>
 8005e76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e78:	69fb      	ldr	r3, [r7, #28]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3720      	adds	r7, #32
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b088      	sub	sp, #32
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005e8e:	2302      	movs	r3, #2
 8005e90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005e92:	23c0      	movs	r3, #192	; 0xc0
 8005e94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e96:	2300      	movs	r3, #0
 8005e98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ea0:	f107 0308 	add.w	r3, r7, #8
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7ff fe6b 	bl	8005b82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f961 	bl	8006174 <SDMMC_GetCmdResp2>
 8005eb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005eb4:	69fb      	ldr	r3, [r7, #28]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3720      	adds	r7, #32
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b088      	sub	sp, #32
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005ecc:	2309      	movs	r3, #9
 8005ece:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005ed0:	23c0      	movs	r3, #192	; 0xc0
 8005ed2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005edc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ede:	f107 0308 	add.w	r3, r7, #8
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7ff fe4c 	bl	8005b82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f942 	bl	8006174 <SDMMC_GetCmdResp2>
 8005ef0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ef2:	69fb      	ldr	r3, [r7, #28]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3720      	adds	r7, #32
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b088      	sub	sp, #32
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005f06:	2300      	movs	r3, #0
 8005f08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f0e:	2340      	movs	r3, #64	; 0x40
 8005f10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f12:	2300      	movs	r3, #0
 8005f14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f1c:	f107 0308 	add.w	r3, r7, #8
 8005f20:	4619      	mov	r1, r3
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f7ff fe2d 	bl	8005b82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	2103      	movs	r1, #3
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 f9a7 	bl	8006280 <SDMMC_GetCmdResp6>
 8005f32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f34:	69fb      	ldr	r3, [r7, #28]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3720      	adds	r7, #32
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
	...

08005f40 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005f48:	4b11      	ldr	r3, [pc, #68]	; (8005f90 <SDMMC_GetCmdError+0x50>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a11      	ldr	r2, [pc, #68]	; (8005f94 <SDMMC_GetCmdError+0x54>)
 8005f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f52:	0a5b      	lsrs	r3, r3, #9
 8005f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f58:	fb02 f303 	mul.w	r3, r2, r3
 8005f5c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	1e5a      	subs	r2, r3, #1
 8005f62:	60fa      	str	r2, [r7, #12]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d102      	bne.n	8005f6e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005f68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005f6c:	e009      	b.n	8005f82 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d0f1      	beq.n	8005f5e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	22c5      	movs	r2, #197	; 0xc5
 8005f7e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3714      	adds	r7, #20
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	20000118 	.word	0x20000118
 8005f94:	10624dd3 	.word	0x10624dd3

08005f98 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b088      	sub	sp, #32
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	607a      	str	r2, [r7, #4]
 8005fa4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005fa6:	4b70      	ldr	r3, [pc, #448]	; (8006168 <SDMMC_GetCmdResp1+0x1d0>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a70      	ldr	r2, [pc, #448]	; (800616c <SDMMC_GetCmdResp1+0x1d4>)
 8005fac:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb0:	0a5a      	lsrs	r2, r3, #9
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	fb02 f303 	mul.w	r3, r2, r3
 8005fb8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	1e5a      	subs	r2, r3, #1
 8005fbe:	61fa      	str	r2, [r7, #28]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d102      	bne.n	8005fca <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005fc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005fc8:	e0c9      	b.n	800615e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fce:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d0ef      	beq.n	8005fba <SDMMC_GetCmdResp1+0x22>
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1ea      	bne.n	8005fba <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe8:	f003 0304 	and.w	r3, r3, #4
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d004      	beq.n	8005ffa <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2204      	movs	r2, #4
 8005ff4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005ff6:	2304      	movs	r3, #4
 8005ff8:	e0b1      	b.n	800615e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b00      	cmp	r3, #0
 8006004:	d004      	beq.n	8006010 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2201      	movs	r2, #1
 800600a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800600c:	2301      	movs	r3, #1
 800600e:	e0a6      	b.n	800615e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	22c5      	movs	r2, #197	; 0xc5
 8006014:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f7ff fddd 	bl	8005bd6 <SDIO_GetCommandResponse>
 800601c:	4603      	mov	r3, r0
 800601e:	461a      	mov	r2, r3
 8006020:	7afb      	ldrb	r3, [r7, #11]
 8006022:	4293      	cmp	r3, r2
 8006024:	d001      	beq.n	800602a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006026:	2301      	movs	r3, #1
 8006028:	e099      	b.n	800615e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800602a:	2100      	movs	r1, #0
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f7ff fddf 	bl	8005bf0 <SDIO_GetResponse>
 8006032:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	4b4e      	ldr	r3, [pc, #312]	; (8006170 <SDMMC_GetCmdResp1+0x1d8>)
 8006038:	4013      	ands	r3, r2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800603e:	2300      	movs	r3, #0
 8006040:	e08d      	b.n	800615e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	2b00      	cmp	r3, #0
 8006046:	da02      	bge.n	800604e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006048:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800604c:	e087      	b.n	800615e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d001      	beq.n	800605c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006058:	2340      	movs	r3, #64	; 0x40
 800605a:	e080      	b.n	800615e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006066:	2380      	movs	r3, #128	; 0x80
 8006068:	e079      	b.n	800615e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d002      	beq.n	800607a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006074:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006078:	e071      	b.n	800615e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006080:	2b00      	cmp	r3, #0
 8006082:	d002      	beq.n	800608a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006084:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006088:	e069      	b.n	800615e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d002      	beq.n	800609a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006094:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006098:	e061      	b.n	800615e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d002      	beq.n	80060aa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80060a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80060a8:	e059      	b.n	800615e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d002      	beq.n	80060ba <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80060b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060b8:	e051      	b.n	800615e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d002      	beq.n	80060ca <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80060c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80060c8:	e049      	b.n	800615e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d002      	beq.n	80060da <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80060d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80060d8:	e041      	b.n	800615e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80060e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060e8:	e039      	b.n	800615e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d002      	beq.n	80060fa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80060f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060f8:	e031      	b.n	800615e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d002      	beq.n	800610a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006104:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006108:	e029      	b.n	800615e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006114:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006118:	e021      	b.n	800615e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d002      	beq.n	800612a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006124:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006128:	e019      	b.n	800615e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d002      	beq.n	800613a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006134:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006138:	e011      	b.n	800615e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d002      	beq.n	800614a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006144:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006148:	e009      	b.n	800615e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f003 0308 	and.w	r3, r3, #8
 8006150:	2b00      	cmp	r3, #0
 8006152:	d002      	beq.n	800615a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006154:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006158:	e001      	b.n	800615e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800615a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800615e:	4618      	mov	r0, r3
 8006160:	3720      	adds	r7, #32
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	20000118 	.word	0x20000118
 800616c:	10624dd3 	.word	0x10624dd3
 8006170:	fdffe008 	.word	0xfdffe008

08006174 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800617c:	4b1f      	ldr	r3, [pc, #124]	; (80061fc <SDMMC_GetCmdResp2+0x88>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a1f      	ldr	r2, [pc, #124]	; (8006200 <SDMMC_GetCmdResp2+0x8c>)
 8006182:	fba2 2303 	umull	r2, r3, r2, r3
 8006186:	0a5b      	lsrs	r3, r3, #9
 8006188:	f241 3288 	movw	r2, #5000	; 0x1388
 800618c:	fb02 f303 	mul.w	r3, r2, r3
 8006190:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	1e5a      	subs	r2, r3, #1
 8006196:	60fa      	str	r2, [r7, #12]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d102      	bne.n	80061a2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800619c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80061a0:	e026      	b.n	80061f0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d0ef      	beq.n	8006192 <SDMMC_GetCmdResp2+0x1e>
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1ea      	bne.n	8006192 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c0:	f003 0304 	and.w	r3, r3, #4
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d004      	beq.n	80061d2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2204      	movs	r2, #4
 80061cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80061ce:	2304      	movs	r3, #4
 80061d0:	e00e      	b.n	80061f0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d004      	beq.n	80061e8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e003      	b.n	80061f0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	22c5      	movs	r2, #197	; 0xc5
 80061ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	20000118 	.word	0x20000118
 8006200:	10624dd3 	.word	0x10624dd3

08006204 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800620c:	4b1a      	ldr	r3, [pc, #104]	; (8006278 <SDMMC_GetCmdResp3+0x74>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a1a      	ldr	r2, [pc, #104]	; (800627c <SDMMC_GetCmdResp3+0x78>)
 8006212:	fba2 2303 	umull	r2, r3, r2, r3
 8006216:	0a5b      	lsrs	r3, r3, #9
 8006218:	f241 3288 	movw	r2, #5000	; 0x1388
 800621c:	fb02 f303 	mul.w	r3, r2, r3
 8006220:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	1e5a      	subs	r2, r3, #1
 8006226:	60fa      	str	r2, [r7, #12]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d102      	bne.n	8006232 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800622c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006230:	e01b      	b.n	800626a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006236:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800623e:	2b00      	cmp	r3, #0
 8006240:	d0ef      	beq.n	8006222 <SDMMC_GetCmdResp3+0x1e>
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1ea      	bne.n	8006222 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006250:	f003 0304 	and.w	r3, r3, #4
 8006254:	2b00      	cmp	r3, #0
 8006256:	d004      	beq.n	8006262 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2204      	movs	r2, #4
 800625c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800625e:	2304      	movs	r3, #4
 8006260:	e003      	b.n	800626a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	22c5      	movs	r2, #197	; 0xc5
 8006266:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	20000118 	.word	0x20000118
 800627c:	10624dd3 	.word	0x10624dd3

08006280 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b088      	sub	sp, #32
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	460b      	mov	r3, r1
 800628a:	607a      	str	r2, [r7, #4]
 800628c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800628e:	4b35      	ldr	r3, [pc, #212]	; (8006364 <SDMMC_GetCmdResp6+0xe4>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a35      	ldr	r2, [pc, #212]	; (8006368 <SDMMC_GetCmdResp6+0xe8>)
 8006294:	fba2 2303 	umull	r2, r3, r2, r3
 8006298:	0a5b      	lsrs	r3, r3, #9
 800629a:	f241 3288 	movw	r2, #5000	; 0x1388
 800629e:	fb02 f303 	mul.w	r3, r2, r3
 80062a2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	1e5a      	subs	r2, r3, #1
 80062a8:	61fa      	str	r2, [r7, #28]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d102      	bne.n	80062b4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80062ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80062b2:	e052      	b.n	800635a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d0ef      	beq.n	80062a4 <SDMMC_GetCmdResp6+0x24>
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1ea      	bne.n	80062a4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d2:	f003 0304 	and.w	r3, r3, #4
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d004      	beq.n	80062e4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2204      	movs	r2, #4
 80062de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80062e0:	2304      	movs	r3, #4
 80062e2:	e03a      	b.n	800635a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d004      	beq.n	80062fa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2201      	movs	r2, #1
 80062f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e02f      	b.n	800635a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f7ff fc6b 	bl	8005bd6 <SDIO_GetCommandResponse>
 8006300:	4603      	mov	r3, r0
 8006302:	461a      	mov	r2, r3
 8006304:	7afb      	ldrb	r3, [r7, #11]
 8006306:	4293      	cmp	r3, r2
 8006308:	d001      	beq.n	800630e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800630a:	2301      	movs	r3, #1
 800630c:	e025      	b.n	800635a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	22c5      	movs	r2, #197	; 0xc5
 8006312:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006314:	2100      	movs	r1, #0
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f7ff fc6a 	bl	8005bf0 <SDIO_GetResponse>
 800631c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d106      	bne.n	8006336 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	0c1b      	lsrs	r3, r3, #16
 800632c:	b29a      	uxth	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006332:	2300      	movs	r3, #0
 8006334:	e011      	b.n	800635a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d002      	beq.n	8006346 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006340:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006344:	e009      	b.n	800635a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d002      	beq.n	8006356 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006354:	e001      	b.n	800635a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006356:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800635a:	4618      	mov	r0, r3
 800635c:	3720      	adds	r7, #32
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	20000118 	.word	0x20000118
 8006368:	10624dd3 	.word	0x10624dd3

0800636c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006374:	4b22      	ldr	r3, [pc, #136]	; (8006400 <SDMMC_GetCmdResp7+0x94>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a22      	ldr	r2, [pc, #136]	; (8006404 <SDMMC_GetCmdResp7+0x98>)
 800637a:	fba2 2303 	umull	r2, r3, r2, r3
 800637e:	0a5b      	lsrs	r3, r3, #9
 8006380:	f241 3288 	movw	r2, #5000	; 0x1388
 8006384:	fb02 f303 	mul.w	r3, r2, r3
 8006388:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	1e5a      	subs	r2, r3, #1
 800638e:	60fa      	str	r2, [r7, #12]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d102      	bne.n	800639a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006394:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006398:	e02c      	b.n	80063f4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800639e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d0ef      	beq.n	800638a <SDMMC_GetCmdResp7+0x1e>
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1ea      	bne.n	800638a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b8:	f003 0304 	and.w	r3, r3, #4
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d004      	beq.n	80063ca <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2204      	movs	r2, #4
 80063c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80063c6:	2304      	movs	r3, #4
 80063c8:	e014      	b.n	80063f4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d004      	beq.n	80063e0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80063dc:	2301      	movs	r3, #1
 80063de:	e009      	b.n	80063f4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d002      	beq.n	80063f2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2240      	movs	r2, #64	; 0x40
 80063f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80063f2:	2300      	movs	r3, #0
  
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3714      	adds	r7, #20
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr
 8006400:	20000118 	.word	0x20000118
 8006404:	10624dd3 	.word	0x10624dd3

08006408 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006408:	b084      	sub	sp, #16
 800640a:	b580      	push	{r7, lr}
 800640c:	b084      	sub	sp, #16
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	f107 001c 	add.w	r0, r7, #28
 8006416:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800641a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641c:	2b01      	cmp	r3, #1
 800641e:	d122      	bne.n	8006466 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006424:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800644a:	2b01      	cmp	r3, #1
 800644c:	d105      	bne.n	800645a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f001 fb1c 	bl	8007a98 <USB_CoreReset>
 8006460:	4603      	mov	r3, r0
 8006462:	73fb      	strb	r3, [r7, #15]
 8006464:	e01a      	b.n	800649c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f001 fb10 	bl	8007a98 <USB_CoreReset>
 8006478:	4603      	mov	r3, r0
 800647a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800647c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800647e:	2b00      	cmp	r3, #0
 8006480:	d106      	bne.n	8006490 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006486:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	639a      	str	r2, [r3, #56]	; 0x38
 800648e:	e005      	b.n	800649c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006494:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800649c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d10b      	bne.n	80064ba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f043 0206 	orr.w	r2, r3, #6
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f043 0220 	orr.w	r2, r3, #32
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064c6:	b004      	add	sp, #16
 80064c8:	4770      	bx	lr
	...

080064cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	4613      	mov	r3, r2
 80064d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80064da:	79fb      	ldrb	r3, [r7, #7]
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d165      	bne.n	80065ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	4a41      	ldr	r2, [pc, #260]	; (80065e8 <USB_SetTurnaroundTime+0x11c>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d906      	bls.n	80064f6 <USB_SetTurnaroundTime+0x2a>
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	4a40      	ldr	r2, [pc, #256]	; (80065ec <USB_SetTurnaroundTime+0x120>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d202      	bcs.n	80064f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80064f0:	230f      	movs	r3, #15
 80064f2:	617b      	str	r3, [r7, #20]
 80064f4:	e062      	b.n	80065bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	4a3c      	ldr	r2, [pc, #240]	; (80065ec <USB_SetTurnaroundTime+0x120>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d306      	bcc.n	800650c <USB_SetTurnaroundTime+0x40>
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	4a3b      	ldr	r2, [pc, #236]	; (80065f0 <USB_SetTurnaroundTime+0x124>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d202      	bcs.n	800650c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006506:	230e      	movs	r3, #14
 8006508:	617b      	str	r3, [r7, #20]
 800650a:	e057      	b.n	80065bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	4a38      	ldr	r2, [pc, #224]	; (80065f0 <USB_SetTurnaroundTime+0x124>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d306      	bcc.n	8006522 <USB_SetTurnaroundTime+0x56>
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	4a37      	ldr	r2, [pc, #220]	; (80065f4 <USB_SetTurnaroundTime+0x128>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d202      	bcs.n	8006522 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800651c:	230d      	movs	r3, #13
 800651e:	617b      	str	r3, [r7, #20]
 8006520:	e04c      	b.n	80065bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	4a33      	ldr	r2, [pc, #204]	; (80065f4 <USB_SetTurnaroundTime+0x128>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d306      	bcc.n	8006538 <USB_SetTurnaroundTime+0x6c>
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	4a32      	ldr	r2, [pc, #200]	; (80065f8 <USB_SetTurnaroundTime+0x12c>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d802      	bhi.n	8006538 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006532:	230c      	movs	r3, #12
 8006534:	617b      	str	r3, [r7, #20]
 8006536:	e041      	b.n	80065bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	4a2f      	ldr	r2, [pc, #188]	; (80065f8 <USB_SetTurnaroundTime+0x12c>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d906      	bls.n	800654e <USB_SetTurnaroundTime+0x82>
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	4a2e      	ldr	r2, [pc, #184]	; (80065fc <USB_SetTurnaroundTime+0x130>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d802      	bhi.n	800654e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006548:	230b      	movs	r3, #11
 800654a:	617b      	str	r3, [r7, #20]
 800654c:	e036      	b.n	80065bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	4a2a      	ldr	r2, [pc, #168]	; (80065fc <USB_SetTurnaroundTime+0x130>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d906      	bls.n	8006564 <USB_SetTurnaroundTime+0x98>
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	4a29      	ldr	r2, [pc, #164]	; (8006600 <USB_SetTurnaroundTime+0x134>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d802      	bhi.n	8006564 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800655e:	230a      	movs	r3, #10
 8006560:	617b      	str	r3, [r7, #20]
 8006562:	e02b      	b.n	80065bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	4a26      	ldr	r2, [pc, #152]	; (8006600 <USB_SetTurnaroundTime+0x134>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d906      	bls.n	800657a <USB_SetTurnaroundTime+0xae>
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	4a25      	ldr	r2, [pc, #148]	; (8006604 <USB_SetTurnaroundTime+0x138>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d202      	bcs.n	800657a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006574:	2309      	movs	r3, #9
 8006576:	617b      	str	r3, [r7, #20]
 8006578:	e020      	b.n	80065bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	4a21      	ldr	r2, [pc, #132]	; (8006604 <USB_SetTurnaroundTime+0x138>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d306      	bcc.n	8006590 <USB_SetTurnaroundTime+0xc4>
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	4a20      	ldr	r2, [pc, #128]	; (8006608 <USB_SetTurnaroundTime+0x13c>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d802      	bhi.n	8006590 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800658a:	2308      	movs	r3, #8
 800658c:	617b      	str	r3, [r7, #20]
 800658e:	e015      	b.n	80065bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	4a1d      	ldr	r2, [pc, #116]	; (8006608 <USB_SetTurnaroundTime+0x13c>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d906      	bls.n	80065a6 <USB_SetTurnaroundTime+0xda>
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	4a1c      	ldr	r2, [pc, #112]	; (800660c <USB_SetTurnaroundTime+0x140>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d202      	bcs.n	80065a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80065a0:	2307      	movs	r3, #7
 80065a2:	617b      	str	r3, [r7, #20]
 80065a4:	e00a      	b.n	80065bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80065a6:	2306      	movs	r3, #6
 80065a8:	617b      	str	r3, [r7, #20]
 80065aa:	e007      	b.n	80065bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80065ac:	79fb      	ldrb	r3, [r7, #7]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d102      	bne.n	80065b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80065b2:	2309      	movs	r3, #9
 80065b4:	617b      	str	r3, [r7, #20]
 80065b6:	e001      	b.n	80065bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80065b8:	2309      	movs	r3, #9
 80065ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	68da      	ldr	r2, [r3, #12]
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	029b      	lsls	r3, r3, #10
 80065d0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80065d4:	431a      	orrs	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	371c      	adds	r7, #28
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	00d8acbf 	.word	0x00d8acbf
 80065ec:	00e4e1c0 	.word	0x00e4e1c0
 80065f0:	00f42400 	.word	0x00f42400
 80065f4:	01067380 	.word	0x01067380
 80065f8:	011a499f 	.word	0x011a499f
 80065fc:	01312cff 	.word	0x01312cff
 8006600:	014ca43f 	.word	0x014ca43f
 8006604:	016e3600 	.word	0x016e3600
 8006608:	01a6ab1f 	.word	0x01a6ab1f
 800660c:	01e84800 	.word	0x01e84800

08006610 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f043 0201 	orr.w	r2, r3, #1
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006632:	b480      	push	{r7}
 8006634:	b083      	sub	sp, #12
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f023 0201 	bic.w	r2, r3, #1
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	460b      	mov	r3, r1
 800665e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006660:	2300      	movs	r3, #0
 8006662:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006670:	78fb      	ldrb	r3, [r7, #3]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d115      	bne.n	80066a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006682:	2001      	movs	r0, #1
 8006684:	f7f9 ff96 	bl	80005b4 <HAL_Delay>
      ms++;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	3301      	adds	r3, #1
 800668c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f001 f972 	bl	8007978 <USB_GetMode>
 8006694:	4603      	mov	r3, r0
 8006696:	2b01      	cmp	r3, #1
 8006698:	d01e      	beq.n	80066d8 <USB_SetCurrentMode+0x84>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2b31      	cmp	r3, #49	; 0x31
 800669e:	d9f0      	bls.n	8006682 <USB_SetCurrentMode+0x2e>
 80066a0:	e01a      	b.n	80066d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80066a2:	78fb      	ldrb	r3, [r7, #3]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d115      	bne.n	80066d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80066b4:	2001      	movs	r0, #1
 80066b6:	f7f9 ff7d 	bl	80005b4 <HAL_Delay>
      ms++;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	3301      	adds	r3, #1
 80066be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f001 f959 	bl	8007978 <USB_GetMode>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d005      	beq.n	80066d8 <USB_SetCurrentMode+0x84>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2b31      	cmp	r3, #49	; 0x31
 80066d0:	d9f0      	bls.n	80066b4 <USB_SetCurrentMode+0x60>
 80066d2:	e001      	b.n	80066d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e005      	b.n	80066e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2b32      	cmp	r3, #50	; 0x32
 80066dc:	d101      	bne.n	80066e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e000      	b.n	80066e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066ec:	b084      	sub	sp, #16
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b086      	sub	sp, #24
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
 80066f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80066fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80066fe:	2300      	movs	r3, #0
 8006700:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006706:	2300      	movs	r3, #0
 8006708:	613b      	str	r3, [r7, #16]
 800670a:	e009      	b.n	8006720 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	3340      	adds	r3, #64	; 0x40
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	2200      	movs	r2, #0
 8006718:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	3301      	adds	r3, #1
 800671e:	613b      	str	r3, [r7, #16]
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	2b0e      	cmp	r3, #14
 8006724:	d9f2      	bls.n	800670c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006728:	2b00      	cmp	r3, #0
 800672a:	d11c      	bne.n	8006766 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800673a:	f043 0302 	orr.w	r3, r3, #2
 800673e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006744:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006750:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	639a      	str	r2, [r3, #56]	; 0x38
 8006764:	e00b      	b.n	800677e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006776:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006784:	461a      	mov	r2, r3
 8006786:	2300      	movs	r3, #0
 8006788:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006790:	4619      	mov	r1, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006798:	461a      	mov	r2, r3
 800679a:	680b      	ldr	r3, [r1, #0]
 800679c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800679e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d10c      	bne.n	80067be <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80067a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d104      	bne.n	80067b4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80067aa:	2100      	movs	r1, #0
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f945 	bl	8006a3c <USB_SetDevSpeed>
 80067b2:	e008      	b.n	80067c6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80067b4:	2101      	movs	r1, #1
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f940 	bl	8006a3c <USB_SetDevSpeed>
 80067bc:	e003      	b.n	80067c6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80067be:	2103      	movs	r1, #3
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 f93b 	bl	8006a3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80067c6:	2110      	movs	r1, #16
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f8f3 	bl	80069b4 <USB_FlushTxFifo>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d001      	beq.n	80067d8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f90f 	bl	80069fc <USB_FlushRxFifo>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d001      	beq.n	80067e8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ee:	461a      	mov	r2, r3
 80067f0:	2300      	movs	r3, #0
 80067f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067fa:	461a      	mov	r2, r3
 80067fc:	2300      	movs	r3, #0
 80067fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006806:	461a      	mov	r2, r3
 8006808:	2300      	movs	r3, #0
 800680a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800680c:	2300      	movs	r3, #0
 800680e:	613b      	str	r3, [r7, #16]
 8006810:	e043      	b.n	800689a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	4413      	add	r3, r2
 800681a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006824:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006828:	d118      	bne.n	800685c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10a      	bne.n	8006846 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	4413      	add	r3, r2
 8006838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800683c:	461a      	mov	r2, r3
 800683e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006842:	6013      	str	r3, [r2, #0]
 8006844:	e013      	b.n	800686e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	015a      	lsls	r2, r3, #5
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	4413      	add	r3, r2
 800684e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006852:	461a      	mov	r2, r3
 8006854:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006858:	6013      	str	r3, [r2, #0]
 800685a:	e008      	b.n	800686e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	015a      	lsls	r2, r3, #5
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	4413      	add	r3, r2
 8006864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006868:	461a      	mov	r2, r3
 800686a:	2300      	movs	r3, #0
 800686c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	015a      	lsls	r2, r3, #5
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	4413      	add	r3, r2
 8006876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800687a:	461a      	mov	r2, r3
 800687c:	2300      	movs	r3, #0
 800687e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	4413      	add	r3, r2
 8006888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800688c:	461a      	mov	r2, r3
 800688e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006892:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	3301      	adds	r3, #1
 8006898:	613b      	str	r3, [r7, #16]
 800689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d3b7      	bcc.n	8006812 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068a2:	2300      	movs	r3, #0
 80068a4:	613b      	str	r3, [r7, #16]
 80068a6:	e043      	b.n	8006930 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	015a      	lsls	r2, r3, #5
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068be:	d118      	bne.n	80068f2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10a      	bne.n	80068dc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	015a      	lsls	r2, r3, #5
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d2:	461a      	mov	r2, r3
 80068d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80068d8:	6013      	str	r3, [r2, #0]
 80068da:	e013      	b.n	8006904 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e8:	461a      	mov	r2, r3
 80068ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80068ee:	6013      	str	r3, [r2, #0]
 80068f0:	e008      	b.n	8006904 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	015a      	lsls	r2, r3, #5
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068fe:	461a      	mov	r2, r3
 8006900:	2300      	movs	r3, #0
 8006902:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	015a      	lsls	r2, r3, #5
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	4413      	add	r3, r2
 800690c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006910:	461a      	mov	r2, r3
 8006912:	2300      	movs	r3, #0
 8006914:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	4413      	add	r3, r2
 800691e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006922:	461a      	mov	r2, r3
 8006924:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006928:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	3301      	adds	r3, #1
 800692e:	613b      	str	r3, [r7, #16]
 8006930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	429a      	cmp	r2, r3
 8006936:	d3b7      	bcc.n	80068a8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006946:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800694a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006958:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800695a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695c:	2b00      	cmp	r3, #0
 800695e:	d105      	bne.n	800696c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	f043 0210 	orr.w	r2, r3, #16
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	699a      	ldr	r2, [r3, #24]
 8006970:	4b0f      	ldr	r3, [pc, #60]	; (80069b0 <USB_DevInit+0x2c4>)
 8006972:	4313      	orrs	r3, r2
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800697a:	2b00      	cmp	r3, #0
 800697c:	d005      	beq.n	800698a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	f043 0208 	orr.w	r2, r3, #8
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800698a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800698c:	2b01      	cmp	r3, #1
 800698e:	d107      	bne.n	80069a0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006998:	f043 0304 	orr.w	r3, r3, #4
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80069a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3718      	adds	r7, #24
 80069a6:	46bd      	mov	sp, r7
 80069a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069ac:	b004      	add	sp, #16
 80069ae:	4770      	bx	lr
 80069b0:	803c3800 	.word	0x803c3800

080069b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80069be:	2300      	movs	r3, #0
 80069c0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	019b      	lsls	r3, r3, #6
 80069c6:	f043 0220 	orr.w	r2, r3, #32
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	3301      	adds	r3, #1
 80069d2:	60fb      	str	r3, [r7, #12]
 80069d4:	4a08      	ldr	r2, [pc, #32]	; (80069f8 <USB_FlushTxFifo+0x44>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d901      	bls.n	80069de <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e006      	b.n	80069ec <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	f003 0320 	and.w	r3, r3, #32
 80069e6:	2b20      	cmp	r3, #32
 80069e8:	d0f1      	beq.n	80069ce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	00030d40 	.word	0x00030d40

080069fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2210      	movs	r2, #16
 8006a0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	3301      	adds	r3, #1
 8006a12:	60fb      	str	r3, [r7, #12]
 8006a14:	4a08      	ldr	r2, [pc, #32]	; (8006a38 <USB_FlushRxFifo+0x3c>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d901      	bls.n	8006a1e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e006      	b.n	8006a2c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	f003 0310 	and.w	r3, r3, #16
 8006a26:	2b10      	cmp	r3, #16
 8006a28:	d0f1      	beq.n	8006a0e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	00030d40 	.word	0x00030d40

08006a3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	460b      	mov	r3, r1
 8006a46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	78fb      	ldrb	r3, [r7, #3]
 8006a56:	68f9      	ldr	r1, [r7, #12]
 8006a58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3714      	adds	r7, #20
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr

08006a6e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b087      	sub	sp, #28
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f003 0306 	and.w	r3, r3, #6
 8006a86:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d102      	bne.n	8006a94 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	75fb      	strb	r3, [r7, #23]
 8006a92:	e00a      	b.n	8006aaa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d002      	beq.n	8006aa0 <USB_GetDevSpeed+0x32>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2b06      	cmp	r3, #6
 8006a9e:	d102      	bne.n	8006aa6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	75fb      	strb	r3, [r7, #23]
 8006aa4:	e001      	b.n	8006aaa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006aa6:	230f      	movs	r3, #15
 8006aa8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	371c      	adds	r7, #28
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	785b      	ldrb	r3, [r3, #1]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d13a      	bne.n	8006b4a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ada:	69da      	ldr	r2, [r3, #28]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	f003 030f 	and.w	r3, r3, #15
 8006ae4:	2101      	movs	r1, #1
 8006ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	68f9      	ldr	r1, [r7, #12]
 8006aee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006af2:	4313      	orrs	r3, r2
 8006af4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	015a      	lsls	r2, r3, #5
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d155      	bne.n	8006bb8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	015a      	lsls	r2, r3, #5
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	4413      	add	r3, r2
 8006b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	78db      	ldrb	r3, [r3, #3]
 8006b26:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b28:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	059b      	lsls	r3, r3, #22
 8006b2e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b30:	4313      	orrs	r3, r2
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	0151      	lsls	r1, r2, #5
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	440a      	add	r2, r1
 8006b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b46:	6013      	str	r3, [r2, #0]
 8006b48:	e036      	b.n	8006bb8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b50:	69da      	ldr	r2, [r3, #28]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	f003 030f 	and.w	r3, r3, #15
 8006b5a:	2101      	movs	r1, #1
 8006b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b60:	041b      	lsls	r3, r3, #16
 8006b62:	68f9      	ldr	r1, [r7, #12]
 8006b64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	015a      	lsls	r2, r3, #5
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	4413      	add	r3, r2
 8006b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d11a      	bne.n	8006bb8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	015a      	lsls	r2, r3, #5
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	4413      	add	r3, r2
 8006b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	78db      	ldrb	r3, [r3, #3]
 8006b9c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b9e:	430b      	orrs	r3, r1
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	0151      	lsls	r1, r2, #5
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	440a      	add	r2, r1
 8006baa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bb6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3714      	adds	r7, #20
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
	...

08006bc8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	785b      	ldrb	r3, [r3, #1]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d161      	bne.n	8006ca8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	015a      	lsls	r2, r3, #5
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	4413      	add	r3, r2
 8006bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bfa:	d11f      	bne.n	8006c3c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68ba      	ldr	r2, [r7, #8]
 8006c0c:	0151      	lsls	r1, r2, #5
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	440a      	add	r2, r1
 8006c12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c1a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68ba      	ldr	r2, [r7, #8]
 8006c2c:	0151      	lsls	r1, r2, #5
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	440a      	add	r2, r1
 8006c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	f003 030f 	and.w	r3, r3, #15
 8006c4c:	2101      	movs	r1, #1
 8006c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	43db      	mvns	r3, r3
 8006c56:	68f9      	ldr	r1, [r7, #12]
 8006c58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c66:	69da      	ldr	r2, [r3, #28]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	f003 030f 	and.w	r3, r3, #15
 8006c70:	2101      	movs	r1, #1
 8006c72:	fa01 f303 	lsl.w	r3, r1, r3
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	43db      	mvns	r3, r3
 8006c7a:	68f9      	ldr	r1, [r7, #12]
 8006c7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c80:	4013      	ands	r3, r2
 8006c82:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	015a      	lsls	r2, r3, #5
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	0159      	lsls	r1, r3, #5
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	440b      	add	r3, r1
 8006c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	4b35      	ldr	r3, [pc, #212]	; (8006d78 <USB_DeactivateEndpoint+0x1b0>)
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	600b      	str	r3, [r1, #0]
 8006ca6:	e060      	b.n	8006d6a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	015a      	lsls	r2, r3, #5
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	4413      	add	r3, r2
 8006cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cbe:	d11f      	bne.n	8006d00 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	015a      	lsls	r2, r3, #5
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	0151      	lsls	r1, r2, #5
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	440a      	add	r2, r1
 8006cd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006cde:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	015a      	lsls	r2, r3, #5
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	0151      	lsls	r1, r2, #5
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	440a      	add	r2, r1
 8006cf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cfa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cfe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	f003 030f 	and.w	r3, r3, #15
 8006d10:	2101      	movs	r1, #1
 8006d12:	fa01 f303 	lsl.w	r3, r1, r3
 8006d16:	041b      	lsls	r3, r3, #16
 8006d18:	43db      	mvns	r3, r3
 8006d1a:	68f9      	ldr	r1, [r7, #12]
 8006d1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d20:	4013      	ands	r3, r2
 8006d22:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d2a:	69da      	ldr	r2, [r3, #28]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	f003 030f 	and.w	r3, r3, #15
 8006d34:	2101      	movs	r1, #1
 8006d36:	fa01 f303 	lsl.w	r3, r1, r3
 8006d3a:	041b      	lsls	r3, r3, #16
 8006d3c:	43db      	mvns	r3, r3
 8006d3e:	68f9      	ldr	r1, [r7, #12]
 8006d40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d44:	4013      	ands	r3, r2
 8006d46:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	0159      	lsls	r1, r3, #5
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	440b      	add	r3, r1
 8006d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d62:	4619      	mov	r1, r3
 8006d64:	4b05      	ldr	r3, [pc, #20]	; (8006d7c <USB_DeactivateEndpoint+0x1b4>)
 8006d66:	4013      	ands	r3, r2
 8006d68:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3714      	adds	r7, #20
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr
 8006d78:	ec337800 	.word	0xec337800
 8006d7c:	eff37800 	.word	0xeff37800

08006d80 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b08a      	sub	sp, #40	; 0x28
 8006d84:	af02      	add	r7, sp, #8
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	785b      	ldrb	r3, [r3, #1]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	f040 815c 	bne.w	800705a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d132      	bne.n	8006e10 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	015a      	lsls	r2, r3, #5
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	4413      	add	r3, r2
 8006db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	69ba      	ldr	r2, [r7, #24]
 8006dba:	0151      	lsls	r1, r2, #5
 8006dbc:	69fa      	ldr	r2, [r7, #28]
 8006dbe:	440a      	add	r2, r1
 8006dc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dc4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006dc8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006dcc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	015a      	lsls	r2, r3, #5
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	69ba      	ldr	r2, [r7, #24]
 8006dde:	0151      	lsls	r1, r2, #5
 8006de0:	69fa      	ldr	r2, [r7, #28]
 8006de2:	440a      	add	r2, r1
 8006de4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006de8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006dec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	015a      	lsls	r2, r3, #5
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	4413      	add	r3, r2
 8006df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	69ba      	ldr	r2, [r7, #24]
 8006dfe:	0151      	lsls	r1, r2, #5
 8006e00:	69fa      	ldr	r2, [r7, #28]
 8006e02:	440a      	add	r2, r1
 8006e04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e08:	0cdb      	lsrs	r3, r3, #19
 8006e0a:	04db      	lsls	r3, r3, #19
 8006e0c:	6113      	str	r3, [r2, #16]
 8006e0e:	e074      	b.n	8006efa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	015a      	lsls	r2, r3, #5
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	69ba      	ldr	r2, [r7, #24]
 8006e20:	0151      	lsls	r1, r2, #5
 8006e22:	69fa      	ldr	r2, [r7, #28]
 8006e24:	440a      	add	r2, r1
 8006e26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e2a:	0cdb      	lsrs	r3, r3, #19
 8006e2c:	04db      	lsls	r3, r3, #19
 8006e2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	015a      	lsls	r2, r3, #5
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	4413      	add	r3, r2
 8006e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	69ba      	ldr	r2, [r7, #24]
 8006e40:	0151      	lsls	r1, r2, #5
 8006e42:	69fa      	ldr	r2, [r7, #28]
 8006e44:	440a      	add	r2, r1
 8006e46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e4a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e4e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	015a      	lsls	r2, r3, #5
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e60:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	6959      	ldr	r1, [r3, #20]
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	440b      	add	r3, r1
 8006e6c:	1e59      	subs	r1, r3, #1
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e76:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006e78:	4b9d      	ldr	r3, [pc, #628]	; (80070f0 <USB_EPStartXfer+0x370>)
 8006e7a:	400b      	ands	r3, r1
 8006e7c:	69b9      	ldr	r1, [r7, #24]
 8006e7e:	0148      	lsls	r0, r1, #5
 8006e80:	69f9      	ldr	r1, [r7, #28]
 8006e82:	4401      	add	r1, r0
 8006e84:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	015a      	lsls	r2, r3, #5
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	4413      	add	r3, r2
 8006e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e98:	691a      	ldr	r2, [r3, #16]
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ea2:	69b9      	ldr	r1, [r7, #24]
 8006ea4:	0148      	lsls	r0, r1, #5
 8006ea6:	69f9      	ldr	r1, [r7, #28]
 8006ea8:	4401      	add	r1, r0
 8006eaa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	78db      	ldrb	r3, [r3, #3]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d11f      	bne.n	8006efa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	015a      	lsls	r2, r3, #5
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	0151      	lsls	r1, r2, #5
 8006ecc:	69fa      	ldr	r2, [r7, #28]
 8006ece:	440a      	add	r2, r1
 8006ed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ed4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006ed8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	015a      	lsls	r2, r3, #5
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	69ba      	ldr	r2, [r7, #24]
 8006eea:	0151      	lsls	r1, r2, #5
 8006eec:	69fa      	ldr	r2, [r7, #28]
 8006eee:	440a      	add	r2, r1
 8006ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ef4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ef8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006efa:	79fb      	ldrb	r3, [r7, #7]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d14b      	bne.n	8006f98 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d009      	beq.n	8006f1c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	015a      	lsls	r2, r3, #5
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	4413      	add	r3, r2
 8006f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f14:	461a      	mov	r2, r3
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	78db      	ldrb	r3, [r3, #3]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d128      	bne.n	8006f76 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d110      	bne.n	8006f56 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	015a      	lsls	r2, r3, #5
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	69ba      	ldr	r2, [r7, #24]
 8006f44:	0151      	lsls	r1, r2, #5
 8006f46:	69fa      	ldr	r2, [r7, #28]
 8006f48:	440a      	add	r2, r1
 8006f4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f52:	6013      	str	r3, [r2, #0]
 8006f54:	e00f      	b.n	8006f76 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	015a      	lsls	r2, r3, #5
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	69ba      	ldr	r2, [r7, #24]
 8006f66:	0151      	lsls	r1, r2, #5
 8006f68:	69fa      	ldr	r2, [r7, #28]
 8006f6a:	440a      	add	r2, r1
 8006f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f74:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	015a      	lsls	r2, r3, #5
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	69ba      	ldr	r2, [r7, #24]
 8006f86:	0151      	lsls	r1, r2, #5
 8006f88:	69fa      	ldr	r2, [r7, #28]
 8006f8a:	440a      	add	r2, r1
 8006f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f94:	6013      	str	r3, [r2, #0]
 8006f96:	e12f      	b.n	80071f8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	015a      	lsls	r2, r3, #5
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	69ba      	ldr	r2, [r7, #24]
 8006fa8:	0151      	lsls	r1, r2, #5
 8006faa:	69fa      	ldr	r2, [r7, #28]
 8006fac:	440a      	add	r2, r1
 8006fae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006fb6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	78db      	ldrb	r3, [r3, #3]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d015      	beq.n	8006fec <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 8117 	beq.w	80071f8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	f003 030f 	and.w	r3, r3, #15
 8006fda:	2101      	movs	r1, #1
 8006fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8006fe0:	69f9      	ldr	r1, [r7, #28]
 8006fe2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	634b      	str	r3, [r1, #52]	; 0x34
 8006fea:	e105      	b.n	80071f8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d110      	bne.n	800701e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	015a      	lsls	r2, r3, #5
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	4413      	add	r3, r2
 8007004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	69ba      	ldr	r2, [r7, #24]
 800700c:	0151      	lsls	r1, r2, #5
 800700e:	69fa      	ldr	r2, [r7, #28]
 8007010:	440a      	add	r2, r1
 8007012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007016:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800701a:	6013      	str	r3, [r2, #0]
 800701c:	e00f      	b.n	800703e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	015a      	lsls	r2, r3, #5
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	4413      	add	r3, r2
 8007026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	69ba      	ldr	r2, [r7, #24]
 800702e:	0151      	lsls	r1, r2, #5
 8007030:	69fa      	ldr	r2, [r7, #28]
 8007032:	440a      	add	r2, r1
 8007034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800703c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	68d9      	ldr	r1, [r3, #12]
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	781a      	ldrb	r2, [r3, #0]
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	695b      	ldr	r3, [r3, #20]
 800704a:	b298      	uxth	r0, r3
 800704c:	79fb      	ldrb	r3, [r7, #7]
 800704e:	9300      	str	r3, [sp, #0]
 8007050:	4603      	mov	r3, r0
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f000 fa2b 	bl	80074ae <USB_WritePacket>
 8007058:	e0ce      	b.n	80071f8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	015a      	lsls	r2, r3, #5
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	4413      	add	r3, r2
 8007062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	69ba      	ldr	r2, [r7, #24]
 800706a:	0151      	lsls	r1, r2, #5
 800706c:	69fa      	ldr	r2, [r7, #28]
 800706e:	440a      	add	r2, r1
 8007070:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007074:	0cdb      	lsrs	r3, r3, #19
 8007076:	04db      	lsls	r3, r3, #19
 8007078:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	015a      	lsls	r2, r3, #5
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	4413      	add	r3, r2
 8007082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	69ba      	ldr	r2, [r7, #24]
 800708a:	0151      	lsls	r1, r2, #5
 800708c:	69fa      	ldr	r2, [r7, #28]
 800708e:	440a      	add	r2, r1
 8007090:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007094:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007098:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800709c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d126      	bne.n	80070f4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	015a      	lsls	r2, r3, #5
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b2:	691a      	ldr	r2, [r3, #16]
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070bc:	69b9      	ldr	r1, [r7, #24]
 80070be:	0148      	lsls	r0, r1, #5
 80070c0:	69f9      	ldr	r1, [r7, #28]
 80070c2:	4401      	add	r1, r0
 80070c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80070c8:	4313      	orrs	r3, r2
 80070ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	015a      	lsls	r2, r3, #5
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	69ba      	ldr	r2, [r7, #24]
 80070dc:	0151      	lsls	r1, r2, #5
 80070de:	69fa      	ldr	r2, [r7, #28]
 80070e0:	440a      	add	r2, r1
 80070e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070ea:	6113      	str	r3, [r2, #16]
 80070ec:	e036      	b.n	800715c <USB_EPStartXfer+0x3dc>
 80070ee:	bf00      	nop
 80070f0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	695a      	ldr	r2, [r3, #20]
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	4413      	add	r3, r2
 80070fe:	1e5a      	subs	r2, r3, #1
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	fbb2 f3f3 	udiv	r3, r2, r3
 8007108:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	015a      	lsls	r2, r3, #5
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	4413      	add	r3, r2
 8007112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007116:	691a      	ldr	r2, [r3, #16]
 8007118:	8afb      	ldrh	r3, [r7, #22]
 800711a:	04d9      	lsls	r1, r3, #19
 800711c:	4b39      	ldr	r3, [pc, #228]	; (8007204 <USB_EPStartXfer+0x484>)
 800711e:	400b      	ands	r3, r1
 8007120:	69b9      	ldr	r1, [r7, #24]
 8007122:	0148      	lsls	r0, r1, #5
 8007124:	69f9      	ldr	r1, [r7, #28]
 8007126:	4401      	add	r1, r0
 8007128:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800712c:	4313      	orrs	r3, r2
 800712e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	015a      	lsls	r2, r3, #5
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	4413      	add	r3, r2
 8007138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800713c:	691a      	ldr	r2, [r3, #16]
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	8af9      	ldrh	r1, [r7, #22]
 8007144:	fb01 f303 	mul.w	r3, r1, r3
 8007148:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800714c:	69b9      	ldr	r1, [r7, #24]
 800714e:	0148      	lsls	r0, r1, #5
 8007150:	69f9      	ldr	r1, [r7, #28]
 8007152:	4401      	add	r1, r0
 8007154:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007158:	4313      	orrs	r3, r2
 800715a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800715c:	79fb      	ldrb	r3, [r7, #7]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d10d      	bne.n	800717e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d009      	beq.n	800717e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	68d9      	ldr	r1, [r3, #12]
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	015a      	lsls	r2, r3, #5
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	4413      	add	r3, r2
 8007176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800717a:	460a      	mov	r2, r1
 800717c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	78db      	ldrb	r3, [r3, #3]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d128      	bne.n	80071d8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007192:	2b00      	cmp	r3, #0
 8007194:	d110      	bne.n	80071b8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	015a      	lsls	r2, r3, #5
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	4413      	add	r3, r2
 800719e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	69ba      	ldr	r2, [r7, #24]
 80071a6:	0151      	lsls	r1, r2, #5
 80071a8:	69fa      	ldr	r2, [r7, #28]
 80071aa:	440a      	add	r2, r1
 80071ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80071b4:	6013      	str	r3, [r2, #0]
 80071b6:	e00f      	b.n	80071d8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	015a      	lsls	r2, r3, #5
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	4413      	add	r3, r2
 80071c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	69ba      	ldr	r2, [r7, #24]
 80071c8:	0151      	lsls	r1, r2, #5
 80071ca:	69fa      	ldr	r2, [r7, #28]
 80071cc:	440a      	add	r2, r1
 80071ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071d6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	015a      	lsls	r2, r3, #5
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	4413      	add	r3, r2
 80071e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	69ba      	ldr	r2, [r7, #24]
 80071e8:	0151      	lsls	r1, r2, #5
 80071ea:	69fa      	ldr	r2, [r7, #28]
 80071ec:	440a      	add	r2, r1
 80071ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3720      	adds	r7, #32
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	1ff80000 	.word	0x1ff80000

08007208 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007208:	b480      	push	{r7}
 800720a:	b087      	sub	sp, #28
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	4613      	mov	r3, r2
 8007214:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	785b      	ldrb	r3, [r3, #1]
 8007224:	2b01      	cmp	r3, #1
 8007226:	f040 80cd 	bne.w	80073c4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d132      	bne.n	8007298 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	015a      	lsls	r2, r3, #5
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	4413      	add	r3, r2
 800723a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	0151      	lsls	r1, r2, #5
 8007244:	697a      	ldr	r2, [r7, #20]
 8007246:	440a      	add	r2, r1
 8007248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800724c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007250:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007254:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	015a      	lsls	r2, r3, #5
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	4413      	add	r3, r2
 800725e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	0151      	lsls	r1, r2, #5
 8007268:	697a      	ldr	r2, [r7, #20]
 800726a:	440a      	add	r2, r1
 800726c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007270:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007274:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	015a      	lsls	r2, r3, #5
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	4413      	add	r3, r2
 800727e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	0151      	lsls	r1, r2, #5
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	440a      	add	r2, r1
 800728c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007290:	0cdb      	lsrs	r3, r3, #19
 8007292:	04db      	lsls	r3, r3, #19
 8007294:	6113      	str	r3, [r2, #16]
 8007296:	e04e      	b.n	8007336 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	015a      	lsls	r2, r3, #5
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	4413      	add	r3, r2
 80072a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	693a      	ldr	r2, [r7, #16]
 80072a8:	0151      	lsls	r1, r2, #5
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	440a      	add	r2, r1
 80072ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072b2:	0cdb      	lsrs	r3, r3, #19
 80072b4:	04db      	lsls	r3, r3, #19
 80072b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	015a      	lsls	r2, r3, #5
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	4413      	add	r3, r2
 80072c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	693a      	ldr	r2, [r7, #16]
 80072c8:	0151      	lsls	r1, r2, #5
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	440a      	add	r2, r1
 80072ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80072da:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	695a      	ldr	r2, [r3, #20]
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d903      	bls.n	80072f0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	689a      	ldr	r2, [r3, #8]
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	015a      	lsls	r2, r3, #5
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	693a      	ldr	r2, [r7, #16]
 8007300:	0151      	lsls	r1, r2, #5
 8007302:	697a      	ldr	r2, [r7, #20]
 8007304:	440a      	add	r2, r1
 8007306:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800730a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800730e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	015a      	lsls	r2, r3, #5
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	4413      	add	r3, r2
 8007318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800731c:	691a      	ldr	r2, [r3, #16]
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007326:	6939      	ldr	r1, [r7, #16]
 8007328:	0148      	lsls	r0, r1, #5
 800732a:	6979      	ldr	r1, [r7, #20]
 800732c:	4401      	add	r1, r0
 800732e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007332:	4313      	orrs	r3, r2
 8007334:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007336:	79fb      	ldrb	r3, [r7, #7]
 8007338:	2b01      	cmp	r3, #1
 800733a:	d11e      	bne.n	800737a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d009      	beq.n	8007358 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	015a      	lsls	r2, r3, #5
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	4413      	add	r3, r2
 800734c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007350:	461a      	mov	r2, r3
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	015a      	lsls	r2, r3, #5
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	4413      	add	r3, r2
 8007360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	0151      	lsls	r1, r2, #5
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	440a      	add	r2, r1
 800736e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007372:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007376:	6013      	str	r3, [r2, #0]
 8007378:	e092      	b.n	80074a0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	015a      	lsls	r2, r3, #5
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	4413      	add	r3, r2
 8007382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	0151      	lsls	r1, r2, #5
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	440a      	add	r2, r1
 8007390:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007394:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007398:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	695b      	ldr	r3, [r3, #20]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d07e      	beq.n	80074a0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	f003 030f 	and.w	r3, r3, #15
 80073b2:	2101      	movs	r1, #1
 80073b4:	fa01 f303 	lsl.w	r3, r1, r3
 80073b8:	6979      	ldr	r1, [r7, #20]
 80073ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073be:	4313      	orrs	r3, r2
 80073c0:	634b      	str	r3, [r1, #52]	; 0x34
 80073c2:	e06d      	b.n	80074a0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	015a      	lsls	r2, r3, #5
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	4413      	add	r3, r2
 80073cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	0151      	lsls	r1, r2, #5
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	440a      	add	r2, r1
 80073da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073de:	0cdb      	lsrs	r3, r3, #19
 80073e0:	04db      	lsls	r3, r3, #19
 80073e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	015a      	lsls	r2, r3, #5
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	4413      	add	r3, r2
 80073ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	693a      	ldr	r2, [r7, #16]
 80073f4:	0151      	lsls	r1, r2, #5
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	440a      	add	r2, r1
 80073fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007402:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007406:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	695b      	ldr	r3, [r3, #20]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d003      	beq.n	8007418 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	689a      	ldr	r2, [r3, #8]
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	015a      	lsls	r2, r3, #5
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	4413      	add	r3, r2
 8007420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	693a      	ldr	r2, [r7, #16]
 8007428:	0151      	lsls	r1, r2, #5
 800742a:	697a      	ldr	r2, [r7, #20]
 800742c:	440a      	add	r2, r1
 800742e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007432:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007436:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	015a      	lsls	r2, r3, #5
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	4413      	add	r3, r2
 8007440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007444:	691a      	ldr	r2, [r3, #16]
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800744e:	6939      	ldr	r1, [r7, #16]
 8007450:	0148      	lsls	r0, r1, #5
 8007452:	6979      	ldr	r1, [r7, #20]
 8007454:	4401      	add	r1, r0
 8007456:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800745a:	4313      	orrs	r3, r2
 800745c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800745e:	79fb      	ldrb	r3, [r7, #7]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d10d      	bne.n	8007480 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d009      	beq.n	8007480 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	68d9      	ldr	r1, [r3, #12]
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	015a      	lsls	r2, r3, #5
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	4413      	add	r3, r2
 8007478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800747c:	460a      	mov	r2, r1
 800747e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	015a      	lsls	r2, r3, #5
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	4413      	add	r3, r2
 8007488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	693a      	ldr	r2, [r7, #16]
 8007490:	0151      	lsls	r1, r2, #5
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	440a      	add	r2, r1
 8007496:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800749a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800749e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	371c      	adds	r7, #28
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80074ae:	b480      	push	{r7}
 80074b0:	b089      	sub	sp, #36	; 0x24
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	60f8      	str	r0, [r7, #12]
 80074b6:	60b9      	str	r1, [r7, #8]
 80074b8:	4611      	mov	r1, r2
 80074ba:	461a      	mov	r2, r3
 80074bc:	460b      	mov	r3, r1
 80074be:	71fb      	strb	r3, [r7, #7]
 80074c0:	4613      	mov	r3, r2
 80074c2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80074cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d123      	bne.n	800751c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80074d4:	88bb      	ldrh	r3, [r7, #4]
 80074d6:	3303      	adds	r3, #3
 80074d8:	089b      	lsrs	r3, r3, #2
 80074da:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80074dc:	2300      	movs	r3, #0
 80074de:	61bb      	str	r3, [r7, #24]
 80074e0:	e018      	b.n	8007514 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80074e2:	79fb      	ldrb	r3, [r7, #7]
 80074e4:	031a      	lsls	r2, r3, #12
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	4413      	add	r3, r2
 80074ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074ee:	461a      	mov	r2, r3
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	3301      	adds	r3, #1
 80074fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	3301      	adds	r3, #1
 8007500:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	3301      	adds	r3, #1
 8007506:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	3301      	adds	r3, #1
 800750c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	3301      	adds	r3, #1
 8007512:	61bb      	str	r3, [r7, #24]
 8007514:	69ba      	ldr	r2, [r7, #24]
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	429a      	cmp	r2, r3
 800751a:	d3e2      	bcc.n	80074e2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3724      	adds	r7, #36	; 0x24
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800752a:	b480      	push	{r7}
 800752c:	b08b      	sub	sp, #44	; 0x2c
 800752e:	af00      	add	r7, sp, #0
 8007530:	60f8      	str	r0, [r7, #12]
 8007532:	60b9      	str	r1, [r7, #8]
 8007534:	4613      	mov	r3, r2
 8007536:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007540:	88fb      	ldrh	r3, [r7, #6]
 8007542:	089b      	lsrs	r3, r3, #2
 8007544:	b29b      	uxth	r3, r3
 8007546:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007548:	88fb      	ldrh	r3, [r7, #6]
 800754a:	f003 0303 	and.w	r3, r3, #3
 800754e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007550:	2300      	movs	r3, #0
 8007552:	623b      	str	r3, [r7, #32]
 8007554:	e014      	b.n	8007580 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007560:	601a      	str	r2, [r3, #0]
    pDest++;
 8007562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007564:	3301      	adds	r3, #1
 8007566:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756a:	3301      	adds	r3, #1
 800756c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800756e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007570:	3301      	adds	r3, #1
 8007572:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007576:	3301      	adds	r3, #1
 8007578:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800757a:	6a3b      	ldr	r3, [r7, #32]
 800757c:	3301      	adds	r3, #1
 800757e:	623b      	str	r3, [r7, #32]
 8007580:	6a3a      	ldr	r2, [r7, #32]
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	429a      	cmp	r2, r3
 8007586:	d3e6      	bcc.n	8007556 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007588:	8bfb      	ldrh	r3, [r7, #30]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d01e      	beq.n	80075cc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800758e:	2300      	movs	r3, #0
 8007590:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007598:	461a      	mov	r2, r3
 800759a:	f107 0310 	add.w	r3, r7, #16
 800759e:	6812      	ldr	r2, [r2, #0]
 80075a0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80075a2:	693a      	ldr	r2, [r7, #16]
 80075a4:	6a3b      	ldr	r3, [r7, #32]
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	00db      	lsls	r3, r3, #3
 80075aa:	fa22 f303 	lsr.w	r3, r2, r3
 80075ae:	b2da      	uxtb	r2, r3
 80075b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b2:	701a      	strb	r2, [r3, #0]
      i++;
 80075b4:	6a3b      	ldr	r3, [r7, #32]
 80075b6:	3301      	adds	r3, #1
 80075b8:	623b      	str	r3, [r7, #32]
      pDest++;
 80075ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075bc:	3301      	adds	r3, #1
 80075be:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80075c0:	8bfb      	ldrh	r3, [r7, #30]
 80075c2:	3b01      	subs	r3, #1
 80075c4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80075c6:	8bfb      	ldrh	r3, [r7, #30]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d1ea      	bne.n	80075a2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80075cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	372c      	adds	r7, #44	; 0x2c
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075da:	b480      	push	{r7}
 80075dc:	b085      	sub	sp, #20
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	785b      	ldrb	r3, [r3, #1]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d12c      	bne.n	8007650 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	015a      	lsls	r2, r3, #5
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	4413      	add	r3, r2
 80075fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	db12      	blt.n	800762e <USB_EPSetStall+0x54>
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00f      	beq.n	800762e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	015a      	lsls	r2, r3, #5
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	4413      	add	r3, r2
 8007616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	0151      	lsls	r1, r2, #5
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	440a      	add	r2, r1
 8007624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007628:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800762c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	015a      	lsls	r2, r3, #5
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	4413      	add	r3, r2
 8007636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	0151      	lsls	r1, r2, #5
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	440a      	add	r2, r1
 8007644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007648:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800764c:	6013      	str	r3, [r2, #0]
 800764e:	e02b      	b.n	80076a8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	4413      	add	r3, r2
 8007658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	db12      	blt.n	8007688 <USB_EPSetStall+0xae>
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00f      	beq.n	8007688 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	015a      	lsls	r2, r3, #5
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	4413      	add	r3, r2
 8007670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	0151      	lsls	r1, r2, #5
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	440a      	add	r2, r1
 800767e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007682:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007686:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	015a      	lsls	r2, r3, #5
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4413      	add	r3, r2
 8007690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	0151      	lsls	r1, r2, #5
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	440a      	add	r2, r1
 800769e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3714      	adds	r7, #20
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b085      	sub	sp, #20
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	785b      	ldrb	r3, [r3, #1]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d128      	bne.n	8007724 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	015a      	lsls	r2, r3, #5
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	4413      	add	r3, r2
 80076da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	0151      	lsls	r1, r2, #5
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	440a      	add	r2, r1
 80076e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076f0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	78db      	ldrb	r3, [r3, #3]
 80076f6:	2b03      	cmp	r3, #3
 80076f8:	d003      	beq.n	8007702 <USB_EPClearStall+0x4c>
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	78db      	ldrb	r3, [r3, #3]
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d138      	bne.n	8007774 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	015a      	lsls	r2, r3, #5
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	4413      	add	r3, r2
 800770a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	0151      	lsls	r1, r2, #5
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	440a      	add	r2, r1
 8007718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800771c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007720:	6013      	str	r3, [r2, #0]
 8007722:	e027      	b.n	8007774 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	015a      	lsls	r2, r3, #5
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	4413      	add	r3, r2
 800772c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	0151      	lsls	r1, r2, #5
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	440a      	add	r2, r1
 800773a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800773e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007742:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	78db      	ldrb	r3, [r3, #3]
 8007748:	2b03      	cmp	r3, #3
 800774a:	d003      	beq.n	8007754 <USB_EPClearStall+0x9e>
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	78db      	ldrb	r3, [r3, #3]
 8007750:	2b02      	cmp	r3, #2
 8007752:	d10f      	bne.n	8007774 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	015a      	lsls	r2, r3, #5
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	4413      	add	r3, r2
 800775c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	0151      	lsls	r1, r2, #5
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	440a      	add	r2, r1
 800776a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800776e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007772:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3714      	adds	r7, #20
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007782:	b480      	push	{r7}
 8007784:	b085      	sub	sp, #20
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	460b      	mov	r3, r1
 800778c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077a0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80077a4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	78fb      	ldrb	r3, [r7, #3]
 80077b0:	011b      	lsls	r3, r3, #4
 80077b2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80077b6:	68f9      	ldr	r1, [r7, #12]
 80077b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077bc:	4313      	orrs	r3, r2
 80077be:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3714      	adds	r7, #20
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr

080077ce <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80077ce:	b480      	push	{r7}
 80077d0:	b085      	sub	sp, #20
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077e8:	f023 0303 	bic.w	r3, r3, #3
 80077ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077fc:	f023 0302 	bic.w	r3, r3, #2
 8007800:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800782a:	f023 0303 	bic.w	r3, r3, #3
 800782e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	68fa      	ldr	r2, [r7, #12]
 800783a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800783e:	f043 0302 	orr.w	r3, r3, #2
 8007842:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3714      	adds	r7, #20
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr

08007852 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007852:	b480      	push	{r7}
 8007854:	b085      	sub	sp, #20
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	699b      	ldr	r3, [r3, #24]
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	4013      	ands	r3, r2
 8007868:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800786a:	68fb      	ldr	r3, [r7, #12]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3714      	adds	r7, #20
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800788a:	699b      	ldr	r3, [r3, #24]
 800788c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007894:	69db      	ldr	r3, [r3, #28]
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	4013      	ands	r3, r2
 800789a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	0c1b      	lsrs	r3, r3, #16
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3714      	adds	r7, #20
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078be:	699b      	ldr	r3, [r3, #24]
 80078c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078c8:	69db      	ldr	r3, [r3, #28]
 80078ca:	68ba      	ldr	r2, [r7, #8]
 80078cc:	4013      	ands	r3, r2
 80078ce:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	b29b      	uxth	r3, r3
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	460b      	mov	r3, r1
 80078ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80078f0:	78fb      	ldrb	r3, [r7, #3]
 80078f2:	015a      	lsls	r2, r3, #5
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	4413      	add	r3, r2
 80078f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007906:	695b      	ldr	r3, [r3, #20]
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	4013      	ands	r3, r2
 800790c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800790e:	68bb      	ldr	r3, [r7, #8]
}
 8007910:	4618      	mov	r0, r3
 8007912:	3714      	adds	r7, #20
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800791c:	b480      	push	{r7}
 800791e:	b087      	sub	sp, #28
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	460b      	mov	r3, r1
 8007926:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800793c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800793e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007940:	78fb      	ldrb	r3, [r7, #3]
 8007942:	f003 030f 	and.w	r3, r3, #15
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	fa22 f303 	lsr.w	r3, r2, r3
 800794c:	01db      	lsls	r3, r3, #7
 800794e:	b2db      	uxtb	r3, r3
 8007950:	693a      	ldr	r2, [r7, #16]
 8007952:	4313      	orrs	r3, r2
 8007954:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007956:	78fb      	ldrb	r3, [r7, #3]
 8007958:	015a      	lsls	r2, r3, #5
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	4413      	add	r3, r2
 800795e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	4013      	ands	r3, r2
 8007968:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800796a:	68bb      	ldr	r3, [r7, #8]
}
 800796c:	4618      	mov	r0, r3
 800796e:	371c      	adds	r7, #28
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	695b      	ldr	r3, [r3, #20]
 8007984:	f003 0301 	and.w	r3, r3, #1
}
 8007988:	4618      	mov	r0, r3
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079ae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80079b2:	f023 0307 	bic.w	r3, r3, #7
 80079b6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079ca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3714      	adds	r7, #20
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
	...

080079dc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80079dc:	b480      	push	{r7}
 80079de:	b087      	sub	sp, #28
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	460b      	mov	r3, r1
 80079e6:	607a      	str	r2, [r7, #4]
 80079e8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	333c      	adds	r3, #60	; 0x3c
 80079f2:	3304      	adds	r3, #4
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	4a26      	ldr	r2, [pc, #152]	; (8007a94 <USB_EP0_OutStart+0xb8>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d90a      	bls.n	8007a16 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a10:	d101      	bne.n	8007a16 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007a12:	2300      	movs	r3, #0
 8007a14:	e037      	b.n	8007a86 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	2300      	movs	r3, #0
 8007a20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a44:	f043 0318 	orr.w	r3, r3, #24
 8007a48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	697a      	ldr	r2, [r7, #20]
 8007a54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a58:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007a5c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007a5e:	7afb      	ldrb	r3, [r7, #11]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d10f      	bne.n	8007a84 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a7e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007a82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	371c      	adds	r7, #28
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	4f54300a 	.word	0x4f54300a

08007a98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	60fb      	str	r3, [r7, #12]
 8007aaa:	4a13      	ldr	r2, [pc, #76]	; (8007af8 <USB_CoreReset+0x60>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d901      	bls.n	8007ab4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	e01a      	b.n	8007aea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	daf3      	bge.n	8007aa4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007abc:	2300      	movs	r3, #0
 8007abe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	f043 0201 	orr.w	r2, r3, #1
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	3301      	adds	r3, #1
 8007ad0:	60fb      	str	r3, [r7, #12]
 8007ad2:	4a09      	ldr	r2, [pc, #36]	; (8007af8 <USB_CoreReset+0x60>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d901      	bls.n	8007adc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	e006      	b.n	8007aea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	f003 0301 	and.w	r3, r3, #1
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d0f1      	beq.n	8007acc <USB_CoreReset+0x34>

  return HAL_OK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3714      	adds	r7, #20
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	00030d40 	.word	0x00030d40

08007afc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	460b      	mov	r3, r1
 8007b06:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007b08:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007b0c:	f002 fc8c 	bl	800a428 <USBD_static_malloc>
 8007b10:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d105      	bne.n	8007b24 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007b20:	2302      	movs	r3, #2
 8007b22:	e066      	b.n	8007bf2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	7c1b      	ldrb	r3, [r3, #16]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d119      	bne.n	8007b68 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007b34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b38:	2202      	movs	r2, #2
 8007b3a:	2181      	movs	r1, #129	; 0x81
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f002 fb50 	bl	800a1e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2201      	movs	r2, #1
 8007b46:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007b48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b4c:	2202      	movs	r2, #2
 8007b4e:	2101      	movs	r1, #1
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f002 fb46 	bl	800a1e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2210      	movs	r2, #16
 8007b62:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007b66:	e016      	b.n	8007b96 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007b68:	2340      	movs	r3, #64	; 0x40
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	2181      	movs	r1, #129	; 0x81
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f002 fb37 	bl	800a1e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007b7a:	2340      	movs	r3, #64	; 0x40
 8007b7c:	2202      	movs	r2, #2
 8007b7e:	2101      	movs	r1, #1
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f002 fb2e 	bl	800a1e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2210      	movs	r2, #16
 8007b92:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007b96:	2308      	movs	r3, #8
 8007b98:	2203      	movs	r2, #3
 8007b9a:	2182      	movs	r1, #130	; 0x82
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f002 fb20 	bl	800a1e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	7c1b      	ldrb	r3, [r3, #16]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d109      	bne.n	8007be0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007bd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bd6:	2101      	movs	r1, #1
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f002 fbf1 	bl	800a3c0 <USBD_LL_PrepareReceive>
 8007bde:	e007      	b.n	8007bf0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007be6:	2340      	movs	r3, #64	; 0x40
 8007be8:	2101      	movs	r1, #1
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f002 fbe8 	bl	800a3c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b082      	sub	sp, #8
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
 8007c02:	460b      	mov	r3, r1
 8007c04:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007c06:	2181      	movs	r1, #129	; 0x81
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f002 fb10 	bl	800a22e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007c14:	2101      	movs	r1, #1
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f002 fb09 	bl	800a22e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007c24:	2182      	movs	r1, #130	; 0x82
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f002 fb01 	bl	800a22e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00e      	beq.n	8007c64 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c56:	4618      	mov	r0, r3
 8007c58:	f002 fbf4 	bl	800a444 <USBD_static_free>
    pdev->pClassData = NULL;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
	...

08007c70 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b086      	sub	sp, #24
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c80:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007c82:	2300      	movs	r3, #0
 8007c84:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007c86:	2300      	movs	r3, #0
 8007c88:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d101      	bne.n	8007c98 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007c94:	2303      	movs	r3, #3
 8007c96:	e0af      	b.n	8007df8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d03f      	beq.n	8007d24 <USBD_CDC_Setup+0xb4>
 8007ca4:	2b20      	cmp	r3, #32
 8007ca6:	f040 809f 	bne.w	8007de8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	88db      	ldrh	r3, [r3, #6]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d02e      	beq.n	8007d10 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	b25b      	sxtb	r3, r3
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	da16      	bge.n	8007cea <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	683a      	ldr	r2, [r7, #0]
 8007cc6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007cc8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007cca:	683a      	ldr	r2, [r7, #0]
 8007ccc:	88d2      	ldrh	r2, [r2, #6]
 8007cce:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	88db      	ldrh	r3, [r3, #6]
 8007cd4:	2b07      	cmp	r3, #7
 8007cd6:	bf28      	it	cs
 8007cd8:	2307      	movcs	r3, #7
 8007cda:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	89fa      	ldrh	r2, [r7, #14]
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f001 fae9 	bl	80092ba <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007ce8:	e085      	b.n	8007df6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	785a      	ldrb	r2, [r3, #1]
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	88db      	ldrh	r3, [r3, #6]
 8007cf8:	b2da      	uxtb	r2, r3
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007d00:	6939      	ldr	r1, [r7, #16]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	88db      	ldrh	r3, [r3, #6]
 8007d06:	461a      	mov	r2, r3
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f001 fb02 	bl	8009312 <USBD_CtlPrepareRx>
      break;
 8007d0e:	e072      	b.n	8007df6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	683a      	ldr	r2, [r7, #0]
 8007d1a:	7850      	ldrb	r0, [r2, #1]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	6839      	ldr	r1, [r7, #0]
 8007d20:	4798      	blx	r3
      break;
 8007d22:	e068      	b.n	8007df6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	785b      	ldrb	r3, [r3, #1]
 8007d28:	2b0b      	cmp	r3, #11
 8007d2a:	d852      	bhi.n	8007dd2 <USBD_CDC_Setup+0x162>
 8007d2c:	a201      	add	r2, pc, #4	; (adr r2, 8007d34 <USBD_CDC_Setup+0xc4>)
 8007d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d32:	bf00      	nop
 8007d34:	08007d65 	.word	0x08007d65
 8007d38:	08007de1 	.word	0x08007de1
 8007d3c:	08007dd3 	.word	0x08007dd3
 8007d40:	08007dd3 	.word	0x08007dd3
 8007d44:	08007dd3 	.word	0x08007dd3
 8007d48:	08007dd3 	.word	0x08007dd3
 8007d4c:	08007dd3 	.word	0x08007dd3
 8007d50:	08007dd3 	.word	0x08007dd3
 8007d54:	08007dd3 	.word	0x08007dd3
 8007d58:	08007dd3 	.word	0x08007dd3
 8007d5c:	08007d8f 	.word	0x08007d8f
 8007d60:	08007db9 	.word	0x08007db9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	2b03      	cmp	r3, #3
 8007d6e:	d107      	bne.n	8007d80 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007d70:	f107 030a 	add.w	r3, r7, #10
 8007d74:	2202      	movs	r2, #2
 8007d76:	4619      	mov	r1, r3
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f001 fa9e 	bl	80092ba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d7e:	e032      	b.n	8007de6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007d80:	6839      	ldr	r1, [r7, #0]
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f001 fa28 	bl	80091d8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	75fb      	strb	r3, [r7, #23]
          break;
 8007d8c:	e02b      	b.n	8007de6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b03      	cmp	r3, #3
 8007d98:	d107      	bne.n	8007daa <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007d9a:	f107 030d 	add.w	r3, r7, #13
 8007d9e:	2201      	movs	r2, #1
 8007da0:	4619      	mov	r1, r3
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f001 fa89 	bl	80092ba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007da8:	e01d      	b.n	8007de6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007daa:	6839      	ldr	r1, [r7, #0]
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f001 fa13 	bl	80091d8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007db2:	2303      	movs	r3, #3
 8007db4:	75fb      	strb	r3, [r7, #23]
          break;
 8007db6:	e016      	b.n	8007de6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	2b03      	cmp	r3, #3
 8007dc2:	d00f      	beq.n	8007de4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007dc4:	6839      	ldr	r1, [r7, #0]
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f001 fa06 	bl	80091d8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007dd0:	e008      	b.n	8007de4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007dd2:	6839      	ldr	r1, [r7, #0]
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f001 f9ff 	bl	80091d8 <USBD_CtlError>
          ret = USBD_FAIL;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	75fb      	strb	r3, [r7, #23]
          break;
 8007dde:	e002      	b.n	8007de6 <USBD_CDC_Setup+0x176>
          break;
 8007de0:	bf00      	nop
 8007de2:	e008      	b.n	8007df6 <USBD_CDC_Setup+0x186>
          break;
 8007de4:	bf00      	nop
      }
      break;
 8007de6:	e006      	b.n	8007df6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007de8:	6839      	ldr	r1, [r7, #0]
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f001 f9f4 	bl	80091d8 <USBD_CtlError>
      ret = USBD_FAIL;
 8007df0:	2303      	movs	r3, #3
 8007df2:	75fb      	strb	r3, [r7, #23]
      break;
 8007df4:	bf00      	nop
  }

  return (uint8_t)ret;
 8007df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3718      	adds	r7, #24
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	460b      	mov	r3, r1
 8007e0a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e12:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d101      	bne.n	8007e22 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	e04f      	b.n	8007ec2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e28:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007e2a:	78fa      	ldrb	r2, [r7, #3]
 8007e2c:	6879      	ldr	r1, [r7, #4]
 8007e2e:	4613      	mov	r3, r2
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	4413      	add	r3, r2
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	440b      	add	r3, r1
 8007e38:	3318      	adds	r3, #24
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d029      	beq.n	8007e94 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007e40:	78fa      	ldrb	r2, [r7, #3]
 8007e42:	6879      	ldr	r1, [r7, #4]
 8007e44:	4613      	mov	r3, r2
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	4413      	add	r3, r2
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	440b      	add	r3, r1
 8007e4e:	3318      	adds	r3, #24
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	78f9      	ldrb	r1, [r7, #3]
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	460b      	mov	r3, r1
 8007e58:	00db      	lsls	r3, r3, #3
 8007e5a:	1a5b      	subs	r3, r3, r1
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	4403      	add	r3, r0
 8007e60:	3344      	adds	r3, #68	; 0x44
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	fbb2 f1f3 	udiv	r1, r2, r3
 8007e68:	fb03 f301 	mul.w	r3, r3, r1
 8007e6c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d110      	bne.n	8007e94 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007e72:	78fa      	ldrb	r2, [r7, #3]
 8007e74:	6879      	ldr	r1, [r7, #4]
 8007e76:	4613      	mov	r3, r2
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	4413      	add	r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	440b      	add	r3, r1
 8007e80:	3318      	adds	r3, #24
 8007e82:	2200      	movs	r2, #0
 8007e84:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007e86:	78f9      	ldrb	r1, [r7, #3]
 8007e88:	2300      	movs	r3, #0
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f002 fa76 	bl	800a37e <USBD_LL_Transmit>
 8007e92:	e015      	b.n	8007ec0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00b      	beq.n	8007ec0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007eae:	691b      	ldr	r3, [r3, #16]
 8007eb0:	68ba      	ldr	r2, [r7, #8]
 8007eb2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007ebc:	78fa      	ldrb	r2, [r7, #3]
 8007ebe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b084      	sub	sp, #16
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007edc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d101      	bne.n	8007eec <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e015      	b.n	8007f18 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007eec:	78fb      	ldrb	r3, [r7, #3]
 8007eee:	4619      	mov	r1, r3
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f002 fa86 	bl	800a402 <USBD_LL_GetRxDataSize>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007f12:	4611      	mov	r1, r2
 8007f14:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3710      	adds	r7, #16
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f2e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d101      	bne.n	8007f3a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007f36:	2303      	movs	r3, #3
 8007f38:	e01b      	b.n	8007f72 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d015      	beq.n	8007f70 <USBD_CDC_EP0_RxReady+0x50>
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007f4a:	2bff      	cmp	r3, #255	; 0xff
 8007f4c:	d010      	beq.n	8007f70 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007f5c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007f64:	b292      	uxth	r2, r2
 8007f66:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	22ff      	movs	r2, #255	; 0xff
 8007f6c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
	...

08007f7c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2243      	movs	r2, #67	; 0x43
 8007f88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007f8a:	4b03      	ldr	r3, [pc, #12]	; (8007f98 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr
 8007f98:	20000090 	.word	0x20000090

08007f9c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2243      	movs	r2, #67	; 0x43
 8007fa8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007faa:	4b03      	ldr	r3, [pc, #12]	; (8007fb8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr
 8007fb8:	2000004c 	.word	0x2000004c

08007fbc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2243      	movs	r2, #67	; 0x43
 8007fc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007fca:	4b03      	ldr	r3, [pc, #12]	; (8007fd8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr
 8007fd8:	200000d4 	.word	0x200000d4

08007fdc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	220a      	movs	r2, #10
 8007fe8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007fea:	4b03      	ldr	r3, [pc, #12]	; (8007ff8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr
 8007ff8:	20000008 	.word	0x20000008

08007ffc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d101      	bne.n	8008010 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800800c:	2303      	movs	r3, #3
 800800e:	e004      	b.n	800801a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	370c      	adds	r7, #12
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008026:	b480      	push	{r7}
 8008028:	b087      	sub	sp, #28
 800802a:	af00      	add	r7, sp, #0
 800802c:	60f8      	str	r0, [r7, #12]
 800802e:	60b9      	str	r1, [r7, #8]
 8008030:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008038:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d101      	bne.n	8008044 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008040:	2303      	movs	r3, #3
 8008042:	e008      	b.n	8008056 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	68ba      	ldr	r2, [r7, #8]
 8008048:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	371c      	adds	r7, #28
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr

08008062 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008062:	b480      	push	{r7}
 8008064:	b085      	sub	sp, #20
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008072:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d101      	bne.n	800807e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800807a:	2303      	movs	r3, #3
 800807c:	e004      	b.n	8008088 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	683a      	ldr	r2, [r7, #0]
 8008082:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3714      	adds	r7, #20
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d101      	bne.n	80080b2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80080ae:	2303      	movs	r3, #3
 80080b0:	e016      	b.n	80080e0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	7c1b      	ldrb	r3, [r3, #16]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d109      	bne.n	80080ce <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80080c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080c4:	2101      	movs	r1, #1
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f002 f97a 	bl	800a3c0 <USBD_LL_PrepareReceive>
 80080cc:	e007      	b.n	80080de <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80080d4:	2340      	movs	r3, #64	; 0x40
 80080d6:	2101      	movs	r1, #1
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f002 f971 	bl	800a3c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b086      	sub	sp, #24
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	4613      	mov	r3, r2
 80080f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d101      	bne.n	8008100 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80080fc:	2303      	movs	r3, #3
 80080fe:	e01f      	b.n	8008140 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2200      	movs	r2, #0
 8008104:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2200      	movs	r2, #0
 800810c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2200      	movs	r2, #0
 8008114:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d003      	beq.n	8008126 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	68ba      	ldr	r2, [r7, #8]
 8008122:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	79fa      	ldrb	r2, [r7, #7]
 8008132:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f001 ffed 	bl	800a114 <USBD_LL_Init>
 800813a:	4603      	mov	r3, r0
 800813c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800813e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3718      	adds	r7, #24
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008152:	2300      	movs	r3, #0
 8008154:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d101      	bne.n	8008160 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800815c:	2303      	movs	r3, #3
 800815e:	e016      	b.n	800818e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	683a      	ldr	r2, [r7, #0]
 8008164:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800816e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00b      	beq.n	800818c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800817a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817c:	f107 020e 	add.w	r2, r7, #14
 8008180:	4610      	mov	r0, r2
 8008182:	4798      	blx	r3
 8008184:	4602      	mov	r2, r0
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b082      	sub	sp, #8
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f002 f804 	bl	800a1ac <USBD_LL_Start>
 80081a4:	4603      	mov	r3, r0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80081ae:	b480      	push	{r7}
 80081b0:	b083      	sub	sp, #12
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	460b      	mov	r3, r1
 80081ce:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80081d0:	2303      	movs	r3, #3
 80081d2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d009      	beq.n	80081f2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	78fa      	ldrb	r2, [r7, #3]
 80081e8:	4611      	mov	r1, r2
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	4798      	blx	r3
 80081ee:	4603      	mov	r3, r0
 80081f0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80081f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	460b      	mov	r3, r1
 8008206:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800820e:	2b00      	cmp	r3, #0
 8008210:	d007      	beq.n	8008222 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	78fa      	ldrb	r2, [r7, #3]
 800821c:	4611      	mov	r1, r2
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	4798      	blx	r3
  }

  return USBD_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800823c:	6839      	ldr	r1, [r7, #0]
 800823e:	4618      	mov	r0, r3
 8008240:	f000 ff90 	bl	8009164 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008252:	461a      	mov	r2, r3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008260:	f003 031f 	and.w	r3, r3, #31
 8008264:	2b02      	cmp	r3, #2
 8008266:	d01a      	beq.n	800829e <USBD_LL_SetupStage+0x72>
 8008268:	2b02      	cmp	r3, #2
 800826a:	d822      	bhi.n	80082b2 <USBD_LL_SetupStage+0x86>
 800826c:	2b00      	cmp	r3, #0
 800826e:	d002      	beq.n	8008276 <USBD_LL_SetupStage+0x4a>
 8008270:	2b01      	cmp	r3, #1
 8008272:	d00a      	beq.n	800828a <USBD_LL_SetupStage+0x5e>
 8008274:	e01d      	b.n	80082b2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800827c:	4619      	mov	r1, r3
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fa62 	bl	8008748 <USBD_StdDevReq>
 8008284:	4603      	mov	r3, r0
 8008286:	73fb      	strb	r3, [r7, #15]
      break;
 8008288:	e020      	b.n	80082cc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008290:	4619      	mov	r1, r3
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 fac6 	bl	8008824 <USBD_StdItfReq>
 8008298:	4603      	mov	r3, r0
 800829a:	73fb      	strb	r3, [r7, #15]
      break;
 800829c:	e016      	b.n	80082cc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80082a4:	4619      	mov	r1, r3
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 fb05 	bl	80088b6 <USBD_StdEPReq>
 80082ac:	4603      	mov	r3, r0
 80082ae:	73fb      	strb	r3, [r7, #15]
      break;
 80082b0:	e00c      	b.n	80082cc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80082b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	4619      	mov	r1, r3
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f001 ffd3 	bl	800a26c <USBD_LL_StallEP>
 80082c6:	4603      	mov	r3, r0
 80082c8:	73fb      	strb	r3, [r7, #15]
      break;
 80082ca:	bf00      	nop
  }

  return ret;
 80082cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b086      	sub	sp, #24
 80082da:	af00      	add	r7, sp, #0
 80082dc:	60f8      	str	r0, [r7, #12]
 80082de:	460b      	mov	r3, r1
 80082e0:	607a      	str	r2, [r7, #4]
 80082e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80082e4:	7afb      	ldrb	r3, [r7, #11]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d138      	bne.n	800835c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80082f0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80082f8:	2b03      	cmp	r3, #3
 80082fa:	d14a      	bne.n	8008392 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	689a      	ldr	r2, [r3, #8]
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	429a      	cmp	r2, r3
 8008306:	d913      	bls.n	8008330 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	689a      	ldr	r2, [r3, #8]
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	1ad2      	subs	r2, r2, r3
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	68da      	ldr	r2, [r3, #12]
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	4293      	cmp	r3, r2
 8008320:	bf28      	it	cs
 8008322:	4613      	movcs	r3, r2
 8008324:	461a      	mov	r2, r3
 8008326:	6879      	ldr	r1, [r7, #4]
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f001 f80f 	bl	800934c <USBD_CtlContinueRx>
 800832e:	e030      	b.n	8008392 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008336:	b2db      	uxtb	r3, r3
 8008338:	2b03      	cmp	r3, #3
 800833a:	d10b      	bne.n	8008354 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008342:	691b      	ldr	r3, [r3, #16]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d005      	beq.n	8008354 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	f001 f80a 	bl	800936e <USBD_CtlSendStatus>
 800835a:	e01a      	b.n	8008392 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008362:	b2db      	uxtb	r3, r3
 8008364:	2b03      	cmp	r3, #3
 8008366:	d114      	bne.n	8008392 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800836e:	699b      	ldr	r3, [r3, #24]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00e      	beq.n	8008392 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800837a:	699b      	ldr	r3, [r3, #24]
 800837c:	7afa      	ldrb	r2, [r7, #11]
 800837e:	4611      	mov	r1, r2
 8008380:	68f8      	ldr	r0, [r7, #12]
 8008382:	4798      	blx	r3
 8008384:	4603      	mov	r3, r0
 8008386:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008388:	7dfb      	ldrb	r3, [r7, #23]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d001      	beq.n	8008392 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800838e:	7dfb      	ldrb	r3, [r7, #23]
 8008390:	e000      	b.n	8008394 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008392:	2300      	movs	r3, #0
}
 8008394:	4618      	mov	r0, r3
 8008396:	3718      	adds	r7, #24
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b086      	sub	sp, #24
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	460b      	mov	r3, r1
 80083a6:	607a      	str	r2, [r7, #4]
 80083a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80083aa:	7afb      	ldrb	r3, [r7, #11]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d16b      	bne.n	8008488 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	3314      	adds	r3, #20
 80083b4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d156      	bne.n	800846e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	689a      	ldr	r2, [r3, #8]
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d914      	bls.n	80083f6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	689a      	ldr	r2, [r3, #8]
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	1ad2      	subs	r2, r2, r3
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	461a      	mov	r2, r3
 80083e0:	6879      	ldr	r1, [r7, #4]
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f000 ff84 	bl	80092f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083e8:	2300      	movs	r3, #0
 80083ea:	2200      	movs	r2, #0
 80083ec:	2100      	movs	r1, #0
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f001 ffe6 	bl	800a3c0 <USBD_LL_PrepareReceive>
 80083f4:	e03b      	b.n	800846e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	68da      	ldr	r2, [r3, #12]
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	429a      	cmp	r2, r3
 8008400:	d11c      	bne.n	800843c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	685a      	ldr	r2, [r3, #4]
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800840a:	429a      	cmp	r2, r3
 800840c:	d316      	bcc.n	800843c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	685a      	ldr	r2, [r3, #4]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008418:	429a      	cmp	r2, r3
 800841a:	d20f      	bcs.n	800843c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800841c:	2200      	movs	r2, #0
 800841e:	2100      	movs	r1, #0
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f000 ff65 	bl	80092f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2200      	movs	r2, #0
 800842a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800842e:	2300      	movs	r3, #0
 8008430:	2200      	movs	r2, #0
 8008432:	2100      	movs	r1, #0
 8008434:	68f8      	ldr	r0, [r7, #12]
 8008436:	f001 ffc3 	bl	800a3c0 <USBD_LL_PrepareReceive>
 800843a:	e018      	b.n	800846e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008442:	b2db      	uxtb	r3, r3
 8008444:	2b03      	cmp	r3, #3
 8008446:	d10b      	bne.n	8008460 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d005      	beq.n	8008460 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008460:	2180      	movs	r1, #128	; 0x80
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f001 ff02 	bl	800a26c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f000 ff93 	bl	8009394 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008474:	2b01      	cmp	r3, #1
 8008476:	d122      	bne.n	80084be <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f7ff fe98 	bl	80081ae <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2200      	movs	r2, #0
 8008482:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008486:	e01a      	b.n	80084be <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800848e:	b2db      	uxtb	r3, r3
 8008490:	2b03      	cmp	r3, #3
 8008492:	d114      	bne.n	80084be <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800849a:	695b      	ldr	r3, [r3, #20]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d00e      	beq.n	80084be <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084a6:	695b      	ldr	r3, [r3, #20]
 80084a8:	7afa      	ldrb	r2, [r7, #11]
 80084aa:	4611      	mov	r1, r2
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	4798      	blx	r3
 80084b0:	4603      	mov	r3, r0
 80084b2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80084b4:	7dfb      	ldrb	r3, [r7, #23]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d001      	beq.n	80084be <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80084ba:	7dfb      	ldrb	r3, [r7, #23]
 80084bc:	e000      	b.n	80084c0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3718      	adds	r7, #24
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d101      	bne.n	80084fc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80084f8:	2303      	movs	r3, #3
 80084fa:	e02f      	b.n	800855c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00f      	beq.n	8008526 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d009      	beq.n	8008526 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	6852      	ldr	r2, [r2, #4]
 800851e:	b2d2      	uxtb	r2, r2
 8008520:	4611      	mov	r1, r2
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008526:	2340      	movs	r3, #64	; 0x40
 8008528:	2200      	movs	r2, #0
 800852a:	2100      	movs	r1, #0
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f001 fe58 	bl	800a1e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2201      	movs	r2, #1
 8008536:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2240      	movs	r2, #64	; 0x40
 800853e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008542:	2340      	movs	r3, #64	; 0x40
 8008544:	2200      	movs	r2, #0
 8008546:	2180      	movs	r1, #128	; 0x80
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f001 fe4a 	bl	800a1e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2201      	movs	r2, #1
 8008552:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2240      	movs	r2, #64	; 0x40
 8008558:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	460b      	mov	r3, r1
 800856e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	78fa      	ldrb	r2, [r7, #3]
 8008574:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008592:	b2da      	uxtb	r2, r3
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2204      	movs	r2, #4
 800859e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	2b04      	cmp	r3, #4
 80085c2:	d106      	bne.n	80085d2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80085ca:	b2da      	uxtb	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d101      	bne.n	80085f6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80085f2:	2303      	movs	r3, #3
 80085f4:	e012      	b.n	800861c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	2b03      	cmp	r3, #3
 8008600:	d10b      	bne.n	800861a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008608:	69db      	ldr	r3, [r3, #28]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d005      	beq.n	800861a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008614:	69db      	ldr	r3, [r3, #28]
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3708      	adds	r7, #8
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	460b      	mov	r3, r1
 800862e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008636:	2b00      	cmp	r3, #0
 8008638:	d101      	bne.n	800863e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800863a:	2303      	movs	r3, #3
 800863c:	e014      	b.n	8008668 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008644:	b2db      	uxtb	r3, r3
 8008646:	2b03      	cmp	r3, #3
 8008648:	d10d      	bne.n	8008666 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008650:	6a1b      	ldr	r3, [r3, #32]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d007      	beq.n	8008666 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800865c:	6a1b      	ldr	r3, [r3, #32]
 800865e:	78fa      	ldrb	r2, [r7, #3]
 8008660:	4611      	mov	r1, r2
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3708      	adds	r7, #8
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	460b      	mov	r3, r1
 800867a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008682:	2b00      	cmp	r3, #0
 8008684:	d101      	bne.n	800868a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008686:	2303      	movs	r3, #3
 8008688:	e014      	b.n	80086b4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008690:	b2db      	uxtb	r3, r3
 8008692:	2b03      	cmp	r3, #3
 8008694:	d10d      	bne.n	80086b2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800869c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d007      	beq.n	80086b2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086aa:	78fa      	ldrb	r2, [r7, #3]
 80086ac:	4611      	mov	r1, r2
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3708      	adds	r7, #8
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	370c      	adds	r7, #12
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr

080086d2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80086d2:	b580      	push	{r7, lr}
 80086d4:	b082      	sub	sp, #8
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2201      	movs	r2, #1
 80086de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d009      	beq.n	8008700 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	6852      	ldr	r2, [r2, #4]
 80086f8:	b2d2      	uxtb	r2, r2
 80086fa:	4611      	mov	r1, r2
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	4798      	blx	r3
  }

  return USBD_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3708      	adds	r7, #8
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800870a:	b480      	push	{r7}
 800870c:	b087      	sub	sp, #28
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	3301      	adds	r3, #1
 8008720:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008728:	8a3b      	ldrh	r3, [r7, #16]
 800872a:	021b      	lsls	r3, r3, #8
 800872c:	b21a      	sxth	r2, r3
 800872e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008732:	4313      	orrs	r3, r2
 8008734:	b21b      	sxth	r3, r3
 8008736:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008738:	89fb      	ldrh	r3, [r7, #14]
}
 800873a:	4618      	mov	r0, r3
 800873c:	371c      	adds	r7, #28
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr
	...

08008748 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008752:	2300      	movs	r3, #0
 8008754:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800875e:	2b40      	cmp	r3, #64	; 0x40
 8008760:	d005      	beq.n	800876e <USBD_StdDevReq+0x26>
 8008762:	2b40      	cmp	r3, #64	; 0x40
 8008764:	d853      	bhi.n	800880e <USBD_StdDevReq+0xc6>
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00b      	beq.n	8008782 <USBD_StdDevReq+0x3a>
 800876a:	2b20      	cmp	r3, #32
 800876c:	d14f      	bne.n	800880e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	6839      	ldr	r1, [r7, #0]
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	4798      	blx	r3
 800877c:	4603      	mov	r3, r0
 800877e:	73fb      	strb	r3, [r7, #15]
      break;
 8008780:	e04a      	b.n	8008818 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	785b      	ldrb	r3, [r3, #1]
 8008786:	2b09      	cmp	r3, #9
 8008788:	d83b      	bhi.n	8008802 <USBD_StdDevReq+0xba>
 800878a:	a201      	add	r2, pc, #4	; (adr r2, 8008790 <USBD_StdDevReq+0x48>)
 800878c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008790:	080087e5 	.word	0x080087e5
 8008794:	080087f9 	.word	0x080087f9
 8008798:	08008803 	.word	0x08008803
 800879c:	080087ef 	.word	0x080087ef
 80087a0:	08008803 	.word	0x08008803
 80087a4:	080087c3 	.word	0x080087c3
 80087a8:	080087b9 	.word	0x080087b9
 80087ac:	08008803 	.word	0x08008803
 80087b0:	080087db 	.word	0x080087db
 80087b4:	080087cd 	.word	0x080087cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80087b8:	6839      	ldr	r1, [r7, #0]
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f9de 	bl	8008b7c <USBD_GetDescriptor>
          break;
 80087c0:	e024      	b.n	800880c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80087c2:	6839      	ldr	r1, [r7, #0]
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 fb43 	bl	8008e50 <USBD_SetAddress>
          break;
 80087ca:	e01f      	b.n	800880c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80087cc:	6839      	ldr	r1, [r7, #0]
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fb82 	bl	8008ed8 <USBD_SetConfig>
 80087d4:	4603      	mov	r3, r0
 80087d6:	73fb      	strb	r3, [r7, #15]
          break;
 80087d8:	e018      	b.n	800880c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80087da:	6839      	ldr	r1, [r7, #0]
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 fc21 	bl	8009024 <USBD_GetConfig>
          break;
 80087e2:	e013      	b.n	800880c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80087e4:	6839      	ldr	r1, [r7, #0]
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 fc52 	bl	8009090 <USBD_GetStatus>
          break;
 80087ec:	e00e      	b.n	800880c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80087ee:	6839      	ldr	r1, [r7, #0]
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 fc81 	bl	80090f8 <USBD_SetFeature>
          break;
 80087f6:	e009      	b.n	800880c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80087f8:	6839      	ldr	r1, [r7, #0]
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 fc90 	bl	8009120 <USBD_ClrFeature>
          break;
 8008800:	e004      	b.n	800880c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008802:	6839      	ldr	r1, [r7, #0]
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 fce7 	bl	80091d8 <USBD_CtlError>
          break;
 800880a:	bf00      	nop
      }
      break;
 800880c:	e004      	b.n	8008818 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fce1 	bl	80091d8 <USBD_CtlError>
      break;
 8008816:	bf00      	nop
  }

  return ret;
 8008818:	7bfb      	ldrb	r3, [r7, #15]
}
 800881a:	4618      	mov	r0, r3
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop

08008824 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800882e:	2300      	movs	r3, #0
 8008830:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800883a:	2b40      	cmp	r3, #64	; 0x40
 800883c:	d005      	beq.n	800884a <USBD_StdItfReq+0x26>
 800883e:	2b40      	cmp	r3, #64	; 0x40
 8008840:	d82f      	bhi.n	80088a2 <USBD_StdItfReq+0x7e>
 8008842:	2b00      	cmp	r3, #0
 8008844:	d001      	beq.n	800884a <USBD_StdItfReq+0x26>
 8008846:	2b20      	cmp	r3, #32
 8008848:	d12b      	bne.n	80088a2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008850:	b2db      	uxtb	r3, r3
 8008852:	3b01      	subs	r3, #1
 8008854:	2b02      	cmp	r3, #2
 8008856:	d81d      	bhi.n	8008894 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	889b      	ldrh	r3, [r3, #4]
 800885c:	b2db      	uxtb	r3, r3
 800885e:	2b01      	cmp	r3, #1
 8008860:	d813      	bhi.n	800888a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	6839      	ldr	r1, [r7, #0]
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	4798      	blx	r3
 8008870:	4603      	mov	r3, r0
 8008872:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	88db      	ldrh	r3, [r3, #6]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d110      	bne.n	800889e <USBD_StdItfReq+0x7a>
 800887c:	7bfb      	ldrb	r3, [r7, #15]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10d      	bne.n	800889e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fd73 	bl	800936e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008888:	e009      	b.n	800889e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800888a:	6839      	ldr	r1, [r7, #0]
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 fca3 	bl	80091d8 <USBD_CtlError>
          break;
 8008892:	e004      	b.n	800889e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008894:	6839      	ldr	r1, [r7, #0]
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 fc9e 	bl	80091d8 <USBD_CtlError>
          break;
 800889c:	e000      	b.n	80088a0 <USBD_StdItfReq+0x7c>
          break;
 800889e:	bf00      	nop
      }
      break;
 80088a0:	e004      	b.n	80088ac <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80088a2:	6839      	ldr	r1, [r7, #0]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 fc97 	bl	80091d8 <USBD_CtlError>
      break;
 80088aa:	bf00      	nop
  }

  return ret;
 80088ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b084      	sub	sp, #16
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
 80088be:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80088c0:	2300      	movs	r3, #0
 80088c2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	889b      	ldrh	r3, [r3, #4]
 80088c8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088d2:	2b40      	cmp	r3, #64	; 0x40
 80088d4:	d007      	beq.n	80088e6 <USBD_StdEPReq+0x30>
 80088d6:	2b40      	cmp	r3, #64	; 0x40
 80088d8:	f200 8145 	bhi.w	8008b66 <USBD_StdEPReq+0x2b0>
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00c      	beq.n	80088fa <USBD_StdEPReq+0x44>
 80088e0:	2b20      	cmp	r3, #32
 80088e2:	f040 8140 	bne.w	8008b66 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	6839      	ldr	r1, [r7, #0]
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	4798      	blx	r3
 80088f4:	4603      	mov	r3, r0
 80088f6:	73fb      	strb	r3, [r7, #15]
      break;
 80088f8:	e13a      	b.n	8008b70 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	785b      	ldrb	r3, [r3, #1]
 80088fe:	2b03      	cmp	r3, #3
 8008900:	d007      	beq.n	8008912 <USBD_StdEPReq+0x5c>
 8008902:	2b03      	cmp	r3, #3
 8008904:	f300 8129 	bgt.w	8008b5a <USBD_StdEPReq+0x2a4>
 8008908:	2b00      	cmp	r3, #0
 800890a:	d07f      	beq.n	8008a0c <USBD_StdEPReq+0x156>
 800890c:	2b01      	cmp	r3, #1
 800890e:	d03c      	beq.n	800898a <USBD_StdEPReq+0xd4>
 8008910:	e123      	b.n	8008b5a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008918:	b2db      	uxtb	r3, r3
 800891a:	2b02      	cmp	r3, #2
 800891c:	d002      	beq.n	8008924 <USBD_StdEPReq+0x6e>
 800891e:	2b03      	cmp	r3, #3
 8008920:	d016      	beq.n	8008950 <USBD_StdEPReq+0x9a>
 8008922:	e02c      	b.n	800897e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008924:	7bbb      	ldrb	r3, [r7, #14]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d00d      	beq.n	8008946 <USBD_StdEPReq+0x90>
 800892a:	7bbb      	ldrb	r3, [r7, #14]
 800892c:	2b80      	cmp	r3, #128	; 0x80
 800892e:	d00a      	beq.n	8008946 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008930:	7bbb      	ldrb	r3, [r7, #14]
 8008932:	4619      	mov	r1, r3
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f001 fc99 	bl	800a26c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800893a:	2180      	movs	r1, #128	; 0x80
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f001 fc95 	bl	800a26c <USBD_LL_StallEP>
 8008942:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008944:	e020      	b.n	8008988 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008946:	6839      	ldr	r1, [r7, #0]
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 fc45 	bl	80091d8 <USBD_CtlError>
              break;
 800894e:	e01b      	b.n	8008988 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	885b      	ldrh	r3, [r3, #2]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d10e      	bne.n	8008976 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008958:	7bbb      	ldrb	r3, [r7, #14]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00b      	beq.n	8008976 <USBD_StdEPReq+0xc0>
 800895e:	7bbb      	ldrb	r3, [r7, #14]
 8008960:	2b80      	cmp	r3, #128	; 0x80
 8008962:	d008      	beq.n	8008976 <USBD_StdEPReq+0xc0>
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	88db      	ldrh	r3, [r3, #6]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d104      	bne.n	8008976 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800896c:	7bbb      	ldrb	r3, [r7, #14]
 800896e:	4619      	mov	r1, r3
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f001 fc7b 	bl	800a26c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 fcf9 	bl	800936e <USBD_CtlSendStatus>

              break;
 800897c:	e004      	b.n	8008988 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800897e:	6839      	ldr	r1, [r7, #0]
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 fc29 	bl	80091d8 <USBD_CtlError>
              break;
 8008986:	bf00      	nop
          }
          break;
 8008988:	e0ec      	b.n	8008b64 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008990:	b2db      	uxtb	r3, r3
 8008992:	2b02      	cmp	r3, #2
 8008994:	d002      	beq.n	800899c <USBD_StdEPReq+0xe6>
 8008996:	2b03      	cmp	r3, #3
 8008998:	d016      	beq.n	80089c8 <USBD_StdEPReq+0x112>
 800899a:	e030      	b.n	80089fe <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800899c:	7bbb      	ldrb	r3, [r7, #14]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00d      	beq.n	80089be <USBD_StdEPReq+0x108>
 80089a2:	7bbb      	ldrb	r3, [r7, #14]
 80089a4:	2b80      	cmp	r3, #128	; 0x80
 80089a6:	d00a      	beq.n	80089be <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80089a8:	7bbb      	ldrb	r3, [r7, #14]
 80089aa:	4619      	mov	r1, r3
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f001 fc5d 	bl	800a26c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80089b2:	2180      	movs	r1, #128	; 0x80
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f001 fc59 	bl	800a26c <USBD_LL_StallEP>
 80089ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80089bc:	e025      	b.n	8008a0a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80089be:	6839      	ldr	r1, [r7, #0]
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 fc09 	bl	80091d8 <USBD_CtlError>
              break;
 80089c6:	e020      	b.n	8008a0a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	885b      	ldrh	r3, [r3, #2]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d11b      	bne.n	8008a08 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80089d0:	7bbb      	ldrb	r3, [r7, #14]
 80089d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d004      	beq.n	80089e4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80089da:	7bbb      	ldrb	r3, [r7, #14]
 80089dc:	4619      	mov	r1, r3
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f001 fc63 	bl	800a2aa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 fcc2 	bl	800936e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	6839      	ldr	r1, [r7, #0]
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	4798      	blx	r3
 80089f8:	4603      	mov	r3, r0
 80089fa:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80089fc:	e004      	b.n	8008a08 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80089fe:	6839      	ldr	r1, [r7, #0]
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fbe9 	bl	80091d8 <USBD_CtlError>
              break;
 8008a06:	e000      	b.n	8008a0a <USBD_StdEPReq+0x154>
              break;
 8008a08:	bf00      	nop
          }
          break;
 8008a0a:	e0ab      	b.n	8008b64 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	2b02      	cmp	r3, #2
 8008a16:	d002      	beq.n	8008a1e <USBD_StdEPReq+0x168>
 8008a18:	2b03      	cmp	r3, #3
 8008a1a:	d032      	beq.n	8008a82 <USBD_StdEPReq+0x1cc>
 8008a1c:	e097      	b.n	8008b4e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a1e:	7bbb      	ldrb	r3, [r7, #14]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d007      	beq.n	8008a34 <USBD_StdEPReq+0x17e>
 8008a24:	7bbb      	ldrb	r3, [r7, #14]
 8008a26:	2b80      	cmp	r3, #128	; 0x80
 8008a28:	d004      	beq.n	8008a34 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008a2a:	6839      	ldr	r1, [r7, #0]
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 fbd3 	bl	80091d8 <USBD_CtlError>
                break;
 8008a32:	e091      	b.n	8008b58 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	da0b      	bge.n	8008a54 <USBD_StdEPReq+0x19e>
 8008a3c:	7bbb      	ldrb	r3, [r7, #14]
 8008a3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a42:	4613      	mov	r3, r2
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	4413      	add	r3, r2
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	3310      	adds	r3, #16
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	4413      	add	r3, r2
 8008a50:	3304      	adds	r3, #4
 8008a52:	e00b      	b.n	8008a6c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a54:	7bbb      	ldrb	r3, [r7, #14]
 8008a56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	4413      	add	r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	4413      	add	r3, r2
 8008a6a:	3304      	adds	r3, #4
 8008a6c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	2200      	movs	r2, #0
 8008a72:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	2202      	movs	r2, #2
 8008a78:	4619      	mov	r1, r3
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fc1d 	bl	80092ba <USBD_CtlSendData>
              break;
 8008a80:	e06a      	b.n	8008b58 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008a82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	da11      	bge.n	8008aae <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a8a:	7bbb      	ldrb	r3, [r7, #14]
 8008a8c:	f003 020f 	and.w	r2, r3, #15
 8008a90:	6879      	ldr	r1, [r7, #4]
 8008a92:	4613      	mov	r3, r2
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	4413      	add	r3, r2
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	440b      	add	r3, r1
 8008a9c:	3324      	adds	r3, #36	; 0x24
 8008a9e:	881b      	ldrh	r3, [r3, #0]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d117      	bne.n	8008ad4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008aa4:	6839      	ldr	r1, [r7, #0]
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fb96 	bl	80091d8 <USBD_CtlError>
                  break;
 8008aac:	e054      	b.n	8008b58 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008aae:	7bbb      	ldrb	r3, [r7, #14]
 8008ab0:	f003 020f 	and.w	r2, r3, #15
 8008ab4:	6879      	ldr	r1, [r7, #4]
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	4413      	add	r3, r2
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	440b      	add	r3, r1
 8008ac0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008ac4:	881b      	ldrh	r3, [r3, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d104      	bne.n	8008ad4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008aca:	6839      	ldr	r1, [r7, #0]
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 fb83 	bl	80091d8 <USBD_CtlError>
                  break;
 8008ad2:	e041      	b.n	8008b58 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ad4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	da0b      	bge.n	8008af4 <USBD_StdEPReq+0x23e>
 8008adc:	7bbb      	ldrb	r3, [r7, #14]
 8008ade:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4413      	add	r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	3310      	adds	r3, #16
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	4413      	add	r3, r2
 8008af0:	3304      	adds	r3, #4
 8008af2:	e00b      	b.n	8008b0c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008af4:	7bbb      	ldrb	r3, [r7, #14]
 8008af6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008afa:	4613      	mov	r3, r2
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	4413      	add	r3, r2
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	4413      	add	r3, r2
 8008b0a:	3304      	adds	r3, #4
 8008b0c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008b0e:	7bbb      	ldrb	r3, [r7, #14]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d002      	beq.n	8008b1a <USBD_StdEPReq+0x264>
 8008b14:	7bbb      	ldrb	r3, [r7, #14]
 8008b16:	2b80      	cmp	r3, #128	; 0x80
 8008b18:	d103      	bne.n	8008b22 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	601a      	str	r2, [r3, #0]
 8008b20:	e00e      	b.n	8008b40 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008b22:	7bbb      	ldrb	r3, [r7, #14]
 8008b24:	4619      	mov	r1, r3
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f001 fbde 	bl	800a2e8 <USBD_LL_IsStallEP>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d003      	beq.n	8008b3a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	2201      	movs	r2, #1
 8008b36:	601a      	str	r2, [r3, #0]
 8008b38:	e002      	b.n	8008b40 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	2202      	movs	r2, #2
 8008b44:	4619      	mov	r1, r3
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 fbb7 	bl	80092ba <USBD_CtlSendData>
              break;
 8008b4c:	e004      	b.n	8008b58 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008b4e:	6839      	ldr	r1, [r7, #0]
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 fb41 	bl	80091d8 <USBD_CtlError>
              break;
 8008b56:	bf00      	nop
          }
          break;
 8008b58:	e004      	b.n	8008b64 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008b5a:	6839      	ldr	r1, [r7, #0]
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 fb3b 	bl	80091d8 <USBD_CtlError>
          break;
 8008b62:	bf00      	nop
      }
      break;
 8008b64:	e004      	b.n	8008b70 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008b66:	6839      	ldr	r1, [r7, #0]
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 fb35 	bl	80091d8 <USBD_CtlError>
      break;
 8008b6e:	bf00      	nop
  }

  return ret;
 8008b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
	...

08008b7c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b86:	2300      	movs	r3, #0
 8008b88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	885b      	ldrh	r3, [r3, #2]
 8008b96:	0a1b      	lsrs	r3, r3, #8
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	2b06      	cmp	r3, #6
 8008b9e:	f200 8128 	bhi.w	8008df2 <USBD_GetDescriptor+0x276>
 8008ba2:	a201      	add	r2, pc, #4	; (adr r2, 8008ba8 <USBD_GetDescriptor+0x2c>)
 8008ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba8:	08008bc5 	.word	0x08008bc5
 8008bac:	08008bdd 	.word	0x08008bdd
 8008bb0:	08008c1d 	.word	0x08008c1d
 8008bb4:	08008df3 	.word	0x08008df3
 8008bb8:	08008df3 	.word	0x08008df3
 8008bbc:	08008d93 	.word	0x08008d93
 8008bc0:	08008dbf 	.word	0x08008dbf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	7c12      	ldrb	r2, [r2, #16]
 8008bd0:	f107 0108 	add.w	r1, r7, #8
 8008bd4:	4610      	mov	r0, r2
 8008bd6:	4798      	blx	r3
 8008bd8:	60f8      	str	r0, [r7, #12]
      break;
 8008bda:	e112      	b.n	8008e02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	7c1b      	ldrb	r3, [r3, #16]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d10d      	bne.n	8008c00 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bec:	f107 0208 	add.w	r2, r7, #8
 8008bf0:	4610      	mov	r0, r2
 8008bf2:	4798      	blx	r3
 8008bf4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	2202      	movs	r2, #2
 8008bfc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008bfe:	e100      	b.n	8008e02 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c08:	f107 0208 	add.w	r2, r7, #8
 8008c0c:	4610      	mov	r0, r2
 8008c0e:	4798      	blx	r3
 8008c10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	3301      	adds	r3, #1
 8008c16:	2202      	movs	r2, #2
 8008c18:	701a      	strb	r2, [r3, #0]
      break;
 8008c1a:	e0f2      	b.n	8008e02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	885b      	ldrh	r3, [r3, #2]
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	2b05      	cmp	r3, #5
 8008c24:	f200 80ac 	bhi.w	8008d80 <USBD_GetDescriptor+0x204>
 8008c28:	a201      	add	r2, pc, #4	; (adr r2, 8008c30 <USBD_GetDescriptor+0xb4>)
 8008c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c2e:	bf00      	nop
 8008c30:	08008c49 	.word	0x08008c49
 8008c34:	08008c7d 	.word	0x08008c7d
 8008c38:	08008cb1 	.word	0x08008cb1
 8008c3c:	08008ce5 	.word	0x08008ce5
 8008c40:	08008d19 	.word	0x08008d19
 8008c44:	08008d4d 	.word	0x08008d4d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00b      	beq.n	8008c6c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	7c12      	ldrb	r2, [r2, #16]
 8008c60:	f107 0108 	add.w	r1, r7, #8
 8008c64:	4610      	mov	r0, r2
 8008c66:	4798      	blx	r3
 8008c68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c6a:	e091      	b.n	8008d90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c6c:	6839      	ldr	r1, [r7, #0]
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fab2 	bl	80091d8 <USBD_CtlError>
            err++;
 8008c74:	7afb      	ldrb	r3, [r7, #11]
 8008c76:	3301      	adds	r3, #1
 8008c78:	72fb      	strb	r3, [r7, #11]
          break;
 8008c7a:	e089      	b.n	8008d90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00b      	beq.n	8008ca0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	7c12      	ldrb	r2, [r2, #16]
 8008c94:	f107 0108 	add.w	r1, r7, #8
 8008c98:	4610      	mov	r0, r2
 8008c9a:	4798      	blx	r3
 8008c9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c9e:	e077      	b.n	8008d90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ca0:	6839      	ldr	r1, [r7, #0]
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 fa98 	bl	80091d8 <USBD_CtlError>
            err++;
 8008ca8:	7afb      	ldrb	r3, [r7, #11]
 8008caa:	3301      	adds	r3, #1
 8008cac:	72fb      	strb	r3, [r7, #11]
          break;
 8008cae:	e06f      	b.n	8008d90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d00b      	beq.n	8008cd4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	7c12      	ldrb	r2, [r2, #16]
 8008cc8:	f107 0108 	add.w	r1, r7, #8
 8008ccc:	4610      	mov	r0, r2
 8008cce:	4798      	blx	r3
 8008cd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cd2:	e05d      	b.n	8008d90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cd4:	6839      	ldr	r1, [r7, #0]
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 fa7e 	bl	80091d8 <USBD_CtlError>
            err++;
 8008cdc:	7afb      	ldrb	r3, [r7, #11]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ce2:	e055      	b.n	8008d90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00b      	beq.n	8008d08 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cf6:	691b      	ldr	r3, [r3, #16]
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	7c12      	ldrb	r2, [r2, #16]
 8008cfc:	f107 0108 	add.w	r1, r7, #8
 8008d00:	4610      	mov	r0, r2
 8008d02:	4798      	blx	r3
 8008d04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d06:	e043      	b.n	8008d90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d08:	6839      	ldr	r1, [r7, #0]
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 fa64 	bl	80091d8 <USBD_CtlError>
            err++;
 8008d10:	7afb      	ldrb	r3, [r7, #11]
 8008d12:	3301      	adds	r3, #1
 8008d14:	72fb      	strb	r3, [r7, #11]
          break;
 8008d16:	e03b      	b.n	8008d90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d1e:	695b      	ldr	r3, [r3, #20]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00b      	beq.n	8008d3c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d2a:	695b      	ldr	r3, [r3, #20]
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	7c12      	ldrb	r2, [r2, #16]
 8008d30:	f107 0108 	add.w	r1, r7, #8
 8008d34:	4610      	mov	r0, r2
 8008d36:	4798      	blx	r3
 8008d38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d3a:	e029      	b.n	8008d90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d3c:	6839      	ldr	r1, [r7, #0]
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fa4a 	bl	80091d8 <USBD_CtlError>
            err++;
 8008d44:	7afb      	ldrb	r3, [r7, #11]
 8008d46:	3301      	adds	r3, #1
 8008d48:	72fb      	strb	r3, [r7, #11]
          break;
 8008d4a:	e021      	b.n	8008d90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d52:	699b      	ldr	r3, [r3, #24]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00b      	beq.n	8008d70 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d5e:	699b      	ldr	r3, [r3, #24]
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	7c12      	ldrb	r2, [r2, #16]
 8008d64:	f107 0108 	add.w	r1, r7, #8
 8008d68:	4610      	mov	r0, r2
 8008d6a:	4798      	blx	r3
 8008d6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d6e:	e00f      	b.n	8008d90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d70:	6839      	ldr	r1, [r7, #0]
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 fa30 	bl	80091d8 <USBD_CtlError>
            err++;
 8008d78:	7afb      	ldrb	r3, [r7, #11]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d7e:	e007      	b.n	8008d90 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008d80:	6839      	ldr	r1, [r7, #0]
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 fa28 	bl	80091d8 <USBD_CtlError>
          err++;
 8008d88:	7afb      	ldrb	r3, [r7, #11]
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008d8e:	bf00      	nop
      }
      break;
 8008d90:	e037      	b.n	8008e02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	7c1b      	ldrb	r3, [r3, #16]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d109      	bne.n	8008dae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008da2:	f107 0208 	add.w	r2, r7, #8
 8008da6:	4610      	mov	r0, r2
 8008da8:	4798      	blx	r3
 8008daa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008dac:	e029      	b.n	8008e02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008dae:	6839      	ldr	r1, [r7, #0]
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 fa11 	bl	80091d8 <USBD_CtlError>
        err++;
 8008db6:	7afb      	ldrb	r3, [r7, #11]
 8008db8:	3301      	adds	r3, #1
 8008dba:	72fb      	strb	r3, [r7, #11]
      break;
 8008dbc:	e021      	b.n	8008e02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	7c1b      	ldrb	r3, [r3, #16]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d10d      	bne.n	8008de2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dce:	f107 0208 	add.w	r2, r7, #8
 8008dd2:	4610      	mov	r0, r2
 8008dd4:	4798      	blx	r3
 8008dd6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	2207      	movs	r2, #7
 8008dde:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008de0:	e00f      	b.n	8008e02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008de2:	6839      	ldr	r1, [r7, #0]
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 f9f7 	bl	80091d8 <USBD_CtlError>
        err++;
 8008dea:	7afb      	ldrb	r3, [r7, #11]
 8008dec:	3301      	adds	r3, #1
 8008dee:	72fb      	strb	r3, [r7, #11]
      break;
 8008df0:	e007      	b.n	8008e02 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008df2:	6839      	ldr	r1, [r7, #0]
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 f9ef 	bl	80091d8 <USBD_CtlError>
      err++;
 8008dfa:	7afb      	ldrb	r3, [r7, #11]
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	72fb      	strb	r3, [r7, #11]
      break;
 8008e00:	bf00      	nop
  }

  if (err != 0U)
 8008e02:	7afb      	ldrb	r3, [r7, #11]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d11e      	bne.n	8008e46 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	88db      	ldrh	r3, [r3, #6]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d016      	beq.n	8008e3e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008e10:	893b      	ldrh	r3, [r7, #8]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d00e      	beq.n	8008e34 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	88da      	ldrh	r2, [r3, #6]
 8008e1a:	893b      	ldrh	r3, [r7, #8]
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	bf28      	it	cs
 8008e20:	4613      	movcs	r3, r2
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008e26:	893b      	ldrh	r3, [r7, #8]
 8008e28:	461a      	mov	r2, r3
 8008e2a:	68f9      	ldr	r1, [r7, #12]
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 fa44 	bl	80092ba <USBD_CtlSendData>
 8008e32:	e009      	b.n	8008e48 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008e34:	6839      	ldr	r1, [r7, #0]
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 f9ce 	bl	80091d8 <USBD_CtlError>
 8008e3c:	e004      	b.n	8008e48 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fa95 	bl	800936e <USBD_CtlSendStatus>
 8008e44:	e000      	b.n	8008e48 <USBD_GetDescriptor+0x2cc>
    return;
 8008e46:	bf00      	nop
  }
}
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop

08008e50 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	889b      	ldrh	r3, [r3, #4]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d131      	bne.n	8008ec6 <USBD_SetAddress+0x76>
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	88db      	ldrh	r3, [r3, #6]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d12d      	bne.n	8008ec6 <USBD_SetAddress+0x76>
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	885b      	ldrh	r3, [r3, #2]
 8008e6e:	2b7f      	cmp	r3, #127	; 0x7f
 8008e70:	d829      	bhi.n	8008ec6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	885b      	ldrh	r3, [r3, #2]
 8008e76:	b2db      	uxtb	r3, r3
 8008e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e7c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	2b03      	cmp	r3, #3
 8008e88:	d104      	bne.n	8008e94 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008e8a:	6839      	ldr	r1, [r7, #0]
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 f9a3 	bl	80091d8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e92:	e01d      	b.n	8008ed0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	7bfa      	ldrb	r2, [r7, #15]
 8008e98:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e9c:	7bfb      	ldrb	r3, [r7, #15]
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f001 fa4d 	bl	800a340 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 fa61 	bl	800936e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008eac:	7bfb      	ldrb	r3, [r7, #15]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d004      	beq.n	8008ebc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2202      	movs	r2, #2
 8008eb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eba:	e009      	b.n	8008ed0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ec4:	e004      	b.n	8008ed0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008ec6:	6839      	ldr	r1, [r7, #0]
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 f985 	bl	80091d8 <USBD_CtlError>
  }
}
 8008ece:	bf00      	nop
 8008ed0:	bf00      	nop
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	885b      	ldrh	r3, [r3, #2]
 8008eea:	b2da      	uxtb	r2, r3
 8008eec:	4b4c      	ldr	r3, [pc, #304]	; (8009020 <USBD_SetConfig+0x148>)
 8008eee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ef0:	4b4b      	ldr	r3, [pc, #300]	; (8009020 <USBD_SetConfig+0x148>)
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d905      	bls.n	8008f04 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008ef8:	6839      	ldr	r1, [r7, #0]
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 f96c 	bl	80091d8 <USBD_CtlError>
    return USBD_FAIL;
 8008f00:	2303      	movs	r3, #3
 8008f02:	e088      	b.n	8009016 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	d002      	beq.n	8008f16 <USBD_SetConfig+0x3e>
 8008f10:	2b03      	cmp	r3, #3
 8008f12:	d025      	beq.n	8008f60 <USBD_SetConfig+0x88>
 8008f14:	e071      	b.n	8008ffa <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008f16:	4b42      	ldr	r3, [pc, #264]	; (8009020 <USBD_SetConfig+0x148>)
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d01c      	beq.n	8008f58 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008f1e:	4b40      	ldr	r3, [pc, #256]	; (8009020 <USBD_SetConfig+0x148>)
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	461a      	mov	r2, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f28:	4b3d      	ldr	r3, [pc, #244]	; (8009020 <USBD_SetConfig+0x148>)
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f7ff f948 	bl	80081c4 <USBD_SetClassConfig>
 8008f34:	4603      	mov	r3, r0
 8008f36:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008f38:	7bfb      	ldrb	r3, [r7, #15]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d004      	beq.n	8008f48 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008f3e:	6839      	ldr	r1, [r7, #0]
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 f949 	bl	80091d8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f46:	e065      	b.n	8009014 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 fa10 	bl	800936e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2203      	movs	r2, #3
 8008f52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008f56:	e05d      	b.n	8009014 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 fa08 	bl	800936e <USBD_CtlSendStatus>
      break;
 8008f5e:	e059      	b.n	8009014 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008f60:	4b2f      	ldr	r3, [pc, #188]	; (8009020 <USBD_SetConfig+0x148>)
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d112      	bne.n	8008f8e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2202      	movs	r2, #2
 8008f6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008f70:	4b2b      	ldr	r3, [pc, #172]	; (8009020 <USBD_SetConfig+0x148>)
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	461a      	mov	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f7a:	4b29      	ldr	r3, [pc, #164]	; (8009020 <USBD_SetConfig+0x148>)
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	4619      	mov	r1, r3
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f7ff f93b 	bl	80081fc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 f9f1 	bl	800936e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f8c:	e042      	b.n	8009014 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008f8e:	4b24      	ldr	r3, [pc, #144]	; (8009020 <USBD_SetConfig+0x148>)
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	461a      	mov	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d02a      	beq.n	8008ff2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f7ff f929 	bl	80081fc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008faa:	4b1d      	ldr	r3, [pc, #116]	; (8009020 <USBD_SetConfig+0x148>)
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	461a      	mov	r2, r3
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008fb4:	4b1a      	ldr	r3, [pc, #104]	; (8009020 <USBD_SetConfig+0x148>)
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	4619      	mov	r1, r3
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f7ff f902 	bl	80081c4 <USBD_SetClassConfig>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008fc4:	7bfb      	ldrb	r3, [r7, #15]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00f      	beq.n	8008fea <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008fca:	6839      	ldr	r1, [r7, #0]
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 f903 	bl	80091d8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	4619      	mov	r1, r3
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f7ff f90e 	bl	80081fc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2202      	movs	r2, #2
 8008fe4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008fe8:	e014      	b.n	8009014 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 f9bf 	bl	800936e <USBD_CtlSendStatus>
      break;
 8008ff0:	e010      	b.n	8009014 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 f9bb 	bl	800936e <USBD_CtlSendStatus>
      break;
 8008ff8:	e00c      	b.n	8009014 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008ffa:	6839      	ldr	r1, [r7, #0]
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 f8eb 	bl	80091d8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009002:	4b07      	ldr	r3, [pc, #28]	; (8009020 <USBD_SetConfig+0x148>)
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	4619      	mov	r1, r3
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f7ff f8f7 	bl	80081fc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800900e:	2303      	movs	r3, #3
 8009010:	73fb      	strb	r3, [r7, #15]
      break;
 8009012:	bf00      	nop
  }

  return ret;
 8009014:	7bfb      	ldrb	r3, [r7, #15]
}
 8009016:	4618      	mov	r0, r3
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	2000019c 	.word	0x2000019c

08009024 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	88db      	ldrh	r3, [r3, #6]
 8009032:	2b01      	cmp	r3, #1
 8009034:	d004      	beq.n	8009040 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009036:	6839      	ldr	r1, [r7, #0]
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 f8cd 	bl	80091d8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800903e:	e023      	b.n	8009088 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009046:	b2db      	uxtb	r3, r3
 8009048:	2b02      	cmp	r3, #2
 800904a:	dc02      	bgt.n	8009052 <USBD_GetConfig+0x2e>
 800904c:	2b00      	cmp	r3, #0
 800904e:	dc03      	bgt.n	8009058 <USBD_GetConfig+0x34>
 8009050:	e015      	b.n	800907e <USBD_GetConfig+0x5a>
 8009052:	2b03      	cmp	r3, #3
 8009054:	d00b      	beq.n	800906e <USBD_GetConfig+0x4a>
 8009056:	e012      	b.n	800907e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	3308      	adds	r3, #8
 8009062:	2201      	movs	r2, #1
 8009064:	4619      	mov	r1, r3
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 f927 	bl	80092ba <USBD_CtlSendData>
        break;
 800906c:	e00c      	b.n	8009088 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	3304      	adds	r3, #4
 8009072:	2201      	movs	r2, #1
 8009074:	4619      	mov	r1, r3
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 f91f 	bl	80092ba <USBD_CtlSendData>
        break;
 800907c:	e004      	b.n	8009088 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800907e:	6839      	ldr	r1, [r7, #0]
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 f8a9 	bl	80091d8 <USBD_CtlError>
        break;
 8009086:	bf00      	nop
}
 8009088:	bf00      	nop
 800908a:	3708      	adds	r7, #8
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	3b01      	subs	r3, #1
 80090a4:	2b02      	cmp	r3, #2
 80090a6:	d81e      	bhi.n	80090e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	88db      	ldrh	r3, [r3, #6]
 80090ac:	2b02      	cmp	r3, #2
 80090ae:	d004      	beq.n	80090ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80090b0:	6839      	ldr	r1, [r7, #0]
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 f890 	bl	80091d8 <USBD_CtlError>
        break;
 80090b8:	e01a      	b.n	80090f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2201      	movs	r2, #1
 80090be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d005      	beq.n	80090d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	f043 0202 	orr.w	r2, r3, #2
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	330c      	adds	r3, #12
 80090da:	2202      	movs	r2, #2
 80090dc:	4619      	mov	r1, r3
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 f8eb 	bl	80092ba <USBD_CtlSendData>
      break;
 80090e4:	e004      	b.n	80090f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80090e6:	6839      	ldr	r1, [r7, #0]
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 f875 	bl	80091d8 <USBD_CtlError>
      break;
 80090ee:	bf00      	nop
  }
}
 80090f0:	bf00      	nop
 80090f2:	3708      	adds	r7, #8
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	885b      	ldrh	r3, [r3, #2]
 8009106:	2b01      	cmp	r3, #1
 8009108:	d106      	bne.n	8009118 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2201      	movs	r2, #1
 800910e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f92b 	bl	800936e <USBD_CtlSendStatus>
  }
}
 8009118:	bf00      	nop
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009130:	b2db      	uxtb	r3, r3
 8009132:	3b01      	subs	r3, #1
 8009134:	2b02      	cmp	r3, #2
 8009136:	d80b      	bhi.n	8009150 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	885b      	ldrh	r3, [r3, #2]
 800913c:	2b01      	cmp	r3, #1
 800913e:	d10c      	bne.n	800915a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f910 	bl	800936e <USBD_CtlSendStatus>
      }
      break;
 800914e:	e004      	b.n	800915a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009150:	6839      	ldr	r1, [r7, #0]
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 f840 	bl	80091d8 <USBD_CtlError>
      break;
 8009158:	e000      	b.n	800915c <USBD_ClrFeature+0x3c>
      break;
 800915a:	bf00      	nop
  }
}
 800915c:	bf00      	nop
 800915e:	3708      	adds	r7, #8
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	781a      	ldrb	r2, [r3, #0]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	3301      	adds	r3, #1
 800917e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	781a      	ldrb	r2, [r3, #0]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	3301      	adds	r3, #1
 800918c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800918e:	68f8      	ldr	r0, [r7, #12]
 8009190:	f7ff fabb 	bl	800870a <SWAPBYTE>
 8009194:	4603      	mov	r3, r0
 8009196:	461a      	mov	r2, r3
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	3301      	adds	r3, #1
 80091a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	3301      	adds	r3, #1
 80091a6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80091a8:	68f8      	ldr	r0, [r7, #12]
 80091aa:	f7ff faae 	bl	800870a <SWAPBYTE>
 80091ae:	4603      	mov	r3, r0
 80091b0:	461a      	mov	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	3301      	adds	r3, #1
 80091ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	3301      	adds	r3, #1
 80091c0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f7ff faa1 	bl	800870a <SWAPBYTE>
 80091c8:	4603      	mov	r3, r0
 80091ca:	461a      	mov	r2, r3
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	80da      	strh	r2, [r3, #6]
}
 80091d0:	bf00      	nop
 80091d2:	3710      	adds	r7, #16
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80091e2:	2180      	movs	r1, #128	; 0x80
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f001 f841 	bl	800a26c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80091ea:	2100      	movs	r1, #0
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f001 f83d 	bl	800a26c <USBD_LL_StallEP>
}
 80091f2:	bf00      	nop
 80091f4:	3708      	adds	r7, #8
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b086      	sub	sp, #24
 80091fe:	af00      	add	r7, sp, #0
 8009200:	60f8      	str	r0, [r7, #12]
 8009202:	60b9      	str	r1, [r7, #8]
 8009204:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009206:	2300      	movs	r3, #0
 8009208:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d036      	beq.n	800927e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009214:	6938      	ldr	r0, [r7, #16]
 8009216:	f000 f836 	bl	8009286 <USBD_GetLen>
 800921a:	4603      	mov	r3, r0
 800921c:	3301      	adds	r3, #1
 800921e:	b29b      	uxth	r3, r3
 8009220:	005b      	lsls	r3, r3, #1
 8009222:	b29a      	uxth	r2, r3
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009228:	7dfb      	ldrb	r3, [r7, #23]
 800922a:	68ba      	ldr	r2, [r7, #8]
 800922c:	4413      	add	r3, r2
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	7812      	ldrb	r2, [r2, #0]
 8009232:	701a      	strb	r2, [r3, #0]
  idx++;
 8009234:	7dfb      	ldrb	r3, [r7, #23]
 8009236:	3301      	adds	r3, #1
 8009238:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800923a:	7dfb      	ldrb	r3, [r7, #23]
 800923c:	68ba      	ldr	r2, [r7, #8]
 800923e:	4413      	add	r3, r2
 8009240:	2203      	movs	r2, #3
 8009242:	701a      	strb	r2, [r3, #0]
  idx++;
 8009244:	7dfb      	ldrb	r3, [r7, #23]
 8009246:	3301      	adds	r3, #1
 8009248:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800924a:	e013      	b.n	8009274 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800924c:	7dfb      	ldrb	r3, [r7, #23]
 800924e:	68ba      	ldr	r2, [r7, #8]
 8009250:	4413      	add	r3, r2
 8009252:	693a      	ldr	r2, [r7, #16]
 8009254:	7812      	ldrb	r2, [r2, #0]
 8009256:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	3301      	adds	r3, #1
 800925c:	613b      	str	r3, [r7, #16]
    idx++;
 800925e:	7dfb      	ldrb	r3, [r7, #23]
 8009260:	3301      	adds	r3, #1
 8009262:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009264:	7dfb      	ldrb	r3, [r7, #23]
 8009266:	68ba      	ldr	r2, [r7, #8]
 8009268:	4413      	add	r3, r2
 800926a:	2200      	movs	r2, #0
 800926c:	701a      	strb	r2, [r3, #0]
    idx++;
 800926e:	7dfb      	ldrb	r3, [r7, #23]
 8009270:	3301      	adds	r3, #1
 8009272:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d1e7      	bne.n	800924c <USBD_GetString+0x52>
 800927c:	e000      	b.n	8009280 <USBD_GetString+0x86>
    return;
 800927e:	bf00      	nop
  }
}
 8009280:	3718      	adds	r7, #24
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009286:	b480      	push	{r7}
 8009288:	b085      	sub	sp, #20
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800928e:	2300      	movs	r3, #0
 8009290:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009296:	e005      	b.n	80092a4 <USBD_GetLen+0x1e>
  {
    len++;
 8009298:	7bfb      	ldrb	r3, [r7, #15]
 800929a:	3301      	adds	r3, #1
 800929c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	3301      	adds	r3, #1
 80092a2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d1f5      	bne.n	8009298 <USBD_GetLen+0x12>
  }

  return len;
 80092ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3714      	adds	r7, #20
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr

080092ba <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b084      	sub	sp, #16
 80092be:	af00      	add	r7, sp, #0
 80092c0:	60f8      	str	r0, [r7, #12]
 80092c2:	60b9      	str	r1, [r7, #8]
 80092c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2202      	movs	r2, #2
 80092ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	68ba      	ldr	r2, [r7, #8]
 80092de:	2100      	movs	r1, #0
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f001 f84c 	bl	800a37e <USBD_LL_Transmit>

  return USBD_OK;
 80092e6:	2300      	movs	r3, #0
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	68ba      	ldr	r2, [r7, #8]
 8009300:	2100      	movs	r1, #0
 8009302:	68f8      	ldr	r0, [r7, #12]
 8009304:	f001 f83b 	bl	800a37e <USBD_LL_Transmit>

  return USBD_OK;
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b084      	sub	sp, #16
 8009316:	af00      	add	r7, sp, #0
 8009318:	60f8      	str	r0, [r7, #12]
 800931a:	60b9      	str	r1, [r7, #8]
 800931c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2203      	movs	r2, #3
 8009322:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	68ba      	ldr	r2, [r7, #8]
 800933a:	2100      	movs	r1, #0
 800933c:	68f8      	ldr	r0, [r7, #12]
 800933e:	f001 f83f 	bl	800a3c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009342:	2300      	movs	r3, #0
}
 8009344:	4618      	mov	r0, r3
 8009346:	3710      	adds	r7, #16
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	68ba      	ldr	r2, [r7, #8]
 800935c:	2100      	movs	r1, #0
 800935e:	68f8      	ldr	r0, [r7, #12]
 8009360:	f001 f82e 	bl	800a3c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009364:	2300      	movs	r3, #0
}
 8009366:	4618      	mov	r0, r3
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b082      	sub	sp, #8
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2204      	movs	r2, #4
 800937a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800937e:	2300      	movs	r3, #0
 8009380:	2200      	movs	r2, #0
 8009382:	2100      	movs	r1, #0
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 fffa 	bl	800a37e <USBD_LL_Transmit>

  return USBD_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3708      	adds	r7, #8
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2205      	movs	r2, #5
 80093a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80093a4:	2300      	movs	r3, #0
 80093a6:	2200      	movs	r2, #0
 80093a8:	2100      	movs	r1, #0
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f001 f808 	bl	800a3c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3708      	adds	r7, #8
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
	...

080093bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80093bc:	b5b0      	push	{r4, r5, r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80093c2:	f7f7 f885 	bl	80004d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80093c6:	f000 f851 	bl	800946c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80093ca:	f000 f9cf 	bl	800976c <MX_GPIO_Init>
  MX_DMA_Init();
 80093ce:	f000 f9ad 	bl	800972c <MX_DMA_Init>
  MX_RTC_Init();
 80093d2:	f000 f92b 	bl	800962c <MX_RTC_Init>
  MX_SDIO_SD_Init();
 80093d6:	f000 f94f 	bl	8009678 <MX_SDIO_SD_Init>
  MX_I2C1_Init();
 80093da:	f000 f8cb 	bl	8009574 <MX_I2C1_Init>
  MX_I2C2_Init();
 80093de:	f000 f8f7 	bl	80095d0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80093e2:	f000 f979 	bl	80096d8 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80093e6:	f000 fc7b 	bl	8009ce0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, SET);
 80093ea:	2201      	movs	r2, #1
 80093ec:	2101      	movs	r1, #1
 80093ee:	481c      	ldr	r0, [pc, #112]	; (8009460 <main+0xa4>)
 80093f0:	f7f7 feb4 	bl	800115c <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, SET);
 80093f4:	2201      	movs	r2, #1
 80093f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80093fa:	4819      	ldr	r0, [pc, #100]	; (8009460 <main+0xa4>)
 80093fc:	f7f7 feae 	bl	800115c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, SET);
 8009400:	2201      	movs	r2, #1
 8009402:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009406:	4816      	ldr	r0, [pc, #88]	; (8009460 <main+0xa4>)
 8009408:	f7f7 fea8 	bl	800115c <HAL_GPIO_WritePin>

  long long counter = 0;
 800940c:	f04f 0200 	mov.w	r2, #0
 8009410:	f04f 0300 	mov.w	r3, #0
 8009414:	e9c7 2300 	strd	r2, r3, [r7]
  while (1)
  {
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8009418:	2104      	movs	r1, #4
 800941a:	4811      	ldr	r0, [pc, #68]	; (8009460 <main+0xa4>)
 800941c:	f7f7 feb7 	bl	800118e <HAL_GPIO_TogglePin>
	  counter++;
 8009420:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009424:	1c54      	adds	r4, r2, #1
 8009426:	f143 0500 	adc.w	r5, r3, #0
 800942a:	e9c7 4500 	strd	r4, r5, [r7]
	  if(counter >= 72000)
 800942e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009432:	480c      	ldr	r0, [pc, #48]	; (8009464 <main+0xa8>)
 8009434:	f04f 0100 	mov.w	r1, #0
 8009438:	4290      	cmp	r0, r2
 800943a:	eb71 0303 	sbcs.w	r3, r1, r3
 800943e:	daeb      	bge.n	8009418 <main+0x5c>
	  {
		  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8009440:	2102      	movs	r1, #2
 8009442:	4807      	ldr	r0, [pc, #28]	; (8009460 <main+0xa4>)
 8009444:	f7f7 fea3 	bl	800118e <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8009448:	2101      	movs	r1, #1
 800944a:	4807      	ldr	r0, [pc, #28]	; (8009468 <main+0xac>)
 800944c:	f7f7 fe9f 	bl	800118e <HAL_GPIO_TogglePin>
		  counter = 0;
 8009450:	f04f 0200 	mov.w	r2, #0
 8009454:	f04f 0300 	mov.w	r3, #0
 8009458:	e9c7 2300 	strd	r2, r3, [r7]
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800945c:	e7dc      	b.n	8009418 <main+0x5c>
 800945e:	bf00      	nop
 8009460:	40020800 	.word	0x40020800
 8009464:	0001193f 	.word	0x0001193f
 8009468:	40020000 	.word	0x40020000

0800946c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b09a      	sub	sp, #104	; 0x68
 8009470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009472:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009476:	2230      	movs	r2, #48	; 0x30
 8009478:	2100      	movs	r1, #0
 800947a:	4618      	mov	r0, r3
 800947c:	f001 f976 	bl	800a76c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009484:	2200      	movs	r2, #0
 8009486:	601a      	str	r2, [r3, #0]
 8009488:	605a      	str	r2, [r3, #4]
 800948a:	609a      	str	r2, [r3, #8]
 800948c:	60da      	str	r2, [r3, #12]
 800948e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009490:	f107 030c 	add.w	r3, r7, #12
 8009494:	2200      	movs	r2, #0
 8009496:	601a      	str	r2, [r3, #0]
 8009498:	605a      	str	r2, [r3, #4]
 800949a:	609a      	str	r2, [r3, #8]
 800949c:	60da      	str	r2, [r3, #12]
 800949e:	611a      	str	r2, [r3, #16]
 80094a0:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80094a2:	2300      	movs	r3, #0
 80094a4:	60bb      	str	r3, [r7, #8]
 80094a6:	4b31      	ldr	r3, [pc, #196]	; (800956c <SystemClock_Config+0x100>)
 80094a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094aa:	4a30      	ldr	r2, [pc, #192]	; (800956c <SystemClock_Config+0x100>)
 80094ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094b0:	6413      	str	r3, [r2, #64]	; 0x40
 80094b2:	4b2e      	ldr	r3, [pc, #184]	; (800956c <SystemClock_Config+0x100>)
 80094b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094ba:	60bb      	str	r3, [r7, #8]
 80094bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80094be:	2300      	movs	r3, #0
 80094c0:	607b      	str	r3, [r7, #4]
 80094c2:	4b2b      	ldr	r3, [pc, #172]	; (8009570 <SystemClock_Config+0x104>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a2a      	ldr	r2, [pc, #168]	; (8009570 <SystemClock_Config+0x104>)
 80094c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80094cc:	6013      	str	r3, [r2, #0]
 80094ce:	4b28      	ldr	r3, [pc, #160]	; (8009570 <SystemClock_Config+0x104>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80094d6:	607b      	str	r3, [r7, #4]
 80094d8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80094da:	2305      	movs	r3, #5
 80094dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80094de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80094e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80094e4:	2301      	movs	r3, #1
 80094e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80094e8:	2302      	movs	r3, #2
 80094ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80094ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80094f0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 12;
 80094f2:	230c      	movs	r3, #12
 80094f4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 72;
 80094f6:	2348      	movs	r3, #72	; 0x48
 80094f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80094fa:	2302      	movs	r3, #2
 80094fc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80094fe:	2303      	movs	r3, #3
 8009500:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009502:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009506:	4618      	mov	r0, r3
 8009508:	f7fa fcde 	bl	8003ec8 <HAL_RCC_OscConfig>
 800950c:	4603      	mov	r3, r0
 800950e:	2b00      	cmp	r3, #0
 8009510:	d001      	beq.n	8009516 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8009512:	f000 f9ad 	bl	8009870 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009516:	230f      	movs	r3, #15
 8009518:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800951a:	2302      	movs	r3, #2
 800951c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800951e:	2300      	movs	r3, #0
 8009520:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8009522:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009526:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009528:	2300      	movs	r3, #0
 800952a:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800952c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009530:	2102      	movs	r1, #2
 8009532:	4618      	mov	r0, r3
 8009534:	f7fa ff3e 	bl	80043b4 <HAL_RCC_ClockConfig>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d001      	beq.n	8009542 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800953e:	f000 f997 	bl	8009870 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8009542:	2302      	movs	r3, #2
 8009544:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8009546:	f44f 7380 	mov.w	r3, #256	; 0x100
 800954a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800954c:	f107 030c 	add.w	r3, r7, #12
 8009550:	4618      	mov	r0, r3
 8009552:	f7fb f927 	bl	80047a4 <HAL_RCCEx_PeriphCLKConfig>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d001      	beq.n	8009560 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800955c:	f000 f988 	bl	8009870 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8009560:	f7fb f80e 	bl	8004580 <HAL_RCC_EnableCSS>
}
 8009564:	bf00      	nop
 8009566:	3768      	adds	r7, #104	; 0x68
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}
 800956c:	40023800 	.word	0x40023800
 8009570:	40007000 	.word	0x40007000

08009574 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009578:	4b12      	ldr	r3, [pc, #72]	; (80095c4 <MX_I2C1_Init+0x50>)
 800957a:	4a13      	ldr	r2, [pc, #76]	; (80095c8 <MX_I2C1_Init+0x54>)
 800957c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800957e:	4b11      	ldr	r3, [pc, #68]	; (80095c4 <MX_I2C1_Init+0x50>)
 8009580:	4a12      	ldr	r2, [pc, #72]	; (80095cc <MX_I2C1_Init+0x58>)
 8009582:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009584:	4b0f      	ldr	r3, [pc, #60]	; (80095c4 <MX_I2C1_Init+0x50>)
 8009586:	2200      	movs	r2, #0
 8009588:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800958a:	4b0e      	ldr	r3, [pc, #56]	; (80095c4 <MX_I2C1_Init+0x50>)
 800958c:	2200      	movs	r2, #0
 800958e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009590:	4b0c      	ldr	r3, [pc, #48]	; (80095c4 <MX_I2C1_Init+0x50>)
 8009592:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009596:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009598:	4b0a      	ldr	r3, [pc, #40]	; (80095c4 <MX_I2C1_Init+0x50>)
 800959a:	2200      	movs	r2, #0
 800959c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800959e:	4b09      	ldr	r3, [pc, #36]	; (80095c4 <MX_I2C1_Init+0x50>)
 80095a0:	2200      	movs	r2, #0
 80095a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80095a4:	4b07      	ldr	r3, [pc, #28]	; (80095c4 <MX_I2C1_Init+0x50>)
 80095a6:	2200      	movs	r2, #0
 80095a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80095aa:	4b06      	ldr	r3, [pc, #24]	; (80095c4 <MX_I2C1_Init+0x50>)
 80095ac:	2200      	movs	r2, #0
 80095ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80095b0:	4804      	ldr	r0, [pc, #16]	; (80095c4 <MX_I2C1_Init+0x50>)
 80095b2:	f7f7 fe07 	bl	80011c4 <HAL_I2C_Init>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d001      	beq.n	80095c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80095bc:	f000 f958 	bl	8009870 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80095c0:	bf00      	nop
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	20000424 	.word	0x20000424
 80095c8:	40005400 	.word	0x40005400
 80095cc:	000186a0 	.word	0x000186a0

080095d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80095d4:	4b12      	ldr	r3, [pc, #72]	; (8009620 <MX_I2C2_Init+0x50>)
 80095d6:	4a13      	ldr	r2, [pc, #76]	; (8009624 <MX_I2C2_Init+0x54>)
 80095d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80095da:	4b11      	ldr	r3, [pc, #68]	; (8009620 <MX_I2C2_Init+0x50>)
 80095dc:	4a12      	ldr	r2, [pc, #72]	; (8009628 <MX_I2C2_Init+0x58>)
 80095de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80095e0:	4b0f      	ldr	r3, [pc, #60]	; (8009620 <MX_I2C2_Init+0x50>)
 80095e2:	2200      	movs	r2, #0
 80095e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80095e6:	4b0e      	ldr	r3, [pc, #56]	; (8009620 <MX_I2C2_Init+0x50>)
 80095e8:	2200      	movs	r2, #0
 80095ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80095ec:	4b0c      	ldr	r3, [pc, #48]	; (8009620 <MX_I2C2_Init+0x50>)
 80095ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80095f2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80095f4:	4b0a      	ldr	r3, [pc, #40]	; (8009620 <MX_I2C2_Init+0x50>)
 80095f6:	2200      	movs	r2, #0
 80095f8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80095fa:	4b09      	ldr	r3, [pc, #36]	; (8009620 <MX_I2C2_Init+0x50>)
 80095fc:	2200      	movs	r2, #0
 80095fe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009600:	4b07      	ldr	r3, [pc, #28]	; (8009620 <MX_I2C2_Init+0x50>)
 8009602:	2200      	movs	r2, #0
 8009604:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009606:	4b06      	ldr	r3, [pc, #24]	; (8009620 <MX_I2C2_Init+0x50>)
 8009608:	2200      	movs	r2, #0
 800960a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800960c:	4804      	ldr	r0, [pc, #16]	; (8009620 <MX_I2C2_Init+0x50>)
 800960e:	f7f7 fdd9 	bl	80011c4 <HAL_I2C_Init>
 8009612:	4603      	mov	r3, r0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d001      	beq.n	800961c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8009618:	f000 f92a 	bl	8009870 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800961c:	bf00      	nop
 800961e:	bd80      	pop	{r7, pc}
 8009620:	20000478 	.word	0x20000478
 8009624:	40005800 	.word	0x40005800
 8009628:	000186a0 	.word	0x000186a0

0800962c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8009630:	4b0f      	ldr	r3, [pc, #60]	; (8009670 <MX_RTC_Init+0x44>)
 8009632:	4a10      	ldr	r2, [pc, #64]	; (8009674 <MX_RTC_Init+0x48>)
 8009634:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8009636:	4b0e      	ldr	r3, [pc, #56]	; (8009670 <MX_RTC_Init+0x44>)
 8009638:	2200      	movs	r2, #0
 800963a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800963c:	4b0c      	ldr	r3, [pc, #48]	; (8009670 <MX_RTC_Init+0x44>)
 800963e:	227f      	movs	r2, #127	; 0x7f
 8009640:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8009642:	4b0b      	ldr	r3, [pc, #44]	; (8009670 <MX_RTC_Init+0x44>)
 8009644:	22ff      	movs	r2, #255	; 0xff
 8009646:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009648:	4b09      	ldr	r3, [pc, #36]	; (8009670 <MX_RTC_Init+0x44>)
 800964a:	2200      	movs	r2, #0
 800964c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800964e:	4b08      	ldr	r3, [pc, #32]	; (8009670 <MX_RTC_Init+0x44>)
 8009650:	2200      	movs	r2, #0
 8009652:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009654:	4b06      	ldr	r3, [pc, #24]	; (8009670 <MX_RTC_Init+0x44>)
 8009656:	2200      	movs	r2, #0
 8009658:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800965a:	4805      	ldr	r0, [pc, #20]	; (8009670 <MX_RTC_Init+0x44>)
 800965c:	f7fb f992 	bl	8004984 <HAL_RTC_Init>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d001      	beq.n	800966a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8009666:	f000 f903 	bl	8009870 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800966a:	bf00      	nop
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	20000510 	.word	0x20000510
 8009674:	40002800 	.word	0x40002800

08009678 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800967c:	4b14      	ldr	r3, [pc, #80]	; (80096d0 <MX_SDIO_SD_Init+0x58>)
 800967e:	4a15      	ldr	r2, [pc, #84]	; (80096d4 <MX_SDIO_SD_Init+0x5c>)
 8009680:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8009682:	4b13      	ldr	r3, [pc, #76]	; (80096d0 <MX_SDIO_SD_Init+0x58>)
 8009684:	2200      	movs	r2, #0
 8009686:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8009688:	4b11      	ldr	r3, [pc, #68]	; (80096d0 <MX_SDIO_SD_Init+0x58>)
 800968a:	2200      	movs	r2, #0
 800968c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800968e:	4b10      	ldr	r3, [pc, #64]	; (80096d0 <MX_SDIO_SD_Init+0x58>)
 8009690:	2200      	movs	r2, #0
 8009692:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8009694:	4b0e      	ldr	r3, [pc, #56]	; (80096d0 <MX_SDIO_SD_Init+0x58>)
 8009696:	2200      	movs	r2, #0
 8009698:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800969a:	4b0d      	ldr	r3, [pc, #52]	; (80096d0 <MX_SDIO_SD_Init+0x58>)
 800969c:	2200      	movs	r2, #0
 800969e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80096a0:	4b0b      	ldr	r3, [pc, #44]	; (80096d0 <MX_SDIO_SD_Init+0x58>)
 80096a2:	2200      	movs	r2, #0
 80096a4:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 80096a6:	480a      	ldr	r0, [pc, #40]	; (80096d0 <MX_SDIO_SD_Init+0x58>)
 80096a8:	f7fb fa51 	bl	8004b4e <HAL_SD_Init>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d001      	beq.n	80096b6 <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 80096b2:	f000 f8dd 	bl	8009870 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80096b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80096ba:	4805      	ldr	r0, [pc, #20]	; (80096d0 <MX_SDIO_SD_Init+0x58>)
 80096bc:	f7fb fc9a 	bl	8004ff4 <HAL_SD_ConfigWideBusOperation>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d001      	beq.n	80096ca <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 80096c6:	f000 f8d3 	bl	8009870 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80096ca:	bf00      	nop
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	20000530 	.word	0x20000530
 80096d4:	40012c00 	.word	0x40012c00

080096d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80096dc:	4b11      	ldr	r3, [pc, #68]	; (8009724 <MX_USART1_UART_Init+0x4c>)
 80096de:	4a12      	ldr	r2, [pc, #72]	; (8009728 <MX_USART1_UART_Init+0x50>)
 80096e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80096e2:	4b10      	ldr	r3, [pc, #64]	; (8009724 <MX_USART1_UART_Init+0x4c>)
 80096e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80096e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80096ea:	4b0e      	ldr	r3, [pc, #56]	; (8009724 <MX_USART1_UART_Init+0x4c>)
 80096ec:	2200      	movs	r2, #0
 80096ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80096f0:	4b0c      	ldr	r3, [pc, #48]	; (8009724 <MX_USART1_UART_Init+0x4c>)
 80096f2:	2200      	movs	r2, #0
 80096f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80096f6:	4b0b      	ldr	r3, [pc, #44]	; (8009724 <MX_USART1_UART_Init+0x4c>)
 80096f8:	2200      	movs	r2, #0
 80096fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80096fc:	4b09      	ldr	r3, [pc, #36]	; (8009724 <MX_USART1_UART_Init+0x4c>)
 80096fe:	220c      	movs	r2, #12
 8009700:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009702:	4b08      	ldr	r3, [pc, #32]	; (8009724 <MX_USART1_UART_Init+0x4c>)
 8009704:	2200      	movs	r2, #0
 8009706:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009708:	4b06      	ldr	r3, [pc, #24]	; (8009724 <MX_USART1_UART_Init+0x4c>)
 800970a:	2200      	movs	r2, #0
 800970c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800970e:	4805      	ldr	r0, [pc, #20]	; (8009724 <MX_USART1_UART_Init+0x4c>)
 8009710:	f7fb ffcd 	bl	80056ae <HAL_UART_Init>
 8009714:	4603      	mov	r3, r0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d001      	beq.n	800971e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800971a:	f000 f8a9 	bl	8009870 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800971e:	bf00      	nop
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	200004cc 	.word	0x200004cc
 8009728:	40011000 	.word	0x40011000

0800972c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009732:	2300      	movs	r3, #0
 8009734:	607b      	str	r3, [r7, #4]
 8009736:	4b0c      	ldr	r3, [pc, #48]	; (8009768 <MX_DMA_Init+0x3c>)
 8009738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800973a:	4a0b      	ldr	r2, [pc, #44]	; (8009768 <MX_DMA_Init+0x3c>)
 800973c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009740:	6313      	str	r3, [r2, #48]	; 0x30
 8009742:	4b09      	ldr	r3, [pc, #36]	; (8009768 <MX_DMA_Init+0x3c>)
 8009744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009746:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800974a:	607b      	str	r3, [r7, #4]
 800974c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800974e:	2200      	movs	r2, #0
 8009750:	2100      	movs	r1, #0
 8009752:	200c      	movs	r0, #12
 8009754:	f7f7 f82d 	bl	80007b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8009758:	200c      	movs	r0, #12
 800975a:	f7f7 f846 	bl	80007ea <HAL_NVIC_EnableIRQ>

}
 800975e:	bf00      	nop
 8009760:	3708      	adds	r7, #8
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	40023800 	.word	0x40023800

0800976c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b08a      	sub	sp, #40	; 0x28
 8009770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009772:	f107 0314 	add.w	r3, r7, #20
 8009776:	2200      	movs	r2, #0
 8009778:	601a      	str	r2, [r3, #0]
 800977a:	605a      	str	r2, [r3, #4]
 800977c:	609a      	str	r2, [r3, #8]
 800977e:	60da      	str	r2, [r3, #12]
 8009780:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009782:	2300      	movs	r3, #0
 8009784:	613b      	str	r3, [r7, #16]
 8009786:	4b37      	ldr	r3, [pc, #220]	; (8009864 <MX_GPIO_Init+0xf8>)
 8009788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800978a:	4a36      	ldr	r2, [pc, #216]	; (8009864 <MX_GPIO_Init+0xf8>)
 800978c:	f043 0304 	orr.w	r3, r3, #4
 8009790:	6313      	str	r3, [r2, #48]	; 0x30
 8009792:	4b34      	ldr	r3, [pc, #208]	; (8009864 <MX_GPIO_Init+0xf8>)
 8009794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009796:	f003 0304 	and.w	r3, r3, #4
 800979a:	613b      	str	r3, [r7, #16]
 800979c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800979e:	2300      	movs	r3, #0
 80097a0:	60fb      	str	r3, [r7, #12]
 80097a2:	4b30      	ldr	r3, [pc, #192]	; (8009864 <MX_GPIO_Init+0xf8>)
 80097a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097a6:	4a2f      	ldr	r2, [pc, #188]	; (8009864 <MX_GPIO_Init+0xf8>)
 80097a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097ac:	6313      	str	r3, [r2, #48]	; 0x30
 80097ae:	4b2d      	ldr	r3, [pc, #180]	; (8009864 <MX_GPIO_Init+0xf8>)
 80097b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097b6:	60fb      	str	r3, [r7, #12]
 80097b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80097ba:	2300      	movs	r3, #0
 80097bc:	60bb      	str	r3, [r7, #8]
 80097be:	4b29      	ldr	r3, [pc, #164]	; (8009864 <MX_GPIO_Init+0xf8>)
 80097c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c2:	4a28      	ldr	r2, [pc, #160]	; (8009864 <MX_GPIO_Init+0xf8>)
 80097c4:	f043 0301 	orr.w	r3, r3, #1
 80097c8:	6313      	str	r3, [r2, #48]	; 0x30
 80097ca:	4b26      	ldr	r3, [pc, #152]	; (8009864 <MX_GPIO_Init+0xf8>)
 80097cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ce:	f003 0301 	and.w	r3, r3, #1
 80097d2:	60bb      	str	r3, [r7, #8]
 80097d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80097d6:	2300      	movs	r3, #0
 80097d8:	607b      	str	r3, [r7, #4]
 80097da:	4b22      	ldr	r3, [pc, #136]	; (8009864 <MX_GPIO_Init+0xf8>)
 80097dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097de:	4a21      	ldr	r2, [pc, #132]	; (8009864 <MX_GPIO_Init+0xf8>)
 80097e0:	f043 0302 	orr.w	r3, r3, #2
 80097e4:	6313      	str	r3, [r2, #48]	; 0x30
 80097e6:	4b1f      	ldr	r3, [pc, #124]	; (8009864 <MX_GPIO_Init+0xf8>)
 80097e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ea:	f003 0302 	and.w	r3, r3, #2
 80097ee:	607b      	str	r3, [r7, #4]
 80097f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, I2C2_VDD_Pin|LED0_Pin|LED1_Pin|LED2_Pin
 80097f2:	2200      	movs	r2, #0
 80097f4:	f243 010f 	movw	r1, #12303	; 0x300f
 80097f8:	481b      	ldr	r0, [pc, #108]	; (8009868 <MX_GPIO_Init+0xfc>)
 80097fa:	f7f7 fcaf 	bl	800115c <HAL_GPIO_WritePin>
                          |LED3_Pin|I2C1_VDD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PIN_0_Pin|PIN_1_Pin|PIN_2_Pin, GPIO_PIN_RESET);
 80097fe:	2200      	movs	r2, #0
 8009800:	2107      	movs	r1, #7
 8009802:	481a      	ldr	r0, [pc, #104]	; (800986c <MX_GPIO_Init+0x100>)
 8009804:	f7f7 fcaa 	bl	800115c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : I2C2_VDD_Pin LED0_Pin LED1_Pin LED2_Pin
                           LED3_Pin I2C1_VDD_Pin */
  GPIO_InitStruct.Pin = I2C2_VDD_Pin|LED0_Pin|LED1_Pin|LED2_Pin
 8009808:	f243 030f 	movw	r3, #12303	; 0x300f
 800980c:	617b      	str	r3, [r7, #20]
                          |LED3_Pin|I2C1_VDD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800980e:	2301      	movs	r3, #1
 8009810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009812:	2300      	movs	r3, #0
 8009814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009816:	2300      	movs	r3, #0
 8009818:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800981a:	f107 0314 	add.w	r3, r7, #20
 800981e:	4619      	mov	r1, r3
 8009820:	4811      	ldr	r0, [pc, #68]	; (8009868 <MX_GPIO_Init+0xfc>)
 8009822:	f7f7 fb17 	bl	8000e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN_0_Pin PIN_1_Pin PIN_2_Pin */
  GPIO_InitStruct.Pin = PIN_0_Pin|PIN_1_Pin|PIN_2_Pin;
 8009826:	2307      	movs	r3, #7
 8009828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800982a:	2301      	movs	r3, #1
 800982c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800982e:	2300      	movs	r3, #0
 8009830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009832:	2300      	movs	r3, #0
 8009834:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009836:	f107 0314 	add.w	r3, r7, #20
 800983a:	4619      	mov	r1, r3
 800983c:	480b      	ldr	r0, [pc, #44]	; (800986c <MX_GPIO_Init+0x100>)
 800983e:	f7f7 fb09 	bl	8000e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VSENSE_Pin */
  GPIO_InitStruct.Pin = USB_VSENSE_Pin;
 8009842:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009848:	2300      	movs	r3, #0
 800984a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800984c:	2300      	movs	r3, #0
 800984e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_VSENSE_GPIO_Port, &GPIO_InitStruct);
 8009850:	f107 0314 	add.w	r3, r7, #20
 8009854:	4619      	mov	r1, r3
 8009856:	4805      	ldr	r0, [pc, #20]	; (800986c <MX_GPIO_Init+0x100>)
 8009858:	f7f7 fafc 	bl	8000e54 <HAL_GPIO_Init>

}
 800985c:	bf00      	nop
 800985e:	3728      	adds	r7, #40	; 0x28
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}
 8009864:	40023800 	.word	0x40023800
 8009868:	40020800 	.word	0x40020800
 800986c:	40020000 	.word	0x40020000

08009870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009870:	b480      	push	{r7}
 8009872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009874:	b672      	cpsid	i
}
 8009876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009878:	e7fe      	b.n	8009878 <Error_Handler+0x8>
	...

0800987c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009882:	2300      	movs	r3, #0
 8009884:	607b      	str	r3, [r7, #4]
 8009886:	4b10      	ldr	r3, [pc, #64]	; (80098c8 <HAL_MspInit+0x4c>)
 8009888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800988a:	4a0f      	ldr	r2, [pc, #60]	; (80098c8 <HAL_MspInit+0x4c>)
 800988c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009890:	6453      	str	r3, [r2, #68]	; 0x44
 8009892:	4b0d      	ldr	r3, [pc, #52]	; (80098c8 <HAL_MspInit+0x4c>)
 8009894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800989a:	607b      	str	r3, [r7, #4]
 800989c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800989e:	2300      	movs	r3, #0
 80098a0:	603b      	str	r3, [r7, #0]
 80098a2:	4b09      	ldr	r3, [pc, #36]	; (80098c8 <HAL_MspInit+0x4c>)
 80098a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a6:	4a08      	ldr	r2, [pc, #32]	; (80098c8 <HAL_MspInit+0x4c>)
 80098a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098ac:	6413      	str	r3, [r2, #64]	; 0x40
 80098ae:	4b06      	ldr	r3, [pc, #24]	; (80098c8 <HAL_MspInit+0x4c>)
 80098b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098b6:	603b      	str	r3, [r7, #0]
 80098b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80098ba:	bf00      	nop
 80098bc:	370c      	adds	r7, #12
 80098be:	46bd      	mov	sp, r7
 80098c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c4:	4770      	bx	lr
 80098c6:	bf00      	nop
 80098c8:	40023800 	.word	0x40023800

080098cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b08c      	sub	sp, #48	; 0x30
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098d4:	f107 031c 	add.w	r3, r7, #28
 80098d8:	2200      	movs	r2, #0
 80098da:	601a      	str	r2, [r3, #0]
 80098dc:	605a      	str	r2, [r3, #4]
 80098de:	609a      	str	r2, [r3, #8]
 80098e0:	60da      	str	r2, [r3, #12]
 80098e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a55      	ldr	r2, [pc, #340]	; (8009a40 <HAL_I2C_MspInit+0x174>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d162      	bne.n	80099b4 <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80098ee:	2300      	movs	r3, #0
 80098f0:	61bb      	str	r3, [r7, #24]
 80098f2:	4b54      	ldr	r3, [pc, #336]	; (8009a44 <HAL_I2C_MspInit+0x178>)
 80098f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098f6:	4a53      	ldr	r2, [pc, #332]	; (8009a44 <HAL_I2C_MspInit+0x178>)
 80098f8:	f043 0302 	orr.w	r3, r3, #2
 80098fc:	6313      	str	r3, [r2, #48]	; 0x30
 80098fe:	4b51      	ldr	r3, [pc, #324]	; (8009a44 <HAL_I2C_MspInit+0x178>)
 8009900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009902:	f003 0302 	and.w	r3, r3, #2
 8009906:	61bb      	str	r3, [r7, #24]
 8009908:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800990a:	23c0      	movs	r3, #192	; 0xc0
 800990c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800990e:	2312      	movs	r3, #18
 8009910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009912:	2301      	movs	r3, #1
 8009914:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009916:	2303      	movs	r3, #3
 8009918:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800991a:	2304      	movs	r3, #4
 800991c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800991e:	f107 031c 	add.w	r3, r7, #28
 8009922:	4619      	mov	r1, r3
 8009924:	4848      	ldr	r0, [pc, #288]	; (8009a48 <HAL_I2C_MspInit+0x17c>)
 8009926:	f7f7 fa95 	bl	8000e54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800992a:	2300      	movs	r3, #0
 800992c:	617b      	str	r3, [r7, #20]
 800992e:	4b45      	ldr	r3, [pc, #276]	; (8009a44 <HAL_I2C_MspInit+0x178>)
 8009930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009932:	4a44      	ldr	r2, [pc, #272]	; (8009a44 <HAL_I2C_MspInit+0x178>)
 8009934:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009938:	6413      	str	r3, [r2, #64]	; 0x40
 800993a:	4b42      	ldr	r3, [pc, #264]	; (8009a44 <HAL_I2C_MspInit+0x178>)
 800993c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800993e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009942:	617b      	str	r3, [r7, #20]
 8009944:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8009946:	4b41      	ldr	r3, [pc, #260]	; (8009a4c <HAL_I2C_MspInit+0x180>)
 8009948:	4a41      	ldr	r2, [pc, #260]	; (8009a50 <HAL_I2C_MspInit+0x184>)
 800994a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800994c:	4b3f      	ldr	r3, [pc, #252]	; (8009a4c <HAL_I2C_MspInit+0x180>)
 800994e:	2200      	movs	r2, #0
 8009950:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009952:	4b3e      	ldr	r3, [pc, #248]	; (8009a4c <HAL_I2C_MspInit+0x180>)
 8009954:	2240      	movs	r2, #64	; 0x40
 8009956:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009958:	4b3c      	ldr	r3, [pc, #240]	; (8009a4c <HAL_I2C_MspInit+0x180>)
 800995a:	2200      	movs	r2, #0
 800995c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800995e:	4b3b      	ldr	r3, [pc, #236]	; (8009a4c <HAL_I2C_MspInit+0x180>)
 8009960:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009964:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009966:	4b39      	ldr	r3, [pc, #228]	; (8009a4c <HAL_I2C_MspInit+0x180>)
 8009968:	2200      	movs	r2, #0
 800996a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800996c:	4b37      	ldr	r3, [pc, #220]	; (8009a4c <HAL_I2C_MspInit+0x180>)
 800996e:	2200      	movs	r2, #0
 8009970:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8009972:	4b36      	ldr	r3, [pc, #216]	; (8009a4c <HAL_I2C_MspInit+0x180>)
 8009974:	2200      	movs	r2, #0
 8009976:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8009978:	4b34      	ldr	r3, [pc, #208]	; (8009a4c <HAL_I2C_MspInit+0x180>)
 800997a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800997e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009980:	4b32      	ldr	r3, [pc, #200]	; (8009a4c <HAL_I2C_MspInit+0x180>)
 8009982:	2200      	movs	r2, #0
 8009984:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8009986:	4831      	ldr	r0, [pc, #196]	; (8009a4c <HAL_I2C_MspInit+0x180>)
 8009988:	f7f6 ff4a 	bl	8000820 <HAL_DMA_Init>
 800998c:	4603      	mov	r3, r0
 800998e:	2b00      	cmp	r3, #0
 8009990:	d001      	beq.n	8009996 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8009992:	f7ff ff6d 	bl	8009870 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	4a2c      	ldr	r2, [pc, #176]	; (8009a4c <HAL_I2C_MspInit+0x180>)
 800999a:	635a      	str	r2, [r3, #52]	; 0x34
 800999c:	4a2b      	ldr	r2, [pc, #172]	; (8009a4c <HAL_I2C_MspInit+0x180>)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80099a2:	2200      	movs	r2, #0
 80099a4:	2100      	movs	r1, #0
 80099a6:	201f      	movs	r0, #31
 80099a8:	f7f6 ff03 	bl	80007b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80099ac:	201f      	movs	r0, #31
 80099ae:	f7f6 ff1c 	bl	80007ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80099b2:	e041      	b.n	8009a38 <HAL_I2C_MspInit+0x16c>
  else if(hi2c->Instance==I2C2)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a26      	ldr	r2, [pc, #152]	; (8009a54 <HAL_I2C_MspInit+0x188>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d13c      	bne.n	8009a38 <HAL_I2C_MspInit+0x16c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80099be:	2300      	movs	r3, #0
 80099c0:	613b      	str	r3, [r7, #16]
 80099c2:	4b20      	ldr	r3, [pc, #128]	; (8009a44 <HAL_I2C_MspInit+0x178>)
 80099c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099c6:	4a1f      	ldr	r2, [pc, #124]	; (8009a44 <HAL_I2C_MspInit+0x178>)
 80099c8:	f043 0302 	orr.w	r3, r3, #2
 80099cc:	6313      	str	r3, [r2, #48]	; 0x30
 80099ce:	4b1d      	ldr	r3, [pc, #116]	; (8009a44 <HAL_I2C_MspInit+0x178>)
 80099d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099d2:	f003 0302 	and.w	r3, r3, #2
 80099d6:	613b      	str	r3, [r7, #16]
 80099d8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80099da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80099e0:	2312      	movs	r3, #18
 80099e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80099e4:	2301      	movs	r3, #1
 80099e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099e8:	2303      	movs	r3, #3
 80099ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80099ec:	2304      	movs	r3, #4
 80099ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80099f0:	f107 031c 	add.w	r3, r7, #28
 80099f4:	4619      	mov	r1, r3
 80099f6:	4814      	ldr	r0, [pc, #80]	; (8009a48 <HAL_I2C_MspInit+0x17c>)
 80099f8:	f7f7 fa2c 	bl	8000e54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80099fc:	2308      	movs	r3, #8
 80099fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009a00:	2312      	movs	r3, #18
 8009a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009a04:	2301      	movs	r3, #1
 8009a06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a08:	2303      	movs	r3, #3
 8009a0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8009a0c:	2309      	movs	r3, #9
 8009a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009a10:	f107 031c 	add.w	r3, r7, #28
 8009a14:	4619      	mov	r1, r3
 8009a16:	480c      	ldr	r0, [pc, #48]	; (8009a48 <HAL_I2C_MspInit+0x17c>)
 8009a18:	f7f7 fa1c 	bl	8000e54 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	60fb      	str	r3, [r7, #12]
 8009a20:	4b08      	ldr	r3, [pc, #32]	; (8009a44 <HAL_I2C_MspInit+0x178>)
 8009a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a24:	4a07      	ldr	r2, [pc, #28]	; (8009a44 <HAL_I2C_MspInit+0x178>)
 8009a26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009a2a:	6413      	str	r3, [r2, #64]	; 0x40
 8009a2c:	4b05      	ldr	r3, [pc, #20]	; (8009a44 <HAL_I2C_MspInit+0x178>)
 8009a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a34:	60fb      	str	r3, [r7, #12]
 8009a36:	68fb      	ldr	r3, [r7, #12]
}
 8009a38:	bf00      	nop
 8009a3a:	3730      	adds	r7, #48	; 0x30
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	40005400 	.word	0x40005400
 8009a44:	40023800 	.word	0x40023800
 8009a48:	40020400 	.word	0x40020400
 8009a4c:	200003c4 	.word	0x200003c4
 8009a50:	40026028 	.word	0x40026028
 8009a54:	40005800 	.word	0x40005800

08009a58 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a05      	ldr	r2, [pc, #20]	; (8009a7c <HAL_RTC_MspInit+0x24>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d102      	bne.n	8009a70 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8009a6a:	4b05      	ldr	r3, [pc, #20]	; (8009a80 <HAL_RTC_MspInit+0x28>)
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8009a70:	bf00      	nop
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr
 8009a7c:	40002800 	.word	0x40002800
 8009a80:	42470e3c 	.word	0x42470e3c

08009a84 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b08c      	sub	sp, #48	; 0x30
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a8c:	f107 031c 	add.w	r3, r7, #28
 8009a90:	2200      	movs	r2, #0
 8009a92:	601a      	str	r2, [r3, #0]
 8009a94:	605a      	str	r2, [r3, #4]
 8009a96:	609a      	str	r2, [r3, #8]
 8009a98:	60da      	str	r2, [r3, #12]
 8009a9a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a38      	ldr	r2, [pc, #224]	; (8009b84 <HAL_SD_MspInit+0x100>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d169      	bne.n	8009b7a <HAL_SD_MspInit+0xf6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	61bb      	str	r3, [r7, #24]
 8009aaa:	4b37      	ldr	r3, [pc, #220]	; (8009b88 <HAL_SD_MspInit+0x104>)
 8009aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aae:	4a36      	ldr	r2, [pc, #216]	; (8009b88 <HAL_SD_MspInit+0x104>)
 8009ab0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8009ab6:	4b34      	ldr	r3, [pc, #208]	; (8009b88 <HAL_SD_MspInit+0x104>)
 8009ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009abe:	61bb      	str	r3, [r7, #24]
 8009ac0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	617b      	str	r3, [r7, #20]
 8009ac6:	4b30      	ldr	r3, [pc, #192]	; (8009b88 <HAL_SD_MspInit+0x104>)
 8009ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aca:	4a2f      	ldr	r2, [pc, #188]	; (8009b88 <HAL_SD_MspInit+0x104>)
 8009acc:	f043 0301 	orr.w	r3, r3, #1
 8009ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8009ad2:	4b2d      	ldr	r3, [pc, #180]	; (8009b88 <HAL_SD_MspInit+0x104>)
 8009ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ad6:	f003 0301 	and.w	r3, r3, #1
 8009ada:	617b      	str	r3, [r7, #20]
 8009adc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009ade:	2300      	movs	r3, #0
 8009ae0:	613b      	str	r3, [r7, #16]
 8009ae2:	4b29      	ldr	r3, [pc, #164]	; (8009b88 <HAL_SD_MspInit+0x104>)
 8009ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ae6:	4a28      	ldr	r2, [pc, #160]	; (8009b88 <HAL_SD_MspInit+0x104>)
 8009ae8:	f043 0302 	orr.w	r3, r3, #2
 8009aec:	6313      	str	r3, [r2, #48]	; 0x30
 8009aee:	4b26      	ldr	r3, [pc, #152]	; (8009b88 <HAL_SD_MspInit+0x104>)
 8009af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af2:	f003 0302 	and.w	r3, r3, #2
 8009af6:	613b      	str	r3, [r7, #16]
 8009af8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009afa:	2300      	movs	r3, #0
 8009afc:	60fb      	str	r3, [r7, #12]
 8009afe:	4b22      	ldr	r3, [pc, #136]	; (8009b88 <HAL_SD_MspInit+0x104>)
 8009b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b02:	4a21      	ldr	r2, [pc, #132]	; (8009b88 <HAL_SD_MspInit+0x104>)
 8009b04:	f043 0304 	orr.w	r3, r3, #4
 8009b08:	6313      	str	r3, [r2, #48]	; 0x30
 8009b0a:	4b1f      	ldr	r3, [pc, #124]	; (8009b88 <HAL_SD_MspInit+0x104>)
 8009b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b0e:	f003 0304 	and.w	r3, r3, #4
 8009b12:	60fb      	str	r3, [r7, #12]
 8009b14:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8009b16:	2340      	movs	r3, #64	; 0x40
 8009b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b1a:	2302      	movs	r3, #2
 8009b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b22:	2303      	movs	r3, #3
 8009b24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8009b26:	230c      	movs	r3, #12
 8009b28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b2a:	f107 031c 	add.w	r3, r7, #28
 8009b2e:	4619      	mov	r1, r3
 8009b30:	4816      	ldr	r0, [pc, #88]	; (8009b8c <HAL_SD_MspInit+0x108>)
 8009b32:	f7f7 f98f 	bl	8000e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8009b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b3c:	2302      	movs	r3, #2
 8009b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b40:	2300      	movs	r3, #0
 8009b42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b44:	2303      	movs	r3, #3
 8009b46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8009b48:	230c      	movs	r3, #12
 8009b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009b4c:	f107 031c 	add.w	r3, r7, #28
 8009b50:	4619      	mov	r1, r3
 8009b52:	480f      	ldr	r0, [pc, #60]	; (8009b90 <HAL_SD_MspInit+0x10c>)
 8009b54:	f7f7 f97e 	bl	8000e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8009b58:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8009b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b5e:	2302      	movs	r3, #2
 8009b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b62:	2300      	movs	r3, #0
 8009b64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b66:	2303      	movs	r3, #3
 8009b68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8009b6a:	230c      	movs	r3, #12
 8009b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009b6e:	f107 031c 	add.w	r3, r7, #28
 8009b72:	4619      	mov	r1, r3
 8009b74:	4807      	ldr	r0, [pc, #28]	; (8009b94 <HAL_SD_MspInit+0x110>)
 8009b76:	f7f7 f96d 	bl	8000e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8009b7a:	bf00      	nop
 8009b7c:	3730      	adds	r7, #48	; 0x30
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	40012c00 	.word	0x40012c00
 8009b88:	40023800 	.word	0x40023800
 8009b8c:	40020000 	.word	0x40020000
 8009b90:	40020400 	.word	0x40020400
 8009b94:	40020800 	.word	0x40020800

08009b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b08a      	sub	sp, #40	; 0x28
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ba0:	f107 0314 	add.w	r3, r7, #20
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	601a      	str	r2, [r3, #0]
 8009ba8:	605a      	str	r2, [r3, #4]
 8009baa:	609a      	str	r2, [r3, #8]
 8009bac:	60da      	str	r2, [r3, #12]
 8009bae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a19      	ldr	r2, [pc, #100]	; (8009c1c <HAL_UART_MspInit+0x84>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d12c      	bne.n	8009c14 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009bba:	2300      	movs	r3, #0
 8009bbc:	613b      	str	r3, [r7, #16]
 8009bbe:	4b18      	ldr	r3, [pc, #96]	; (8009c20 <HAL_UART_MspInit+0x88>)
 8009bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bc2:	4a17      	ldr	r2, [pc, #92]	; (8009c20 <HAL_UART_MspInit+0x88>)
 8009bc4:	f043 0310 	orr.w	r3, r3, #16
 8009bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8009bca:	4b15      	ldr	r3, [pc, #84]	; (8009c20 <HAL_UART_MspInit+0x88>)
 8009bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bce:	f003 0310 	and.w	r3, r3, #16
 8009bd2:	613b      	str	r3, [r7, #16]
 8009bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	60fb      	str	r3, [r7, #12]
 8009bda:	4b11      	ldr	r3, [pc, #68]	; (8009c20 <HAL_UART_MspInit+0x88>)
 8009bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bde:	4a10      	ldr	r2, [pc, #64]	; (8009c20 <HAL_UART_MspInit+0x88>)
 8009be0:	f043 0301 	orr.w	r3, r3, #1
 8009be4:	6313      	str	r3, [r2, #48]	; 0x30
 8009be6:	4b0e      	ldr	r3, [pc, #56]	; (8009c20 <HAL_UART_MspInit+0x88>)
 8009be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bea:	f003 0301 	and.w	r3, r3, #1
 8009bee:	60fb      	str	r3, [r7, #12]
 8009bf0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8009bf2:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8009bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bf8:	2302      	movs	r3, #2
 8009bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c00:	2303      	movs	r3, #3
 8009c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009c04:	2307      	movs	r3, #7
 8009c06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c08:	f107 0314 	add.w	r3, r7, #20
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	4805      	ldr	r0, [pc, #20]	; (8009c24 <HAL_UART_MspInit+0x8c>)
 8009c10:	f7f7 f920 	bl	8000e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8009c14:	bf00      	nop
 8009c16:	3728      	adds	r7, #40	; 0x28
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	40011000 	.word	0x40011000
 8009c20:	40023800 	.word	0x40023800
 8009c24:	40020000 	.word	0x40020000

08009c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8009c2c:	f7fa fd9e 	bl	800476c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009c30:	e7fe      	b.n	8009c30 <NMI_Handler+0x8>

08009c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009c32:	b480      	push	{r7}
 8009c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009c36:	e7fe      	b.n	8009c36 <HardFault_Handler+0x4>

08009c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009c3c:	e7fe      	b.n	8009c3c <MemManage_Handler+0x4>

08009c3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009c3e:	b480      	push	{r7}
 8009c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009c42:	e7fe      	b.n	8009c42 <BusFault_Handler+0x4>

08009c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009c44:	b480      	push	{r7}
 8009c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009c48:	e7fe      	b.n	8009c48 <UsageFault_Handler+0x4>

08009c4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009c4a:	b480      	push	{r7}
 8009c4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009c4e:	bf00      	nop
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009c5c:	bf00      	nop
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr

08009c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009c66:	b480      	push	{r7}
 8009c68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009c6a:	bf00      	nop
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009c78:	f7f6 fc7c 	bl	8000574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009c7c:	bf00      	nop
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8009c84:	4802      	ldr	r0, [pc, #8]	; (8009c90 <DMA1_Stream1_IRQHandler+0x10>)
 8009c86:	f7f6 fe9b 	bl	80009c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8009c8a:	bf00      	nop
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	200003c4 	.word	0x200003c4

08009c94 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8009c98:	4802      	ldr	r0, [pc, #8]	; (8009ca4 <I2C1_EV_IRQHandler+0x10>)
 8009c9a:	f7f7 fbd7 	bl	800144c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8009c9e:	bf00      	nop
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	20000424 	.word	0x20000424

08009ca8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8009cac:	4802      	ldr	r0, [pc, #8]	; (8009cb8 <OTG_FS_IRQHandler+0x10>)
 8009cae:	f7f9 f8d8 	bl	8002e62 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8009cb2:	bf00      	nop
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	20001884 	.word	0x20001884

08009cbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009cc0:	4b06      	ldr	r3, [pc, #24]	; (8009cdc <SystemInit+0x20>)
 8009cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cc6:	4a05      	ldr	r2, [pc, #20]	; (8009cdc <SystemInit+0x20>)
 8009cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009cd0:	bf00      	nop
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr
 8009cda:	bf00      	nop
 8009cdc:	e000ed00 	.word	0xe000ed00

08009ce0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	4912      	ldr	r1, [pc, #72]	; (8009d30 <MX_USB_DEVICE_Init+0x50>)
 8009ce8:	4812      	ldr	r0, [pc, #72]	; (8009d34 <MX_USB_DEVICE_Init+0x54>)
 8009cea:	f7fe f9fd 	bl	80080e8 <USBD_Init>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d001      	beq.n	8009cf8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009cf4:	f7ff fdbc 	bl	8009870 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009cf8:	490f      	ldr	r1, [pc, #60]	; (8009d38 <MX_USB_DEVICE_Init+0x58>)
 8009cfa:	480e      	ldr	r0, [pc, #56]	; (8009d34 <MX_USB_DEVICE_Init+0x54>)
 8009cfc:	f7fe fa24 	bl	8008148 <USBD_RegisterClass>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d001      	beq.n	8009d0a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009d06:	f7ff fdb3 	bl	8009870 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009d0a:	490c      	ldr	r1, [pc, #48]	; (8009d3c <MX_USB_DEVICE_Init+0x5c>)
 8009d0c:	4809      	ldr	r0, [pc, #36]	; (8009d34 <MX_USB_DEVICE_Init+0x54>)
 8009d0e:	f7fe f975 	bl	8007ffc <USBD_CDC_RegisterInterface>
 8009d12:	4603      	mov	r3, r0
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d001      	beq.n	8009d1c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009d18:	f7ff fdaa 	bl	8009870 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009d1c:	4805      	ldr	r0, [pc, #20]	; (8009d34 <MX_USB_DEVICE_Init+0x54>)
 8009d1e:	f7fe fa3a 	bl	8008196 <USBD_Start>
 8009d22:	4603      	mov	r3, r0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d001      	beq.n	8009d2c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009d28:	f7ff fda2 	bl	8009870 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009d2c:	bf00      	nop
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	20000130 	.word	0x20000130
 8009d34:	200005b4 	.word	0x200005b4
 8009d38:	20000014 	.word	0x20000014
 8009d3c:	2000011c 	.word	0x2000011c

08009d40 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009d44:	2200      	movs	r2, #0
 8009d46:	4905      	ldr	r1, [pc, #20]	; (8009d5c <CDC_Init_FS+0x1c>)
 8009d48:	4805      	ldr	r0, [pc, #20]	; (8009d60 <CDC_Init_FS+0x20>)
 8009d4a:	f7fe f96c 	bl	8008026 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009d4e:	4905      	ldr	r1, [pc, #20]	; (8009d64 <CDC_Init_FS+0x24>)
 8009d50:	4803      	ldr	r0, [pc, #12]	; (8009d60 <CDC_Init_FS+0x20>)
 8009d52:	f7fe f986 	bl	8008062 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009d56:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	bd80      	pop	{r7, pc}
 8009d5c:	20001084 	.word	0x20001084
 8009d60:	200005b4 	.word	0x200005b4
 8009d64:	20000884 	.word	0x20000884

08009d68 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009d6c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	4603      	mov	r3, r0
 8009d80:	6039      	str	r1, [r7, #0]
 8009d82:	71fb      	strb	r3, [r7, #7]
 8009d84:	4613      	mov	r3, r2
 8009d86:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009d88:	79fb      	ldrb	r3, [r7, #7]
 8009d8a:	2b23      	cmp	r3, #35	; 0x23
 8009d8c:	d84a      	bhi.n	8009e24 <CDC_Control_FS+0xac>
 8009d8e:	a201      	add	r2, pc, #4	; (adr r2, 8009d94 <CDC_Control_FS+0x1c>)
 8009d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d94:	08009e25 	.word	0x08009e25
 8009d98:	08009e25 	.word	0x08009e25
 8009d9c:	08009e25 	.word	0x08009e25
 8009da0:	08009e25 	.word	0x08009e25
 8009da4:	08009e25 	.word	0x08009e25
 8009da8:	08009e25 	.word	0x08009e25
 8009dac:	08009e25 	.word	0x08009e25
 8009db0:	08009e25 	.word	0x08009e25
 8009db4:	08009e25 	.word	0x08009e25
 8009db8:	08009e25 	.word	0x08009e25
 8009dbc:	08009e25 	.word	0x08009e25
 8009dc0:	08009e25 	.word	0x08009e25
 8009dc4:	08009e25 	.word	0x08009e25
 8009dc8:	08009e25 	.word	0x08009e25
 8009dcc:	08009e25 	.word	0x08009e25
 8009dd0:	08009e25 	.word	0x08009e25
 8009dd4:	08009e25 	.word	0x08009e25
 8009dd8:	08009e25 	.word	0x08009e25
 8009ddc:	08009e25 	.word	0x08009e25
 8009de0:	08009e25 	.word	0x08009e25
 8009de4:	08009e25 	.word	0x08009e25
 8009de8:	08009e25 	.word	0x08009e25
 8009dec:	08009e25 	.word	0x08009e25
 8009df0:	08009e25 	.word	0x08009e25
 8009df4:	08009e25 	.word	0x08009e25
 8009df8:	08009e25 	.word	0x08009e25
 8009dfc:	08009e25 	.word	0x08009e25
 8009e00:	08009e25 	.word	0x08009e25
 8009e04:	08009e25 	.word	0x08009e25
 8009e08:	08009e25 	.word	0x08009e25
 8009e0c:	08009e25 	.word	0x08009e25
 8009e10:	08009e25 	.word	0x08009e25
 8009e14:	08009e25 	.word	0x08009e25
 8009e18:	08009e25 	.word	0x08009e25
 8009e1c:	08009e25 	.word	0x08009e25
 8009e20:	08009e25 	.word	0x08009e25
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009e24:	bf00      	nop
  }

  return (USBD_OK);
 8009e26:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	370c      	adds	r7, #12
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009e3e:	6879      	ldr	r1, [r7, #4]
 8009e40:	4805      	ldr	r0, [pc, #20]	; (8009e58 <CDC_Receive_FS+0x24>)
 8009e42:	f7fe f90e 	bl	8008062 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009e46:	4804      	ldr	r0, [pc, #16]	; (8009e58 <CDC_Receive_FS+0x24>)
 8009e48:	f7fe f924 	bl	8008094 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009e4c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3708      	adds	r7, #8
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	200005b4 	.word	0x200005b4

08009e5c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b087      	sub	sp, #28
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	60f8      	str	r0, [r7, #12]
 8009e64:	60b9      	str	r1, [r7, #8]
 8009e66:	4613      	mov	r3, r2
 8009e68:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009e6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	371c      	adds	r7, #28
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr
	...

08009e80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b08a      	sub	sp, #40	; 0x28
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e88:	f107 0314 	add.w	r3, r7, #20
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	601a      	str	r2, [r3, #0]
 8009e90:	605a      	str	r2, [r3, #4]
 8009e92:	609a      	str	r2, [r3, #8]
 8009e94:	60da      	str	r2, [r3, #12]
 8009e96:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ea0:	d147      	bne.n	8009f32 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	613b      	str	r3, [r7, #16]
 8009ea6:	4b25      	ldr	r3, [pc, #148]	; (8009f3c <HAL_PCD_MspInit+0xbc>)
 8009ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eaa:	4a24      	ldr	r2, [pc, #144]	; (8009f3c <HAL_PCD_MspInit+0xbc>)
 8009eac:	f043 0301 	orr.w	r3, r3, #1
 8009eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8009eb2:	4b22      	ldr	r3, [pc, #136]	; (8009f3c <HAL_PCD_MspInit+0xbc>)
 8009eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eb6:	f003 0301 	and.w	r3, r3, #1
 8009eba:	613b      	str	r3, [r7, #16]
 8009ebc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009ebe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ecc:	f107 0314 	add.w	r3, r7, #20
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	481b      	ldr	r0, [pc, #108]	; (8009f40 <HAL_PCD_MspInit+0xc0>)
 8009ed4:	f7f6 ffbe 	bl	8000e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009ed8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ede:	2302      	movs	r3, #2
 8009ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ee6:	2303      	movs	r3, #3
 8009ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009eea:	230a      	movs	r3, #10
 8009eec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009eee:	f107 0314 	add.w	r3, r7, #20
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	4812      	ldr	r0, [pc, #72]	; (8009f40 <HAL_PCD_MspInit+0xc0>)
 8009ef6:	f7f6 ffad 	bl	8000e54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009efa:	4b10      	ldr	r3, [pc, #64]	; (8009f3c <HAL_PCD_MspInit+0xbc>)
 8009efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009efe:	4a0f      	ldr	r2, [pc, #60]	; (8009f3c <HAL_PCD_MspInit+0xbc>)
 8009f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f04:	6353      	str	r3, [r2, #52]	; 0x34
 8009f06:	2300      	movs	r3, #0
 8009f08:	60fb      	str	r3, [r7, #12]
 8009f0a:	4b0c      	ldr	r3, [pc, #48]	; (8009f3c <HAL_PCD_MspInit+0xbc>)
 8009f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f0e:	4a0b      	ldr	r2, [pc, #44]	; (8009f3c <HAL_PCD_MspInit+0xbc>)
 8009f10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009f14:	6453      	str	r3, [r2, #68]	; 0x44
 8009f16:	4b09      	ldr	r3, [pc, #36]	; (8009f3c <HAL_PCD_MspInit+0xbc>)
 8009f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f1e:	60fb      	str	r3, [r7, #12]
 8009f20:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009f22:	2200      	movs	r2, #0
 8009f24:	2100      	movs	r1, #0
 8009f26:	2043      	movs	r0, #67	; 0x43
 8009f28:	f7f6 fc43 	bl	80007b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009f2c:	2043      	movs	r0, #67	; 0x43
 8009f2e:	f7f6 fc5c 	bl	80007ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009f32:	bf00      	nop
 8009f34:	3728      	adds	r7, #40	; 0x28
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	40023800 	.word	0x40023800
 8009f40:	40020000 	.word	0x40020000

08009f44 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009f58:	4619      	mov	r1, r3
 8009f5a:	4610      	mov	r0, r2
 8009f5c:	f7fe f966 	bl	800822c <USBD_LL_SetupStage>
}
 8009f60:	bf00      	nop
 8009f62:	3708      	adds	r7, #8
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	460b      	mov	r3, r1
 8009f72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009f7a:	78fa      	ldrb	r2, [r7, #3]
 8009f7c:	6879      	ldr	r1, [r7, #4]
 8009f7e:	4613      	mov	r3, r2
 8009f80:	00db      	lsls	r3, r3, #3
 8009f82:	1a9b      	subs	r3, r3, r2
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	440b      	add	r3, r1
 8009f88:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	78fb      	ldrb	r3, [r7, #3]
 8009f90:	4619      	mov	r1, r3
 8009f92:	f7fe f9a0 	bl	80082d6 <USBD_LL_DataOutStage>
}
 8009f96:	bf00      	nop
 8009f98:	3708      	adds	r7, #8
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b082      	sub	sp, #8
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009fb0:	78fa      	ldrb	r2, [r7, #3]
 8009fb2:	6879      	ldr	r1, [r7, #4]
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	00db      	lsls	r3, r3, #3
 8009fb8:	1a9b      	subs	r3, r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	440b      	add	r3, r1
 8009fbe:	3348      	adds	r3, #72	; 0x48
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	78fb      	ldrb	r3, [r7, #3]
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	f7fe f9e9 	bl	800839c <USBD_LL_DataInStage>
}
 8009fca:	bf00      	nop
 8009fcc:	3708      	adds	r7, #8
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b082      	sub	sp, #8
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7fe fafd 	bl	80085e0 <USBD_LL_SOF>
}
 8009fe6:	bf00      	nop
 8009fe8:	3708      	adds	r7, #8
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b084      	sub	sp, #16
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	2b02      	cmp	r3, #2
 800a000:	d001      	beq.n	800a006 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a002:	f7ff fc35 	bl	8009870 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a00c:	7bfa      	ldrb	r2, [r7, #15]
 800a00e:	4611      	mov	r1, r2
 800a010:	4618      	mov	r0, r3
 800a012:	f7fe faa7 	bl	8008564 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a01c:	4618      	mov	r0, r3
 800a01e:	f7fe fa53 	bl	80084c8 <USBD_LL_Reset>
}
 800a022:	bf00      	nop
 800a024:	3710      	adds	r7, #16
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
	...

0800a02c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7fe faa2 	bl	8008584 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	687a      	ldr	r2, [r7, #4]
 800a04c:	6812      	ldr	r2, [r2, #0]
 800a04e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a052:	f043 0301 	orr.w	r3, r3, #1
 800a056:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6a1b      	ldr	r3, [r3, #32]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d005      	beq.n	800a06c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a060:	4b04      	ldr	r3, [pc, #16]	; (800a074 <HAL_PCD_SuspendCallback+0x48>)
 800a062:	691b      	ldr	r3, [r3, #16]
 800a064:	4a03      	ldr	r2, [pc, #12]	; (800a074 <HAL_PCD_SuspendCallback+0x48>)
 800a066:	f043 0306 	orr.w	r3, r3, #6
 800a06a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a06c:	bf00      	nop
 800a06e:	3708      	adds	r7, #8
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}
 800a074:	e000ed00 	.word	0xe000ed00

0800a078 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a086:	4618      	mov	r0, r3
 800a088:	f7fe fa92 	bl	80085b0 <USBD_LL_Resume>
}
 800a08c:	bf00      	nop
 800a08e:	3708      	adds	r7, #8
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	460b      	mov	r3, r1
 800a09e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a0a6:	78fa      	ldrb	r2, [r7, #3]
 800a0a8:	4611      	mov	r1, r2
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7fe fae0 	bl	8008670 <USBD_LL_IsoOUTIncomplete>
}
 800a0b0:	bf00      	nop
 800a0b2:	3708      	adds	r7, #8
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a0ca:	78fa      	ldrb	r2, [r7, #3]
 800a0cc:	4611      	mov	r1, r2
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7fe faa8 	bl	8008624 <USBD_LL_IsoINIncomplete>
}
 800a0d4:	bf00      	nop
 800a0d6:	3708      	adds	r7, #8
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f7fe fae6 	bl	80086bc <USBD_LL_DevConnected>
}
 800a0f0:	bf00      	nop
 800a0f2:	3708      	adds	r7, #8
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a106:	4618      	mov	r0, r3
 800a108:	f7fe fae3 	bl	80086d2 <USBD_LL_DevDisconnected>
}
 800a10c:	bf00      	nop
 800a10e:	3708      	adds	r7, #8
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b082      	sub	sp, #8
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d13c      	bne.n	800a19e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a124:	4a20      	ldr	r2, [pc, #128]	; (800a1a8 <USBD_LL_Init+0x94>)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4a1e      	ldr	r2, [pc, #120]	; (800a1a8 <USBD_LL_Init+0x94>)
 800a130:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a134:	4b1c      	ldr	r3, [pc, #112]	; (800a1a8 <USBD_LL_Init+0x94>)
 800a136:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a13a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a13c:	4b1a      	ldr	r3, [pc, #104]	; (800a1a8 <USBD_LL_Init+0x94>)
 800a13e:	2204      	movs	r2, #4
 800a140:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a142:	4b19      	ldr	r3, [pc, #100]	; (800a1a8 <USBD_LL_Init+0x94>)
 800a144:	2202      	movs	r2, #2
 800a146:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a148:	4b17      	ldr	r3, [pc, #92]	; (800a1a8 <USBD_LL_Init+0x94>)
 800a14a:	2200      	movs	r2, #0
 800a14c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a14e:	4b16      	ldr	r3, [pc, #88]	; (800a1a8 <USBD_LL_Init+0x94>)
 800a150:	2202      	movs	r2, #2
 800a152:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a154:	4b14      	ldr	r3, [pc, #80]	; (800a1a8 <USBD_LL_Init+0x94>)
 800a156:	2200      	movs	r2, #0
 800a158:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a15a:	4b13      	ldr	r3, [pc, #76]	; (800a1a8 <USBD_LL_Init+0x94>)
 800a15c:	2200      	movs	r2, #0
 800a15e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a160:	4b11      	ldr	r3, [pc, #68]	; (800a1a8 <USBD_LL_Init+0x94>)
 800a162:	2200      	movs	r2, #0
 800a164:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a166:	4b10      	ldr	r3, [pc, #64]	; (800a1a8 <USBD_LL_Init+0x94>)
 800a168:	2201      	movs	r2, #1
 800a16a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a16c:	4b0e      	ldr	r3, [pc, #56]	; (800a1a8 <USBD_LL_Init+0x94>)
 800a16e:	2200      	movs	r2, #0
 800a170:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a172:	480d      	ldr	r0, [pc, #52]	; (800a1a8 <USBD_LL_Init+0x94>)
 800a174:	f7f8 fd25 	bl	8002bc2 <HAL_PCD_Init>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d001      	beq.n	800a182 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a17e:	f7ff fb77 	bl	8009870 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a182:	2180      	movs	r1, #128	; 0x80
 800a184:	4808      	ldr	r0, [pc, #32]	; (800a1a8 <USBD_LL_Init+0x94>)
 800a186:	f7f9 fe82 	bl	8003e8e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a18a:	2240      	movs	r2, #64	; 0x40
 800a18c:	2100      	movs	r1, #0
 800a18e:	4806      	ldr	r0, [pc, #24]	; (800a1a8 <USBD_LL_Init+0x94>)
 800a190:	f7f9 fe36 	bl	8003e00 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a194:	2280      	movs	r2, #128	; 0x80
 800a196:	2101      	movs	r1, #1
 800a198:	4803      	ldr	r0, [pc, #12]	; (800a1a8 <USBD_LL_Init+0x94>)
 800a19a:	f7f9 fe31 	bl	8003e00 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a19e:	2300      	movs	r3, #0
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3708      	adds	r7, #8
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	20001884 	.word	0x20001884

0800a1ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f7f8 fe1a 	bl	8002dfc <HAL_PCD_Start>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1cc:	7bfb      	ldrb	r3, [r7, #15]
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f000 f942 	bl	800a458 <USBD_Get_USB_Status>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3710      	adds	r7, #16
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a1e2:	b580      	push	{r7, lr}
 800a1e4:	b084      	sub	sp, #16
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
 800a1ea:	4608      	mov	r0, r1
 800a1ec:	4611      	mov	r1, r2
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	70fb      	strb	r3, [r7, #3]
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	70bb      	strb	r3, [r7, #2]
 800a1f8:	4613      	mov	r3, r2
 800a1fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a200:	2300      	movs	r3, #0
 800a202:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a20a:	78bb      	ldrb	r3, [r7, #2]
 800a20c:	883a      	ldrh	r2, [r7, #0]
 800a20e:	78f9      	ldrb	r1, [r7, #3]
 800a210:	f7f9 f9fe 	bl	8003610 <HAL_PCD_EP_Open>
 800a214:	4603      	mov	r3, r0
 800a216:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a218:	7bfb      	ldrb	r3, [r7, #15]
 800a21a:	4618      	mov	r0, r3
 800a21c:	f000 f91c 	bl	800a458 <USBD_Get_USB_Status>
 800a220:	4603      	mov	r3, r0
 800a222:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a224:	7bbb      	ldrb	r3, [r7, #14]
}
 800a226:	4618      	mov	r0, r3
 800a228:	3710      	adds	r7, #16
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}

0800a22e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a22e:	b580      	push	{r7, lr}
 800a230:	b084      	sub	sp, #16
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
 800a236:	460b      	mov	r3, r1
 800a238:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a23a:	2300      	movs	r3, #0
 800a23c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a23e:	2300      	movs	r3, #0
 800a240:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a248:	78fa      	ldrb	r2, [r7, #3]
 800a24a:	4611      	mov	r1, r2
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7f9 fa47 	bl	80036e0 <HAL_PCD_EP_Close>
 800a252:	4603      	mov	r3, r0
 800a254:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a256:	7bfb      	ldrb	r3, [r7, #15]
 800a258:	4618      	mov	r0, r3
 800a25a:	f000 f8fd 	bl	800a458 <USBD_Get_USB_Status>
 800a25e:	4603      	mov	r3, r0
 800a260:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a262:	7bbb      	ldrb	r3, [r7, #14]
}
 800a264:	4618      	mov	r0, r3
 800a266:	3710      	adds	r7, #16
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	460b      	mov	r3, r1
 800a276:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a278:	2300      	movs	r3, #0
 800a27a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a27c:	2300      	movs	r3, #0
 800a27e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a286:	78fa      	ldrb	r2, [r7, #3]
 800a288:	4611      	mov	r1, r2
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7f9 fb1f 	bl	80038ce <HAL_PCD_EP_SetStall>
 800a290:	4603      	mov	r3, r0
 800a292:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a294:	7bfb      	ldrb	r3, [r7, #15]
 800a296:	4618      	mov	r0, r3
 800a298:	f000 f8de 	bl	800a458 <USBD_Get_USB_Status>
 800a29c:	4603      	mov	r3, r0
 800a29e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3710      	adds	r7, #16
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b084      	sub	sp, #16
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a2c4:	78fa      	ldrb	r2, [r7, #3]
 800a2c6:	4611      	mov	r1, r2
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f7f9 fb64 	bl	8003996 <HAL_PCD_EP_ClrStall>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2d2:	7bfb      	ldrb	r3, [r7, #15]
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f000 f8bf 	bl	800a458 <USBD_Get_USB_Status>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2de:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3710      	adds	r7, #16
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b085      	sub	sp, #20
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a2fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a2fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a300:	2b00      	cmp	r3, #0
 800a302:	da0b      	bge.n	800a31c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a304:	78fb      	ldrb	r3, [r7, #3]
 800a306:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a30a:	68f9      	ldr	r1, [r7, #12]
 800a30c:	4613      	mov	r3, r2
 800a30e:	00db      	lsls	r3, r3, #3
 800a310:	1a9b      	subs	r3, r3, r2
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	440b      	add	r3, r1
 800a316:	333e      	adds	r3, #62	; 0x3e
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	e00b      	b.n	800a334 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a31c:	78fb      	ldrb	r3, [r7, #3]
 800a31e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a322:	68f9      	ldr	r1, [r7, #12]
 800a324:	4613      	mov	r3, r2
 800a326:	00db      	lsls	r3, r3, #3
 800a328:	1a9b      	subs	r3, r3, r2
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	440b      	add	r3, r1
 800a32e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a332:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a334:	4618      	mov	r0, r3
 800a336:	3714      	adds	r7, #20
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr

0800a340 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	460b      	mov	r3, r1
 800a34a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a34c:	2300      	movs	r3, #0
 800a34e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a350:	2300      	movs	r3, #0
 800a352:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a35a:	78fa      	ldrb	r2, [r7, #3]
 800a35c:	4611      	mov	r1, r2
 800a35e:	4618      	mov	r0, r3
 800a360:	f7f9 f931 	bl	80035c6 <HAL_PCD_SetAddress>
 800a364:	4603      	mov	r3, r0
 800a366:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a368:	7bfb      	ldrb	r3, [r7, #15]
 800a36a:	4618      	mov	r0, r3
 800a36c:	f000 f874 	bl	800a458 <USBD_Get_USB_Status>
 800a370:	4603      	mov	r3, r0
 800a372:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a374:	7bbb      	ldrb	r3, [r7, #14]
}
 800a376:	4618      	mov	r0, r3
 800a378:	3710      	adds	r7, #16
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a37e:	b580      	push	{r7, lr}
 800a380:	b086      	sub	sp, #24
 800a382:	af00      	add	r7, sp, #0
 800a384:	60f8      	str	r0, [r7, #12]
 800a386:	607a      	str	r2, [r7, #4]
 800a388:	603b      	str	r3, [r7, #0]
 800a38a:	460b      	mov	r3, r1
 800a38c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a38e:	2300      	movs	r3, #0
 800a390:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a392:	2300      	movs	r3, #0
 800a394:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a39c:	7af9      	ldrb	r1, [r7, #11]
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	f7f9 fa4a 	bl	800383a <HAL_PCD_EP_Transmit>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3aa:	7dfb      	ldrb	r3, [r7, #23]
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f000 f853 	bl	800a458 <USBD_Get_USB_Status>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a3b6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3718      	adds	r7, #24
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b086      	sub	sp, #24
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	607a      	str	r2, [r7, #4]
 800a3ca:	603b      	str	r3, [r7, #0]
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a3de:	7af9      	ldrb	r1, [r7, #11]
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	f7f9 f9c6 	bl	8003774 <HAL_PCD_EP_Receive>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3ec:	7dfb      	ldrb	r3, [r7, #23]
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f000 f832 	bl	800a458 <USBD_Get_USB_Status>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a3f8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3718      	adds	r7, #24
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}

0800a402 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a402:	b580      	push	{r7, lr}
 800a404:	b082      	sub	sp, #8
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
 800a40a:	460b      	mov	r3, r1
 800a40c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a414:	78fa      	ldrb	r2, [r7, #3]
 800a416:	4611      	mov	r1, r2
 800a418:	4618      	mov	r0, r3
 800a41a:	f7f9 f9f6 	bl	800380a <HAL_PCD_EP_GetRxCount>
 800a41e:	4603      	mov	r3, r0
}
 800a420:	4618      	mov	r0, r3
 800a422:	3708      	adds	r7, #8
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a430:	4b03      	ldr	r3, [pc, #12]	; (800a440 <USBD_static_malloc+0x18>)
}
 800a432:	4618      	mov	r0, r3
 800a434:	370c      	adds	r7, #12
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr
 800a43e:	bf00      	nop
 800a440:	200001a0 	.word	0x200001a0

0800a444 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a444:	b480      	push	{r7}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]

}
 800a44c:	bf00      	nop
 800a44e:	370c      	adds	r7, #12
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr

0800a458 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a458:	b480      	push	{r7}
 800a45a:	b085      	sub	sp, #20
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	4603      	mov	r3, r0
 800a460:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a462:	2300      	movs	r3, #0
 800a464:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a466:	79fb      	ldrb	r3, [r7, #7]
 800a468:	2b03      	cmp	r3, #3
 800a46a:	d817      	bhi.n	800a49c <USBD_Get_USB_Status+0x44>
 800a46c:	a201      	add	r2, pc, #4	; (adr r2, 800a474 <USBD_Get_USB_Status+0x1c>)
 800a46e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a472:	bf00      	nop
 800a474:	0800a485 	.word	0x0800a485
 800a478:	0800a48b 	.word	0x0800a48b
 800a47c:	0800a491 	.word	0x0800a491
 800a480:	0800a497 	.word	0x0800a497
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a484:	2300      	movs	r3, #0
 800a486:	73fb      	strb	r3, [r7, #15]
    break;
 800a488:	e00b      	b.n	800a4a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a48a:	2303      	movs	r3, #3
 800a48c:	73fb      	strb	r3, [r7, #15]
    break;
 800a48e:	e008      	b.n	800a4a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a490:	2301      	movs	r3, #1
 800a492:	73fb      	strb	r3, [r7, #15]
    break;
 800a494:	e005      	b.n	800a4a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a496:	2303      	movs	r3, #3
 800a498:	73fb      	strb	r3, [r7, #15]
    break;
 800a49a:	e002      	b.n	800a4a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a49c:	2303      	movs	r3, #3
 800a49e:	73fb      	strb	r3, [r7, #15]
    break;
 800a4a0:	bf00      	nop
  }
  return usb_status;
 800a4a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3714      	adds	r7, #20
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr

0800a4b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	6039      	str	r1, [r7, #0]
 800a4ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	2212      	movs	r2, #18
 800a4c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a4c2:	4b03      	ldr	r3, [pc, #12]	; (800a4d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	370c      	adds	r7, #12
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr
 800a4d0:	2000014c 	.word	0x2000014c

0800a4d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b083      	sub	sp, #12
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	4603      	mov	r3, r0
 800a4dc:	6039      	str	r1, [r7, #0]
 800a4de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	2204      	movs	r2, #4
 800a4e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a4e6:	4b03      	ldr	r3, [pc, #12]	; (800a4f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	370c      	adds	r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr
 800a4f4:	20000160 	.word	0x20000160

0800a4f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	4603      	mov	r3, r0
 800a500:	6039      	str	r1, [r7, #0]
 800a502:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a504:	79fb      	ldrb	r3, [r7, #7]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d105      	bne.n	800a516 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a50a:	683a      	ldr	r2, [r7, #0]
 800a50c:	4907      	ldr	r1, [pc, #28]	; (800a52c <USBD_FS_ProductStrDescriptor+0x34>)
 800a50e:	4808      	ldr	r0, [pc, #32]	; (800a530 <USBD_FS_ProductStrDescriptor+0x38>)
 800a510:	f7fe fe73 	bl	80091fa <USBD_GetString>
 800a514:	e004      	b.n	800a520 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a516:	683a      	ldr	r2, [r7, #0]
 800a518:	4904      	ldr	r1, [pc, #16]	; (800a52c <USBD_FS_ProductStrDescriptor+0x34>)
 800a51a:	4805      	ldr	r0, [pc, #20]	; (800a530 <USBD_FS_ProductStrDescriptor+0x38>)
 800a51c:	f7fe fe6d 	bl	80091fa <USBD_GetString>
  }
  return USBD_StrDesc;
 800a520:	4b02      	ldr	r3, [pc, #8]	; (800a52c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a522:	4618      	mov	r0, r3
 800a524:	3708      	adds	r7, #8
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	20001c8c 	.word	0x20001c8c
 800a530:	0800a794 	.word	0x0800a794

0800a534 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	4603      	mov	r3, r0
 800a53c:	6039      	str	r1, [r7, #0]
 800a53e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a540:	683a      	ldr	r2, [r7, #0]
 800a542:	4904      	ldr	r1, [pc, #16]	; (800a554 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a544:	4804      	ldr	r0, [pc, #16]	; (800a558 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a546:	f7fe fe58 	bl	80091fa <USBD_GetString>
  return USBD_StrDesc;
 800a54a:	4b02      	ldr	r3, [pc, #8]	; (800a554 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3708      	adds	r7, #8
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}
 800a554:	20001c8c 	.word	0x20001c8c
 800a558:	0800a7ac 	.word	0x0800a7ac

0800a55c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b082      	sub	sp, #8
 800a560:	af00      	add	r7, sp, #0
 800a562:	4603      	mov	r3, r0
 800a564:	6039      	str	r1, [r7, #0]
 800a566:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	221a      	movs	r2, #26
 800a56c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a56e:	f000 f843 	bl	800a5f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a572:	4b02      	ldr	r3, [pc, #8]	; (800a57c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a574:	4618      	mov	r0, r3
 800a576:	3708      	adds	r7, #8
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	20000164 	.word	0x20000164

0800a580 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b082      	sub	sp, #8
 800a584:	af00      	add	r7, sp, #0
 800a586:	4603      	mov	r3, r0
 800a588:	6039      	str	r1, [r7, #0]
 800a58a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a58c:	79fb      	ldrb	r3, [r7, #7]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d105      	bne.n	800a59e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a592:	683a      	ldr	r2, [r7, #0]
 800a594:	4907      	ldr	r1, [pc, #28]	; (800a5b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a596:	4808      	ldr	r0, [pc, #32]	; (800a5b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a598:	f7fe fe2f 	bl	80091fa <USBD_GetString>
 800a59c:	e004      	b.n	800a5a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a59e:	683a      	ldr	r2, [r7, #0]
 800a5a0:	4904      	ldr	r1, [pc, #16]	; (800a5b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a5a2:	4805      	ldr	r0, [pc, #20]	; (800a5b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a5a4:	f7fe fe29 	bl	80091fa <USBD_GetString>
  }
  return USBD_StrDesc;
 800a5a8:	4b02      	ldr	r3, [pc, #8]	; (800a5b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3708      	adds	r7, #8
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	20001c8c 	.word	0x20001c8c
 800a5b8:	0800a7c0 	.word	0x0800a7c0

0800a5bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	6039      	str	r1, [r7, #0]
 800a5c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a5c8:	79fb      	ldrb	r3, [r7, #7]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d105      	bne.n	800a5da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a5ce:	683a      	ldr	r2, [r7, #0]
 800a5d0:	4907      	ldr	r1, [pc, #28]	; (800a5f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a5d2:	4808      	ldr	r0, [pc, #32]	; (800a5f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a5d4:	f7fe fe11 	bl	80091fa <USBD_GetString>
 800a5d8:	e004      	b.n	800a5e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a5da:	683a      	ldr	r2, [r7, #0]
 800a5dc:	4904      	ldr	r1, [pc, #16]	; (800a5f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a5de:	4805      	ldr	r0, [pc, #20]	; (800a5f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a5e0:	f7fe fe0b 	bl	80091fa <USBD_GetString>
  }
  return USBD_StrDesc;
 800a5e4:	4b02      	ldr	r3, [pc, #8]	; (800a5f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3708      	adds	r7, #8
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	20001c8c 	.word	0x20001c8c
 800a5f4:	0800a7cc 	.word	0x0800a7cc

0800a5f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a5fe:	4b0f      	ldr	r3, [pc, #60]	; (800a63c <Get_SerialNum+0x44>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a604:	4b0e      	ldr	r3, [pc, #56]	; (800a640 <Get_SerialNum+0x48>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a60a:	4b0e      	ldr	r3, [pc, #56]	; (800a644 <Get_SerialNum+0x4c>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a610:	68fa      	ldr	r2, [r7, #12]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	4413      	add	r3, r2
 800a616:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d009      	beq.n	800a632 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a61e:	2208      	movs	r2, #8
 800a620:	4909      	ldr	r1, [pc, #36]	; (800a648 <Get_SerialNum+0x50>)
 800a622:	68f8      	ldr	r0, [r7, #12]
 800a624:	f000 f814 	bl	800a650 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a628:	2204      	movs	r2, #4
 800a62a:	4908      	ldr	r1, [pc, #32]	; (800a64c <Get_SerialNum+0x54>)
 800a62c:	68b8      	ldr	r0, [r7, #8]
 800a62e:	f000 f80f 	bl	800a650 <IntToUnicode>
  }
}
 800a632:	bf00      	nop
 800a634:	3710      	adds	r7, #16
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	1fff7a10 	.word	0x1fff7a10
 800a640:	1fff7a14 	.word	0x1fff7a14
 800a644:	1fff7a18 	.word	0x1fff7a18
 800a648:	20000166 	.word	0x20000166
 800a64c:	20000176 	.word	0x20000176

0800a650 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a650:	b480      	push	{r7}
 800a652:	b087      	sub	sp, #28
 800a654:	af00      	add	r7, sp, #0
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	60b9      	str	r1, [r7, #8]
 800a65a:	4613      	mov	r3, r2
 800a65c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a65e:	2300      	movs	r3, #0
 800a660:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a662:	2300      	movs	r3, #0
 800a664:	75fb      	strb	r3, [r7, #23]
 800a666:	e027      	b.n	800a6b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	0f1b      	lsrs	r3, r3, #28
 800a66c:	2b09      	cmp	r3, #9
 800a66e:	d80b      	bhi.n	800a688 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	0f1b      	lsrs	r3, r3, #28
 800a674:	b2da      	uxtb	r2, r3
 800a676:	7dfb      	ldrb	r3, [r7, #23]
 800a678:	005b      	lsls	r3, r3, #1
 800a67a:	4619      	mov	r1, r3
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	440b      	add	r3, r1
 800a680:	3230      	adds	r2, #48	; 0x30
 800a682:	b2d2      	uxtb	r2, r2
 800a684:	701a      	strb	r2, [r3, #0]
 800a686:	e00a      	b.n	800a69e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	0f1b      	lsrs	r3, r3, #28
 800a68c:	b2da      	uxtb	r2, r3
 800a68e:	7dfb      	ldrb	r3, [r7, #23]
 800a690:	005b      	lsls	r3, r3, #1
 800a692:	4619      	mov	r1, r3
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	440b      	add	r3, r1
 800a698:	3237      	adds	r2, #55	; 0x37
 800a69a:	b2d2      	uxtb	r2, r2
 800a69c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	011b      	lsls	r3, r3, #4
 800a6a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a6a4:	7dfb      	ldrb	r3, [r7, #23]
 800a6a6:	005b      	lsls	r3, r3, #1
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	68ba      	ldr	r2, [r7, #8]
 800a6ac:	4413      	add	r3, r2
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a6b2:	7dfb      	ldrb	r3, [r7, #23]
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	75fb      	strb	r3, [r7, #23]
 800a6b8:	7dfa      	ldrb	r2, [r7, #23]
 800a6ba:	79fb      	ldrb	r3, [r7, #7]
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d3d3      	bcc.n	800a668 <IntToUnicode+0x18>
  }
}
 800a6c0:	bf00      	nop
 800a6c2:	bf00      	nop
 800a6c4:	371c      	adds	r7, #28
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr
	...

0800a6d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800a6d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a708 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a6d4:	480d      	ldr	r0, [pc, #52]	; (800a70c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800a6d6:	490e      	ldr	r1, [pc, #56]	; (800a710 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800a6d8:	4a0e      	ldr	r2, [pc, #56]	; (800a714 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800a6da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a6dc:	e002      	b.n	800a6e4 <LoopCopyDataInit>

0800a6de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a6de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a6e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a6e2:	3304      	adds	r3, #4

0800a6e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a6e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a6e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a6e8:	d3f9      	bcc.n	800a6de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a6ea:	4a0b      	ldr	r2, [pc, #44]	; (800a718 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800a6ec:	4c0b      	ldr	r4, [pc, #44]	; (800a71c <LoopFillZerobss+0x26>)
  movs r3, #0
 800a6ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a6f0:	e001      	b.n	800a6f6 <LoopFillZerobss>

0800a6f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a6f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a6f4:	3204      	adds	r2, #4

0800a6f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a6f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a6f8:	d3fb      	bcc.n	800a6f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a6fa:	f7ff fadf 	bl	8009cbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a6fe:	f000 f811 	bl	800a724 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a702:	f7fe fe5b 	bl	80093bc <main>
  bx  lr    
 800a706:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800a708:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800a70c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a710:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 800a714:	0800a80c 	.word	0x0800a80c
  ldr r2, =_sbss
 800a718:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 800a71c:	20001e8c 	.word	0x20001e8c

0800a720 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a720:	e7fe      	b.n	800a720 <ADC_IRQHandler>
	...

0800a724 <__libc_init_array>:
 800a724:	b570      	push	{r4, r5, r6, lr}
 800a726:	4d0d      	ldr	r5, [pc, #52]	; (800a75c <__libc_init_array+0x38>)
 800a728:	4c0d      	ldr	r4, [pc, #52]	; (800a760 <__libc_init_array+0x3c>)
 800a72a:	1b64      	subs	r4, r4, r5
 800a72c:	10a4      	asrs	r4, r4, #2
 800a72e:	2600      	movs	r6, #0
 800a730:	42a6      	cmp	r6, r4
 800a732:	d109      	bne.n	800a748 <__libc_init_array+0x24>
 800a734:	4d0b      	ldr	r5, [pc, #44]	; (800a764 <__libc_init_array+0x40>)
 800a736:	4c0c      	ldr	r4, [pc, #48]	; (800a768 <__libc_init_array+0x44>)
 800a738:	f000 f820 	bl	800a77c <_init>
 800a73c:	1b64      	subs	r4, r4, r5
 800a73e:	10a4      	asrs	r4, r4, #2
 800a740:	2600      	movs	r6, #0
 800a742:	42a6      	cmp	r6, r4
 800a744:	d105      	bne.n	800a752 <__libc_init_array+0x2e>
 800a746:	bd70      	pop	{r4, r5, r6, pc}
 800a748:	f855 3b04 	ldr.w	r3, [r5], #4
 800a74c:	4798      	blx	r3
 800a74e:	3601      	adds	r6, #1
 800a750:	e7ee      	b.n	800a730 <__libc_init_array+0xc>
 800a752:	f855 3b04 	ldr.w	r3, [r5], #4
 800a756:	4798      	blx	r3
 800a758:	3601      	adds	r6, #1
 800a75a:	e7f2      	b.n	800a742 <__libc_init_array+0x1e>
 800a75c:	0800a804 	.word	0x0800a804
 800a760:	0800a804 	.word	0x0800a804
 800a764:	0800a804 	.word	0x0800a804
 800a768:	0800a808 	.word	0x0800a808

0800a76c <memset>:
 800a76c:	4402      	add	r2, r0
 800a76e:	4603      	mov	r3, r0
 800a770:	4293      	cmp	r3, r2
 800a772:	d100      	bne.n	800a776 <memset+0xa>
 800a774:	4770      	bx	lr
 800a776:	f803 1b01 	strb.w	r1, [r3], #1
 800a77a:	e7f9      	b.n	800a770 <memset+0x4>

0800a77c <_init>:
 800a77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a77e:	bf00      	nop
 800a780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a782:	bc08      	pop	{r3}
 800a784:	469e      	mov	lr, r3
 800a786:	4770      	bx	lr

0800a788 <_fini>:
 800a788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a78a:	bf00      	nop
 800a78c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a78e:	bc08      	pop	{r3}
 800a790:	469e      	mov	lr, r3
 800a792:	4770      	bx	lr
