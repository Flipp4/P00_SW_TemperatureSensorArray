
Temperature Sensor Array.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7f8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800b990  0800b990  0001b990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9f8  0800b9f8  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9f8  0800b9f8  0001b9f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba00  0800ba00  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba00  0800ba00  0001ba00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba04  0800ba04  0001ba04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800ba08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001db0  20000180  0800bb88  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f30  0800bb88  00021f30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025e0b  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a3e  00000000  00000000  00045fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b48  00000000  00000000  0004aa00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001998  00000000  00000000  0004c548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d921  00000000  00000000  0004dee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022d84  00000000  00000000  0006b801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a02be  00000000  00000000  0008e585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012e843  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007320  00000000  00000000  0012e898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000180 	.word	0x20000180
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800b978 	.word	0x0800b978

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000184 	.word	0x20000184
 80001d4:	0800b978 	.word	0x0800b978

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <OperateLED_A>:
#include "BSP.h"
#include "main.h"


void OperateLED_A (LEDState_t eState)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
	if(eState == eLED_On)
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d105      	bne.n	80004ec <OperateLED_A+0x1c>
	{
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2101      	movs	r1, #1
 80004e4:	4807      	ldr	r0, [pc, #28]	; (8000504 <OperateLED_A+0x34>)
 80004e6:	f000 fecd 	bl	8001284 <HAL_GPIO_WritePin>
	}
	else if(eState == eLED_Off)
	{
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
	}
}
 80004ea:	e007      	b.n	80004fc <OperateLED_A+0x2c>
	else if(eState == eLED_Off)
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d104      	bne.n	80004fc <OperateLED_A+0x2c>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2101      	movs	r1, #1
 80004f6:	4803      	ldr	r0, [pc, #12]	; (8000504 <OperateLED_A+0x34>)
 80004f8:	f000 fec4 	bl	8001284 <HAL_GPIO_WritePin>
}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40020800 	.word	0x40020800

08000508 <ToggleLED_B>:
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
	}
}

void ToggleLED_B()
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800050c:	2102      	movs	r1, #2
 800050e:	4802      	ldr	r0, [pc, #8]	; (8000518 <ToggleLED_B+0x10>)
 8000510:	f000 fed1 	bl	80012b6 <HAL_GPIO_TogglePin>
}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40020800 	.word	0x40020800

0800051c <OperateSensorPower_A>:

void OperateSensorPower_A (SensorState_t eState)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	71fb      	strb	r3, [r7, #7]
	if(eState == eSensor_On)
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d106      	bne.n	800053a <OperateSensorPower_A+0x1e>
	{
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_SET);
 800052c:	2201      	movs	r2, #1
 800052e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000532:	4808      	ldr	r0, [pc, #32]	; (8000554 <OperateSensorPower_A+0x38>)
 8000534:	f000 fea6 	bl	8001284 <HAL_GPIO_WritePin>
	}
	else if(eState == eSensor_Off)
	{
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_RESET);
	}
}
 8000538:	e008      	b.n	800054c <OperateSensorPower_A+0x30>
	else if(eState == eSensor_Off)
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d105      	bne.n	800054c <OperateSensorPower_A+0x30>
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000546:	4803      	ldr	r0, [pc, #12]	; (8000554 <OperateSensorPower_A+0x38>)
 8000548:	f000 fe9c 	bl	8001284 <HAL_GPIO_WritePin>
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40020800 	.word	0x40020800

08000558 <OperateSensorPower_B>:
void OperateSensorPower_B (SensorState_t eState)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
	if(eState == eSensor_On)
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d106      	bne.n	8000576 <OperateSensorPower_B+0x1e>
	{
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_SET);
 8000568:	2201      	movs	r2, #1
 800056a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800056e:	4808      	ldr	r0, [pc, #32]	; (8000590 <OperateSensorPower_B+0x38>)
 8000570:	f000 fe88 	bl	8001284 <HAL_GPIO_WritePin>
	}
	else if(eState == eSensor_Off)
	{
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_RESET);
	}
}
 8000574:	e008      	b.n	8000588 <OperateSensorPower_B+0x30>
	else if(eState == eSensor_Off)
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	2b01      	cmp	r3, #1
 800057a:	d105      	bne.n	8000588 <OperateSensorPower_B+0x30>
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000582:	4803      	ldr	r0, [pc, #12]	; (8000590 <OperateSensorPower_B+0x38>)
 8000584:	f000 fe7e 	bl	8001284 <HAL_GPIO_WritePin>
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40020800 	.word	0x40020800

08000594 <TurnAllSensorOn>:

void TurnAllSensorOn()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	OperateSensorPower_A(eSensor_On);
 8000598:	2000      	movs	r0, #0
 800059a:	f7ff ffbf 	bl	800051c <OperateSensorPower_A>
	OperateSensorPower_B(eSensor_On);
 800059e:	2000      	movs	r0, #0
 80005a0:	f7ff ffda 	bl	8000558 <OperateSensorPower_B>
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <MCP9808_CommunicateTaskI2C1>:

float MCP9808_ReadTemperature(I2C_HandleTypeDef hI2C_Transciever, uint8_t u8DeviceHWAddress);
float MCP9808_DecodeTemperature(kMCP9808_CommData_t *kSensorArrayData);

void MCP9808_CommunicateTaskI2C1()
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
//			break;
//	default:
//	break;
//	}

}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
	...

080005b8 <MCP9808_InitCommunicationI2C1>:


void MCP9808_InitCommunicationI2C1(I2C_HandleTypeDef *hI2C_Transciever, uint8_t *u8DeviceAddressList, uint8_t u8DeviceCount)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b087      	sub	sp, #28
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	4613      	mov	r3, r2
 80005c4:	71fb      	strb	r3, [r7, #7]
	I2C1_Array.hTranscieverHandle = hI2C_Transciever;
 80005c6:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <MCP9808_InitCommunicationI2C1+0x3c>)
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	6013      	str	r3, [r2, #0]
	for( uint8_t u8AddresIndex = 0; u8AddresIndex < u8DeviceCount; u8AddresIndex++ )
 80005cc:	2300      	movs	r3, #0
 80005ce:	75fb      	strb	r3, [r7, #23]
 80005d0:	e002      	b.n	80005d8 <MCP9808_InitCommunicationI2C1+0x20>
 80005d2:	7dfb      	ldrb	r3, [r7, #23]
 80005d4:	3301      	adds	r3, #1
 80005d6:	75fb      	strb	r3, [r7, #23]
 80005d8:	7dfa      	ldrb	r2, [r7, #23]
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d3f8      	bcc.n	80005d2 <MCP9808_InitCommunicationI2C1+0x1a>
	{
//		I2C1_Array.u8DeviceAddressList[u8AddresIndex] = ((MCP9808_AddresLowerNibble << 4) + u8DeviceAddressList[u8AddresIndex]);
	}
	I2C1_Array.bEnabled = true;
 80005e0:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <MCP9808_InitCommunicationI2C1+0x3c>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	735a      	strb	r2, [r3, #13]
}
 80005e6:	bf00      	nop
 80005e8:	371c      	adds	r7, #28
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	200003ec 	.word	0x200003ec

080005f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005fc:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <HAL_Init+0x40>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a0d      	ldr	r2, [pc, #52]	; (8000638 <HAL_Init+0x40>)
 8000602:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000606:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000608:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <HAL_Init+0x40>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a0a      	ldr	r2, [pc, #40]	; (8000638 <HAL_Init+0x40>)
 800060e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000612:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <HAL_Init+0x40>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a07      	ldr	r2, [pc, #28]	; (8000638 <HAL_Init+0x40>)
 800061a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800061e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000620:	2003      	movs	r0, #3
 8000622:	f000 f94f 	bl	80008c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000626:	2000      	movs	r0, #0
 8000628:	f000 f808 	bl	800063c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800062c:	f00a f9da 	bl	800a9e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000630:	2300      	movs	r3, #0
}
 8000632:	4618      	mov	r0, r3
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40023c00 	.word	0x40023c00

0800063c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <HAL_InitTick+0x54>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <HAL_InitTick+0x58>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	4619      	mov	r1, r3
 800064e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000652:	fbb3 f3f1 	udiv	r3, r3, r1
 8000656:	fbb2 f3f3 	udiv	r3, r2, r3
 800065a:	4618      	mov	r0, r3
 800065c:	f000 f967 	bl	800092e <HAL_SYSTICK_Config>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000666:	2301      	movs	r3, #1
 8000668:	e00e      	b.n	8000688 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b0f      	cmp	r3, #15
 800066e:	d80a      	bhi.n	8000686 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000670:	2200      	movs	r2, #0
 8000672:	6879      	ldr	r1, [r7, #4]
 8000674:	f04f 30ff 	mov.w	r0, #4294967295
 8000678:	f000 f92f 	bl	80008da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800067c:	4a06      	ldr	r2, [pc, #24]	; (8000698 <HAL_InitTick+0x5c>)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000682:	2300      	movs	r3, #0
 8000684:	e000      	b.n	8000688 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000686:	2301      	movs	r3, #1
}
 8000688:	4618      	mov	r0, r3
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000118 	.word	0x20000118
 8000694:	20000004 	.word	0x20000004
 8000698:	20000000 	.word	0x20000000

0800069c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_IncTick+0x20>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	461a      	mov	r2, r3
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <HAL_IncTick+0x24>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4413      	add	r3, r2
 80006ac:	4a04      	ldr	r2, [pc, #16]	; (80006c0 <HAL_IncTick+0x24>)
 80006ae:	6013      	str	r3, [r2, #0]
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	20000004 	.word	0x20000004
 80006c0:	2000041c 	.word	0x2000041c

080006c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  return uwTick;
 80006c8:	4b03      	ldr	r3, [pc, #12]	; (80006d8 <HAL_GetTick+0x14>)
 80006ca:	681b      	ldr	r3, [r3, #0]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	2000041c 	.word	0x2000041c

080006dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006e4:	f7ff ffee 	bl	80006c4 <HAL_GetTick>
 80006e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006f4:	d005      	beq.n	8000702 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006f6:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <HAL_Delay+0x44>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	461a      	mov	r2, r3
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	4413      	add	r3, r2
 8000700:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000702:	bf00      	nop
 8000704:	f7ff ffde 	bl	80006c4 <HAL_GetTick>
 8000708:	4602      	mov	r2, r0
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	68fa      	ldr	r2, [r7, #12]
 8000710:	429a      	cmp	r2, r3
 8000712:	d8f7      	bhi.n	8000704 <HAL_Delay+0x28>
  {
  }
}
 8000714:	bf00      	nop
 8000716:	bf00      	nop
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000004 	.word	0x20000004

08000724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f003 0307 	and.w	r3, r3, #7
 8000732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <__NVIC_SetPriorityGrouping+0x44>)
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800073a:	68ba      	ldr	r2, [r7, #8]
 800073c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000740:	4013      	ands	r3, r2
 8000742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800074c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000756:	4a04      	ldr	r2, [pc, #16]	; (8000768 <__NVIC_SetPriorityGrouping+0x44>)
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	60d3      	str	r3, [r2, #12]
}
 800075c:	bf00      	nop
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000770:	4b04      	ldr	r3, [pc, #16]	; (8000784 <__NVIC_GetPriorityGrouping+0x18>)
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	0a1b      	lsrs	r3, r3, #8
 8000776:	f003 0307 	and.w	r3, r3, #7
}
 800077a:	4618      	mov	r0, r3
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000796:	2b00      	cmp	r3, #0
 8000798:	db0b      	blt.n	80007b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	f003 021f 	and.w	r2, r3, #31
 80007a0:	4907      	ldr	r1, [pc, #28]	; (80007c0 <__NVIC_EnableIRQ+0x38>)
 80007a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a6:	095b      	lsrs	r3, r3, #5
 80007a8:	2001      	movs	r0, #1
 80007aa:	fa00 f202 	lsl.w	r2, r0, r2
 80007ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000e100 	.word	0xe000e100

080007c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	6039      	str	r1, [r7, #0]
 80007ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	db0a      	blt.n	80007ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	490c      	ldr	r1, [pc, #48]	; (8000810 <__NVIC_SetPriority+0x4c>)
 80007de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e2:	0112      	lsls	r2, r2, #4
 80007e4:	b2d2      	uxtb	r2, r2
 80007e6:	440b      	add	r3, r1
 80007e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007ec:	e00a      	b.n	8000804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	4908      	ldr	r1, [pc, #32]	; (8000814 <__NVIC_SetPriority+0x50>)
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	f003 030f 	and.w	r3, r3, #15
 80007fa:	3b04      	subs	r3, #4
 80007fc:	0112      	lsls	r2, r2, #4
 80007fe:	b2d2      	uxtb	r2, r2
 8000800:	440b      	add	r3, r1
 8000802:	761a      	strb	r2, [r3, #24]
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	e000e100 	.word	0xe000e100
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000818:	b480      	push	{r7}
 800081a:	b089      	sub	sp, #36	; 0x24
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	f003 0307 	and.w	r3, r3, #7
 800082a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800082c:	69fb      	ldr	r3, [r7, #28]
 800082e:	f1c3 0307 	rsb	r3, r3, #7
 8000832:	2b04      	cmp	r3, #4
 8000834:	bf28      	it	cs
 8000836:	2304      	movcs	r3, #4
 8000838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	3304      	adds	r3, #4
 800083e:	2b06      	cmp	r3, #6
 8000840:	d902      	bls.n	8000848 <NVIC_EncodePriority+0x30>
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	3b03      	subs	r3, #3
 8000846:	e000      	b.n	800084a <NVIC_EncodePriority+0x32>
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800084c:	f04f 32ff 	mov.w	r2, #4294967295
 8000850:	69bb      	ldr	r3, [r7, #24]
 8000852:	fa02 f303 	lsl.w	r3, r2, r3
 8000856:	43da      	mvns	r2, r3
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	401a      	ands	r2, r3
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000860:	f04f 31ff 	mov.w	r1, #4294967295
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	fa01 f303 	lsl.w	r3, r1, r3
 800086a:	43d9      	mvns	r1, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000870:	4313      	orrs	r3, r2
         );
}
 8000872:	4618      	mov	r0, r3
 8000874:	3724      	adds	r7, #36	; 0x24
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
	...

08000880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3b01      	subs	r3, #1
 800088c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000890:	d301      	bcc.n	8000896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000892:	2301      	movs	r3, #1
 8000894:	e00f      	b.n	80008b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <SysTick_Config+0x40>)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3b01      	subs	r3, #1
 800089c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800089e:	210f      	movs	r1, #15
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
 80008a4:	f7ff ff8e 	bl	80007c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <SysTick_Config+0x40>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ae:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <SysTick_Config+0x40>)
 80008b0:	2207      	movs	r2, #7
 80008b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	e000e010 	.word	0xe000e010

080008c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff ff29 	bl	8000724 <__NVIC_SetPriorityGrouping>
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008da:	b580      	push	{r7, lr}
 80008dc:	b086      	sub	sp, #24
 80008de:	af00      	add	r7, sp, #0
 80008e0:	4603      	mov	r3, r0
 80008e2:	60b9      	str	r1, [r7, #8]
 80008e4:	607a      	str	r2, [r7, #4]
 80008e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008ec:	f7ff ff3e 	bl	800076c <__NVIC_GetPriorityGrouping>
 80008f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	68b9      	ldr	r1, [r7, #8]
 80008f6:	6978      	ldr	r0, [r7, #20]
 80008f8:	f7ff ff8e 	bl	8000818 <NVIC_EncodePriority>
 80008fc:	4602      	mov	r2, r0
 80008fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000902:	4611      	mov	r1, r2
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff ff5d 	bl	80007c4 <__NVIC_SetPriority>
}
 800090a:	bf00      	nop
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	4603      	mov	r3, r0
 800091a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800091c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff ff31 	bl	8000788 <__NVIC_EnableIRQ>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f7ff ffa2 	bl	8000880 <SysTick_Config>
 800093c:	4603      	mov	r3, r0
}
 800093e:	4618      	mov	r0, r3
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000954:	f7ff feb6 	bl	80006c4 <HAL_GetTick>
 8000958:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d101      	bne.n	8000964 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000960:	2301      	movs	r3, #1
 8000962:	e099      	b.n	8000a98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2202      	movs	r2, #2
 8000968:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2200      	movs	r2, #0
 8000970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f022 0201 	bic.w	r2, r2, #1
 8000982:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000984:	e00f      	b.n	80009a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000986:	f7ff fe9d 	bl	80006c4 <HAL_GetTick>
 800098a:	4602      	mov	r2, r0
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	1ad3      	subs	r3, r2, r3
 8000990:	2b05      	cmp	r3, #5
 8000992:	d908      	bls.n	80009a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2220      	movs	r2, #32
 8000998:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2203      	movs	r2, #3
 800099e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80009a2:	2303      	movs	r3, #3
 80009a4:	e078      	b.n	8000a98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d1e8      	bne.n	8000986 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80009bc:	697a      	ldr	r2, [r7, #20]
 80009be:	4b38      	ldr	r3, [pc, #224]	; (8000aa0 <HAL_DMA_Init+0x158>)
 80009c0:	4013      	ands	r3, r2
 80009c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	685a      	ldr	r2, [r3, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80009d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	691b      	ldr	r3, [r3, #16]
 80009d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6a1b      	ldr	r3, [r3, #32]
 80009f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80009f2:	697a      	ldr	r2, [r7, #20]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009fc:	2b04      	cmp	r3, #4
 80009fe:	d107      	bne.n	8000a10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	697a      	ldr	r2, [r7, #20]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	697a      	ldr	r2, [r7, #20]
 8000a16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	f023 0307 	bic.w	r3, r3, #7
 8000a26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a36:	2b04      	cmp	r3, #4
 8000a38:	d117      	bne.n	8000a6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a3e:	697a      	ldr	r2, [r7, #20]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d00e      	beq.n	8000a6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f000 fa19 	bl	8000e84 <DMA_CheckFifoParam>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d008      	beq.n	8000a6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2240      	movs	r2, #64	; 0x40
 8000a5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2201      	movs	r2, #1
 8000a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000a66:	2301      	movs	r3, #1
 8000a68:	e016      	b.n	8000a98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	697a      	ldr	r2, [r7, #20]
 8000a70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f000 f9d0 	bl	8000e18 <DMA_CalcBaseAndBitshift>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a80:	223f      	movs	r2, #63	; 0x3f
 8000a82:	409a      	lsls	r2, r3
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2201      	movs	r2, #1
 8000a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000a96:	2300      	movs	r3, #0
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3718      	adds	r7, #24
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	f010803f 	.word	0xf010803f

08000aa4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	2b02      	cmp	r3, #2
 8000ab6:	d004      	beq.n	8000ac2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2280      	movs	r2, #128	; 0x80
 8000abc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e00c      	b.n	8000adc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2205      	movs	r2, #5
 8000ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f022 0201 	bic.w	r2, r2, #1
 8000ad8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000af4:	4b92      	ldr	r3, [pc, #584]	; (8000d40 <HAL_DMA_IRQHandler+0x258>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a92      	ldr	r2, [pc, #584]	; (8000d44 <HAL_DMA_IRQHandler+0x25c>)
 8000afa:	fba2 2303 	umull	r2, r3, r2, r3
 8000afe:	0a9b      	lsrs	r3, r3, #10
 8000b00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b12:	2208      	movs	r2, #8
 8000b14:	409a      	lsls	r2, r3
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d01a      	beq.n	8000b54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f003 0304 	and.w	r3, r3, #4
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d013      	beq.n	8000b54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f022 0204 	bic.w	r2, r2, #4
 8000b3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b40:	2208      	movs	r2, #8
 8000b42:	409a      	lsls	r2, r3
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b4c:	f043 0201 	orr.w	r2, r3, #1
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b58:	2201      	movs	r2, #1
 8000b5a:	409a      	lsls	r2, r3
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d012      	beq.n	8000b8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	695b      	ldr	r3, [r3, #20]
 8000b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d00b      	beq.n	8000b8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b76:	2201      	movs	r2, #1
 8000b78:	409a      	lsls	r2, r3
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b82:	f043 0202 	orr.w	r2, r3, #2
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b8e:	2204      	movs	r2, #4
 8000b90:	409a      	lsls	r2, r3
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	4013      	ands	r3, r2
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d012      	beq.n	8000bc0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f003 0302 	and.w	r3, r3, #2
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d00b      	beq.n	8000bc0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bac:	2204      	movs	r2, #4
 8000bae:	409a      	lsls	r2, r3
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bb8:	f043 0204 	orr.w	r2, r3, #4
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc4:	2210      	movs	r2, #16
 8000bc6:	409a      	lsls	r2, r3
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d043      	beq.n	8000c58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f003 0308 	and.w	r3, r3, #8
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d03c      	beq.n	8000c58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000be2:	2210      	movs	r2, #16
 8000be4:	409a      	lsls	r2, r3
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d018      	beq.n	8000c2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d108      	bne.n	8000c18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d024      	beq.n	8000c58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	4798      	blx	r3
 8000c16:	e01f      	b.n	8000c58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d01b      	beq.n	8000c58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	4798      	blx	r3
 8000c28:	e016      	b.n	8000c58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d107      	bne.n	8000c48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f022 0208 	bic.w	r2, r2, #8
 8000c46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d003      	beq.n	8000c58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c5c:	2220      	movs	r2, #32
 8000c5e:	409a      	lsls	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4013      	ands	r3, r2
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f000 808e 	beq.w	8000d86 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f003 0310 	and.w	r3, r3, #16
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	f000 8086 	beq.w	8000d86 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c7e:	2220      	movs	r2, #32
 8000c80:	409a      	lsls	r2, r3
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	2b05      	cmp	r3, #5
 8000c90:	d136      	bne.n	8000d00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f022 0216 	bic.w	r2, r2, #22
 8000ca0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	695a      	ldr	r2, [r3, #20]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cb0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d103      	bne.n	8000cc2 <HAL_DMA_IRQHandler+0x1da>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d007      	beq.n	8000cd2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f022 0208 	bic.w	r2, r2, #8
 8000cd0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cd6:	223f      	movs	r2, #63	; 0x3f
 8000cd8:	409a      	lsls	r2, r3
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d07d      	beq.n	8000df2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	4798      	blx	r3
        }
        return;
 8000cfe:	e078      	b.n	8000df2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d01c      	beq.n	8000d48 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d108      	bne.n	8000d2e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d030      	beq.n	8000d86 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	4798      	blx	r3
 8000d2c:	e02b      	b.n	8000d86 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d027      	beq.n	8000d86 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	4798      	blx	r3
 8000d3e:	e022      	b.n	8000d86 <HAL_DMA_IRQHandler+0x29e>
 8000d40:	20000118 	.word	0x20000118
 8000d44:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d10f      	bne.n	8000d76 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f022 0210 	bic.w	r2, r2, #16
 8000d64:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2201      	movs	r2, #1
 8000d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2200      	movs	r2, #0
 8000d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d003      	beq.n	8000d86 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d032      	beq.n	8000df4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d022      	beq.n	8000de0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2205      	movs	r2, #5
 8000d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f022 0201 	bic.w	r2, r2, #1
 8000db0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	3301      	adds	r3, #1
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	697a      	ldr	r2, [r7, #20]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d307      	bcc.n	8000dce <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d1f2      	bne.n	8000db2 <HAL_DMA_IRQHandler+0x2ca>
 8000dcc:	e000      	b.n	8000dd0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000dce:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d005      	beq.n	8000df4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	4798      	blx	r3
 8000df0:	e000      	b.n	8000df4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000df2:	bf00      	nop
    }
  }
}
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop

08000dfc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e0a:	b2db      	uxtb	r3, r3
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	3b10      	subs	r3, #16
 8000e28:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <DMA_CalcBaseAndBitshift+0x64>)
 8000e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2e:	091b      	lsrs	r3, r3, #4
 8000e30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000e32:	4a13      	ldr	r2, [pc, #76]	; (8000e80 <DMA_CalcBaseAndBitshift+0x68>)
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4413      	add	r3, r2
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	d909      	bls.n	8000e5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000e4e:	f023 0303 	bic.w	r3, r3, #3
 8000e52:	1d1a      	adds	r2, r3, #4
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	659a      	str	r2, [r3, #88]	; 0x58
 8000e58:	e007      	b.n	8000e6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000e62:	f023 0303 	bic.w	r3, r3, #3
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	aaaaaaab 	.word	0xaaaaaaab
 8000e80:	0800b9d8 	.word	0x0800b9d8

08000e84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d11f      	bne.n	8000ede <DMA_CheckFifoParam+0x5a>
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	2b03      	cmp	r3, #3
 8000ea2:	d856      	bhi.n	8000f52 <DMA_CheckFifoParam+0xce>
 8000ea4:	a201      	add	r2, pc, #4	; (adr r2, 8000eac <DMA_CheckFifoParam+0x28>)
 8000ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eaa:	bf00      	nop
 8000eac:	08000ebd 	.word	0x08000ebd
 8000eb0:	08000ecf 	.word	0x08000ecf
 8000eb4:	08000ebd 	.word	0x08000ebd
 8000eb8:	08000f53 	.word	0x08000f53
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d046      	beq.n	8000f56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000ecc:	e043      	b.n	8000f56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000ed6:	d140      	bne.n	8000f5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000edc:	e03d      	b.n	8000f5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ee6:	d121      	bne.n	8000f2c <DMA_CheckFifoParam+0xa8>
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	2b03      	cmp	r3, #3
 8000eec:	d837      	bhi.n	8000f5e <DMA_CheckFifoParam+0xda>
 8000eee:	a201      	add	r2, pc, #4	; (adr r2, 8000ef4 <DMA_CheckFifoParam+0x70>)
 8000ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef4:	08000f05 	.word	0x08000f05
 8000ef8:	08000f0b 	.word	0x08000f0b
 8000efc:	08000f05 	.word	0x08000f05
 8000f00:	08000f1d 	.word	0x08000f1d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	73fb      	strb	r3, [r7, #15]
      break;
 8000f08:	e030      	b.n	8000f6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d025      	beq.n	8000f62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f1a:	e022      	b.n	8000f62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000f24:	d11f      	bne.n	8000f66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000f2a:	e01c      	b.n	8000f66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d903      	bls.n	8000f3a <DMA_CheckFifoParam+0xb6>
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	2b03      	cmp	r3, #3
 8000f36:	d003      	beq.n	8000f40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000f38:	e018      	b.n	8000f6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8000f3e:	e015      	b.n	8000f6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d00e      	beq.n	8000f6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8000f50:	e00b      	b.n	8000f6a <DMA_CheckFifoParam+0xe6>
      break;
 8000f52:	bf00      	nop
 8000f54:	e00a      	b.n	8000f6c <DMA_CheckFifoParam+0xe8>
      break;
 8000f56:	bf00      	nop
 8000f58:	e008      	b.n	8000f6c <DMA_CheckFifoParam+0xe8>
      break;
 8000f5a:	bf00      	nop
 8000f5c:	e006      	b.n	8000f6c <DMA_CheckFifoParam+0xe8>
      break;
 8000f5e:	bf00      	nop
 8000f60:	e004      	b.n	8000f6c <DMA_CheckFifoParam+0xe8>
      break;
 8000f62:	bf00      	nop
 8000f64:	e002      	b.n	8000f6c <DMA_CheckFifoParam+0xe8>
      break;   
 8000f66:	bf00      	nop
 8000f68:	e000      	b.n	8000f6c <DMA_CheckFifoParam+0xe8>
      break;
 8000f6a:	bf00      	nop
    }
  } 
  
  return status; 
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b089      	sub	sp, #36	; 0x24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
 8000f96:	e159      	b.n	800124c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f98:	2201      	movs	r2, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	697a      	ldr	r2, [r7, #20]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	f040 8148 	bne.w	8001246 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d005      	beq.n	8000fce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d130      	bne.n	8001030 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	2203      	movs	r2, #3
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	68da      	ldr	r2, [r3, #12]
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001004:	2201      	movs	r2, #1
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	091b      	lsrs	r3, r3, #4
 800101a:	f003 0201 	and.w	r2, r3, #1
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0303 	and.w	r3, r3, #3
 8001038:	2b03      	cmp	r3, #3
 800103a:	d017      	beq.n	800106c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	689a      	ldr	r2, [r3, #8]
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	2b02      	cmp	r3, #2
 8001076:	d123      	bne.n	80010c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	08da      	lsrs	r2, r3, #3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3208      	adds	r2, #8
 8001080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001084:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	f003 0307 	and.w	r3, r3, #7
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	220f      	movs	r2, #15
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	691a      	ldr	r2, [r3, #16]
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	08da      	lsrs	r2, r3, #3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	3208      	adds	r2, #8
 80010ba:	69b9      	ldr	r1, [r7, #24]
 80010bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	2203      	movs	r2, #3
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 0203 	and.w	r2, r3, #3
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f000 80a2 	beq.w	8001246 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	4b57      	ldr	r3, [pc, #348]	; (8001264 <HAL_GPIO_Init+0x2e8>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	4a56      	ldr	r2, [pc, #344]	; (8001264 <HAL_GPIO_Init+0x2e8>)
 800110c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001110:	6453      	str	r3, [r2, #68]	; 0x44
 8001112:	4b54      	ldr	r3, [pc, #336]	; (8001264 <HAL_GPIO_Init+0x2e8>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800111e:	4a52      	ldr	r2, [pc, #328]	; (8001268 <HAL_GPIO_Init+0x2ec>)
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	089b      	lsrs	r3, r3, #2
 8001124:	3302      	adds	r3, #2
 8001126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f003 0303 	and.w	r3, r3, #3
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	220f      	movs	r2, #15
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a49      	ldr	r2, [pc, #292]	; (800126c <HAL_GPIO_Init+0x2f0>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d019      	beq.n	800117e <HAL_GPIO_Init+0x202>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a48      	ldr	r2, [pc, #288]	; (8001270 <HAL_GPIO_Init+0x2f4>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d013      	beq.n	800117a <HAL_GPIO_Init+0x1fe>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a47      	ldr	r2, [pc, #284]	; (8001274 <HAL_GPIO_Init+0x2f8>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d00d      	beq.n	8001176 <HAL_GPIO_Init+0x1fa>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a46      	ldr	r2, [pc, #280]	; (8001278 <HAL_GPIO_Init+0x2fc>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d007      	beq.n	8001172 <HAL_GPIO_Init+0x1f6>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a45      	ldr	r2, [pc, #276]	; (800127c <HAL_GPIO_Init+0x300>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d101      	bne.n	800116e <HAL_GPIO_Init+0x1f2>
 800116a:	2304      	movs	r3, #4
 800116c:	e008      	b.n	8001180 <HAL_GPIO_Init+0x204>
 800116e:	2307      	movs	r3, #7
 8001170:	e006      	b.n	8001180 <HAL_GPIO_Init+0x204>
 8001172:	2303      	movs	r3, #3
 8001174:	e004      	b.n	8001180 <HAL_GPIO_Init+0x204>
 8001176:	2302      	movs	r3, #2
 8001178:	e002      	b.n	8001180 <HAL_GPIO_Init+0x204>
 800117a:	2301      	movs	r3, #1
 800117c:	e000      	b.n	8001180 <HAL_GPIO_Init+0x204>
 800117e:	2300      	movs	r3, #0
 8001180:	69fa      	ldr	r2, [r7, #28]
 8001182:	f002 0203 	and.w	r2, r2, #3
 8001186:	0092      	lsls	r2, r2, #2
 8001188:	4093      	lsls	r3, r2
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001190:	4935      	ldr	r1, [pc, #212]	; (8001268 <HAL_GPIO_Init+0x2ec>)
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	089b      	lsrs	r3, r3, #2
 8001196:	3302      	adds	r3, #2
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800119e:	4b38      	ldr	r3, [pc, #224]	; (8001280 <HAL_GPIO_Init+0x304>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011c2:	4a2f      	ldr	r2, [pc, #188]	; (8001280 <HAL_GPIO_Init+0x304>)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011c8:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <HAL_GPIO_Init+0x304>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ec:	4a24      	ldr	r2, [pc, #144]	; (8001280 <HAL_GPIO_Init+0x304>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011f2:	4b23      	ldr	r3, [pc, #140]	; (8001280 <HAL_GPIO_Init+0x304>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001216:	4a1a      	ldr	r2, [pc, #104]	; (8001280 <HAL_GPIO_Init+0x304>)
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800121c:	4b18      	ldr	r3, [pc, #96]	; (8001280 <HAL_GPIO_Init+0x304>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001240:	4a0f      	ldr	r2, [pc, #60]	; (8001280 <HAL_GPIO_Init+0x304>)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3301      	adds	r3, #1
 800124a:	61fb      	str	r3, [r7, #28]
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	2b0f      	cmp	r3, #15
 8001250:	f67f aea2 	bls.w	8000f98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	3724      	adds	r7, #36	; 0x24
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800
 8001268:	40013800 	.word	0x40013800
 800126c:	40020000 	.word	0x40020000
 8001270:	40020400 	.word	0x40020400
 8001274:	40020800 	.word	0x40020800
 8001278:	40020c00 	.word	0x40020c00
 800127c:	40021000 	.word	0x40021000
 8001280:	40013c00 	.word	0x40013c00

08001284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	807b      	strh	r3, [r7, #2]
 8001290:	4613      	mov	r3, r2
 8001292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001294:	787b      	ldrb	r3, [r7, #1]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800129a:	887a      	ldrh	r2, [r7, #2]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012a0:	e003      	b.n	80012aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012a2:	887b      	ldrh	r3, [r7, #2]
 80012a4:	041a      	lsls	r2, r3, #16
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	619a      	str	r2, [r3, #24]
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b085      	sub	sp, #20
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
 80012be:	460b      	mov	r3, r1
 80012c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012c8:	887a      	ldrh	r2, [r7, #2]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4013      	ands	r3, r2
 80012ce:	041a      	lsls	r2, r3, #16
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	43d9      	mvns	r1, r3
 80012d4:	887b      	ldrh	r3, [r7, #2]
 80012d6:	400b      	ands	r3, r1
 80012d8:	431a      	orrs	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	619a      	str	r2, [r3, #24]
}
 80012de:	bf00      	nop
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e12b      	b.n	8001556 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d106      	bne.n	8001318 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f009 fb8e 	bl	800aa34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2224      	movs	r2, #36	; 0x24
 800131c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 0201 	bic.w	r2, r2, #1
 800132e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800133e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800134e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001350:	f003 fa78 	bl	8004844 <HAL_RCC_GetPCLK1Freq>
 8001354:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	4a81      	ldr	r2, [pc, #516]	; (8001560 <HAL_I2C_Init+0x274>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d807      	bhi.n	8001370 <HAL_I2C_Init+0x84>
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4a80      	ldr	r2, [pc, #512]	; (8001564 <HAL_I2C_Init+0x278>)
 8001364:	4293      	cmp	r3, r2
 8001366:	bf94      	ite	ls
 8001368:	2301      	movls	r3, #1
 800136a:	2300      	movhi	r3, #0
 800136c:	b2db      	uxtb	r3, r3
 800136e:	e006      	b.n	800137e <HAL_I2C_Init+0x92>
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4a7d      	ldr	r2, [pc, #500]	; (8001568 <HAL_I2C_Init+0x27c>)
 8001374:	4293      	cmp	r3, r2
 8001376:	bf94      	ite	ls
 8001378:	2301      	movls	r3, #1
 800137a:	2300      	movhi	r3, #0
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e0e7      	b.n	8001556 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	4a78      	ldr	r2, [pc, #480]	; (800156c <HAL_I2C_Init+0x280>)
 800138a:	fba2 2303 	umull	r2, r3, r2, r3
 800138e:	0c9b      	lsrs	r3, r3, #18
 8001390:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	68ba      	ldr	r2, [r7, #8]
 80013a2:	430a      	orrs	r2, r1
 80013a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	4a6a      	ldr	r2, [pc, #424]	; (8001560 <HAL_I2C_Init+0x274>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d802      	bhi.n	80013c0 <HAL_I2C_Init+0xd4>
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	3301      	adds	r3, #1
 80013be:	e009      	b.n	80013d4 <HAL_I2C_Init+0xe8>
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013c6:	fb02 f303 	mul.w	r3, r2, r3
 80013ca:	4a69      	ldr	r2, [pc, #420]	; (8001570 <HAL_I2C_Init+0x284>)
 80013cc:	fba2 2303 	umull	r2, r3, r2, r3
 80013d0:	099b      	lsrs	r3, r3, #6
 80013d2:	3301      	adds	r3, #1
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	6812      	ldr	r2, [r2, #0]
 80013d8:	430b      	orrs	r3, r1
 80013da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80013e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	495c      	ldr	r1, [pc, #368]	; (8001560 <HAL_I2C_Init+0x274>)
 80013f0:	428b      	cmp	r3, r1
 80013f2:	d819      	bhi.n	8001428 <HAL_I2C_Init+0x13c>
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	1e59      	subs	r1, r3, #1
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001402:	1c59      	adds	r1, r3, #1
 8001404:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001408:	400b      	ands	r3, r1
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00a      	beq.n	8001424 <HAL_I2C_Init+0x138>
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	1e59      	subs	r1, r3, #1
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	fbb1 f3f3 	udiv	r3, r1, r3
 800141c:	3301      	adds	r3, #1
 800141e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001422:	e051      	b.n	80014c8 <HAL_I2C_Init+0x1dc>
 8001424:	2304      	movs	r3, #4
 8001426:	e04f      	b.n	80014c8 <HAL_I2C_Init+0x1dc>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d111      	bne.n	8001454 <HAL_I2C_Init+0x168>
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	1e58      	subs	r0, r3, #1
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6859      	ldr	r1, [r3, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	440b      	add	r3, r1
 800143e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001442:	3301      	adds	r3, #1
 8001444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001448:	2b00      	cmp	r3, #0
 800144a:	bf0c      	ite	eq
 800144c:	2301      	moveq	r3, #1
 800144e:	2300      	movne	r3, #0
 8001450:	b2db      	uxtb	r3, r3
 8001452:	e012      	b.n	800147a <HAL_I2C_Init+0x18e>
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	1e58      	subs	r0, r3, #1
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6859      	ldr	r1, [r3, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	0099      	lsls	r1, r3, #2
 8001464:	440b      	add	r3, r1
 8001466:	fbb0 f3f3 	udiv	r3, r0, r3
 800146a:	3301      	adds	r3, #1
 800146c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001470:	2b00      	cmp	r3, #0
 8001472:	bf0c      	ite	eq
 8001474:	2301      	moveq	r3, #1
 8001476:	2300      	movne	r3, #0
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_I2C_Init+0x196>
 800147e:	2301      	movs	r3, #1
 8001480:	e022      	b.n	80014c8 <HAL_I2C_Init+0x1dc>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d10e      	bne.n	80014a8 <HAL_I2C_Init+0x1bc>
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	1e58      	subs	r0, r3, #1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6859      	ldr	r1, [r3, #4]
 8001492:	460b      	mov	r3, r1
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	440b      	add	r3, r1
 8001498:	fbb0 f3f3 	udiv	r3, r0, r3
 800149c:	3301      	adds	r3, #1
 800149e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014a6:	e00f      	b.n	80014c8 <HAL_I2C_Init+0x1dc>
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	1e58      	subs	r0, r3, #1
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6859      	ldr	r1, [r3, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	0099      	lsls	r1, r3, #2
 80014b8:	440b      	add	r3, r1
 80014ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80014be:	3301      	adds	r3, #1
 80014c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	6809      	ldr	r1, [r1, #0]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69da      	ldr	r2, [r3, #28]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a1b      	ldr	r3, [r3, #32]
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80014f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	6911      	ldr	r1, [r2, #16]
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	68d2      	ldr	r2, [r2, #12]
 8001502:	4311      	orrs	r1, r2
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	6812      	ldr	r2, [r2, #0]
 8001508:	430b      	orrs	r3, r1
 800150a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	695a      	ldr	r2, [r3, #20]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	431a      	orrs	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	430a      	orrs	r2, r1
 8001526:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f042 0201 	orr.w	r2, r2, #1
 8001536:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2220      	movs	r2, #32
 8001542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	000186a0 	.word	0x000186a0
 8001564:	001e847f 	.word	0x001e847f
 8001568:	003d08ff 	.word	0x003d08ff
 800156c:	431bde83 	.word	0x431bde83
 8001570:	10624dd3 	.word	0x10624dd3

08001574 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800157c:	2300      	movs	r3, #0
 800157e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001594:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800159c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	2b10      	cmp	r3, #16
 80015a2:	d003      	beq.n	80015ac <HAL_I2C_EV_IRQHandler+0x38>
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	2b40      	cmp	r3, #64	; 0x40
 80015a8:	f040 80c1 	bne.w	800172e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d10d      	bne.n	80015e2 <HAL_I2C_EV_IRQHandler+0x6e>
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80015cc:	d003      	beq.n	80015d6 <HAL_I2C_EV_IRQHandler+0x62>
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80015d4:	d101      	bne.n	80015da <HAL_I2C_EV_IRQHandler+0x66>
 80015d6:	2301      	movs	r3, #1
 80015d8:	e000      	b.n	80015dc <HAL_I2C_EV_IRQHandler+0x68>
 80015da:	2300      	movs	r3, #0
 80015dc:	2b01      	cmp	r3, #1
 80015de:	f000 8132 	beq.w	8001846 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d00c      	beq.n	8001606 <HAL_I2C_EV_IRQHandler+0x92>
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	0a5b      	lsrs	r3, r3, #9
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d006      	beq.n	8001606 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f001 fb5b 	bl	8002cb4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 fcd2 	bl	8001fa8 <I2C_Master_SB>
 8001604:	e092      	b.n	800172c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	08db      	lsrs	r3, r3, #3
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d009      	beq.n	8001626 <HAL_I2C_EV_IRQHandler+0xb2>
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	0a5b      	lsrs	r3, r3, #9
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 fd48 	bl	80020b4 <I2C_Master_ADD10>
 8001624:	e082      	b.n	800172c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	085b      	lsrs	r3, r3, #1
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b00      	cmp	r3, #0
 8001630:	d009      	beq.n	8001646 <HAL_I2C_EV_IRQHandler+0xd2>
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	0a5b      	lsrs	r3, r3, #9
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 fd62 	bl	8002108 <I2C_Master_ADDR>
 8001644:	e072      	b.n	800172c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	089b      	lsrs	r3, r3, #2
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d03b      	beq.n	80016ca <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800165c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001660:	f000 80f3 	beq.w	800184a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	09db      	lsrs	r3, r3, #7
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	2b00      	cmp	r3, #0
 800166e:	d00f      	beq.n	8001690 <HAL_I2C_EV_IRQHandler+0x11c>
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	0a9b      	lsrs	r3, r3, #10
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	2b00      	cmp	r3, #0
 800167a:	d009      	beq.n	8001690 <HAL_I2C_EV_IRQHandler+0x11c>
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	089b      	lsrs	r3, r3, #2
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	2b00      	cmp	r3, #0
 8001686:	d103      	bne.n	8001690 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 f94c 	bl	8001926 <I2C_MasterTransmit_TXE>
 800168e:	e04d      	b.n	800172c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	089b      	lsrs	r3, r3, #2
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	2b00      	cmp	r3, #0
 800169a:	f000 80d6 	beq.w	800184a <HAL_I2C_EV_IRQHandler+0x2d6>
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	0a5b      	lsrs	r3, r3, #9
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 80cf 	beq.w	800184a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80016ac:	7bbb      	ldrb	r3, [r7, #14]
 80016ae:	2b21      	cmp	r3, #33	; 0x21
 80016b0:	d103      	bne.n	80016ba <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 f9d3 	bl	8001a5e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016b8:	e0c7      	b.n	800184a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	2b40      	cmp	r3, #64	; 0x40
 80016be:	f040 80c4 	bne.w	800184a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 fa41 	bl	8001b4a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016c8:	e0bf      	b.n	800184a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016d8:	f000 80b7 	beq.w	800184a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	099b      	lsrs	r3, r3, #6
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00f      	beq.n	8001708 <HAL_I2C_EV_IRQHandler+0x194>
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	0a9b      	lsrs	r3, r3, #10
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d009      	beq.n	8001708 <HAL_I2C_EV_IRQHandler+0x194>
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	089b      	lsrs	r3, r3, #2
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d103      	bne.n	8001708 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 fab6 	bl	8001c72 <I2C_MasterReceive_RXNE>
 8001706:	e011      	b.n	800172c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	089b      	lsrs	r3, r3, #2
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 809a 	beq.w	800184a <HAL_I2C_EV_IRQHandler+0x2d6>
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	0a5b      	lsrs	r3, r3, #9
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 8093 	beq.w	800184a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 fb55 	bl	8001dd4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800172a:	e08e      	b.n	800184a <HAL_I2C_EV_IRQHandler+0x2d6>
 800172c:	e08d      	b.n	800184a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	2b00      	cmp	r3, #0
 8001734:	d004      	beq.n	8001740 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	61fb      	str	r3, [r7, #28]
 800173e:	e007      	b.n	8001750 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	085b      	lsrs	r3, r3, #1
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	2b00      	cmp	r3, #0
 800175a:	d012      	beq.n	8001782 <HAL_I2C_EV_IRQHandler+0x20e>
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	0a5b      	lsrs	r3, r3, #9
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b00      	cmp	r3, #0
 8001766:	d00c      	beq.n	8001782 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	2b00      	cmp	r3, #0
 800176e:	d003      	beq.n	8001778 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001778:	69b9      	ldr	r1, [r7, #24]
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 ff13 	bl	80025a6 <I2C_Slave_ADDR>
 8001780:	e066      	b.n	8001850 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	091b      	lsrs	r3, r3, #4
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d009      	beq.n	80017a2 <HAL_I2C_EV_IRQHandler+0x22e>
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	0a5b      	lsrs	r3, r3, #9
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 ff4e 	bl	800263c <I2C_Slave_STOPF>
 80017a0:	e056      	b.n	8001850 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80017a2:	7bbb      	ldrb	r3, [r7, #14]
 80017a4:	2b21      	cmp	r3, #33	; 0x21
 80017a6:	d002      	beq.n	80017ae <HAL_I2C_EV_IRQHandler+0x23a>
 80017a8:	7bbb      	ldrb	r3, [r7, #14]
 80017aa:	2b29      	cmp	r3, #41	; 0x29
 80017ac:	d125      	bne.n	80017fa <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	09db      	lsrs	r3, r3, #7
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00f      	beq.n	80017da <HAL_I2C_EV_IRQHandler+0x266>
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	0a9b      	lsrs	r3, r3, #10
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d009      	beq.n	80017da <HAL_I2C_EV_IRQHandler+0x266>
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	089b      	lsrs	r3, r3, #2
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d103      	bne.n	80017da <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 fe29 	bl	800242a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017d8:	e039      	b.n	800184e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	089b      	lsrs	r3, r3, #2
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d033      	beq.n	800184e <HAL_I2C_EV_IRQHandler+0x2da>
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	0a5b      	lsrs	r3, r3, #9
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d02d      	beq.n	800184e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 fe56 	bl	80024a4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017f8:	e029      	b.n	800184e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	099b      	lsrs	r3, r3, #6
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00f      	beq.n	8001826 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	0a9b      	lsrs	r3, r3, #10
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d009      	beq.n	8001826 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	089b      	lsrs	r3, r3, #2
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d103      	bne.n	8001826 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 fe61 	bl	80024e6 <I2C_SlaveReceive_RXNE>
 8001824:	e014      	b.n	8001850 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	089b      	lsrs	r3, r3, #2
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00e      	beq.n	8001850 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	0a5b      	lsrs	r3, r3, #9
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d008      	beq.n	8001850 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 fe8f 	bl	8002562 <I2C_SlaveReceive_BTF>
 8001844:	e004      	b.n	8001850 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001846:	bf00      	nop
 8001848:	e002      	b.n	8001850 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800184a:	bf00      	nop
 800184c:	e000      	b.n	8001850 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800184e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001850:	3720      	adds	r7, #32
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	460b      	mov	r3, r1
 80018b0:	70fb      	strb	r3, [r7, #3]
 80018b2:	4613      	mov	r3, r2
 80018b4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b083      	sub	sp, #12
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b084      	sub	sp, #16
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001934:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800193c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001942:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001948:	2b00      	cmp	r3, #0
 800194a:	d150      	bne.n	80019ee <I2C_MasterTransmit_TXE+0xc8>
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	2b21      	cmp	r3, #33	; 0x21
 8001950:	d14d      	bne.n	80019ee <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	2b08      	cmp	r3, #8
 8001956:	d01d      	beq.n	8001994 <I2C_MasterTransmit_TXE+0x6e>
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2b20      	cmp	r3, #32
 800195c:	d01a      	beq.n	8001994 <I2C_MasterTransmit_TXE+0x6e>
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001964:	d016      	beq.n	8001994 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001974:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2211      	movs	r2, #17
 800197a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2220      	movs	r2, #32
 8001988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff ff62 	bl	8001856 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001992:	e060      	b.n	8001a56 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80019a2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019b2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2220      	movs	r2, #32
 80019be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b40      	cmp	r3, #64	; 0x40
 80019cc:	d107      	bne.n	80019de <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff ff7d 	bl	80018d6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80019dc:	e03b      	b.n	8001a56 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ff35 	bl	8001856 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80019ec:	e033      	b.n	8001a56 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	2b21      	cmp	r3, #33	; 0x21
 80019f2:	d005      	beq.n	8001a00 <I2C_MasterTransmit_TXE+0xda>
 80019f4:	7bbb      	ldrb	r3, [r7, #14]
 80019f6:	2b40      	cmp	r3, #64	; 0x40
 80019f8:	d12d      	bne.n	8001a56 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	2b22      	cmp	r3, #34	; 0x22
 80019fe:	d12a      	bne.n	8001a56 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d108      	bne.n	8001a1c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a18:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001a1a:	e01c      	b.n	8001a56 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b40      	cmp	r3, #64	; 0x40
 8001a26:	d103      	bne.n	8001a30 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 f88e 	bl	8001b4a <I2C_MemoryTransmit_TXE_BTF>
}
 8001a2e:	e012      	b.n	8001a56 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a34:	781a      	ldrb	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001a54:	e7ff      	b.n	8001a56 <I2C_MasterTransmit_TXE+0x130>
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b084      	sub	sp, #16
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b21      	cmp	r3, #33	; 0x21
 8001a76:	d164      	bne.n	8001b42 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d012      	beq.n	8001aa8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a86:	781a      	ldrb	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001aa6:	e04c      	b.n	8001b42 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d01d      	beq.n	8001aea <I2C_MasterTransmit_BTF+0x8c>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2b20      	cmp	r3, #32
 8001ab2:	d01a      	beq.n	8001aea <I2C_MasterTransmit_BTF+0x8c>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001aba:	d016      	beq.n	8001aea <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001aca:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2211      	movs	r2, #17
 8001ad0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2220      	movs	r2, #32
 8001ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff feb7 	bl	8001856 <HAL_I2C_MasterTxCpltCallback>
}
 8001ae8:	e02b      	b.n	8001b42 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001af8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b08:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2220      	movs	r2, #32
 8001b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b40      	cmp	r3, #64	; 0x40
 8001b22:	d107      	bne.n	8001b34 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff fed2 	bl	80018d6 <HAL_I2C_MemTxCpltCallback>
}
 8001b32:	e006      	b.n	8001b42 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff fe8a 	bl	8001856 <HAL_I2C_MasterTxCpltCallback>
}
 8001b42:	bf00      	nop
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b084      	sub	sp, #16
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b58:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d11d      	bne.n	8001b9e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d10b      	bne.n	8001b82 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b7a:	1c9a      	adds	r2, r3, #2
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001b80:	e073      	b.n	8001c6a <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	121b      	asrs	r3, r3, #8
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001b9c:	e065      	b.n	8001c6a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d10b      	bne.n	8001bbe <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001bbc:	e055      	b.n	8001c6a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d151      	bne.n	8001c6a <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	2b22      	cmp	r3, #34	; 0x22
 8001bca:	d10d      	bne.n	8001be8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bda:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001be6:	e040      	b.n	8001c6a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d015      	beq.n	8001c1e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	2b21      	cmp	r3, #33	; 0x21
 8001bf6:	d112      	bne.n	8001c1e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	781a      	ldrb	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c08:	1c5a      	adds	r2, r3, #1
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	3b01      	subs	r3, #1
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001c1c:	e025      	b.n	8001c6a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d120      	bne.n	8001c6a <I2C_MemoryTransmit_TXE_BTF+0x120>
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
 8001c2a:	2b21      	cmp	r3, #33	; 0x21
 8001c2c:	d11d      	bne.n	8001c6a <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c3c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c4c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2220      	movs	r2, #32
 8001c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff fe36 	bl	80018d6 <HAL_I2C_MemTxCpltCallback>
}
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b084      	sub	sp, #16
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b22      	cmp	r3, #34	; 0x22
 8001c84:	f040 80a2 	bne.w	8001dcc <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2b03      	cmp	r3, #3
 8001c94:	d921      	bls.n	8001cda <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	691a      	ldr	r2, [r3, #16]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	1c5a      	adds	r2, r3, #1
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	f040 8082 	bne.w	8001dcc <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cd6:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8001cd8:	e078      	b.n	8001dcc <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d074      	beq.n	8001dcc <I2C_MasterReceive_RXNE+0x15a>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d002      	beq.n	8001cee <I2C_MasterReceive_RXNE+0x7c>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d16e      	bne.n	8001dcc <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 ffae 	bl	8002c50 <I2C_WaitOnSTOPRequestThroughIT>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d142      	bne.n	8001d80 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d08:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d18:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	691a      	ldr	r2, [r3, #16]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2220      	movs	r2, #32
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b40      	cmp	r3, #64	; 0x40
 8001d52:	d10a      	bne.n	8001d6a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff fdc1 	bl	80018ea <HAL_I2C_MemRxCpltCallback>
}
 8001d68:	e030      	b.n	8001dcc <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2212      	movs	r2, #18
 8001d76:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7ff fd76 	bl	800186a <HAL_I2C_MasterRxCpltCallback>
}
 8001d7e:	e025      	b.n	8001dcc <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d8e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	691a      	ldr	r2, [r3, #16]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	3b01      	subs	r3, #1
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2220      	movs	r2, #32
 8001dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff fd99 	bl	80018fe <HAL_I2C_ErrorCallback>
}
 8001dcc:	bf00      	nop
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d11b      	bne.n	8001e24 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dfa:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691a      	ldr	r2, [r3, #16]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	1c5a      	adds	r2, r3, #1
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001e22:	e0bd      	b.n	8001fa0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	d129      	bne.n	8001e82 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e3c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d00a      	beq.n	8001e5a <I2C_MasterReceive_BTF+0x86>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d007      	beq.n	8001e5a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e58:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	691a      	ldr	r2, [r3, #16]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	1c5a      	adds	r2, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001e80:	e08e      	b.n	8001fa0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d176      	bne.n	8001f7a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d002      	beq.n	8001e98 <I2C_MasterReceive_BTF+0xc4>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2b10      	cmp	r3, #16
 8001e96:	d108      	bne.n	8001eaa <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	e019      	b.n	8001ede <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d002      	beq.n	8001eb6 <I2C_MasterReceive_BTF+0xe2>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d108      	bne.n	8001ec8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	e00a      	b.n	8001ede <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2b10      	cmp	r3, #16
 8001ecc:	d007      	beq.n	8001ede <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001edc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	1c5a      	adds	r2, r3, #1
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	3b01      	subs	r3, #1
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	691a      	ldr	r2, [r3, #16]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	1c5a      	adds	r2, r3, #1
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	3b01      	subs	r3, #1
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001f38:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b40      	cmp	r3, #64	; 0x40
 8001f4c:	d10a      	bne.n	8001f64 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff fcc4 	bl	80018ea <HAL_I2C_MemRxCpltCallback>
}
 8001f62:	e01d      	b.n	8001fa0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2212      	movs	r2, #18
 8001f70:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff fc79 	bl	800186a <HAL_I2C_MasterRxCpltCallback>
}
 8001f78:	e012      	b.n	8001fa0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	691a      	ldr	r2, [r3, #16]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8c:	1c5a      	adds	r2, r3, #1
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001fa0:	bf00      	nop
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b40      	cmp	r3, #64	; 0x40
 8001fba:	d117      	bne.n	8001fec <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d109      	bne.n	8001fd8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	461a      	mov	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001fd4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8001fd6:	e067      	b.n	80020a8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	611a      	str	r2, [r3, #16]
}
 8001fea:	e05d      	b.n	80020a8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ff4:	d133      	bne.n	800205e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b21      	cmp	r3, #33	; 0x21
 8002000:	d109      	bne.n	8002016 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	b2db      	uxtb	r3, r3
 8002008:	461a      	mov	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002012:	611a      	str	r2, [r3, #16]
 8002014:	e008      	b.n	8002028 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	b2db      	uxtb	r3, r3
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	b2da      	uxtb	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800202c:	2b00      	cmp	r3, #0
 800202e:	d004      	beq.n	800203a <I2C_Master_SB+0x92>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002036:	2b00      	cmp	r3, #0
 8002038:	d108      	bne.n	800204c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203e:	2b00      	cmp	r3, #0
 8002040:	d032      	beq.n	80020a8 <I2C_Master_SB+0x100>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002048:	2b00      	cmp	r3, #0
 800204a:	d02d      	beq.n	80020a8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800205a:	605a      	str	r2, [r3, #4]
}
 800205c:	e024      	b.n	80020a8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10e      	bne.n	8002084 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	b29b      	uxth	r3, r3
 800206c:	11db      	asrs	r3, r3, #7
 800206e:	b2db      	uxtb	r3, r3
 8002070:	f003 0306 	and.w	r3, r3, #6
 8002074:	b2db      	uxtb	r3, r3
 8002076:	f063 030f 	orn	r3, r3, #15
 800207a:	b2da      	uxtb	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	611a      	str	r2, [r3, #16]
}
 8002082:	e011      	b.n	80020a8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002088:	2b01      	cmp	r3, #1
 800208a:	d10d      	bne.n	80020a8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002090:	b29b      	uxth	r3, r3
 8002092:	11db      	asrs	r3, r3, #7
 8002094:	b2db      	uxtb	r3, r3
 8002096:	f003 0306 	and.w	r3, r3, #6
 800209a:	b2db      	uxtb	r3, r3
 800209c:	f063 030e 	orn	r3, r3, #14
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	611a      	str	r2, [r3, #16]
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d004      	beq.n	80020da <I2C_Master_ADD10+0x26>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d108      	bne.n	80020ec <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00c      	beq.n	80020fc <I2C_Master_ADD10+0x48>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d007      	beq.n	80020fc <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020fa:	605a      	str	r2, [r3, #4]
  }
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002108:	b480      	push	{r7}
 800210a:	b091      	sub	sp, #68	; 0x44
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002116:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002124:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b22      	cmp	r3, #34	; 0x22
 8002130:	f040 8169 	bne.w	8002406 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10f      	bne.n	800215c <I2C_Master_ADDR+0x54>
 800213c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002140:	2b40      	cmp	r3, #64	; 0x40
 8002142:	d10b      	bne.n	800215c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002144:	2300      	movs	r3, #0
 8002146:	633b      	str	r3, [r7, #48]	; 0x30
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	633b      	str	r3, [r7, #48]	; 0x30
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	633b      	str	r3, [r7, #48]	; 0x30
 8002158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800215a:	e160      	b.n	800241e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002160:	2b00      	cmp	r3, #0
 8002162:	d11d      	bne.n	80021a0 <I2C_Master_ADDR+0x98>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800216c:	d118      	bne.n	80021a0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800216e:	2300      	movs	r3, #0
 8002170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	62fb      	str	r3, [r7, #44]	; 0x2c
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002182:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002192:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	651a      	str	r2, [r3, #80]	; 0x50
 800219e:	e13e      	b.n	800241e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d113      	bne.n	80021d2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021aa:	2300      	movs	r3, #0
 80021ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80021be:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	e115      	b.n	80023fe <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	2b01      	cmp	r3, #1
 80021da:	f040 808a 	bne.w	80022f2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80021de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021e4:	d137      	bne.n	8002256 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021f4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002200:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002204:	d113      	bne.n	800222e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002214:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002216:	2300      	movs	r3, #0
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	e0e7      	b.n	80023fe <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800222e:	2300      	movs	r3, #0
 8002230:	623b      	str	r3, [r7, #32]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	623b      	str	r3, [r7, #32]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	623b      	str	r3, [r7, #32]
 8002242:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	e0d3      	b.n	80023fe <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002258:	2b08      	cmp	r3, #8
 800225a:	d02e      	beq.n	80022ba <I2C_Master_ADDR+0x1b2>
 800225c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800225e:	2b20      	cmp	r3, #32
 8002260:	d02b      	beq.n	80022ba <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002264:	2b12      	cmp	r3, #18
 8002266:	d102      	bne.n	800226e <I2C_Master_ADDR+0x166>
 8002268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800226a:	2b01      	cmp	r3, #1
 800226c:	d125      	bne.n	80022ba <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800226e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002270:	2b04      	cmp	r3, #4
 8002272:	d00e      	beq.n	8002292 <I2C_Master_ADDR+0x18a>
 8002274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002276:	2b02      	cmp	r3, #2
 8002278:	d00b      	beq.n	8002292 <I2C_Master_ADDR+0x18a>
 800227a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800227c:	2b10      	cmp	r3, #16
 800227e:	d008      	beq.n	8002292 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	e007      	b.n	80022a2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022a0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	61fb      	str	r3, [r7, #28]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	e0a1      	b.n	80023fe <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022c8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ca:	2300      	movs	r3, #0
 80022cc:	61bb      	str	r3, [r7, #24]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	61bb      	str	r3, [r7, #24]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	61bb      	str	r3, [r7, #24]
 80022de:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	e085      	b.n	80023fe <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d14d      	bne.n	8002398 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80022fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d016      	beq.n	8002330 <I2C_Master_ADDR+0x228>
 8002302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002304:	2b02      	cmp	r3, #2
 8002306:	d013      	beq.n	8002330 <I2C_Master_ADDR+0x228>
 8002308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800230a:	2b10      	cmp	r3, #16
 800230c:	d010      	beq.n	8002330 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800231c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	e007      	b.n	8002340 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800233e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800234a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800234e:	d117      	bne.n	8002380 <I2C_Master_ADDR+0x278>
 8002350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002352:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002356:	d00b      	beq.n	8002370 <I2C_Master_ADDR+0x268>
 8002358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235a:	2b01      	cmp	r3, #1
 800235c:	d008      	beq.n	8002370 <I2C_Master_ADDR+0x268>
 800235e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002360:	2b08      	cmp	r3, #8
 8002362:	d005      	beq.n	8002370 <I2C_Master_ADDR+0x268>
 8002364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002366:	2b10      	cmp	r3, #16
 8002368:	d002      	beq.n	8002370 <I2C_Master_ADDR+0x268>
 800236a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800236c:	2b20      	cmp	r3, #32
 800236e:	d107      	bne.n	8002380 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800237e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	e032      	b.n	80023fe <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023a6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023b6:	d117      	bne.n	80023e8 <I2C_Master_ADDR+0x2e0>
 80023b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023be:	d00b      	beq.n	80023d8 <I2C_Master_ADDR+0x2d0>
 80023c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d008      	beq.n	80023d8 <I2C_Master_ADDR+0x2d0>
 80023c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d005      	beq.n	80023d8 <I2C_Master_ADDR+0x2d0>
 80023cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ce:	2b10      	cmp	r3, #16
 80023d0:	d002      	beq.n	80023d8 <I2C_Master_ADDR+0x2d0>
 80023d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d4:	2b20      	cmp	r3, #32
 80023d6:	d107      	bne.n	80023e8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80023e6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023e8:	2300      	movs	r3, #0
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	613b      	str	r3, [r7, #16]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002404:	e00b      	b.n	800241e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	68fb      	ldr	r3, [r7, #12]
}
 800241c:	e7ff      	b.n	800241e <I2C_Master_ADDR+0x316>
 800241e:	bf00      	nop
 8002420:	3744      	adds	r7, #68	; 0x44
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b084      	sub	sp, #16
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002438:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243e:	b29b      	uxth	r3, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	d02b      	beq.n	800249c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	781a      	ldrb	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002454:	1c5a      	adds	r2, r3, #1
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245e:	b29b      	uxth	r3, r3
 8002460:	3b01      	subs	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246c:	b29b      	uxth	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d114      	bne.n	800249c <I2C_SlaveTransmit_TXE+0x72>
 8002472:	7bfb      	ldrb	r3, [r7, #15]
 8002474:	2b29      	cmp	r3, #41	; 0x29
 8002476:	d111      	bne.n	800249c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002486:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2221      	movs	r2, #33	; 0x21
 800248c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2228      	movs	r2, #40	; 0x28
 8002492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff f9f1 	bl	800187e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800249c:	bf00      	nop
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d011      	beq.n	80024da <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	781a      	ldrb	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	3b01      	subs	r3, #1
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b084      	sub	sp, #16
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d02c      	beq.n	800255a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	691a      	ldr	r2, [r3, #16]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	1c5a      	adds	r2, r3, #1
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251c:	b29b      	uxth	r3, r3
 800251e:	3b01      	subs	r3, #1
 8002520:	b29a      	uxth	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252a:	b29b      	uxth	r3, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	d114      	bne.n	800255a <I2C_SlaveReceive_RXNE+0x74>
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	2b2a      	cmp	r3, #42	; 0x2a
 8002534:	d111      	bne.n	800255a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002544:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2222      	movs	r2, #34	; 0x22
 800254a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2228      	movs	r2, #40	; 0x28
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff f99c 	bl	8001892 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256e:	b29b      	uxth	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d012      	beq.n	800259a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	691a      	ldr	r2, [r3, #16]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002590:	b29b      	uxth	r3, r3
 8002592:	3b01      	subs	r3, #1
 8002594:	b29a      	uxth	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b084      	sub	sp, #16
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80025b0:	2300      	movs	r3, #0
 80025b2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80025c0:	2b28      	cmp	r3, #40	; 0x28
 80025c2:	d127      	bne.n	8002614 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025d2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	089b      	lsrs	r3, r3, #2
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	09db      	lsrs	r3, r3, #7
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d103      	bne.n	80025f8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	81bb      	strh	r3, [r7, #12]
 80025f6:	e002      	b.n	80025fe <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002606:	89ba      	ldrh	r2, [r7, #12]
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	4619      	mov	r1, r3
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7ff f94a 	bl	80018a6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002612:	e00e      	b.n	8002632 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002614:	2300      	movs	r3, #0
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	60bb      	str	r3, [r7, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	60bb      	str	r3, [r7, #8]
 8002628:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002632:	bf00      	nop
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800264a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800265a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800265c:	2300      	movs	r3, #0
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0201 	orr.w	r2, r2, #1
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002688:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002694:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002698:	d172      	bne.n	8002780 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	2b22      	cmp	r3, #34	; 0x22
 800269e:	d002      	beq.n	80026a6 <I2C_Slave_STOPF+0x6a>
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
 80026a2:	2b2a      	cmp	r3, #42	; 0x2a
 80026a4:	d135      	bne.n	8002712 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d005      	beq.n	80026ca <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	f043 0204 	orr.w	r2, r3, #4
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026d8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fe fb8c 	bl	8000dfc <HAL_DMA_GetState>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d049      	beq.n	800277e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ee:	4a69      	ldr	r2, [pc, #420]	; (8002894 <I2C_Slave_STOPF+0x258>)
 80026f0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fe f9d4 	bl	8000aa4 <HAL_DMA_Abort_IT>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d03d      	beq.n	800277e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800270c:	4610      	mov	r0, r2
 800270e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002710:	e035      	b.n	800277e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	b29a      	uxth	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002724:	b29b      	uxth	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d005      	beq.n	8002736 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f043 0204 	orr.w	r2, r3, #4
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002744:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800274a:	4618      	mov	r0, r3
 800274c:	f7fe fb56 	bl	8000dfc <HAL_DMA_GetState>
 8002750:	4603      	mov	r3, r0
 8002752:	2b01      	cmp	r3, #1
 8002754:	d014      	beq.n	8002780 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800275a:	4a4e      	ldr	r2, [pc, #312]	; (8002894 <I2C_Slave_STOPF+0x258>)
 800275c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe f99e 	bl	8000aa4 <HAL_DMA_Abort_IT>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d008      	beq.n	8002780 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002778:	4610      	mov	r0, r2
 800277a:	4798      	blx	r3
 800277c:	e000      	b.n	8002780 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800277e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002784:	b29b      	uxth	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d03e      	beq.n	8002808 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b04      	cmp	r3, #4
 8002796:	d112      	bne.n	80027be <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	691a      	ldr	r2, [r3, #16]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c8:	2b40      	cmp	r3, #64	; 0x40
 80027ca:	d112      	bne.n	80027f2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691a      	ldr	r2, [r3, #16]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	1c5a      	adds	r2, r3, #1
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	f043 0204 	orr.w	r2, r3, #4
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f843 	bl	800289c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002816:	e039      	b.n	800288c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002818:	7bfb      	ldrb	r3, [r7, #15]
 800281a:	2b2a      	cmp	r3, #42	; 0x2a
 800281c:	d109      	bne.n	8002832 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2228      	movs	r2, #40	; 0x28
 8002828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f7ff f830 	bl	8001892 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b28      	cmp	r3, #40	; 0x28
 800283c:	d111      	bne.n	8002862 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a15      	ldr	r2, [pc, #84]	; (8002898 <I2C_Slave_STOPF+0x25c>)
 8002842:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2220      	movs	r2, #32
 800284e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff f831 	bl	80018c2 <HAL_I2C_ListenCpltCallback>
}
 8002860:	e014      	b.n	800288c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	2b22      	cmp	r3, #34	; 0x22
 8002868:	d002      	beq.n	8002870 <I2C_Slave_STOPF+0x234>
 800286a:	7bfb      	ldrb	r3, [r7, #15]
 800286c:	2b22      	cmp	r3, #34	; 0x22
 800286e:	d10d      	bne.n	800288c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2220      	movs	r2, #32
 800287a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7ff f803 	bl	8001892 <HAL_I2C_SlaveRxCpltCallback>
}
 800288c:	bf00      	nop
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	08002b01 	.word	0x08002b01
 8002898:	ffff0000 	.word	0xffff0000

0800289c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028b2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80028b4:	7bbb      	ldrb	r3, [r7, #14]
 80028b6:	2b10      	cmp	r3, #16
 80028b8:	d002      	beq.n	80028c0 <I2C_ITError+0x24>
 80028ba:	7bbb      	ldrb	r3, [r7, #14]
 80028bc:	2b40      	cmp	r3, #64	; 0x40
 80028be:	d10a      	bne.n	80028d6 <I2C_ITError+0x3a>
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	2b22      	cmp	r3, #34	; 0x22
 80028c4:	d107      	bne.n	80028d6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028d4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
 80028d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80028dc:	2b28      	cmp	r3, #40	; 0x28
 80028de:	d107      	bne.n	80028f0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2228      	movs	r2, #40	; 0x28
 80028ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80028ee:	e015      	b.n	800291c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028fe:	d00a      	beq.n	8002916 <I2C_ITError+0x7a>
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	2b60      	cmp	r3, #96	; 0x60
 8002904:	d007      	beq.n	8002916 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2220      	movs	r2, #32
 800290a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800292a:	d162      	bne.n	80029f2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800293a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002940:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b01      	cmp	r3, #1
 8002948:	d020      	beq.n	800298c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294e:	4a6a      	ldr	r2, [pc, #424]	; (8002af8 <I2C_ITError+0x25c>)
 8002950:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe f8a4 	bl	8000aa4 <HAL_DMA_Abort_IT>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 8089 	beq.w	8002a76 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0201 	bic.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2220      	movs	r2, #32
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002986:	4610      	mov	r0, r2
 8002988:	4798      	blx	r3
 800298a:	e074      	b.n	8002a76 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002990:	4a59      	ldr	r2, [pc, #356]	; (8002af8 <I2C_ITError+0x25c>)
 8002992:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002998:	4618      	mov	r0, r3
 800299a:	f7fe f883 	bl	8000aa4 <HAL_DMA_Abort_IT>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d068      	beq.n	8002a76 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ae:	2b40      	cmp	r3, #64	; 0x40
 80029b0:	d10b      	bne.n	80029ca <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	691a      	ldr	r2, [r3, #16]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0201 	bic.w	r2, r2, #1
 80029d8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2220      	movs	r2, #32
 80029de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029ec:	4610      	mov	r0, r2
 80029ee:	4798      	blx	r3
 80029f0:	e041      	b.n	8002a76 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b60      	cmp	r3, #96	; 0x60
 80029fc:	d125      	bne.n	8002a4a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2220      	movs	r2, #32
 8002a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a16:	2b40      	cmp	r3, #64	; 0x40
 8002a18:	d10b      	bne.n	8002a32 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0201 	bic.w	r2, r2, #1
 8002a40:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fe ff65 	bl	8001912 <HAL_I2C_AbortCpltCallback>
 8002a48:	e015      	b.n	8002a76 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a54:	2b40      	cmp	r3, #64	; 0x40
 8002a56:	d10b      	bne.n	8002a70 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691a      	ldr	r2, [r3, #16]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	1c5a      	adds	r2, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7fe ff44 	bl	80018fe <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10e      	bne.n	8002aa4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d109      	bne.n	8002aa4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d104      	bne.n	8002aa4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d007      	beq.n	8002ab4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ab2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aba:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	d113      	bne.n	8002af0 <I2C_ITError+0x254>
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	2b28      	cmp	r3, #40	; 0x28
 8002acc:	d110      	bne.n	8002af0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a0a      	ldr	r2, [pc, #40]	; (8002afc <I2C_ITError+0x260>)
 8002ad2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2220      	movs	r2, #32
 8002ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7fe fee9 	bl	80018c2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002af0:	bf00      	nop
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	08002b01 	.word	0x08002b01
 8002afc:	ffff0000 	.word	0xffff0000

08002b00 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b10:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b18:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b1a:	4b4b      	ldr	r3, [pc, #300]	; (8002c48 <I2C_DMAAbort+0x148>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	08db      	lsrs	r3, r3, #3
 8002b20:	4a4a      	ldr	r2, [pc, #296]	; (8002c4c <I2C_DMAAbort+0x14c>)
 8002b22:	fba2 2303 	umull	r2, r3, r2, r3
 8002b26:	0a1a      	lsrs	r2, r3, #8
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	00da      	lsls	r2, r3, #3
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d106      	bne.n	8002b48 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f043 0220 	orr.w	r2, r3, #32
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002b46:	e00a      	b.n	8002b5e <I2C_DMAAbort+0x5e>
    }
    count--;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b5c:	d0ea      	beq.n	8002b34 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b8c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2200      	movs	r2, #0
 8002b92:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b60      	cmp	r3, #96	; 0x60
 8002bce:	d10e      	bne.n	8002bee <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	2200      	movs	r2, #0
 8002be4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002be6:	6978      	ldr	r0, [r7, #20]
 8002be8:	f7fe fe93 	bl	8001912 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002bec:	e027      	b.n	8002c3e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002bee:	7cfb      	ldrb	r3, [r7, #19]
 8002bf0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002bf4:	2b28      	cmp	r3, #40	; 0x28
 8002bf6:	d117      	bne.n	8002c28 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c16:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	2228      	movs	r2, #40	; 0x28
 8002c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002c26:	e007      	b.n	8002c38 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002c38:	6978      	ldr	r0, [r7, #20]
 8002c3a:	f7fe fe60 	bl	80018fe <HAL_I2C_ErrorCallback>
}
 8002c3e:	bf00      	nop
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20000118 	.word	0x20000118
 8002c4c:	14f8b589 	.word	0x14f8b589

08002c50 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002c5c:	4b13      	ldr	r3, [pc, #76]	; (8002cac <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	08db      	lsrs	r3, r3, #3
 8002c62:	4a13      	ldr	r2, [pc, #76]	; (8002cb0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002c64:	fba2 2303 	umull	r2, r3, r2, r3
 8002c68:	0a1a      	lsrs	r2, r3, #8
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	3b01      	subs	r3, #1
 8002c76:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d107      	bne.n	8002c8e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f043 0220 	orr.w	r2, r3, #32
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e008      	b.n	8002ca0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c9c:	d0e9      	beq.n	8002c72 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	20000118 	.word	0x20000118
 8002cb0:	14f8b589 	.word	0x14f8b589

08002cb4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002cc4:	d103      	bne.n	8002cce <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002ccc:	e007      	b.n	8002cde <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002cd6:	d102      	bne.n	8002cde <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2208      	movs	r2, #8
 8002cdc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002cea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cec:	b08f      	sub	sp, #60	; 0x3c
 8002cee:	af0a      	add	r7, sp, #40	; 0x28
 8002cf0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e10f      	b.n	8002f1c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d106      	bne.n	8002d1c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f008 f9b0 	bl	800b07c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2203      	movs	r2, #3
 8002d20:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d102      	bne.n	8002d36 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f004 fb3d 	bl	80073ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	603b      	str	r3, [r7, #0]
 8002d46:	687e      	ldr	r6, [r7, #4]
 8002d48:	466d      	mov	r5, sp
 8002d4a:	f106 0410 	add.w	r4, r6, #16
 8002d4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d5e:	1d33      	adds	r3, r6, #4
 8002d60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d62:	6838      	ldr	r0, [r7, #0]
 8002d64:	f004 fa14 	bl	8007190 <USB_CoreInit>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d005      	beq.n	8002d7a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2202      	movs	r2, #2
 8002d72:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e0d0      	b.n	8002f1c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2100      	movs	r1, #0
 8002d80:	4618      	mov	r0, r3
 8002d82:	f004 fb2b 	bl	80073dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d86:	2300      	movs	r3, #0
 8002d88:	73fb      	strb	r3, [r7, #15]
 8002d8a:	e04a      	b.n	8002e22 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d8c:	7bfa      	ldrb	r2, [r7, #15]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	1a9b      	subs	r3, r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	333d      	adds	r3, #61	; 0x3d
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002da0:	7bfa      	ldrb	r2, [r7, #15]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	1a9b      	subs	r3, r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	333c      	adds	r3, #60	; 0x3c
 8002db0:	7bfa      	ldrb	r2, [r7, #15]
 8002db2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002db4:	7bfa      	ldrb	r2, [r7, #15]
 8002db6:	7bfb      	ldrb	r3, [r7, #15]
 8002db8:	b298      	uxth	r0, r3
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	1a9b      	subs	r3, r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	3342      	adds	r3, #66	; 0x42
 8002dc8:	4602      	mov	r2, r0
 8002dca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002dcc:	7bfa      	ldrb	r2, [r7, #15]
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	1a9b      	subs	r3, r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	333f      	adds	r3, #63	; 0x3f
 8002ddc:	2200      	movs	r2, #0
 8002dde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002de0:	7bfa      	ldrb	r2, [r7, #15]
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	1a9b      	subs	r3, r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	3344      	adds	r3, #68	; 0x44
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002df4:	7bfa      	ldrb	r2, [r7, #15]
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	1a9b      	subs	r3, r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	3348      	adds	r3, #72	; 0x48
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e08:	7bfa      	ldrb	r2, [r7, #15]
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	1a9b      	subs	r3, r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	3350      	adds	r3, #80	; 0x50
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	73fb      	strb	r3, [r7, #15]
 8002e22:	7bfa      	ldrb	r2, [r7, #15]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d3af      	bcc.n	8002d8c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	73fb      	strb	r3, [r7, #15]
 8002e30:	e044      	b.n	8002ebc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e32:	7bfa      	ldrb	r2, [r7, #15]
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	4613      	mov	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	1a9b      	subs	r3, r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002e44:	2200      	movs	r2, #0
 8002e46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e48:	7bfa      	ldrb	r2, [r7, #15]
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	1a9b      	subs	r3, r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002e5a:	7bfa      	ldrb	r2, [r7, #15]
 8002e5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e5e:	7bfa      	ldrb	r2, [r7, #15]
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	1a9b      	subs	r3, r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002e70:	2200      	movs	r2, #0
 8002e72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e74:	7bfa      	ldrb	r2, [r7, #15]
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	1a9b      	subs	r3, r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e8a:	7bfa      	ldrb	r2, [r7, #15]
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ea0:	7bfa      	ldrb	r2, [r7, #15]
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	1a9b      	subs	r3, r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	73fb      	strb	r3, [r7, #15]
 8002ebc:	7bfa      	ldrb	r2, [r7, #15]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d3b5      	bcc.n	8002e32 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	603b      	str	r3, [r7, #0]
 8002ecc:	687e      	ldr	r6, [r7, #4]
 8002ece:	466d      	mov	r5, sp
 8002ed0:	f106 0410 	add.w	r4, r6, #16
 8002ed4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ed6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ed8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002edc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ee0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ee4:	1d33      	adds	r3, r6, #4
 8002ee6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ee8:	6838      	ldr	r0, [r7, #0]
 8002eea:	f004 fac3 	bl	8007474 <USB_DevInit>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d005      	beq.n	8002f00 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e00d      	b.n	8002f1c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f005 fb3f 	bl	8008598 <USB_DevDisconnect>

  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f24 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d101      	bne.n	8002f40 <HAL_PCD_Start+0x1c>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e020      	b.n	8002f82 <HAL_PCD_Start+0x5e>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d109      	bne.n	8002f64 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d005      	beq.n	8002f64 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f004 fa15 	bl	8007398 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f005 faef 	bl	8008556 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f8a:	b590      	push	{r4, r7, lr}
 8002f8c:	b08d      	sub	sp, #52	; 0x34
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f005 fbad 	bl	8008700 <USB_GetMode>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f040 839d 	bne.w	80036e8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f005 fb11 	bl	80085da <USB_ReadInterrupts>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 8393 	beq.w	80036e6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f005 fb08 	bl	80085da <USB_ReadInterrupts>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d107      	bne.n	8002fe4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	695a      	ldr	r2, [r3, #20]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f002 0202 	and.w	r2, r2, #2
 8002fe2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f005 faf6 	bl	80085da <USB_ReadInterrupts>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	f003 0310 	and.w	r3, r3, #16
 8002ff4:	2b10      	cmp	r3, #16
 8002ff6:	d161      	bne.n	80030bc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699a      	ldr	r2, [r3, #24]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0210 	bic.w	r2, r2, #16
 8003006:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	f003 020f 	and.w	r2, r3, #15
 8003014:	4613      	mov	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	1a9b      	subs	r3, r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	4413      	add	r3, r2
 8003024:	3304      	adds	r3, #4
 8003026:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	0c5b      	lsrs	r3, r3, #17
 800302c:	f003 030f 	and.w	r3, r3, #15
 8003030:	2b02      	cmp	r3, #2
 8003032:	d124      	bne.n	800307e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800303a:	4013      	ands	r3, r2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d035      	beq.n	80030ac <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	091b      	lsrs	r3, r3, #4
 8003048:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800304a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800304e:	b29b      	uxth	r3, r3
 8003050:	461a      	mov	r2, r3
 8003052:	6a38      	ldr	r0, [r7, #32]
 8003054:	f005 f92d 	bl	80082b2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	091b      	lsrs	r3, r3, #4
 8003060:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003064:	441a      	add	r2, r3
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	699a      	ldr	r2, [r3, #24]
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	091b      	lsrs	r3, r3, #4
 8003072:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003076:	441a      	add	r2, r3
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	619a      	str	r2, [r3, #24]
 800307c:	e016      	b.n	80030ac <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	0c5b      	lsrs	r3, r3, #17
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	2b06      	cmp	r3, #6
 8003088:	d110      	bne.n	80030ac <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003090:	2208      	movs	r2, #8
 8003092:	4619      	mov	r1, r3
 8003094:	6a38      	ldr	r0, [r7, #32]
 8003096:	f005 f90c 	bl	80082b2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	699a      	ldr	r2, [r3, #24]
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	091b      	lsrs	r3, r3, #4
 80030a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030a6:	441a      	add	r2, r3
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699a      	ldr	r2, [r3, #24]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0210 	orr.w	r2, r2, #16
 80030ba:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f005 fa8a 	bl	80085da <USB_ReadInterrupts>
 80030c6:	4603      	mov	r3, r0
 80030c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80030d0:	d16e      	bne.n	80031b0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f005 fa90 	bl	8008600 <USB_ReadDevAllOutEpInterrupt>
 80030e0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80030e2:	e062      	b.n	80031aa <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80030e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d057      	beq.n	800319e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	4611      	mov	r1, r2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f005 fab5 	bl	8008668 <USB_ReadDevOutEPInterrupt>
 80030fe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00c      	beq.n	8003124 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	015a      	lsls	r2, r3, #5
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	4413      	add	r3, r2
 8003112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003116:	461a      	mov	r2, r3
 8003118:	2301      	movs	r3, #1
 800311a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800311c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 fdb0 	bl	8003c84 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00c      	beq.n	8003148 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	015a      	lsls	r2, r3, #5
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	4413      	add	r3, r2
 8003136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800313a:	461a      	mov	r2, r3
 800313c:	2308      	movs	r3, #8
 800313e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003140:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 feaa 	bl	8003e9c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	f003 0310 	and.w	r3, r3, #16
 800314e:	2b00      	cmp	r3, #0
 8003150:	d008      	beq.n	8003164 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	015a      	lsls	r2, r3, #5
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	4413      	add	r3, r2
 800315a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800315e:	461a      	mov	r2, r3
 8003160:	2310      	movs	r3, #16
 8003162:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	f003 0320 	and.w	r3, r3, #32
 800316a:	2b00      	cmp	r3, #0
 800316c:	d008      	beq.n	8003180 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	015a      	lsls	r2, r3, #5
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	4413      	add	r3, r2
 8003176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800317a:	461a      	mov	r2, r3
 800317c:	2320      	movs	r3, #32
 800317e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d009      	beq.n	800319e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	4413      	add	r3, r2
 8003192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003196:	461a      	mov	r2, r3
 8003198:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800319c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	3301      	adds	r3, #1
 80031a2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80031a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a6:	085b      	lsrs	r3, r3, #1
 80031a8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80031aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d199      	bne.n	80030e4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f005 fa10 	bl	80085da <USB_ReadInterrupts>
 80031ba:	4603      	mov	r3, r0
 80031bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031c4:	f040 80c0 	bne.w	8003348 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f005 fa31 	bl	8008634 <USB_ReadDevAllInEpInterrupt>
 80031d2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80031d8:	e0b2      	b.n	8003340 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80031da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 80a7 	beq.w	8003334 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	4611      	mov	r1, r2
 80031f0:	4618      	mov	r0, r3
 80031f2:	f005 fa57 	bl	80086a4 <USB_ReadDevInEPInterrupt>
 80031f6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d057      	beq.n	80032b2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	f003 030f 	and.w	r3, r3, #15
 8003208:	2201      	movs	r2, #1
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	43db      	mvns	r3, r3
 800321c:	69f9      	ldr	r1, [r7, #28]
 800321e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003222:	4013      	ands	r3, r2
 8003224:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	4413      	add	r3, r2
 800322e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003232:	461a      	mov	r2, r3
 8003234:	2301      	movs	r3, #1
 8003236:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d132      	bne.n	80032a6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003244:	4613      	mov	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	1a9b      	subs	r3, r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	3348      	adds	r3, #72	; 0x48
 8003250:	6819      	ldr	r1, [r3, #0]
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003256:	4613      	mov	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	1a9b      	subs	r3, r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4403      	add	r3, r0
 8003260:	3344      	adds	r3, #68	; 0x44
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4419      	add	r1, r3
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800326a:	4613      	mov	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4403      	add	r3, r0
 8003274:	3348      	adds	r3, #72	; 0x48
 8003276:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	2b00      	cmp	r3, #0
 800327c:	d113      	bne.n	80032a6 <HAL_PCD_IRQHandler+0x31c>
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003282:	4613      	mov	r3, r2
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	1a9b      	subs	r3, r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	3350      	adds	r3, #80	; 0x50
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d108      	bne.n	80032a6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6818      	ldr	r0, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800329e:	461a      	mov	r2, r3
 80032a0:	2101      	movs	r1, #1
 80032a2:	f005 fa5f 	bl	8008764 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	4619      	mov	r1, r3
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f007 ff74 	bl	800b19a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d008      	beq.n	80032ce <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	015a      	lsls	r2, r3, #5
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	4413      	add	r3, r2
 80032c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032c8:	461a      	mov	r2, r3
 80032ca:	2308      	movs	r3, #8
 80032cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	f003 0310 	and.w	r3, r3, #16
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d008      	beq.n	80032ea <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	015a      	lsls	r2, r3, #5
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	4413      	add	r3, r2
 80032e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032e4:	461a      	mov	r2, r3
 80032e6:	2310      	movs	r3, #16
 80032e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d008      	beq.n	8003306 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	015a      	lsls	r2, r3, #5
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	4413      	add	r3, r2
 80032fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003300:	461a      	mov	r2, r3
 8003302:	2340      	movs	r3, #64	; 0x40
 8003304:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d008      	beq.n	8003322 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	4413      	add	r3, r2
 8003318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800331c:	461a      	mov	r2, r3
 800331e:	2302      	movs	r3, #2
 8003320:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800332c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fc1b 	bl	8003b6a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	3301      	adds	r3, #1
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800333a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333c:	085b      	lsrs	r3, r3, #1
 800333e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003342:	2b00      	cmp	r3, #0
 8003344:	f47f af49 	bne.w	80031da <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f005 f944 	bl	80085da <USB_ReadInterrupts>
 8003352:	4603      	mov	r3, r0
 8003354:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003358:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800335c:	d122      	bne.n	80033a4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	69fa      	ldr	r2, [r7, #28]
 8003368:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800336c:	f023 0301 	bic.w	r3, r3, #1
 8003370:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003378:	2b01      	cmp	r3, #1
 800337a:	d108      	bne.n	800338e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003384:	2100      	movs	r1, #0
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 fe26 	bl	8003fd8 <HAL_PCDEx_LPM_Callback>
 800338c:	e002      	b.n	8003394 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f007 ff70 	bl	800b274 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695a      	ldr	r2, [r3, #20]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80033a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f005 f916 	bl	80085da <USB_ReadInterrupts>
 80033ae:	4603      	mov	r3, r0
 80033b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033b8:	d112      	bne.n	80033e0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d102      	bne.n	80033d0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f007 ff2c 	bl	800b228 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695a      	ldr	r2, [r3, #20]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80033de:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f005 f8f8 	bl	80085da <USB_ReadInterrupts>
 80033ea:	4603      	mov	r3, r0
 80033ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f4:	f040 80c7 	bne.w	8003586 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	69fa      	ldr	r2, [r7, #28]
 8003402:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003406:	f023 0301 	bic.w	r3, r3, #1
 800340a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2110      	movs	r1, #16
 8003412:	4618      	mov	r0, r3
 8003414:	f004 f992 	bl	800773c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003418:	2300      	movs	r3, #0
 800341a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800341c:	e056      	b.n	80034cc <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800341e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003420:	015a      	lsls	r2, r3, #5
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	4413      	add	r3, r2
 8003426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800342a:	461a      	mov	r2, r3
 800342c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003430:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	4413      	add	r3, r2
 800343a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003442:	0151      	lsls	r1, r2, #5
 8003444:	69fa      	ldr	r2, [r7, #28]
 8003446:	440a      	add	r2, r1
 8003448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800344c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003450:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003454:	015a      	lsls	r2, r3, #5
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	4413      	add	r3, r2
 800345a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003462:	0151      	lsls	r1, r2, #5
 8003464:	69fa      	ldr	r2, [r7, #28]
 8003466:	440a      	add	r2, r1
 8003468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800346c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003470:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003474:	015a      	lsls	r2, r3, #5
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	4413      	add	r3, r2
 800347a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800347e:	461a      	mov	r2, r3
 8003480:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003484:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003488:	015a      	lsls	r2, r3, #5
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	4413      	add	r3, r2
 800348e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003496:	0151      	lsls	r1, r2, #5
 8003498:	69fa      	ldr	r2, [r7, #28]
 800349a:	440a      	add	r2, r1
 800349c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80034a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80034a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a8:	015a      	lsls	r2, r3, #5
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	4413      	add	r3, r2
 80034ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034b6:	0151      	lsls	r1, r2, #5
 80034b8:	69fa      	ldr	r2, [r7, #28]
 80034ba:	440a      	add	r2, r1
 80034bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034c4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c8:	3301      	adds	r3, #1
 80034ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d3a3      	bcc.n	800341e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	69fa      	ldr	r2, [r7, #28]
 80034e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034e4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80034e8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d016      	beq.n	8003520 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034fc:	69fa      	ldr	r2, [r7, #28]
 80034fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003502:	f043 030b 	orr.w	r3, r3, #11
 8003506:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003512:	69fa      	ldr	r2, [r7, #28]
 8003514:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003518:	f043 030b 	orr.w	r3, r3, #11
 800351c:	6453      	str	r3, [r2, #68]	; 0x44
 800351e:	e015      	b.n	800354c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	69fa      	ldr	r2, [r7, #28]
 800352a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800352e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003532:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003536:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	69fa      	ldr	r2, [r7, #28]
 8003542:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003546:	f043 030b 	orr.w	r3, r3, #11
 800354a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	69fa      	ldr	r2, [r7, #28]
 8003556:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800355a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800355e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6818      	ldr	r0, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003570:	461a      	mov	r2, r3
 8003572:	f005 f8f7 	bl	8008764 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695a      	ldr	r2, [r3, #20]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003584:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f005 f825 	bl	80085da <USB_ReadInterrupts>
 8003590:	4603      	mov	r3, r0
 8003592:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800359a:	d124      	bne.n	80035e6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f005 f8bb 	bl	800871c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f004 f923 	bl	80077f6 <USB_GetDevSpeed>
 80035b0:	4603      	mov	r3, r0
 80035b2:	461a      	mov	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681c      	ldr	r4, [r3, #0]
 80035bc:	f001 f936 	bl	800482c <HAL_RCC_GetHCLKFreq>
 80035c0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	461a      	mov	r2, r3
 80035ca:	4620      	mov	r0, r4
 80035cc:	f003 fe42 	bl	8007254 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f007 fe0a 	bl	800b1ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695a      	ldr	r2, [r3, #20]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80035e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f004 fff5 	bl	80085da <USB_ReadInterrupts>
 80035f0:	4603      	mov	r3, r0
 80035f2:	f003 0308 	and.w	r3, r3, #8
 80035f6:	2b08      	cmp	r3, #8
 80035f8:	d10a      	bne.n	8003610 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f007 fde7 	bl	800b1ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695a      	ldr	r2, [r3, #20]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f002 0208 	and.w	r2, r2, #8
 800360e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f004 ffe0 	bl	80085da <USB_ReadInterrupts>
 800361a:	4603      	mov	r3, r0
 800361c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003620:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003624:	d10f      	bne.n	8003646 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003626:	2300      	movs	r3, #0
 8003628:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	b2db      	uxtb	r3, r3
 800362e:	4619      	mov	r1, r3
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f007 fe3f 	bl	800b2b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695a      	ldr	r2, [r3, #20]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003644:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f004 ffc5 	bl	80085da <USB_ReadInterrupts>
 8003650:	4603      	mov	r3, r0
 8003652:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003656:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800365a:	d10f      	bne.n	800367c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800365c:	2300      	movs	r3, #0
 800365e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	b2db      	uxtb	r3, r3
 8003664:	4619      	mov	r1, r3
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f007 fe12 	bl	800b290 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	695a      	ldr	r2, [r3, #20]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800367a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4618      	mov	r0, r3
 8003682:	f004 ffaa 	bl	80085da <USB_ReadInterrupts>
 8003686:	4603      	mov	r3, r0
 8003688:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800368c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003690:	d10a      	bne.n	80036a8 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f007 fe20 	bl	800b2d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695a      	ldr	r2, [r3, #20]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80036a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f004 ff94 	bl	80085da <USB_ReadInterrupts>
 80036b2:	4603      	mov	r3, r0
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d115      	bne.n	80036e8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d002      	beq.n	80036d4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f007 fe10 	bl	800b2f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6859      	ldr	r1, [r3, #4]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	605a      	str	r2, [r3, #4]
 80036e4:	e000      	b.n	80036e8 <HAL_PCD_IRQHandler+0x75e>
      return;
 80036e6:	bf00      	nop
    }
  }
}
 80036e8:	3734      	adds	r7, #52	; 0x34
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd90      	pop	{r4, r7, pc}

080036ee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b082      	sub	sp, #8
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
 80036f6:	460b      	mov	r3, r1
 80036f8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <HAL_PCD_SetAddress+0x1a>
 8003704:	2302      	movs	r3, #2
 8003706:	e013      	b.n	8003730 <HAL_PCD_SetAddress+0x42>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	78fa      	ldrb	r2, [r7, #3]
 8003714:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	78fa      	ldrb	r2, [r7, #3]
 800371e:	4611      	mov	r1, r2
 8003720:	4618      	mov	r0, r3
 8003722:	f004 fef2 	bl	800850a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	4608      	mov	r0, r1
 8003742:	4611      	mov	r1, r2
 8003744:	461a      	mov	r2, r3
 8003746:	4603      	mov	r3, r0
 8003748:	70fb      	strb	r3, [r7, #3]
 800374a:	460b      	mov	r3, r1
 800374c:	803b      	strh	r3, [r7, #0]
 800374e:	4613      	mov	r3, r2
 8003750:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003756:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800375a:	2b00      	cmp	r3, #0
 800375c:	da0f      	bge.n	800377e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800375e:	78fb      	ldrb	r3, [r7, #3]
 8003760:	f003 020f 	and.w	r2, r3, #15
 8003764:	4613      	mov	r3, r2
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	1a9b      	subs	r3, r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	3338      	adds	r3, #56	; 0x38
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	4413      	add	r3, r2
 8003772:	3304      	adds	r3, #4
 8003774:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2201      	movs	r2, #1
 800377a:	705a      	strb	r2, [r3, #1]
 800377c:	e00f      	b.n	800379e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800377e:	78fb      	ldrb	r3, [r7, #3]
 8003780:	f003 020f 	and.w	r2, r3, #15
 8003784:	4613      	mov	r3, r2
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	1a9b      	subs	r3, r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	4413      	add	r3, r2
 8003794:	3304      	adds	r3, #4
 8003796:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800379e:	78fb      	ldrb	r3, [r7, #3]
 80037a0:	f003 030f 	and.w	r3, r3, #15
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80037aa:	883a      	ldrh	r2, [r7, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	78ba      	ldrb	r2, [r7, #2]
 80037b4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	785b      	ldrb	r3, [r3, #1]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d004      	beq.n	80037c8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80037c8:	78bb      	ldrb	r3, [r7, #2]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d102      	bne.n	80037d4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d101      	bne.n	80037e2 <HAL_PCD_EP_Open+0xaa>
 80037de:	2302      	movs	r3, #2
 80037e0:	e00e      	b.n	8003800 <HAL_PCD_EP_Open+0xc8>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68f9      	ldr	r1, [r7, #12]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f004 f825 	bl	8007840 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80037fe:	7afb      	ldrb	r3, [r7, #11]
}
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	460b      	mov	r3, r1
 8003812:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003814:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003818:	2b00      	cmp	r3, #0
 800381a:	da0f      	bge.n	800383c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800381c:	78fb      	ldrb	r3, [r7, #3]
 800381e:	f003 020f 	and.w	r2, r3, #15
 8003822:	4613      	mov	r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	1a9b      	subs	r3, r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	3338      	adds	r3, #56	; 0x38
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	4413      	add	r3, r2
 8003830:	3304      	adds	r3, #4
 8003832:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2201      	movs	r2, #1
 8003838:	705a      	strb	r2, [r3, #1]
 800383a:	e00f      	b.n	800385c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800383c:	78fb      	ldrb	r3, [r7, #3]
 800383e:	f003 020f 	and.w	r2, r3, #15
 8003842:	4613      	mov	r3, r2
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	1a9b      	subs	r3, r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	4413      	add	r3, r2
 8003852:	3304      	adds	r3, #4
 8003854:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800385c:	78fb      	ldrb	r3, [r7, #3]
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	b2da      	uxtb	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800386e:	2b01      	cmp	r3, #1
 8003870:	d101      	bne.n	8003876 <HAL_PCD_EP_Close+0x6e>
 8003872:	2302      	movs	r3, #2
 8003874:	e00e      	b.n	8003894 <HAL_PCD_EP_Close+0x8c>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68f9      	ldr	r1, [r7, #12]
 8003884:	4618      	mov	r0, r3
 8003886:	f004 f863 	bl	8007950 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	607a      	str	r2, [r7, #4]
 80038a6:	603b      	str	r3, [r7, #0]
 80038a8:	460b      	mov	r3, r1
 80038aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038ac:	7afb      	ldrb	r3, [r7, #11]
 80038ae:	f003 020f 	and.w	r2, r3, #15
 80038b2:	4613      	mov	r3, r2
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	1a9b      	subs	r3, r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	4413      	add	r3, r2
 80038c2:	3304      	adds	r3, #4
 80038c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2200      	movs	r2, #0
 80038d6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	2200      	movs	r2, #0
 80038dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038de:	7afb      	ldrb	r3, [r7, #11]
 80038e0:	f003 030f 	and.w	r3, r3, #15
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d102      	bne.n	80038f8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038f8:	7afb      	ldrb	r3, [r7, #11]
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d109      	bne.n	8003916 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6818      	ldr	r0, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	b2db      	uxtb	r3, r3
 800390c:	461a      	mov	r2, r3
 800390e:	6979      	ldr	r1, [r7, #20]
 8003910:	f004 fb3e 	bl	8007f90 <USB_EP0StartXfer>
 8003914:	e008      	b.n	8003928 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6818      	ldr	r0, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	b2db      	uxtb	r3, r3
 8003920:	461a      	mov	r2, r3
 8003922:	6979      	ldr	r1, [r7, #20]
 8003924:	f004 f8f0 	bl	8007b08 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003932:	b480      	push	{r7}
 8003934:	b083      	sub	sp, #12
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
 800393a:	460b      	mov	r3, r1
 800393c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800393e:	78fb      	ldrb	r3, [r7, #3]
 8003940:	f003 020f 	and.w	r2, r3, #15
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	4613      	mov	r3, r2
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	1a9b      	subs	r3, r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	440b      	add	r3, r1
 8003950:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003954:	681b      	ldr	r3, [r3, #0]
}
 8003956:	4618      	mov	r0, r3
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b086      	sub	sp, #24
 8003966:	af00      	add	r7, sp, #0
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	607a      	str	r2, [r7, #4]
 800396c:	603b      	str	r3, [r7, #0]
 800396e:	460b      	mov	r3, r1
 8003970:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003972:	7afb      	ldrb	r3, [r7, #11]
 8003974:	f003 020f 	and.w	r2, r3, #15
 8003978:	4613      	mov	r3, r2
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	1a9b      	subs	r3, r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	3338      	adds	r3, #56	; 0x38
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	4413      	add	r3, r2
 8003986:	3304      	adds	r3, #4
 8003988:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2200      	movs	r2, #0
 800399a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	2201      	movs	r2, #1
 80039a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039a2:	7afb      	ldrb	r3, [r7, #11]
 80039a4:	f003 030f 	and.w	r3, r3, #15
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d102      	bne.n	80039bc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039bc:	7afb      	ldrb	r3, [r7, #11]
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d109      	bne.n	80039da <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6818      	ldr	r0, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	461a      	mov	r2, r3
 80039d2:	6979      	ldr	r1, [r7, #20]
 80039d4:	f004 fadc 	bl	8007f90 <USB_EP0StartXfer>
 80039d8:	e008      	b.n	80039ec <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6818      	ldr	r0, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	461a      	mov	r2, r3
 80039e6:	6979      	ldr	r1, [r7, #20]
 80039e8:	f004 f88e 	bl	8007b08 <USB_EPStartXfer>
  }

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b084      	sub	sp, #16
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
 80039fe:	460b      	mov	r3, r1
 8003a00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a02:	78fb      	ldrb	r3, [r7, #3]
 8003a04:	f003 020f 	and.w	r2, r3, #15
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d901      	bls.n	8003a14 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e050      	b.n	8003ab6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	da0f      	bge.n	8003a3c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	f003 020f 	and.w	r2, r3, #15
 8003a22:	4613      	mov	r3, r2
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	1a9b      	subs	r3, r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	3338      	adds	r3, #56	; 0x38
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	4413      	add	r3, r2
 8003a30:	3304      	adds	r3, #4
 8003a32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2201      	movs	r2, #1
 8003a38:	705a      	strb	r2, [r3, #1]
 8003a3a:	e00d      	b.n	8003a58 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a3c:	78fa      	ldrb	r2, [r7, #3]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	1a9b      	subs	r3, r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	3304      	adds	r3, #4
 8003a50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a5e:	78fb      	ldrb	r3, [r7, #3]
 8003a60:	f003 030f 	and.w	r3, r3, #15
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d101      	bne.n	8003a78 <HAL_PCD_EP_SetStall+0x82>
 8003a74:	2302      	movs	r3, #2
 8003a76:	e01e      	b.n	8003ab6 <HAL_PCD_EP_SetStall+0xc0>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68f9      	ldr	r1, [r7, #12]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f004 fc6b 	bl	8008362 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a8c:	78fb      	ldrb	r3, [r7, #3]
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10a      	bne.n	8003aac <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6818      	ldr	r0, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	b2d9      	uxtb	r1, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	f004 fe5c 	bl	8008764 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b084      	sub	sp, #16
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003aca:	78fb      	ldrb	r3, [r7, #3]
 8003acc:	f003 020f 	and.w	r2, r3, #15
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d901      	bls.n	8003adc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e042      	b.n	8003b62 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003adc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	da0f      	bge.n	8003b04 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ae4:	78fb      	ldrb	r3, [r7, #3]
 8003ae6:	f003 020f 	and.w	r2, r3, #15
 8003aea:	4613      	mov	r3, r2
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	1a9b      	subs	r3, r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	3338      	adds	r3, #56	; 0x38
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	4413      	add	r3, r2
 8003af8:	3304      	adds	r3, #4
 8003afa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2201      	movs	r2, #1
 8003b00:	705a      	strb	r2, [r3, #1]
 8003b02:	e00f      	b.n	8003b24 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b04:	78fb      	ldrb	r3, [r7, #3]
 8003b06:	f003 020f 	and.w	r2, r3, #15
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	1a9b      	subs	r3, r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	4413      	add	r3, r2
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b2a:	78fb      	ldrb	r3, [r7, #3]
 8003b2c:	f003 030f 	and.w	r3, r3, #15
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d101      	bne.n	8003b44 <HAL_PCD_EP_ClrStall+0x86>
 8003b40:	2302      	movs	r3, #2
 8003b42:	e00e      	b.n	8003b62 <HAL_PCD_EP_ClrStall+0xa4>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68f9      	ldr	r1, [r7, #12]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f004 fc73 	bl	800843e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b08a      	sub	sp, #40	; 0x28
 8003b6e:	af02      	add	r7, sp, #8
 8003b70:	6078      	str	r0, [r7, #4]
 8003b72:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	4613      	mov	r3, r2
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	1a9b      	subs	r3, r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	3338      	adds	r3, #56	; 0x38
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	3304      	adds	r3, #4
 8003b90:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	699a      	ldr	r2, [r3, #24]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d901      	bls.n	8003ba2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e06c      	b.n	8003c7c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	695a      	ldr	r2, [r3, #20]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	69fa      	ldr	r2, [r7, #28]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d902      	bls.n	8003bbe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	3303      	adds	r3, #3
 8003bc2:	089b      	lsrs	r3, r3, #2
 8003bc4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bc6:	e02b      	b.n	8003c20 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	695a      	ldr	r2, [r3, #20]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	69fa      	ldr	r2, [r7, #28]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d902      	bls.n	8003be4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	3303      	adds	r3, #3
 8003be8:	089b      	lsrs	r3, r3, #2
 8003bea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	68d9      	ldr	r1, [r3, #12]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	4603      	mov	r3, r0
 8003c02:	6978      	ldr	r0, [r7, #20]
 8003c04:	f004 fb17 	bl	8008236 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	441a      	add	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	699a      	ldr	r2, [r3, #24]
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	441a      	add	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d809      	bhi.n	8003c4a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	699a      	ldr	r2, [r3, #24]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d203      	bcs.n	8003c4a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1be      	bne.n	8003bc8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	695a      	ldr	r2, [r3, #20]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d811      	bhi.n	8003c7a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	f003 030f 	and.w	r3, r3, #15
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	6939      	ldr	r1, [r7, #16]
 8003c72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c76:	4013      	ands	r3, r2
 8003c78:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3720      	adds	r7, #32
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	333c      	adds	r3, #60	; 0x3c
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	f040 80a0 	bne.w	8003dfc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d015      	beq.n	8003cf2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4a72      	ldr	r2, [pc, #456]	; (8003e94 <PCD_EP_OutXfrComplete_int+0x210>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	f240 80dd 	bls.w	8003e8a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 80d7 	beq.w	8003e8a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	015a      	lsls	r2, r3, #5
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce8:	461a      	mov	r2, r3
 8003cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cee:	6093      	str	r3, [r2, #8]
 8003cf0:	e0cb      	b.n	8003e8a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	f003 0320 	and.w	r3, r3, #32
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d009      	beq.n	8003d10 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	015a      	lsls	r2, r3, #5
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	4413      	add	r3, r2
 8003d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d08:	461a      	mov	r2, r3
 8003d0a:	2320      	movs	r3, #32
 8003d0c:	6093      	str	r3, [r2, #8]
 8003d0e:	e0bc      	b.n	8003e8a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f040 80b7 	bne.w	8003e8a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4a5d      	ldr	r2, [pc, #372]	; (8003e94 <PCD_EP_OutXfrComplete_int+0x210>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d90f      	bls.n	8003d44 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	015a      	lsls	r2, r3, #5
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d40:	6093      	str	r3, [r2, #8]
 8003d42:	e0a2      	b.n	8003e8a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	1a9b      	subs	r3, r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003d56:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	0159      	lsls	r1, r3, #5
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	440b      	add	r3, r1
 8003d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003d6a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	4613      	mov	r3, r2
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	1a9b      	subs	r3, r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4403      	add	r3, r0
 8003d7a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003d7e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	4613      	mov	r3, r2
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	1a9b      	subs	r3, r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d92:	6819      	ldr	r1, [r3, #0]
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	1a9b      	subs	r3, r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4403      	add	r3, r0
 8003da2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4419      	add	r1, r3
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	4613      	mov	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	1a9b      	subs	r3, r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	4403      	add	r3, r0
 8003db8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003dbc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d114      	bne.n	8003dee <PCD_EP_OutXfrComplete_int+0x16a>
 8003dc4:	6879      	ldr	r1, [r7, #4]
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	1a9b      	subs	r3, r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d108      	bne.n	8003dee <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6818      	ldr	r0, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003de6:	461a      	mov	r2, r3
 8003de8:	2101      	movs	r1, #1
 8003dea:	f004 fcbb 	bl	8008764 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	4619      	mov	r1, r3
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f007 f9b5 	bl	800b164 <HAL_PCD_DataOutStageCallback>
 8003dfa:	e046      	b.n	8003e8a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4a26      	ldr	r2, [pc, #152]	; (8003e98 <PCD_EP_OutXfrComplete_int+0x214>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d124      	bne.n	8003e4e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	015a      	lsls	r2, r3, #5
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e20:	6093      	str	r3, [r2, #8]
 8003e22:	e032      	b.n	8003e8a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	f003 0320 	and.w	r3, r3, #32
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d008      	beq.n	8003e40 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	2320      	movs	r3, #32
 8003e3e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	4619      	mov	r1, r3
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f007 f98c 	bl	800b164 <HAL_PCD_DataOutStageCallback>
 8003e4c:	e01d      	b.n	8003e8a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d114      	bne.n	8003e7e <PCD_EP_OutXfrComplete_int+0x1fa>
 8003e54:	6879      	ldr	r1, [r7, #4]
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d108      	bne.n	8003e7e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6818      	ldr	r0, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e76:	461a      	mov	r2, r3
 8003e78:	2100      	movs	r1, #0
 8003e7a:	f004 fc73 	bl	8008764 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	4619      	mov	r1, r3
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f007 f96d 	bl	800b164 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3718      	adds	r7, #24
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	4f54300a 	.word	0x4f54300a
 8003e98:	4f54310a 	.word	0x4f54310a

08003e9c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	333c      	adds	r3, #60	; 0x3c
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4a15      	ldr	r2, [pc, #84]	; (8003f24 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d90e      	bls.n	8003ef0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d009      	beq.n	8003ef0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee8:	461a      	mov	r2, r3
 8003eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f007 f925 	bl	800b140 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4a0a      	ldr	r2, [pc, #40]	; (8003f24 <PCD_EP_OutSetupPacket_int+0x88>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d90c      	bls.n	8003f18 <PCD_EP_OutSetupPacket_int+0x7c>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d108      	bne.n	8003f18 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6818      	ldr	r0, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f10:	461a      	mov	r2, r3
 8003f12:	2101      	movs	r1, #1
 8003f14:	f004 fc26 	bl	8008764 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3718      	adds	r7, #24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	4f54300a 	.word	0x4f54300a

08003f28 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	460b      	mov	r3, r1
 8003f32:	70fb      	strb	r3, [r7, #3]
 8003f34:	4613      	mov	r3, r2
 8003f36:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f40:	78fb      	ldrb	r3, [r7, #3]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d107      	bne.n	8003f56 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f46:	883b      	ldrh	r3, [r7, #0]
 8003f48:	0419      	lsls	r1, r3, #16
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	629a      	str	r2, [r3, #40]	; 0x28
 8003f54:	e028      	b.n	8003fa8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5c:	0c1b      	lsrs	r3, r3, #16
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	4413      	add	r3, r2
 8003f62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f64:	2300      	movs	r3, #0
 8003f66:	73fb      	strb	r3, [r7, #15]
 8003f68:	e00d      	b.n	8003f86 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	7bfb      	ldrb	r3, [r7, #15]
 8003f70:	3340      	adds	r3, #64	; 0x40
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	0c1b      	lsrs	r3, r3, #16
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
 8003f82:	3301      	adds	r3, #1
 8003f84:	73fb      	strb	r3, [r7, #15]
 8003f86:	7bfa      	ldrb	r2, [r7, #15]
 8003f88:	78fb      	ldrb	r3, [r7, #3]
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d3ec      	bcc.n	8003f6a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f90:	883b      	ldrh	r3, [r7, #0]
 8003f92:	0418      	lsls	r0, r3, #16
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6819      	ldr	r1, [r3, #0]
 8003f98:	78fb      	ldrb	r3, [r7, #3]
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	4302      	orrs	r2, r0
 8003fa0:	3340      	adds	r3, #64	; 0x40
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	887a      	ldrh	r2, [r7, #2]
 8003fc8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e262      	b.n	80044c8 <HAL_RCC_OscConfig+0x4d8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d075      	beq.n	80040fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800400e:	4ba3      	ldr	r3, [pc, #652]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 030c 	and.w	r3, r3, #12
 8004016:	2b04      	cmp	r3, #4
 8004018:	d00c      	beq.n	8004034 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800401a:	4ba0      	ldr	r3, [pc, #640]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004022:	2b08      	cmp	r3, #8
 8004024:	d112      	bne.n	800404c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004026:	4b9d      	ldr	r3, [pc, #628]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800402e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004032:	d10b      	bne.n	800404c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004034:	4b99      	ldr	r3, [pc, #612]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d05b      	beq.n	80040f8 <HAL_RCC_OscConfig+0x108>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d157      	bne.n	80040f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e23d      	b.n	80044c8 <HAL_RCC_OscConfig+0x4d8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004054:	d106      	bne.n	8004064 <HAL_RCC_OscConfig+0x74>
 8004056:	4b91      	ldr	r3, [pc, #580]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a90      	ldr	r2, [pc, #576]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 800405c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	e01d      	b.n	80040a0 <HAL_RCC_OscConfig+0xb0>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800406c:	d10c      	bne.n	8004088 <HAL_RCC_OscConfig+0x98>
 800406e:	4b8b      	ldr	r3, [pc, #556]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a8a      	ldr	r2, [pc, #552]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004078:	6013      	str	r3, [r2, #0]
 800407a:	4b88      	ldr	r3, [pc, #544]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a87      	ldr	r2, [pc, #540]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	e00b      	b.n	80040a0 <HAL_RCC_OscConfig+0xb0>
 8004088:	4b84      	ldr	r3, [pc, #528]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a83      	ldr	r2, [pc, #524]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 800408e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004092:	6013      	str	r3, [r2, #0]
 8004094:	4b81      	ldr	r3, [pc, #516]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a80      	ldr	r2, [pc, #512]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 800409a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800409e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d013      	beq.n	80040d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a8:	f7fc fb0c 	bl	80006c4 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040b0:	f7fc fb08 	bl	80006c4 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b64      	cmp	r3, #100	; 0x64
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e202      	b.n	80044c8 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040c2:	4b76      	ldr	r3, [pc, #472]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0f0      	beq.n	80040b0 <HAL_RCC_OscConfig+0xc0>
 80040ce:	e014      	b.n	80040fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d0:	f7fc faf8 	bl	80006c4 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040d8:	f7fc faf4 	bl	80006c4 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b64      	cmp	r3, #100	; 0x64
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e1ee      	b.n	80044c8 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ea:	4b6c      	ldr	r3, [pc, #432]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f0      	bne.n	80040d8 <HAL_RCC_OscConfig+0xe8>
 80040f6:	e000      	b.n	80040fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d063      	beq.n	80041ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004106:	4b65      	ldr	r3, [pc, #404]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 030c 	and.w	r3, r3, #12
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00b      	beq.n	800412a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004112:	4b62      	ldr	r3, [pc, #392]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800411a:	2b08      	cmp	r3, #8
 800411c:	d11c      	bne.n	8004158 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800411e:	4b5f      	ldr	r3, [pc, #380]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d116      	bne.n	8004158 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800412a:	4b5c      	ldr	r3, [pc, #368]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d005      	beq.n	8004142 <HAL_RCC_OscConfig+0x152>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d001      	beq.n	8004142 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e1c2      	b.n	80044c8 <HAL_RCC_OscConfig+0x4d8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004142:	4b56      	ldr	r3, [pc, #344]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	4952      	ldr	r1, [pc, #328]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004152:	4313      	orrs	r3, r2
 8004154:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004156:	e03a      	b.n	80041ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d020      	beq.n	80041a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004160:	4b4f      	ldr	r3, [pc, #316]	; (80042a0 <HAL_RCC_OscConfig+0x2b0>)
 8004162:	2201      	movs	r2, #1
 8004164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004166:	f7fc faad 	bl	80006c4 <HAL_GetTick>
 800416a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800416c:	e008      	b.n	8004180 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800416e:	f7fc faa9 	bl	80006c4 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e1a3      	b.n	80044c8 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004180:	4b46      	ldr	r3, [pc, #280]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0f0      	beq.n	800416e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800418c:	4b43      	ldr	r3, [pc, #268]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	4940      	ldr	r1, [pc, #256]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 800419c:	4313      	orrs	r3, r2
 800419e:	600b      	str	r3, [r1, #0]
 80041a0:	e015      	b.n	80041ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041a2:	4b3f      	ldr	r3, [pc, #252]	; (80042a0 <HAL_RCC_OscConfig+0x2b0>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a8:	f7fc fa8c 	bl	80006c4 <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041b0:	f7fc fa88 	bl	80006c4 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e182      	b.n	80044c8 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041c2:	4b36      	ldr	r3, [pc, #216]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1f0      	bne.n	80041b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d030      	beq.n	800423c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d016      	beq.n	8004210 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041e2:	4b30      	ldr	r3, [pc, #192]	; (80042a4 <HAL_RCC_OscConfig+0x2b4>)
 80041e4:	2201      	movs	r2, #1
 80041e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e8:	f7fc fa6c 	bl	80006c4 <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041f0:	f7fc fa68 	bl	80006c4 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e162      	b.n	80044c8 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004202:	4b26      	ldr	r3, [pc, #152]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d0f0      	beq.n	80041f0 <HAL_RCC_OscConfig+0x200>
 800420e:	e015      	b.n	800423c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004210:	4b24      	ldr	r3, [pc, #144]	; (80042a4 <HAL_RCC_OscConfig+0x2b4>)
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004216:	f7fc fa55 	bl	80006c4 <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800421e:	f7fc fa51 	bl	80006c4 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e14b      	b.n	80044c8 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004230:	4b1a      	ldr	r3, [pc, #104]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1f0      	bne.n	800421e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 809e 	beq.w	8004386 <HAL_RCC_OscConfig+0x396>
  {
    FlagStatus       pwrclkchanged = RESET;
 800424a:	2300      	movs	r3, #0
 800424c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800424e:	4b13      	ldr	r3, [pc, #76]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10f      	bne.n	800427a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800425a:	2300      	movs	r3, #0
 800425c:	60bb      	str	r3, [r7, #8]
 800425e:	4b0f      	ldr	r3, [pc, #60]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	4a0e      	ldr	r2, [pc, #56]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 8004264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004268:	6413      	str	r3, [r2, #64]	; 0x40
 800426a:	4b0c      	ldr	r3, [pc, #48]	; (800429c <HAL_RCC_OscConfig+0x2ac>)
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004272:	60bb      	str	r3, [r7, #8]
 8004274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004276:	2301      	movs	r3, #1
 8004278:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800427a:	4b0b      	ldr	r3, [pc, #44]	; (80042a8 <HAL_RCC_OscConfig+0x2b8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004282:	2b00      	cmp	r3, #0
 8004284:	d121      	bne.n	80042ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004286:	4b08      	ldr	r3, [pc, #32]	; (80042a8 <HAL_RCC_OscConfig+0x2b8>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a07      	ldr	r2, [pc, #28]	; (80042a8 <HAL_RCC_OscConfig+0x2b8>)
 800428c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004290:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004292:	f7fc fa17 	bl	80006c4 <HAL_GetTick>
 8004296:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004298:	e011      	b.n	80042be <HAL_RCC_OscConfig+0x2ce>
 800429a:	bf00      	nop
 800429c:	40023800 	.word	0x40023800
 80042a0:	42470000 	.word	0x42470000
 80042a4:	42470e80 	.word	0x42470e80
 80042a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ac:	f7fc fa0a 	bl	80006c4 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e104      	b.n	80044c8 <HAL_RCC_OscConfig+0x4d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042be:	4b84      	ldr	r3, [pc, #528]	; (80044d0 <HAL_RCC_OscConfig+0x4e0>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0f0      	beq.n	80042ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d106      	bne.n	80042e0 <HAL_RCC_OscConfig+0x2f0>
 80042d2:	4b80      	ldr	r3, [pc, #512]	; (80044d4 <HAL_RCC_OscConfig+0x4e4>)
 80042d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d6:	4a7f      	ldr	r2, [pc, #508]	; (80044d4 <HAL_RCC_OscConfig+0x4e4>)
 80042d8:	f043 0301 	orr.w	r3, r3, #1
 80042dc:	6713      	str	r3, [r2, #112]	; 0x70
 80042de:	e01c      	b.n	800431a <HAL_RCC_OscConfig+0x32a>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	2b05      	cmp	r3, #5
 80042e6:	d10c      	bne.n	8004302 <HAL_RCC_OscConfig+0x312>
 80042e8:	4b7a      	ldr	r3, [pc, #488]	; (80044d4 <HAL_RCC_OscConfig+0x4e4>)
 80042ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ec:	4a79      	ldr	r2, [pc, #484]	; (80044d4 <HAL_RCC_OscConfig+0x4e4>)
 80042ee:	f043 0304 	orr.w	r3, r3, #4
 80042f2:	6713      	str	r3, [r2, #112]	; 0x70
 80042f4:	4b77      	ldr	r3, [pc, #476]	; (80044d4 <HAL_RCC_OscConfig+0x4e4>)
 80042f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f8:	4a76      	ldr	r2, [pc, #472]	; (80044d4 <HAL_RCC_OscConfig+0x4e4>)
 80042fa:	f043 0301 	orr.w	r3, r3, #1
 80042fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004300:	e00b      	b.n	800431a <HAL_RCC_OscConfig+0x32a>
 8004302:	4b74      	ldr	r3, [pc, #464]	; (80044d4 <HAL_RCC_OscConfig+0x4e4>)
 8004304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004306:	4a73      	ldr	r2, [pc, #460]	; (80044d4 <HAL_RCC_OscConfig+0x4e4>)
 8004308:	f023 0301 	bic.w	r3, r3, #1
 800430c:	6713      	str	r3, [r2, #112]	; 0x70
 800430e:	4b71      	ldr	r3, [pc, #452]	; (80044d4 <HAL_RCC_OscConfig+0x4e4>)
 8004310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004312:	4a70      	ldr	r2, [pc, #448]	; (80044d4 <HAL_RCC_OscConfig+0x4e4>)
 8004314:	f023 0304 	bic.w	r3, r3, #4
 8004318:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d014      	beq.n	800434c <HAL_RCC_OscConfig+0x35c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004322:	f7fc f9cf 	bl	80006c4 <HAL_GetTick>
 8004326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004328:	e009      	b.n	800433e <HAL_RCC_OscConfig+0x34e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800432a:	f7fc f9cb 	bl	80006c4 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x34e>
        {
          return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e0c4      	b.n	80044c8 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800433e:	4b65      	ldr	r3, [pc, #404]	; (80044d4 <HAL_RCC_OscConfig+0x4e4>)
 8004340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0ef      	beq.n	800432a <HAL_RCC_OscConfig+0x33a>
 800434a:	e013      	b.n	8004374 <HAL_RCC_OscConfig+0x384>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800434c:	f7fc f9ba 	bl	80006c4 <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004352:	e009      	b.n	8004368 <HAL_RCC_OscConfig+0x378>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004354:	f7fc f9b6 	bl	80006c4 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x378>
        {
          return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e0af      	b.n	80044c8 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004368:	4b5a      	ldr	r3, [pc, #360]	; (80044d4 <HAL_RCC_OscConfig+0x4e4>)
 800436a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1ef      	bne.n	8004354 <HAL_RCC_OscConfig+0x364>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004374:	7dfb      	ldrb	r3, [r7, #23]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d105      	bne.n	8004386 <HAL_RCC_OscConfig+0x396>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800437a:	4b56      	ldr	r3, [pc, #344]	; (80044d4 <HAL_RCC_OscConfig+0x4e4>)
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	4a55      	ldr	r2, [pc, #340]	; (80044d4 <HAL_RCC_OscConfig+0x4e4>)
 8004380:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004384:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	2b00      	cmp	r3, #0
 800438c:	f000 809b 	beq.w	80044c6 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004390:	4b50      	ldr	r3, [pc, #320]	; (80044d4 <HAL_RCC_OscConfig+0x4e4>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 030c 	and.w	r3, r3, #12
 8004398:	2b08      	cmp	r3, #8
 800439a:	d05c      	beq.n	8004456 <HAL_RCC_OscConfig+0x466>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d141      	bne.n	8004428 <HAL_RCC_OscConfig+0x438>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043a4:	4b4c      	ldr	r3, [pc, #304]	; (80044d8 <HAL_RCC_OscConfig+0x4e8>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043aa:	f7fc f98b 	bl	80006c4 <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_OscConfig+0x3d4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b2:	f7fc f987 	bl	80006c4 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x3d4>
          {
            return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e081      	b.n	80044c8 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c4:	4b43      	ldr	r3, [pc, #268]	; (80044d4 <HAL_RCC_OscConfig+0x4e4>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1f0      	bne.n	80043b2 <HAL_RCC_OscConfig+0x3c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	69da      	ldr	r2, [r3, #28]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	431a      	orrs	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	019b      	lsls	r3, r3, #6
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e6:	085b      	lsrs	r3, r3, #1
 80043e8:	3b01      	subs	r3, #1
 80043ea:	041b      	lsls	r3, r3, #16
 80043ec:	431a      	orrs	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f2:	061b      	lsls	r3, r3, #24
 80043f4:	4937      	ldr	r1, [pc, #220]	; (80044d4 <HAL_RCC_OscConfig+0x4e4>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043fa:	4b37      	ldr	r3, [pc, #220]	; (80044d8 <HAL_RCC_OscConfig+0x4e8>)
 80043fc:	2201      	movs	r2, #1
 80043fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004400:	f7fc f960 	bl	80006c4 <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x42a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004408:	f7fc f95c 	bl	80006c4 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e056      	b.n	80044c8 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800441a:	4b2e      	ldr	r3, [pc, #184]	; (80044d4 <HAL_RCC_OscConfig+0x4e4>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0f0      	beq.n	8004408 <HAL_RCC_OscConfig+0x418>
 8004426:	e04e      	b.n	80044c6 <HAL_RCC_OscConfig+0x4d6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004428:	4b2b      	ldr	r3, [pc, #172]	; (80044d8 <HAL_RCC_OscConfig+0x4e8>)
 800442a:	2200      	movs	r2, #0
 800442c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800442e:	f7fc f949 	bl	80006c4 <HAL_GetTick>
 8004432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004434:	e008      	b.n	8004448 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004436:	f7fc f945 	bl	80006c4 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d901      	bls.n	8004448 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e03f      	b.n	80044c8 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004448:	4b22      	ldr	r3, [pc, #136]	; (80044d4 <HAL_RCC_OscConfig+0x4e4>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1f0      	bne.n	8004436 <HAL_RCC_OscConfig+0x446>
 8004454:	e037      	b.n	80044c6 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d101      	bne.n	8004462 <HAL_RCC_OscConfig+0x472>
      {
        return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e032      	b.n	80044c8 <HAL_RCC_OscConfig+0x4d8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004462:	4b1c      	ldr	r3, [pc, #112]	; (80044d4 <HAL_RCC_OscConfig+0x4e4>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d028      	beq.n	80044c2 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800447a:	429a      	cmp	r2, r3
 800447c:	d121      	bne.n	80044c2 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004488:	429a      	cmp	r2, r3
 800448a:	d11a      	bne.n	80044c2 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004492:	4013      	ands	r3, r2
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004498:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800449a:	4293      	cmp	r3, r2
 800449c:	d111      	bne.n	80044c2 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a8:	085b      	lsrs	r3, r3, #1
 80044aa:	3b01      	subs	r3, #1
 80044ac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d107      	bne.n	80044c2 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044be:	429a      	cmp	r2, r3
 80044c0:	d001      	beq.n	80044c6 <HAL_RCC_OscConfig+0x4d6>
#endif
        {
          return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <HAL_RCC_OscConfig+0x4d8>
        }
      }
    }
  }
  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40007000 	.word	0x40007000
 80044d4:	40023800 	.word	0x40023800
 80044d8:	42470060 	.word	0x42470060

080044dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e0cc      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044f0:	4b68      	ldr	r3, [pc, #416]	; (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d90c      	bls.n	8004518 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044fe:	4b65      	ldr	r3, [pc, #404]	; (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004506:	4b63      	ldr	r3, [pc, #396]	; (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d001      	beq.n	8004518 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e0b8      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d020      	beq.n	8004566 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	d005      	beq.n	800453c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004530:	4b59      	ldr	r3, [pc, #356]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	4a58      	ldr	r2, [pc, #352]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004536:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800453a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0308 	and.w	r3, r3, #8
 8004544:	2b00      	cmp	r3, #0
 8004546:	d005      	beq.n	8004554 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004548:	4b53      	ldr	r3, [pc, #332]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	4a52      	ldr	r2, [pc, #328]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800454e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004552:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004554:	4b50      	ldr	r3, [pc, #320]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	494d      	ldr	r1, [pc, #308]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004562:	4313      	orrs	r3, r2
 8004564:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d044      	beq.n	80045fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d107      	bne.n	800458a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457a:	4b47      	ldr	r3, [pc, #284]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d119      	bne.n	80045ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e07f      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d003      	beq.n	800459a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004596:	2b03      	cmp	r3, #3
 8004598:	d107      	bne.n	80045aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800459a:	4b3f      	ldr	r3, [pc, #252]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d109      	bne.n	80045ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e06f      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045aa:	4b3b      	ldr	r3, [pc, #236]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e067      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045ba:	4b37      	ldr	r3, [pc, #220]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f023 0203 	bic.w	r2, r3, #3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	4934      	ldr	r1, [pc, #208]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045cc:	f7fc f87a 	bl	80006c4 <HAL_GetTick>
 80045d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d2:	e00a      	b.n	80045ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045d4:	f7fc f876 	bl	80006c4 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e04f      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ea:	4b2b      	ldr	r3, [pc, #172]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 020c 	and.w	r2, r3, #12
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d1eb      	bne.n	80045d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045fc:	4b25      	ldr	r3, [pc, #148]	; (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d20c      	bcs.n	8004624 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800460a:	4b22      	ldr	r3, [pc, #136]	; (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004612:	4b20      	ldr	r3, [pc, #128]	; (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	429a      	cmp	r2, r3
 800461e:	d001      	beq.n	8004624 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e032      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	d008      	beq.n	8004642 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004630:	4b19      	ldr	r3, [pc, #100]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	4916      	ldr	r1, [pc, #88]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800463e:	4313      	orrs	r3, r2
 8004640:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b00      	cmp	r3, #0
 800464c:	d009      	beq.n	8004662 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800464e:	4b12      	ldr	r3, [pc, #72]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	490e      	ldr	r1, [pc, #56]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800465e:	4313      	orrs	r3, r2
 8004660:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004662:	f000 f82d 	bl	80046c0 <HAL_RCC_GetSysClockFreq>
 8004666:	4602      	mov	r2, r0
 8004668:	4b0b      	ldr	r3, [pc, #44]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	091b      	lsrs	r3, r3, #4
 800466e:	f003 030f 	and.w	r3, r3, #15
 8004672:	490a      	ldr	r1, [pc, #40]	; (800469c <HAL_RCC_ClockConfig+0x1c0>)
 8004674:	5ccb      	ldrb	r3, [r1, r3]
 8004676:	fa22 f303 	lsr.w	r3, r2, r3
 800467a:	4a09      	ldr	r2, [pc, #36]	; (80046a0 <HAL_RCC_ClockConfig+0x1c4>)
 800467c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800467e:	4b09      	ldr	r3, [pc, #36]	; (80046a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4618      	mov	r0, r3
 8004684:	f7fb ffda 	bl	800063c <HAL_InitTick>

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	40023c00 	.word	0x40023c00
 8004698:	40023800 	.word	0x40023800
 800469c:	0800b9e0 	.word	0x0800b9e0
 80046a0:	20000118 	.word	0x20000118
 80046a4:	20000000 	.word	0x20000000

080046a8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80046ac:	4b03      	ldr	r3, [pc, #12]	; (80046bc <HAL_RCC_EnableCSS+0x14>)
 80046ae:	2201      	movs	r2, #1
 80046b0:	601a      	str	r2, [r3, #0]
}
 80046b2:	bf00      	nop
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	4247004c 	.word	0x4247004c

080046c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046c0:	b5b0      	push	{r4, r5, r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046c6:	2100      	movs	r1, #0
 80046c8:	6079      	str	r1, [r7, #4]
 80046ca:	2100      	movs	r1, #0
 80046cc:	60f9      	str	r1, [r7, #12]
 80046ce:	2100      	movs	r1, #0
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80046d2:	2100      	movs	r1, #0
 80046d4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046d6:	4952      	ldr	r1, [pc, #328]	; (8004820 <HAL_RCC_GetSysClockFreq+0x160>)
 80046d8:	6889      	ldr	r1, [r1, #8]
 80046da:	f001 010c 	and.w	r1, r1, #12
 80046de:	2908      	cmp	r1, #8
 80046e0:	d00d      	beq.n	80046fe <HAL_RCC_GetSysClockFreq+0x3e>
 80046e2:	2908      	cmp	r1, #8
 80046e4:	f200 8094 	bhi.w	8004810 <HAL_RCC_GetSysClockFreq+0x150>
 80046e8:	2900      	cmp	r1, #0
 80046ea:	d002      	beq.n	80046f2 <HAL_RCC_GetSysClockFreq+0x32>
 80046ec:	2904      	cmp	r1, #4
 80046ee:	d003      	beq.n	80046f8 <HAL_RCC_GetSysClockFreq+0x38>
 80046f0:	e08e      	b.n	8004810 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046f2:	4b4c      	ldr	r3, [pc, #304]	; (8004824 <HAL_RCC_GetSysClockFreq+0x164>)
 80046f4:	60bb      	str	r3, [r7, #8]
       break;
 80046f6:	e08e      	b.n	8004816 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046f8:	4b4b      	ldr	r3, [pc, #300]	; (8004828 <HAL_RCC_GetSysClockFreq+0x168>)
 80046fa:	60bb      	str	r3, [r7, #8]
      break;
 80046fc:	e08b      	b.n	8004816 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046fe:	4948      	ldr	r1, [pc, #288]	; (8004820 <HAL_RCC_GetSysClockFreq+0x160>)
 8004700:	6849      	ldr	r1, [r1, #4]
 8004702:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004706:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004708:	4945      	ldr	r1, [pc, #276]	; (8004820 <HAL_RCC_GetSysClockFreq+0x160>)
 800470a:	6849      	ldr	r1, [r1, #4]
 800470c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004710:	2900      	cmp	r1, #0
 8004712:	d024      	beq.n	800475e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004714:	4942      	ldr	r1, [pc, #264]	; (8004820 <HAL_RCC_GetSysClockFreq+0x160>)
 8004716:	6849      	ldr	r1, [r1, #4]
 8004718:	0989      	lsrs	r1, r1, #6
 800471a:	4608      	mov	r0, r1
 800471c:	f04f 0100 	mov.w	r1, #0
 8004720:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004724:	f04f 0500 	mov.w	r5, #0
 8004728:	ea00 0204 	and.w	r2, r0, r4
 800472c:	ea01 0305 	and.w	r3, r1, r5
 8004730:	493d      	ldr	r1, [pc, #244]	; (8004828 <HAL_RCC_GetSysClockFreq+0x168>)
 8004732:	fb01 f003 	mul.w	r0, r1, r3
 8004736:	2100      	movs	r1, #0
 8004738:	fb01 f102 	mul.w	r1, r1, r2
 800473c:	1844      	adds	r4, r0, r1
 800473e:	493a      	ldr	r1, [pc, #232]	; (8004828 <HAL_RCC_GetSysClockFreq+0x168>)
 8004740:	fba2 0101 	umull	r0, r1, r2, r1
 8004744:	1863      	adds	r3, r4, r1
 8004746:	4619      	mov	r1, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	461a      	mov	r2, r3
 800474c:	f04f 0300 	mov.w	r3, #0
 8004750:	f7fb fd42 	bl	80001d8 <__aeabi_uldivmod>
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	4613      	mov	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	e04a      	b.n	80047f4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800475e:	4b30      	ldr	r3, [pc, #192]	; (8004820 <HAL_RCC_GetSysClockFreq+0x160>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	099b      	lsrs	r3, r3, #6
 8004764:	461a      	mov	r2, r3
 8004766:	f04f 0300 	mov.w	r3, #0
 800476a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800476e:	f04f 0100 	mov.w	r1, #0
 8004772:	ea02 0400 	and.w	r4, r2, r0
 8004776:	ea03 0501 	and.w	r5, r3, r1
 800477a:	4620      	mov	r0, r4
 800477c:	4629      	mov	r1, r5
 800477e:	f04f 0200 	mov.w	r2, #0
 8004782:	f04f 0300 	mov.w	r3, #0
 8004786:	014b      	lsls	r3, r1, #5
 8004788:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800478c:	0142      	lsls	r2, r0, #5
 800478e:	4610      	mov	r0, r2
 8004790:	4619      	mov	r1, r3
 8004792:	1b00      	subs	r0, r0, r4
 8004794:	eb61 0105 	sbc.w	r1, r1, r5
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	018b      	lsls	r3, r1, #6
 80047a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80047a6:	0182      	lsls	r2, r0, #6
 80047a8:	1a12      	subs	r2, r2, r0
 80047aa:	eb63 0301 	sbc.w	r3, r3, r1
 80047ae:	f04f 0000 	mov.w	r0, #0
 80047b2:	f04f 0100 	mov.w	r1, #0
 80047b6:	00d9      	lsls	r1, r3, #3
 80047b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047bc:	00d0      	lsls	r0, r2, #3
 80047be:	4602      	mov	r2, r0
 80047c0:	460b      	mov	r3, r1
 80047c2:	1912      	adds	r2, r2, r4
 80047c4:	eb45 0303 	adc.w	r3, r5, r3
 80047c8:	f04f 0000 	mov.w	r0, #0
 80047cc:	f04f 0100 	mov.w	r1, #0
 80047d0:	0299      	lsls	r1, r3, #10
 80047d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80047d6:	0290      	lsls	r0, r2, #10
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	4610      	mov	r0, r2
 80047de:	4619      	mov	r1, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	461a      	mov	r2, r3
 80047e4:	f04f 0300 	mov.w	r3, #0
 80047e8:	f7fb fcf6 	bl	80001d8 <__aeabi_uldivmod>
 80047ec:	4602      	mov	r2, r0
 80047ee:	460b      	mov	r3, r1
 80047f0:	4613      	mov	r3, r2
 80047f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047f4:	4b0a      	ldr	r3, [pc, #40]	; (8004820 <HAL_RCC_GetSysClockFreq+0x160>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	0c1b      	lsrs	r3, r3, #16
 80047fa:	f003 0303 	and.w	r3, r3, #3
 80047fe:	3301      	adds	r3, #1
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	fbb2 f3f3 	udiv	r3, r2, r3
 800480c:	60bb      	str	r3, [r7, #8]
      break;
 800480e:	e002      	b.n	8004816 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004810:	4b04      	ldr	r3, [pc, #16]	; (8004824 <HAL_RCC_GetSysClockFreq+0x164>)
 8004812:	60bb      	str	r3, [r7, #8]
      break;
 8004814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004816:	68bb      	ldr	r3, [r7, #8]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bdb0      	pop	{r4, r5, r7, pc}
 8004820:	40023800 	.word	0x40023800
 8004824:	00f42400 	.word	0x00f42400
 8004828:	016e3600 	.word	0x016e3600

0800482c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004830:	4b03      	ldr	r3, [pc, #12]	; (8004840 <HAL_RCC_GetHCLKFreq+0x14>)
 8004832:	681b      	ldr	r3, [r3, #0]
}
 8004834:	4618      	mov	r0, r3
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	20000118 	.word	0x20000118

08004844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004848:	f7ff fff0 	bl	800482c <HAL_RCC_GetHCLKFreq>
 800484c:	4602      	mov	r2, r0
 800484e:	4b05      	ldr	r3, [pc, #20]	; (8004864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	0a9b      	lsrs	r3, r3, #10
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	4903      	ldr	r1, [pc, #12]	; (8004868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800485a:	5ccb      	ldrb	r3, [r1, r3]
 800485c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004860:	4618      	mov	r0, r3
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40023800 	.word	0x40023800
 8004868:	0800b9f0 	.word	0x0800b9f0

0800486c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004870:	f7ff ffdc 	bl	800482c <HAL_RCC_GetHCLKFreq>
 8004874:	4602      	mov	r2, r0
 8004876:	4b05      	ldr	r3, [pc, #20]	; (800488c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	0b5b      	lsrs	r3, r3, #13
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	4903      	ldr	r1, [pc, #12]	; (8004890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004882:	5ccb      	ldrb	r3, [r1, r3]
 8004884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004888:	4618      	mov	r0, r3
 800488a:	bd80      	pop	{r7, pc}
 800488c:	40023800 	.word	0x40023800
 8004890:	0800b9f0 	.word	0x0800b9f0

08004894 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004898:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <HAL_RCC_NMI_IRQHandler+0x20>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a0:	2b80      	cmp	r3, #128	; 0x80
 80048a2:	d104      	bne.n	80048ae <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80048a4:	f000 f80a 	bl	80048bc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80048a8:	4b03      	ldr	r3, [pc, #12]	; (80048b8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80048aa:	2280      	movs	r2, #128	; 0x80
 80048ac:	701a      	strb	r2, [r3, #0]
  }
}
 80048ae:	bf00      	nop
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	40023800 	.word	0x40023800
 80048b8:	4002380e 	.word	0x4002380e

080048bc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80048c0:	bf00      	nop
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
	...

080048cc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d105      	bne.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d038      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048f4:	4b68      	ldr	r3, [pc, #416]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048fa:	f7fb fee3 	bl	80006c4 <HAL_GetTick>
 80048fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004900:	e008      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004902:	f7fb fedf 	bl	80006c4 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d901      	bls.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e0bc      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004914:	4b61      	ldr	r3, [pc, #388]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1f0      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	019b      	lsls	r3, r3, #6
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	071b      	lsls	r3, r3, #28
 8004932:	495a      	ldr	r1, [pc, #360]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004934:	4313      	orrs	r3, r2
 8004936:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800493a:	4b57      	ldr	r3, [pc, #348]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800493c:	2201      	movs	r2, #1
 800493e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004940:	f7fb fec0 	bl	80006c4 <HAL_GetTick>
 8004944:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004946:	e008      	b.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004948:	f7fb febc 	bl	80006c4 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e099      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800495a:	4b50      	ldr	r3, [pc, #320]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d0f0      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 8082 	beq.w	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004974:	2300      	movs	r3, #0
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	4b48      	ldr	r3, [pc, #288]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	4a47      	ldr	r2, [pc, #284]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800497e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004982:	6413      	str	r3, [r2, #64]	; 0x40
 8004984:	4b45      	ldr	r3, [pc, #276]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004990:	4b43      	ldr	r3, [pc, #268]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a42      	ldr	r2, [pc, #264]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800499a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800499c:	f7fb fe92 	bl	80006c4 <HAL_GetTick>
 80049a0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80049a2:	e008      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80049a4:	f7fb fe8e 	bl	80006c4 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e06b      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80049b6:	4b3a      	ldr	r3, [pc, #232]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0f0      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049c2:	4b36      	ldr	r3, [pc, #216]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ca:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d02e      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x164>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d027      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049e0:	4b2e      	ldr	r3, [pc, #184]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049e8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049ea:	4b2e      	ldr	r3, [pc, #184]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80049ec:	2201      	movs	r2, #1
 80049ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049f0:	4b2c      	ldr	r3, [pc, #176]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80049f6:	4a29      	ldr	r2, [pc, #164]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80049fc:	4b27      	ldr	r3, [pc, #156]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d113      	bne.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004a08:	f7fb fe5c 	bl	80006c4 <HAL_GetTick>
 8004a0c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a0e:	e009      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x158>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a10:	f7fb fe58 	bl	80006c4 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x158>
          {
            return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e034      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a24:	4b1d      	ldr	r3, [pc, #116]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d0ef      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a3c:	d10d      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8004a3e:	4b17      	ldr	r3, [pc, #92]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a52:	4912      	ldr	r1, [pc, #72]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	608b      	str	r3, [r1, #8]
 8004a58:	e005      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8004a5a:	4b10      	ldr	r3, [pc, #64]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	4a0f      	ldr	r2, [pc, #60]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a60:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004a64:	6093      	str	r3, [r2, #8]
 8004a66:	4b0d      	ldr	r3, [pc, #52]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a72:	490a      	ldr	r1, [pc, #40]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0308 	and.w	r3, r3, #8
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d003      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	7d1a      	ldrb	r2, [r3, #20]
 8004a88:	4b07      	ldr	r3, [pc, #28]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004a8a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3718      	adds	r7, #24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	42470068 	.word	0x42470068
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	40007000 	.word	0x40007000
 8004aa4:	42470e40 	.word	0x42470e40
 8004aa8:	424711e0 	.word	0x424711e0

08004aac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e083      	b.n	8004bc6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	7f5b      	ldrb	r3, [r3, #29]
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d105      	bne.n	8004ad4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f006 f876 	bl	800abc0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	22ca      	movs	r2, #202	; 0xca
 8004ae0:	625a      	str	r2, [r3, #36]	; 0x24
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2253      	movs	r2, #83	; 0x53
 8004ae8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f897 	bl	8004c1e <RTC_EnterInitMode>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d008      	beq.n	8004b08 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	22ff      	movs	r2, #255	; 0xff
 8004afc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2204      	movs	r2, #4
 8004b02:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e05e      	b.n	8004bc6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6812      	ldr	r2, [r2, #0]
 8004b12:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004b16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b1a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6899      	ldr	r1, [r3, #8]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	68d2      	ldr	r2, [r2, #12]
 8004b42:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6919      	ldr	r1, [r3, #16]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	041a      	lsls	r2, r3, #16
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b66:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 0320 	and.w	r3, r3, #32
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10e      	bne.n	8004b94 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f829 	bl	8004bce <HAL_RTC_WaitForSynchro>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d008      	beq.n	8004b94 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	22ff      	movs	r2, #255	; 0xff
 8004b88:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2204      	movs	r2, #4
 8004b8e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e018      	b.n	8004bc6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ba2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	699a      	ldr	r2, [r3, #24]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	22ff      	movs	r2, #255	; 0xff
 8004bbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
  }
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b084      	sub	sp, #16
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68da      	ldr	r2, [r3, #12]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004be8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004bea:	f7fb fd6b 	bl	80006c4 <HAL_GetTick>
 8004bee:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004bf0:	e009      	b.n	8004c06 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004bf2:	f7fb fd67 	bl	80006c4 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c00:	d901      	bls.n	8004c06 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e007      	b.n	8004c16 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f003 0320 	and.w	r3, r3, #32
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d0ee      	beq.n	8004bf2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b084      	sub	sp, #16
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d119      	bne.n	8004c6c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c40:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c42:	f7fb fd3f 	bl	80006c4 <HAL_GetTick>
 8004c46:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004c48:	e009      	b.n	8004c5e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004c4a:	f7fb fd3b 	bl	80006c4 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c58:	d901      	bls.n	8004c5e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e007      	b.n	8004c6e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0ee      	beq.n	8004c4a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b082      	sub	sp, #8
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e022      	b.n	8004cce <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d105      	bne.n	8004ca0 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f005 ffbc 	bl	800ac18 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2203      	movs	r2, #3
 8004ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 f815 	bl	8004cd8 <HAL_SD_InitCard>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e00a      	b.n	8004cce <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
	...

08004cd8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004cd8:	b5b0      	push	{r4, r5, r7, lr}
 8004cda:	b08e      	sub	sp, #56	; 0x38
 8004cdc:	af04      	add	r7, sp, #16
 8004cde:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004cec:	2300      	movs	r3, #0
 8004cee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004cf4:	2376      	movs	r3, #118	; 0x76
 8004cf6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681d      	ldr	r5, [r3, #0]
 8004cfc:	466c      	mov	r4, sp
 8004cfe:	f107 0314 	add.w	r3, r7, #20
 8004d02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004d06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004d0a:	f107 0308 	add.w	r3, r7, #8
 8004d0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d10:	4628      	mov	r0, r5
 8004d12:	f001 fda5 	bl	8006860 <SDIO_Init>
 8004d16:	4603      	mov	r3, r0
 8004d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e04c      	b.n	8004dc2 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004d28:	4b28      	ldr	r3, [pc, #160]	; (8004dcc <HAL_SD_InitCard+0xf4>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f001 fdcc 	bl	80068d0 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004d38:	4b24      	ldr	r3, [pc, #144]	; (8004dcc <HAL_SD_InitCard+0xf4>)
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 fb52 	bl	80053e8 <SD_PowerON>
 8004d44:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d46:	6a3b      	ldr	r3, [r7, #32]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00b      	beq.n	8004d64 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d58:	6a3b      	ldr	r3, [r7, #32]
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e02e      	b.n	8004dc2 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 fa73 	bl	8005250 <SD_InitCard>
 8004d6a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00b      	beq.n	8004d8a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d7e:	6a3b      	ldr	r3, [r7, #32]
 8004d80:	431a      	orrs	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e01b      	b.n	8004dc2 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d92:	4618      	mov	r0, r3
 8004d94:	f001 fe2f 	bl	80069f6 <SDMMC_CmdBlockLength>
 8004d98:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00f      	beq.n	8004dc0 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a0a      	ldr	r2, [pc, #40]	; (8004dd0 <HAL_SD_InitCard+0xf8>)
 8004da6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e000      	b.n	8004dc2 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3728      	adds	r7, #40	; 0x28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bdb0      	pop	{r4, r5, r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	422580a0 	.word	0x422580a0
 8004dd0:	004005ff 	.word	0x004005ff

08004dd4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004de2:	0f9b      	lsrs	r3, r3, #30
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dee:	0e9b      	lsrs	r3, r3, #26
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	f003 030f 	and.w	r3, r3, #15
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e00:	0e1b      	lsrs	r3, r3, #24
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	f003 0303 	and.w	r3, r3, #3
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e12:	0c1b      	lsrs	r3, r3, #16
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e1e:	0a1b      	lsrs	r3, r3, #8
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e2a:	b2da      	uxtb	r2, r3
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e34:	0d1b      	lsrs	r3, r3, #20
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e40:	0c1b      	lsrs	r3, r3, #16
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	f003 030f 	and.w	r3, r3, #15
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e52:	0bdb      	lsrs	r3, r3, #15
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	b2da      	uxtb	r2, r3
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e64:	0b9b      	lsrs	r3, r3, #14
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	b2da      	uxtb	r2, r3
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e76:	0b5b      	lsrs	r3, r3, #13
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	b2da      	uxtb	r2, r3
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e88:	0b1b      	lsrs	r3, r3, #12
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d163      	bne.n	8004f6c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ea8:	009a      	lsls	r2, r3, #2
 8004eaa:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004eae:	4013      	ands	r3, r2
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004eb4:	0f92      	lsrs	r2, r2, #30
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ec0:	0edb      	lsrs	r3, r3, #27
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ed2:	0e1b      	lsrs	r3, r3, #24
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	f003 0307 	and.w	r3, r3, #7
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ee4:	0d5b      	lsrs	r3, r3, #21
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	b2da      	uxtb	r2, r3
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ef6:	0c9b      	lsrs	r3, r3, #18
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f08:	0bdb      	lsrs	r3, r3, #15
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	f003 0307 	and.w	r3, r3, #7
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	7e1b      	ldrb	r3, [r3, #24]
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	f003 0307 	and.w	r3, r3, #7
 8004f2a:	3302      	adds	r3, #2
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004f36:	fb02 f203 	mul.w	r2, r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	7a1b      	ldrb	r3, [r3, #8]
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	f003 030f 	and.w	r3, r3, #15
 8004f48:	2201      	movs	r2, #1
 8004f4a:	409a      	lsls	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004f58:	0a52      	lsrs	r2, r2, #9
 8004f5a:	fb02 f203 	mul.w	r2, r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f68:	661a      	str	r2, [r3, #96]	; 0x60
 8004f6a:	e031      	b.n	8004fd0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d11d      	bne.n	8004fb0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f78:	041b      	lsls	r3, r3, #16
 8004f7a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f82:	0c1b      	lsrs	r3, r3, #16
 8004f84:	431a      	orrs	r2, r3
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	029a      	lsls	r2, r3, #10
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fa4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	661a      	str	r2, [r3, #96]	; 0x60
 8004fae:	e00f      	b.n	8004fd0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a58      	ldr	r2, [pc, #352]	; (8005118 <HAL_SD_GetCardCSD+0x344>)
 8004fb6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e09d      	b.n	800510c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fd4:	0b9b      	lsrs	r3, r3, #14
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fe6:	09db      	lsrs	r3, r3, #7
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ffe:	b2da      	uxtb	r2, r3
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005008:	0fdb      	lsrs	r3, r3, #31
 800500a:	b2da      	uxtb	r2, r3
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005014:	0f5b      	lsrs	r3, r3, #29
 8005016:	b2db      	uxtb	r3, r3
 8005018:	f003 0303 	and.w	r3, r3, #3
 800501c:	b2da      	uxtb	r2, r3
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005026:	0e9b      	lsrs	r3, r3, #26
 8005028:	b2db      	uxtb	r3, r3
 800502a:	f003 0307 	and.w	r3, r3, #7
 800502e:	b2da      	uxtb	r2, r3
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005038:	0d9b      	lsrs	r3, r3, #22
 800503a:	b2db      	uxtb	r3, r3
 800503c:	f003 030f 	and.w	r3, r3, #15
 8005040:	b2da      	uxtb	r2, r3
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504a:	0d5b      	lsrs	r3, r3, #21
 800504c:	b2db      	uxtb	r3, r3
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	b2da      	uxtb	r2, r3
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005066:	0c1b      	lsrs	r3, r3, #16
 8005068:	b2db      	uxtb	r3, r3
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	b2da      	uxtb	r2, r3
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507a:	0bdb      	lsrs	r3, r3, #15
 800507c:	b2db      	uxtb	r3, r3
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	b2da      	uxtb	r2, r3
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508e:	0b9b      	lsrs	r3, r3, #14
 8005090:	b2db      	uxtb	r3, r3
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	b2da      	uxtb	r2, r3
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a2:	0b5b      	lsrs	r3, r3, #13
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b6:	0b1b      	lsrs	r3, r3, #12
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ca:	0a9b      	lsrs	r3, r3, #10
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050de:	0a1b      	lsrs	r3, r3, #8
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	f003 0303 	and.w	r3, r3, #3
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f2:	085b      	lsrs	r3, r3, #1
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050fa:	b2da      	uxtb	r2, r3
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	004005ff 	.word	0x004005ff

0800511c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800511c:	b5b0      	push	{r4, r5, r7, lr}
 800511e:	b08e      	sub	sp, #56	; 0x38
 8005120:	af04      	add	r7, sp, #16
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005126:	2300      	movs	r3, #0
 8005128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2203      	movs	r2, #3
 8005130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005138:	2b03      	cmp	r3, #3
 800513a:	d02e      	beq.n	800519a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005142:	d106      	bne.n	8005152 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005148:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	639a      	str	r2, [r3, #56]	; 0x38
 8005150:	e029      	b.n	80051a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005158:	d10a      	bne.n	8005170 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f9d2 	bl	8005504 <SD_WideBus_Enable>
 8005160:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	431a      	orrs	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	639a      	str	r2, [r3, #56]	; 0x38
 800516e:	e01a      	b.n	80051a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10a      	bne.n	800518c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 fa0f 	bl	800559a <SD_WideBus_Disable>
 800517c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005182:	6a3b      	ldr	r3, [r7, #32]
 8005184:	431a      	orrs	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	639a      	str	r2, [r3, #56]	; 0x38
 800518a:	e00c      	b.n	80051a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005190:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	639a      	str	r2, [r3, #56]	; 0x38
 8005198:	e005      	b.n	80051a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00b      	beq.n	80051c6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a26      	ldr	r2, [pc, #152]	; (800524c <HAL_SD_ConfigWideBusOperation+0x130>)
 80051b4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80051c4:	e01f      	b.n	8005206 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681d      	ldr	r5, [r3, #0]
 80051ec:	466c      	mov	r4, sp
 80051ee:	f107 0314 	add.w	r3, r7, #20
 80051f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80051f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80051fa:	f107 0308 	add.w	r3, r7, #8
 80051fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005200:	4628      	mov	r0, r5
 8005202:	f001 fb2d 	bl	8006860 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800520e:	4618      	mov	r0, r3
 8005210:	f001 fbf1 	bl	80069f6 <SDMMC_CmdBlockLength>
 8005214:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00c      	beq.n	8005236 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a0a      	ldr	r2, [pc, #40]	; (800524c <HAL_SD_ConfigWideBusOperation+0x130>)
 8005222:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800523e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005242:	4618      	mov	r0, r3
 8005244:	3728      	adds	r7, #40	; 0x28
 8005246:	46bd      	mov	sp, r7
 8005248:	bdb0      	pop	{r4, r5, r7, pc}
 800524a:	bf00      	nop
 800524c:	004005ff 	.word	0x004005ff

08005250 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005250:	b5b0      	push	{r4, r5, r7, lr}
 8005252:	b094      	sub	sp, #80	; 0x50
 8005254:	af04      	add	r7, sp, #16
 8005256:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005258:	2301      	movs	r3, #1
 800525a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4618      	mov	r0, r3
 8005262:	f001 fb44 	bl	80068ee <SDIO_GetPowerState>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d102      	bne.n	8005272 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800526c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005270:	e0b6      	b.n	80053e0 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005276:	2b03      	cmp	r3, #3
 8005278:	d02f      	beq.n	80052da <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4618      	mov	r0, r3
 8005280:	f001 fcc3 	bl	8006c0a <SDMMC_CmdSendCID>
 8005284:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <SD_InitCard+0x40>
    {
      return errorstate;
 800528c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800528e:	e0a7      	b.n	80053e0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2100      	movs	r1, #0
 8005296:	4618      	mov	r0, r3
 8005298:	f001 fb6e 	bl	8006978 <SDIO_GetResponse>
 800529c:	4602      	mov	r2, r0
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2104      	movs	r1, #4
 80052a8:	4618      	mov	r0, r3
 80052aa:	f001 fb65 	bl	8006978 <SDIO_GetResponse>
 80052ae:	4602      	mov	r2, r0
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2108      	movs	r1, #8
 80052ba:	4618      	mov	r0, r3
 80052bc:	f001 fb5c 	bl	8006978 <SDIO_GetResponse>
 80052c0:	4602      	mov	r2, r0
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	210c      	movs	r1, #12
 80052cc:	4618      	mov	r0, r3
 80052ce:	f001 fb53 	bl	8006978 <SDIO_GetResponse>
 80052d2:	4602      	mov	r2, r0
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052de:	2b03      	cmp	r3, #3
 80052e0:	d00d      	beq.n	80052fe <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f107 020e 	add.w	r2, r7, #14
 80052ea:	4611      	mov	r1, r2
 80052ec:	4618      	mov	r0, r3
 80052ee:	f001 fcc9 	bl	8006c84 <SDMMC_CmdSetRelAdd>
 80052f2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80052f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <SD_InitCard+0xae>
    {
      return errorstate;
 80052fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052fc:	e070      	b.n	80053e0 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005302:	2b03      	cmp	r3, #3
 8005304:	d036      	beq.n	8005374 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005306:	89fb      	ldrh	r3, [r7, #14]
 8005308:	461a      	mov	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005316:	041b      	lsls	r3, r3, #16
 8005318:	4619      	mov	r1, r3
 800531a:	4610      	mov	r0, r2
 800531c:	f001 fc93 	bl	8006c46 <SDMMC_CmdSendCSD>
 8005320:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <SD_InitCard+0xdc>
    {
      return errorstate;
 8005328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800532a:	e059      	b.n	80053e0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2100      	movs	r1, #0
 8005332:	4618      	mov	r0, r3
 8005334:	f001 fb20 	bl	8006978 <SDIO_GetResponse>
 8005338:	4602      	mov	r2, r0
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2104      	movs	r1, #4
 8005344:	4618      	mov	r0, r3
 8005346:	f001 fb17 	bl	8006978 <SDIO_GetResponse>
 800534a:	4602      	mov	r2, r0
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2108      	movs	r1, #8
 8005356:	4618      	mov	r0, r3
 8005358:	f001 fb0e 	bl	8006978 <SDIO_GetResponse>
 800535c:	4602      	mov	r2, r0
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	210c      	movs	r1, #12
 8005368:	4618      	mov	r0, r3
 800536a:	f001 fb05 	bl	8006978 <SDIO_GetResponse>
 800536e:	4602      	mov	r2, r0
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2104      	movs	r1, #4
 800537a:	4618      	mov	r0, r3
 800537c:	f001 fafc 	bl	8006978 <SDIO_GetResponse>
 8005380:	4603      	mov	r3, r0
 8005382:	0d1a      	lsrs	r2, r3, #20
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005388:	f107 0310 	add.w	r3, r7, #16
 800538c:	4619      	mov	r1, r3
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7ff fd20 	bl	8004dd4 <HAL_SD_GetCardCSD>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d002      	beq.n	80053a0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800539a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800539e:	e01f      	b.n	80053e0 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6819      	ldr	r1, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053a8:	041b      	lsls	r3, r3, #16
 80053aa:	461a      	mov	r2, r3
 80053ac:	f04f 0300 	mov.w	r3, #0
 80053b0:	4608      	mov	r0, r1
 80053b2:	f001 fb42 	bl	8006a3a <SDMMC_CmdSelDesel>
 80053b6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80053b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <SD_InitCard+0x172>
  {
    return errorstate;
 80053be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c0:	e00e      	b.n	80053e0 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681d      	ldr	r5, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	466c      	mov	r4, sp
 80053ca:	f103 0210 	add.w	r2, r3, #16
 80053ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80053d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80053d4:	3304      	adds	r3, #4
 80053d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053d8:	4628      	mov	r0, r5
 80053da:	f001 fa41 	bl	8006860 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3740      	adds	r7, #64	; 0x40
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bdb0      	pop	{r4, r5, r7, pc}

080053e8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053f0:	2300      	movs	r3, #0
 80053f2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	617b      	str	r3, [r7, #20]
 80053f8:	2300      	movs	r3, #0
 80053fa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4618      	mov	r0, r3
 8005402:	f001 fb3d 	bl	8006a80 <SDMMC_CmdGoIdleState>
 8005406:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <SD_PowerON+0x2a>
  {
    return errorstate;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	e072      	b.n	80054f8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4618      	mov	r0, r3
 8005418:	f001 fb50 	bl	8006abc <SDMMC_CmdOperCond>
 800541c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00d      	beq.n	8005440 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4618      	mov	r0, r3
 8005430:	f001 fb26 	bl	8006a80 <SDMMC_CmdGoIdleState>
 8005434:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d004      	beq.n	8005446 <SD_PowerON+0x5e>
    {
      return errorstate;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	e05b      	b.n	80054f8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800544a:	2b01      	cmp	r3, #1
 800544c:	d137      	bne.n	80054be <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2100      	movs	r1, #0
 8005454:	4618      	mov	r0, r3
 8005456:	f001 fb50 	bl	8006afa <SDMMC_CmdAppCommand>
 800545a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d02d      	beq.n	80054be <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005462:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005466:	e047      	b.n	80054f8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2100      	movs	r1, #0
 800546e:	4618      	mov	r0, r3
 8005470:	f001 fb43 	bl	8006afa <SDMMC_CmdAppCommand>
 8005474:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <SD_PowerON+0x98>
    {
      return errorstate;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	e03b      	b.n	80054f8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	491e      	ldr	r1, [pc, #120]	; (8005500 <SD_PowerON+0x118>)
 8005486:	4618      	mov	r0, r3
 8005488:	f001 fb59 	bl	8006b3e <SDMMC_CmdAppOperCommand>
 800548c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005494:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005498:	e02e      	b.n	80054f8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2100      	movs	r1, #0
 80054a0:	4618      	mov	r0, r3
 80054a2:	f001 fa69 	bl	8006978 <SDIO_GetResponse>
 80054a6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	0fdb      	lsrs	r3, r3, #31
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d101      	bne.n	80054b4 <SD_PowerON+0xcc>
 80054b0:	2301      	movs	r3, #1
 80054b2:	e000      	b.n	80054b6 <SD_PowerON+0xce>
 80054b4:	2300      	movs	r3, #0
 80054b6:	613b      	str	r3, [r7, #16]

    count++;
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	3301      	adds	r3, #1
 80054bc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d802      	bhi.n	80054ce <SD_PowerON+0xe6>
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d0cc      	beq.n	8005468 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d902      	bls.n	80054de <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80054d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054dc:	e00c      	b.n	80054f8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d003      	beq.n	80054f0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	645a      	str	r2, [r3, #68]	; 0x44
 80054ee:	e002      	b.n	80054f6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3718      	adds	r7, #24
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	c1100000 	.word	0xc1100000

08005504 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800550c:	2300      	movs	r3, #0
 800550e:	60fb      	str	r3, [r7, #12]
 8005510:	2300      	movs	r3, #0
 8005512:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2100      	movs	r1, #0
 800551a:	4618      	mov	r0, r3
 800551c:	f001 fa2c 	bl	8006978 <SDIO_GetResponse>
 8005520:	4603      	mov	r3, r0
 8005522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005526:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800552a:	d102      	bne.n	8005532 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800552c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005530:	e02f      	b.n	8005592 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005532:	f107 030c 	add.w	r3, r7, #12
 8005536:	4619      	mov	r1, r3
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f879 	bl	8005630 <SD_FindSCR>
 800553e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	e023      	b.n	8005592 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d01c      	beq.n	800558e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800555c:	041b      	lsls	r3, r3, #16
 800555e:	4619      	mov	r1, r3
 8005560:	4610      	mov	r0, r2
 8005562:	f001 faca 	bl	8006afa <SDMMC_CmdAppCommand>
 8005566:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	e00f      	b.n	8005592 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2102      	movs	r1, #2
 8005578:	4618      	mov	r0, r3
 800557a:	f001 fb03 	bl	8006b84 <SDMMC_CmdBusWidth>
 800557e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	e003      	b.n	8005592 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800558a:	2300      	movs	r3, #0
 800558c:	e001      	b.n	8005592 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800558e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005592:	4618      	mov	r0, r3
 8005594:	3718      	adds	r7, #24
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b086      	sub	sp, #24
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80055a2:	2300      	movs	r3, #0
 80055a4:	60fb      	str	r3, [r7, #12]
 80055a6:	2300      	movs	r3, #0
 80055a8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2100      	movs	r1, #0
 80055b0:	4618      	mov	r0, r3
 80055b2:	f001 f9e1 	bl	8006978 <SDIO_GetResponse>
 80055b6:	4603      	mov	r3, r0
 80055b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055c0:	d102      	bne.n	80055c8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80055c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80055c6:	e02f      	b.n	8005628 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80055c8:	f107 030c 	add.w	r3, r7, #12
 80055cc:	4619      	mov	r1, r3
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f82e 	bl	8005630 <SD_FindSCR>
 80055d4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	e023      	b.n	8005628 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d01c      	beq.n	8005624 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f2:	041b      	lsls	r3, r3, #16
 80055f4:	4619      	mov	r1, r3
 80055f6:	4610      	mov	r0, r2
 80055f8:	f001 fa7f 	bl	8006afa <SDMMC_CmdAppCommand>
 80055fc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	e00f      	b.n	8005628 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2100      	movs	r1, #0
 800560e:	4618      	mov	r0, r3
 8005610:	f001 fab8 	bl	8006b84 <SDMMC_CmdBusWidth>
 8005614:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	e003      	b.n	8005628 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005620:	2300      	movs	r3, #0
 8005622:	e001      	b.n	8005628 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005624:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005628:	4618      	mov	r0, r3
 800562a:	3718      	adds	r7, #24
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005630:	b590      	push	{r4, r7, lr}
 8005632:	b08f      	sub	sp, #60	; 0x3c
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800563a:	f7fb f843 	bl	80006c4 <HAL_GetTick>
 800563e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005644:	2300      	movs	r3, #0
 8005646:	60bb      	str	r3, [r7, #8]
 8005648:	2300      	movs	r3, #0
 800564a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2108      	movs	r1, #8
 8005656:	4618      	mov	r0, r3
 8005658:	f001 f9cd 	bl	80069f6 <SDMMC_CmdBlockLength>
 800565c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800565e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005660:	2b00      	cmp	r3, #0
 8005662:	d001      	beq.n	8005668 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005666:	e0b2      	b.n	80057ce <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005670:	041b      	lsls	r3, r3, #16
 8005672:	4619      	mov	r1, r3
 8005674:	4610      	mov	r0, r2
 8005676:	f001 fa40 	bl	8006afa <SDMMC_CmdAppCommand>
 800567a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <SD_FindSCR+0x56>
  {
    return errorstate;
 8005682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005684:	e0a3      	b.n	80057ce <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005686:	f04f 33ff 	mov.w	r3, #4294967295
 800568a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800568c:	2308      	movs	r3, #8
 800568e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005690:	2330      	movs	r3, #48	; 0x30
 8005692:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005694:	2302      	movs	r3, #2
 8005696:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005698:	2300      	movs	r3, #0
 800569a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800569c:	2301      	movs	r3, #1
 800569e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f107 0210 	add.w	r2, r7, #16
 80056a8:	4611      	mov	r1, r2
 80056aa:	4618      	mov	r0, r3
 80056ac:	f001 f977 	bl	800699e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4618      	mov	r0, r3
 80056b6:	f001 fa87 	bl	8006bc8 <SDMMC_CmdSendSCR>
 80056ba:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80056bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d02a      	beq.n	8005718 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80056c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c4:	e083      	b.n	80057ce <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00f      	beq.n	80056f4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6819      	ldr	r1, [r3, #0]
 80056d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	f107 0208 	add.w	r2, r7, #8
 80056e0:	18d4      	adds	r4, r2, r3
 80056e2:	4608      	mov	r0, r1
 80056e4:	f001 f8e7 	bl	80068b6 <SDIO_ReadFIFO>
 80056e8:	4603      	mov	r3, r0
 80056ea:	6023      	str	r3, [r4, #0]
      index++;
 80056ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ee:	3301      	adds	r3, #1
 80056f0:	637b      	str	r3, [r7, #52]	; 0x34
 80056f2:	e006      	b.n	8005702 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d012      	beq.n	8005728 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005702:	f7fa ffdf 	bl	80006c4 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005710:	d102      	bne.n	8005718 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005712:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005716:	e05a      	b.n	80057ce <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800571e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8005722:	2b00      	cmp	r3, #0
 8005724:	d0cf      	beq.n	80056c6 <SD_FindSCR+0x96>
 8005726:	e000      	b.n	800572a <SD_FindSCR+0xfa>
      break;
 8005728:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005730:	f003 0308 	and.w	r3, r3, #8
 8005734:	2b00      	cmp	r3, #0
 8005736:	d005      	beq.n	8005744 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2208      	movs	r2, #8
 800573e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005740:	2308      	movs	r3, #8
 8005742:	e044      	b.n	80057ce <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d005      	beq.n	800575e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2202      	movs	r2, #2
 8005758:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800575a:	2302      	movs	r3, #2
 800575c:	e037      	b.n	80057ce <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005764:	f003 0320 	and.w	r3, r3, #32
 8005768:	2b00      	cmp	r3, #0
 800576a:	d005      	beq.n	8005778 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2220      	movs	r2, #32
 8005772:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005774:	2320      	movs	r3, #32
 8005776:	e02a      	b.n	80057ce <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f240 523a 	movw	r2, #1338	; 0x53a
 8005780:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	061a      	lsls	r2, r3, #24
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	021b      	lsls	r3, r3, #8
 800578a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800578e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	0a1b      	lsrs	r3, r3, #8
 8005794:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005798:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	0e1b      	lsrs	r3, r3, #24
 800579e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80057a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a2:	601a      	str	r2, [r3, #0]
    scr++;
 80057a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a6:	3304      	adds	r3, #4
 80057a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	061a      	lsls	r2, r3, #24
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	021b      	lsls	r3, r3, #8
 80057b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80057b6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	0a1b      	lsrs	r3, r3, #8
 80057bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80057c0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	0e1b      	lsrs	r3, r3, #24
 80057c6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80057c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ca:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	373c      	adds	r7, #60	; 0x3c
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd90      	pop	{r4, r7, pc}

080057d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b082      	sub	sp, #8
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e041      	b.n	800586c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d106      	bne.n	8005802 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f005 fa95 	bl	800ad2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2202      	movs	r2, #2
 8005806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	3304      	adds	r3, #4
 8005812:	4619      	mov	r1, r3
 8005814:	4610      	mov	r0, r2
 8005816:	f000 fae5 	bl	8005de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3708      	adds	r7, #8
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e041      	b.n	800590a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d106      	bne.n	80058a0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f839 	bl	8005912 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	3304      	adds	r3, #4
 80058b0:	4619      	mov	r1, r3
 80058b2:	4610      	mov	r0, r2
 80058b4:	f000 fa96 	bl	8005de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005912:	b480      	push	{r7}
 8005914:	b083      	sub	sp, #12
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800591a:	bf00      	nop
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b082      	sub	sp, #8
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b02      	cmp	r3, #2
 800593a:	d122      	bne.n	8005982 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b02      	cmp	r3, #2
 8005948:	d11b      	bne.n	8005982 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f06f 0202 	mvn.w	r2, #2
 8005952:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	f003 0303 	and.w	r3, r3, #3
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fa1c 	bl	8005da6 <HAL_TIM_IC_CaptureCallback>
 800596e:	e005      	b.n	800597c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 fa0e 	bl	8005d92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fa1f 	bl	8005dba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	2b04      	cmp	r3, #4
 800598e:	d122      	bne.n	80059d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	f003 0304 	and.w	r3, r3, #4
 800599a:	2b04      	cmp	r3, #4
 800599c:	d11b      	bne.n	80059d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f06f 0204 	mvn.w	r2, #4
 80059a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2202      	movs	r2, #2
 80059ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d003      	beq.n	80059c4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 f9f2 	bl	8005da6 <HAL_TIM_IC_CaptureCallback>
 80059c2:	e005      	b.n	80059d0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f9e4 	bl	8005d92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f9f5 	bl	8005dba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	f003 0308 	and.w	r3, r3, #8
 80059e0:	2b08      	cmp	r3, #8
 80059e2:	d122      	bne.n	8005a2a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	f003 0308 	and.w	r3, r3, #8
 80059ee:	2b08      	cmp	r3, #8
 80059f0:	d11b      	bne.n	8005a2a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f06f 0208 	mvn.w	r2, #8
 80059fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2204      	movs	r2, #4
 8005a00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	69db      	ldr	r3, [r3, #28]
 8005a08:	f003 0303 	and.w	r3, r3, #3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f9c8 	bl	8005da6 <HAL_TIM_IC_CaptureCallback>
 8005a16:	e005      	b.n	8005a24 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f9ba 	bl	8005d92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f9cb 	bl	8005dba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	f003 0310 	and.w	r3, r3, #16
 8005a34:	2b10      	cmp	r3, #16
 8005a36:	d122      	bne.n	8005a7e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f003 0310 	and.w	r3, r3, #16
 8005a42:	2b10      	cmp	r3, #16
 8005a44:	d11b      	bne.n	8005a7e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f06f 0210 	mvn.w	r2, #16
 8005a4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2208      	movs	r2, #8
 8005a54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 f99e 	bl	8005da6 <HAL_TIM_IC_CaptureCallback>
 8005a6a:	e005      	b.n	8005a78 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 f990 	bl	8005d92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f9a1 	bl	8005dba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d10e      	bne.n	8005aaa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d107      	bne.n	8005aaa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f06f 0201 	mvn.w	r2, #1
 8005aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 f96a 	bl	8005d7e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab4:	2b80      	cmp	r3, #128	; 0x80
 8005ab6:	d10e      	bne.n	8005ad6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac2:	2b80      	cmp	r3, #128	; 0x80
 8005ac4:	d107      	bne.n	8005ad6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 fca5 	bl	8006420 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae0:	2b40      	cmp	r3, #64	; 0x40
 8005ae2:	d10e      	bne.n	8005b02 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aee:	2b40      	cmp	r3, #64	; 0x40
 8005af0:	d107      	bne.n	8005b02 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 f966 	bl	8005dce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	f003 0320 	and.w	r3, r3, #32
 8005b0c:	2b20      	cmp	r3, #32
 8005b0e:	d10e      	bne.n	8005b2e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	f003 0320 	and.w	r3, r3, #32
 8005b1a:	2b20      	cmp	r3, #32
 8005b1c:	d107      	bne.n	8005b2e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f06f 0220 	mvn.w	r2, #32
 8005b26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 fc6f 	bl	800640c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b2e:	bf00      	nop
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
	...

08005b38 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b44:	2300      	movs	r3, #0
 8005b46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d101      	bne.n	8005b56 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005b52:	2302      	movs	r3, #2
 8005b54:	e048      	b.n	8005be8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b0c      	cmp	r3, #12
 8005b62:	d839      	bhi.n	8005bd8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8005b64:	a201      	add	r2, pc, #4	; (adr r2, 8005b6c <HAL_TIM_OC_ConfigChannel+0x34>)
 8005b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6a:	bf00      	nop
 8005b6c:	08005ba1 	.word	0x08005ba1
 8005b70:	08005bd9 	.word	0x08005bd9
 8005b74:	08005bd9 	.word	0x08005bd9
 8005b78:	08005bd9 	.word	0x08005bd9
 8005b7c:	08005baf 	.word	0x08005baf
 8005b80:	08005bd9 	.word	0x08005bd9
 8005b84:	08005bd9 	.word	0x08005bd9
 8005b88:	08005bd9 	.word	0x08005bd9
 8005b8c:	08005bbd 	.word	0x08005bbd
 8005b90:	08005bd9 	.word	0x08005bd9
 8005b94:	08005bd9 	.word	0x08005bd9
 8005b98:	08005bd9 	.word	0x08005bd9
 8005b9c:	08005bcb 	.word	0x08005bcb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68b9      	ldr	r1, [r7, #8]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 f99c 	bl	8005ee4 <TIM_OC1_SetConfig>
      break;
 8005bac:	e017      	b.n	8005bde <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68b9      	ldr	r1, [r7, #8]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 f9fb 	bl	8005fb0 <TIM_OC2_SetConfig>
      break;
 8005bba:	e010      	b.n	8005bde <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68b9      	ldr	r1, [r7, #8]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 fa60 	bl	8006088 <TIM_OC3_SetConfig>
      break;
 8005bc8:	e009      	b.n	8005bde <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68b9      	ldr	r1, [r7, #8]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f000 fac3 	bl	800615c <TIM_OC4_SetConfig>
      break;
 8005bd6:	e002      	b.n	8005bde <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	75fb      	strb	r3, [r7, #23]
      break;
 8005bdc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3718      	adds	r7, #24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d101      	bne.n	8005c0c <HAL_TIM_ConfigClockSource+0x1c>
 8005c08:	2302      	movs	r3, #2
 8005c0a:	e0b4      	b.n	8005d76 <HAL_TIM_ConfigClockSource+0x186>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2202      	movs	r2, #2
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c44:	d03e      	beq.n	8005cc4 <HAL_TIM_ConfigClockSource+0xd4>
 8005c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c4a:	f200 8087 	bhi.w	8005d5c <HAL_TIM_ConfigClockSource+0x16c>
 8005c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c52:	f000 8086 	beq.w	8005d62 <HAL_TIM_ConfigClockSource+0x172>
 8005c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c5a:	d87f      	bhi.n	8005d5c <HAL_TIM_ConfigClockSource+0x16c>
 8005c5c:	2b70      	cmp	r3, #112	; 0x70
 8005c5e:	d01a      	beq.n	8005c96 <HAL_TIM_ConfigClockSource+0xa6>
 8005c60:	2b70      	cmp	r3, #112	; 0x70
 8005c62:	d87b      	bhi.n	8005d5c <HAL_TIM_ConfigClockSource+0x16c>
 8005c64:	2b60      	cmp	r3, #96	; 0x60
 8005c66:	d050      	beq.n	8005d0a <HAL_TIM_ConfigClockSource+0x11a>
 8005c68:	2b60      	cmp	r3, #96	; 0x60
 8005c6a:	d877      	bhi.n	8005d5c <HAL_TIM_ConfigClockSource+0x16c>
 8005c6c:	2b50      	cmp	r3, #80	; 0x50
 8005c6e:	d03c      	beq.n	8005cea <HAL_TIM_ConfigClockSource+0xfa>
 8005c70:	2b50      	cmp	r3, #80	; 0x50
 8005c72:	d873      	bhi.n	8005d5c <HAL_TIM_ConfigClockSource+0x16c>
 8005c74:	2b40      	cmp	r3, #64	; 0x40
 8005c76:	d058      	beq.n	8005d2a <HAL_TIM_ConfigClockSource+0x13a>
 8005c78:	2b40      	cmp	r3, #64	; 0x40
 8005c7a:	d86f      	bhi.n	8005d5c <HAL_TIM_ConfigClockSource+0x16c>
 8005c7c:	2b30      	cmp	r3, #48	; 0x30
 8005c7e:	d064      	beq.n	8005d4a <HAL_TIM_ConfigClockSource+0x15a>
 8005c80:	2b30      	cmp	r3, #48	; 0x30
 8005c82:	d86b      	bhi.n	8005d5c <HAL_TIM_ConfigClockSource+0x16c>
 8005c84:	2b20      	cmp	r3, #32
 8005c86:	d060      	beq.n	8005d4a <HAL_TIM_ConfigClockSource+0x15a>
 8005c88:	2b20      	cmp	r3, #32
 8005c8a:	d867      	bhi.n	8005d5c <HAL_TIM_ConfigClockSource+0x16c>
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d05c      	beq.n	8005d4a <HAL_TIM_ConfigClockSource+0x15a>
 8005c90:	2b10      	cmp	r3, #16
 8005c92:	d05a      	beq.n	8005d4a <HAL_TIM_ConfigClockSource+0x15a>
 8005c94:	e062      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6818      	ldr	r0, [r3, #0]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	6899      	ldr	r1, [r3, #8]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	f000 fb23 	bl	80062f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	609a      	str	r2, [r3, #8]
      break;
 8005cc2:	e04f      	b.n	8005d64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6818      	ldr	r0, [r3, #0]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	6899      	ldr	r1, [r3, #8]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f000 fb0c 	bl	80062f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689a      	ldr	r2, [r3, #8]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ce6:	609a      	str	r2, [r3, #8]
      break;
 8005ce8:	e03c      	b.n	8005d64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6818      	ldr	r0, [r3, #0]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	6859      	ldr	r1, [r3, #4]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	f000 fa80 	bl	80061fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2150      	movs	r1, #80	; 0x50
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 fad9 	bl	80062ba <TIM_ITRx_SetConfig>
      break;
 8005d08:	e02c      	b.n	8005d64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6818      	ldr	r0, [r3, #0]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	6859      	ldr	r1, [r3, #4]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	461a      	mov	r2, r3
 8005d18:	f000 fa9f 	bl	800625a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2160      	movs	r1, #96	; 0x60
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 fac9 	bl	80062ba <TIM_ITRx_SetConfig>
      break;
 8005d28:	e01c      	b.n	8005d64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6818      	ldr	r0, [r3, #0]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	6859      	ldr	r1, [r3, #4]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	461a      	mov	r2, r3
 8005d38:	f000 fa60 	bl	80061fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2140      	movs	r1, #64	; 0x40
 8005d42:	4618      	mov	r0, r3
 8005d44:	f000 fab9 	bl	80062ba <TIM_ITRx_SetConfig>
      break;
 8005d48:	e00c      	b.n	8005d64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4619      	mov	r1, r3
 8005d54:	4610      	mov	r0, r2
 8005d56:	f000 fab0 	bl	80062ba <TIM_ITRx_SetConfig>
      break;
 8005d5a:	e003      	b.n	8005d64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d60:	e000      	b.n	8005d64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b083      	sub	sp, #12
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005d86:	bf00      	nop
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d92:	b480      	push	{r7}
 8005d94:	b083      	sub	sp, #12
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d9a:	bf00      	nop
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b083      	sub	sp, #12
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dae:	bf00      	nop
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b083      	sub	sp, #12
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dc2:	bf00      	nop
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b083      	sub	sp, #12
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dd6:	bf00      	nop
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
	...

08005de4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a34      	ldr	r2, [pc, #208]	; (8005ec8 <TIM_Base_SetConfig+0xe4>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d00f      	beq.n	8005e1c <TIM_Base_SetConfig+0x38>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e02:	d00b      	beq.n	8005e1c <TIM_Base_SetConfig+0x38>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a31      	ldr	r2, [pc, #196]	; (8005ecc <TIM_Base_SetConfig+0xe8>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d007      	beq.n	8005e1c <TIM_Base_SetConfig+0x38>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a30      	ldr	r2, [pc, #192]	; (8005ed0 <TIM_Base_SetConfig+0xec>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d003      	beq.n	8005e1c <TIM_Base_SetConfig+0x38>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a2f      	ldr	r2, [pc, #188]	; (8005ed4 <TIM_Base_SetConfig+0xf0>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d108      	bne.n	8005e2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a25      	ldr	r2, [pc, #148]	; (8005ec8 <TIM_Base_SetConfig+0xe4>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d01b      	beq.n	8005e6e <TIM_Base_SetConfig+0x8a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e3c:	d017      	beq.n	8005e6e <TIM_Base_SetConfig+0x8a>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a22      	ldr	r2, [pc, #136]	; (8005ecc <TIM_Base_SetConfig+0xe8>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d013      	beq.n	8005e6e <TIM_Base_SetConfig+0x8a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a21      	ldr	r2, [pc, #132]	; (8005ed0 <TIM_Base_SetConfig+0xec>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d00f      	beq.n	8005e6e <TIM_Base_SetConfig+0x8a>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a20      	ldr	r2, [pc, #128]	; (8005ed4 <TIM_Base_SetConfig+0xf0>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d00b      	beq.n	8005e6e <TIM_Base_SetConfig+0x8a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a1f      	ldr	r2, [pc, #124]	; (8005ed8 <TIM_Base_SetConfig+0xf4>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d007      	beq.n	8005e6e <TIM_Base_SetConfig+0x8a>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a1e      	ldr	r2, [pc, #120]	; (8005edc <TIM_Base_SetConfig+0xf8>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d003      	beq.n	8005e6e <TIM_Base_SetConfig+0x8a>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a1d      	ldr	r2, [pc, #116]	; (8005ee0 <TIM_Base_SetConfig+0xfc>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d108      	bne.n	8005e80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a08      	ldr	r2, [pc, #32]	; (8005ec8 <TIM_Base_SetConfig+0xe4>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d103      	bne.n	8005eb4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	691a      	ldr	r2, [r3, #16]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	615a      	str	r2, [r3, #20]
}
 8005eba:	bf00      	nop
 8005ebc:	3714      	adds	r7, #20
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	40010000 	.word	0x40010000
 8005ecc:	40000400 	.word	0x40000400
 8005ed0:	40000800 	.word	0x40000800
 8005ed4:	40000c00 	.word	0x40000c00
 8005ed8:	40014000 	.word	0x40014000
 8005edc:	40014400 	.word	0x40014400
 8005ee0:	40014800 	.word	0x40014800

08005ee4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	f023 0201 	bic.w	r2, r3, #1
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f023 0303 	bic.w	r3, r3, #3
 8005f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f023 0302 	bic.w	r3, r3, #2
 8005f2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a1c      	ldr	r2, [pc, #112]	; (8005fac <TIM_OC1_SetConfig+0xc8>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d10c      	bne.n	8005f5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f023 0308 	bic.w	r3, r3, #8
 8005f46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	f023 0304 	bic.w	r3, r3, #4
 8005f58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a13      	ldr	r2, [pc, #76]	; (8005fac <TIM_OC1_SetConfig+0xc8>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d111      	bne.n	8005f86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	685a      	ldr	r2, [r3, #4]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	621a      	str	r2, [r3, #32]
}
 8005fa0:	bf00      	nop
 8005fa2:	371c      	adds	r7, #28
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	40010000 	.word	0x40010000

08005fb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b087      	sub	sp, #28
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	f023 0210 	bic.w	r2, r3, #16
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	021b      	lsls	r3, r3, #8
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	f023 0320 	bic.w	r3, r3, #32
 8005ffa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	011b      	lsls	r3, r3, #4
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	4313      	orrs	r3, r2
 8006006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a1e      	ldr	r2, [pc, #120]	; (8006084 <TIM_OC2_SetConfig+0xd4>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d10d      	bne.n	800602c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	011b      	lsls	r3, r3, #4
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	4313      	orrs	r3, r2
 8006022:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800602a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a15      	ldr	r2, [pc, #84]	; (8006084 <TIM_OC2_SetConfig+0xd4>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d113      	bne.n	800605c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800603a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006042:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	695b      	ldr	r3, [r3, #20]
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	4313      	orrs	r3, r2
 800604e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	4313      	orrs	r3, r2
 800605a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	621a      	str	r2, [r3, #32]
}
 8006076:	bf00      	nop
 8006078:	371c      	adds	r7, #28
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	40010000 	.word	0x40010000

08006088 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 0303 	bic.w	r3, r3, #3
 80060be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	021b      	lsls	r3, r3, #8
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	4313      	orrs	r3, r2
 80060dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a1d      	ldr	r2, [pc, #116]	; (8006158 <TIM_OC3_SetConfig+0xd0>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d10d      	bne.n	8006102 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	021b      	lsls	r3, r3, #8
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006100:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a14      	ldr	r2, [pc, #80]	; (8006158 <TIM_OC3_SetConfig+0xd0>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d113      	bne.n	8006132 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	4313      	orrs	r3, r2
 8006124:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	011b      	lsls	r3, r3, #4
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	4313      	orrs	r3, r2
 8006130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	621a      	str	r2, [r3, #32]
}
 800614c:	bf00      	nop
 800614e:	371c      	adds	r7, #28
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	40010000 	.word	0x40010000

0800615c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800618a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	021b      	lsls	r3, r3, #8
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	4313      	orrs	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	031b      	lsls	r3, r3, #12
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a10      	ldr	r2, [pc, #64]	; (80061f8 <TIM_OC4_SetConfig+0x9c>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d109      	bne.n	80061d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	695b      	ldr	r3, [r3, #20]
 80061c8:	019b      	lsls	r3, r3, #6
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	621a      	str	r2, [r3, #32]
}
 80061ea:	bf00      	nop
 80061ec:	371c      	adds	r7, #28
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	40010000 	.word	0x40010000

080061fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b087      	sub	sp, #28
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6a1b      	ldr	r3, [r3, #32]
 800620c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	f023 0201 	bic.w	r2, r3, #1
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006226:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	011b      	lsls	r3, r3, #4
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	4313      	orrs	r3, r2
 8006230:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	f023 030a 	bic.w	r3, r3, #10
 8006238:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	4313      	orrs	r3, r2
 8006240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	621a      	str	r2, [r3, #32]
}
 800624e:	bf00      	nop
 8006250:	371c      	adds	r7, #28
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800625a:	b480      	push	{r7}
 800625c:	b087      	sub	sp, #28
 800625e:	af00      	add	r7, sp, #0
 8006260:	60f8      	str	r0, [r7, #12]
 8006262:	60b9      	str	r1, [r7, #8]
 8006264:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6a1b      	ldr	r3, [r3, #32]
 800626a:	f023 0210 	bic.w	r2, r3, #16
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6a1b      	ldr	r3, [r3, #32]
 800627c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006284:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	031b      	lsls	r3, r3, #12
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	4313      	orrs	r3, r2
 800628e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006296:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	011b      	lsls	r3, r3, #4
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	4313      	orrs	r3, r2
 80062a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	621a      	str	r2, [r3, #32]
}
 80062ae:	bf00      	nop
 80062b0:	371c      	adds	r7, #28
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr

080062ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062ba:	b480      	push	{r7}
 80062bc:	b085      	sub	sp, #20
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
 80062c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	f043 0307 	orr.w	r3, r3, #7
 80062dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	609a      	str	r2, [r3, #8]
}
 80062e4:	bf00      	nop
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b087      	sub	sp, #28
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
 80062fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800630a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	021a      	lsls	r2, r3, #8
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	431a      	orrs	r2, r3
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	4313      	orrs	r3, r2
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	4313      	orrs	r3, r2
 800631c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	697a      	ldr	r2, [r7, #20]
 8006322:	609a      	str	r2, [r3, #8]
}
 8006324:	bf00      	nop
 8006326:	371c      	adds	r7, #28
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006340:	2b01      	cmp	r3, #1
 8006342:	d101      	bne.n	8006348 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006344:	2302      	movs	r3, #2
 8006346:	e050      	b.n	80063ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2202      	movs	r2, #2
 8006354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800636e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	4313      	orrs	r3, r2
 8006378:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a1c      	ldr	r2, [pc, #112]	; (80063f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d018      	beq.n	80063be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006394:	d013      	beq.n	80063be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a18      	ldr	r2, [pc, #96]	; (80063fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d00e      	beq.n	80063be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a16      	ldr	r2, [pc, #88]	; (8006400 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d009      	beq.n	80063be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a15      	ldr	r2, [pc, #84]	; (8006404 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d004      	beq.n	80063be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a13      	ldr	r2, [pc, #76]	; (8006408 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d10c      	bne.n	80063d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68ba      	ldr	r2, [r7, #8]
 80063d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	40010000 	.word	0x40010000
 80063fc:	40000400 	.word	0x40000400
 8006400:	40000800 	.word	0x40000800
 8006404:	40000c00 	.word	0x40000c00
 8006408:	40014000 	.word	0x40014000

0800640c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e03f      	b.n	80064c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d106      	bne.n	8006460 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f004 fc8c 	bl	800ad78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2224      	movs	r2, #36	; 0x24
 8006464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68da      	ldr	r2, [r3, #12]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006476:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 f829 	bl	80064d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	691a      	ldr	r2, [r3, #16]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800648c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	695a      	ldr	r2, [r3, #20]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800649c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68da      	ldr	r2, [r3, #12]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2220      	movs	r2, #32
 80064b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2220      	movs	r2, #32
 80064c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3708      	adds	r7, #8
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
	...

080064d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d4:	b09f      	sub	sp, #124	; 0x7c
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80064e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064e6:	68d9      	ldr	r1, [r3, #12]
 80064e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	ea40 0301 	orr.w	r3, r0, r1
 80064f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064f4:	689a      	ldr	r2, [r3, #8]
 80064f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	431a      	orrs	r2, r3
 80064fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	431a      	orrs	r2, r3
 8006502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006504:	69db      	ldr	r3, [r3, #28]
 8006506:	4313      	orrs	r3, r2
 8006508:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800650a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006514:	f021 010c 	bic.w	r1, r1, #12
 8006518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800651e:	430b      	orrs	r3, r1
 8006520:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800652c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800652e:	6999      	ldr	r1, [r3, #24]
 8006530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	ea40 0301 	orr.w	r3, r0, r1
 8006538:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800653a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	4bc5      	ldr	r3, [pc, #788]	; (8006854 <UART_SetConfig+0x384>)
 8006540:	429a      	cmp	r2, r3
 8006542:	d004      	beq.n	800654e <UART_SetConfig+0x7e>
 8006544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	4bc3      	ldr	r3, [pc, #780]	; (8006858 <UART_SetConfig+0x388>)
 800654a:	429a      	cmp	r2, r3
 800654c:	d103      	bne.n	8006556 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800654e:	f7fe f98d 	bl	800486c <HAL_RCC_GetPCLK2Freq>
 8006552:	6778      	str	r0, [r7, #116]	; 0x74
 8006554:	e002      	b.n	800655c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006556:	f7fe f975 	bl	8004844 <HAL_RCC_GetPCLK1Freq>
 800655a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800655c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800655e:	69db      	ldr	r3, [r3, #28]
 8006560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006564:	f040 80b6 	bne.w	80066d4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006568:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800656a:	461c      	mov	r4, r3
 800656c:	f04f 0500 	mov.w	r5, #0
 8006570:	4622      	mov	r2, r4
 8006572:	462b      	mov	r3, r5
 8006574:	1891      	adds	r1, r2, r2
 8006576:	6439      	str	r1, [r7, #64]	; 0x40
 8006578:	415b      	adcs	r3, r3
 800657a:	647b      	str	r3, [r7, #68]	; 0x44
 800657c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006580:	1912      	adds	r2, r2, r4
 8006582:	eb45 0303 	adc.w	r3, r5, r3
 8006586:	f04f 0000 	mov.w	r0, #0
 800658a:	f04f 0100 	mov.w	r1, #0
 800658e:	00d9      	lsls	r1, r3, #3
 8006590:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006594:	00d0      	lsls	r0, r2, #3
 8006596:	4602      	mov	r2, r0
 8006598:	460b      	mov	r3, r1
 800659a:	1911      	adds	r1, r2, r4
 800659c:	6639      	str	r1, [r7, #96]	; 0x60
 800659e:	416b      	adcs	r3, r5
 80065a0:	667b      	str	r3, [r7, #100]	; 0x64
 80065a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	461a      	mov	r2, r3
 80065a8:	f04f 0300 	mov.w	r3, #0
 80065ac:	1891      	adds	r1, r2, r2
 80065ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80065b0:	415b      	adcs	r3, r3
 80065b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80065b8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80065bc:	f7f9 fe0c 	bl	80001d8 <__aeabi_uldivmod>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	4ba5      	ldr	r3, [pc, #660]	; (800685c <UART_SetConfig+0x38c>)
 80065c6:	fba3 2302 	umull	r2, r3, r3, r2
 80065ca:	095b      	lsrs	r3, r3, #5
 80065cc:	011e      	lsls	r6, r3, #4
 80065ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065d0:	461c      	mov	r4, r3
 80065d2:	f04f 0500 	mov.w	r5, #0
 80065d6:	4622      	mov	r2, r4
 80065d8:	462b      	mov	r3, r5
 80065da:	1891      	adds	r1, r2, r2
 80065dc:	6339      	str	r1, [r7, #48]	; 0x30
 80065de:	415b      	adcs	r3, r3
 80065e0:	637b      	str	r3, [r7, #52]	; 0x34
 80065e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80065e6:	1912      	adds	r2, r2, r4
 80065e8:	eb45 0303 	adc.w	r3, r5, r3
 80065ec:	f04f 0000 	mov.w	r0, #0
 80065f0:	f04f 0100 	mov.w	r1, #0
 80065f4:	00d9      	lsls	r1, r3, #3
 80065f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80065fa:	00d0      	lsls	r0, r2, #3
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	1911      	adds	r1, r2, r4
 8006602:	65b9      	str	r1, [r7, #88]	; 0x58
 8006604:	416b      	adcs	r3, r5
 8006606:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	461a      	mov	r2, r3
 800660e:	f04f 0300 	mov.w	r3, #0
 8006612:	1891      	adds	r1, r2, r2
 8006614:	62b9      	str	r1, [r7, #40]	; 0x28
 8006616:	415b      	adcs	r3, r3
 8006618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800661a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800661e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006622:	f7f9 fdd9 	bl	80001d8 <__aeabi_uldivmod>
 8006626:	4602      	mov	r2, r0
 8006628:	460b      	mov	r3, r1
 800662a:	4b8c      	ldr	r3, [pc, #560]	; (800685c <UART_SetConfig+0x38c>)
 800662c:	fba3 1302 	umull	r1, r3, r3, r2
 8006630:	095b      	lsrs	r3, r3, #5
 8006632:	2164      	movs	r1, #100	; 0x64
 8006634:	fb01 f303 	mul.w	r3, r1, r3
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	00db      	lsls	r3, r3, #3
 800663c:	3332      	adds	r3, #50	; 0x32
 800663e:	4a87      	ldr	r2, [pc, #540]	; (800685c <UART_SetConfig+0x38c>)
 8006640:	fba2 2303 	umull	r2, r3, r2, r3
 8006644:	095b      	lsrs	r3, r3, #5
 8006646:	005b      	lsls	r3, r3, #1
 8006648:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800664c:	441e      	add	r6, r3
 800664e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006650:	4618      	mov	r0, r3
 8006652:	f04f 0100 	mov.w	r1, #0
 8006656:	4602      	mov	r2, r0
 8006658:	460b      	mov	r3, r1
 800665a:	1894      	adds	r4, r2, r2
 800665c:	623c      	str	r4, [r7, #32]
 800665e:	415b      	adcs	r3, r3
 8006660:	627b      	str	r3, [r7, #36]	; 0x24
 8006662:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006666:	1812      	adds	r2, r2, r0
 8006668:	eb41 0303 	adc.w	r3, r1, r3
 800666c:	f04f 0400 	mov.w	r4, #0
 8006670:	f04f 0500 	mov.w	r5, #0
 8006674:	00dd      	lsls	r5, r3, #3
 8006676:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800667a:	00d4      	lsls	r4, r2, #3
 800667c:	4622      	mov	r2, r4
 800667e:	462b      	mov	r3, r5
 8006680:	1814      	adds	r4, r2, r0
 8006682:	653c      	str	r4, [r7, #80]	; 0x50
 8006684:	414b      	adcs	r3, r1
 8006686:	657b      	str	r3, [r7, #84]	; 0x54
 8006688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	461a      	mov	r2, r3
 800668e:	f04f 0300 	mov.w	r3, #0
 8006692:	1891      	adds	r1, r2, r2
 8006694:	61b9      	str	r1, [r7, #24]
 8006696:	415b      	adcs	r3, r3
 8006698:	61fb      	str	r3, [r7, #28]
 800669a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800669e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80066a2:	f7f9 fd99 	bl	80001d8 <__aeabi_uldivmod>
 80066a6:	4602      	mov	r2, r0
 80066a8:	460b      	mov	r3, r1
 80066aa:	4b6c      	ldr	r3, [pc, #432]	; (800685c <UART_SetConfig+0x38c>)
 80066ac:	fba3 1302 	umull	r1, r3, r3, r2
 80066b0:	095b      	lsrs	r3, r3, #5
 80066b2:	2164      	movs	r1, #100	; 0x64
 80066b4:	fb01 f303 	mul.w	r3, r1, r3
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	3332      	adds	r3, #50	; 0x32
 80066be:	4a67      	ldr	r2, [pc, #412]	; (800685c <UART_SetConfig+0x38c>)
 80066c0:	fba2 2303 	umull	r2, r3, r2, r3
 80066c4:	095b      	lsrs	r3, r3, #5
 80066c6:	f003 0207 	and.w	r2, r3, #7
 80066ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4432      	add	r2, r6
 80066d0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80066d2:	e0b9      	b.n	8006848 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066d6:	461c      	mov	r4, r3
 80066d8:	f04f 0500 	mov.w	r5, #0
 80066dc:	4622      	mov	r2, r4
 80066de:	462b      	mov	r3, r5
 80066e0:	1891      	adds	r1, r2, r2
 80066e2:	6139      	str	r1, [r7, #16]
 80066e4:	415b      	adcs	r3, r3
 80066e6:	617b      	str	r3, [r7, #20]
 80066e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80066ec:	1912      	adds	r2, r2, r4
 80066ee:	eb45 0303 	adc.w	r3, r5, r3
 80066f2:	f04f 0000 	mov.w	r0, #0
 80066f6:	f04f 0100 	mov.w	r1, #0
 80066fa:	00d9      	lsls	r1, r3, #3
 80066fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006700:	00d0      	lsls	r0, r2, #3
 8006702:	4602      	mov	r2, r0
 8006704:	460b      	mov	r3, r1
 8006706:	eb12 0804 	adds.w	r8, r2, r4
 800670a:	eb43 0905 	adc.w	r9, r3, r5
 800670e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	4618      	mov	r0, r3
 8006714:	f04f 0100 	mov.w	r1, #0
 8006718:	f04f 0200 	mov.w	r2, #0
 800671c:	f04f 0300 	mov.w	r3, #0
 8006720:	008b      	lsls	r3, r1, #2
 8006722:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006726:	0082      	lsls	r2, r0, #2
 8006728:	4640      	mov	r0, r8
 800672a:	4649      	mov	r1, r9
 800672c:	f7f9 fd54 	bl	80001d8 <__aeabi_uldivmod>
 8006730:	4602      	mov	r2, r0
 8006732:	460b      	mov	r3, r1
 8006734:	4b49      	ldr	r3, [pc, #292]	; (800685c <UART_SetConfig+0x38c>)
 8006736:	fba3 2302 	umull	r2, r3, r3, r2
 800673a:	095b      	lsrs	r3, r3, #5
 800673c:	011e      	lsls	r6, r3, #4
 800673e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006740:	4618      	mov	r0, r3
 8006742:	f04f 0100 	mov.w	r1, #0
 8006746:	4602      	mov	r2, r0
 8006748:	460b      	mov	r3, r1
 800674a:	1894      	adds	r4, r2, r2
 800674c:	60bc      	str	r4, [r7, #8]
 800674e:	415b      	adcs	r3, r3
 8006750:	60fb      	str	r3, [r7, #12]
 8006752:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006756:	1812      	adds	r2, r2, r0
 8006758:	eb41 0303 	adc.w	r3, r1, r3
 800675c:	f04f 0400 	mov.w	r4, #0
 8006760:	f04f 0500 	mov.w	r5, #0
 8006764:	00dd      	lsls	r5, r3, #3
 8006766:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800676a:	00d4      	lsls	r4, r2, #3
 800676c:	4622      	mov	r2, r4
 800676e:	462b      	mov	r3, r5
 8006770:	1814      	adds	r4, r2, r0
 8006772:	64bc      	str	r4, [r7, #72]	; 0x48
 8006774:	414b      	adcs	r3, r1
 8006776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	4618      	mov	r0, r3
 800677e:	f04f 0100 	mov.w	r1, #0
 8006782:	f04f 0200 	mov.w	r2, #0
 8006786:	f04f 0300 	mov.w	r3, #0
 800678a:	008b      	lsls	r3, r1, #2
 800678c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006790:	0082      	lsls	r2, r0, #2
 8006792:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006796:	f7f9 fd1f 	bl	80001d8 <__aeabi_uldivmod>
 800679a:	4602      	mov	r2, r0
 800679c:	460b      	mov	r3, r1
 800679e:	4b2f      	ldr	r3, [pc, #188]	; (800685c <UART_SetConfig+0x38c>)
 80067a0:	fba3 1302 	umull	r1, r3, r3, r2
 80067a4:	095b      	lsrs	r3, r3, #5
 80067a6:	2164      	movs	r1, #100	; 0x64
 80067a8:	fb01 f303 	mul.w	r3, r1, r3
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	011b      	lsls	r3, r3, #4
 80067b0:	3332      	adds	r3, #50	; 0x32
 80067b2:	4a2a      	ldr	r2, [pc, #168]	; (800685c <UART_SetConfig+0x38c>)
 80067b4:	fba2 2303 	umull	r2, r3, r2, r3
 80067b8:	095b      	lsrs	r3, r3, #5
 80067ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067be:	441e      	add	r6, r3
 80067c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067c2:	4618      	mov	r0, r3
 80067c4:	f04f 0100 	mov.w	r1, #0
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	1894      	adds	r4, r2, r2
 80067ce:	603c      	str	r4, [r7, #0]
 80067d0:	415b      	adcs	r3, r3
 80067d2:	607b      	str	r3, [r7, #4]
 80067d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067d8:	1812      	adds	r2, r2, r0
 80067da:	eb41 0303 	adc.w	r3, r1, r3
 80067de:	f04f 0400 	mov.w	r4, #0
 80067e2:	f04f 0500 	mov.w	r5, #0
 80067e6:	00dd      	lsls	r5, r3, #3
 80067e8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80067ec:	00d4      	lsls	r4, r2, #3
 80067ee:	4622      	mov	r2, r4
 80067f0:	462b      	mov	r3, r5
 80067f2:	eb12 0a00 	adds.w	sl, r2, r0
 80067f6:	eb43 0b01 	adc.w	fp, r3, r1
 80067fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	4618      	mov	r0, r3
 8006800:	f04f 0100 	mov.w	r1, #0
 8006804:	f04f 0200 	mov.w	r2, #0
 8006808:	f04f 0300 	mov.w	r3, #0
 800680c:	008b      	lsls	r3, r1, #2
 800680e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006812:	0082      	lsls	r2, r0, #2
 8006814:	4650      	mov	r0, sl
 8006816:	4659      	mov	r1, fp
 8006818:	f7f9 fcde 	bl	80001d8 <__aeabi_uldivmod>
 800681c:	4602      	mov	r2, r0
 800681e:	460b      	mov	r3, r1
 8006820:	4b0e      	ldr	r3, [pc, #56]	; (800685c <UART_SetConfig+0x38c>)
 8006822:	fba3 1302 	umull	r1, r3, r3, r2
 8006826:	095b      	lsrs	r3, r3, #5
 8006828:	2164      	movs	r1, #100	; 0x64
 800682a:	fb01 f303 	mul.w	r3, r1, r3
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	011b      	lsls	r3, r3, #4
 8006832:	3332      	adds	r3, #50	; 0x32
 8006834:	4a09      	ldr	r2, [pc, #36]	; (800685c <UART_SetConfig+0x38c>)
 8006836:	fba2 2303 	umull	r2, r3, r2, r3
 800683a:	095b      	lsrs	r3, r3, #5
 800683c:	f003 020f 	and.w	r2, r3, #15
 8006840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4432      	add	r2, r6
 8006846:	609a      	str	r2, [r3, #8]
}
 8006848:	bf00      	nop
 800684a:	377c      	adds	r7, #124	; 0x7c
 800684c:	46bd      	mov	sp, r7
 800684e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006852:	bf00      	nop
 8006854:	40011000 	.word	0x40011000
 8006858:	40011400 	.word	0x40011400
 800685c:	51eb851f 	.word	0x51eb851f

08006860 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006860:	b084      	sub	sp, #16
 8006862:	b480      	push	{r7}
 8006864:	b085      	sub	sp, #20
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
 800686a:	f107 001c 	add.w	r0, r7, #28
 800686e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006872:	2300      	movs	r3, #0
 8006874:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006876:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006878:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800687a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800687c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800687e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006880:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006882:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006886:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800688a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	4313      	orrs	r3, r2
 8006890:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800689a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	431a      	orrs	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3714      	adds	r7, #20
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	b004      	add	sp, #16
 80068b4:	4770      	bx	lr

080068b6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b083      	sub	sp, #12
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2203      	movs	r2, #3
 80068dc:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80068de:	2002      	movs	r0, #2
 80068e0:	f7f9 fefc 	bl	80006dc <HAL_Delay>
  
  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80068ee:	b480      	push	{r7}
 80068f0:	b083      	sub	sp, #12
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0303 	and.w	r3, r3, #3
}
 80068fe:	4618      	mov	r0, r3
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800690a:	b480      	push	{r7}
 800690c:	b085      	sub	sp, #20
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
 8006912:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006914:	2300      	movs	r3, #0
 8006916:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006928:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800692e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006934:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	4313      	orrs	r3, r2
 800693a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006944:	f023 030f 	bic.w	r3, r3, #15
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	431a      	orrs	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr

0800695e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800695e:	b480      	push	{r7}
 8006960:	b083      	sub	sp, #12
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	b2db      	uxtb	r3, r3
}
 800696c:	4618      	mov	r0, r3
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	3314      	adds	r3, #20
 8006986:	461a      	mov	r2, r3
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	4413      	add	r3, r2
 800698c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
}  
 8006992:	4618      	mov	r0, r3
 8006994:	3714      	adds	r7, #20
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr

0800699e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800699e:	b480      	push	{r7}
 80069a0:	b085      	sub	sp, #20
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
 80069a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80069a8:	2300      	movs	r3, #0
 80069aa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685a      	ldr	r2, [r3, #4]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80069c4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80069ca:	431a      	orrs	r2, r3
                       Data->DPSM);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80069d0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069dc:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	431a      	orrs	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80069e8:	2300      	movs	r3, #0

}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3714      	adds	r7, #20
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b088      	sub	sp, #32
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006a04:	2310      	movs	r3, #16
 8006a06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a08:	2340      	movs	r3, #64	; 0x40
 8006a0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a16:	f107 0308 	add.w	r3, r7, #8
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f7ff ff74 	bl	800690a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a26:	2110      	movs	r1, #16
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 f979 	bl	8006d20 <SDMMC_GetCmdResp1>
 8006a2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a30:	69fb      	ldr	r3, [r7, #28]
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3720      	adds	r7, #32
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b08a      	sub	sp, #40	; 0x28
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	60f8      	str	r0, [r7, #12]
 8006a42:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006a4a:	2307      	movs	r3, #7
 8006a4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a4e:	2340      	movs	r3, #64	; 0x40
 8006a50:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a52:	2300      	movs	r3, #0
 8006a54:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a5a:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a5c:	f107 0310 	add.w	r3, r7, #16
 8006a60:	4619      	mov	r1, r3
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f7ff ff51 	bl	800690a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a6c:	2107      	movs	r1, #7
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f000 f956 	bl	8006d20 <SDMMC_GetCmdResp1>
 8006a74:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3728      	adds	r7, #40	; 0x28
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b088      	sub	sp, #32
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006a90:	2300      	movs	r3, #0
 8006a92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a94:	2300      	movs	r3, #0
 8006a96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a9e:	f107 0308 	add.w	r3, r7, #8
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f7ff ff30 	bl	800690a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f90c 	bl	8006cc8 <SDMMC_GetCmdError>
 8006ab0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ab2:	69fb      	ldr	r3, [r7, #28]
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3720      	adds	r7, #32
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b088      	sub	sp, #32
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006ac4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006ac8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006aca:	2308      	movs	r3, #8
 8006acc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ace:	2340      	movs	r3, #64	; 0x40
 8006ad0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ada:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006adc:	f107 0308 	add.w	r3, r7, #8
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f7ff ff11 	bl	800690a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 fb03 	bl	80070f4 <SDMMC_GetCmdResp7>
 8006aee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006af0:	69fb      	ldr	r3, [r7, #28]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3720      	adds	r7, #32
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b088      	sub	sp, #32
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006b08:	2337      	movs	r3, #55	; 0x37
 8006b0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b0c:	2340      	movs	r3, #64	; 0x40
 8006b0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b10:	2300      	movs	r3, #0
 8006b12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b1a:	f107 0308 	add.w	r3, r7, #8
 8006b1e:	4619      	mov	r1, r3
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f7ff fef2 	bl	800690a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b2a:	2137      	movs	r1, #55	; 0x37
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 f8f7 	bl	8006d20 <SDMMC_GetCmdResp1>
 8006b32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b34:	69fb      	ldr	r3, [r7, #28]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3720      	adds	r7, #32
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b088      	sub	sp, #32
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
 8006b46:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006b54:	2329      	movs	r3, #41	; 0x29
 8006b56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b58:	2340      	movs	r3, #64	; 0x40
 8006b5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b66:	f107 0308 	add.w	r3, r7, #8
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f7ff fecc 	bl	800690a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 fa0a 	bl	8006f8c <SDMMC_GetCmdResp3>
 8006b78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b7a:	69fb      	ldr	r3, [r7, #28]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3720      	adds	r7, #32
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b088      	sub	sp, #32
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006b92:	2306      	movs	r3, #6
 8006b94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b96:	2340      	movs	r3, #64	; 0x40
 8006b98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ba2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ba4:	f107 0308 	add.w	r3, r7, #8
 8006ba8:	4619      	mov	r1, r3
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f7ff fead 	bl	800690a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8006bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bb4:	2106      	movs	r1, #6
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f8b2 	bl	8006d20 <SDMMC_GetCmdResp1>
 8006bbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bbe:	69fb      	ldr	r3, [r7, #28]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3720      	adds	r7, #32
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b088      	sub	sp, #32
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006bd4:	2333      	movs	r3, #51	; 0x33
 8006bd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006bd8:	2340      	movs	r3, #64	; 0x40
 8006bda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006be0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006be4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006be6:	f107 0308 	add.w	r3, r7, #8
 8006bea:	4619      	mov	r1, r3
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f7ff fe8c 	bl	800690a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bf6:	2133      	movs	r1, #51	; 0x33
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 f891 	bl	8006d20 <SDMMC_GetCmdResp1>
 8006bfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c00:	69fb      	ldr	r3, [r7, #28]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3720      	adds	r7, #32
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b088      	sub	sp, #32
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006c16:	2302      	movs	r3, #2
 8006c18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006c1a:	23c0      	movs	r3, #192	; 0xc0
 8006c1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c28:	f107 0308 	add.w	r3, r7, #8
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f7ff fe6b 	bl	800690a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f961 	bl	8006efc <SDMMC_GetCmdResp2>
 8006c3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c3c:	69fb      	ldr	r3, [r7, #28]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3720      	adds	r7, #32
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b088      	sub	sp, #32
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
 8006c4e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006c54:	2309      	movs	r3, #9
 8006c56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006c58:	23c0      	movs	r3, #192	; 0xc0
 8006c5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c66:	f107 0308 	add.w	r3, r7, #8
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f7ff fe4c 	bl	800690a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f942 	bl	8006efc <SDMMC_GetCmdResp2>
 8006c78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c7a:	69fb      	ldr	r3, [r7, #28]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3720      	adds	r7, #32
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b088      	sub	sp, #32
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006c92:	2303      	movs	r3, #3
 8006c94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c96:	2340      	movs	r3, #64	; 0x40
 8006c98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ca2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ca4:	f107 0308 	add.w	r3, r7, #8
 8006ca8:	4619      	mov	r1, r3
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f7ff fe2d 	bl	800690a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006cb0:	683a      	ldr	r2, [r7, #0]
 8006cb2:	2103      	movs	r1, #3
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f9a7 	bl	8007008 <SDMMC_GetCmdResp6>
 8006cba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006cbc:	69fb      	ldr	r3, [r7, #28]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3720      	adds	r7, #32
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
	...

08006cc8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006cd0:	4b11      	ldr	r3, [pc, #68]	; (8006d18 <SDMMC_GetCmdError+0x50>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a11      	ldr	r2, [pc, #68]	; (8006d1c <SDMMC_GetCmdError+0x54>)
 8006cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cda:	0a5b      	lsrs	r3, r3, #9
 8006cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ce0:	fb02 f303 	mul.w	r3, r2, r3
 8006ce4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	1e5a      	subs	r2, r3, #1
 8006cea:	60fa      	str	r2, [r7, #12]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d102      	bne.n	8006cf6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006cf0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006cf4:	e009      	b.n	8006d0a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d0f1      	beq.n	8006ce6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	22c5      	movs	r2, #197	; 0xc5
 8006d06:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	20000118 	.word	0x20000118
 8006d1c:	10624dd3 	.word	0x10624dd3

08006d20 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b088      	sub	sp, #32
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	460b      	mov	r3, r1
 8006d2a:	607a      	str	r2, [r7, #4]
 8006d2c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006d2e:	4b70      	ldr	r3, [pc, #448]	; (8006ef0 <SDMMC_GetCmdResp1+0x1d0>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a70      	ldr	r2, [pc, #448]	; (8006ef4 <SDMMC_GetCmdResp1+0x1d4>)
 8006d34:	fba2 2303 	umull	r2, r3, r2, r3
 8006d38:	0a5a      	lsrs	r2, r3, #9
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	fb02 f303 	mul.w	r3, r2, r3
 8006d40:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	1e5a      	subs	r2, r3, #1
 8006d46:	61fa      	str	r2, [r7, #28]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d102      	bne.n	8006d52 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006d4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d50:	e0c9      	b.n	8006ee6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d56:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d0ef      	beq.n	8006d42 <SDMMC_GetCmdResp1+0x22>
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1ea      	bne.n	8006d42 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d70:	f003 0304 	and.w	r3, r3, #4
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d004      	beq.n	8006d82 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2204      	movs	r2, #4
 8006d7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006d7e:	2304      	movs	r3, #4
 8006d80:	e0b1      	b.n	8006ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d86:	f003 0301 	and.w	r3, r3, #1
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d004      	beq.n	8006d98 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2201      	movs	r2, #1
 8006d92:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e0a6      	b.n	8006ee6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	22c5      	movs	r2, #197	; 0xc5
 8006d9c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f7ff fddd 	bl	800695e <SDIO_GetCommandResponse>
 8006da4:	4603      	mov	r3, r0
 8006da6:	461a      	mov	r2, r3
 8006da8:	7afb      	ldrb	r3, [r7, #11]
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d001      	beq.n	8006db2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e099      	b.n	8006ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006db2:	2100      	movs	r1, #0
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f7ff fddf 	bl	8006978 <SDIO_GetResponse>
 8006dba:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006dbc:	697a      	ldr	r2, [r7, #20]
 8006dbe:	4b4e      	ldr	r3, [pc, #312]	; (8006ef8 <SDMMC_GetCmdResp1+0x1d8>)
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d101      	bne.n	8006dca <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	e08d      	b.n	8006ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	da02      	bge.n	8006dd6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006dd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006dd4:	e087      	b.n	8006ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d001      	beq.n	8006de4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006de0:	2340      	movs	r3, #64	; 0x40
 8006de2:	e080      	b.n	8006ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d001      	beq.n	8006df2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006dee:	2380      	movs	r3, #128	; 0x80
 8006df0:	e079      	b.n	8006ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d002      	beq.n	8006e02 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006dfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e00:	e071      	b.n	8006ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d002      	beq.n	8006e12 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006e0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e10:	e069      	b.n	8006ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006e1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e20:	e061      	b.n	8006ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d002      	beq.n	8006e32 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006e2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e30:	e059      	b.n	8006ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d002      	beq.n	8006e42 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e40:	e051      	b.n	8006ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d002      	beq.n	8006e52 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006e4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006e50:	e049      	b.n	8006ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d002      	beq.n	8006e62 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006e5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e60:	e041      	b.n	8006ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d002      	beq.n	8006e72 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006e6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e70:	e039      	b.n	8006ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d002      	beq.n	8006e82 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006e7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006e80:	e031      	b.n	8006ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d002      	beq.n	8006e92 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006e8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006e90:	e029      	b.n	8006ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d002      	beq.n	8006ea2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006e9c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006ea0:	e021      	b.n	8006ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d002      	beq.n	8006eb2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006eac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006eb0:	e019      	b.n	8006ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d002      	beq.n	8006ec2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006ebc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006ec0:	e011      	b.n	8006ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d002      	beq.n	8006ed2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006ecc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006ed0:	e009      	b.n	8006ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	f003 0308 	and.w	r3, r3, #8
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d002      	beq.n	8006ee2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006edc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006ee0:	e001      	b.n	8006ee6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006ee2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3720      	adds	r7, #32
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	20000118 	.word	0x20000118
 8006ef4:	10624dd3 	.word	0x10624dd3
 8006ef8:	fdffe008 	.word	0xfdffe008

08006efc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006f04:	4b1f      	ldr	r3, [pc, #124]	; (8006f84 <SDMMC_GetCmdResp2+0x88>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a1f      	ldr	r2, [pc, #124]	; (8006f88 <SDMMC_GetCmdResp2+0x8c>)
 8006f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f0e:	0a5b      	lsrs	r3, r3, #9
 8006f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f14:	fb02 f303 	mul.w	r3, r2, r3
 8006f18:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	1e5a      	subs	r2, r3, #1
 8006f1e:	60fa      	str	r2, [r7, #12]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d102      	bne.n	8006f2a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006f24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f28:	e026      	b.n	8006f78 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f2e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d0ef      	beq.n	8006f1a <SDMMC_GetCmdResp2+0x1e>
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1ea      	bne.n	8006f1a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f48:	f003 0304 	and.w	r3, r3, #4
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d004      	beq.n	8006f5a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2204      	movs	r2, #4
 8006f54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006f56:	2304      	movs	r3, #4
 8006f58:	e00e      	b.n	8006f78 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f5e:	f003 0301 	and.w	r3, r3, #1
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d004      	beq.n	8006f70 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e003      	b.n	8006f78 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	22c5      	movs	r2, #197	; 0xc5
 8006f74:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3714      	adds	r7, #20
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr
 8006f84:	20000118 	.word	0x20000118
 8006f88:	10624dd3 	.word	0x10624dd3

08006f8c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006f94:	4b1a      	ldr	r3, [pc, #104]	; (8007000 <SDMMC_GetCmdResp3+0x74>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a1a      	ldr	r2, [pc, #104]	; (8007004 <SDMMC_GetCmdResp3+0x78>)
 8006f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f9e:	0a5b      	lsrs	r3, r3, #9
 8006fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fa4:	fb02 f303 	mul.w	r3, r2, r3
 8006fa8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	1e5a      	subs	r2, r3, #1
 8006fae:	60fa      	str	r2, [r7, #12]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d102      	bne.n	8006fba <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006fb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006fb8:	e01b      	b.n	8006ff2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fbe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d0ef      	beq.n	8006faa <SDMMC_GetCmdResp3+0x1e>
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1ea      	bne.n	8006faa <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd8:	f003 0304 	and.w	r3, r3, #4
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d004      	beq.n	8006fea <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2204      	movs	r2, #4
 8006fe4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006fe6:	2304      	movs	r3, #4
 8006fe8:	e003      	b.n	8006ff2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	22c5      	movs	r2, #197	; 0xc5
 8006fee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3714      	adds	r7, #20
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	20000118 	.word	0x20000118
 8007004:	10624dd3 	.word	0x10624dd3

08007008 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b088      	sub	sp, #32
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	460b      	mov	r3, r1
 8007012:	607a      	str	r2, [r7, #4]
 8007014:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007016:	4b35      	ldr	r3, [pc, #212]	; (80070ec <SDMMC_GetCmdResp6+0xe4>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a35      	ldr	r2, [pc, #212]	; (80070f0 <SDMMC_GetCmdResp6+0xe8>)
 800701c:	fba2 2303 	umull	r2, r3, r2, r3
 8007020:	0a5b      	lsrs	r3, r3, #9
 8007022:	f241 3288 	movw	r2, #5000	; 0x1388
 8007026:	fb02 f303 	mul.w	r3, r2, r3
 800702a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	1e5a      	subs	r2, r3, #1
 8007030:	61fa      	str	r2, [r7, #28]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d102      	bne.n	800703c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007036:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800703a:	e052      	b.n	80070e2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007040:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007048:	2b00      	cmp	r3, #0
 800704a:	d0ef      	beq.n	800702c <SDMMC_GetCmdResp6+0x24>
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1ea      	bne.n	800702c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800705a:	f003 0304 	and.w	r3, r3, #4
 800705e:	2b00      	cmp	r3, #0
 8007060:	d004      	beq.n	800706c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2204      	movs	r2, #4
 8007066:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007068:	2304      	movs	r3, #4
 800706a:	e03a      	b.n	80070e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	2b00      	cmp	r3, #0
 8007076:	d004      	beq.n	8007082 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2201      	movs	r2, #1
 800707c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800707e:	2301      	movs	r3, #1
 8007080:	e02f      	b.n	80070e2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f7ff fc6b 	bl	800695e <SDIO_GetCommandResponse>
 8007088:	4603      	mov	r3, r0
 800708a:	461a      	mov	r2, r3
 800708c:	7afb      	ldrb	r3, [r7, #11]
 800708e:	4293      	cmp	r3, r2
 8007090:	d001      	beq.n	8007096 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007092:	2301      	movs	r3, #1
 8007094:	e025      	b.n	80070e2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	22c5      	movs	r2, #197	; 0xc5
 800709a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800709c:	2100      	movs	r1, #0
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f7ff fc6a 	bl	8006978 <SDIO_GetResponse>
 80070a4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d106      	bne.n	80070be <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	0c1b      	lsrs	r3, r3, #16
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80070ba:	2300      	movs	r3, #0
 80070bc:	e011      	b.n	80070e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d002      	beq.n	80070ce <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80070c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80070cc:	e009      	b.n	80070e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d002      	beq.n	80070de <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80070d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070dc:	e001      	b.n	80070e2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80070de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3720      	adds	r7, #32
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	20000118 	.word	0x20000118
 80070f0:	10624dd3 	.word	0x10624dd3

080070f4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80070fc:	4b22      	ldr	r3, [pc, #136]	; (8007188 <SDMMC_GetCmdResp7+0x94>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a22      	ldr	r2, [pc, #136]	; (800718c <SDMMC_GetCmdResp7+0x98>)
 8007102:	fba2 2303 	umull	r2, r3, r2, r3
 8007106:	0a5b      	lsrs	r3, r3, #9
 8007108:	f241 3288 	movw	r2, #5000	; 0x1388
 800710c:	fb02 f303 	mul.w	r3, r2, r3
 8007110:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	1e5a      	subs	r2, r3, #1
 8007116:	60fa      	str	r2, [r7, #12]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d102      	bne.n	8007122 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800711c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007120:	e02c      	b.n	800717c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007126:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800712e:	2b00      	cmp	r3, #0
 8007130:	d0ef      	beq.n	8007112 <SDMMC_GetCmdResp7+0x1e>
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1ea      	bne.n	8007112 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007140:	f003 0304 	and.w	r3, r3, #4
 8007144:	2b00      	cmp	r3, #0
 8007146:	d004      	beq.n	8007152 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2204      	movs	r2, #4
 800714c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800714e:	2304      	movs	r3, #4
 8007150:	e014      	b.n	800717c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	2b00      	cmp	r3, #0
 800715c:	d004      	beq.n	8007168 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2201      	movs	r2, #1
 8007162:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007164:	2301      	movs	r3, #1
 8007166:	e009      	b.n	800717c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800716c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007170:	2b00      	cmp	r3, #0
 8007172:	d002      	beq.n	800717a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2240      	movs	r2, #64	; 0x40
 8007178:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800717a:	2300      	movs	r3, #0
  
}
 800717c:	4618      	mov	r0, r3
 800717e:	3714      	adds	r7, #20
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr
 8007188:	20000118 	.word	0x20000118
 800718c:	10624dd3 	.word	0x10624dd3

08007190 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007190:	b084      	sub	sp, #16
 8007192:	b580      	push	{r7, lr}
 8007194:	b084      	sub	sp, #16
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
 800719a:	f107 001c 	add.w	r0, r7, #28
 800719e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80071a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d122      	bne.n	80071ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80071bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80071d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d105      	bne.n	80071e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f001 fb1c 	bl	8008820 <USB_CoreReset>
 80071e8:	4603      	mov	r3, r0
 80071ea:	73fb      	strb	r3, [r7, #15]
 80071ec:	e01a      	b.n	8007224 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f001 fb10 	bl	8008820 <USB_CoreReset>
 8007200:	4603      	mov	r3, r0
 8007202:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007206:	2b00      	cmp	r3, #0
 8007208:	d106      	bne.n	8007218 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	639a      	str	r2, [r3, #56]	; 0x38
 8007216:	e005      	b.n	8007224 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007226:	2b01      	cmp	r3, #1
 8007228:	d10b      	bne.n	8007242 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	f043 0206 	orr.w	r2, r3, #6
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f043 0220 	orr.w	r2, r3, #32
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007242:	7bfb      	ldrb	r3, [r7, #15]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800724e:	b004      	add	sp, #16
 8007250:	4770      	bx	lr
	...

08007254 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007254:	b480      	push	{r7}
 8007256:	b087      	sub	sp, #28
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	4613      	mov	r3, r2
 8007260:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007262:	79fb      	ldrb	r3, [r7, #7]
 8007264:	2b02      	cmp	r3, #2
 8007266:	d165      	bne.n	8007334 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	4a41      	ldr	r2, [pc, #260]	; (8007370 <USB_SetTurnaroundTime+0x11c>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d906      	bls.n	800727e <USB_SetTurnaroundTime+0x2a>
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	4a40      	ldr	r2, [pc, #256]	; (8007374 <USB_SetTurnaroundTime+0x120>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d202      	bcs.n	800727e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007278:	230f      	movs	r3, #15
 800727a:	617b      	str	r3, [r7, #20]
 800727c:	e062      	b.n	8007344 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	4a3c      	ldr	r2, [pc, #240]	; (8007374 <USB_SetTurnaroundTime+0x120>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d306      	bcc.n	8007294 <USB_SetTurnaroundTime+0x40>
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	4a3b      	ldr	r2, [pc, #236]	; (8007378 <USB_SetTurnaroundTime+0x124>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d202      	bcs.n	8007294 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800728e:	230e      	movs	r3, #14
 8007290:	617b      	str	r3, [r7, #20]
 8007292:	e057      	b.n	8007344 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	4a38      	ldr	r2, [pc, #224]	; (8007378 <USB_SetTurnaroundTime+0x124>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d306      	bcc.n	80072aa <USB_SetTurnaroundTime+0x56>
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	4a37      	ldr	r2, [pc, #220]	; (800737c <USB_SetTurnaroundTime+0x128>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d202      	bcs.n	80072aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80072a4:	230d      	movs	r3, #13
 80072a6:	617b      	str	r3, [r7, #20]
 80072a8:	e04c      	b.n	8007344 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	4a33      	ldr	r2, [pc, #204]	; (800737c <USB_SetTurnaroundTime+0x128>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d306      	bcc.n	80072c0 <USB_SetTurnaroundTime+0x6c>
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	4a32      	ldr	r2, [pc, #200]	; (8007380 <USB_SetTurnaroundTime+0x12c>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d802      	bhi.n	80072c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80072ba:	230c      	movs	r3, #12
 80072bc:	617b      	str	r3, [r7, #20]
 80072be:	e041      	b.n	8007344 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	4a2f      	ldr	r2, [pc, #188]	; (8007380 <USB_SetTurnaroundTime+0x12c>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d906      	bls.n	80072d6 <USB_SetTurnaroundTime+0x82>
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	4a2e      	ldr	r2, [pc, #184]	; (8007384 <USB_SetTurnaroundTime+0x130>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d802      	bhi.n	80072d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80072d0:	230b      	movs	r3, #11
 80072d2:	617b      	str	r3, [r7, #20]
 80072d4:	e036      	b.n	8007344 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	4a2a      	ldr	r2, [pc, #168]	; (8007384 <USB_SetTurnaroundTime+0x130>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d906      	bls.n	80072ec <USB_SetTurnaroundTime+0x98>
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	4a29      	ldr	r2, [pc, #164]	; (8007388 <USB_SetTurnaroundTime+0x134>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d802      	bhi.n	80072ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80072e6:	230a      	movs	r3, #10
 80072e8:	617b      	str	r3, [r7, #20]
 80072ea:	e02b      	b.n	8007344 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	4a26      	ldr	r2, [pc, #152]	; (8007388 <USB_SetTurnaroundTime+0x134>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d906      	bls.n	8007302 <USB_SetTurnaroundTime+0xae>
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	4a25      	ldr	r2, [pc, #148]	; (800738c <USB_SetTurnaroundTime+0x138>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d202      	bcs.n	8007302 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80072fc:	2309      	movs	r3, #9
 80072fe:	617b      	str	r3, [r7, #20]
 8007300:	e020      	b.n	8007344 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	4a21      	ldr	r2, [pc, #132]	; (800738c <USB_SetTurnaroundTime+0x138>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d306      	bcc.n	8007318 <USB_SetTurnaroundTime+0xc4>
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	4a20      	ldr	r2, [pc, #128]	; (8007390 <USB_SetTurnaroundTime+0x13c>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d802      	bhi.n	8007318 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007312:	2308      	movs	r3, #8
 8007314:	617b      	str	r3, [r7, #20]
 8007316:	e015      	b.n	8007344 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	4a1d      	ldr	r2, [pc, #116]	; (8007390 <USB_SetTurnaroundTime+0x13c>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d906      	bls.n	800732e <USB_SetTurnaroundTime+0xda>
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	4a1c      	ldr	r2, [pc, #112]	; (8007394 <USB_SetTurnaroundTime+0x140>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d202      	bcs.n	800732e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007328:	2307      	movs	r3, #7
 800732a:	617b      	str	r3, [r7, #20]
 800732c:	e00a      	b.n	8007344 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800732e:	2306      	movs	r3, #6
 8007330:	617b      	str	r3, [r7, #20]
 8007332:	e007      	b.n	8007344 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007334:	79fb      	ldrb	r3, [r7, #7]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d102      	bne.n	8007340 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800733a:	2309      	movs	r3, #9
 800733c:	617b      	str	r3, [r7, #20]
 800733e:	e001      	b.n	8007344 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007340:	2309      	movs	r3, #9
 8007342:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	68da      	ldr	r2, [r3, #12]
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	029b      	lsls	r3, r3, #10
 8007358:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800735c:	431a      	orrs	r2, r3
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	371c      	adds	r7, #28
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr
 8007370:	00d8acbf 	.word	0x00d8acbf
 8007374:	00e4e1c0 	.word	0x00e4e1c0
 8007378:	00f42400 	.word	0x00f42400
 800737c:	01067380 	.word	0x01067380
 8007380:	011a499f 	.word	0x011a499f
 8007384:	01312cff 	.word	0x01312cff
 8007388:	014ca43f 	.word	0x014ca43f
 800738c:	016e3600 	.word	0x016e3600
 8007390:	01a6ab1f 	.word	0x01a6ab1f
 8007394:	01e84800 	.word	0x01e84800

08007398 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	f043 0201 	orr.w	r2, r3, #1
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	370c      	adds	r7, #12
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr

080073ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073ba:	b480      	push	{r7}
 80073bc:	b083      	sub	sp, #12
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f023 0201 	bic.w	r2, r3, #1
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	460b      	mov	r3, r1
 80073e6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80073e8:	2300      	movs	r3, #0
 80073ea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80073f8:	78fb      	ldrb	r3, [r7, #3]
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d115      	bne.n	800742a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800740a:	2001      	movs	r0, #1
 800740c:	f7f9 f966 	bl	80006dc <HAL_Delay>
      ms++;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	3301      	adds	r3, #1
 8007414:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f001 f972 	bl	8008700 <USB_GetMode>
 800741c:	4603      	mov	r3, r0
 800741e:	2b01      	cmp	r3, #1
 8007420:	d01e      	beq.n	8007460 <USB_SetCurrentMode+0x84>
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2b31      	cmp	r3, #49	; 0x31
 8007426:	d9f0      	bls.n	800740a <USB_SetCurrentMode+0x2e>
 8007428:	e01a      	b.n	8007460 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800742a:	78fb      	ldrb	r3, [r7, #3]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d115      	bne.n	800745c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800743c:	2001      	movs	r0, #1
 800743e:	f7f9 f94d 	bl	80006dc <HAL_Delay>
      ms++;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	3301      	adds	r3, #1
 8007446:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f001 f959 	bl	8008700 <USB_GetMode>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d005      	beq.n	8007460 <USB_SetCurrentMode+0x84>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2b31      	cmp	r3, #49	; 0x31
 8007458:	d9f0      	bls.n	800743c <USB_SetCurrentMode+0x60>
 800745a:	e001      	b.n	8007460 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	e005      	b.n	800746c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2b32      	cmp	r3, #50	; 0x32
 8007464:	d101      	bne.n	800746a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e000      	b.n	800746c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3710      	adds	r7, #16
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007474:	b084      	sub	sp, #16
 8007476:	b580      	push	{r7, lr}
 8007478:	b086      	sub	sp, #24
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
 800747e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007482:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007486:	2300      	movs	r3, #0
 8007488:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800748e:	2300      	movs	r3, #0
 8007490:	613b      	str	r3, [r7, #16]
 8007492:	e009      	b.n	80074a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	3340      	adds	r3, #64	; 0x40
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	4413      	add	r3, r2
 800749e:	2200      	movs	r2, #0
 80074a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	3301      	adds	r3, #1
 80074a6:	613b      	str	r3, [r7, #16]
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	2b0e      	cmp	r3, #14
 80074ac:	d9f2      	bls.n	8007494 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80074ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d11c      	bne.n	80074ee <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074c2:	f043 0302 	orr.w	r3, r3, #2
 80074c6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	639a      	str	r2, [r3, #56]	; 0x38
 80074ec:	e00b      	b.n	8007506 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800750c:	461a      	mov	r2, r3
 800750e:	2300      	movs	r3, #0
 8007510:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007518:	4619      	mov	r1, r3
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007520:	461a      	mov	r2, r3
 8007522:	680b      	ldr	r3, [r1, #0]
 8007524:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007528:	2b01      	cmp	r3, #1
 800752a:	d10c      	bne.n	8007546 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800752c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752e:	2b00      	cmp	r3, #0
 8007530:	d104      	bne.n	800753c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007532:	2100      	movs	r1, #0
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f945 	bl	80077c4 <USB_SetDevSpeed>
 800753a:	e008      	b.n	800754e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800753c:	2101      	movs	r1, #1
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f940 	bl	80077c4 <USB_SetDevSpeed>
 8007544:	e003      	b.n	800754e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007546:	2103      	movs	r1, #3
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f93b 	bl	80077c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800754e:	2110      	movs	r1, #16
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 f8f3 	bl	800773c <USB_FlushTxFifo>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d001      	beq.n	8007560 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 f90f 	bl	8007784 <USB_FlushRxFifo>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d001      	beq.n	8007570 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007576:	461a      	mov	r2, r3
 8007578:	2300      	movs	r3, #0
 800757a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007582:	461a      	mov	r2, r3
 8007584:	2300      	movs	r3, #0
 8007586:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800758e:	461a      	mov	r2, r3
 8007590:	2300      	movs	r3, #0
 8007592:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007594:	2300      	movs	r3, #0
 8007596:	613b      	str	r3, [r7, #16]
 8007598:	e043      	b.n	8007622 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	015a      	lsls	r2, r3, #5
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	4413      	add	r3, r2
 80075a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075b0:	d118      	bne.n	80075e4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d10a      	bne.n	80075ce <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	015a      	lsls	r2, r3, #5
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	4413      	add	r3, r2
 80075c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c4:	461a      	mov	r2, r3
 80075c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80075ca:	6013      	str	r3, [r2, #0]
 80075cc:	e013      	b.n	80075f6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	015a      	lsls	r2, r3, #5
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	4413      	add	r3, r2
 80075d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075da:	461a      	mov	r2, r3
 80075dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80075e0:	6013      	str	r3, [r2, #0]
 80075e2:	e008      	b.n	80075f6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	015a      	lsls	r2, r3, #5
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	4413      	add	r3, r2
 80075ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075f0:	461a      	mov	r2, r3
 80075f2:	2300      	movs	r3, #0
 80075f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	015a      	lsls	r2, r3, #5
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	4413      	add	r3, r2
 80075fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007602:	461a      	mov	r2, r3
 8007604:	2300      	movs	r3, #0
 8007606:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	015a      	lsls	r2, r3, #5
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	4413      	add	r3, r2
 8007610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007614:	461a      	mov	r2, r3
 8007616:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800761a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	3301      	adds	r3, #1
 8007620:	613b      	str	r3, [r7, #16]
 8007622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007624:	693a      	ldr	r2, [r7, #16]
 8007626:	429a      	cmp	r2, r3
 8007628:	d3b7      	bcc.n	800759a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800762a:	2300      	movs	r3, #0
 800762c:	613b      	str	r3, [r7, #16]
 800762e:	e043      	b.n	80076b8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	015a      	lsls	r2, r3, #5
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	4413      	add	r3, r2
 8007638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007642:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007646:	d118      	bne.n	800767a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d10a      	bne.n	8007664 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	015a      	lsls	r2, r3, #5
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	4413      	add	r3, r2
 8007656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800765a:	461a      	mov	r2, r3
 800765c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007660:	6013      	str	r3, [r2, #0]
 8007662:	e013      	b.n	800768c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	015a      	lsls	r2, r3, #5
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	4413      	add	r3, r2
 800766c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007670:	461a      	mov	r2, r3
 8007672:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007676:	6013      	str	r3, [r2, #0]
 8007678:	e008      	b.n	800768c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	015a      	lsls	r2, r3, #5
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	4413      	add	r3, r2
 8007682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007686:	461a      	mov	r2, r3
 8007688:	2300      	movs	r3, #0
 800768a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	015a      	lsls	r2, r3, #5
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	4413      	add	r3, r2
 8007694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007698:	461a      	mov	r2, r3
 800769a:	2300      	movs	r3, #0
 800769c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	015a      	lsls	r2, r3, #5
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	4413      	add	r3, r2
 80076a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076aa:	461a      	mov	r2, r3
 80076ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80076b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	3301      	adds	r3, #1
 80076b6:	613b      	str	r3, [r7, #16]
 80076b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ba:	693a      	ldr	r2, [r7, #16]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d3b7      	bcc.n	8007630 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076c6:	691b      	ldr	r3, [r3, #16]
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80076e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80076e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d105      	bne.n	80076f4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	f043 0210 	orr.w	r2, r3, #16
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	699a      	ldr	r2, [r3, #24]
 80076f8:	4b0f      	ldr	r3, [pc, #60]	; (8007738 <USB_DevInit+0x2c4>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007702:	2b00      	cmp	r3, #0
 8007704:	d005      	beq.n	8007712 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	f043 0208 	orr.w	r2, r3, #8
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007714:	2b01      	cmp	r3, #1
 8007716:	d107      	bne.n	8007728 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	699b      	ldr	r3, [r3, #24]
 800771c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007720:	f043 0304 	orr.w	r3, r3, #4
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007728:	7dfb      	ldrb	r3, [r7, #23]
}
 800772a:	4618      	mov	r0, r3
 800772c:	3718      	adds	r7, #24
 800772e:	46bd      	mov	sp, r7
 8007730:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007734:	b004      	add	sp, #16
 8007736:	4770      	bx	lr
 8007738:	803c3800 	.word	0x803c3800

0800773c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007746:	2300      	movs	r3, #0
 8007748:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	019b      	lsls	r3, r3, #6
 800774e:	f043 0220 	orr.w	r2, r3, #32
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	3301      	adds	r3, #1
 800775a:	60fb      	str	r3, [r7, #12]
 800775c:	4a08      	ldr	r2, [pc, #32]	; (8007780 <USB_FlushTxFifo+0x44>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d901      	bls.n	8007766 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007762:	2303      	movs	r3, #3
 8007764:	e006      	b.n	8007774 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	f003 0320 	and.w	r3, r3, #32
 800776e:	2b20      	cmp	r3, #32
 8007770:	d0f1      	beq.n	8007756 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3714      	adds	r7, #20
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr
 8007780:	00030d40 	.word	0x00030d40

08007784 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800778c:	2300      	movs	r3, #0
 800778e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2210      	movs	r2, #16
 8007794:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	3301      	adds	r3, #1
 800779a:	60fb      	str	r3, [r7, #12]
 800779c:	4a08      	ldr	r2, [pc, #32]	; (80077c0 <USB_FlushRxFifo+0x3c>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d901      	bls.n	80077a6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80077a2:	2303      	movs	r3, #3
 80077a4:	e006      	b.n	80077b4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	f003 0310 	and.w	r3, r3, #16
 80077ae:	2b10      	cmp	r3, #16
 80077b0:	d0f1      	beq.n	8007796 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3714      	adds	r7, #20
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr
 80077c0:	00030d40 	.word	0x00030d40

080077c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	460b      	mov	r3, r1
 80077ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	78fb      	ldrb	r3, [r7, #3]
 80077de:	68f9      	ldr	r1, [r7, #12]
 80077e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077e4:	4313      	orrs	r3, r2
 80077e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3714      	adds	r7, #20
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b087      	sub	sp, #28
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f003 0306 	and.w	r3, r3, #6
 800780e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d102      	bne.n	800781c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007816:	2300      	movs	r3, #0
 8007818:	75fb      	strb	r3, [r7, #23]
 800781a:	e00a      	b.n	8007832 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2b02      	cmp	r3, #2
 8007820:	d002      	beq.n	8007828 <USB_GetDevSpeed+0x32>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2b06      	cmp	r3, #6
 8007826:	d102      	bne.n	800782e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007828:	2302      	movs	r3, #2
 800782a:	75fb      	strb	r3, [r7, #23]
 800782c:	e001      	b.n	8007832 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800782e:	230f      	movs	r3, #15
 8007830:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007832:	7dfb      	ldrb	r3, [r7, #23]
}
 8007834:	4618      	mov	r0, r3
 8007836:	371c      	adds	r7, #28
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	785b      	ldrb	r3, [r3, #1]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d13a      	bne.n	80078d2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007862:	69da      	ldr	r2, [r3, #28]
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	f003 030f 	and.w	r3, r3, #15
 800786c:	2101      	movs	r1, #1
 800786e:	fa01 f303 	lsl.w	r3, r1, r3
 8007872:	b29b      	uxth	r3, r3
 8007874:	68f9      	ldr	r1, [r7, #12]
 8007876:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800787a:	4313      	orrs	r3, r2
 800787c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	015a      	lsls	r2, r3, #5
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	4413      	add	r3, r2
 8007886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d155      	bne.n	8007940 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	015a      	lsls	r2, r3, #5
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	4413      	add	r3, r2
 800789c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	78db      	ldrb	r3, [r3, #3]
 80078ae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80078b0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	059b      	lsls	r3, r3, #22
 80078b6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80078b8:	4313      	orrs	r3, r2
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	0151      	lsls	r1, r2, #5
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	440a      	add	r2, r1
 80078c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078ce:	6013      	str	r3, [r2, #0]
 80078d0:	e036      	b.n	8007940 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078d8:	69da      	ldr	r2, [r3, #28]
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	f003 030f 	and.w	r3, r3, #15
 80078e2:	2101      	movs	r1, #1
 80078e4:	fa01 f303 	lsl.w	r3, r1, r3
 80078e8:	041b      	lsls	r3, r3, #16
 80078ea:	68f9      	ldr	r1, [r7, #12]
 80078ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078f0:	4313      	orrs	r3, r2
 80078f2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	015a      	lsls	r2, r3, #5
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	4413      	add	r3, r2
 80078fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007906:	2b00      	cmp	r3, #0
 8007908:	d11a      	bne.n	8007940 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	015a      	lsls	r2, r3, #5
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	4413      	add	r3, r2
 8007912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	78db      	ldrb	r3, [r3, #3]
 8007924:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007926:	430b      	orrs	r3, r1
 8007928:	4313      	orrs	r3, r2
 800792a:	68ba      	ldr	r2, [r7, #8]
 800792c:	0151      	lsls	r1, r2, #5
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	440a      	add	r2, r1
 8007932:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800793a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800793e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3714      	adds	r7, #20
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
	...

08007950 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007950:	b480      	push	{r7}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	785b      	ldrb	r3, [r3, #1]
 8007968:	2b01      	cmp	r3, #1
 800796a:	d161      	bne.n	8007a30 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	015a      	lsls	r2, r3, #5
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	4413      	add	r3, r2
 8007974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800797e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007982:	d11f      	bne.n	80079c4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	015a      	lsls	r2, r3, #5
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	4413      	add	r3, r2
 800798c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68ba      	ldr	r2, [r7, #8]
 8007994:	0151      	lsls	r1, r2, #5
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	440a      	add	r2, r1
 800799a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800799e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80079a2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	015a      	lsls	r2, r3, #5
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	4413      	add	r3, r2
 80079ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	0151      	lsls	r1, r2, #5
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	440a      	add	r2, r1
 80079ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	f003 030f 	and.w	r3, r3, #15
 80079d4:	2101      	movs	r1, #1
 80079d6:	fa01 f303 	lsl.w	r3, r1, r3
 80079da:	b29b      	uxth	r3, r3
 80079dc:	43db      	mvns	r3, r3
 80079de:	68f9      	ldr	r1, [r7, #12]
 80079e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079e4:	4013      	ands	r3, r2
 80079e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ee:	69da      	ldr	r2, [r3, #28]
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	f003 030f 	and.w	r3, r3, #15
 80079f8:	2101      	movs	r1, #1
 80079fa:	fa01 f303 	lsl.w	r3, r1, r3
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	43db      	mvns	r3, r3
 8007a02:	68f9      	ldr	r1, [r7, #12]
 8007a04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a08:	4013      	ands	r3, r2
 8007a0a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	015a      	lsls	r2, r3, #5
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	4413      	add	r3, r2
 8007a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	0159      	lsls	r1, r3, #5
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	440b      	add	r3, r1
 8007a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a26:	4619      	mov	r1, r3
 8007a28:	4b35      	ldr	r3, [pc, #212]	; (8007b00 <USB_DeactivateEndpoint+0x1b0>)
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	600b      	str	r3, [r1, #0]
 8007a2e:	e060      	b.n	8007af2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	015a      	lsls	r2, r3, #5
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	4413      	add	r3, r2
 8007a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a46:	d11f      	bne.n	8007a88 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	015a      	lsls	r2, r3, #5
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	4413      	add	r3, r2
 8007a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	0151      	lsls	r1, r2, #5
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	440a      	add	r2, r1
 8007a5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a66:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	015a      	lsls	r2, r3, #5
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	4413      	add	r3, r2
 8007a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	68ba      	ldr	r2, [r7, #8]
 8007a78:	0151      	lsls	r1, r2, #5
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	440a      	add	r2, r1
 8007a7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	f003 030f 	and.w	r3, r3, #15
 8007a98:	2101      	movs	r1, #1
 8007a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a9e:	041b      	lsls	r3, r3, #16
 8007aa0:	43db      	mvns	r3, r3
 8007aa2:	68f9      	ldr	r1, [r7, #12]
 8007aa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ab2:	69da      	ldr	r2, [r3, #28]
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	f003 030f 	and.w	r3, r3, #15
 8007abc:	2101      	movs	r1, #1
 8007abe:	fa01 f303 	lsl.w	r3, r1, r3
 8007ac2:	041b      	lsls	r3, r3, #16
 8007ac4:	43db      	mvns	r3, r3
 8007ac6:	68f9      	ldr	r1, [r7, #12]
 8007ac8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007acc:	4013      	ands	r3, r2
 8007ace:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	015a      	lsls	r2, r3, #5
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	0159      	lsls	r1, r3, #5
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	440b      	add	r3, r1
 8007ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aea:	4619      	mov	r1, r3
 8007aec:	4b05      	ldr	r3, [pc, #20]	; (8007b04 <USB_DeactivateEndpoint+0x1b4>)
 8007aee:	4013      	ands	r3, r2
 8007af0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3714      	adds	r7, #20
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr
 8007b00:	ec337800 	.word	0xec337800
 8007b04:	eff37800 	.word	0xeff37800

08007b08 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b08a      	sub	sp, #40	; 0x28
 8007b0c:	af02      	add	r7, sp, #8
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	4613      	mov	r3, r2
 8007b14:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	785b      	ldrb	r3, [r3, #1]
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	f040 815c 	bne.w	8007de2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d132      	bne.n	8007b98 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	015a      	lsls	r2, r3, #5
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	4413      	add	r3, r2
 8007b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	69ba      	ldr	r2, [r7, #24]
 8007b42:	0151      	lsls	r1, r2, #5
 8007b44:	69fa      	ldr	r2, [r7, #28]
 8007b46:	440a      	add	r2, r1
 8007b48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	015a      	lsls	r2, r3, #5
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	69ba      	ldr	r2, [r7, #24]
 8007b66:	0151      	lsls	r1, r2, #5
 8007b68:	69fa      	ldr	r2, [r7, #28]
 8007b6a:	440a      	add	r2, r1
 8007b6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	015a      	lsls	r2, r3, #5
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	69ba      	ldr	r2, [r7, #24]
 8007b86:	0151      	lsls	r1, r2, #5
 8007b88:	69fa      	ldr	r2, [r7, #28]
 8007b8a:	440a      	add	r2, r1
 8007b8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b90:	0cdb      	lsrs	r3, r3, #19
 8007b92:	04db      	lsls	r3, r3, #19
 8007b94:	6113      	str	r3, [r2, #16]
 8007b96:	e074      	b.n	8007c82 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	015a      	lsls	r2, r3, #5
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	69ba      	ldr	r2, [r7, #24]
 8007ba8:	0151      	lsls	r1, r2, #5
 8007baa:	69fa      	ldr	r2, [r7, #28]
 8007bac:	440a      	add	r2, r1
 8007bae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bb2:	0cdb      	lsrs	r3, r3, #19
 8007bb4:	04db      	lsls	r3, r3, #19
 8007bb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	015a      	lsls	r2, r3, #5
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	4413      	add	r3, r2
 8007bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	69ba      	ldr	r2, [r7, #24]
 8007bc8:	0151      	lsls	r1, r2, #5
 8007bca:	69fa      	ldr	r2, [r7, #28]
 8007bcc:	440a      	add	r2, r1
 8007bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bd2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007bd6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007bda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	015a      	lsls	r2, r3, #5
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	4413      	add	r3, r2
 8007be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007be8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	6959      	ldr	r1, [r3, #20]
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	440b      	add	r3, r1
 8007bf4:	1e59      	subs	r1, r3, #1
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8007bfe:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007c00:	4b9d      	ldr	r3, [pc, #628]	; (8007e78 <USB_EPStartXfer+0x370>)
 8007c02:	400b      	ands	r3, r1
 8007c04:	69b9      	ldr	r1, [r7, #24]
 8007c06:	0148      	lsls	r0, r1, #5
 8007c08:	69f9      	ldr	r1, [r7, #28]
 8007c0a:	4401      	add	r1, r0
 8007c0c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007c10:	4313      	orrs	r3, r2
 8007c12:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	015a      	lsls	r2, r3, #5
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c20:	691a      	ldr	r2, [r3, #16]
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c2a:	69b9      	ldr	r1, [r7, #24]
 8007c2c:	0148      	lsls	r0, r1, #5
 8007c2e:	69f9      	ldr	r1, [r7, #28]
 8007c30:	4401      	add	r1, r0
 8007c32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007c36:	4313      	orrs	r3, r2
 8007c38:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	78db      	ldrb	r3, [r3, #3]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d11f      	bne.n	8007c82 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	015a      	lsls	r2, r3, #5
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	4413      	add	r3, r2
 8007c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	69ba      	ldr	r2, [r7, #24]
 8007c52:	0151      	lsls	r1, r2, #5
 8007c54:	69fa      	ldr	r2, [r7, #28]
 8007c56:	440a      	add	r2, r1
 8007c58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c5c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007c60:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	015a      	lsls	r2, r3, #5
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	4413      	add	r3, r2
 8007c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	69ba      	ldr	r2, [r7, #24]
 8007c72:	0151      	lsls	r1, r2, #5
 8007c74:	69fa      	ldr	r2, [r7, #28]
 8007c76:	440a      	add	r2, r1
 8007c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c80:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007c82:	79fb      	ldrb	r3, [r7, #7]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d14b      	bne.n	8007d20 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	691b      	ldr	r3, [r3, #16]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d009      	beq.n	8007ca4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	015a      	lsls	r2, r3, #5
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	4413      	add	r3, r2
 8007c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	78db      	ldrb	r3, [r3, #3]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d128      	bne.n	8007cfe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d110      	bne.n	8007cde <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	015a      	lsls	r2, r3, #5
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	69ba      	ldr	r2, [r7, #24]
 8007ccc:	0151      	lsls	r1, r2, #5
 8007cce:	69fa      	ldr	r2, [r7, #28]
 8007cd0:	440a      	add	r2, r1
 8007cd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007cda:	6013      	str	r3, [r2, #0]
 8007cdc:	e00f      	b.n	8007cfe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	015a      	lsls	r2, r3, #5
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	69ba      	ldr	r2, [r7, #24]
 8007cee:	0151      	lsls	r1, r2, #5
 8007cf0:	69fa      	ldr	r2, [r7, #28]
 8007cf2:	440a      	add	r2, r1
 8007cf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cfc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	015a      	lsls	r2, r3, #5
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	4413      	add	r3, r2
 8007d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	69ba      	ldr	r2, [r7, #24]
 8007d0e:	0151      	lsls	r1, r2, #5
 8007d10:	69fa      	ldr	r2, [r7, #28]
 8007d12:	440a      	add	r2, r1
 8007d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d1c:	6013      	str	r3, [r2, #0]
 8007d1e:	e12f      	b.n	8007f80 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	69ba      	ldr	r2, [r7, #24]
 8007d30:	0151      	lsls	r1, r2, #5
 8007d32:	69fa      	ldr	r2, [r7, #28]
 8007d34:	440a      	add	r2, r1
 8007d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d3e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	78db      	ldrb	r3, [r3, #3]
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d015      	beq.n	8007d74 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	695b      	ldr	r3, [r3, #20]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f000 8117 	beq.w	8007f80 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	f003 030f 	and.w	r3, r3, #15
 8007d62:	2101      	movs	r1, #1
 8007d64:	fa01 f303 	lsl.w	r3, r1, r3
 8007d68:	69f9      	ldr	r1, [r7, #28]
 8007d6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	634b      	str	r3, [r1, #52]	; 0x34
 8007d72:	e105      	b.n	8007f80 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d110      	bne.n	8007da6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	015a      	lsls	r2, r3, #5
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	69ba      	ldr	r2, [r7, #24]
 8007d94:	0151      	lsls	r1, r2, #5
 8007d96:	69fa      	ldr	r2, [r7, #28]
 8007d98:	440a      	add	r2, r1
 8007d9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007da2:	6013      	str	r3, [r2, #0]
 8007da4:	e00f      	b.n	8007dc6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	015a      	lsls	r2, r3, #5
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	4413      	add	r3, r2
 8007dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	69ba      	ldr	r2, [r7, #24]
 8007db6:	0151      	lsls	r1, r2, #5
 8007db8:	69fa      	ldr	r2, [r7, #28]
 8007dba:	440a      	add	r2, r1
 8007dbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dc4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	68d9      	ldr	r1, [r3, #12]
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	781a      	ldrb	r2, [r3, #0]
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	b298      	uxth	r0, r3
 8007dd4:	79fb      	ldrb	r3, [r7, #7]
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	4603      	mov	r3, r0
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f000 fa2b 	bl	8008236 <USB_WritePacket>
 8007de0:	e0ce      	b.n	8007f80 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	015a      	lsls	r2, r3, #5
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	4413      	add	r3, r2
 8007dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	69ba      	ldr	r2, [r7, #24]
 8007df2:	0151      	lsls	r1, r2, #5
 8007df4:	69fa      	ldr	r2, [r7, #28]
 8007df6:	440a      	add	r2, r1
 8007df8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dfc:	0cdb      	lsrs	r3, r3, #19
 8007dfe:	04db      	lsls	r3, r3, #19
 8007e00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	015a      	lsls	r2, r3, #5
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	4413      	add	r3, r2
 8007e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e0e:	691b      	ldr	r3, [r3, #16]
 8007e10:	69ba      	ldr	r2, [r7, #24]
 8007e12:	0151      	lsls	r1, r2, #5
 8007e14:	69fa      	ldr	r2, [r7, #28]
 8007e16:	440a      	add	r2, r1
 8007e18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e24:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	695b      	ldr	r3, [r3, #20]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d126      	bne.n	8007e7c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	015a      	lsls	r2, r3, #5
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e3a:	691a      	ldr	r2, [r3, #16]
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e44:	69b9      	ldr	r1, [r7, #24]
 8007e46:	0148      	lsls	r0, r1, #5
 8007e48:	69f9      	ldr	r1, [r7, #28]
 8007e4a:	4401      	add	r1, r0
 8007e4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007e50:	4313      	orrs	r3, r2
 8007e52:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	015a      	lsls	r2, r3, #5
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	69ba      	ldr	r2, [r7, #24]
 8007e64:	0151      	lsls	r1, r2, #5
 8007e66:	69fa      	ldr	r2, [r7, #28]
 8007e68:	440a      	add	r2, r1
 8007e6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e72:	6113      	str	r3, [r2, #16]
 8007e74:	e036      	b.n	8007ee4 <USB_EPStartXfer+0x3dc>
 8007e76:	bf00      	nop
 8007e78:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	695a      	ldr	r2, [r3, #20]
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	4413      	add	r3, r2
 8007e86:	1e5a      	subs	r2, r3, #1
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e90:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	015a      	lsls	r2, r3, #5
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	4413      	add	r3, r2
 8007e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e9e:	691a      	ldr	r2, [r3, #16]
 8007ea0:	8afb      	ldrh	r3, [r7, #22]
 8007ea2:	04d9      	lsls	r1, r3, #19
 8007ea4:	4b39      	ldr	r3, [pc, #228]	; (8007f8c <USB_EPStartXfer+0x484>)
 8007ea6:	400b      	ands	r3, r1
 8007ea8:	69b9      	ldr	r1, [r7, #24]
 8007eaa:	0148      	lsls	r0, r1, #5
 8007eac:	69f9      	ldr	r1, [r7, #28]
 8007eae:	4401      	add	r1, r0
 8007eb0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	015a      	lsls	r2, r3, #5
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ec4:	691a      	ldr	r2, [r3, #16]
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	8af9      	ldrh	r1, [r7, #22]
 8007ecc:	fb01 f303 	mul.w	r3, r1, r3
 8007ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ed4:	69b9      	ldr	r1, [r7, #24]
 8007ed6:	0148      	lsls	r0, r1, #5
 8007ed8:	69f9      	ldr	r1, [r7, #28]
 8007eda:	4401      	add	r1, r0
 8007edc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007ee4:	79fb      	ldrb	r3, [r7, #7]
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d10d      	bne.n	8007f06 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d009      	beq.n	8007f06 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	68d9      	ldr	r1, [r3, #12]
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	015a      	lsls	r2, r3, #5
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	4413      	add	r3, r2
 8007efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f02:	460a      	mov	r2, r1
 8007f04:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	78db      	ldrb	r3, [r3, #3]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d128      	bne.n	8007f60 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d110      	bne.n	8007f40 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	015a      	lsls	r2, r3, #5
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	4413      	add	r3, r2
 8007f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	69ba      	ldr	r2, [r7, #24]
 8007f2e:	0151      	lsls	r1, r2, #5
 8007f30:	69fa      	ldr	r2, [r7, #28]
 8007f32:	440a      	add	r2, r1
 8007f34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f3c:	6013      	str	r3, [r2, #0]
 8007f3e:	e00f      	b.n	8007f60 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	015a      	lsls	r2, r3, #5
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	4413      	add	r3, r2
 8007f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	69ba      	ldr	r2, [r7, #24]
 8007f50:	0151      	lsls	r1, r2, #5
 8007f52:	69fa      	ldr	r2, [r7, #28]
 8007f54:	440a      	add	r2, r1
 8007f56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f5e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	015a      	lsls	r2, r3, #5
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	4413      	add	r3, r2
 8007f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	69ba      	ldr	r2, [r7, #24]
 8007f70:	0151      	lsls	r1, r2, #5
 8007f72:	69fa      	ldr	r2, [r7, #28]
 8007f74:	440a      	add	r2, r1
 8007f76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3720      	adds	r7, #32
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	1ff80000 	.word	0x1ff80000

08007f90 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b087      	sub	sp, #28
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	785b      	ldrb	r3, [r3, #1]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	f040 80cd 	bne.w	800814c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d132      	bne.n	8008020 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	015a      	lsls	r2, r3, #5
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	693a      	ldr	r2, [r7, #16]
 8007fca:	0151      	lsls	r1, r2, #5
 8007fcc:	697a      	ldr	r2, [r7, #20]
 8007fce:	440a      	add	r2, r1
 8007fd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007fd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007fdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	015a      	lsls	r2, r3, #5
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	0151      	lsls	r1, r2, #5
 8007ff0:	697a      	ldr	r2, [r7, #20]
 8007ff2:	440a      	add	r2, r1
 8007ff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ff8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ffc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	015a      	lsls	r2, r3, #5
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	4413      	add	r3, r2
 8008006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	693a      	ldr	r2, [r7, #16]
 800800e:	0151      	lsls	r1, r2, #5
 8008010:	697a      	ldr	r2, [r7, #20]
 8008012:	440a      	add	r2, r1
 8008014:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008018:	0cdb      	lsrs	r3, r3, #19
 800801a:	04db      	lsls	r3, r3, #19
 800801c:	6113      	str	r3, [r2, #16]
 800801e:	e04e      	b.n	80080be <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	015a      	lsls	r2, r3, #5
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	4413      	add	r3, r2
 8008028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	693a      	ldr	r2, [r7, #16]
 8008030:	0151      	lsls	r1, r2, #5
 8008032:	697a      	ldr	r2, [r7, #20]
 8008034:	440a      	add	r2, r1
 8008036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800803a:	0cdb      	lsrs	r3, r3, #19
 800803c:	04db      	lsls	r3, r3, #19
 800803e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	015a      	lsls	r2, r3, #5
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	4413      	add	r3, r2
 8008048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	693a      	ldr	r2, [r7, #16]
 8008050:	0151      	lsls	r1, r2, #5
 8008052:	697a      	ldr	r2, [r7, #20]
 8008054:	440a      	add	r2, r1
 8008056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800805a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800805e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008062:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	695a      	ldr	r2, [r3, #20]
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	429a      	cmp	r2, r3
 800806e:	d903      	bls.n	8008078 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	689a      	ldr	r2, [r3, #8]
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	015a      	lsls	r2, r3, #5
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	4413      	add	r3, r2
 8008080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	693a      	ldr	r2, [r7, #16]
 8008088:	0151      	lsls	r1, r2, #5
 800808a:	697a      	ldr	r2, [r7, #20]
 800808c:	440a      	add	r2, r1
 800808e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008092:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008096:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	015a      	lsls	r2, r3, #5
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	4413      	add	r3, r2
 80080a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080a4:	691a      	ldr	r2, [r3, #16]
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	695b      	ldr	r3, [r3, #20]
 80080aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080ae:	6939      	ldr	r1, [r7, #16]
 80080b0:	0148      	lsls	r0, r1, #5
 80080b2:	6979      	ldr	r1, [r7, #20]
 80080b4:	4401      	add	r1, r0
 80080b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80080ba:	4313      	orrs	r3, r2
 80080bc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80080be:	79fb      	ldrb	r3, [r7, #7]
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d11e      	bne.n	8008102 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d009      	beq.n	80080e0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	015a      	lsls	r2, r3, #5
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	4413      	add	r3, r2
 80080d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d8:	461a      	mov	r2, r3
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	015a      	lsls	r2, r3, #5
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	4413      	add	r3, r2
 80080e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	693a      	ldr	r2, [r7, #16]
 80080f0:	0151      	lsls	r1, r2, #5
 80080f2:	697a      	ldr	r2, [r7, #20]
 80080f4:	440a      	add	r2, r1
 80080f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80080fe:	6013      	str	r3, [r2, #0]
 8008100:	e092      	b.n	8008228 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	015a      	lsls	r2, r3, #5
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	4413      	add	r3, r2
 800810a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	693a      	ldr	r2, [r7, #16]
 8008112:	0151      	lsls	r1, r2, #5
 8008114:	697a      	ldr	r2, [r7, #20]
 8008116:	440a      	add	r2, r1
 8008118:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800811c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008120:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d07e      	beq.n	8008228 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	f003 030f 	and.w	r3, r3, #15
 800813a:	2101      	movs	r1, #1
 800813c:	fa01 f303 	lsl.w	r3, r1, r3
 8008140:	6979      	ldr	r1, [r7, #20]
 8008142:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008146:	4313      	orrs	r3, r2
 8008148:	634b      	str	r3, [r1, #52]	; 0x34
 800814a:	e06d      	b.n	8008228 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	015a      	lsls	r2, r3, #5
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	4413      	add	r3, r2
 8008154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	693a      	ldr	r2, [r7, #16]
 800815c:	0151      	lsls	r1, r2, #5
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	440a      	add	r2, r1
 8008162:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008166:	0cdb      	lsrs	r3, r3, #19
 8008168:	04db      	lsls	r3, r3, #19
 800816a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	015a      	lsls	r2, r3, #5
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	4413      	add	r3, r2
 8008174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	693a      	ldr	r2, [r7, #16]
 800817c:	0151      	lsls	r1, r2, #5
 800817e:	697a      	ldr	r2, [r7, #20]
 8008180:	440a      	add	r2, r1
 8008182:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008186:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800818a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800818e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	695b      	ldr	r3, [r3, #20]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d003      	beq.n	80081a0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	689a      	ldr	r2, [r3, #8]
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	015a      	lsls	r2, r3, #5
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	4413      	add	r3, r2
 80081a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	693a      	ldr	r2, [r7, #16]
 80081b0:	0151      	lsls	r1, r2, #5
 80081b2:	697a      	ldr	r2, [r7, #20]
 80081b4:	440a      	add	r2, r1
 80081b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80081be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	015a      	lsls	r2, r3, #5
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	4413      	add	r3, r2
 80081c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081cc:	691a      	ldr	r2, [r3, #16]
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081d6:	6939      	ldr	r1, [r7, #16]
 80081d8:	0148      	lsls	r0, r1, #5
 80081da:	6979      	ldr	r1, [r7, #20]
 80081dc:	4401      	add	r1, r0
 80081de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80081e2:	4313      	orrs	r3, r2
 80081e4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80081e6:	79fb      	ldrb	r3, [r7, #7]
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d10d      	bne.n	8008208 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d009      	beq.n	8008208 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	68d9      	ldr	r1, [r3, #12]
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	015a      	lsls	r2, r3, #5
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	4413      	add	r3, r2
 8008200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008204:	460a      	mov	r2, r1
 8008206:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	015a      	lsls	r2, r3, #5
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	4413      	add	r3, r2
 8008210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	693a      	ldr	r2, [r7, #16]
 8008218:	0151      	lsls	r1, r2, #5
 800821a:	697a      	ldr	r2, [r7, #20]
 800821c:	440a      	add	r2, r1
 800821e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008222:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008226:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	371c      	adds	r7, #28
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr

08008236 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008236:	b480      	push	{r7}
 8008238:	b089      	sub	sp, #36	; 0x24
 800823a:	af00      	add	r7, sp, #0
 800823c:	60f8      	str	r0, [r7, #12]
 800823e:	60b9      	str	r1, [r7, #8]
 8008240:	4611      	mov	r1, r2
 8008242:	461a      	mov	r2, r3
 8008244:	460b      	mov	r3, r1
 8008246:	71fb      	strb	r3, [r7, #7]
 8008248:	4613      	mov	r3, r2
 800824a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008254:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008258:	2b00      	cmp	r3, #0
 800825a:	d123      	bne.n	80082a4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800825c:	88bb      	ldrh	r3, [r7, #4]
 800825e:	3303      	adds	r3, #3
 8008260:	089b      	lsrs	r3, r3, #2
 8008262:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008264:	2300      	movs	r3, #0
 8008266:	61bb      	str	r3, [r7, #24]
 8008268:	e018      	b.n	800829c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800826a:	79fb      	ldrb	r3, [r7, #7]
 800826c:	031a      	lsls	r2, r3, #12
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	4413      	add	r3, r2
 8008272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008276:	461a      	mov	r2, r3
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	3301      	adds	r3, #1
 8008282:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	3301      	adds	r3, #1
 8008288:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	3301      	adds	r3, #1
 800828e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	3301      	adds	r3, #1
 8008294:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	3301      	adds	r3, #1
 800829a:	61bb      	str	r3, [r7, #24]
 800829c:	69ba      	ldr	r2, [r7, #24]
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d3e2      	bcc.n	800826a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3724      	adds	r7, #36	; 0x24
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr

080082b2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80082b2:	b480      	push	{r7}
 80082b4:	b08b      	sub	sp, #44	; 0x2c
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	60f8      	str	r0, [r7, #12]
 80082ba:	60b9      	str	r1, [r7, #8]
 80082bc:	4613      	mov	r3, r2
 80082be:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80082c8:	88fb      	ldrh	r3, [r7, #6]
 80082ca:	089b      	lsrs	r3, r3, #2
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80082d0:	88fb      	ldrh	r3, [r7, #6]
 80082d2:	f003 0303 	and.w	r3, r3, #3
 80082d6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80082d8:	2300      	movs	r3, #0
 80082da:	623b      	str	r3, [r7, #32]
 80082dc:	e014      	b.n	8008308 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80082de:	69bb      	ldr	r3, [r7, #24]
 80082e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e8:	601a      	str	r2, [r3, #0]
    pDest++;
 80082ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ec:	3301      	adds	r3, #1
 80082ee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f2:	3301      	adds	r3, #1
 80082f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80082f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f8:	3301      	adds	r3, #1
 80082fa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80082fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fe:	3301      	adds	r3, #1
 8008300:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008302:	6a3b      	ldr	r3, [r7, #32]
 8008304:	3301      	adds	r3, #1
 8008306:	623b      	str	r3, [r7, #32]
 8008308:	6a3a      	ldr	r2, [r7, #32]
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	429a      	cmp	r2, r3
 800830e:	d3e6      	bcc.n	80082de <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008310:	8bfb      	ldrh	r3, [r7, #30]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d01e      	beq.n	8008354 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008316:	2300      	movs	r3, #0
 8008318:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008320:	461a      	mov	r2, r3
 8008322:	f107 0310 	add.w	r3, r7, #16
 8008326:	6812      	ldr	r2, [r2, #0]
 8008328:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800832a:	693a      	ldr	r2, [r7, #16]
 800832c:	6a3b      	ldr	r3, [r7, #32]
 800832e:	b2db      	uxtb	r3, r3
 8008330:	00db      	lsls	r3, r3, #3
 8008332:	fa22 f303 	lsr.w	r3, r2, r3
 8008336:	b2da      	uxtb	r2, r3
 8008338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833a:	701a      	strb	r2, [r3, #0]
      i++;
 800833c:	6a3b      	ldr	r3, [r7, #32]
 800833e:	3301      	adds	r3, #1
 8008340:	623b      	str	r3, [r7, #32]
      pDest++;
 8008342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008344:	3301      	adds	r3, #1
 8008346:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008348:	8bfb      	ldrh	r3, [r7, #30]
 800834a:	3b01      	subs	r3, #1
 800834c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800834e:	8bfb      	ldrh	r3, [r7, #30]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1ea      	bne.n	800832a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008356:	4618      	mov	r0, r3
 8008358:	372c      	adds	r7, #44	; 0x2c
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr

08008362 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008362:	b480      	push	{r7}
 8008364:	b085      	sub	sp, #20
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
 800836a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	785b      	ldrb	r3, [r3, #1]
 800837a:	2b01      	cmp	r3, #1
 800837c:	d12c      	bne.n	80083d8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	015a      	lsls	r2, r3, #5
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	4413      	add	r3, r2
 8008386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	db12      	blt.n	80083b6 <USB_EPSetStall+0x54>
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00f      	beq.n	80083b6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	015a      	lsls	r2, r3, #5
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	4413      	add	r3, r2
 800839e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68ba      	ldr	r2, [r7, #8]
 80083a6:	0151      	lsls	r1, r2, #5
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	440a      	add	r2, r1
 80083ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80083b4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	015a      	lsls	r2, r3, #5
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	4413      	add	r3, r2
 80083be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	68ba      	ldr	r2, [r7, #8]
 80083c6:	0151      	lsls	r1, r2, #5
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	440a      	add	r2, r1
 80083cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80083d4:	6013      	str	r3, [r2, #0]
 80083d6:	e02b      	b.n	8008430 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	015a      	lsls	r2, r3, #5
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	4413      	add	r3, r2
 80083e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	db12      	blt.n	8008410 <USB_EPSetStall+0xae>
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00f      	beq.n	8008410 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	015a      	lsls	r2, r3, #5
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	4413      	add	r3, r2
 80083f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	68ba      	ldr	r2, [r7, #8]
 8008400:	0151      	lsls	r1, r2, #5
 8008402:	68fa      	ldr	r2, [r7, #12]
 8008404:	440a      	add	r2, r1
 8008406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800840a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800840e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	015a      	lsls	r2, r3, #5
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	4413      	add	r3, r2
 8008418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	0151      	lsls	r1, r2, #5
 8008422:	68fa      	ldr	r2, [r7, #12]
 8008424:	440a      	add	r2, r1
 8008426:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800842a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800842e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3714      	adds	r7, #20
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr

0800843e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800843e:	b480      	push	{r7}
 8008440:	b085      	sub	sp, #20
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
 8008446:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	785b      	ldrb	r3, [r3, #1]
 8008456:	2b01      	cmp	r3, #1
 8008458:	d128      	bne.n	80084ac <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	015a      	lsls	r2, r3, #5
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	4413      	add	r3, r2
 8008462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	0151      	lsls	r1, r2, #5
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	440a      	add	r2, r1
 8008470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008474:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008478:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	78db      	ldrb	r3, [r3, #3]
 800847e:	2b03      	cmp	r3, #3
 8008480:	d003      	beq.n	800848a <USB_EPClearStall+0x4c>
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	78db      	ldrb	r3, [r3, #3]
 8008486:	2b02      	cmp	r3, #2
 8008488:	d138      	bne.n	80084fc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	015a      	lsls	r2, r3, #5
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	4413      	add	r3, r2
 8008492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	0151      	lsls	r1, r2, #5
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	440a      	add	r2, r1
 80084a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084a8:	6013      	str	r3, [r2, #0]
 80084aa:	e027      	b.n	80084fc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	015a      	lsls	r2, r3, #5
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	4413      	add	r3, r2
 80084b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68ba      	ldr	r2, [r7, #8]
 80084bc:	0151      	lsls	r1, r2, #5
 80084be:	68fa      	ldr	r2, [r7, #12]
 80084c0:	440a      	add	r2, r1
 80084c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80084ca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	78db      	ldrb	r3, [r3, #3]
 80084d0:	2b03      	cmp	r3, #3
 80084d2:	d003      	beq.n	80084dc <USB_EPClearStall+0x9e>
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	78db      	ldrb	r3, [r3, #3]
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d10f      	bne.n	80084fc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	015a      	lsls	r2, r3, #5
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	4413      	add	r3, r2
 80084e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68ba      	ldr	r2, [r7, #8]
 80084ec:	0151      	lsls	r1, r2, #5
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	440a      	add	r2, r1
 80084f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084fa:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3714      	adds	r7, #20
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr

0800850a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800850a:	b480      	push	{r7}
 800850c:	b085      	sub	sp, #20
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
 8008512:	460b      	mov	r3, r1
 8008514:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008528:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800852c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	78fb      	ldrb	r3, [r7, #3]
 8008538:	011b      	lsls	r3, r3, #4
 800853a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800853e:	68f9      	ldr	r1, [r7, #12]
 8008540:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008544:	4313      	orrs	r3, r2
 8008546:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008548:	2300      	movs	r3, #0
}
 800854a:	4618      	mov	r0, r3
 800854c:	3714      	adds	r7, #20
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr

08008556 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008556:	b480      	push	{r7}
 8008558:	b085      	sub	sp, #20
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	68fa      	ldr	r2, [r7, #12]
 800856c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008570:	f023 0303 	bic.w	r3, r3, #3
 8008574:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008584:	f023 0302 	bic.w	r3, r3, #2
 8008588:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	3714      	adds	r7, #20
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80085b2:	f023 0303 	bic.w	r3, r3, #3
 80085b6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085c6:	f043 0302 	orr.w	r3, r3, #2
 80085ca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3714      	adds	r7, #20
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr

080085da <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80085da:	b480      	push	{r7}
 80085dc:	b085      	sub	sp, #20
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	695b      	ldr	r3, [r3, #20]
 80085e6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	4013      	ands	r3, r2
 80085f0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80085f2:	68fb      	ldr	r3, [r7, #12]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3714      	adds	r7, #20
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008612:	699b      	ldr	r3, [r3, #24]
 8008614:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800861c:	69db      	ldr	r3, [r3, #28]
 800861e:	68ba      	ldr	r2, [r7, #8]
 8008620:	4013      	ands	r3, r2
 8008622:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	0c1b      	lsrs	r3, r3, #16
}
 8008628:	4618      	mov	r0, r3
 800862a:	3714      	adds	r7, #20
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008634:	b480      	push	{r7}
 8008636:	b085      	sub	sp, #20
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008646:	699b      	ldr	r3, [r3, #24]
 8008648:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008650:	69db      	ldr	r3, [r3, #28]
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	4013      	ands	r3, r2
 8008656:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	b29b      	uxth	r3, r3
}
 800865c:	4618      	mov	r0, r3
 800865e:	3714      	adds	r7, #20
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008668:	b480      	push	{r7}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	460b      	mov	r3, r1
 8008672:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008678:	78fb      	ldrb	r3, [r7, #3]
 800867a:	015a      	lsls	r2, r3, #5
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	4413      	add	r3, r2
 8008680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800868e:	695b      	ldr	r3, [r3, #20]
 8008690:	68ba      	ldr	r2, [r7, #8]
 8008692:	4013      	ands	r3, r2
 8008694:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008696:	68bb      	ldr	r3, [r7, #8]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3714      	adds	r7, #20
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b087      	sub	sp, #28
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	460b      	mov	r3, r1
 80086ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ba:	691b      	ldr	r3, [r3, #16]
 80086bc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086c6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80086c8:	78fb      	ldrb	r3, [r7, #3]
 80086ca:	f003 030f 	and.w	r3, r3, #15
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	fa22 f303 	lsr.w	r3, r2, r3
 80086d4:	01db      	lsls	r3, r3, #7
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	693a      	ldr	r2, [r7, #16]
 80086da:	4313      	orrs	r3, r2
 80086dc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80086de:	78fb      	ldrb	r3, [r7, #3]
 80086e0:	015a      	lsls	r2, r3, #5
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	4413      	add	r3, r2
 80086e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	693a      	ldr	r2, [r7, #16]
 80086ee:	4013      	ands	r3, r2
 80086f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80086f2:	68bb      	ldr	r3, [r7, #8]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	371c      	adds	r7, #28
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	695b      	ldr	r3, [r3, #20]
 800870c:	f003 0301 	and.w	r3, r3, #1
}
 8008710:	4618      	mov	r0, r3
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68fa      	ldr	r2, [r7, #12]
 8008732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008736:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800873a:	f023 0307 	bic.w	r3, r3, #7
 800873e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800874e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008752:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3714      	adds	r7, #20
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr
	...

08008764 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008764:	b480      	push	{r7}
 8008766:	b087      	sub	sp, #28
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	460b      	mov	r3, r1
 800876e:	607a      	str	r2, [r7, #4]
 8008770:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	333c      	adds	r3, #60	; 0x3c
 800877a:	3304      	adds	r3, #4
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	4a26      	ldr	r2, [pc, #152]	; (800881c <USB_EP0_OutStart+0xb8>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d90a      	bls.n	800879e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008794:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008798:	d101      	bne.n	800879e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800879a:	2300      	movs	r3, #0
 800879c:	e037      	b.n	800880e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087a4:	461a      	mov	r2, r3
 80087a6:	2300      	movs	r3, #0
 80087a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	697a      	ldr	r2, [r7, #20]
 80087b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	697a      	ldr	r2, [r7, #20]
 80087c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087cc:	f043 0318 	orr.w	r3, r3, #24
 80087d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	697a      	ldr	r2, [r7, #20]
 80087dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80087e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80087e6:	7afb      	ldrb	r3, [r7, #11]
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d10f      	bne.n	800880c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f2:	461a      	mov	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	697a      	ldr	r2, [r7, #20]
 8008802:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008806:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800880a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	371c      	adds	r7, #28
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop
 800881c:	4f54300a 	.word	0x4f54300a

08008820 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008820:	b480      	push	{r7}
 8008822:	b085      	sub	sp, #20
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008828:	2300      	movs	r3, #0
 800882a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	3301      	adds	r3, #1
 8008830:	60fb      	str	r3, [r7, #12]
 8008832:	4a13      	ldr	r2, [pc, #76]	; (8008880 <USB_CoreReset+0x60>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d901      	bls.n	800883c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008838:	2303      	movs	r3, #3
 800883a:	e01a      	b.n	8008872 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	2b00      	cmp	r3, #0
 8008842:	daf3      	bge.n	800882c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008844:	2300      	movs	r3, #0
 8008846:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	f043 0201 	orr.w	r2, r3, #1
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	3301      	adds	r3, #1
 8008858:	60fb      	str	r3, [r7, #12]
 800885a:	4a09      	ldr	r2, [pc, #36]	; (8008880 <USB_CoreReset+0x60>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d901      	bls.n	8008864 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008860:	2303      	movs	r3, #3
 8008862:	e006      	b.n	8008872 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	691b      	ldr	r3, [r3, #16]
 8008868:	f003 0301 	and.w	r3, r3, #1
 800886c:	2b01      	cmp	r3, #1
 800886e:	d0f1      	beq.n	8008854 <USB_CoreReset+0x34>

  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3714      	adds	r7, #20
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	00030d40 	.word	0x00030d40

08008884 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	460b      	mov	r3, r1
 800888e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008890:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008894:	f002 fec6 	bl	800b624 <USBD_static_malloc>
 8008898:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d105      	bne.n	80088ac <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80088a8:	2302      	movs	r3, #2
 80088aa:	e066      	b.n	800897a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	7c1b      	ldrb	r3, [r3, #16]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d119      	bne.n	80088f0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80088bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088c0:	2202      	movs	r2, #2
 80088c2:	2181      	movs	r1, #129	; 0x81
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f002 fd8a 	bl	800b3de <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2201      	movs	r2, #1
 80088ce:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80088d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088d4:	2202      	movs	r2, #2
 80088d6:	2101      	movs	r1, #1
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f002 fd80 	bl	800b3de <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2201      	movs	r2, #1
 80088e2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2210      	movs	r2, #16
 80088ea:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80088ee:	e016      	b.n	800891e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80088f0:	2340      	movs	r3, #64	; 0x40
 80088f2:	2202      	movs	r2, #2
 80088f4:	2181      	movs	r1, #129	; 0x81
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f002 fd71 	bl	800b3de <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008902:	2340      	movs	r3, #64	; 0x40
 8008904:	2202      	movs	r2, #2
 8008906:	2101      	movs	r1, #1
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f002 fd68 	bl	800b3de <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2201      	movs	r2, #1
 8008912:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2210      	movs	r2, #16
 800891a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800891e:	2308      	movs	r3, #8
 8008920:	2203      	movs	r2, #3
 8008922:	2182      	movs	r1, #130	; 0x82
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f002 fd5a 	bl	800b3de <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2201      	movs	r2, #1
 800892e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2200      	movs	r2, #0
 8008940:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2200      	movs	r2, #0
 8008948:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	7c1b      	ldrb	r3, [r3, #16]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d109      	bne.n	8008968 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800895a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800895e:	2101      	movs	r1, #1
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f002 fe2b 	bl	800b5bc <USBD_LL_PrepareReceive>
 8008966:	e007      	b.n	8008978 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800896e:	2340      	movs	r3, #64	; 0x40
 8008970:	2101      	movs	r1, #1
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f002 fe22 	bl	800b5bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b082      	sub	sp, #8
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
 800898a:	460b      	mov	r3, r1
 800898c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800898e:	2181      	movs	r1, #129	; 0x81
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f002 fd4a 	bl	800b42a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800899c:	2101      	movs	r1, #1
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f002 fd43 	bl	800b42a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80089ac:	2182      	movs	r1, #130	; 0x82
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f002 fd3b 	bl	800b42a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00e      	beq.n	80089ec <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089de:	4618      	mov	r0, r3
 80089e0:	f002 fe2e 	bl	800b640 <USBD_static_free>
    pdev->pClassData = NULL;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3708      	adds	r7, #8
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
	...

080089f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b086      	sub	sp, #24
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a08:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a12:	2300      	movs	r3, #0
 8008a14:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d101      	bne.n	8008a20 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008a1c:	2303      	movs	r3, #3
 8008a1e:	e0af      	b.n	8008b80 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d03f      	beq.n	8008aac <USBD_CDC_Setup+0xb4>
 8008a2c:	2b20      	cmp	r3, #32
 8008a2e:	f040 809f 	bne.w	8008b70 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	88db      	ldrh	r3, [r3, #6]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d02e      	beq.n	8008a98 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	b25b      	sxtb	r3, r3
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	da16      	bge.n	8008a72 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	683a      	ldr	r2, [r7, #0]
 8008a4e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008a50:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a52:	683a      	ldr	r2, [r7, #0]
 8008a54:	88d2      	ldrh	r2, [r2, #6]
 8008a56:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	88db      	ldrh	r3, [r3, #6]
 8008a5c:	2b07      	cmp	r3, #7
 8008a5e:	bf28      	it	cs
 8008a60:	2307      	movcs	r3, #7
 8008a62:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	89fa      	ldrh	r2, [r7, #14]
 8008a68:	4619      	mov	r1, r3
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f001 fae9 	bl	800a042 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008a70:	e085      	b.n	8008b7e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	785a      	ldrb	r2, [r3, #1]
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	88db      	ldrh	r3, [r3, #6]
 8008a80:	b2da      	uxtb	r2, r3
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008a88:	6939      	ldr	r1, [r7, #16]
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	88db      	ldrh	r3, [r3, #6]
 8008a8e:	461a      	mov	r2, r3
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f001 fb02 	bl	800a09a <USBD_CtlPrepareRx>
      break;
 8008a96:	e072      	b.n	8008b7e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	683a      	ldr	r2, [r7, #0]
 8008aa2:	7850      	ldrb	r0, [r2, #1]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	6839      	ldr	r1, [r7, #0]
 8008aa8:	4798      	blx	r3
      break;
 8008aaa:	e068      	b.n	8008b7e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	785b      	ldrb	r3, [r3, #1]
 8008ab0:	2b0b      	cmp	r3, #11
 8008ab2:	d852      	bhi.n	8008b5a <USBD_CDC_Setup+0x162>
 8008ab4:	a201      	add	r2, pc, #4	; (adr r2, 8008abc <USBD_CDC_Setup+0xc4>)
 8008ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aba:	bf00      	nop
 8008abc:	08008aed 	.word	0x08008aed
 8008ac0:	08008b69 	.word	0x08008b69
 8008ac4:	08008b5b 	.word	0x08008b5b
 8008ac8:	08008b5b 	.word	0x08008b5b
 8008acc:	08008b5b 	.word	0x08008b5b
 8008ad0:	08008b5b 	.word	0x08008b5b
 8008ad4:	08008b5b 	.word	0x08008b5b
 8008ad8:	08008b5b 	.word	0x08008b5b
 8008adc:	08008b5b 	.word	0x08008b5b
 8008ae0:	08008b5b 	.word	0x08008b5b
 8008ae4:	08008b17 	.word	0x08008b17
 8008ae8:	08008b41 	.word	0x08008b41
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	2b03      	cmp	r3, #3
 8008af6:	d107      	bne.n	8008b08 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008af8:	f107 030a 	add.w	r3, r7, #10
 8008afc:	2202      	movs	r2, #2
 8008afe:	4619      	mov	r1, r3
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f001 fa9e 	bl	800a042 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b06:	e032      	b.n	8008b6e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008b08:	6839      	ldr	r1, [r7, #0]
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f001 fa28 	bl	8009f60 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b10:	2303      	movs	r3, #3
 8008b12:	75fb      	strb	r3, [r7, #23]
          break;
 8008b14:	e02b      	b.n	8008b6e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	2b03      	cmp	r3, #3
 8008b20:	d107      	bne.n	8008b32 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008b22:	f107 030d 	add.w	r3, r7, #13
 8008b26:	2201      	movs	r2, #1
 8008b28:	4619      	mov	r1, r3
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f001 fa89 	bl	800a042 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b30:	e01d      	b.n	8008b6e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008b32:	6839      	ldr	r1, [r7, #0]
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f001 fa13 	bl	8009f60 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	75fb      	strb	r3, [r7, #23]
          break;
 8008b3e:	e016      	b.n	8008b6e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	2b03      	cmp	r3, #3
 8008b4a:	d00f      	beq.n	8008b6c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008b4c:	6839      	ldr	r1, [r7, #0]
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f001 fa06 	bl	8009f60 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b54:	2303      	movs	r3, #3
 8008b56:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008b58:	e008      	b.n	8008b6c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008b5a:	6839      	ldr	r1, [r7, #0]
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f001 f9ff 	bl	8009f60 <USBD_CtlError>
          ret = USBD_FAIL;
 8008b62:	2303      	movs	r3, #3
 8008b64:	75fb      	strb	r3, [r7, #23]
          break;
 8008b66:	e002      	b.n	8008b6e <USBD_CDC_Setup+0x176>
          break;
 8008b68:	bf00      	nop
 8008b6a:	e008      	b.n	8008b7e <USBD_CDC_Setup+0x186>
          break;
 8008b6c:	bf00      	nop
      }
      break;
 8008b6e:	e006      	b.n	8008b7e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008b70:	6839      	ldr	r1, [r7, #0]
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f001 f9f4 	bl	8009f60 <USBD_CtlError>
      ret = USBD_FAIL;
 8008b78:	2303      	movs	r3, #3
 8008b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8008b7c:	bf00      	nop
  }

  return (uint8_t)ret;
 8008b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3718      	adds	r7, #24
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	460b      	mov	r3, r1
 8008b92:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d101      	bne.n	8008baa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	e04f      	b.n	8008c4a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bb0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008bb2:	78fa      	ldrb	r2, [r7, #3]
 8008bb4:	6879      	ldr	r1, [r7, #4]
 8008bb6:	4613      	mov	r3, r2
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	4413      	add	r3, r2
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	440b      	add	r3, r1
 8008bc0:	3318      	adds	r3, #24
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d029      	beq.n	8008c1c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008bc8:	78fa      	ldrb	r2, [r7, #3]
 8008bca:	6879      	ldr	r1, [r7, #4]
 8008bcc:	4613      	mov	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4413      	add	r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	440b      	add	r3, r1
 8008bd6:	3318      	adds	r3, #24
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	78f9      	ldrb	r1, [r7, #3]
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	460b      	mov	r3, r1
 8008be0:	00db      	lsls	r3, r3, #3
 8008be2:	1a5b      	subs	r3, r3, r1
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	4403      	add	r3, r0
 8008be8:	3344      	adds	r3, #68	; 0x44
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	fbb2 f1f3 	udiv	r1, r2, r3
 8008bf0:	fb03 f301 	mul.w	r3, r3, r1
 8008bf4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d110      	bne.n	8008c1c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008bfa:	78fa      	ldrb	r2, [r7, #3]
 8008bfc:	6879      	ldr	r1, [r7, #4]
 8008bfe:	4613      	mov	r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	4413      	add	r3, r2
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	440b      	add	r3, r1
 8008c08:	3318      	adds	r3, #24
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008c0e:	78f9      	ldrb	r1, [r7, #3]
 8008c10:	2300      	movs	r3, #0
 8008c12:	2200      	movs	r2, #0
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f002 fcb0 	bl	800b57a <USBD_LL_Transmit>
 8008c1a:	e015      	b.n	8008c48 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c2a:	691b      	ldr	r3, [r3, #16]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d00b      	beq.n	8008c48 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c36:	691b      	ldr	r3, [r3, #16]
 8008c38:	68ba      	ldr	r2, [r7, #8]
 8008c3a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008c3e:	68ba      	ldr	r2, [r7, #8]
 8008c40:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008c44:	78fa      	ldrb	r2, [r7, #3]
 8008c46:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b084      	sub	sp, #16
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c64:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d101      	bne.n	8008c74 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008c70:	2303      	movs	r3, #3
 8008c72:	e015      	b.n	8008ca0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008c74:	78fb      	ldrb	r3, [r7, #3]
 8008c76:	4619      	mov	r1, r3
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f002 fcc0 	bl	800b5fe <USBD_LL_GetRxDataSize>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008c9a:	4611      	mov	r1, r2
 8008c9c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008cb6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d101      	bne.n	8008cc2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	e01b      	b.n	8008cfa <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d015      	beq.n	8008cf8 <USBD_CDC_EP0_RxReady+0x50>
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008cd2:	2bff      	cmp	r3, #255	; 0xff
 8008cd4:	d010      	beq.n	8008cf8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	68fa      	ldr	r2, [r7, #12]
 8008ce0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008ce4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008cec:	b292      	uxth	r2, r2
 8008cee:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	22ff      	movs	r2, #255	; 0xff
 8008cf4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
	...

08008d04 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2243      	movs	r2, #67	; 0x43
 8008d10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008d12:	4b03      	ldr	r3, [pc, #12]	; (8008d20 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr
 8008d20:	20000090 	.word	0x20000090

08008d24 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2243      	movs	r2, #67	; 0x43
 8008d30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008d32:	4b03      	ldr	r3, [pc, #12]	; (8008d40 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	370c      	adds	r7, #12
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr
 8008d40:	2000004c 	.word	0x2000004c

08008d44 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2243      	movs	r2, #67	; 0x43
 8008d50:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008d52:	4b03      	ldr	r3, [pc, #12]	; (8008d60 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	370c      	adds	r7, #12
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr
 8008d60:	200000d4 	.word	0x200000d4

08008d64 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	220a      	movs	r2, #10
 8008d70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008d72:	4b03      	ldr	r3, [pc, #12]	; (8008d80 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	370c      	adds	r7, #12
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr
 8008d80:	20000008 	.word	0x20000008

08008d84 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d101      	bne.n	8008d98 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008d94:	2303      	movs	r3, #3
 8008d96:	e004      	b.n	8008da2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	683a      	ldr	r2, [r7, #0]
 8008d9c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	370c      	adds	r7, #12
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr

08008dae <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008dae:	b480      	push	{r7}
 8008db0:	b087      	sub	sp, #28
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	60f8      	str	r0, [r7, #12]
 8008db6:	60b9      	str	r1, [r7, #8]
 8008db8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008dc0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d101      	bne.n	8008dcc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008dc8:	2303      	movs	r3, #3
 8008dca:	e008      	b.n	8008dde <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	68ba      	ldr	r2, [r7, #8]
 8008dd0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008ddc:	2300      	movs	r3, #0
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	371c      	adds	r7, #28
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr

08008dea <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008dea:	b480      	push	{r7}
 8008dec:	b085      	sub	sp, #20
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
 8008df2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008dfa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d101      	bne.n	8008e06 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008e02:	2303      	movs	r3, #3
 8008e04:	e004      	b.n	8008e10 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	683a      	ldr	r2, [r7, #0]
 8008e0a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008e0e:	2300      	movs	r3, #0
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3714      	adds	r7, #20
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d101      	bne.n	8008e3a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008e36:	2303      	movs	r3, #3
 8008e38:	e016      	b.n	8008e68 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	7c1b      	ldrb	r3, [r3, #16]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d109      	bne.n	8008e56 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e4c:	2101      	movs	r1, #1
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f002 fbb4 	bl	800b5bc <USBD_LL_PrepareReceive>
 8008e54:	e007      	b.n	8008e66 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e5c:	2340      	movs	r3, #64	; 0x40
 8008e5e:	2101      	movs	r1, #1
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f002 fbab 	bl	800b5bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3710      	adds	r7, #16
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b086      	sub	sp, #24
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d101      	bne.n	8008e88 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008e84:	2303      	movs	r3, #3
 8008e86:	e01f      	b.n	8008ec8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d003      	beq.n	8008eae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	68ba      	ldr	r2, [r7, #8]
 8008eaa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	79fa      	ldrb	r2, [r7, #7]
 8008eba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f002 fa27 	bl	800b310 <USBD_LL_Init>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3718      	adds	r7, #24
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008eda:	2300      	movs	r3, #0
 8008edc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d101      	bne.n	8008ee8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008ee4:	2303      	movs	r3, #3
 8008ee6:	e016      	b.n	8008f16 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	683a      	ldr	r2, [r7, #0]
 8008eec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00b      	beq.n	8008f14 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f04:	f107 020e 	add.w	r2, r7, #14
 8008f08:	4610      	mov	r0, r2
 8008f0a:	4798      	blx	r3
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b082      	sub	sp, #8
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f002 fa3e 	bl	800b3a8 <USBD_LL_Start>
 8008f2c:	4603      	mov	r3, r0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3708      	adds	r7, #8
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008f36:	b480      	push	{r7}
 8008f38:	b083      	sub	sp, #12
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f3e:	2300      	movs	r3, #0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	370c      	adds	r7, #12
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr

08008f4c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	460b      	mov	r3, r1
 8008f56:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008f58:	2303      	movs	r3, #3
 8008f5a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d009      	beq.n	8008f7a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	78fa      	ldrb	r2, [r7, #3]
 8008f70:	4611      	mov	r1, r2
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	4798      	blx	r3
 8008f76:	4603      	mov	r3, r0
 8008f78:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3710      	adds	r7, #16
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d007      	beq.n	8008faa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	78fa      	ldrb	r2, [r7, #3]
 8008fa4:	4611      	mov	r1, r2
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	4798      	blx	r3
  }

  return USBD_OK;
 8008faa:	2300      	movs	r3, #0
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3708      	adds	r7, #8
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fc4:	6839      	ldr	r1, [r7, #0]
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f000 ff90 	bl	8009eec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008fda:	461a      	mov	r2, r3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008fe8:	f003 031f 	and.w	r3, r3, #31
 8008fec:	2b02      	cmp	r3, #2
 8008fee:	d01a      	beq.n	8009026 <USBD_LL_SetupStage+0x72>
 8008ff0:	2b02      	cmp	r3, #2
 8008ff2:	d822      	bhi.n	800903a <USBD_LL_SetupStage+0x86>
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d002      	beq.n	8008ffe <USBD_LL_SetupStage+0x4a>
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d00a      	beq.n	8009012 <USBD_LL_SetupStage+0x5e>
 8008ffc:	e01d      	b.n	800903a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009004:	4619      	mov	r1, r3
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 fa62 	bl	80094d0 <USBD_StdDevReq>
 800900c:	4603      	mov	r3, r0
 800900e:	73fb      	strb	r3, [r7, #15]
      break;
 8009010:	e020      	b.n	8009054 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009018:	4619      	mov	r1, r3
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 fac6 	bl	80095ac <USBD_StdItfReq>
 8009020:	4603      	mov	r3, r0
 8009022:	73fb      	strb	r3, [r7, #15]
      break;
 8009024:	e016      	b.n	8009054 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800902c:	4619      	mov	r1, r3
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 fb05 	bl	800963e <USBD_StdEPReq>
 8009034:	4603      	mov	r3, r0
 8009036:	73fb      	strb	r3, [r7, #15]
      break;
 8009038:	e00c      	b.n	8009054 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009040:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009044:	b2db      	uxtb	r3, r3
 8009046:	4619      	mov	r1, r3
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f002 fa0d 	bl	800b468 <USBD_LL_StallEP>
 800904e:	4603      	mov	r3, r0
 8009050:	73fb      	strb	r3, [r7, #15]
      break;
 8009052:	bf00      	nop
  }

  return ret;
 8009054:	7bfb      	ldrb	r3, [r7, #15]
}
 8009056:	4618      	mov	r0, r3
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b086      	sub	sp, #24
 8009062:	af00      	add	r7, sp, #0
 8009064:	60f8      	str	r0, [r7, #12]
 8009066:	460b      	mov	r3, r1
 8009068:	607a      	str	r2, [r7, #4]
 800906a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800906c:	7afb      	ldrb	r3, [r7, #11]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d138      	bne.n	80090e4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009078:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009080:	2b03      	cmp	r3, #3
 8009082:	d14a      	bne.n	800911a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	689a      	ldr	r2, [r3, #8]
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	429a      	cmp	r2, r3
 800908e:	d913      	bls.n	80090b8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	689a      	ldr	r2, [r3, #8]
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	1ad2      	subs	r2, r2, r3
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	68da      	ldr	r2, [r3, #12]
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	4293      	cmp	r3, r2
 80090a8:	bf28      	it	cs
 80090aa:	4613      	movcs	r3, r2
 80090ac:	461a      	mov	r2, r3
 80090ae:	6879      	ldr	r1, [r7, #4]
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f001 f80f 	bl	800a0d4 <USBD_CtlContinueRx>
 80090b6:	e030      	b.n	800911a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	2b03      	cmp	r3, #3
 80090c2:	d10b      	bne.n	80090dc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ca:	691b      	ldr	r3, [r3, #16]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d005      	beq.n	80090dc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090d6:	691b      	ldr	r3, [r3, #16]
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80090dc:	68f8      	ldr	r0, [r7, #12]
 80090de:	f001 f80a 	bl	800a0f6 <USBD_CtlSendStatus>
 80090e2:	e01a      	b.n	800911a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	2b03      	cmp	r3, #3
 80090ee:	d114      	bne.n	800911a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d00e      	beq.n	800911a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009102:	699b      	ldr	r3, [r3, #24]
 8009104:	7afa      	ldrb	r2, [r7, #11]
 8009106:	4611      	mov	r1, r2
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	4798      	blx	r3
 800910c:	4603      	mov	r3, r0
 800910e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009110:	7dfb      	ldrb	r3, [r7, #23]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d001      	beq.n	800911a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009116:	7dfb      	ldrb	r3, [r7, #23]
 8009118:	e000      	b.n	800911c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	3718      	adds	r7, #24
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b086      	sub	sp, #24
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	460b      	mov	r3, r1
 800912e:	607a      	str	r2, [r7, #4]
 8009130:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009132:	7afb      	ldrb	r3, [r7, #11]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d16b      	bne.n	8009210 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	3314      	adds	r3, #20
 800913c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009144:	2b02      	cmp	r3, #2
 8009146:	d156      	bne.n	80091f6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	689a      	ldr	r2, [r3, #8]
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	429a      	cmp	r2, r3
 8009152:	d914      	bls.n	800917e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	689a      	ldr	r2, [r3, #8]
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	1ad2      	subs	r2, r2, r3
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	461a      	mov	r2, r3
 8009168:	6879      	ldr	r1, [r7, #4]
 800916a:	68f8      	ldr	r0, [r7, #12]
 800916c:	f000 ff84 	bl	800a078 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009170:	2300      	movs	r3, #0
 8009172:	2200      	movs	r2, #0
 8009174:	2100      	movs	r1, #0
 8009176:	68f8      	ldr	r0, [r7, #12]
 8009178:	f002 fa20 	bl	800b5bc <USBD_LL_PrepareReceive>
 800917c:	e03b      	b.n	80091f6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	68da      	ldr	r2, [r3, #12]
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	429a      	cmp	r2, r3
 8009188:	d11c      	bne.n	80091c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	685a      	ldr	r2, [r3, #4]
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009192:	429a      	cmp	r2, r3
 8009194:	d316      	bcc.n	80091c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	685a      	ldr	r2, [r3, #4]
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d20f      	bcs.n	80091c4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80091a4:	2200      	movs	r2, #0
 80091a6:	2100      	movs	r1, #0
 80091a8:	68f8      	ldr	r0, [r7, #12]
 80091aa:	f000 ff65 	bl	800a078 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2200      	movs	r2, #0
 80091b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091b6:	2300      	movs	r3, #0
 80091b8:	2200      	movs	r2, #0
 80091ba:	2100      	movs	r1, #0
 80091bc:	68f8      	ldr	r0, [r7, #12]
 80091be:	f002 f9fd 	bl	800b5bc <USBD_LL_PrepareReceive>
 80091c2:	e018      	b.n	80091f6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	2b03      	cmp	r3, #3
 80091ce:	d10b      	bne.n	80091e8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d005      	beq.n	80091e8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	68f8      	ldr	r0, [r7, #12]
 80091e6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80091e8:	2180      	movs	r1, #128	; 0x80
 80091ea:	68f8      	ldr	r0, [r7, #12]
 80091ec:	f002 f93c 	bl	800b468 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80091f0:	68f8      	ldr	r0, [r7, #12]
 80091f2:	f000 ff93 	bl	800a11c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d122      	bne.n	8009246 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009200:	68f8      	ldr	r0, [r7, #12]
 8009202:	f7ff fe98 	bl	8008f36 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2200      	movs	r2, #0
 800920a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800920e:	e01a      	b.n	8009246 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009216:	b2db      	uxtb	r3, r3
 8009218:	2b03      	cmp	r3, #3
 800921a:	d114      	bne.n	8009246 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009222:	695b      	ldr	r3, [r3, #20]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d00e      	beq.n	8009246 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800922e:	695b      	ldr	r3, [r3, #20]
 8009230:	7afa      	ldrb	r2, [r7, #11]
 8009232:	4611      	mov	r1, r2
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	4798      	blx	r3
 8009238:	4603      	mov	r3, r0
 800923a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800923c:	7dfb      	ldrb	r3, [r7, #23]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d001      	beq.n	8009246 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009242:	7dfb      	ldrb	r3, [r7, #23]
 8009244:	e000      	b.n	8009248 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009246:	2300      	movs	r3, #0
}
 8009248:	4618      	mov	r0, r3
 800924a:	3718      	adds	r7, #24
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2201      	movs	r2, #1
 800925c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800927c:	2b00      	cmp	r3, #0
 800927e:	d101      	bne.n	8009284 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009280:	2303      	movs	r3, #3
 8009282:	e02f      	b.n	80092e4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00f      	beq.n	80092ae <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d009      	beq.n	80092ae <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	6852      	ldr	r2, [r2, #4]
 80092a6:	b2d2      	uxtb	r2, r2
 80092a8:	4611      	mov	r1, r2
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80092ae:	2340      	movs	r3, #64	; 0x40
 80092b0:	2200      	movs	r2, #0
 80092b2:	2100      	movs	r1, #0
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f002 f892 	bl	800b3de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2201      	movs	r2, #1
 80092be:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2240      	movs	r2, #64	; 0x40
 80092c6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80092ca:	2340      	movs	r3, #64	; 0x40
 80092cc:	2200      	movs	r2, #0
 80092ce:	2180      	movs	r1, #128	; 0x80
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f002 f884 	bl	800b3de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2201      	movs	r2, #1
 80092da:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2240      	movs	r2, #64	; 0x40
 80092e0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80092e2:	2300      	movs	r3, #0
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3708      	adds	r7, #8
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	460b      	mov	r3, r1
 80092f6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	78fa      	ldrb	r2, [r7, #3]
 80092fc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800931a:	b2da      	uxtb	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2204      	movs	r2, #4
 8009326:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	370c      	adds	r7, #12
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009346:	b2db      	uxtb	r3, r3
 8009348:	2b04      	cmp	r3, #4
 800934a:	d106      	bne.n	800935a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009352:	b2da      	uxtb	r2, r3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800935a:	2300      	movs	r3, #0
}
 800935c:	4618      	mov	r0, r3
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009376:	2b00      	cmp	r3, #0
 8009378:	d101      	bne.n	800937e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800937a:	2303      	movs	r3, #3
 800937c:	e012      	b.n	80093a4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009384:	b2db      	uxtb	r3, r3
 8009386:	2b03      	cmp	r3, #3
 8009388:	d10b      	bne.n	80093a2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009390:	69db      	ldr	r3, [r3, #28]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d005      	beq.n	80093a2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800939c:	69db      	ldr	r3, [r3, #28]
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80093a2:	2300      	movs	r3, #0
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3708      	adds	r7, #8
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	460b      	mov	r3, r1
 80093b6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d101      	bne.n	80093c6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80093c2:	2303      	movs	r3, #3
 80093c4:	e014      	b.n	80093f0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	2b03      	cmp	r3, #3
 80093d0:	d10d      	bne.n	80093ee <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093d8:	6a1b      	ldr	r3, [r3, #32]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d007      	beq.n	80093ee <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093e4:	6a1b      	ldr	r3, [r3, #32]
 80093e6:	78fa      	ldrb	r2, [r7, #3]
 80093e8:	4611      	mov	r1, r2
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3708      	adds	r7, #8
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	460b      	mov	r3, r1
 8009402:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800940a:	2b00      	cmp	r3, #0
 800940c:	d101      	bne.n	8009412 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800940e:	2303      	movs	r3, #3
 8009410:	e014      	b.n	800943c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009418:	b2db      	uxtb	r3, r3
 800941a:	2b03      	cmp	r3, #3
 800941c:	d10d      	bne.n	800943a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009426:	2b00      	cmp	r3, #0
 8009428:	d007      	beq.n	800943a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009432:	78fa      	ldrb	r2, [r7, #3]
 8009434:	4611      	mov	r1, r2
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800943a:	2300      	movs	r3, #0
}
 800943c:	4618      	mov	r0, r3
 800943e:	3708      	adds	r7, #8
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009444:	b480      	push	{r7}
 8009446:	b083      	sub	sp, #12
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800944c:	2300      	movs	r3, #0
}
 800944e:	4618      	mov	r0, r3
 8009450:	370c      	adds	r7, #12
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr

0800945a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b082      	sub	sp, #8
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2201      	movs	r2, #1
 8009466:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009470:	2b00      	cmp	r3, #0
 8009472:	d009      	beq.n	8009488 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	6852      	ldr	r2, [r2, #4]
 8009480:	b2d2      	uxtb	r2, r2
 8009482:	4611      	mov	r1, r2
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	4798      	blx	r3
  }

  return USBD_OK;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	3708      	adds	r7, #8
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009492:	b480      	push	{r7}
 8009494:	b087      	sub	sp, #28
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	3301      	adds	r3, #1
 80094a8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80094b0:	8a3b      	ldrh	r3, [r7, #16]
 80094b2:	021b      	lsls	r3, r3, #8
 80094b4:	b21a      	sxth	r2, r3
 80094b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	b21b      	sxth	r3, r3
 80094be:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80094c0:	89fb      	ldrh	r3, [r7, #14]
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	371c      	adds	r7, #28
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
	...

080094d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80094da:	2300      	movs	r3, #0
 80094dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094e6:	2b40      	cmp	r3, #64	; 0x40
 80094e8:	d005      	beq.n	80094f6 <USBD_StdDevReq+0x26>
 80094ea:	2b40      	cmp	r3, #64	; 0x40
 80094ec:	d853      	bhi.n	8009596 <USBD_StdDevReq+0xc6>
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d00b      	beq.n	800950a <USBD_StdDevReq+0x3a>
 80094f2:	2b20      	cmp	r3, #32
 80094f4:	d14f      	bne.n	8009596 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	6839      	ldr	r1, [r7, #0]
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	4798      	blx	r3
 8009504:	4603      	mov	r3, r0
 8009506:	73fb      	strb	r3, [r7, #15]
      break;
 8009508:	e04a      	b.n	80095a0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	785b      	ldrb	r3, [r3, #1]
 800950e:	2b09      	cmp	r3, #9
 8009510:	d83b      	bhi.n	800958a <USBD_StdDevReq+0xba>
 8009512:	a201      	add	r2, pc, #4	; (adr r2, 8009518 <USBD_StdDevReq+0x48>)
 8009514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009518:	0800956d 	.word	0x0800956d
 800951c:	08009581 	.word	0x08009581
 8009520:	0800958b 	.word	0x0800958b
 8009524:	08009577 	.word	0x08009577
 8009528:	0800958b 	.word	0x0800958b
 800952c:	0800954b 	.word	0x0800954b
 8009530:	08009541 	.word	0x08009541
 8009534:	0800958b 	.word	0x0800958b
 8009538:	08009563 	.word	0x08009563
 800953c:	08009555 	.word	0x08009555
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009540:	6839      	ldr	r1, [r7, #0]
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 f9de 	bl	8009904 <USBD_GetDescriptor>
          break;
 8009548:	e024      	b.n	8009594 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800954a:	6839      	ldr	r1, [r7, #0]
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 fb43 	bl	8009bd8 <USBD_SetAddress>
          break;
 8009552:	e01f      	b.n	8009594 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009554:	6839      	ldr	r1, [r7, #0]
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 fb82 	bl	8009c60 <USBD_SetConfig>
 800955c:	4603      	mov	r3, r0
 800955e:	73fb      	strb	r3, [r7, #15]
          break;
 8009560:	e018      	b.n	8009594 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009562:	6839      	ldr	r1, [r7, #0]
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 fc21 	bl	8009dac <USBD_GetConfig>
          break;
 800956a:	e013      	b.n	8009594 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800956c:	6839      	ldr	r1, [r7, #0]
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 fc52 	bl	8009e18 <USBD_GetStatus>
          break;
 8009574:	e00e      	b.n	8009594 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009576:	6839      	ldr	r1, [r7, #0]
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 fc81 	bl	8009e80 <USBD_SetFeature>
          break;
 800957e:	e009      	b.n	8009594 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009580:	6839      	ldr	r1, [r7, #0]
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 fc90 	bl	8009ea8 <USBD_ClrFeature>
          break;
 8009588:	e004      	b.n	8009594 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800958a:	6839      	ldr	r1, [r7, #0]
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 fce7 	bl	8009f60 <USBD_CtlError>
          break;
 8009592:	bf00      	nop
      }
      break;
 8009594:	e004      	b.n	80095a0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009596:	6839      	ldr	r1, [r7, #0]
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 fce1 	bl	8009f60 <USBD_CtlError>
      break;
 800959e:	bf00      	nop
  }

  return ret;
 80095a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop

080095ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095b6:	2300      	movs	r3, #0
 80095b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095c2:	2b40      	cmp	r3, #64	; 0x40
 80095c4:	d005      	beq.n	80095d2 <USBD_StdItfReq+0x26>
 80095c6:	2b40      	cmp	r3, #64	; 0x40
 80095c8:	d82f      	bhi.n	800962a <USBD_StdItfReq+0x7e>
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d001      	beq.n	80095d2 <USBD_StdItfReq+0x26>
 80095ce:	2b20      	cmp	r3, #32
 80095d0:	d12b      	bne.n	800962a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	3b01      	subs	r3, #1
 80095dc:	2b02      	cmp	r3, #2
 80095de:	d81d      	bhi.n	800961c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	889b      	ldrh	r3, [r3, #4]
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d813      	bhi.n	8009612 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	6839      	ldr	r1, [r7, #0]
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	4798      	blx	r3
 80095f8:	4603      	mov	r3, r0
 80095fa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	88db      	ldrh	r3, [r3, #6]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d110      	bne.n	8009626 <USBD_StdItfReq+0x7a>
 8009604:	7bfb      	ldrb	r3, [r7, #15]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10d      	bne.n	8009626 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 fd73 	bl	800a0f6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009610:	e009      	b.n	8009626 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009612:	6839      	ldr	r1, [r7, #0]
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 fca3 	bl	8009f60 <USBD_CtlError>
          break;
 800961a:	e004      	b.n	8009626 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800961c:	6839      	ldr	r1, [r7, #0]
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 fc9e 	bl	8009f60 <USBD_CtlError>
          break;
 8009624:	e000      	b.n	8009628 <USBD_StdItfReq+0x7c>
          break;
 8009626:	bf00      	nop
      }
      break;
 8009628:	e004      	b.n	8009634 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800962a:	6839      	ldr	r1, [r7, #0]
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 fc97 	bl	8009f60 <USBD_CtlError>
      break;
 8009632:	bf00      	nop
  }

  return ret;
 8009634:	7bfb      	ldrb	r3, [r7, #15]
}
 8009636:	4618      	mov	r0, r3
 8009638:	3710      	adds	r7, #16
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}

0800963e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800963e:	b580      	push	{r7, lr}
 8009640:	b084      	sub	sp, #16
 8009642:	af00      	add	r7, sp, #0
 8009644:	6078      	str	r0, [r7, #4]
 8009646:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009648:	2300      	movs	r3, #0
 800964a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	889b      	ldrh	r3, [r3, #4]
 8009650:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800965a:	2b40      	cmp	r3, #64	; 0x40
 800965c:	d007      	beq.n	800966e <USBD_StdEPReq+0x30>
 800965e:	2b40      	cmp	r3, #64	; 0x40
 8009660:	f200 8145 	bhi.w	80098ee <USBD_StdEPReq+0x2b0>
 8009664:	2b00      	cmp	r3, #0
 8009666:	d00c      	beq.n	8009682 <USBD_StdEPReq+0x44>
 8009668:	2b20      	cmp	r3, #32
 800966a:	f040 8140 	bne.w	80098ee <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	6839      	ldr	r1, [r7, #0]
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	4798      	blx	r3
 800967c:	4603      	mov	r3, r0
 800967e:	73fb      	strb	r3, [r7, #15]
      break;
 8009680:	e13a      	b.n	80098f8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	785b      	ldrb	r3, [r3, #1]
 8009686:	2b03      	cmp	r3, #3
 8009688:	d007      	beq.n	800969a <USBD_StdEPReq+0x5c>
 800968a:	2b03      	cmp	r3, #3
 800968c:	f300 8129 	bgt.w	80098e2 <USBD_StdEPReq+0x2a4>
 8009690:	2b00      	cmp	r3, #0
 8009692:	d07f      	beq.n	8009794 <USBD_StdEPReq+0x156>
 8009694:	2b01      	cmp	r3, #1
 8009696:	d03c      	beq.n	8009712 <USBD_StdEPReq+0xd4>
 8009698:	e123      	b.n	80098e2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	d002      	beq.n	80096ac <USBD_StdEPReq+0x6e>
 80096a6:	2b03      	cmp	r3, #3
 80096a8:	d016      	beq.n	80096d8 <USBD_StdEPReq+0x9a>
 80096aa:	e02c      	b.n	8009706 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096ac:	7bbb      	ldrb	r3, [r7, #14]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d00d      	beq.n	80096ce <USBD_StdEPReq+0x90>
 80096b2:	7bbb      	ldrb	r3, [r7, #14]
 80096b4:	2b80      	cmp	r3, #128	; 0x80
 80096b6:	d00a      	beq.n	80096ce <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80096b8:	7bbb      	ldrb	r3, [r7, #14]
 80096ba:	4619      	mov	r1, r3
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f001 fed3 	bl	800b468 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80096c2:	2180      	movs	r1, #128	; 0x80
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f001 fecf 	bl	800b468 <USBD_LL_StallEP>
 80096ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80096cc:	e020      	b.n	8009710 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80096ce:	6839      	ldr	r1, [r7, #0]
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 fc45 	bl	8009f60 <USBD_CtlError>
              break;
 80096d6:	e01b      	b.n	8009710 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	885b      	ldrh	r3, [r3, #2]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d10e      	bne.n	80096fe <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80096e0:	7bbb      	ldrb	r3, [r7, #14]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00b      	beq.n	80096fe <USBD_StdEPReq+0xc0>
 80096e6:	7bbb      	ldrb	r3, [r7, #14]
 80096e8:	2b80      	cmp	r3, #128	; 0x80
 80096ea:	d008      	beq.n	80096fe <USBD_StdEPReq+0xc0>
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	88db      	ldrh	r3, [r3, #6]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d104      	bne.n	80096fe <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80096f4:	7bbb      	ldrb	r3, [r7, #14]
 80096f6:	4619      	mov	r1, r3
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f001 feb5 	bl	800b468 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 fcf9 	bl	800a0f6 <USBD_CtlSendStatus>

              break;
 8009704:	e004      	b.n	8009710 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009706:	6839      	ldr	r1, [r7, #0]
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 fc29 	bl	8009f60 <USBD_CtlError>
              break;
 800970e:	bf00      	nop
          }
          break;
 8009710:	e0ec      	b.n	80098ec <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009718:	b2db      	uxtb	r3, r3
 800971a:	2b02      	cmp	r3, #2
 800971c:	d002      	beq.n	8009724 <USBD_StdEPReq+0xe6>
 800971e:	2b03      	cmp	r3, #3
 8009720:	d016      	beq.n	8009750 <USBD_StdEPReq+0x112>
 8009722:	e030      	b.n	8009786 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009724:	7bbb      	ldrb	r3, [r7, #14]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00d      	beq.n	8009746 <USBD_StdEPReq+0x108>
 800972a:	7bbb      	ldrb	r3, [r7, #14]
 800972c:	2b80      	cmp	r3, #128	; 0x80
 800972e:	d00a      	beq.n	8009746 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009730:	7bbb      	ldrb	r3, [r7, #14]
 8009732:	4619      	mov	r1, r3
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f001 fe97 	bl	800b468 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800973a:	2180      	movs	r1, #128	; 0x80
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f001 fe93 	bl	800b468 <USBD_LL_StallEP>
 8009742:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009744:	e025      	b.n	8009792 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009746:	6839      	ldr	r1, [r7, #0]
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 fc09 	bl	8009f60 <USBD_CtlError>
              break;
 800974e:	e020      	b.n	8009792 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	885b      	ldrh	r3, [r3, #2]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d11b      	bne.n	8009790 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009758:	7bbb      	ldrb	r3, [r7, #14]
 800975a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800975e:	2b00      	cmp	r3, #0
 8009760:	d004      	beq.n	800976c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009762:	7bbb      	ldrb	r3, [r7, #14]
 8009764:	4619      	mov	r1, r3
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f001 fe9d 	bl	800b4a6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 fcc2 	bl	800a0f6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	6839      	ldr	r1, [r7, #0]
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	4798      	blx	r3
 8009780:	4603      	mov	r3, r0
 8009782:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009784:	e004      	b.n	8009790 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009786:	6839      	ldr	r1, [r7, #0]
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 fbe9 	bl	8009f60 <USBD_CtlError>
              break;
 800978e:	e000      	b.n	8009792 <USBD_StdEPReq+0x154>
              break;
 8009790:	bf00      	nop
          }
          break;
 8009792:	e0ab      	b.n	80098ec <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800979a:	b2db      	uxtb	r3, r3
 800979c:	2b02      	cmp	r3, #2
 800979e:	d002      	beq.n	80097a6 <USBD_StdEPReq+0x168>
 80097a0:	2b03      	cmp	r3, #3
 80097a2:	d032      	beq.n	800980a <USBD_StdEPReq+0x1cc>
 80097a4:	e097      	b.n	80098d6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097a6:	7bbb      	ldrb	r3, [r7, #14]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d007      	beq.n	80097bc <USBD_StdEPReq+0x17e>
 80097ac:	7bbb      	ldrb	r3, [r7, #14]
 80097ae:	2b80      	cmp	r3, #128	; 0x80
 80097b0:	d004      	beq.n	80097bc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80097b2:	6839      	ldr	r1, [r7, #0]
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 fbd3 	bl	8009f60 <USBD_CtlError>
                break;
 80097ba:	e091      	b.n	80098e0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	da0b      	bge.n	80097dc <USBD_StdEPReq+0x19e>
 80097c4:	7bbb      	ldrb	r3, [r7, #14]
 80097c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097ca:	4613      	mov	r3, r2
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	4413      	add	r3, r2
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	3310      	adds	r3, #16
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	4413      	add	r3, r2
 80097d8:	3304      	adds	r3, #4
 80097da:	e00b      	b.n	80097f4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80097dc:	7bbb      	ldrb	r3, [r7, #14]
 80097de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097e2:	4613      	mov	r3, r2
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	4413      	add	r3, r2
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	4413      	add	r3, r2
 80097f2:	3304      	adds	r3, #4
 80097f4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	2200      	movs	r2, #0
 80097fa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	2202      	movs	r2, #2
 8009800:	4619      	mov	r1, r3
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 fc1d 	bl	800a042 <USBD_CtlSendData>
              break;
 8009808:	e06a      	b.n	80098e0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800980a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800980e:	2b00      	cmp	r3, #0
 8009810:	da11      	bge.n	8009836 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009812:	7bbb      	ldrb	r3, [r7, #14]
 8009814:	f003 020f 	and.w	r2, r3, #15
 8009818:	6879      	ldr	r1, [r7, #4]
 800981a:	4613      	mov	r3, r2
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	4413      	add	r3, r2
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	440b      	add	r3, r1
 8009824:	3324      	adds	r3, #36	; 0x24
 8009826:	881b      	ldrh	r3, [r3, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d117      	bne.n	800985c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800982c:	6839      	ldr	r1, [r7, #0]
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 fb96 	bl	8009f60 <USBD_CtlError>
                  break;
 8009834:	e054      	b.n	80098e0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009836:	7bbb      	ldrb	r3, [r7, #14]
 8009838:	f003 020f 	and.w	r2, r3, #15
 800983c:	6879      	ldr	r1, [r7, #4]
 800983e:	4613      	mov	r3, r2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	4413      	add	r3, r2
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	440b      	add	r3, r1
 8009848:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800984c:	881b      	ldrh	r3, [r3, #0]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d104      	bne.n	800985c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009852:	6839      	ldr	r1, [r7, #0]
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 fb83 	bl	8009f60 <USBD_CtlError>
                  break;
 800985a:	e041      	b.n	80098e0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800985c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009860:	2b00      	cmp	r3, #0
 8009862:	da0b      	bge.n	800987c <USBD_StdEPReq+0x23e>
 8009864:	7bbb      	ldrb	r3, [r7, #14]
 8009866:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800986a:	4613      	mov	r3, r2
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	4413      	add	r3, r2
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	3310      	adds	r3, #16
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	4413      	add	r3, r2
 8009878:	3304      	adds	r3, #4
 800987a:	e00b      	b.n	8009894 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800987c:	7bbb      	ldrb	r3, [r7, #14]
 800987e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009882:	4613      	mov	r3, r2
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	4413      	add	r3, r2
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	4413      	add	r3, r2
 8009892:	3304      	adds	r3, #4
 8009894:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009896:	7bbb      	ldrb	r3, [r7, #14]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d002      	beq.n	80098a2 <USBD_StdEPReq+0x264>
 800989c:	7bbb      	ldrb	r3, [r7, #14]
 800989e:	2b80      	cmp	r3, #128	; 0x80
 80098a0:	d103      	bne.n	80098aa <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	2200      	movs	r2, #0
 80098a6:	601a      	str	r2, [r3, #0]
 80098a8:	e00e      	b.n	80098c8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80098aa:	7bbb      	ldrb	r3, [r7, #14]
 80098ac:	4619      	mov	r1, r3
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f001 fe18 	bl	800b4e4 <USBD_LL_IsStallEP>
 80098b4:	4603      	mov	r3, r0
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d003      	beq.n	80098c2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	2201      	movs	r2, #1
 80098be:	601a      	str	r2, [r3, #0]
 80098c0:	e002      	b.n	80098c8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	2200      	movs	r2, #0
 80098c6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	2202      	movs	r2, #2
 80098cc:	4619      	mov	r1, r3
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 fbb7 	bl	800a042 <USBD_CtlSendData>
              break;
 80098d4:	e004      	b.n	80098e0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80098d6:	6839      	ldr	r1, [r7, #0]
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 fb41 	bl	8009f60 <USBD_CtlError>
              break;
 80098de:	bf00      	nop
          }
          break;
 80098e0:	e004      	b.n	80098ec <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80098e2:	6839      	ldr	r1, [r7, #0]
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 fb3b 	bl	8009f60 <USBD_CtlError>
          break;
 80098ea:	bf00      	nop
      }
      break;
 80098ec:	e004      	b.n	80098f8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80098ee:	6839      	ldr	r1, [r7, #0]
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 fb35 	bl	8009f60 <USBD_CtlError>
      break;
 80098f6:	bf00      	nop
  }

  return ret;
 80098f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3710      	adds	r7, #16
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
	...

08009904 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800990e:	2300      	movs	r3, #0
 8009910:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009912:	2300      	movs	r3, #0
 8009914:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009916:	2300      	movs	r3, #0
 8009918:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	885b      	ldrh	r3, [r3, #2]
 800991e:	0a1b      	lsrs	r3, r3, #8
 8009920:	b29b      	uxth	r3, r3
 8009922:	3b01      	subs	r3, #1
 8009924:	2b06      	cmp	r3, #6
 8009926:	f200 8128 	bhi.w	8009b7a <USBD_GetDescriptor+0x276>
 800992a:	a201      	add	r2, pc, #4	; (adr r2, 8009930 <USBD_GetDescriptor+0x2c>)
 800992c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009930:	0800994d 	.word	0x0800994d
 8009934:	08009965 	.word	0x08009965
 8009938:	080099a5 	.word	0x080099a5
 800993c:	08009b7b 	.word	0x08009b7b
 8009940:	08009b7b 	.word	0x08009b7b
 8009944:	08009b1b 	.word	0x08009b1b
 8009948:	08009b47 	.word	0x08009b47
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	7c12      	ldrb	r2, [r2, #16]
 8009958:	f107 0108 	add.w	r1, r7, #8
 800995c:	4610      	mov	r0, r2
 800995e:	4798      	blx	r3
 8009960:	60f8      	str	r0, [r7, #12]
      break;
 8009962:	e112      	b.n	8009b8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	7c1b      	ldrb	r3, [r3, #16]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d10d      	bne.n	8009988 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009974:	f107 0208 	add.w	r2, r7, #8
 8009978:	4610      	mov	r0, r2
 800997a:	4798      	blx	r3
 800997c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	3301      	adds	r3, #1
 8009982:	2202      	movs	r2, #2
 8009984:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009986:	e100      	b.n	8009b8a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800998e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009990:	f107 0208 	add.w	r2, r7, #8
 8009994:	4610      	mov	r0, r2
 8009996:	4798      	blx	r3
 8009998:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	3301      	adds	r3, #1
 800999e:	2202      	movs	r2, #2
 80099a0:	701a      	strb	r2, [r3, #0]
      break;
 80099a2:	e0f2      	b.n	8009b8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	885b      	ldrh	r3, [r3, #2]
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	2b05      	cmp	r3, #5
 80099ac:	f200 80ac 	bhi.w	8009b08 <USBD_GetDescriptor+0x204>
 80099b0:	a201      	add	r2, pc, #4	; (adr r2, 80099b8 <USBD_GetDescriptor+0xb4>)
 80099b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b6:	bf00      	nop
 80099b8:	080099d1 	.word	0x080099d1
 80099bc:	08009a05 	.word	0x08009a05
 80099c0:	08009a39 	.word	0x08009a39
 80099c4:	08009a6d 	.word	0x08009a6d
 80099c8:	08009aa1 	.word	0x08009aa1
 80099cc:	08009ad5 	.word	0x08009ad5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d00b      	beq.n	80099f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	7c12      	ldrb	r2, [r2, #16]
 80099e8:	f107 0108 	add.w	r1, r7, #8
 80099ec:	4610      	mov	r0, r2
 80099ee:	4798      	blx	r3
 80099f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099f2:	e091      	b.n	8009b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099f4:	6839      	ldr	r1, [r7, #0]
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 fab2 	bl	8009f60 <USBD_CtlError>
            err++;
 80099fc:	7afb      	ldrb	r3, [r7, #11]
 80099fe:	3301      	adds	r3, #1
 8009a00:	72fb      	strb	r3, [r7, #11]
          break;
 8009a02:	e089      	b.n	8009b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00b      	beq.n	8009a28 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	7c12      	ldrb	r2, [r2, #16]
 8009a1c:	f107 0108 	add.w	r1, r7, #8
 8009a20:	4610      	mov	r0, r2
 8009a22:	4798      	blx	r3
 8009a24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a26:	e077      	b.n	8009b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a28:	6839      	ldr	r1, [r7, #0]
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f000 fa98 	bl	8009f60 <USBD_CtlError>
            err++;
 8009a30:	7afb      	ldrb	r3, [r7, #11]
 8009a32:	3301      	adds	r3, #1
 8009a34:	72fb      	strb	r3, [r7, #11]
          break;
 8009a36:	e06f      	b.n	8009b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d00b      	beq.n	8009a5c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	7c12      	ldrb	r2, [r2, #16]
 8009a50:	f107 0108 	add.w	r1, r7, #8
 8009a54:	4610      	mov	r0, r2
 8009a56:	4798      	blx	r3
 8009a58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a5a:	e05d      	b.n	8009b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a5c:	6839      	ldr	r1, [r7, #0]
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fa7e 	bl	8009f60 <USBD_CtlError>
            err++;
 8009a64:	7afb      	ldrb	r3, [r7, #11]
 8009a66:	3301      	adds	r3, #1
 8009a68:	72fb      	strb	r3, [r7, #11]
          break;
 8009a6a:	e055      	b.n	8009b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d00b      	beq.n	8009a90 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	7c12      	ldrb	r2, [r2, #16]
 8009a84:	f107 0108 	add.w	r1, r7, #8
 8009a88:	4610      	mov	r0, r2
 8009a8a:	4798      	blx	r3
 8009a8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a8e:	e043      	b.n	8009b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a90:	6839      	ldr	r1, [r7, #0]
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 fa64 	bl	8009f60 <USBD_CtlError>
            err++;
 8009a98:	7afb      	ldrb	r3, [r7, #11]
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	72fb      	strb	r3, [r7, #11]
          break;
 8009a9e:	e03b      	b.n	8009b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aa6:	695b      	ldr	r3, [r3, #20]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d00b      	beq.n	8009ac4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ab2:	695b      	ldr	r3, [r3, #20]
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	7c12      	ldrb	r2, [r2, #16]
 8009ab8:	f107 0108 	add.w	r1, r7, #8
 8009abc:	4610      	mov	r0, r2
 8009abe:	4798      	blx	r3
 8009ac0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ac2:	e029      	b.n	8009b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ac4:	6839      	ldr	r1, [r7, #0]
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 fa4a 	bl	8009f60 <USBD_CtlError>
            err++;
 8009acc:	7afb      	ldrb	r3, [r7, #11]
 8009ace:	3301      	adds	r3, #1
 8009ad0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ad2:	e021      	b.n	8009b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ada:	699b      	ldr	r3, [r3, #24]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d00b      	beq.n	8009af8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ae6:	699b      	ldr	r3, [r3, #24]
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	7c12      	ldrb	r2, [r2, #16]
 8009aec:	f107 0108 	add.w	r1, r7, #8
 8009af0:	4610      	mov	r0, r2
 8009af2:	4798      	blx	r3
 8009af4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009af6:	e00f      	b.n	8009b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009af8:	6839      	ldr	r1, [r7, #0]
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 fa30 	bl	8009f60 <USBD_CtlError>
            err++;
 8009b00:	7afb      	ldrb	r3, [r7, #11]
 8009b02:	3301      	adds	r3, #1
 8009b04:	72fb      	strb	r3, [r7, #11]
          break;
 8009b06:	e007      	b.n	8009b18 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009b08:	6839      	ldr	r1, [r7, #0]
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 fa28 	bl	8009f60 <USBD_CtlError>
          err++;
 8009b10:	7afb      	ldrb	r3, [r7, #11]
 8009b12:	3301      	adds	r3, #1
 8009b14:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009b16:	bf00      	nop
      }
      break;
 8009b18:	e037      	b.n	8009b8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	7c1b      	ldrb	r3, [r3, #16]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d109      	bne.n	8009b36 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b2a:	f107 0208 	add.w	r2, r7, #8
 8009b2e:	4610      	mov	r0, r2
 8009b30:	4798      	blx	r3
 8009b32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b34:	e029      	b.n	8009b8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009b36:	6839      	ldr	r1, [r7, #0]
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 fa11 	bl	8009f60 <USBD_CtlError>
        err++;
 8009b3e:	7afb      	ldrb	r3, [r7, #11]
 8009b40:	3301      	adds	r3, #1
 8009b42:	72fb      	strb	r3, [r7, #11]
      break;
 8009b44:	e021      	b.n	8009b8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	7c1b      	ldrb	r3, [r3, #16]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d10d      	bne.n	8009b6a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b56:	f107 0208 	add.w	r2, r7, #8
 8009b5a:	4610      	mov	r0, r2
 8009b5c:	4798      	blx	r3
 8009b5e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	3301      	adds	r3, #1
 8009b64:	2207      	movs	r2, #7
 8009b66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b68:	e00f      	b.n	8009b8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009b6a:	6839      	ldr	r1, [r7, #0]
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 f9f7 	bl	8009f60 <USBD_CtlError>
        err++;
 8009b72:	7afb      	ldrb	r3, [r7, #11]
 8009b74:	3301      	adds	r3, #1
 8009b76:	72fb      	strb	r3, [r7, #11]
      break;
 8009b78:	e007      	b.n	8009b8a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009b7a:	6839      	ldr	r1, [r7, #0]
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 f9ef 	bl	8009f60 <USBD_CtlError>
      err++;
 8009b82:	7afb      	ldrb	r3, [r7, #11]
 8009b84:	3301      	adds	r3, #1
 8009b86:	72fb      	strb	r3, [r7, #11]
      break;
 8009b88:	bf00      	nop
  }

  if (err != 0U)
 8009b8a:	7afb      	ldrb	r3, [r7, #11]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d11e      	bne.n	8009bce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	88db      	ldrh	r3, [r3, #6]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d016      	beq.n	8009bc6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009b98:	893b      	ldrh	r3, [r7, #8]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00e      	beq.n	8009bbc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	88da      	ldrh	r2, [r3, #6]
 8009ba2:	893b      	ldrh	r3, [r7, #8]
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	bf28      	it	cs
 8009ba8:	4613      	movcs	r3, r2
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009bae:	893b      	ldrh	r3, [r7, #8]
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	68f9      	ldr	r1, [r7, #12]
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 fa44 	bl	800a042 <USBD_CtlSendData>
 8009bba:	e009      	b.n	8009bd0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009bbc:	6839      	ldr	r1, [r7, #0]
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 f9ce 	bl	8009f60 <USBD_CtlError>
 8009bc4:	e004      	b.n	8009bd0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 fa95 	bl	800a0f6 <USBD_CtlSendStatus>
 8009bcc:	e000      	b.n	8009bd0 <USBD_GetDescriptor+0x2cc>
    return;
 8009bce:	bf00      	nop
  }
}
 8009bd0:	3710      	adds	r7, #16
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop

08009bd8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	889b      	ldrh	r3, [r3, #4]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d131      	bne.n	8009c4e <USBD_SetAddress+0x76>
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	88db      	ldrh	r3, [r3, #6]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d12d      	bne.n	8009c4e <USBD_SetAddress+0x76>
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	885b      	ldrh	r3, [r3, #2]
 8009bf6:	2b7f      	cmp	r3, #127	; 0x7f
 8009bf8:	d829      	bhi.n	8009c4e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	885b      	ldrh	r3, [r3, #2]
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c04:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	2b03      	cmp	r3, #3
 8009c10:	d104      	bne.n	8009c1c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009c12:	6839      	ldr	r1, [r7, #0]
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 f9a3 	bl	8009f60 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c1a:	e01d      	b.n	8009c58 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	7bfa      	ldrb	r2, [r7, #15]
 8009c20:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009c24:	7bfb      	ldrb	r3, [r7, #15]
 8009c26:	4619      	mov	r1, r3
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f001 fc87 	bl	800b53c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 fa61 	bl	800a0f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009c34:	7bfb      	ldrb	r3, [r7, #15]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d004      	beq.n	8009c44 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2202      	movs	r2, #2
 8009c3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c42:	e009      	b.n	8009c58 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c4c:	e004      	b.n	8009c58 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009c4e:	6839      	ldr	r1, [r7, #0]
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 f985 	bl	8009f60 <USBD_CtlError>
  }
}
 8009c56:	bf00      	nop
 8009c58:	bf00      	nop
 8009c5a:	3710      	adds	r7, #16
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	885b      	ldrh	r3, [r3, #2]
 8009c72:	b2da      	uxtb	r2, r3
 8009c74:	4b4c      	ldr	r3, [pc, #304]	; (8009da8 <USBD_SetConfig+0x148>)
 8009c76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009c78:	4b4b      	ldr	r3, [pc, #300]	; (8009da8 <USBD_SetConfig+0x148>)
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d905      	bls.n	8009c8c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009c80:	6839      	ldr	r1, [r7, #0]
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 f96c 	bl	8009f60 <USBD_CtlError>
    return USBD_FAIL;
 8009c88:	2303      	movs	r3, #3
 8009c8a:	e088      	b.n	8009d9e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	2b02      	cmp	r3, #2
 8009c96:	d002      	beq.n	8009c9e <USBD_SetConfig+0x3e>
 8009c98:	2b03      	cmp	r3, #3
 8009c9a:	d025      	beq.n	8009ce8 <USBD_SetConfig+0x88>
 8009c9c:	e071      	b.n	8009d82 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009c9e:	4b42      	ldr	r3, [pc, #264]	; (8009da8 <USBD_SetConfig+0x148>)
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d01c      	beq.n	8009ce0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009ca6:	4b40      	ldr	r3, [pc, #256]	; (8009da8 <USBD_SetConfig+0x148>)
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	461a      	mov	r2, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009cb0:	4b3d      	ldr	r3, [pc, #244]	; (8009da8 <USBD_SetConfig+0x148>)
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f7ff f948 	bl	8008f4c <USBD_SetClassConfig>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009cc0:	7bfb      	ldrb	r3, [r7, #15]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d004      	beq.n	8009cd0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009cc6:	6839      	ldr	r1, [r7, #0]
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 f949 	bl	8009f60 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009cce:	e065      	b.n	8009d9c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 fa10 	bl	800a0f6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2203      	movs	r2, #3
 8009cda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009cde:	e05d      	b.n	8009d9c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 fa08 	bl	800a0f6 <USBD_CtlSendStatus>
      break;
 8009ce6:	e059      	b.n	8009d9c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009ce8:	4b2f      	ldr	r3, [pc, #188]	; (8009da8 <USBD_SetConfig+0x148>)
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d112      	bne.n	8009d16 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2202      	movs	r2, #2
 8009cf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009cf8:	4b2b      	ldr	r3, [pc, #172]	; (8009da8 <USBD_SetConfig+0x148>)
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d02:	4b29      	ldr	r3, [pc, #164]	; (8009da8 <USBD_SetConfig+0x148>)
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	4619      	mov	r1, r3
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f7ff f93b 	bl	8008f84 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 f9f1 	bl	800a0f6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d14:	e042      	b.n	8009d9c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009d16:	4b24      	ldr	r3, [pc, #144]	; (8009da8 <USBD_SetConfig+0x148>)
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d02a      	beq.n	8009d7a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f7ff f929 	bl	8008f84 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009d32:	4b1d      	ldr	r3, [pc, #116]	; (8009da8 <USBD_SetConfig+0x148>)
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	461a      	mov	r2, r3
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d3c:	4b1a      	ldr	r3, [pc, #104]	; (8009da8 <USBD_SetConfig+0x148>)
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	4619      	mov	r1, r3
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f7ff f902 	bl	8008f4c <USBD_SetClassConfig>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009d4c:	7bfb      	ldrb	r3, [r7, #15]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d00f      	beq.n	8009d72 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009d52:	6839      	ldr	r1, [r7, #0]
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 f903 	bl	8009f60 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	b2db      	uxtb	r3, r3
 8009d60:	4619      	mov	r1, r3
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f7ff f90e 	bl	8008f84 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2202      	movs	r2, #2
 8009d6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009d70:	e014      	b.n	8009d9c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 f9bf 	bl	800a0f6 <USBD_CtlSendStatus>
      break;
 8009d78:	e010      	b.n	8009d9c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 f9bb 	bl	800a0f6 <USBD_CtlSendStatus>
      break;
 8009d80:	e00c      	b.n	8009d9c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009d82:	6839      	ldr	r1, [r7, #0]
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 f8eb 	bl	8009f60 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d8a:	4b07      	ldr	r3, [pc, #28]	; (8009da8 <USBD_SetConfig+0x148>)
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	4619      	mov	r1, r3
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f7ff f8f7 	bl	8008f84 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009d96:	2303      	movs	r3, #3
 8009d98:	73fb      	strb	r3, [r7, #15]
      break;
 8009d9a:	bf00      	nop
  }

  return ret;
 8009d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	2000019c 	.word	0x2000019c

08009dac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b082      	sub	sp, #8
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	88db      	ldrh	r3, [r3, #6]
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d004      	beq.n	8009dc8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009dbe:	6839      	ldr	r1, [r7, #0]
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f000 f8cd 	bl	8009f60 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009dc6:	e023      	b.n	8009e10 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	2b02      	cmp	r3, #2
 8009dd2:	dc02      	bgt.n	8009dda <USBD_GetConfig+0x2e>
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	dc03      	bgt.n	8009de0 <USBD_GetConfig+0x34>
 8009dd8:	e015      	b.n	8009e06 <USBD_GetConfig+0x5a>
 8009dda:	2b03      	cmp	r3, #3
 8009ddc:	d00b      	beq.n	8009df6 <USBD_GetConfig+0x4a>
 8009dde:	e012      	b.n	8009e06 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2200      	movs	r2, #0
 8009de4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	3308      	adds	r3, #8
 8009dea:	2201      	movs	r2, #1
 8009dec:	4619      	mov	r1, r3
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 f927 	bl	800a042 <USBD_CtlSendData>
        break;
 8009df4:	e00c      	b.n	8009e10 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	3304      	adds	r3, #4
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 f91f 	bl	800a042 <USBD_CtlSendData>
        break;
 8009e04:	e004      	b.n	8009e10 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009e06:	6839      	ldr	r1, [r7, #0]
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 f8a9 	bl	8009f60 <USBD_CtlError>
        break;
 8009e0e:	bf00      	nop
}
 8009e10:	bf00      	nop
 8009e12:	3708      	adds	r7, #8
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	2b02      	cmp	r3, #2
 8009e2e:	d81e      	bhi.n	8009e6e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	88db      	ldrh	r3, [r3, #6]
 8009e34:	2b02      	cmp	r3, #2
 8009e36:	d004      	beq.n	8009e42 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009e38:	6839      	ldr	r1, [r7, #0]
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 f890 	bl	8009f60 <USBD_CtlError>
        break;
 8009e40:	e01a      	b.n	8009e78 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2201      	movs	r2, #1
 8009e46:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d005      	beq.n	8009e5e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	f043 0202 	orr.w	r2, r3, #2
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	330c      	adds	r3, #12
 8009e62:	2202      	movs	r2, #2
 8009e64:	4619      	mov	r1, r3
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 f8eb 	bl	800a042 <USBD_CtlSendData>
      break;
 8009e6c:	e004      	b.n	8009e78 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009e6e:	6839      	ldr	r1, [r7, #0]
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 f875 	bl	8009f60 <USBD_CtlError>
      break;
 8009e76:	bf00      	nop
  }
}
 8009e78:	bf00      	nop
 8009e7a:	3708      	adds	r7, #8
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	885b      	ldrh	r3, [r3, #2]
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d106      	bne.n	8009ea0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2201      	movs	r2, #1
 8009e96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 f92b 	bl	800a0f6 <USBD_CtlSendStatus>
  }
}
 8009ea0:	bf00      	nop
 8009ea2:	3708      	adds	r7, #8
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eb8:	b2db      	uxtb	r3, r3
 8009eba:	3b01      	subs	r3, #1
 8009ebc:	2b02      	cmp	r3, #2
 8009ebe:	d80b      	bhi.n	8009ed8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	885b      	ldrh	r3, [r3, #2]
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d10c      	bne.n	8009ee2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 f910 	bl	800a0f6 <USBD_CtlSendStatus>
      }
      break;
 8009ed6:	e004      	b.n	8009ee2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009ed8:	6839      	ldr	r1, [r7, #0]
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 f840 	bl	8009f60 <USBD_CtlError>
      break;
 8009ee0:	e000      	b.n	8009ee4 <USBD_ClrFeature+0x3c>
      break;
 8009ee2:	bf00      	nop
  }
}
 8009ee4:	bf00      	nop
 8009ee6:	3708      	adds	r7, #8
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	781a      	ldrb	r2, [r3, #0]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	3301      	adds	r3, #1
 8009f06:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	781a      	ldrb	r2, [r3, #0]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	3301      	adds	r3, #1
 8009f14:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009f16:	68f8      	ldr	r0, [r7, #12]
 8009f18:	f7ff fabb 	bl	8009492 <SWAPBYTE>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	461a      	mov	r2, r3
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	3301      	adds	r3, #1
 8009f28:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009f30:	68f8      	ldr	r0, [r7, #12]
 8009f32:	f7ff faae 	bl	8009492 <SWAPBYTE>
 8009f36:	4603      	mov	r3, r0
 8009f38:	461a      	mov	r2, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	3301      	adds	r3, #1
 8009f42:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	3301      	adds	r3, #1
 8009f48:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009f4a:	68f8      	ldr	r0, [r7, #12]
 8009f4c:	f7ff faa1 	bl	8009492 <SWAPBYTE>
 8009f50:	4603      	mov	r3, r0
 8009f52:	461a      	mov	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	80da      	strh	r2, [r3, #6]
}
 8009f58:	bf00      	nop
 8009f5a:	3710      	adds	r7, #16
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f6a:	2180      	movs	r1, #128	; 0x80
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f001 fa7b 	bl	800b468 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009f72:	2100      	movs	r1, #0
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f001 fa77 	bl	800b468 <USBD_LL_StallEP>
}
 8009f7a:	bf00      	nop
 8009f7c:	3708      	adds	r7, #8
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}

08009f82 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b086      	sub	sp, #24
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	60f8      	str	r0, [r7, #12]
 8009f8a:	60b9      	str	r1, [r7, #8]
 8009f8c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d036      	beq.n	800a006 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009f9c:	6938      	ldr	r0, [r7, #16]
 8009f9e:	f000 f836 	bl	800a00e <USBD_GetLen>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	005b      	lsls	r3, r3, #1
 8009faa:	b29a      	uxth	r2, r3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009fb0:	7dfb      	ldrb	r3, [r7, #23]
 8009fb2:	68ba      	ldr	r2, [r7, #8]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	7812      	ldrb	r2, [r2, #0]
 8009fba:	701a      	strb	r2, [r3, #0]
  idx++;
 8009fbc:	7dfb      	ldrb	r3, [r7, #23]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009fc2:	7dfb      	ldrb	r3, [r7, #23]
 8009fc4:	68ba      	ldr	r2, [r7, #8]
 8009fc6:	4413      	add	r3, r2
 8009fc8:	2203      	movs	r2, #3
 8009fca:	701a      	strb	r2, [r3, #0]
  idx++;
 8009fcc:	7dfb      	ldrb	r3, [r7, #23]
 8009fce:	3301      	adds	r3, #1
 8009fd0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009fd2:	e013      	b.n	8009ffc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009fd4:	7dfb      	ldrb	r3, [r7, #23]
 8009fd6:	68ba      	ldr	r2, [r7, #8]
 8009fd8:	4413      	add	r3, r2
 8009fda:	693a      	ldr	r2, [r7, #16]
 8009fdc:	7812      	ldrb	r2, [r2, #0]
 8009fde:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	613b      	str	r3, [r7, #16]
    idx++;
 8009fe6:	7dfb      	ldrb	r3, [r7, #23]
 8009fe8:	3301      	adds	r3, #1
 8009fea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009fec:	7dfb      	ldrb	r3, [r7, #23]
 8009fee:	68ba      	ldr	r2, [r7, #8]
 8009ff0:	4413      	add	r3, r2
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	701a      	strb	r2, [r3, #0]
    idx++;
 8009ff6:	7dfb      	ldrb	r3, [r7, #23]
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d1e7      	bne.n	8009fd4 <USBD_GetString+0x52>
 800a004:	e000      	b.n	800a008 <USBD_GetString+0x86>
    return;
 800a006:	bf00      	nop
  }
}
 800a008:	3718      	adds	r7, #24
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}

0800a00e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a00e:	b480      	push	{r7}
 800a010:	b085      	sub	sp, #20
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a016:	2300      	movs	r3, #0
 800a018:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a01e:	e005      	b.n	800a02c <USBD_GetLen+0x1e>
  {
    len++;
 800a020:	7bfb      	ldrb	r3, [r7, #15]
 800a022:	3301      	adds	r3, #1
 800a024:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	3301      	adds	r3, #1
 800a02a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d1f5      	bne.n	800a020 <USBD_GetLen+0x12>
  }

  return len;
 800a034:	7bfb      	ldrb	r3, [r7, #15]
}
 800a036:	4618      	mov	r0, r3
 800a038:	3714      	adds	r7, #20
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr

0800a042 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b084      	sub	sp, #16
 800a046:	af00      	add	r7, sp, #0
 800a048:	60f8      	str	r0, [r7, #12]
 800a04a:	60b9      	str	r1, [r7, #8]
 800a04c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2202      	movs	r2, #2
 800a052:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	68ba      	ldr	r2, [r7, #8]
 800a066:	2100      	movs	r1, #0
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f001 fa86 	bl	800b57a <USBD_LL_Transmit>

  return USBD_OK;
 800a06e:	2300      	movs	r3, #0
}
 800a070:	4618      	mov	r0, r3
 800a072:	3710      	adds	r7, #16
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	60b9      	str	r1, [r7, #8]
 800a082:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	68ba      	ldr	r2, [r7, #8]
 800a088:	2100      	movs	r1, #0
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	f001 fa75 	bl	800b57a <USBD_LL_Transmit>

  return USBD_OK;
 800a090:	2300      	movs	r3, #0
}
 800a092:	4618      	mov	r0, r3
 800a094:	3710      	adds	r7, #16
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b084      	sub	sp, #16
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	60f8      	str	r0, [r7, #12]
 800a0a2:	60b9      	str	r1, [r7, #8]
 800a0a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2203      	movs	r2, #3
 800a0aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	68ba      	ldr	r2, [r7, #8]
 800a0c2:	2100      	movs	r1, #0
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f001 fa79 	bl	800b5bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3710      	adds	r7, #16
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b084      	sub	sp, #16
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	68ba      	ldr	r2, [r7, #8]
 800a0e4:	2100      	movs	r1, #0
 800a0e6:	68f8      	ldr	r0, [r7, #12]
 800a0e8:	f001 fa68 	bl	800b5bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0ec:	2300      	movs	r3, #0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3710      	adds	r7, #16
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}

0800a0f6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a0f6:	b580      	push	{r7, lr}
 800a0f8:	b082      	sub	sp, #8
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2204      	movs	r2, #4
 800a102:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a106:	2300      	movs	r3, #0
 800a108:	2200      	movs	r2, #0
 800a10a:	2100      	movs	r1, #0
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f001 fa34 	bl	800b57a <USBD_LL_Transmit>

  return USBD_OK;
 800a112:	2300      	movs	r3, #0
}
 800a114:	4618      	mov	r0, r3
 800a116:	3708      	adds	r7, #8
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2205      	movs	r2, #5
 800a128:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a12c:	2300      	movs	r3, #0
 800a12e:	2200      	movs	r2, #0
 800a130:	2100      	movs	r1, #0
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f001 fa42 	bl	800b5bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3708      	adds	r7, #8
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
	...

0800a144 <ApplicationPerform>:


/* Interfaced functions */

void ApplicationPerform()
{
 800a144:	b580      	push	{r7, lr}
 800a146:	af00      	add	r7, sp, #0

	switch(sApplicationBase.eApplicationState)
 800a148:	4b16      	ldr	r3, [pc, #88]	; (800a1a4 <ApplicationPerform+0x60>)
 800a14a:	7edb      	ldrb	r3, [r3, #27]
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	2b03      	cmp	r3, #3
 800a150:	d820      	bhi.n	800a194 <ApplicationPerform+0x50>
 800a152:	a201      	add	r2, pc, #4	; (adr r2, 800a158 <ApplicationPerform+0x14>)
 800a154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a158:	0800a169 	.word	0x0800a169
 800a15c:	0800a177 	.word	0x0800a177
 800a160:	0800a18f 	.word	0x0800a18f
 800a164:	0800a19d 	.word	0x0800a19d
	{
	case eApp_EntryState:
		OperateLED_A(eLED_On);
 800a168:	2000      	movs	r0, #0
 800a16a:	f7f6 f9b1 	bl	80004d0 <OperateLED_A>
		AppStateChangeRequest(eApp_Initialization);
 800a16e:	2001      	movs	r0, #1
 800a170:	f000 f8a2 	bl	800a2b8 <AppStateChangeRequest>
		break;
 800a174:	e013      	b.n	800a19e <ApplicationPerform+0x5a>

	case eApp_Initialization:
		AppEnableResetTaskTimers();
 800a176:	f000 f8ed 	bl	800a354 <AppEnableResetTaskTimers>
		TempCollect_Initialize();
 800a17a:	f000 f949 	bl	800a410 <TempCollect_Initialize>
		TurnAllSensorOn();
 800a17e:	f7f6 fa09 	bl	8000594 <TurnAllSensorOn>
		TurnOnSynchronousEvent();
 800a182:	f000 f916 	bl	800a3b2 <TurnOnSynchronousEvent>
		AppStateChangeRequest(eApp_Perform);
 800a186:	2002      	movs	r0, #2
 800a188:	f000 f896 	bl	800a2b8 <AppStateChangeRequest>
		break;
 800a18c:	e007      	b.n	800a19e <ApplicationPerform+0x5a>

	case eApp_Perform:
		AsynchronousTaskScheduler();
 800a18e:	f000 f865 	bl	800a25c <AsynchronousTaskScheduler>
		break;
 800a192:	e004      	b.n	800a19e <ApplicationPerform+0x5a>

	case eApp_Shutdown:
		break;

	default:
		sApplicationBase.sErrorReg.bAppDefaultStateEntryError = true;
 800a194:	4b03      	ldr	r3, [pc, #12]	; (800a1a4 <ApplicationPerform+0x60>)
 800a196:	2201      	movs	r2, #1
 800a198:	761a      	strb	r2, [r3, #24]
		break;
 800a19a:	e000      	b.n	800a19e <ApplicationPerform+0x5a>
		break;
 800a19c:	bf00      	nop
	}

}
 800a19e:	bf00      	nop
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	200001a0 	.word	0x200001a0

0800a1a8 <AsynchronousTaskTimerUpdate>:

void AsynchronousTaskTimerUpdate()
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	af00      	add	r7, sp, #0
	if(sApplicationBase.sAsyncTimers.s1000ms.bEnabledFlag)
 800a1ac:	4b20      	ldr	r3, [pc, #128]	; (800a230 <AsynchronousTaskTimerUpdate+0x88>)
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d006      	beq.n	800a1c4 <AsynchronousTaskTimerUpdate+0x1c>
	{
		sApplicationBase.sAsyncTimers.s1000ms.u16Counter++;
 800a1b6:	4b1e      	ldr	r3, [pc, #120]	; (800a230 <AsynchronousTaskTimerUpdate+0x88>)
 800a1b8:	885b      	ldrh	r3, [r3, #2]
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	3301      	adds	r3, #1
 800a1be:	b29a      	uxth	r2, r3
 800a1c0:	4b1b      	ldr	r3, [pc, #108]	; (800a230 <AsynchronousTaskTimerUpdate+0x88>)
 800a1c2:	805a      	strh	r2, [r3, #2]
	}
	if(sApplicationBase.sAsyncTimers.s100ms.bEnabledFlag)
 800a1c4:	4b1a      	ldr	r3, [pc, #104]	; (800a230 <AsynchronousTaskTimerUpdate+0x88>)
 800a1c6:	791b      	ldrb	r3, [r3, #4]
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d006      	beq.n	800a1dc <AsynchronousTaskTimerUpdate+0x34>
	{
		sApplicationBase.sAsyncTimers.s100ms.u16Counter++;
 800a1ce:	4b18      	ldr	r3, [pc, #96]	; (800a230 <AsynchronousTaskTimerUpdate+0x88>)
 800a1d0:	88db      	ldrh	r3, [r3, #6]
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	b29a      	uxth	r2, r3
 800a1d8:	4b15      	ldr	r3, [pc, #84]	; (800a230 <AsynchronousTaskTimerUpdate+0x88>)
 800a1da:	80da      	strh	r2, [r3, #6]
	}
	if(sApplicationBase.sAsyncTimers.s10ms.bEnabledFlag)
 800a1dc:	4b14      	ldr	r3, [pc, #80]	; (800a230 <AsynchronousTaskTimerUpdate+0x88>)
 800a1de:	7a1b      	ldrb	r3, [r3, #8]
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d006      	beq.n	800a1f4 <AsynchronousTaskTimerUpdate+0x4c>
	{
		sApplicationBase.sAsyncTimers.s10ms.u16Counter++;
 800a1e6:	4b12      	ldr	r3, [pc, #72]	; (800a230 <AsynchronousTaskTimerUpdate+0x88>)
 800a1e8:	895b      	ldrh	r3, [r3, #10]
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	b29a      	uxth	r2, r3
 800a1f0:	4b0f      	ldr	r3, [pc, #60]	; (800a230 <AsynchronousTaskTimerUpdate+0x88>)
 800a1f2:	815a      	strh	r2, [r3, #10]
	}
	if(sApplicationBase.sAsyncTimers.s1ms.bEnabledFlag)
 800a1f4:	4b0e      	ldr	r3, [pc, #56]	; (800a230 <AsynchronousTaskTimerUpdate+0x88>)
 800a1f6:	7b1b      	ldrb	r3, [r3, #12]
 800a1f8:	b2db      	uxtb	r3, r3
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d006      	beq.n	800a20c <AsynchronousTaskTimerUpdate+0x64>
	{
		sApplicationBase.sAsyncTimers.s1ms.u16Counter++;
 800a1fe:	4b0c      	ldr	r3, [pc, #48]	; (800a230 <AsynchronousTaskTimerUpdate+0x88>)
 800a200:	89db      	ldrh	r3, [r3, #14]
 800a202:	b29b      	uxth	r3, r3
 800a204:	3301      	adds	r3, #1
 800a206:	b29a      	uxth	r2, r3
 800a208:	4b09      	ldr	r3, [pc, #36]	; (800a230 <AsynchronousTaskTimerUpdate+0x88>)
 800a20a:	81da      	strh	r2, [r3, #14]
	}
	if(sApplicationBase.sAsyncTimers.s500us.bEnabledFlag)
 800a20c:	4b08      	ldr	r3, [pc, #32]	; (800a230 <AsynchronousTaskTimerUpdate+0x88>)
 800a20e:	7c1b      	ldrb	r3, [r3, #16]
 800a210:	b2db      	uxtb	r3, r3
 800a212:	2b00      	cmp	r3, #0
 800a214:	d006      	beq.n	800a224 <AsynchronousTaskTimerUpdate+0x7c>
	{
		sApplicationBase.sAsyncTimers.s500us.u16Counter++;
 800a216:	4b06      	ldr	r3, [pc, #24]	; (800a230 <AsynchronousTaskTimerUpdate+0x88>)
 800a218:	8a5b      	ldrh	r3, [r3, #18]
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	3301      	adds	r3, #1
 800a21e:	b29a      	uxth	r2, r3
 800a220:	4b03      	ldr	r3, [pc, #12]	; (800a230 <AsynchronousTaskTimerUpdate+0x88>)
 800a222:	825a      	strh	r2, [r3, #18]
	}

}
 800a224:	bf00      	nop
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr
 800a22e:	bf00      	nop
 800a230:	200001a0 	.word	0x200001a0

0800a234 <AsynchronousTask_10ms>:

/* Internal functions */
void AsynchronousTask_10ms()
{
 800a234:	b580      	push	{r7, lr}
 800a236:	af00      	add	r7, sp, #0
	TempCollect_Operate();
 800a238:	f000 f8c2 	bl	800a3c0 <TempCollect_Operate>
}
 800a23c:	bf00      	nop
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <AsynchronousTask_100ms>:

void AsynchronousTask_100ms()
{
 800a240:	b480      	push	{r7}
 800a242:	af00      	add	r7, sp, #0

}
 800a244:	bf00      	nop
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr

0800a24e <AsynchronousTask_1000ms>:

void AsynchronousTask_1000ms()
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	af00      	add	r7, sp, #0
	ToggleLED_B();
 800a252:	f7f6 f959 	bl	8000508 <ToggleLED_B>
}
 800a256:	bf00      	nop
 800a258:	bd80      	pop	{r7, pc}
	...

0800a25c <AsynchronousTaskScheduler>:

void AsynchronousTaskScheduler()
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	af00      	add	r7, sp, #0
	if(sApplicationBase.sAsyncTimers.s1000ms.u16Counter >= dAsynchronousTaskPeriod1000ms)
 800a260:	4b14      	ldr	r3, [pc, #80]	; (800a2b4 <AsynchronousTaskScheduler+0x58>)
 800a262:	885b      	ldrh	r3, [r3, #2]
 800a264:	b29b      	uxth	r3, r3
 800a266:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a26a:	d304      	bcc.n	800a276 <AsynchronousTaskScheduler+0x1a>
	{
		AsynchronousTask_1000ms();
 800a26c:	f7ff ffef 	bl	800a24e <AsynchronousTask_1000ms>
		sApplicationBase.sAsyncTimers.s1000ms.u16Counter = 0;
 800a270:	4b10      	ldr	r3, [pc, #64]	; (800a2b4 <AsynchronousTaskScheduler+0x58>)
 800a272:	2200      	movs	r2, #0
 800a274:	805a      	strh	r2, [r3, #2]
	}

	if(sApplicationBase.sAsyncTimers.s100ms.u16Counter >= dAsynchronousTaskPeriod100ms)
 800a276:	4b0f      	ldr	r3, [pc, #60]	; (800a2b4 <AsynchronousTaskScheduler+0x58>)
 800a278:	88db      	ldrh	r3, [r3, #6]
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	2b63      	cmp	r3, #99	; 0x63
 800a27e:	d904      	bls.n	800a28a <AsynchronousTaskScheduler+0x2e>
	{
		AsynchronousTask_100ms();
 800a280:	f7ff ffde 	bl	800a240 <AsynchronousTask_100ms>
		sApplicationBase.sAsyncTimers.s100ms.u16Counter = 0;
 800a284:	4b0b      	ldr	r3, [pc, #44]	; (800a2b4 <AsynchronousTaskScheduler+0x58>)
 800a286:	2200      	movs	r2, #0
 800a288:	80da      	strh	r2, [r3, #6]
	}

	if(sApplicationBase.sAsyncTimers.s10ms.u16Counter >= dAsynchronousTaskPeriod10ms)
 800a28a:	4b0a      	ldr	r3, [pc, #40]	; (800a2b4 <AsynchronousTaskScheduler+0x58>)
 800a28c:	895b      	ldrh	r3, [r3, #10]
 800a28e:	b29b      	uxth	r3, r3
 800a290:	2b09      	cmp	r3, #9
 800a292:	d904      	bls.n	800a29e <AsynchronousTaskScheduler+0x42>
	{
		AsynchronousTask_10ms();
 800a294:	f7ff ffce 	bl	800a234 <AsynchronousTask_10ms>
		sApplicationBase.sAsyncTimers.s10ms.u16Counter = 0;
 800a298:	4b06      	ldr	r3, [pc, #24]	; (800a2b4 <AsynchronousTaskScheduler+0x58>)
 800a29a:	2200      	movs	r2, #0
 800a29c:	815a      	strh	r2, [r3, #10]
	}

	if(sApplicationBase.sAsyncTimers.s1ms.u16Counter >= dAsynchronousTaskPeriod1ms)
 800a29e:	4b05      	ldr	r3, [pc, #20]	; (800a2b4 <AsynchronousTaskScheduler+0x58>)
 800a2a0:	89db      	ldrh	r3, [r3, #14]
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d002      	beq.n	800a2ae <AsynchronousTaskScheduler+0x52>
	{
//		AsynchronousTask_1ms();
		sApplicationBase.sAsyncTimers.s1ms.u16Counter = 0;
 800a2a8:	4b02      	ldr	r3, [pc, #8]	; (800a2b4 <AsynchronousTaskScheduler+0x58>)
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	81da      	strh	r2, [r3, #14]
	}

}
 800a2ae:	bf00      	nop
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	200001a0 	.word	0x200001a0

0800a2b8 <AppStateChangeRequest>:

void AppStateChangeRequest( ApplicationState_t eNewState)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b083      	sub	sp, #12
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	4603      	mov	r3, r0
 800a2c0:	71fb      	strb	r3, [r7, #7]
	switch(sApplicationBase.eApplicationState)
 800a2c2:	4b23      	ldr	r3, [pc, #140]	; (800a350 <AppStateChangeRequest+0x98>)
 800a2c4:	7edb      	ldrb	r3, [r3, #27]
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	2b03      	cmp	r3, #3
 800a2ca:	d837      	bhi.n	800a33c <AppStateChangeRequest+0x84>
 800a2cc:	a201      	add	r2, pc, #4	; (adr r2, 800a2d4 <AppStateChangeRequest+0x1c>)
 800a2ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d2:	bf00      	nop
 800a2d4:	0800a2e5 	.word	0x0800a2e5
 800a2d8:	0800a2fb 	.word	0x0800a2fb
 800a2dc:	0800a311 	.word	0x0800a311
 800a2e0:	0800a335 	.word	0x0800a335
	{
	case eApp_EntryState:
		if(eNewState == eApp_Initialization)
 800a2e4:	79fb      	ldrb	r3, [r7, #7]
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d103      	bne.n	800a2f2 <AppStateChangeRequest+0x3a>
		{
			sApplicationBase.eApplicationState = eApp_Initialization;
 800a2ea:	4b19      	ldr	r3, [pc, #100]	; (800a350 <AppStateChangeRequest+0x98>)
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	76da      	strb	r2, [r3, #27]
		}
		else
		{
			sApplicationBase.sErrorReg.bWrongStateTransitionError = true;
		}
		break;
 800a2f0:	e028      	b.n	800a344 <AppStateChangeRequest+0x8c>
			sApplicationBase.sErrorReg.bWrongStateTransitionError = true;
 800a2f2:	4b17      	ldr	r3, [pc, #92]	; (800a350 <AppStateChangeRequest+0x98>)
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	765a      	strb	r2, [r3, #25]
		break;
 800a2f8:	e024      	b.n	800a344 <AppStateChangeRequest+0x8c>

	case eApp_Initialization:
		if(eNewState == eApp_Perform)
 800a2fa:	79fb      	ldrb	r3, [r7, #7]
 800a2fc:	2b02      	cmp	r3, #2
 800a2fe:	d103      	bne.n	800a308 <AppStateChangeRequest+0x50>
		{
			sApplicationBase.eApplicationState = eApp_Perform;
 800a300:	4b13      	ldr	r3, [pc, #76]	; (800a350 <AppStateChangeRequest+0x98>)
 800a302:	2202      	movs	r2, #2
 800a304:	76da      	strb	r2, [r3, #27]
		}
		else
		{
			sApplicationBase.sErrorReg.bWrongStateTransitionError = true;
		}
		break;
 800a306:	e01d      	b.n	800a344 <AppStateChangeRequest+0x8c>
			sApplicationBase.sErrorReg.bWrongStateTransitionError = true;
 800a308:	4b11      	ldr	r3, [pc, #68]	; (800a350 <AppStateChangeRequest+0x98>)
 800a30a:	2201      	movs	r2, #1
 800a30c:	765a      	strb	r2, [r3, #25]
		break;
 800a30e:	e019      	b.n	800a344 <AppStateChangeRequest+0x8c>

	case eApp_Perform:
		if(eNewState == eApp_Initialization)
 800a310:	79fb      	ldrb	r3, [r7, #7]
 800a312:	2b01      	cmp	r3, #1
 800a314:	d103      	bne.n	800a31e <AppStateChangeRequest+0x66>
		{
			sApplicationBase.eApplicationState = eApp_Initialization;
 800a316:	4b0e      	ldr	r3, [pc, #56]	; (800a350 <AppStateChangeRequest+0x98>)
 800a318:	2201      	movs	r2, #1
 800a31a:	76da      	strb	r2, [r3, #27]
		}
		else
		{
			sApplicationBase.sErrorReg.bWrongStateTransitionError = true;
		}
		break;
 800a31c:	e012      	b.n	800a344 <AppStateChangeRequest+0x8c>
		else if(eNewState == eApp_Shutdown)
 800a31e:	79fb      	ldrb	r3, [r7, #7]
 800a320:	2b03      	cmp	r3, #3
 800a322:	d103      	bne.n	800a32c <AppStateChangeRequest+0x74>
			sApplicationBase.eApplicationState = eApp_Shutdown;
 800a324:	4b0a      	ldr	r3, [pc, #40]	; (800a350 <AppStateChangeRequest+0x98>)
 800a326:	2203      	movs	r2, #3
 800a328:	76da      	strb	r2, [r3, #27]
		break;
 800a32a:	e00b      	b.n	800a344 <AppStateChangeRequest+0x8c>
			sApplicationBase.sErrorReg.bWrongStateTransitionError = true;
 800a32c:	4b08      	ldr	r3, [pc, #32]	; (800a350 <AppStateChangeRequest+0x98>)
 800a32e:	2201      	movs	r2, #1
 800a330:	765a      	strb	r2, [r3, #25]
		break;
 800a332:	e007      	b.n	800a344 <AppStateChangeRequest+0x8c>

	case eApp_Shutdown:
		sApplicationBase.sErrorReg.bWrongStateTransitionError = true;
 800a334:	4b06      	ldr	r3, [pc, #24]	; (800a350 <AppStateChangeRequest+0x98>)
 800a336:	2201      	movs	r2, #1
 800a338:	765a      	strb	r2, [r3, #25]
		break;
 800a33a:	e003      	b.n	800a344 <AppStateChangeRequest+0x8c>

	default:
		sApplicationBase.sErrorReg.bWrongStateTransitionError = true;
 800a33c:	4b04      	ldr	r3, [pc, #16]	; (800a350 <AppStateChangeRequest+0x98>)
 800a33e:	2201      	movs	r2, #1
 800a340:	765a      	strb	r2, [r3, #25]
		break;
 800a342:	bf00      	nop
	}

}
 800a344:	bf00      	nop
 800a346:	370c      	adds	r7, #12
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr
 800a350:	200001a0 	.word	0x200001a0

0800a354 <AppEnableResetTaskTimers>:

void AppEnableResetTaskTimers()
{
 800a354:	b480      	push	{r7}
 800a356:	af00      	add	r7, sp, #0
	sApplicationBase.sAsyncTimers.s1000ms.bEnabledFlag = true;
 800a358:	4b11      	ldr	r3, [pc, #68]	; (800a3a0 <AppEnableResetTaskTimers+0x4c>)
 800a35a:	2201      	movs	r2, #1
 800a35c:	701a      	strb	r2, [r3, #0]
	sApplicationBase.sAsyncTimers.s100ms.bEnabledFlag = true;
 800a35e:	4b10      	ldr	r3, [pc, #64]	; (800a3a0 <AppEnableResetTaskTimers+0x4c>)
 800a360:	2201      	movs	r2, #1
 800a362:	711a      	strb	r2, [r3, #4]
	sApplicationBase.sAsyncTimers.s10ms.bEnabledFlag = true;
 800a364:	4b0e      	ldr	r3, [pc, #56]	; (800a3a0 <AppEnableResetTaskTimers+0x4c>)
 800a366:	2201      	movs	r2, #1
 800a368:	721a      	strb	r2, [r3, #8]
	sApplicationBase.sAsyncTimers.s1ms.bEnabledFlag = true;
 800a36a:	4b0d      	ldr	r3, [pc, #52]	; (800a3a0 <AppEnableResetTaskTimers+0x4c>)
 800a36c:	2201      	movs	r2, #1
 800a36e:	731a      	strb	r2, [r3, #12]
	sApplicationBase.sAsyncTimers.s500us.bEnabledFlag = true;
 800a370:	4b0b      	ldr	r3, [pc, #44]	; (800a3a0 <AppEnableResetTaskTimers+0x4c>)
 800a372:	2201      	movs	r2, #1
 800a374:	741a      	strb	r2, [r3, #16]

	sApplicationBase.sAsyncTimers.s1000ms.u16Counter = 0;
 800a376:	4b0a      	ldr	r3, [pc, #40]	; (800a3a0 <AppEnableResetTaskTimers+0x4c>)
 800a378:	2200      	movs	r2, #0
 800a37a:	805a      	strh	r2, [r3, #2]
	sApplicationBase.sAsyncTimers.s100ms.u16Counter = 0;
 800a37c:	4b08      	ldr	r3, [pc, #32]	; (800a3a0 <AppEnableResetTaskTimers+0x4c>)
 800a37e:	2200      	movs	r2, #0
 800a380:	80da      	strh	r2, [r3, #6]
	sApplicationBase.sAsyncTimers.s10ms.u16Counter = 0;
 800a382:	4b07      	ldr	r3, [pc, #28]	; (800a3a0 <AppEnableResetTaskTimers+0x4c>)
 800a384:	2200      	movs	r2, #0
 800a386:	815a      	strh	r2, [r3, #10]
	sApplicationBase.sAsyncTimers.s1ms.u16Counter = 0;
 800a388:	4b05      	ldr	r3, [pc, #20]	; (800a3a0 <AppEnableResetTaskTimers+0x4c>)
 800a38a:	2200      	movs	r2, #0
 800a38c:	81da      	strh	r2, [r3, #14]
	sApplicationBase.sAsyncTimers.s500us.u16Counter = 0;
 800a38e:	4b04      	ldr	r3, [pc, #16]	; (800a3a0 <AppEnableResetTaskTimers+0x4c>)
 800a390:	2200      	movs	r2, #0
 800a392:	825a      	strh	r2, [r3, #18]
}
 800a394:	bf00      	nop
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr
 800a39e:	bf00      	nop
 800a3a0:	200001a0 	.word	0x200001a0

0800a3a4 <AssertError>:

void AssertError()
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	af00      	add	r7, sp, #0

}
 800a3a8:	bf00      	nop
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr

0800a3b2 <TurnOnSynchronousEvent>:

void TurnOnSynchronousEvent()
{
 800a3b2:	b480      	push	{r7}
 800a3b4:	af00      	add	r7, sp, #0

}
 800a3b6:	bf00      	nop
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <TempCollect_Operate>:
	.bEnabledFlag = false,
	.eState = TempCollect_EntryState,
};

void TempCollect_Operate()
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	af00      	add	r7, sp, #0
	switch(kTemperatureData.eState)
 800a3c4:	4b11      	ldr	r3, [pc, #68]	; (800a40c <TempCollect_Operate+0x4c>)
 800a3c6:	79db      	ldrb	r3, [r3, #7]
 800a3c8:	2b03      	cmp	r3, #3
 800a3ca:	d81a      	bhi.n	800a402 <TempCollect_Operate+0x42>
 800a3cc:	a201      	add	r2, pc, #4	; (adr r2, 800a3d4 <TempCollect_Operate+0x14>)
 800a3ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d2:	bf00      	nop
 800a3d4:	0800a3e5 	.word	0x0800a3e5
 800a3d8:	0800a3eb 	.word	0x0800a3eb
 800a3dc:	0800a3fb 	.word	0x0800a3fb
 800a3e0:	0800a403 	.word	0x0800a403
	{
	case(TempCollect_EntryState):
		AssertError(); // Incorrect entry - before initialization
 800a3e4:	f7ff ffde 	bl	800a3a4 <AssertError>
		break;
 800a3e8:	e00e      	b.n	800a408 <TempCollect_Operate+0x48>
	case(TempCollect_Initialized):
		if(kTemperatureData.bScheduleMeasurement)
 800a3ea:	4b08      	ldr	r3, [pc, #32]	; (800a40c <TempCollect_Operate+0x4c>)
 800a3ec:	799b      	ldrb	r3, [r3, #6]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d009      	beq.n	800a406 <TempCollect_Operate+0x46>
		{
			kTemperatureData.eState = TempCollect_TemperatureReadRequest;
 800a3f2:	4b06      	ldr	r3, [pc, #24]	; (800a40c <TempCollect_Operate+0x4c>)
 800a3f4:	2202      	movs	r2, #2
 800a3f6:	71da      	strb	r2, [r3, #7]
		}
		break;
 800a3f8:	e005      	b.n	800a406 <TempCollect_Operate+0x46>
	case(TempCollect_TemperatureReadRequest):
		kTemperatureData.bScheduleMeasurement = false;
 800a3fa:	4b04      	ldr	r3, [pc, #16]	; (800a40c <TempCollect_Operate+0x4c>)
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	719a      	strb	r2, [r3, #6]

		break;
 800a400:	e002      	b.n	800a408 <TempCollect_Operate+0x48>
	case(TempCollect_Waiting):
		break;
	default:
	break;
 800a402:	bf00      	nop
 800a404:	e000      	b.n	800a408 <TempCollect_Operate+0x48>
		break;
 800a406:	bf00      	nop
	}

}
 800a408:	bf00      	nop
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	200001bc 	.word	0x200001bc

0800a410 <TempCollect_Initialize>:

void TempCollect_Initialize()
{
 800a410:	b480      	push	{r7}
 800a412:	af00      	add	r7, sp, #0
	kTemperatureData.eState = TempCollect_Initialized;
 800a414:	4b05      	ldr	r3, [pc, #20]	; (800a42c <TempCollect_Initialize+0x1c>)
 800a416:	2201      	movs	r2, #1
 800a418:	71da      	strb	r2, [r3, #7]
	kTemperatureData.bEnabledFlag = true;
 800a41a:	4b04      	ldr	r3, [pc, #16]	; (800a42c <TempCollect_Initialize+0x1c>)
 800a41c:	2201      	movs	r2, #1
 800a41e:	715a      	strb	r2, [r3, #5]
}
 800a420:	bf00      	nop
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr
 800a42a:	bf00      	nop
 800a42c:	200001bc 	.word	0x200001bc

0800a430 <TempCollect_ScheduleMeasurement>:
void TempCollect_RetrieveResult(TemperatureData_t *sTemperatureData);
void TempCollect_ScheduleMeasurement()
{
 800a430:	b580      	push	{r7, lr}
 800a432:	af00      	add	r7, sp, #0
	if(kTemperatureData.bScheduleMeasurement)
 800a434:	4b05      	ldr	r3, [pc, #20]	; (800a44c <TempCollect_ScheduleMeasurement+0x1c>)
 800a436:	799b      	ldrb	r3, [r3, #6]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d002      	beq.n	800a442 <TempCollect_ScheduleMeasurement+0x12>
	{
		AssertError(); // Overlap of requests;
 800a43c:	f7ff ffb2 	bl	800a3a4 <AssertError>
	}
	else
	{
		kTemperatureData.bScheduleMeasurement = true;
	}
}
 800a440:	e002      	b.n	800a448 <TempCollect_ScheduleMeasurement+0x18>
		kTemperatureData.bScheduleMeasurement = true;
 800a442:	4b02      	ldr	r3, [pc, #8]	; (800a44c <TempCollect_ScheduleMeasurement+0x1c>)
 800a444:	2201      	movs	r2, #1
 800a446:	719a      	strb	r2, [r3, #6]
}
 800a448:	bf00      	nop
 800a44a:	bd80      	pop	{r7, pc}
 800a44c:	200001bc 	.word	0x200001bc

0800a450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a450:	b5b0      	push	{r4, r5, r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a456:	f7f6 f8cf 	bl	80005f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a45a:	f000 f861 	bl	800a520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a45e:	f000 fa39 	bl	800a8d4 <MX_GPIO_Init>
  MX_DMA_Init();
 800a462:	f000 fa17 	bl	800a894 <MX_DMA_Init>
  MX_RTC_Init();
 800a466:	f000 f923 	bl	800a6b0 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 800a46a:	f000 f947 	bl	800a6fc <MX_SDIO_SD_Init>
  MX_I2C1_Init();
 800a46e:	f000 f8c3 	bl	800a5f8 <MX_I2C1_Init>
  MX_I2C2_Init();
 800a472:	f000 f8ef 	bl	800a654 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800a476:	f000 f9e3 	bl	800a840 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800a47a:	f000 fd2f 	bl	800aedc <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 800a47e:	f000 f96d 	bl	800a75c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, SET);
 800a482:	2201      	movs	r2, #1
 800a484:	2101      	movs	r1, #1
 800a486:	4822      	ldr	r0, [pc, #136]	; (800a510 <main+0xc0>)
 800a488:	f7f6 fefc 	bl	8001284 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, SET);
 800a48c:	2201      	movs	r2, #1
 800a48e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a492:	481f      	ldr	r0, [pc, #124]	; (800a510 <main+0xc0>)
 800a494:	f7f6 fef6 	bl	8001284 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, SET);
 800a498:	2201      	movs	r2, #1
 800a49a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a49e:	481c      	ldr	r0, [pc, #112]	; (800a510 <main+0xc0>)
 800a4a0:	f7f6 fef0 	bl	8001284 <HAL_GPIO_WritePin>

  uint8_t u8DeviceAddressList = 0x0E;
 800a4a4:	230e      	movs	r3, #14
 800a4a6:	71fb      	strb	r3, [r7, #7]

  MCP9808_InitCommunicationI2C1(&hi2c1, &u8DeviceAddressList, 1);
 800a4a8:	1dfb      	adds	r3, r7, #7
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	4819      	ldr	r0, [pc, #100]	; (800a514 <main+0xc4>)
 800a4b0:	f7f6 f882 	bl	80005b8 <MCP9808_InitCommunicationI2C1>

  long long counter = 0;
 800a4b4:	f04f 0200 	mov.w	r2, #0
 800a4b8:	f04f 0300 	mov.w	r3, #0
 800a4bc:	e9c7 2302 	strd	r2, r3, [r7, #8]

  while (1)
  {
	  ApplicationPerform();
 800a4c0:	f7ff fe40 	bl	800a144 <ApplicationPerform>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800a4c4:	2104      	movs	r1, #4
 800a4c6:	4812      	ldr	r0, [pc, #72]	; (800a510 <main+0xc0>)
 800a4c8:	f7f6 fef5 	bl	80012b6 <HAL_GPIO_TogglePin>
	  counter++;
 800a4cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a4d0:	1c54      	adds	r4, r2, #1
 800a4d2:	f143 0500 	adc.w	r5, r3, #0
 800a4d6:	e9c7 4502 	strd	r4, r5, [r7, #8]
	  if(counter >= 72000)
 800a4da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a4de:	480e      	ldr	r0, [pc, #56]	; (800a518 <main+0xc8>)
 800a4e0:	f04f 0100 	mov.w	r1, #0
 800a4e4:	4290      	cmp	r0, r2
 800a4e6:	eb71 0303 	sbcs.w	r3, r1, r3
 800a4ea:	dae9      	bge.n	800a4c0 <main+0x70>
	  {
		  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800a4ec:	2102      	movs	r1, #2
 800a4ee:	4808      	ldr	r0, [pc, #32]	; (800a510 <main+0xc0>)
 800a4f0:	f7f6 fee1 	bl	80012b6 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 800a4f4:	2101      	movs	r1, #1
 800a4f6:	4809      	ldr	r0, [pc, #36]	; (800a51c <main+0xcc>)
 800a4f8:	f7f6 fedd 	bl	80012b6 <HAL_GPIO_TogglePin>
		  MCP9808_CommunicateTaskI2C1();
 800a4fc:	f7f6 f854 	bl	80005a8 <MCP9808_CommunicateTaskI2C1>
		  counter = 0;
 800a500:	f04f 0200 	mov.w	r2, #0
 800a504:	f04f 0300 	mov.w	r3, #0
 800a508:	e9c7 2302 	strd	r2, r3, [r7, #8]
	  ApplicationPerform();
 800a50c:	e7d8      	b.n	800a4c0 <main+0x70>
 800a50e:	bf00      	nop
 800a510:	40020800 	.word	0x40020800
 800a514:	20000480 	.word	0x20000480
 800a518:	0001193f 	.word	0x0001193f
 800a51c:	40020000 	.word	0x40020000

0800a520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b094      	sub	sp, #80	; 0x50
 800a524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a526:	f107 0320 	add.w	r3, r7, #32
 800a52a:	2230      	movs	r2, #48	; 0x30
 800a52c:	2100      	movs	r1, #0
 800a52e:	4618      	mov	r0, r3
 800a530:	f001 fa1a 	bl	800b968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a534:	f107 030c 	add.w	r3, r7, #12
 800a538:	2200      	movs	r2, #0
 800a53a:	601a      	str	r2, [r3, #0]
 800a53c:	605a      	str	r2, [r3, #4]
 800a53e:	609a      	str	r2, [r3, #8]
 800a540:	60da      	str	r2, [r3, #12]
 800a542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a544:	2300      	movs	r3, #0
 800a546:	60bb      	str	r3, [r7, #8]
 800a548:	4b29      	ldr	r3, [pc, #164]	; (800a5f0 <SystemClock_Config+0xd0>)
 800a54a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a54c:	4a28      	ldr	r2, [pc, #160]	; (800a5f0 <SystemClock_Config+0xd0>)
 800a54e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a552:	6413      	str	r3, [r2, #64]	; 0x40
 800a554:	4b26      	ldr	r3, [pc, #152]	; (800a5f0 <SystemClock_Config+0xd0>)
 800a556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a55c:	60bb      	str	r3, [r7, #8]
 800a55e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a560:	2300      	movs	r3, #0
 800a562:	607b      	str	r3, [r7, #4]
 800a564:	4b23      	ldr	r3, [pc, #140]	; (800a5f4 <SystemClock_Config+0xd4>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a22      	ldr	r2, [pc, #136]	; (800a5f4 <SystemClock_Config+0xd4>)
 800a56a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a56e:	6013      	str	r3, [r2, #0]
 800a570:	4b20      	ldr	r3, [pc, #128]	; (800a5f4 <SystemClock_Config+0xd4>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a578:	607b      	str	r3, [r7, #4]
 800a57a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800a57c:	2305      	movs	r3, #5
 800a57e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800a586:	2301      	movs	r3, #1
 800a588:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a58a:	2302      	movs	r3, #2
 800a58c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a58e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a592:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800a594:	230c      	movs	r3, #12
 800a596:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800a598:	2348      	movs	r3, #72	; 0x48
 800a59a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a59c:	2302      	movs	r3, #2
 800a59e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800a5a0:	2303      	movs	r3, #3
 800a5a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a5a4:	f107 0320 	add.w	r3, r7, #32
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f7f9 fd21 	bl	8003ff0 <HAL_RCC_OscConfig>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d001      	beq.n	800a5b8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800a5b4:	f000 fa10 	bl	800a9d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a5b8:	230f      	movs	r3, #15
 800a5ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a5bc:	2302      	movs	r3, #2
 800a5be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800a5c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a5c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800a5ce:	f107 030c 	add.w	r3, r7, #12
 800a5d2:	2102      	movs	r1, #2
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f7f9 ff81 	bl	80044dc <HAL_RCC_ClockConfig>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d001      	beq.n	800a5e4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800a5e0:	f000 f9fa 	bl	800a9d8 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800a5e4:	f7fa f860 	bl	80046a8 <HAL_RCC_EnableCSS>
}
 800a5e8:	bf00      	nop
 800a5ea:	3750      	adds	r7, #80	; 0x50
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}
 800a5f0:	40023800 	.word	0x40023800
 800a5f4:	40007000 	.word	0x40007000

0800a5f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800a5fc:	4b12      	ldr	r3, [pc, #72]	; (800a648 <MX_I2C1_Init+0x50>)
 800a5fe:	4a13      	ldr	r2, [pc, #76]	; (800a64c <MX_I2C1_Init+0x54>)
 800a600:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800a602:	4b11      	ldr	r3, [pc, #68]	; (800a648 <MX_I2C1_Init+0x50>)
 800a604:	4a12      	ldr	r2, [pc, #72]	; (800a650 <MX_I2C1_Init+0x58>)
 800a606:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a608:	4b0f      	ldr	r3, [pc, #60]	; (800a648 <MX_I2C1_Init+0x50>)
 800a60a:	2200      	movs	r2, #0
 800a60c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800a60e:	4b0e      	ldr	r3, [pc, #56]	; (800a648 <MX_I2C1_Init+0x50>)
 800a610:	2200      	movs	r2, #0
 800a612:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a614:	4b0c      	ldr	r3, [pc, #48]	; (800a648 <MX_I2C1_Init+0x50>)
 800a616:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a61a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a61c:	4b0a      	ldr	r3, [pc, #40]	; (800a648 <MX_I2C1_Init+0x50>)
 800a61e:	2200      	movs	r2, #0
 800a620:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800a622:	4b09      	ldr	r3, [pc, #36]	; (800a648 <MX_I2C1_Init+0x50>)
 800a624:	2200      	movs	r2, #0
 800a626:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a628:	4b07      	ldr	r3, [pc, #28]	; (800a648 <MX_I2C1_Init+0x50>)
 800a62a:	2200      	movs	r2, #0
 800a62c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a62e:	4b06      	ldr	r3, [pc, #24]	; (800a648 <MX_I2C1_Init+0x50>)
 800a630:	2200      	movs	r2, #0
 800a632:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a634:	4804      	ldr	r0, [pc, #16]	; (800a648 <MX_I2C1_Init+0x50>)
 800a636:	f7f6 fe59 	bl	80012ec <HAL_I2C_Init>
 800a63a:	4603      	mov	r3, r0
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d001      	beq.n	800a644 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800a640:	f000 f9ca 	bl	800a9d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a644:	bf00      	nop
 800a646:	bd80      	pop	{r7, pc}
 800a648:	20000480 	.word	0x20000480
 800a64c:	40005400 	.word	0x40005400
 800a650:	000186a0 	.word	0x000186a0

0800a654 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800a658:	4b12      	ldr	r3, [pc, #72]	; (800a6a4 <MX_I2C2_Init+0x50>)
 800a65a:	4a13      	ldr	r2, [pc, #76]	; (800a6a8 <MX_I2C2_Init+0x54>)
 800a65c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800a65e:	4b11      	ldr	r3, [pc, #68]	; (800a6a4 <MX_I2C2_Init+0x50>)
 800a660:	4a12      	ldr	r2, [pc, #72]	; (800a6ac <MX_I2C2_Init+0x58>)
 800a662:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a664:	4b0f      	ldr	r3, [pc, #60]	; (800a6a4 <MX_I2C2_Init+0x50>)
 800a666:	2200      	movs	r2, #0
 800a668:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800a66a:	4b0e      	ldr	r3, [pc, #56]	; (800a6a4 <MX_I2C2_Init+0x50>)
 800a66c:	2200      	movs	r2, #0
 800a66e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a670:	4b0c      	ldr	r3, [pc, #48]	; (800a6a4 <MX_I2C2_Init+0x50>)
 800a672:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a676:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a678:	4b0a      	ldr	r3, [pc, #40]	; (800a6a4 <MX_I2C2_Init+0x50>)
 800a67a:	2200      	movs	r2, #0
 800a67c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800a67e:	4b09      	ldr	r3, [pc, #36]	; (800a6a4 <MX_I2C2_Init+0x50>)
 800a680:	2200      	movs	r2, #0
 800a682:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a684:	4b07      	ldr	r3, [pc, #28]	; (800a6a4 <MX_I2C2_Init+0x50>)
 800a686:	2200      	movs	r2, #0
 800a688:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a68a:	4b06      	ldr	r3, [pc, #24]	; (800a6a4 <MX_I2C2_Init+0x50>)
 800a68c:	2200      	movs	r2, #0
 800a68e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800a690:	4804      	ldr	r0, [pc, #16]	; (800a6a4 <MX_I2C2_Init+0x50>)
 800a692:	f7f6 fe2b 	bl	80012ec <HAL_I2C_Init>
 800a696:	4603      	mov	r3, r0
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d001      	beq.n	800a6a0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800a69c:	f000 f99c 	bl	800a9d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800a6a0:	bf00      	nop
 800a6a2:	bd80      	pop	{r7, pc}
 800a6a4:	200004d4 	.word	0x200004d4
 800a6a8:	40005800 	.word	0x40005800
 800a6ac:	000186a0 	.word	0x000186a0

0800a6b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800a6b4:	4b0f      	ldr	r3, [pc, #60]	; (800a6f4 <MX_RTC_Init+0x44>)
 800a6b6:	4a10      	ldr	r2, [pc, #64]	; (800a6f8 <MX_RTC_Init+0x48>)
 800a6b8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800a6ba:	4b0e      	ldr	r3, [pc, #56]	; (800a6f4 <MX_RTC_Init+0x44>)
 800a6bc:	2200      	movs	r2, #0
 800a6be:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800a6c0:	4b0c      	ldr	r3, [pc, #48]	; (800a6f4 <MX_RTC_Init+0x44>)
 800a6c2:	227f      	movs	r2, #127	; 0x7f
 800a6c4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800a6c6:	4b0b      	ldr	r3, [pc, #44]	; (800a6f4 <MX_RTC_Init+0x44>)
 800a6c8:	22ff      	movs	r2, #255	; 0xff
 800a6ca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a6cc:	4b09      	ldr	r3, [pc, #36]	; (800a6f4 <MX_RTC_Init+0x44>)
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a6d2:	4b08      	ldr	r3, [pc, #32]	; (800a6f4 <MX_RTC_Init+0x44>)
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a6d8:	4b06      	ldr	r3, [pc, #24]	; (800a6f4 <MX_RTC_Init+0x44>)
 800a6da:	2200      	movs	r2, #0
 800a6dc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800a6de:	4805      	ldr	r0, [pc, #20]	; (800a6f4 <MX_RTC_Init+0x44>)
 800a6e0:	f7fa f9e4 	bl	8004aac <HAL_RTC_Init>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d001      	beq.n	800a6ee <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800a6ea:	f000 f975 	bl	800a9d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800a6ee:	bf00      	nop
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	2000056c 	.word	0x2000056c
 800a6f8:	40002800 	.word	0x40002800

0800a6fc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800a700:	4b14      	ldr	r3, [pc, #80]	; (800a754 <MX_SDIO_SD_Init+0x58>)
 800a702:	4a15      	ldr	r2, [pc, #84]	; (800a758 <MX_SDIO_SD_Init+0x5c>)
 800a704:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800a706:	4b13      	ldr	r3, [pc, #76]	; (800a754 <MX_SDIO_SD_Init+0x58>)
 800a708:	2200      	movs	r2, #0
 800a70a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800a70c:	4b11      	ldr	r3, [pc, #68]	; (800a754 <MX_SDIO_SD_Init+0x58>)
 800a70e:	2200      	movs	r2, #0
 800a710:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a712:	4b10      	ldr	r3, [pc, #64]	; (800a754 <MX_SDIO_SD_Init+0x58>)
 800a714:	2200      	movs	r2, #0
 800a716:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800a718:	4b0e      	ldr	r3, [pc, #56]	; (800a754 <MX_SDIO_SD_Init+0x58>)
 800a71a:	2200      	movs	r2, #0
 800a71c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a71e:	4b0d      	ldr	r3, [pc, #52]	; (800a754 <MX_SDIO_SD_Init+0x58>)
 800a720:	2200      	movs	r2, #0
 800a722:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800a724:	4b0b      	ldr	r3, [pc, #44]	; (800a754 <MX_SDIO_SD_Init+0x58>)
 800a726:	2200      	movs	r2, #0
 800a728:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 800a72a:	480a      	ldr	r0, [pc, #40]	; (800a754 <MX_SDIO_SD_Init+0x58>)
 800a72c:	f7fa faa3 	bl	8004c76 <HAL_SD_Init>
 800a730:	4603      	mov	r3, r0
 800a732:	2b00      	cmp	r3, #0
 800a734:	d001      	beq.n	800a73a <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 800a736:	f000 f94f 	bl	800a9d8 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800a73a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a73e:	4805      	ldr	r0, [pc, #20]	; (800a754 <MX_SDIO_SD_Init+0x58>)
 800a740:	f7fa fcec 	bl	800511c <HAL_SD_ConfigWideBusOperation>
 800a744:	4603      	mov	r3, r0
 800a746:	2b00      	cmp	r3, #0
 800a748:	d001      	beq.n	800a74e <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 800a74a:	f000 f945 	bl	800a9d8 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800a74e:	bf00      	nop
 800a750:	bd80      	pop	{r7, pc}
 800a752:	bf00      	nop
 800a754:	2000058c 	.word	0x2000058c
 800a758:	40012c00 	.word	0x40012c00

0800a75c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b08e      	sub	sp, #56	; 0x38
 800a760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a762:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a766:	2200      	movs	r2, #0
 800a768:	601a      	str	r2, [r3, #0]
 800a76a:	605a      	str	r2, [r3, #4]
 800a76c:	609a      	str	r2, [r3, #8]
 800a76e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a770:	f107 0320 	add.w	r3, r7, #32
 800a774:	2200      	movs	r2, #0
 800a776:	601a      	str	r2, [r3, #0]
 800a778:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a77a:	1d3b      	adds	r3, r7, #4
 800a77c:	2200      	movs	r2, #0
 800a77e:	601a      	str	r2, [r3, #0]
 800a780:	605a      	str	r2, [r3, #4]
 800a782:	609a      	str	r2, [r3, #8]
 800a784:	60da      	str	r2, [r3, #12]
 800a786:	611a      	str	r2, [r3, #16]
 800a788:	615a      	str	r2, [r3, #20]
 800a78a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a78c:	4b2b      	ldr	r3, [pc, #172]	; (800a83c <MX_TIM2_Init+0xe0>)
 800a78e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a792:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 800a794:	4b29      	ldr	r3, [pc, #164]	; (800a83c <MX_TIM2_Init+0xe0>)
 800a796:	2248      	movs	r2, #72	; 0x48
 800a798:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a79a:	4b28      	ldr	r3, [pc, #160]	; (800a83c <MX_TIM2_Init+0xe0>)
 800a79c:	2200      	movs	r2, #0
 800a79e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 25000;
 800a7a0:	4b26      	ldr	r3, [pc, #152]	; (800a83c <MX_TIM2_Init+0xe0>)
 800a7a2:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800a7a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a7a8:	4b24      	ldr	r3, [pc, #144]	; (800a83c <MX_TIM2_Init+0xe0>)
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800a7ae:	4b23      	ldr	r3, [pc, #140]	; (800a83c <MX_TIM2_Init+0xe0>)
 800a7b0:	2280      	movs	r2, #128	; 0x80
 800a7b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a7b4:	4821      	ldr	r0, [pc, #132]	; (800a83c <MX_TIM2_Init+0xe0>)
 800a7b6:	f7fb f80e 	bl	80057d6 <HAL_TIM_Base_Init>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d001      	beq.n	800a7c4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800a7c0:	f000 f90a 	bl	800a9d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a7c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a7ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	481a      	ldr	r0, [pc, #104]	; (800a83c <MX_TIM2_Init+0xe0>)
 800a7d2:	f7fb fa0d 	bl	8005bf0 <HAL_TIM_ConfigClockSource>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d001      	beq.n	800a7e0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800a7dc:	f000 f8fc 	bl	800a9d8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800a7e0:	4816      	ldr	r0, [pc, #88]	; (800a83c <MX_TIM2_Init+0xe0>)
 800a7e2:	f7fb f847 	bl	8005874 <HAL_TIM_OC_Init>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d001      	beq.n	800a7f0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800a7ec:	f000 f8f4 	bl	800a9d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a7f8:	f107 0320 	add.w	r3, r7, #32
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	480f      	ldr	r0, [pc, #60]	; (800a83c <MX_TIM2_Init+0xe0>)
 800a800:	f7fb fd96 	bl	8006330 <HAL_TIMEx_MasterConfigSynchronization>
 800a804:	4603      	mov	r3, r0
 800a806:	2b00      	cmp	r3, #0
 800a808:	d001      	beq.n	800a80e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800a80a:	f000 f8e5 	bl	800a9d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800a80e:	2300      	movs	r3, #0
 800a810:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a812:	2300      	movs	r3, #0
 800a814:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a816:	2300      	movs	r3, #0
 800a818:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a81a:	2300      	movs	r3, #0
 800a81c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a81e:	1d3b      	adds	r3, r7, #4
 800a820:	2200      	movs	r2, #0
 800a822:	4619      	mov	r1, r3
 800a824:	4805      	ldr	r0, [pc, #20]	; (800a83c <MX_TIM2_Init+0xe0>)
 800a826:	f7fb f987 	bl	8005b38 <HAL_TIM_OC_ConfigChannel>
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d001      	beq.n	800a834 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800a830:	f000 f8d2 	bl	800a9d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800a834:	bf00      	nop
 800a836:	3738      	adds	r7, #56	; 0x38
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	20000610 	.word	0x20000610

0800a840 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a844:	4b11      	ldr	r3, [pc, #68]	; (800a88c <MX_USART1_UART_Init+0x4c>)
 800a846:	4a12      	ldr	r2, [pc, #72]	; (800a890 <MX_USART1_UART_Init+0x50>)
 800a848:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a84a:	4b10      	ldr	r3, [pc, #64]	; (800a88c <MX_USART1_UART_Init+0x4c>)
 800a84c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a850:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a852:	4b0e      	ldr	r3, [pc, #56]	; (800a88c <MX_USART1_UART_Init+0x4c>)
 800a854:	2200      	movs	r2, #0
 800a856:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a858:	4b0c      	ldr	r3, [pc, #48]	; (800a88c <MX_USART1_UART_Init+0x4c>)
 800a85a:	2200      	movs	r2, #0
 800a85c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a85e:	4b0b      	ldr	r3, [pc, #44]	; (800a88c <MX_USART1_UART_Init+0x4c>)
 800a860:	2200      	movs	r2, #0
 800a862:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a864:	4b09      	ldr	r3, [pc, #36]	; (800a88c <MX_USART1_UART_Init+0x4c>)
 800a866:	220c      	movs	r2, #12
 800a868:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a86a:	4b08      	ldr	r3, [pc, #32]	; (800a88c <MX_USART1_UART_Init+0x4c>)
 800a86c:	2200      	movs	r2, #0
 800a86e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a870:	4b06      	ldr	r3, [pc, #24]	; (800a88c <MX_USART1_UART_Init+0x4c>)
 800a872:	2200      	movs	r2, #0
 800a874:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a876:	4805      	ldr	r0, [pc, #20]	; (800a88c <MX_USART1_UART_Init+0x4c>)
 800a878:	f7fb fddc 	bl	8006434 <HAL_UART_Init>
 800a87c:	4603      	mov	r3, r0
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d001      	beq.n	800a886 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800a882:	f000 f8a9 	bl	800a9d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a886:	bf00      	nop
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	bf00      	nop
 800a88c:	20000528 	.word	0x20000528
 800a890:	40011000 	.word	0x40011000

0800a894 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a89a:	2300      	movs	r3, #0
 800a89c:	607b      	str	r3, [r7, #4]
 800a89e:	4b0c      	ldr	r3, [pc, #48]	; (800a8d0 <MX_DMA_Init+0x3c>)
 800a8a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8a2:	4a0b      	ldr	r2, [pc, #44]	; (800a8d0 <MX_DMA_Init+0x3c>)
 800a8a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a8a8:	6313      	str	r3, [r2, #48]	; 0x30
 800a8aa:	4b09      	ldr	r3, [pc, #36]	; (800a8d0 <MX_DMA_Init+0x3c>)
 800a8ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a8b2:	607b      	str	r3, [r7, #4]
 800a8b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	2100      	movs	r1, #0
 800a8ba:	200c      	movs	r0, #12
 800a8bc:	f7f6 f80d 	bl	80008da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800a8c0:	200c      	movs	r0, #12
 800a8c2:	f7f6 f826 	bl	8000912 <HAL_NVIC_EnableIRQ>

}
 800a8c6:	bf00      	nop
 800a8c8:	3708      	adds	r7, #8
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	40023800 	.word	0x40023800

0800a8d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b08a      	sub	sp, #40	; 0x28
 800a8d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8da:	f107 0314 	add.w	r3, r7, #20
 800a8de:	2200      	movs	r2, #0
 800a8e0:	601a      	str	r2, [r3, #0]
 800a8e2:	605a      	str	r2, [r3, #4]
 800a8e4:	609a      	str	r2, [r3, #8]
 800a8e6:	60da      	str	r2, [r3, #12]
 800a8e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	613b      	str	r3, [r7, #16]
 800a8ee:	4b37      	ldr	r3, [pc, #220]	; (800a9cc <MX_GPIO_Init+0xf8>)
 800a8f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8f2:	4a36      	ldr	r2, [pc, #216]	; (800a9cc <MX_GPIO_Init+0xf8>)
 800a8f4:	f043 0304 	orr.w	r3, r3, #4
 800a8f8:	6313      	str	r3, [r2, #48]	; 0x30
 800a8fa:	4b34      	ldr	r3, [pc, #208]	; (800a9cc <MX_GPIO_Init+0xf8>)
 800a8fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8fe:	f003 0304 	and.w	r3, r3, #4
 800a902:	613b      	str	r3, [r7, #16]
 800a904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a906:	2300      	movs	r3, #0
 800a908:	60fb      	str	r3, [r7, #12]
 800a90a:	4b30      	ldr	r3, [pc, #192]	; (800a9cc <MX_GPIO_Init+0xf8>)
 800a90c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a90e:	4a2f      	ldr	r2, [pc, #188]	; (800a9cc <MX_GPIO_Init+0xf8>)
 800a910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a914:	6313      	str	r3, [r2, #48]	; 0x30
 800a916:	4b2d      	ldr	r3, [pc, #180]	; (800a9cc <MX_GPIO_Init+0xf8>)
 800a918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a91a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a91e:	60fb      	str	r3, [r7, #12]
 800a920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a922:	2300      	movs	r3, #0
 800a924:	60bb      	str	r3, [r7, #8]
 800a926:	4b29      	ldr	r3, [pc, #164]	; (800a9cc <MX_GPIO_Init+0xf8>)
 800a928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a92a:	4a28      	ldr	r2, [pc, #160]	; (800a9cc <MX_GPIO_Init+0xf8>)
 800a92c:	f043 0301 	orr.w	r3, r3, #1
 800a930:	6313      	str	r3, [r2, #48]	; 0x30
 800a932:	4b26      	ldr	r3, [pc, #152]	; (800a9cc <MX_GPIO_Init+0xf8>)
 800a934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a936:	f003 0301 	and.w	r3, r3, #1
 800a93a:	60bb      	str	r3, [r7, #8]
 800a93c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a93e:	2300      	movs	r3, #0
 800a940:	607b      	str	r3, [r7, #4]
 800a942:	4b22      	ldr	r3, [pc, #136]	; (800a9cc <MX_GPIO_Init+0xf8>)
 800a944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a946:	4a21      	ldr	r2, [pc, #132]	; (800a9cc <MX_GPIO_Init+0xf8>)
 800a948:	f043 0302 	orr.w	r3, r3, #2
 800a94c:	6313      	str	r3, [r2, #48]	; 0x30
 800a94e:	4b1f      	ldr	r3, [pc, #124]	; (800a9cc <MX_GPIO_Init+0xf8>)
 800a950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a952:	f003 0302 	and.w	r3, r3, #2
 800a956:	607b      	str	r3, [r7, #4]
 800a958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, I2C2_VDD_Pin|LED0_Pin|LED1_Pin|LED2_Pin
 800a95a:	2200      	movs	r2, #0
 800a95c:	f243 010f 	movw	r1, #12303	; 0x300f
 800a960:	481b      	ldr	r0, [pc, #108]	; (800a9d0 <MX_GPIO_Init+0xfc>)
 800a962:	f7f6 fc8f 	bl	8001284 <HAL_GPIO_WritePin>
                          |LED3_Pin|I2C1_VDD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PIN_0_Pin|PIN_1_Pin|PIN_2_Pin, GPIO_PIN_RESET);
 800a966:	2200      	movs	r2, #0
 800a968:	2107      	movs	r1, #7
 800a96a:	481a      	ldr	r0, [pc, #104]	; (800a9d4 <MX_GPIO_Init+0x100>)
 800a96c:	f7f6 fc8a 	bl	8001284 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : I2C2_VDD_Pin LED0_Pin LED1_Pin LED2_Pin
                           LED3_Pin I2C1_VDD_Pin */
  GPIO_InitStruct.Pin = I2C2_VDD_Pin|LED0_Pin|LED1_Pin|LED2_Pin
 800a970:	f243 030f 	movw	r3, #12303	; 0x300f
 800a974:	617b      	str	r3, [r7, #20]
                          |LED3_Pin|I2C1_VDD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a976:	2301      	movs	r3, #1
 800a978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a97a:	2300      	movs	r3, #0
 800a97c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a97e:	2300      	movs	r3, #0
 800a980:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a982:	f107 0314 	add.w	r3, r7, #20
 800a986:	4619      	mov	r1, r3
 800a988:	4811      	ldr	r0, [pc, #68]	; (800a9d0 <MX_GPIO_Init+0xfc>)
 800a98a:	f7f6 faf7 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN_0_Pin PIN_1_Pin PIN_2_Pin */
  GPIO_InitStruct.Pin = PIN_0_Pin|PIN_1_Pin|PIN_2_Pin;
 800a98e:	2307      	movs	r3, #7
 800a990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a992:	2301      	movs	r3, #1
 800a994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a996:	2300      	movs	r3, #0
 800a998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a99a:	2300      	movs	r3, #0
 800a99c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a99e:	f107 0314 	add.w	r3, r7, #20
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	480b      	ldr	r0, [pc, #44]	; (800a9d4 <MX_GPIO_Init+0x100>)
 800a9a6:	f7f6 fae9 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VSENSE_Pin */
  GPIO_InitStruct.Pin = USB_VSENSE_Pin;
 800a9aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_VSENSE_GPIO_Port, &GPIO_InitStruct);
 800a9b8:	f107 0314 	add.w	r3, r7, #20
 800a9bc:	4619      	mov	r1, r3
 800a9be:	4805      	ldr	r0, [pc, #20]	; (800a9d4 <MX_GPIO_Init+0x100>)
 800a9c0:	f7f6 fadc 	bl	8000f7c <HAL_GPIO_Init>

}
 800a9c4:	bf00      	nop
 800a9c6:	3728      	adds	r7, #40	; 0x28
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}
 800a9cc:	40023800 	.word	0x40023800
 800a9d0:	40020800 	.word	0x40020800
 800a9d4:	40020000 	.word	0x40020000

0800a9d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a9dc:	b672      	cpsid	i
}
 800a9de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a9e0:	e7fe      	b.n	800a9e0 <Error_Handler+0x8>
	...

0800a9e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b083      	sub	sp, #12
 800a9e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	607b      	str	r3, [r7, #4]
 800a9ee:	4b10      	ldr	r3, [pc, #64]	; (800aa30 <HAL_MspInit+0x4c>)
 800a9f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9f2:	4a0f      	ldr	r2, [pc, #60]	; (800aa30 <HAL_MspInit+0x4c>)
 800a9f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a9f8:	6453      	str	r3, [r2, #68]	; 0x44
 800a9fa:	4b0d      	ldr	r3, [pc, #52]	; (800aa30 <HAL_MspInit+0x4c>)
 800a9fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa02:	607b      	str	r3, [r7, #4]
 800aa04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800aa06:	2300      	movs	r3, #0
 800aa08:	603b      	str	r3, [r7, #0]
 800aa0a:	4b09      	ldr	r3, [pc, #36]	; (800aa30 <HAL_MspInit+0x4c>)
 800aa0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa0e:	4a08      	ldr	r2, [pc, #32]	; (800aa30 <HAL_MspInit+0x4c>)
 800aa10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa14:	6413      	str	r3, [r2, #64]	; 0x40
 800aa16:	4b06      	ldr	r3, [pc, #24]	; (800aa30 <HAL_MspInit+0x4c>)
 800aa18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa1e:	603b      	str	r3, [r7, #0]
 800aa20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800aa22:	bf00      	nop
 800aa24:	370c      	adds	r7, #12
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr
 800aa2e:	bf00      	nop
 800aa30:	40023800 	.word	0x40023800

0800aa34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b08c      	sub	sp, #48	; 0x30
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa3c:	f107 031c 	add.w	r3, r7, #28
 800aa40:	2200      	movs	r2, #0
 800aa42:	601a      	str	r2, [r3, #0]
 800aa44:	605a      	str	r2, [r3, #4]
 800aa46:	609a      	str	r2, [r3, #8]
 800aa48:	60da      	str	r2, [r3, #12]
 800aa4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a55      	ldr	r2, [pc, #340]	; (800aba8 <HAL_I2C_MspInit+0x174>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d162      	bne.n	800ab1c <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aa56:	2300      	movs	r3, #0
 800aa58:	61bb      	str	r3, [r7, #24]
 800aa5a:	4b54      	ldr	r3, [pc, #336]	; (800abac <HAL_I2C_MspInit+0x178>)
 800aa5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa5e:	4a53      	ldr	r2, [pc, #332]	; (800abac <HAL_I2C_MspInit+0x178>)
 800aa60:	f043 0302 	orr.w	r3, r3, #2
 800aa64:	6313      	str	r3, [r2, #48]	; 0x30
 800aa66:	4b51      	ldr	r3, [pc, #324]	; (800abac <HAL_I2C_MspInit+0x178>)
 800aa68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa6a:	f003 0302 	and.w	r3, r3, #2
 800aa6e:	61bb      	str	r3, [r7, #24]
 800aa70:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800aa72:	23c0      	movs	r3, #192	; 0xc0
 800aa74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800aa76:	2312      	movs	r3, #18
 800aa78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa7e:	2303      	movs	r3, #3
 800aa80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800aa82:	2304      	movs	r3, #4
 800aa84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aa86:	f107 031c 	add.w	r3, r7, #28
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	4848      	ldr	r0, [pc, #288]	; (800abb0 <HAL_I2C_MspInit+0x17c>)
 800aa8e:	f7f6 fa75 	bl	8000f7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800aa92:	2300      	movs	r3, #0
 800aa94:	617b      	str	r3, [r7, #20]
 800aa96:	4b45      	ldr	r3, [pc, #276]	; (800abac <HAL_I2C_MspInit+0x178>)
 800aa98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa9a:	4a44      	ldr	r2, [pc, #272]	; (800abac <HAL_I2C_MspInit+0x178>)
 800aa9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aaa0:	6413      	str	r3, [r2, #64]	; 0x40
 800aaa2:	4b42      	ldr	r3, [pc, #264]	; (800abac <HAL_I2C_MspInit+0x178>)
 800aaa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aaaa:	617b      	str	r3, [r7, #20]
 800aaac:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 800aaae:	4b41      	ldr	r3, [pc, #260]	; (800abb4 <HAL_I2C_MspInit+0x180>)
 800aab0:	4a41      	ldr	r2, [pc, #260]	; (800abb8 <HAL_I2C_MspInit+0x184>)
 800aab2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800aab4:	4b3f      	ldr	r3, [pc, #252]	; (800abb4 <HAL_I2C_MspInit+0x180>)
 800aab6:	2200      	movs	r2, #0
 800aab8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800aaba:	4b3e      	ldr	r3, [pc, #248]	; (800abb4 <HAL_I2C_MspInit+0x180>)
 800aabc:	2240      	movs	r2, #64	; 0x40
 800aabe:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800aac0:	4b3c      	ldr	r3, [pc, #240]	; (800abb4 <HAL_I2C_MspInit+0x180>)
 800aac2:	2200      	movs	r2, #0
 800aac4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800aac6:	4b3b      	ldr	r3, [pc, #236]	; (800abb4 <HAL_I2C_MspInit+0x180>)
 800aac8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aacc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aace:	4b39      	ldr	r3, [pc, #228]	; (800abb4 <HAL_I2C_MspInit+0x180>)
 800aad0:	2200      	movs	r2, #0
 800aad2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aad4:	4b37      	ldr	r3, [pc, #220]	; (800abb4 <HAL_I2C_MspInit+0x180>)
 800aad6:	2200      	movs	r2, #0
 800aad8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800aada:	4b36      	ldr	r3, [pc, #216]	; (800abb4 <HAL_I2C_MspInit+0x180>)
 800aadc:	2200      	movs	r2, #0
 800aade:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800aae0:	4b34      	ldr	r3, [pc, #208]	; (800abb4 <HAL_I2C_MspInit+0x180>)
 800aae2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800aae6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800aae8:	4b32      	ldr	r3, [pc, #200]	; (800abb4 <HAL_I2C_MspInit+0x180>)
 800aaea:	2200      	movs	r2, #0
 800aaec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800aaee:	4831      	ldr	r0, [pc, #196]	; (800abb4 <HAL_I2C_MspInit+0x180>)
 800aaf0:	f7f5 ff2a 	bl	8000948 <HAL_DMA_Init>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d001      	beq.n	800aafe <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 800aafa:	f7ff ff6d 	bl	800a9d8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	4a2c      	ldr	r2, [pc, #176]	; (800abb4 <HAL_I2C_MspInit+0x180>)
 800ab02:	635a      	str	r2, [r3, #52]	; 0x34
 800ab04:	4a2b      	ldr	r2, [pc, #172]	; (800abb4 <HAL_I2C_MspInit+0x180>)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	2100      	movs	r1, #0
 800ab0e:	201f      	movs	r0, #31
 800ab10:	f7f5 fee3 	bl	80008da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800ab14:	201f      	movs	r0, #31
 800ab16:	f7f5 fefc 	bl	8000912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800ab1a:	e041      	b.n	800aba0 <HAL_I2C_MspInit+0x16c>
  else if(hi2c->Instance==I2C2)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a26      	ldr	r2, [pc, #152]	; (800abbc <HAL_I2C_MspInit+0x188>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d13c      	bne.n	800aba0 <HAL_I2C_MspInit+0x16c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ab26:	2300      	movs	r3, #0
 800ab28:	613b      	str	r3, [r7, #16]
 800ab2a:	4b20      	ldr	r3, [pc, #128]	; (800abac <HAL_I2C_MspInit+0x178>)
 800ab2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab2e:	4a1f      	ldr	r2, [pc, #124]	; (800abac <HAL_I2C_MspInit+0x178>)
 800ab30:	f043 0302 	orr.w	r3, r3, #2
 800ab34:	6313      	str	r3, [r2, #48]	; 0x30
 800ab36:	4b1d      	ldr	r3, [pc, #116]	; (800abac <HAL_I2C_MspInit+0x178>)
 800ab38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab3a:	f003 0302 	and.w	r3, r3, #2
 800ab3e:	613b      	str	r3, [r7, #16]
 800ab40:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800ab42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ab48:	2312      	movs	r3, #18
 800ab4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab50:	2303      	movs	r3, #3
 800ab52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800ab54:	2304      	movs	r3, #4
 800ab56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ab58:	f107 031c 	add.w	r3, r7, #28
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	4814      	ldr	r0, [pc, #80]	; (800abb0 <HAL_I2C_MspInit+0x17c>)
 800ab60:	f7f6 fa0c 	bl	8000f7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800ab64:	2308      	movs	r3, #8
 800ab66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ab68:	2312      	movs	r3, #18
 800ab6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab70:	2303      	movs	r3, #3
 800ab72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800ab74:	2309      	movs	r3, #9
 800ab76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ab78:	f107 031c 	add.w	r3, r7, #28
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	480c      	ldr	r0, [pc, #48]	; (800abb0 <HAL_I2C_MspInit+0x17c>)
 800ab80:	f7f6 f9fc 	bl	8000f7c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800ab84:	2300      	movs	r3, #0
 800ab86:	60fb      	str	r3, [r7, #12]
 800ab88:	4b08      	ldr	r3, [pc, #32]	; (800abac <HAL_I2C_MspInit+0x178>)
 800ab8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab8c:	4a07      	ldr	r2, [pc, #28]	; (800abac <HAL_I2C_MspInit+0x178>)
 800ab8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ab92:	6413      	str	r3, [r2, #64]	; 0x40
 800ab94:	4b05      	ldr	r3, [pc, #20]	; (800abac <HAL_I2C_MspInit+0x178>)
 800ab96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab9c:	60fb      	str	r3, [r7, #12]
 800ab9e:	68fb      	ldr	r3, [r7, #12]
}
 800aba0:	bf00      	nop
 800aba2:	3730      	adds	r7, #48	; 0x30
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}
 800aba8:	40005400 	.word	0x40005400
 800abac:	40023800 	.word	0x40023800
 800abb0:	40020400 	.word	0x40020400
 800abb4:	20000420 	.word	0x20000420
 800abb8:	40026028 	.word	0x40026028
 800abbc:	40005800 	.word	0x40005800

0800abc0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b088      	sub	sp, #32
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800abc8:	f107 0308 	add.w	r3, r7, #8
 800abcc:	2200      	movs	r2, #0
 800abce:	601a      	str	r2, [r3, #0]
 800abd0:	605a      	str	r2, [r3, #4]
 800abd2:	609a      	str	r2, [r3, #8]
 800abd4:	60da      	str	r2, [r3, #12]
 800abd6:	611a      	str	r2, [r3, #16]
 800abd8:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4a0c      	ldr	r2, [pc, #48]	; (800ac10 <HAL_RTC_MspInit+0x50>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d111      	bne.n	800ac08 <HAL_RTC_MspInit+0x48>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800abe4:	2302      	movs	r3, #2
 800abe6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800abe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abec:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800abee:	f107 0308 	add.w	r3, r7, #8
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7f9 fe6a 	bl	80048cc <HAL_RCCEx_PeriphCLKConfig>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d001      	beq.n	800ac02 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800abfe:	f7ff feeb 	bl	800a9d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800ac02:	4b04      	ldr	r3, [pc, #16]	; (800ac14 <HAL_RTC_MspInit+0x54>)
 800ac04:	2201      	movs	r2, #1
 800ac06:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800ac08:	bf00      	nop
 800ac0a:	3720      	adds	r7, #32
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}
 800ac10:	40002800 	.word	0x40002800
 800ac14:	42470e3c 	.word	0x42470e3c

0800ac18 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b08c      	sub	sp, #48	; 0x30
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac20:	f107 031c 	add.w	r3, r7, #28
 800ac24:	2200      	movs	r2, #0
 800ac26:	601a      	str	r2, [r3, #0]
 800ac28:	605a      	str	r2, [r3, #4]
 800ac2a:	609a      	str	r2, [r3, #8]
 800ac2c:	60da      	str	r2, [r3, #12]
 800ac2e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a38      	ldr	r2, [pc, #224]	; (800ad18 <HAL_SD_MspInit+0x100>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d169      	bne.n	800ad0e <HAL_SD_MspInit+0xf6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	61bb      	str	r3, [r7, #24]
 800ac3e:	4b37      	ldr	r3, [pc, #220]	; (800ad1c <HAL_SD_MspInit+0x104>)
 800ac40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac42:	4a36      	ldr	r2, [pc, #216]	; (800ad1c <HAL_SD_MspInit+0x104>)
 800ac44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ac48:	6453      	str	r3, [r2, #68]	; 0x44
 800ac4a:	4b34      	ldr	r3, [pc, #208]	; (800ad1c <HAL_SD_MspInit+0x104>)
 800ac4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac52:	61bb      	str	r3, [r7, #24]
 800ac54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac56:	2300      	movs	r3, #0
 800ac58:	617b      	str	r3, [r7, #20]
 800ac5a:	4b30      	ldr	r3, [pc, #192]	; (800ad1c <HAL_SD_MspInit+0x104>)
 800ac5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac5e:	4a2f      	ldr	r2, [pc, #188]	; (800ad1c <HAL_SD_MspInit+0x104>)
 800ac60:	f043 0301 	orr.w	r3, r3, #1
 800ac64:	6313      	str	r3, [r2, #48]	; 0x30
 800ac66:	4b2d      	ldr	r3, [pc, #180]	; (800ad1c <HAL_SD_MspInit+0x104>)
 800ac68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac6a:	f003 0301 	and.w	r3, r3, #1
 800ac6e:	617b      	str	r3, [r7, #20]
 800ac70:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ac72:	2300      	movs	r3, #0
 800ac74:	613b      	str	r3, [r7, #16]
 800ac76:	4b29      	ldr	r3, [pc, #164]	; (800ad1c <HAL_SD_MspInit+0x104>)
 800ac78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac7a:	4a28      	ldr	r2, [pc, #160]	; (800ad1c <HAL_SD_MspInit+0x104>)
 800ac7c:	f043 0302 	orr.w	r3, r3, #2
 800ac80:	6313      	str	r3, [r2, #48]	; 0x30
 800ac82:	4b26      	ldr	r3, [pc, #152]	; (800ad1c <HAL_SD_MspInit+0x104>)
 800ac84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac86:	f003 0302 	and.w	r3, r3, #2
 800ac8a:	613b      	str	r3, [r7, #16]
 800ac8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ac8e:	2300      	movs	r3, #0
 800ac90:	60fb      	str	r3, [r7, #12]
 800ac92:	4b22      	ldr	r3, [pc, #136]	; (800ad1c <HAL_SD_MspInit+0x104>)
 800ac94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac96:	4a21      	ldr	r2, [pc, #132]	; (800ad1c <HAL_SD_MspInit+0x104>)
 800ac98:	f043 0304 	orr.w	r3, r3, #4
 800ac9c:	6313      	str	r3, [r2, #48]	; 0x30
 800ac9e:	4b1f      	ldr	r3, [pc, #124]	; (800ad1c <HAL_SD_MspInit+0x104>)
 800aca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aca2:	f003 0304 	and.w	r3, r3, #4
 800aca6:	60fb      	str	r3, [r7, #12]
 800aca8:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800acaa:	2340      	movs	r3, #64	; 0x40
 800acac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acae:	2302      	movs	r3, #2
 800acb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acb2:	2300      	movs	r3, #0
 800acb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800acb6:	2303      	movs	r3, #3
 800acb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800acba:	230c      	movs	r3, #12
 800acbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800acbe:	f107 031c 	add.w	r3, r7, #28
 800acc2:	4619      	mov	r1, r3
 800acc4:	4816      	ldr	r0, [pc, #88]	; (800ad20 <HAL_SD_MspInit+0x108>)
 800acc6:	f7f6 f959 	bl	8000f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800acca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800acce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acd0:	2302      	movs	r3, #2
 800acd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acd4:	2300      	movs	r3, #0
 800acd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800acd8:	2303      	movs	r3, #3
 800acda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800acdc:	230c      	movs	r3, #12
 800acde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ace0:	f107 031c 	add.w	r3, r7, #28
 800ace4:	4619      	mov	r1, r3
 800ace6:	480f      	ldr	r0, [pc, #60]	; (800ad24 <HAL_SD_MspInit+0x10c>)
 800ace8:	f7f6 f948 	bl	8000f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800acec:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800acf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acf2:	2302      	movs	r3, #2
 800acf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acf6:	2300      	movs	r3, #0
 800acf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800acfa:	2303      	movs	r3, #3
 800acfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800acfe:	230c      	movs	r3, #12
 800ad00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ad02:	f107 031c 	add.w	r3, r7, #28
 800ad06:	4619      	mov	r1, r3
 800ad08:	4807      	ldr	r0, [pc, #28]	; (800ad28 <HAL_SD_MspInit+0x110>)
 800ad0a:	f7f6 f937 	bl	8000f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800ad0e:	bf00      	nop
 800ad10:	3730      	adds	r7, #48	; 0x30
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	bf00      	nop
 800ad18:	40012c00 	.word	0x40012c00
 800ad1c:	40023800 	.word	0x40023800
 800ad20:	40020000 	.word	0x40020000
 800ad24:	40020400 	.word	0x40020400
 800ad28:	40020800 	.word	0x40020800

0800ad2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b084      	sub	sp, #16
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad3c:	d115      	bne.n	800ad6a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800ad3e:	2300      	movs	r3, #0
 800ad40:	60fb      	str	r3, [r7, #12]
 800ad42:	4b0c      	ldr	r3, [pc, #48]	; (800ad74 <HAL_TIM_Base_MspInit+0x48>)
 800ad44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad46:	4a0b      	ldr	r2, [pc, #44]	; (800ad74 <HAL_TIM_Base_MspInit+0x48>)
 800ad48:	f043 0301 	orr.w	r3, r3, #1
 800ad4c:	6413      	str	r3, [r2, #64]	; 0x40
 800ad4e:	4b09      	ldr	r3, [pc, #36]	; (800ad74 <HAL_TIM_Base_MspInit+0x48>)
 800ad50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad52:	f003 0301 	and.w	r3, r3, #1
 800ad56:	60fb      	str	r3, [r7, #12]
 800ad58:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	2100      	movs	r1, #0
 800ad5e:	201c      	movs	r0, #28
 800ad60:	f7f5 fdbb 	bl	80008da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800ad64:	201c      	movs	r0, #28
 800ad66:	f7f5 fdd4 	bl	8000912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800ad6a:	bf00      	nop
 800ad6c:	3710      	adds	r7, #16
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	bf00      	nop
 800ad74:	40023800 	.word	0x40023800

0800ad78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b08a      	sub	sp, #40	; 0x28
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad80:	f107 0314 	add.w	r3, r7, #20
 800ad84:	2200      	movs	r2, #0
 800ad86:	601a      	str	r2, [r3, #0]
 800ad88:	605a      	str	r2, [r3, #4]
 800ad8a:	609a      	str	r2, [r3, #8]
 800ad8c:	60da      	str	r2, [r3, #12]
 800ad8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4a19      	ldr	r2, [pc, #100]	; (800adfc <HAL_UART_MspInit+0x84>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d12c      	bne.n	800adf4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	613b      	str	r3, [r7, #16]
 800ad9e:	4b18      	ldr	r3, [pc, #96]	; (800ae00 <HAL_UART_MspInit+0x88>)
 800ada0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ada2:	4a17      	ldr	r2, [pc, #92]	; (800ae00 <HAL_UART_MspInit+0x88>)
 800ada4:	f043 0310 	orr.w	r3, r3, #16
 800ada8:	6453      	str	r3, [r2, #68]	; 0x44
 800adaa:	4b15      	ldr	r3, [pc, #84]	; (800ae00 <HAL_UART_MspInit+0x88>)
 800adac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adae:	f003 0310 	and.w	r3, r3, #16
 800adb2:	613b      	str	r3, [r7, #16]
 800adb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800adb6:	2300      	movs	r3, #0
 800adb8:	60fb      	str	r3, [r7, #12]
 800adba:	4b11      	ldr	r3, [pc, #68]	; (800ae00 <HAL_UART_MspInit+0x88>)
 800adbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adbe:	4a10      	ldr	r2, [pc, #64]	; (800ae00 <HAL_UART_MspInit+0x88>)
 800adc0:	f043 0301 	orr.w	r3, r3, #1
 800adc4:	6313      	str	r3, [r2, #48]	; 0x30
 800adc6:	4b0e      	ldr	r3, [pc, #56]	; (800ae00 <HAL_UART_MspInit+0x88>)
 800adc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adca:	f003 0301 	and.w	r3, r3, #1
 800adce:	60fb      	str	r3, [r7, #12]
 800add0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800add2:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800add6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800add8:	2302      	movs	r3, #2
 800adda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800addc:	2300      	movs	r3, #0
 800adde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ade0:	2303      	movs	r3, #3
 800ade2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800ade4:	2307      	movs	r3, #7
 800ade6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ade8:	f107 0314 	add.w	r3, r7, #20
 800adec:	4619      	mov	r1, r3
 800adee:	4805      	ldr	r0, [pc, #20]	; (800ae04 <HAL_UART_MspInit+0x8c>)
 800adf0:	f7f6 f8c4 	bl	8000f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800adf4:	bf00      	nop
 800adf6:	3728      	adds	r7, #40	; 0x28
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}
 800adfc:	40011000 	.word	0x40011000
 800ae00:	40023800 	.word	0x40023800
 800ae04:	40020000 	.word	0x40020000

0800ae08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800ae0c:	f7f9 fd42 	bl	8004894 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800ae10:	e7fe      	b.n	800ae10 <NMI_Handler+0x8>

0800ae12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ae12:	b480      	push	{r7}
 800ae14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ae16:	e7fe      	b.n	800ae16 <HardFault_Handler+0x4>

0800ae18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ae1c:	e7fe      	b.n	800ae1c <MemManage_Handler+0x4>

0800ae1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ae1e:	b480      	push	{r7}
 800ae20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ae22:	e7fe      	b.n	800ae22 <BusFault_Handler+0x4>

0800ae24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ae24:	b480      	push	{r7}
 800ae26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ae28:	e7fe      	b.n	800ae28 <UsageFault_Handler+0x4>

0800ae2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ae2a:	b480      	push	{r7}
 800ae2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ae2e:	bf00      	nop
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr

0800ae38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ae3c:	bf00      	nop
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr

0800ae46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ae46:	b480      	push	{r7}
 800ae48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ae4a:	bf00      	nop
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr

0800ae54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
    AsynchronousTaskTimerUpdate();
 800ae58:	f7ff f9a6 	bl	800a1a8 <AsynchronousTaskTimerUpdate>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ae5c:	f7f5 fc1e 	bl	800069c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ae60:	bf00      	nop
 800ae62:	bd80      	pop	{r7, pc}

0800ae64 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800ae68:	4802      	ldr	r0, [pc, #8]	; (800ae74 <DMA1_Stream1_IRQHandler+0x10>)
 800ae6a:	f7f5 fe3d 	bl	8000ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800ae6e:	bf00      	nop
 800ae70:	bd80      	pop	{r7, pc}
 800ae72:	bf00      	nop
 800ae74:	20000420 	.word	0x20000420

0800ae78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800ae7c:	4803      	ldr	r0, [pc, #12]	; (800ae8c <TIM2_IRQHandler+0x14>)
 800ae7e:	f7fa fd52 	bl	8005926 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  TempCollect_ScheduleMeasurement();
 800ae82:	f7ff fad5 	bl	800a430 <TempCollect_ScheduleMeasurement>

  /* USER CODE END TIM2_IRQn 1 */
}
 800ae86:	bf00      	nop
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	20000610 	.word	0x20000610

0800ae90 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800ae94:	4802      	ldr	r0, [pc, #8]	; (800aea0 <I2C1_EV_IRQHandler+0x10>)
 800ae96:	f7f6 fb6d 	bl	8001574 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800ae9a:	bf00      	nop
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	20000480 	.word	0x20000480

0800aea4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800aea8:	4802      	ldr	r0, [pc, #8]	; (800aeb4 <OTG_FS_IRQHandler+0x10>)
 800aeaa:	f7f8 f86e 	bl	8002f8a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800aeae:	bf00      	nop
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	20001928 	.word	0x20001928

0800aeb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800aebc:	4b06      	ldr	r3, [pc, #24]	; (800aed8 <SystemInit+0x20>)
 800aebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aec2:	4a05      	ldr	r2, [pc, #20]	; (800aed8 <SystemInit+0x20>)
 800aec4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aec8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800aecc:	bf00      	nop
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr
 800aed6:	bf00      	nop
 800aed8:	e000ed00 	.word	0xe000ed00

0800aedc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800aee0:	2200      	movs	r2, #0
 800aee2:	4912      	ldr	r1, [pc, #72]	; (800af2c <MX_USB_DEVICE_Init+0x50>)
 800aee4:	4812      	ldr	r0, [pc, #72]	; (800af30 <MX_USB_DEVICE_Init+0x54>)
 800aee6:	f7fd ffc3 	bl	8008e70 <USBD_Init>
 800aeea:	4603      	mov	r3, r0
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d001      	beq.n	800aef4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800aef0:	f7ff fd72 	bl	800a9d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800aef4:	490f      	ldr	r1, [pc, #60]	; (800af34 <MX_USB_DEVICE_Init+0x58>)
 800aef6:	480e      	ldr	r0, [pc, #56]	; (800af30 <MX_USB_DEVICE_Init+0x54>)
 800aef8:	f7fd ffea 	bl	8008ed0 <USBD_RegisterClass>
 800aefc:	4603      	mov	r3, r0
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d001      	beq.n	800af06 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800af02:	f7ff fd69 	bl	800a9d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800af06:	490c      	ldr	r1, [pc, #48]	; (800af38 <MX_USB_DEVICE_Init+0x5c>)
 800af08:	4809      	ldr	r0, [pc, #36]	; (800af30 <MX_USB_DEVICE_Init+0x54>)
 800af0a:	f7fd ff3b 	bl	8008d84 <USBD_CDC_RegisterInterface>
 800af0e:	4603      	mov	r3, r0
 800af10:	2b00      	cmp	r3, #0
 800af12:	d001      	beq.n	800af18 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800af14:	f7ff fd60 	bl	800a9d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800af18:	4805      	ldr	r0, [pc, #20]	; (800af30 <MX_USB_DEVICE_Init+0x54>)
 800af1a:	f7fe f800 	bl	8008f1e <USBD_Start>
 800af1e:	4603      	mov	r3, r0
 800af20:	2b00      	cmp	r3, #0
 800af22:	d001      	beq.n	800af28 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800af24:	f7ff fd58 	bl	800a9d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800af28:	bf00      	nop
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	20000130 	.word	0x20000130
 800af30:	20000658 	.word	0x20000658
 800af34:	20000014 	.word	0x20000014
 800af38:	2000011c 	.word	0x2000011c

0800af3c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800af40:	2200      	movs	r2, #0
 800af42:	4905      	ldr	r1, [pc, #20]	; (800af58 <CDC_Init_FS+0x1c>)
 800af44:	4805      	ldr	r0, [pc, #20]	; (800af5c <CDC_Init_FS+0x20>)
 800af46:	f7fd ff32 	bl	8008dae <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800af4a:	4905      	ldr	r1, [pc, #20]	; (800af60 <CDC_Init_FS+0x24>)
 800af4c:	4803      	ldr	r0, [pc, #12]	; (800af5c <CDC_Init_FS+0x20>)
 800af4e:	f7fd ff4c 	bl	8008dea <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800af52:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800af54:	4618      	mov	r0, r3
 800af56:	bd80      	pop	{r7, pc}
 800af58:	20001128 	.word	0x20001128
 800af5c:	20000658 	.word	0x20000658
 800af60:	20000928 	.word	0x20000928

0800af64 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800af64:	b480      	push	{r7}
 800af66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800af68:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr

0800af74 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	4603      	mov	r3, r0
 800af7c:	6039      	str	r1, [r7, #0]
 800af7e:	71fb      	strb	r3, [r7, #7]
 800af80:	4613      	mov	r3, r2
 800af82:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800af84:	79fb      	ldrb	r3, [r7, #7]
 800af86:	2b23      	cmp	r3, #35	; 0x23
 800af88:	d84a      	bhi.n	800b020 <CDC_Control_FS+0xac>
 800af8a:	a201      	add	r2, pc, #4	; (adr r2, 800af90 <CDC_Control_FS+0x1c>)
 800af8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af90:	0800b021 	.word	0x0800b021
 800af94:	0800b021 	.word	0x0800b021
 800af98:	0800b021 	.word	0x0800b021
 800af9c:	0800b021 	.word	0x0800b021
 800afa0:	0800b021 	.word	0x0800b021
 800afa4:	0800b021 	.word	0x0800b021
 800afa8:	0800b021 	.word	0x0800b021
 800afac:	0800b021 	.word	0x0800b021
 800afb0:	0800b021 	.word	0x0800b021
 800afb4:	0800b021 	.word	0x0800b021
 800afb8:	0800b021 	.word	0x0800b021
 800afbc:	0800b021 	.word	0x0800b021
 800afc0:	0800b021 	.word	0x0800b021
 800afc4:	0800b021 	.word	0x0800b021
 800afc8:	0800b021 	.word	0x0800b021
 800afcc:	0800b021 	.word	0x0800b021
 800afd0:	0800b021 	.word	0x0800b021
 800afd4:	0800b021 	.word	0x0800b021
 800afd8:	0800b021 	.word	0x0800b021
 800afdc:	0800b021 	.word	0x0800b021
 800afe0:	0800b021 	.word	0x0800b021
 800afe4:	0800b021 	.word	0x0800b021
 800afe8:	0800b021 	.word	0x0800b021
 800afec:	0800b021 	.word	0x0800b021
 800aff0:	0800b021 	.word	0x0800b021
 800aff4:	0800b021 	.word	0x0800b021
 800aff8:	0800b021 	.word	0x0800b021
 800affc:	0800b021 	.word	0x0800b021
 800b000:	0800b021 	.word	0x0800b021
 800b004:	0800b021 	.word	0x0800b021
 800b008:	0800b021 	.word	0x0800b021
 800b00c:	0800b021 	.word	0x0800b021
 800b010:	0800b021 	.word	0x0800b021
 800b014:	0800b021 	.word	0x0800b021
 800b018:	0800b021 	.word	0x0800b021
 800b01c:	0800b021 	.word	0x0800b021
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b020:	bf00      	nop
  }

  return (USBD_OK);
 800b022:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b024:	4618      	mov	r0, r3
 800b026:	370c      	adds	r7, #12
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr

0800b030 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b082      	sub	sp, #8
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b03a:	6879      	ldr	r1, [r7, #4]
 800b03c:	4805      	ldr	r0, [pc, #20]	; (800b054 <CDC_Receive_FS+0x24>)
 800b03e:	f7fd fed4 	bl	8008dea <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b042:	4804      	ldr	r0, [pc, #16]	; (800b054 <CDC_Receive_FS+0x24>)
 800b044:	f7fd feea 	bl	8008e1c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b048:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3708      	adds	r7, #8
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop
 800b054:	20000658 	.word	0x20000658

0800b058 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b058:	b480      	push	{r7}
 800b05a:	b087      	sub	sp, #28
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	60f8      	str	r0, [r7, #12]
 800b060:	60b9      	str	r1, [r7, #8]
 800b062:	4613      	mov	r3, r2
 800b064:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b066:	2300      	movs	r3, #0
 800b068:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b06a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b06e:	4618      	mov	r0, r3
 800b070:	371c      	adds	r7, #28
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr
	...

0800b07c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b08a      	sub	sp, #40	; 0x28
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b084:	f107 0314 	add.w	r3, r7, #20
 800b088:	2200      	movs	r2, #0
 800b08a:	601a      	str	r2, [r3, #0]
 800b08c:	605a      	str	r2, [r3, #4]
 800b08e:	609a      	str	r2, [r3, #8]
 800b090:	60da      	str	r2, [r3, #12]
 800b092:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b09c:	d147      	bne.n	800b12e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b09e:	2300      	movs	r3, #0
 800b0a0:	613b      	str	r3, [r7, #16]
 800b0a2:	4b25      	ldr	r3, [pc, #148]	; (800b138 <HAL_PCD_MspInit+0xbc>)
 800b0a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a6:	4a24      	ldr	r2, [pc, #144]	; (800b138 <HAL_PCD_MspInit+0xbc>)
 800b0a8:	f043 0301 	orr.w	r3, r3, #1
 800b0ac:	6313      	str	r3, [r2, #48]	; 0x30
 800b0ae:	4b22      	ldr	r3, [pc, #136]	; (800b138 <HAL_PCD_MspInit+0xbc>)
 800b0b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0b2:	f003 0301 	and.w	r3, r3, #1
 800b0b6:	613b      	str	r3, [r7, #16]
 800b0b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b0ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b0c8:	f107 0314 	add.w	r3, r7, #20
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	481b      	ldr	r0, [pc, #108]	; (800b13c <HAL_PCD_MspInit+0xc0>)
 800b0d0:	f7f5 ff54 	bl	8000f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b0d4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b0d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0da:	2302      	movs	r3, #2
 800b0dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b0e2:	2303      	movs	r3, #3
 800b0e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b0e6:	230a      	movs	r3, #10
 800b0e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b0ea:	f107 0314 	add.w	r3, r7, #20
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	4812      	ldr	r0, [pc, #72]	; (800b13c <HAL_PCD_MspInit+0xc0>)
 800b0f2:	f7f5 ff43 	bl	8000f7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b0f6:	4b10      	ldr	r3, [pc, #64]	; (800b138 <HAL_PCD_MspInit+0xbc>)
 800b0f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0fa:	4a0f      	ldr	r2, [pc, #60]	; (800b138 <HAL_PCD_MspInit+0xbc>)
 800b0fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b100:	6353      	str	r3, [r2, #52]	; 0x34
 800b102:	2300      	movs	r3, #0
 800b104:	60fb      	str	r3, [r7, #12]
 800b106:	4b0c      	ldr	r3, [pc, #48]	; (800b138 <HAL_PCD_MspInit+0xbc>)
 800b108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b10a:	4a0b      	ldr	r2, [pc, #44]	; (800b138 <HAL_PCD_MspInit+0xbc>)
 800b10c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b110:	6453      	str	r3, [r2, #68]	; 0x44
 800b112:	4b09      	ldr	r3, [pc, #36]	; (800b138 <HAL_PCD_MspInit+0xbc>)
 800b114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b11a:	60fb      	str	r3, [r7, #12]
 800b11c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b11e:	2200      	movs	r2, #0
 800b120:	2100      	movs	r1, #0
 800b122:	2043      	movs	r0, #67	; 0x43
 800b124:	f7f5 fbd9 	bl	80008da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b128:	2043      	movs	r0, #67	; 0x43
 800b12a:	f7f5 fbf2 	bl	8000912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b12e:	bf00      	nop
 800b130:	3728      	adds	r7, #40	; 0x28
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	40023800 	.word	0x40023800
 800b13c:	40020000 	.word	0x40020000

0800b140 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b154:	4619      	mov	r1, r3
 800b156:	4610      	mov	r0, r2
 800b158:	f7fd ff2c 	bl	8008fb4 <USBD_LL_SetupStage>
}
 800b15c:	bf00      	nop
 800b15e:	3708      	adds	r7, #8
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}

0800b164 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b082      	sub	sp, #8
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	460b      	mov	r3, r1
 800b16e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b176:	78fa      	ldrb	r2, [r7, #3]
 800b178:	6879      	ldr	r1, [r7, #4]
 800b17a:	4613      	mov	r3, r2
 800b17c:	00db      	lsls	r3, r3, #3
 800b17e:	1a9b      	subs	r3, r3, r2
 800b180:	009b      	lsls	r3, r3, #2
 800b182:	440b      	add	r3, r1
 800b184:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	78fb      	ldrb	r3, [r7, #3]
 800b18c:	4619      	mov	r1, r3
 800b18e:	f7fd ff66 	bl	800905e <USBD_LL_DataOutStage>
}
 800b192:	bf00      	nop
 800b194:	3708      	adds	r7, #8
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}

0800b19a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b19a:	b580      	push	{r7, lr}
 800b19c:	b082      	sub	sp, #8
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]
 800b1a2:	460b      	mov	r3, r1
 800b1a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b1ac:	78fa      	ldrb	r2, [r7, #3]
 800b1ae:	6879      	ldr	r1, [r7, #4]
 800b1b0:	4613      	mov	r3, r2
 800b1b2:	00db      	lsls	r3, r3, #3
 800b1b4:	1a9b      	subs	r3, r3, r2
 800b1b6:	009b      	lsls	r3, r3, #2
 800b1b8:	440b      	add	r3, r1
 800b1ba:	3348      	adds	r3, #72	; 0x48
 800b1bc:	681a      	ldr	r2, [r3, #0]
 800b1be:	78fb      	ldrb	r3, [r7, #3]
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	f7fd ffaf 	bl	8009124 <USBD_LL_DataInStage>
}
 800b1c6:	bf00      	nop
 800b1c8:	3708      	adds	r7, #8
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}

0800b1ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1ce:	b580      	push	{r7, lr}
 800b1d0:	b082      	sub	sp, #8
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f7fe f8c3 	bl	8009368 <USBD_LL_SOF>
}
 800b1e2:	bf00      	nop
 800b1e4:	3708      	adds	r7, #8
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}

0800b1ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b084      	sub	sp, #16
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	68db      	ldr	r3, [r3, #12]
 800b1fa:	2b02      	cmp	r3, #2
 800b1fc:	d001      	beq.n	800b202 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b1fe:	f7ff fbeb 	bl	800a9d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b208:	7bfa      	ldrb	r2, [r7, #15]
 800b20a:	4611      	mov	r1, r2
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7fe f86d 	bl	80092ec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b218:	4618      	mov	r0, r3
 800b21a:	f7fe f819 	bl	8009250 <USBD_LL_Reset>
}
 800b21e:	bf00      	nop
 800b220:	3710      	adds	r7, #16
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
	...

0800b228 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b082      	sub	sp, #8
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b236:	4618      	mov	r0, r3
 800b238:	f7fe f868 	bl	800930c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	687a      	ldr	r2, [r7, #4]
 800b248:	6812      	ldr	r2, [r2, #0]
 800b24a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b24e:	f043 0301 	orr.w	r3, r3, #1
 800b252:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6a1b      	ldr	r3, [r3, #32]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d005      	beq.n	800b268 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b25c:	4b04      	ldr	r3, [pc, #16]	; (800b270 <HAL_PCD_SuspendCallback+0x48>)
 800b25e:	691b      	ldr	r3, [r3, #16]
 800b260:	4a03      	ldr	r2, [pc, #12]	; (800b270 <HAL_PCD_SuspendCallback+0x48>)
 800b262:	f043 0306 	orr.w	r3, r3, #6
 800b266:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b268:	bf00      	nop
 800b26a:	3708      	adds	r7, #8
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}
 800b270:	e000ed00 	.word	0xe000ed00

0800b274 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b082      	sub	sp, #8
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b282:	4618      	mov	r0, r3
 800b284:	f7fe f858 	bl	8009338 <USBD_LL_Resume>
}
 800b288:	bf00      	nop
 800b28a:	3708      	adds	r7, #8
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b082      	sub	sp, #8
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	460b      	mov	r3, r1
 800b29a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b2a2:	78fa      	ldrb	r2, [r7, #3]
 800b2a4:	4611      	mov	r1, r2
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7fe f8a6 	bl	80093f8 <USBD_LL_IsoOUTIncomplete>
}
 800b2ac:	bf00      	nop
 800b2ae:	3708      	adds	r7, #8
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	460b      	mov	r3, r1
 800b2be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b2c6:	78fa      	ldrb	r2, [r7, #3]
 800b2c8:	4611      	mov	r1, r2
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7fe f86e 	bl	80093ac <USBD_LL_IsoINIncomplete>
}
 800b2d0:	bf00      	nop
 800b2d2:	3708      	adds	r7, #8
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f7fe f8ac 	bl	8009444 <USBD_LL_DevConnected>
}
 800b2ec:	bf00      	nop
 800b2ee:	3708      	adds	r7, #8
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}

0800b2f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b082      	sub	sp, #8
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b302:	4618      	mov	r0, r3
 800b304:	f7fe f8a9 	bl	800945a <USBD_LL_DevDisconnected>
}
 800b308:	bf00      	nop
 800b30a:	3708      	adds	r7, #8
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b082      	sub	sp, #8
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d13c      	bne.n	800b39a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b320:	4a20      	ldr	r2, [pc, #128]	; (800b3a4 <USBD_LL_Init+0x94>)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	4a1e      	ldr	r2, [pc, #120]	; (800b3a4 <USBD_LL_Init+0x94>)
 800b32c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b330:	4b1c      	ldr	r3, [pc, #112]	; (800b3a4 <USBD_LL_Init+0x94>)
 800b332:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b336:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b338:	4b1a      	ldr	r3, [pc, #104]	; (800b3a4 <USBD_LL_Init+0x94>)
 800b33a:	2204      	movs	r2, #4
 800b33c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b33e:	4b19      	ldr	r3, [pc, #100]	; (800b3a4 <USBD_LL_Init+0x94>)
 800b340:	2202      	movs	r2, #2
 800b342:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b344:	4b17      	ldr	r3, [pc, #92]	; (800b3a4 <USBD_LL_Init+0x94>)
 800b346:	2200      	movs	r2, #0
 800b348:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b34a:	4b16      	ldr	r3, [pc, #88]	; (800b3a4 <USBD_LL_Init+0x94>)
 800b34c:	2202      	movs	r2, #2
 800b34e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b350:	4b14      	ldr	r3, [pc, #80]	; (800b3a4 <USBD_LL_Init+0x94>)
 800b352:	2200      	movs	r2, #0
 800b354:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b356:	4b13      	ldr	r3, [pc, #76]	; (800b3a4 <USBD_LL_Init+0x94>)
 800b358:	2200      	movs	r2, #0
 800b35a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b35c:	4b11      	ldr	r3, [pc, #68]	; (800b3a4 <USBD_LL_Init+0x94>)
 800b35e:	2200      	movs	r2, #0
 800b360:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800b362:	4b10      	ldr	r3, [pc, #64]	; (800b3a4 <USBD_LL_Init+0x94>)
 800b364:	2201      	movs	r2, #1
 800b366:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b368:	4b0e      	ldr	r3, [pc, #56]	; (800b3a4 <USBD_LL_Init+0x94>)
 800b36a:	2200      	movs	r2, #0
 800b36c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b36e:	480d      	ldr	r0, [pc, #52]	; (800b3a4 <USBD_LL_Init+0x94>)
 800b370:	f7f7 fcbb 	bl	8002cea <HAL_PCD_Init>
 800b374:	4603      	mov	r3, r0
 800b376:	2b00      	cmp	r3, #0
 800b378:	d001      	beq.n	800b37e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b37a:	f7ff fb2d 	bl	800a9d8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b37e:	2180      	movs	r1, #128	; 0x80
 800b380:	4808      	ldr	r0, [pc, #32]	; (800b3a4 <USBD_LL_Init+0x94>)
 800b382:	f7f8 fe18 	bl	8003fb6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b386:	2240      	movs	r2, #64	; 0x40
 800b388:	2100      	movs	r1, #0
 800b38a:	4806      	ldr	r0, [pc, #24]	; (800b3a4 <USBD_LL_Init+0x94>)
 800b38c:	f7f8 fdcc 	bl	8003f28 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b390:	2280      	movs	r2, #128	; 0x80
 800b392:	2101      	movs	r1, #1
 800b394:	4803      	ldr	r0, [pc, #12]	; (800b3a4 <USBD_LL_Init+0x94>)
 800b396:	f7f8 fdc7 	bl	8003f28 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b39a:	2300      	movs	r3, #0
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3708      	adds	r7, #8
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}
 800b3a4:	20001928 	.word	0x20001928

0800b3a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7f7 fdb0 	bl	8002f24 <HAL_PCD_Start>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3c8:	7bfb      	ldrb	r3, [r7, #15]
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f000 f942 	bl	800b654 <USBD_Get_USB_Status>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3710      	adds	r7, #16
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}

0800b3de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b3de:	b580      	push	{r7, lr}
 800b3e0:	b084      	sub	sp, #16
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6078      	str	r0, [r7, #4]
 800b3e6:	4608      	mov	r0, r1
 800b3e8:	4611      	mov	r1, r2
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	70fb      	strb	r3, [r7, #3]
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	70bb      	strb	r3, [r7, #2]
 800b3f4:	4613      	mov	r3, r2
 800b3f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b406:	78bb      	ldrb	r3, [r7, #2]
 800b408:	883a      	ldrh	r2, [r7, #0]
 800b40a:	78f9      	ldrb	r1, [r7, #3]
 800b40c:	f7f8 f994 	bl	8003738 <HAL_PCD_EP_Open>
 800b410:	4603      	mov	r3, r0
 800b412:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b414:	7bfb      	ldrb	r3, [r7, #15]
 800b416:	4618      	mov	r0, r3
 800b418:	f000 f91c 	bl	800b654 <USBD_Get_USB_Status>
 800b41c:	4603      	mov	r3, r0
 800b41e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b420:	7bbb      	ldrb	r3, [r7, #14]
}
 800b422:	4618      	mov	r0, r3
 800b424:	3710      	adds	r7, #16
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}

0800b42a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b42a:	b580      	push	{r7, lr}
 800b42c:	b084      	sub	sp, #16
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
 800b432:	460b      	mov	r3, r1
 800b434:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b436:	2300      	movs	r3, #0
 800b438:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b43a:	2300      	movs	r3, #0
 800b43c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b444:	78fa      	ldrb	r2, [r7, #3]
 800b446:	4611      	mov	r1, r2
 800b448:	4618      	mov	r0, r3
 800b44a:	f7f8 f9dd 	bl	8003808 <HAL_PCD_EP_Close>
 800b44e:	4603      	mov	r3, r0
 800b450:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b452:	7bfb      	ldrb	r3, [r7, #15]
 800b454:	4618      	mov	r0, r3
 800b456:	f000 f8fd 	bl	800b654 <USBD_Get_USB_Status>
 800b45a:	4603      	mov	r3, r0
 800b45c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b45e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b460:	4618      	mov	r0, r3
 800b462:	3710      	adds	r7, #16
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	460b      	mov	r3, r1
 800b472:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b474:	2300      	movs	r3, #0
 800b476:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b478:	2300      	movs	r3, #0
 800b47a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b482:	78fa      	ldrb	r2, [r7, #3]
 800b484:	4611      	mov	r1, r2
 800b486:	4618      	mov	r0, r3
 800b488:	f7f8 fab5 	bl	80039f6 <HAL_PCD_EP_SetStall>
 800b48c:	4603      	mov	r3, r0
 800b48e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b490:	7bfb      	ldrb	r3, [r7, #15]
 800b492:	4618      	mov	r0, r3
 800b494:	f000 f8de 	bl	800b654 <USBD_Get_USB_Status>
 800b498:	4603      	mov	r3, r0
 800b49a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b49c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3710      	adds	r7, #16
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}

0800b4a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4a6:	b580      	push	{r7, lr}
 800b4a8:	b084      	sub	sp, #16
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6078      	str	r0, [r7, #4]
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b4c0:	78fa      	ldrb	r2, [r7, #3]
 800b4c2:	4611      	mov	r1, r2
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f7f8 fafa 	bl	8003abe <HAL_PCD_EP_ClrStall>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4ce:	7bfb      	ldrb	r3, [r7, #15]
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f000 f8bf 	bl	800b654 <USBD_Get_USB_Status>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4da:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3710      	adds	r7, #16
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}

0800b4e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b085      	sub	sp, #20
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	460b      	mov	r3, r1
 800b4ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b4f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b4f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	da0b      	bge.n	800b518 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b500:	78fb      	ldrb	r3, [r7, #3]
 800b502:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b506:	68f9      	ldr	r1, [r7, #12]
 800b508:	4613      	mov	r3, r2
 800b50a:	00db      	lsls	r3, r3, #3
 800b50c:	1a9b      	subs	r3, r3, r2
 800b50e:	009b      	lsls	r3, r3, #2
 800b510:	440b      	add	r3, r1
 800b512:	333e      	adds	r3, #62	; 0x3e
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	e00b      	b.n	800b530 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b518:	78fb      	ldrb	r3, [r7, #3]
 800b51a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b51e:	68f9      	ldr	r1, [r7, #12]
 800b520:	4613      	mov	r3, r2
 800b522:	00db      	lsls	r3, r3, #3
 800b524:	1a9b      	subs	r3, r3, r2
 800b526:	009b      	lsls	r3, r3, #2
 800b528:	440b      	add	r3, r1
 800b52a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b52e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b530:	4618      	mov	r0, r3
 800b532:	3714      	adds	r7, #20
 800b534:	46bd      	mov	sp, r7
 800b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53a:	4770      	bx	lr

0800b53c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b084      	sub	sp, #16
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
 800b544:	460b      	mov	r3, r1
 800b546:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b548:	2300      	movs	r3, #0
 800b54a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b54c:	2300      	movs	r3, #0
 800b54e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b556:	78fa      	ldrb	r2, [r7, #3]
 800b558:	4611      	mov	r1, r2
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7f8 f8c7 	bl	80036ee <HAL_PCD_SetAddress>
 800b560:	4603      	mov	r3, r0
 800b562:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b564:	7bfb      	ldrb	r3, [r7, #15]
 800b566:	4618      	mov	r0, r3
 800b568:	f000 f874 	bl	800b654 <USBD_Get_USB_Status>
 800b56c:	4603      	mov	r3, r0
 800b56e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b570:	7bbb      	ldrb	r3, [r7, #14]
}
 800b572:	4618      	mov	r0, r3
 800b574:	3710      	adds	r7, #16
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}

0800b57a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b57a:	b580      	push	{r7, lr}
 800b57c:	b086      	sub	sp, #24
 800b57e:	af00      	add	r7, sp, #0
 800b580:	60f8      	str	r0, [r7, #12]
 800b582:	607a      	str	r2, [r7, #4]
 800b584:	603b      	str	r3, [r7, #0]
 800b586:	460b      	mov	r3, r1
 800b588:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b58a:	2300      	movs	r3, #0
 800b58c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b58e:	2300      	movs	r3, #0
 800b590:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b598:	7af9      	ldrb	r1, [r7, #11]
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	687a      	ldr	r2, [r7, #4]
 800b59e:	f7f8 f9e0 	bl	8003962 <HAL_PCD_EP_Transmit>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5a6:	7dfb      	ldrb	r3, [r7, #23]
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f000 f853 	bl	800b654 <USBD_Get_USB_Status>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b5b2:	7dbb      	ldrb	r3, [r7, #22]
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3718      	adds	r7, #24
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b086      	sub	sp, #24
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	607a      	str	r2, [r7, #4]
 800b5c6:	603b      	str	r3, [r7, #0]
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b5da:	7af9      	ldrb	r1, [r7, #11]
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	f7f8 f95c 	bl	800389c <HAL_PCD_EP_Receive>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5e8:	7dfb      	ldrb	r3, [r7, #23]
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f000 f832 	bl	800b654 <USBD_Get_USB_Status>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b5f4:	7dbb      	ldrb	r3, [r7, #22]
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3718      	adds	r7, #24
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}

0800b5fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5fe:	b580      	push	{r7, lr}
 800b600:	b082      	sub	sp, #8
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
 800b606:	460b      	mov	r3, r1
 800b608:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b610:	78fa      	ldrb	r2, [r7, #3]
 800b612:	4611      	mov	r1, r2
 800b614:	4618      	mov	r0, r3
 800b616:	f7f8 f98c 	bl	8003932 <HAL_PCD_EP_GetRxCount>
 800b61a:	4603      	mov	r3, r0
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3708      	adds	r7, #8
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b624:	b480      	push	{r7}
 800b626:	b083      	sub	sp, #12
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b62c:	4b03      	ldr	r3, [pc, #12]	; (800b63c <USBD_static_malloc+0x18>)
}
 800b62e:	4618      	mov	r0, r3
 800b630:	370c      	adds	r7, #12
 800b632:	46bd      	mov	sp, r7
 800b634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b638:	4770      	bx	lr
 800b63a:	bf00      	nop
 800b63c:	200001cc 	.word	0x200001cc

0800b640 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b640:	b480      	push	{r7}
 800b642:	b083      	sub	sp, #12
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]

}
 800b648:	bf00      	nop
 800b64a:	370c      	adds	r7, #12
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr

0800b654 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b654:	b480      	push	{r7}
 800b656:	b085      	sub	sp, #20
 800b658:	af00      	add	r7, sp, #0
 800b65a:	4603      	mov	r3, r0
 800b65c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b65e:	2300      	movs	r3, #0
 800b660:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b662:	79fb      	ldrb	r3, [r7, #7]
 800b664:	2b03      	cmp	r3, #3
 800b666:	d817      	bhi.n	800b698 <USBD_Get_USB_Status+0x44>
 800b668:	a201      	add	r2, pc, #4	; (adr r2, 800b670 <USBD_Get_USB_Status+0x1c>)
 800b66a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b66e:	bf00      	nop
 800b670:	0800b681 	.word	0x0800b681
 800b674:	0800b687 	.word	0x0800b687
 800b678:	0800b68d 	.word	0x0800b68d
 800b67c:	0800b693 	.word	0x0800b693
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b680:	2300      	movs	r3, #0
 800b682:	73fb      	strb	r3, [r7, #15]
    break;
 800b684:	e00b      	b.n	800b69e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b686:	2303      	movs	r3, #3
 800b688:	73fb      	strb	r3, [r7, #15]
    break;
 800b68a:	e008      	b.n	800b69e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b68c:	2301      	movs	r3, #1
 800b68e:	73fb      	strb	r3, [r7, #15]
    break;
 800b690:	e005      	b.n	800b69e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b692:	2303      	movs	r3, #3
 800b694:	73fb      	strb	r3, [r7, #15]
    break;
 800b696:	e002      	b.n	800b69e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b698:	2303      	movs	r3, #3
 800b69a:	73fb      	strb	r3, [r7, #15]
    break;
 800b69c:	bf00      	nop
  }
  return usb_status;
 800b69e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3714      	adds	r7, #20
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	6039      	str	r1, [r7, #0]
 800b6b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	2212      	movs	r2, #18
 800b6bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b6be:	4b03      	ldr	r3, [pc, #12]	; (800b6cc <USBD_FS_DeviceDescriptor+0x20>)
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	370c      	adds	r7, #12
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr
 800b6cc:	2000014c 	.word	0x2000014c

0800b6d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b083      	sub	sp, #12
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	6039      	str	r1, [r7, #0]
 800b6da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	2204      	movs	r2, #4
 800b6e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b6e2:	4b03      	ldr	r3, [pc, #12]	; (800b6f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	370c      	adds	r7, #12
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr
 800b6f0:	20000160 	.word	0x20000160

0800b6f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b082      	sub	sp, #8
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	6039      	str	r1, [r7, #0]
 800b6fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b700:	79fb      	ldrb	r3, [r7, #7]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d105      	bne.n	800b712 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b706:	683a      	ldr	r2, [r7, #0]
 800b708:	4907      	ldr	r1, [pc, #28]	; (800b728 <USBD_FS_ProductStrDescriptor+0x34>)
 800b70a:	4808      	ldr	r0, [pc, #32]	; (800b72c <USBD_FS_ProductStrDescriptor+0x38>)
 800b70c:	f7fe fc39 	bl	8009f82 <USBD_GetString>
 800b710:	e004      	b.n	800b71c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b712:	683a      	ldr	r2, [r7, #0]
 800b714:	4904      	ldr	r1, [pc, #16]	; (800b728 <USBD_FS_ProductStrDescriptor+0x34>)
 800b716:	4805      	ldr	r0, [pc, #20]	; (800b72c <USBD_FS_ProductStrDescriptor+0x38>)
 800b718:	f7fe fc33 	bl	8009f82 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b71c:	4b02      	ldr	r3, [pc, #8]	; (800b728 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3708      	adds	r7, #8
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	20001d30 	.word	0x20001d30
 800b72c:	0800b990 	.word	0x0800b990

0800b730 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b082      	sub	sp, #8
 800b734:	af00      	add	r7, sp, #0
 800b736:	4603      	mov	r3, r0
 800b738:	6039      	str	r1, [r7, #0]
 800b73a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b73c:	683a      	ldr	r2, [r7, #0]
 800b73e:	4904      	ldr	r1, [pc, #16]	; (800b750 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b740:	4804      	ldr	r0, [pc, #16]	; (800b754 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b742:	f7fe fc1e 	bl	8009f82 <USBD_GetString>
  return USBD_StrDesc;
 800b746:	4b02      	ldr	r3, [pc, #8]	; (800b750 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3708      	adds	r7, #8
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}
 800b750:	20001d30 	.word	0x20001d30
 800b754:	0800b9a8 	.word	0x0800b9a8

0800b758 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	4603      	mov	r3, r0
 800b760:	6039      	str	r1, [r7, #0]
 800b762:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	221a      	movs	r2, #26
 800b768:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b76a:	f000 f843 	bl	800b7f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b76e:	4b02      	ldr	r3, [pc, #8]	; (800b778 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b770:	4618      	mov	r0, r3
 800b772:	3708      	adds	r7, #8
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}
 800b778:	20000164 	.word	0x20000164

0800b77c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b082      	sub	sp, #8
 800b780:	af00      	add	r7, sp, #0
 800b782:	4603      	mov	r3, r0
 800b784:	6039      	str	r1, [r7, #0]
 800b786:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b788:	79fb      	ldrb	r3, [r7, #7]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d105      	bne.n	800b79a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b78e:	683a      	ldr	r2, [r7, #0]
 800b790:	4907      	ldr	r1, [pc, #28]	; (800b7b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b792:	4808      	ldr	r0, [pc, #32]	; (800b7b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b794:	f7fe fbf5 	bl	8009f82 <USBD_GetString>
 800b798:	e004      	b.n	800b7a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b79a:	683a      	ldr	r2, [r7, #0]
 800b79c:	4904      	ldr	r1, [pc, #16]	; (800b7b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b79e:	4805      	ldr	r0, [pc, #20]	; (800b7b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b7a0:	f7fe fbef 	bl	8009f82 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b7a4:	4b02      	ldr	r3, [pc, #8]	; (800b7b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3708      	adds	r7, #8
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	20001d30 	.word	0x20001d30
 800b7b4:	0800b9bc 	.word	0x0800b9bc

0800b7b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b082      	sub	sp, #8
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	4603      	mov	r3, r0
 800b7c0:	6039      	str	r1, [r7, #0]
 800b7c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b7c4:	79fb      	ldrb	r3, [r7, #7]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d105      	bne.n	800b7d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b7ca:	683a      	ldr	r2, [r7, #0]
 800b7cc:	4907      	ldr	r1, [pc, #28]	; (800b7ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b7ce:	4808      	ldr	r0, [pc, #32]	; (800b7f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b7d0:	f7fe fbd7 	bl	8009f82 <USBD_GetString>
 800b7d4:	e004      	b.n	800b7e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b7d6:	683a      	ldr	r2, [r7, #0]
 800b7d8:	4904      	ldr	r1, [pc, #16]	; (800b7ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b7da:	4805      	ldr	r0, [pc, #20]	; (800b7f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b7dc:	f7fe fbd1 	bl	8009f82 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b7e0:	4b02      	ldr	r3, [pc, #8]	; (800b7ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3708      	adds	r7, #8
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
 800b7ea:	bf00      	nop
 800b7ec:	20001d30 	.word	0x20001d30
 800b7f0:	0800b9c8 	.word	0x0800b9c8

0800b7f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b7fa:	4b0f      	ldr	r3, [pc, #60]	; (800b838 <Get_SerialNum+0x44>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b800:	4b0e      	ldr	r3, [pc, #56]	; (800b83c <Get_SerialNum+0x48>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b806:	4b0e      	ldr	r3, [pc, #56]	; (800b840 <Get_SerialNum+0x4c>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b80c:	68fa      	ldr	r2, [r7, #12]
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	4413      	add	r3, r2
 800b812:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d009      	beq.n	800b82e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b81a:	2208      	movs	r2, #8
 800b81c:	4909      	ldr	r1, [pc, #36]	; (800b844 <Get_SerialNum+0x50>)
 800b81e:	68f8      	ldr	r0, [r7, #12]
 800b820:	f000 f814 	bl	800b84c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b824:	2204      	movs	r2, #4
 800b826:	4908      	ldr	r1, [pc, #32]	; (800b848 <Get_SerialNum+0x54>)
 800b828:	68b8      	ldr	r0, [r7, #8]
 800b82a:	f000 f80f 	bl	800b84c <IntToUnicode>
  }
}
 800b82e:	bf00      	nop
 800b830:	3710      	adds	r7, #16
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	1fff7a10 	.word	0x1fff7a10
 800b83c:	1fff7a14 	.word	0x1fff7a14
 800b840:	1fff7a18 	.word	0x1fff7a18
 800b844:	20000166 	.word	0x20000166
 800b848:	20000176 	.word	0x20000176

0800b84c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b087      	sub	sp, #28
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	60b9      	str	r1, [r7, #8]
 800b856:	4613      	mov	r3, r2
 800b858:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b85a:	2300      	movs	r3, #0
 800b85c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b85e:	2300      	movs	r3, #0
 800b860:	75fb      	strb	r3, [r7, #23]
 800b862:	e027      	b.n	800b8b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	0f1b      	lsrs	r3, r3, #28
 800b868:	2b09      	cmp	r3, #9
 800b86a:	d80b      	bhi.n	800b884 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	0f1b      	lsrs	r3, r3, #28
 800b870:	b2da      	uxtb	r2, r3
 800b872:	7dfb      	ldrb	r3, [r7, #23]
 800b874:	005b      	lsls	r3, r3, #1
 800b876:	4619      	mov	r1, r3
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	440b      	add	r3, r1
 800b87c:	3230      	adds	r2, #48	; 0x30
 800b87e:	b2d2      	uxtb	r2, r2
 800b880:	701a      	strb	r2, [r3, #0]
 800b882:	e00a      	b.n	800b89a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	0f1b      	lsrs	r3, r3, #28
 800b888:	b2da      	uxtb	r2, r3
 800b88a:	7dfb      	ldrb	r3, [r7, #23]
 800b88c:	005b      	lsls	r3, r3, #1
 800b88e:	4619      	mov	r1, r3
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	440b      	add	r3, r1
 800b894:	3237      	adds	r2, #55	; 0x37
 800b896:	b2d2      	uxtb	r2, r2
 800b898:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	011b      	lsls	r3, r3, #4
 800b89e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b8a0:	7dfb      	ldrb	r3, [r7, #23]
 800b8a2:	005b      	lsls	r3, r3, #1
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	68ba      	ldr	r2, [r7, #8]
 800b8a8:	4413      	add	r3, r2
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b8ae:	7dfb      	ldrb	r3, [r7, #23]
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	75fb      	strb	r3, [r7, #23]
 800b8b4:	7dfa      	ldrb	r2, [r7, #23]
 800b8b6:	79fb      	ldrb	r3, [r7, #7]
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d3d3      	bcc.n	800b864 <IntToUnicode+0x18>
  }
}
 800b8bc:	bf00      	nop
 800b8be:	bf00      	nop
 800b8c0:	371c      	adds	r7, #28
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c8:	4770      	bx	lr
	...

0800b8cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800b8cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b904 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800b8d0:	480d      	ldr	r0, [pc, #52]	; (800b908 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800b8d2:	490e      	ldr	r1, [pc, #56]	; (800b90c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800b8d4:	4a0e      	ldr	r2, [pc, #56]	; (800b910 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800b8d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b8d8:	e002      	b.n	800b8e0 <LoopCopyDataInit>

0800b8da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b8da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b8dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b8de:	3304      	adds	r3, #4

0800b8e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b8e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b8e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b8e4:	d3f9      	bcc.n	800b8da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b8e6:	4a0b      	ldr	r2, [pc, #44]	; (800b914 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800b8e8:	4c0b      	ldr	r4, [pc, #44]	; (800b918 <LoopFillZerobss+0x26>)
  movs r3, #0
 800b8ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b8ec:	e001      	b.n	800b8f2 <LoopFillZerobss>

0800b8ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b8ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b8f0:	3204      	adds	r2, #4

0800b8f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b8f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b8f4:	d3fb      	bcc.n	800b8ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b8f6:	f7ff fadf 	bl	800aeb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b8fa:	f000 f811 	bl	800b920 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b8fe:	f7fe fda7 	bl	800a450 <main>
  bx  lr    
 800b902:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800b904:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800b908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b90c:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 800b910:	0800ba08 	.word	0x0800ba08
  ldr r2, =_sbss
 800b914:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 800b918:	20001f30 	.word	0x20001f30

0800b91c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b91c:	e7fe      	b.n	800b91c <ADC_IRQHandler>
	...

0800b920 <__libc_init_array>:
 800b920:	b570      	push	{r4, r5, r6, lr}
 800b922:	4d0d      	ldr	r5, [pc, #52]	; (800b958 <__libc_init_array+0x38>)
 800b924:	4c0d      	ldr	r4, [pc, #52]	; (800b95c <__libc_init_array+0x3c>)
 800b926:	1b64      	subs	r4, r4, r5
 800b928:	10a4      	asrs	r4, r4, #2
 800b92a:	2600      	movs	r6, #0
 800b92c:	42a6      	cmp	r6, r4
 800b92e:	d109      	bne.n	800b944 <__libc_init_array+0x24>
 800b930:	4d0b      	ldr	r5, [pc, #44]	; (800b960 <__libc_init_array+0x40>)
 800b932:	4c0c      	ldr	r4, [pc, #48]	; (800b964 <__libc_init_array+0x44>)
 800b934:	f000 f820 	bl	800b978 <_init>
 800b938:	1b64      	subs	r4, r4, r5
 800b93a:	10a4      	asrs	r4, r4, #2
 800b93c:	2600      	movs	r6, #0
 800b93e:	42a6      	cmp	r6, r4
 800b940:	d105      	bne.n	800b94e <__libc_init_array+0x2e>
 800b942:	bd70      	pop	{r4, r5, r6, pc}
 800b944:	f855 3b04 	ldr.w	r3, [r5], #4
 800b948:	4798      	blx	r3
 800b94a:	3601      	adds	r6, #1
 800b94c:	e7ee      	b.n	800b92c <__libc_init_array+0xc>
 800b94e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b952:	4798      	blx	r3
 800b954:	3601      	adds	r6, #1
 800b956:	e7f2      	b.n	800b93e <__libc_init_array+0x1e>
 800b958:	0800ba00 	.word	0x0800ba00
 800b95c:	0800ba00 	.word	0x0800ba00
 800b960:	0800ba00 	.word	0x0800ba00
 800b964:	0800ba04 	.word	0x0800ba04

0800b968 <memset>:
 800b968:	4402      	add	r2, r0
 800b96a:	4603      	mov	r3, r0
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d100      	bne.n	800b972 <memset+0xa>
 800b970:	4770      	bx	lr
 800b972:	f803 1b01 	strb.w	r1, [r3], #1
 800b976:	e7f9      	b.n	800b96c <memset+0x4>

0800b978 <_init>:
 800b978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b97a:	bf00      	nop
 800b97c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b97e:	bc08      	pop	{r3}
 800b980:	469e      	mov	lr, r3
 800b982:	4770      	bx	lr

0800b984 <_fini>:
 800b984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b986:	bf00      	nop
 800b988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b98a:	bc08      	pop	{r3}
 800b98c:	469e      	mov	lr, r3
 800b98e:	4770      	bx	lr
