
Temperature Sensor Array.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e754  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  0800e8f8  0800e8f8  0001e8f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee1c  0800ee1c  00020350  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee1c  0800ee1c  0001ee1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee24  0800ee24  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee24  0800ee24  0001ee24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee28  0800ee28  0001ee28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800ee2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003708  20000350  0800f17c  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00001800  20003a58  0800f17c  00023a58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a2cb  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008388  00000000  00000000  0006a64b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00025b5b  00000000  00000000  000729d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002340  00000000  00000000  00098530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000020d0  00000000  00000000  0009a870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023e84  00000000  00000000  0009c940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004179c  00000000  00000000  000c07c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000af932  00000000  00000000  00101f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001b1892  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007560  00000000  00000000  001b18e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  001b8e48  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  001b8f14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000350 	.word	0x20000350
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e8dc 	.word	0x0800e8dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000354 	.word	0x20000354
 80001dc:	0800e8dc 	.word	0x0800e8dc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <OperateLED_A>:
#include "BSP.h"
#include "main.h"


void OperateLED_A (LEDState_t eState)
{
 8000f50:	b508      	push	{r3, lr}
	if(eState == eLED_On)
 8000f52:	b110      	cbz	r0, 8000f5a <OperateLED_A+0xa>
	{
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
	}
	else if(eState == eLED_Off)
 8000f54:	2801      	cmp	r0, #1
 8000f56:	d009      	beq.n	8000f6c <OperateLED_A+0x1c>
	{
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
	}
}
 8000f58:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000f62:	f500 3002 	add.w	r0, r0, #133120	; 0x20800
 8000f66:	f000 ff34 	bl	8001dd2 <HAL_GPIO_WritePin>
 8000f6a:	e7f5      	b.n	8000f58 <OperateLED_A+0x8>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2101      	movs	r1, #1
 8000f70:	4801      	ldr	r0, [pc, #4]	; (8000f78 <OperateLED_A+0x28>)
 8000f72:	f000 ff2e 	bl	8001dd2 <HAL_GPIO_WritePin>
}
 8000f76:	e7ef      	b.n	8000f58 <OperateLED_A+0x8>
 8000f78:	40020800 	.word	0x40020800

08000f7c <OperateLED_C>:
	{
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
	}
}
void OperateLED_C (LEDState_t eState)
{
 8000f7c:	b508      	push	{r3, lr}
	if(eState == eLED_On)
 8000f7e:	b110      	cbz	r0, 8000f86 <OperateLED_C+0xa>
	{
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
	}
	else if(eState == eLED_Off)
 8000f80:	2801      	cmp	r0, #1
 8000f82:	d009      	beq.n	8000f98 <OperateLED_C+0x1c>
	{
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
	}
}
 8000f84:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000f86:	2201      	movs	r2, #1
 8000f88:	2104      	movs	r1, #4
 8000f8a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000f8e:	f500 3002 	add.w	r0, r0, #133120	; 0x20800
 8000f92:	f000 ff1e 	bl	8001dd2 <HAL_GPIO_WritePin>
 8000f96:	e7f5      	b.n	8000f84 <OperateLED_C+0x8>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2104      	movs	r1, #4
 8000f9c:	4801      	ldr	r0, [pc, #4]	; (8000fa4 <OperateLED_C+0x28>)
 8000f9e:	f000 ff18 	bl	8001dd2 <HAL_GPIO_WritePin>
}
 8000fa2:	e7ef      	b.n	8000f84 <OperateLED_C+0x8>
 8000fa4:	40020800 	.word	0x40020800

08000fa8 <ToggleLED_B>:
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
	}
}

void ToggleLED_B()
{
 8000fa8:	b508      	push	{r3, lr}
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000faa:	2102      	movs	r1, #2
 8000fac:	4801      	ldr	r0, [pc, #4]	; (8000fb4 <ToggleLED_B+0xc>)
 8000fae:	f000 ff16 	bl	8001dde <HAL_GPIO_TogglePin>
}
 8000fb2:	bd08      	pop	{r3, pc}
 8000fb4:	40020800 	.word	0x40020800

08000fb8 <ToggleLED_D>:

void ToggleLED_D()
{
 8000fb8:	b508      	push	{r3, lr}
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000fba:	2108      	movs	r1, #8
 8000fbc:	4801      	ldr	r0, [pc, #4]	; (8000fc4 <ToggleLED_D+0xc>)
 8000fbe:	f000 ff0e 	bl	8001dde <HAL_GPIO_TogglePin>
}
 8000fc2:	bd08      	pop	{r3, pc}
 8000fc4:	40020800 	.word	0x40020800

08000fc8 <OperateSensorPower_A>:

void OperateSensorPower_A (SensorState_t eState)
{
 8000fc8:	b508      	push	{r3, lr}
	if(eState == eSensor_On)
 8000fca:	b110      	cbz	r0, 8000fd2 <OperateSensorPower_A+0xa>
	{
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_RESET);
	}
	else if(eState == eSensor_Off)
 8000fcc:	2801      	cmp	r0, #1
 8000fce:	d00a      	beq.n	8000fe6 <OperateSensorPower_A+0x1e>
	{
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_SET);
	}
}
 8000fd0:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fd8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000fdc:	f500 3002 	add.w	r0, r0, #133120	; 0x20800
 8000fe0:	f000 fef7 	bl	8001dd2 <HAL_GPIO_WritePin>
 8000fe4:	e7f4      	b.n	8000fd0 <OperateSensorPower_A+0x8>
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_SET);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fec:	4801      	ldr	r0, [pc, #4]	; (8000ff4 <OperateSensorPower_A+0x2c>)
 8000fee:	f000 fef0 	bl	8001dd2 <HAL_GPIO_WritePin>
}
 8000ff2:	e7ed      	b.n	8000fd0 <OperateSensorPower_A+0x8>
 8000ff4:	40020800 	.word	0x40020800

08000ff8 <OperateSensorPower_B>:
void OperateSensorPower_B (SensorState_t eState)
{
 8000ff8:	b508      	push	{r3, lr}
	if(eState == eSensor_On)
 8000ffa:	b110      	cbz	r0, 8001002 <OperateSensorPower_B+0xa>
	{
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_RESET);
	}
	else if(eState == eSensor_Off)
 8000ffc:	2801      	cmp	r0, #1
 8000ffe:	d00a      	beq.n	8001016 <OperateSensorPower_B+0x1e>
	{
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_SET);
	}
}
 8001000:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001008:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800100c:	f500 3002 	add.w	r0, r0, #133120	; 0x20800
 8001010:	f000 fedf 	bl	8001dd2 <HAL_GPIO_WritePin>
 8001014:	e7f4      	b.n	8001000 <OperateSensorPower_B+0x8>
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_SET);
 8001016:	2201      	movs	r2, #1
 8001018:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800101c:	4801      	ldr	r0, [pc, #4]	; (8001024 <OperateSensorPower_B+0x2c>)
 800101e:	f000 fed8 	bl	8001dd2 <HAL_GPIO_WritePin>
}
 8001022:	e7ed      	b.n	8001000 <OperateSensorPower_B+0x8>
 8001024:	40020800 	.word	0x40020800

08001028 <TurnAllSensorOn>:

void TurnAllSensorOn()
{
 8001028:	b508      	push	{r3, lr}
	OperateSensorPower_A(eSensor_On);
 800102a:	2000      	movs	r0, #0
 800102c:	f7ff ffcc 	bl	8000fc8 <OperateSensorPower_A>
	OperateSensorPower_B(eSensor_On);
 8001030:	2000      	movs	r0, #0
 8001032:	f7ff ffe1 	bl	8000ff8 <OperateSensorPower_B>
}
 8001036:	bd08      	pop	{r3, pc}

08001038 <SetFirstDebugPinOn>:

void SetFirstDebugPinOn()
{
 8001038:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(PIN_0_GPIO_Port, PIN_0_Pin, GPIO_PIN_SET);
 800103a:	2201      	movs	r2, #1
 800103c:	4611      	mov	r1, r2
 800103e:	4802      	ldr	r0, [pc, #8]	; (8001048 <SetFirstDebugPinOn+0x10>)
 8001040:	f000 fec7 	bl	8001dd2 <HAL_GPIO_WritePin>
}
 8001044:	bd08      	pop	{r3, pc}
 8001046:	bf00      	nop
 8001048:	40020000 	.word	0x40020000

0800104c <SetFirstDebugPinOff>:
void SetFirstDebugPinOff()
{
 800104c:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(PIN_0_GPIO_Port, PIN_0_Pin, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	2101      	movs	r1, #1
 8001052:	4802      	ldr	r0, [pc, #8]	; (800105c <SetFirstDebugPinOff+0x10>)
 8001054:	f000 febd 	bl	8001dd2 <HAL_GPIO_WritePin>
}
 8001058:	bd08      	pop	{r3, pc}
 800105a:	bf00      	nop
 800105c:	40020000 	.word	0x40020000

08001060 <SetSecondDebugPinOn>:

void SetSecondDebugPinOn()
{
 8001060:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(PIN_1_GPIO_Port, PIN_1_Pin, GPIO_PIN_SET);
 8001062:	2201      	movs	r2, #1
 8001064:	2102      	movs	r1, #2
 8001066:	4802      	ldr	r0, [pc, #8]	; (8001070 <SetSecondDebugPinOn+0x10>)
 8001068:	f000 feb3 	bl	8001dd2 <HAL_GPIO_WritePin>
}
 800106c:	bd08      	pop	{r3, pc}
 800106e:	bf00      	nop
 8001070:	40020000 	.word	0x40020000

08001074 <SetSecondDebugPinOff>:

void SetSecondDebugPinOff()
{
 8001074:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(PIN_1_GPIO_Port, PIN_1_Pin, GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	2102      	movs	r1, #2
 800107a:	4802      	ldr	r0, [pc, #8]	; (8001084 <SetSecondDebugPinOff+0x10>)
 800107c:	f000 fea9 	bl	8001dd2 <HAL_GPIO_WritePin>
}
 8001080:	bd08      	pop	{r3, pc}
 8001082:	bf00      	nop
 8001084:	40020000 	.word	0x40020000

08001088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001088:	b510      	push	{r4, lr}
 800108a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800108c:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <HAL_InitTick+0x40>)
 800108e:	7818      	ldrb	r0, [r3, #0]
 8001090:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001094:	fbb3 f3f0 	udiv	r3, r3, r0
 8001098:	4a0c      	ldr	r2, [pc, #48]	; (80010cc <HAL_InitTick+0x44>)
 800109a:	6810      	ldr	r0, [r2, #0]
 800109c:	fbb0 f0f3 	udiv	r0, r0, r3
 80010a0:	f000 fb80 	bl	80017a4 <HAL_SYSTICK_Config>
 80010a4:	b968      	cbnz	r0, 80010c2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a6:	2c0f      	cmp	r4, #15
 80010a8:	d901      	bls.n	80010ae <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80010aa:	2001      	movs	r0, #1
 80010ac:	e00a      	b.n	80010c4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ae:	2200      	movs	r2, #0
 80010b0:	4621      	mov	r1, r4
 80010b2:	f04f 30ff 	mov.w	r0, #4294967295
 80010b6:	f000 fb33 	bl	8001720 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ba:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <HAL_InitTick+0x48>)
 80010bc:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80010be:	2000      	movs	r0, #0
 80010c0:	e000      	b.n	80010c4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80010c2:	2001      	movs	r0, #1
}
 80010c4:	bd10      	pop	{r4, pc}
 80010c6:	bf00      	nop
 80010c8:	20000000 	.word	0x20000000
 80010cc:	20000118 	.word	0x20000118
 80010d0:	20000004 	.word	0x20000004

080010d4 <HAL_Init>:
{
 80010d4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <HAL_Init+0x30>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010de:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80010e6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010ee:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f0:	2003      	movs	r0, #3
 80010f2:	f000 fb03 	bl	80016fc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f6:	2000      	movs	r0, #0
 80010f8:	f7ff ffc6 	bl	8001088 <HAL_InitTick>
  HAL_MspInit();
 80010fc:	f009 ff56 	bl	800afac <HAL_MspInit>
}
 8001100:	2000      	movs	r0, #0
 8001102:	bd08      	pop	{r3, pc}
 8001104:	40023c00 	.word	0x40023c00

08001108 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001108:	4a03      	ldr	r2, [pc, #12]	; (8001118 <HAL_IncTick+0x10>)
 800110a:	6811      	ldr	r1, [r2, #0]
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <HAL_IncTick+0x14>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	440b      	add	r3, r1
 8001112:	6013      	str	r3, [r2, #0]
}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20001844 	.word	0x20001844
 800111c:	20000000 	.word	0x20000000

08001120 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001120:	4b01      	ldr	r3, [pc, #4]	; (8001128 <HAL_GetTick+0x8>)
 8001122:	6818      	ldr	r0, [r3, #0]
}
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20001844 	.word	0x20001844

0800112c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800112c:	b538      	push	{r3, r4, r5, lr}
 800112e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001130:	f7ff fff6 	bl	8001120 <HAL_GetTick>
 8001134:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001136:	f1b4 3fff 	cmp.w	r4, #4294967295
 800113a:	d002      	beq.n	8001142 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <HAL_Delay+0x24>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001142:	f7ff ffed 	bl	8001120 <HAL_GetTick>
 8001146:	1b40      	subs	r0, r0, r5
 8001148:	42a0      	cmp	r0, r4
 800114a:	d3fa      	bcc.n	8001142 <HAL_Delay+0x16>
  {
  }
}
 800114c:	bd38      	pop	{r3, r4, r5, pc}
 800114e:	bf00      	nop
 8001150:	20000000 	.word	0x20000000

08001154 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001154:	4b4a      	ldr	r3, [pc, #296]	; (8001280 <ADC_Init+0x12c>)
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800115c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	6841      	ldr	r1, [r0, #4]
 8001162:	430a      	orrs	r2, r1
 8001164:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001166:	6802      	ldr	r2, [r0, #0]
 8001168:	6853      	ldr	r3, [r2, #4]
 800116a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800116e:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001170:	6802      	ldr	r2, [r0, #0]
 8001172:	6853      	ldr	r3, [r2, #4]
 8001174:	6901      	ldr	r1, [r0, #16]
 8001176:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800117a:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800117c:	6802      	ldr	r2, [r0, #0]
 800117e:	6853      	ldr	r3, [r2, #4]
 8001180:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001184:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001186:	6802      	ldr	r2, [r0, #0]
 8001188:	6853      	ldr	r3, [r2, #4]
 800118a:	6881      	ldr	r1, [r0, #8]
 800118c:	430b      	orrs	r3, r1
 800118e:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001190:	6802      	ldr	r2, [r0, #0]
 8001192:	6893      	ldr	r3, [r2, #8]
 8001194:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001198:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800119a:	6802      	ldr	r2, [r0, #0]
 800119c:	6893      	ldr	r3, [r2, #8]
 800119e:	68c1      	ldr	r1, [r0, #12]
 80011a0:	430b      	orrs	r3, r1
 80011a2:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011a4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80011a6:	4b37      	ldr	r3, [pc, #220]	; (8001284 <ADC_Init+0x130>)
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d057      	beq.n	800125c <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011ac:	6802      	ldr	r2, [r0, #0]
 80011ae:	6893      	ldr	r3, [r2, #8]
 80011b0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80011b4:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80011b6:	6802      	ldr	r2, [r0, #0]
 80011b8:	6893      	ldr	r3, [r2, #8]
 80011ba:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80011bc:	430b      	orrs	r3, r1
 80011be:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80011c0:	6802      	ldr	r2, [r0, #0]
 80011c2:	6893      	ldr	r3, [r2, #8]
 80011c4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80011c8:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80011ca:	6802      	ldr	r2, [r0, #0]
 80011cc:	6893      	ldr	r3, [r2, #8]
 80011ce:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80011d0:	430b      	orrs	r3, r1
 80011d2:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80011d4:	6802      	ldr	r2, [r0, #0]
 80011d6:	6893      	ldr	r3, [r2, #8]
 80011d8:	f023 0302 	bic.w	r3, r3, #2
 80011dc:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80011de:	6802      	ldr	r2, [r0, #0]
 80011e0:	6893      	ldr	r3, [r2, #8]
 80011e2:	7e01      	ldrb	r1, [r0, #24]
 80011e4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80011e8:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80011ea:	f890 3020 	ldrb.w	r3, [r0, #32]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d03f      	beq.n	8001272 <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80011f2:	6802      	ldr	r2, [r0, #0]
 80011f4:	6853      	ldr	r3, [r2, #4]
 80011f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011fa:	6053      	str	r3, [r2, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80011fc:	6802      	ldr	r2, [r0, #0]
 80011fe:	6853      	ldr	r3, [r2, #4]
 8001200:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001204:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001206:	6801      	ldr	r1, [r0, #0]
 8001208:	684b      	ldr	r3, [r1, #4]
 800120a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800120c:	3a01      	subs	r2, #1
 800120e:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001212:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001214:	6802      	ldr	r2, [r0, #0]
 8001216:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001218:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800121c:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800121e:	6801      	ldr	r1, [r0, #0]
 8001220:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001222:	69c2      	ldr	r2, [r0, #28]
 8001224:	3a01      	subs	r2, #1
 8001226:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800122a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800122c:	6802      	ldr	r2, [r0, #0]
 800122e:	6893      	ldr	r3, [r2, #8]
 8001230:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001234:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001236:	6802      	ldr	r2, [r0, #0]
 8001238:	6893      	ldr	r3, [r2, #8]
 800123a:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 800123e:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8001242:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001244:	6802      	ldr	r2, [r0, #0]
 8001246:	6893      	ldr	r3, [r2, #8]
 8001248:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800124c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800124e:	6802      	ldr	r2, [r0, #0]
 8001250:	6893      	ldr	r3, [r2, #8]
 8001252:	6941      	ldr	r1, [r0, #20]
 8001254:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001258:	6093      	str	r3, [r2, #8]
}
 800125a:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800125c:	6802      	ldr	r2, [r0, #0]
 800125e:	6893      	ldr	r3, [r2, #8]
 8001260:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001264:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001266:	6802      	ldr	r2, [r0, #0]
 8001268:	6893      	ldr	r3, [r2, #8]
 800126a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800126e:	6093      	str	r3, [r2, #8]
 8001270:	e7b0      	b.n	80011d4 <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001272:	6802      	ldr	r2, [r0, #0]
 8001274:	6853      	ldr	r3, [r2, #4]
 8001276:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800127a:	6053      	str	r3, [r2, #4]
 800127c:	e7ca      	b.n	8001214 <ADC_Init+0xc0>
 800127e:	bf00      	nop
 8001280:	40012300 	.word	0x40012300
 8001284:	0f000001 	.word	0x0f000001

08001288 <HAL_ADC_Init>:
  if(hadc == NULL)
 8001288:	b338      	cbz	r0, 80012da <HAL_ADC_Init+0x52>
{
 800128a:	b510      	push	{r4, lr}
 800128c:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 800128e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001290:	b143      	cbz	r3, 80012a4 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001292:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001294:	f013 0f10 	tst.w	r3, #16
 8001298:	d00b      	beq.n	80012b2 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 800129a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800129c:	2300      	movs	r3, #0
 800129e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80012a2:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 80012a4:	f009 fe9e 	bl	800afe4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80012a8:	2300      	movs	r3, #0
 80012aa:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 80012ac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80012b0:	e7ef      	b.n	8001292 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 80012b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012b8:	f023 0302 	bic.w	r3, r3, #2
 80012bc:	f043 0302 	orr.w	r3, r3, #2
 80012c0:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 80012c2:	4620      	mov	r0, r4
 80012c4:	f7ff ff46 	bl	8001154 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 80012c8:	2000      	movs	r0, #0
 80012ca:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80012cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012ce:	f023 0303 	bic.w	r3, r3, #3
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6423      	str	r3, [r4, #64]	; 0x40
 80012d8:	e7e0      	b.n	800129c <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 80012da:	2001      	movs	r0, #1
}
 80012dc:	4770      	bx	lr
	...

080012e0 <HAL_ADC_Start_IT>:
{
 80012e0:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80012e6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d075      	beq.n	80013da <HAL_ADC_Start_IT+0xfa>
 80012ee:	2301      	movs	r3, #1
 80012f0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80012f4:	6803      	ldr	r3, [r0, #0]
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	f012 0f01 	tst.w	r2, #1
 80012fc:	d113      	bne.n	8001326 <HAL_ADC_Start_IT+0x46>
    __HAL_ADC_ENABLE(hadc);
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	f042 0201 	orr.w	r2, r2, #1
 8001304:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001306:	4b38      	ldr	r3, [pc, #224]	; (80013e8 <HAL_ADC_Start_IT+0x108>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a38      	ldr	r2, [pc, #224]	; (80013ec <HAL_ADC_Start_IT+0x10c>)
 800130c:	fba2 2303 	umull	r2, r3, r2, r3
 8001310:	0c9b      	lsrs	r3, r3, #18
 8001312:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001316:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 8001318:	e002      	b.n	8001320 <HAL_ADC_Start_IT+0x40>
      counter--;
 800131a:	9b01      	ldr	r3, [sp, #4]
 800131c:	3b01      	subs	r3, #1
 800131e:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 8001320:	9b01      	ldr	r3, [sp, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f9      	bne.n	800131a <HAL_ADC_Start_IT+0x3a>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001326:	6802      	ldr	r2, [r0, #0]
 8001328:	6893      	ldr	r3, [r2, #8]
 800132a:	f013 0f01 	tst.w	r3, #1
 800132e:	d049      	beq.n	80013c4 <HAL_ADC_Start_IT+0xe4>
    ADC_STATE_CLR_SET(hadc->State,
 8001330:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001332:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001336:	f023 0301 	bic.w	r3, r3, #1
 800133a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800133e:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001340:	6853      	ldr	r3, [r2, #4]
 8001342:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001346:	d005      	beq.n	8001354 <HAL_ADC_Start_IT+0x74>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001348:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800134a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800134e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001352:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001354:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001356:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800135a:	d020      	beq.n	800139e <HAL_ADC_Start_IT+0xbe>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800135c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800135e:	f023 0306 	bic.w	r3, r3, #6
 8001362:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8001364:	2300      	movs	r3, #0
 8001366:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800136a:	f06f 0322 	mvn.w	r3, #34	; 0x22
 800136e:	6013      	str	r3, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001370:	6802      	ldr	r2, [r0, #0]
 8001372:	6853      	ldr	r3, [r2, #4]
 8001374:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001378:	f043 0320 	orr.w	r3, r3, #32
 800137c:	6053      	str	r3, [r2, #4]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800137e:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <HAL_ADC_Start_IT+0x110>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f013 0f1f 	tst.w	r3, #31
 8001386:	d10d      	bne.n	80013a4 <HAL_ADC_Start_IT+0xc4>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001388:	6803      	ldr	r3, [r0, #0]
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001390:	d125      	bne.n	80013de <HAL_ADC_Start_IT+0xfe>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001398:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800139a:	2000      	movs	r0, #0
 800139c:	e01b      	b.n	80013d6 <HAL_ADC_Start_IT+0xf6>
      ADC_CLEAR_ERRORCODE(hadc);
 800139e:	2300      	movs	r3, #0
 80013a0:	6443      	str	r3, [r0, #68]	; 0x44
 80013a2:	e7df      	b.n	8001364 <HAL_ADC_Start_IT+0x84>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013a4:	6803      	ldr	r3, [r0, #0]
 80013a6:	4a13      	ldr	r2, [pc, #76]	; (80013f4 <HAL_ADC_Start_IT+0x114>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d001      	beq.n	80013b0 <HAL_ADC_Start_IT+0xd0>
  return HAL_OK;
 80013ac:	2000      	movs	r0, #0
 80013ae:	e012      	b.n	80013d6 <HAL_ADC_Start_IT+0xf6>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80013b6:	d114      	bne.n	80013e2 <HAL_ADC_Start_IT+0x102>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80013c0:	2000      	movs	r0, #0
 80013c2:	e008      	b.n	80013d6 <HAL_ADC_Start_IT+0xf6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013c4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80013c6:	f043 0310 	orr.w	r3, r3, #16
 80013ca:	6403      	str	r3, [r0, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013cc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	6443      	str	r3, [r0, #68]	; 0x44
  return HAL_OK;
 80013d4:	2000      	movs	r0, #0
}
 80013d6:	b002      	add	sp, #8
 80013d8:	4770      	bx	lr
  __HAL_LOCK(hadc);
 80013da:	2002      	movs	r0, #2
 80013dc:	e7fb      	b.n	80013d6 <HAL_ADC_Start_IT+0xf6>
  return HAL_OK;
 80013de:	2000      	movs	r0, #0
 80013e0:	e7f9      	b.n	80013d6 <HAL_ADC_Start_IT+0xf6>
 80013e2:	2000      	movs	r0, #0
 80013e4:	e7f7      	b.n	80013d6 <HAL_ADC_Start_IT+0xf6>
 80013e6:	bf00      	nop
 80013e8:	20000118 	.word	0x20000118
 80013ec:	431bde83 	.word	0x431bde83
 80013f0:	40012300 	.word	0x40012300
 80013f4:	40012000 	.word	0x40012000

080013f8 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80013f8:	6803      	ldr	r3, [r0, #0]
 80013fa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80013fc:	4770      	bx	lr

080013fe <HAL_ADC_ConvCpltCallback>:
}
 80013fe:	4770      	bx	lr

08001400 <HAL_ADC_LevelOutOfWindowCallback>:
}
 8001400:	4770      	bx	lr

08001402 <HAL_ADC_ErrorCallback>:
}
 8001402:	4770      	bx	lr

08001404 <HAL_ADC_IRQHandler>:
{
 8001404:	b538      	push	{r3, r4, r5, lr}
 8001406:	4604      	mov	r4, r0
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001408:	6802      	ldr	r2, [r0, #0]
 800140a:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800140c:	6853      	ldr	r3, [r2, #4]
  if(tmp1 && tmp2)
 800140e:	f011 0f02 	tst.w	r1, #2
 8001412:	d02f      	beq.n	8001474 <HAL_ADC_IRQHandler+0x70>
 8001414:	f003 0320 	and.w	r3, r3, #32
 8001418:	b363      	cbz	r3, 8001474 <HAL_ADC_IRQHandler+0x70>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800141a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800141c:	f013 0f10 	tst.w	r3, #16
 8001420:	d103      	bne.n	800142a <HAL_ADC_IRQHandler+0x26>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001422:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001424:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001428:	6403      	str	r3, [r0, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800142a:	6893      	ldr	r3, [r2, #8]
 800142c:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 8001430:	d119      	bne.n	8001466 <HAL_ADC_IRQHandler+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001432:	7e23      	ldrb	r3, [r4, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001434:	b9bb      	cbnz	r3, 8001466 <HAL_ADC_IRQHandler+0x62>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001436:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001438:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 800143c:	d003      	beq.n	8001446 <HAL_ADC_IRQHandler+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800143e:	6893      	ldr	r3, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001440:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001444:	d10f      	bne.n	8001466 <HAL_ADC_IRQHandler+0x62>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001446:	6853      	ldr	r3, [r2, #4]
 8001448:	f023 0320 	bic.w	r3, r3, #32
 800144c:	6053      	str	r3, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800144e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001454:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001456:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001458:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800145c:	d103      	bne.n	8001466 <HAL_ADC_IRQHandler+0x62>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800145e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8001466:	4620      	mov	r0, r4
 8001468:	f7ff ffc9 	bl	80013fe <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800146c:	6823      	ldr	r3, [r4, #0]
 800146e:	f06f 0212 	mvn.w	r2, #18
 8001472:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001474:	6823      	ldr	r3, [r4, #0]
 8001476:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if(tmp1 && tmp2)
 800147e:	f011 0f04 	tst.w	r1, #4
 8001482:	d036      	beq.n	80014f2 <HAL_ADC_IRQHandler+0xee>
 8001484:	2a00      	cmp	r2, #0
 8001486:	d034      	beq.n	80014f2 <HAL_ADC_IRQHandler+0xee>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001488:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800148a:	f012 0f10 	tst.w	r2, #16
 800148e:	d103      	bne.n	8001498 <HAL_ADC_IRQHandler+0x94>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001490:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001492:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001496:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800149e:	d121      	bne.n	80014e4 <HAL_ADC_IRQHandler+0xe0>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80014a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80014a2:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80014a6:	d003      	beq.n	80014b0 <HAL_ADC_IRQHandler+0xac>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80014a8:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80014aa:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80014ae:	d119      	bne.n	80014e4 <HAL_ADC_IRQHandler+0xe0>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80014b0:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80014b2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80014b6:	d115      	bne.n	80014e4 <HAL_ADC_IRQHandler+0xe0>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80014b8:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80014ba:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80014be:	d111      	bne.n	80014e4 <HAL_ADC_IRQHandler+0xe0>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80014c0:	7e22      	ldrb	r2, [r4, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80014c2:	b97a      	cbnz	r2, 80014e4 <HAL_ADC_IRQHandler+0xe0>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014ca:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80014cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014d2:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80014d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014d6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80014da:	d103      	bne.n	80014e4 <HAL_ADC_IRQHandler+0xe0>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80014e4:	4620      	mov	r0, r4
 80014e6:	f000 f907 	bl	80016f8 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80014ea:	6823      	ldr	r3, [r4, #0]
 80014ec:	f06f 020c 	mvn.w	r2, #12
 80014f0:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80014f2:	6822      	ldr	r2, [r4, #0]
 80014f4:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80014f6:	6853      	ldr	r3, [r2, #4]
 80014f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if(tmp1 && tmp2)
 80014fc:	f011 0f01 	tst.w	r1, #1
 8001500:	d004      	beq.n	800150c <HAL_ADC_IRQHandler+0x108>
 8001502:	b11b      	cbz	r3, 800150c <HAL_ADC_IRQHandler+0x108>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001504:	6813      	ldr	r3, [r2, #0]
 8001506:	f013 0f01 	tst.w	r3, #1
 800150a:	d109      	bne.n	8001520 <HAL_ADC_IRQHandler+0x11c>
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800150c:	6822      	ldr	r2, [r4, #0]
 800150e:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001510:	6853      	ldr	r3, [r2, #4]
 8001512:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
  if(tmp1 && tmp2)
 8001516:	f011 0f20 	tst.w	r1, #32
 800151a:	d000      	beq.n	800151e <HAL_ADC_IRQHandler+0x11a>
 800151c:	b963      	cbnz	r3, 8001538 <HAL_ADC_IRQHandler+0x134>
}
 800151e:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001520:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001526:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001528:	4620      	mov	r0, r4
 800152a:	f7ff ff69 	bl	8001400 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800152e:	6823      	ldr	r3, [r4, #0]
 8001530:	f06f 0201 	mvn.w	r2, #1
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	e7e9      	b.n	800150c <HAL_ADC_IRQHandler+0x108>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001538:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800153a:	f043 0302 	orr.w	r3, r3, #2
 800153e:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001540:	f06f 0520 	mvn.w	r5, #32
 8001544:	6015      	str	r5, [r2, #0]
      HAL_ADC_ErrorCallback(hadc);
 8001546:	4620      	mov	r0, r4
 8001548:	f7ff ff5b 	bl	8001402 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800154c:	6823      	ldr	r3, [r4, #0]
 800154e:	601d      	str	r5, [r3, #0]
}
 8001550:	e7e5      	b.n	800151e <HAL_ADC_IRQHandler+0x11a>
	...

08001554 <HAL_ADC_ConfigChannel>:
{
 8001554:	b430      	push	{r4, r5}
 8001556:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001558:	2300      	movs	r3, #0
 800155a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800155c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001560:	2b01      	cmp	r3, #1
 8001562:	f000 80bd 	beq.w	80016e0 <HAL_ADC_ConfigChannel+0x18c>
 8001566:	2301      	movs	r3, #1
 8001568:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 800156c:	680b      	ldr	r3, [r1, #0]
 800156e:	2b09      	cmp	r3, #9
 8001570:	d93e      	bls.n	80015f0 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001572:	6805      	ldr	r5, [r0, #0]
 8001574:	68ea      	ldr	r2, [r5, #12]
 8001576:	b29b      	uxth	r3, r3
 8001578:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800157c:	3b1e      	subs	r3, #30
 800157e:	2407      	movs	r4, #7
 8001580:	fa04 f303 	lsl.w	r3, r4, r3
 8001584:	ea22 0303 	bic.w	r3, r2, r3
 8001588:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800158a:	6805      	ldr	r5, [r0, #0]
 800158c:	68ea      	ldr	r2, [r5, #12]
 800158e:	688c      	ldr	r4, [r1, #8]
 8001590:	880b      	ldrh	r3, [r1, #0]
 8001592:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001596:	3b1e      	subs	r3, #30
 8001598:	fa04 f303 	lsl.w	r3, r4, r3
 800159c:	4313      	orrs	r3, r2
 800159e:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 80015a0:	684b      	ldr	r3, [r1, #4]
 80015a2:	2b06      	cmp	r3, #6
 80015a4:	d83a      	bhi.n	800161c <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015a6:	6805      	ldr	r5, [r0, #0]
 80015a8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80015aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80015ae:	3b05      	subs	r3, #5
 80015b0:	241f      	movs	r4, #31
 80015b2:	fa04 f303 	lsl.w	r3, r4, r3
 80015b6:	ea22 0303 	bic.w	r3, r2, r3
 80015ba:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015bc:	6805      	ldr	r5, [r0, #0]
 80015be:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80015c0:	684b      	ldr	r3, [r1, #4]
 80015c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80015c6:	3b05      	subs	r3, #5
 80015c8:	880c      	ldrh	r4, [r1, #0]
 80015ca:	fa04 f303 	lsl.w	r3, r4, r3
 80015ce:	4313      	orrs	r3, r2
 80015d0:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015d2:	6802      	ldr	r2, [r0, #0]
 80015d4:	4b43      	ldr	r3, [pc, #268]	; (80016e4 <HAL_ADC_ConfigChannel+0x190>)
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d050      	beq.n	800167c <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015da:	6802      	ldr	r2, [r0, #0]
 80015dc:	4b41      	ldr	r3, [pc, #260]	; (80016e4 <HAL_ADC_ConfigChannel+0x190>)
 80015de:	429a      	cmp	r2, r3
 80015e0:	d059      	beq.n	8001696 <HAL_ADC_ConfigChannel+0x142>
  __HAL_UNLOCK(hadc);
 80015e2:	2300      	movs	r3, #0
 80015e4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80015e8:	4618      	mov	r0, r3
}
 80015ea:	b002      	add	sp, #8
 80015ec:	bc30      	pop	{r4, r5}
 80015ee:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015f0:	6805      	ldr	r5, [r0, #0]
 80015f2:	692a      	ldr	r2, [r5, #16]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80015fa:	2407      	movs	r4, #7
 80015fc:	fa04 f303 	lsl.w	r3, r4, r3
 8001600:	ea22 0303 	bic.w	r3, r2, r3
 8001604:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001606:	6805      	ldr	r5, [r0, #0]
 8001608:	692a      	ldr	r2, [r5, #16]
 800160a:	688c      	ldr	r4, [r1, #8]
 800160c:	880b      	ldrh	r3, [r1, #0]
 800160e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001612:	fa04 f303 	lsl.w	r3, r4, r3
 8001616:	4313      	orrs	r3, r2
 8001618:	612b      	str	r3, [r5, #16]
 800161a:	e7c1      	b.n	80015a0 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 800161c:	2b0c      	cmp	r3, #12
 800161e:	d816      	bhi.n	800164e <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001620:	6805      	ldr	r5, [r0, #0]
 8001622:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001624:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001628:	3b23      	subs	r3, #35	; 0x23
 800162a:	241f      	movs	r4, #31
 800162c:	fa04 f303 	lsl.w	r3, r4, r3
 8001630:	ea22 0303 	bic.w	r3, r2, r3
 8001634:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001636:	6805      	ldr	r5, [r0, #0]
 8001638:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800163a:	684b      	ldr	r3, [r1, #4]
 800163c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001640:	3b23      	subs	r3, #35	; 0x23
 8001642:	880c      	ldrh	r4, [r1, #0]
 8001644:	fa04 f303 	lsl.w	r3, r4, r3
 8001648:	4313      	orrs	r3, r2
 800164a:	632b      	str	r3, [r5, #48]	; 0x30
 800164c:	e7c1      	b.n	80015d2 <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800164e:	6805      	ldr	r5, [r0, #0]
 8001650:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001652:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001656:	3b41      	subs	r3, #65	; 0x41
 8001658:	241f      	movs	r4, #31
 800165a:	fa04 f303 	lsl.w	r3, r4, r3
 800165e:	ea22 0303 	bic.w	r3, r2, r3
 8001662:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001664:	6805      	ldr	r5, [r0, #0]
 8001666:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001668:	684b      	ldr	r3, [r1, #4]
 800166a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800166e:	3b41      	subs	r3, #65	; 0x41
 8001670:	880c      	ldrh	r4, [r1, #0]
 8001672:	fa04 f303 	lsl.w	r3, r4, r3
 8001676:	4313      	orrs	r3, r2
 8001678:	62eb      	str	r3, [r5, #44]	; 0x2c
 800167a:	e7aa      	b.n	80015d2 <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800167c:	680b      	ldr	r3, [r1, #0]
 800167e:	2b12      	cmp	r3, #18
 8001680:	d1ab      	bne.n	80015da <HAL_ADC_ConfigChannel+0x86>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001682:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <HAL_ADC_ConfigChannel+0x194>)
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800168a:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	e7a1      	b.n	80015da <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001696:	680b      	ldr	r3, [r1, #0]
 8001698:	4a14      	ldr	r2, [pc, #80]	; (80016ec <HAL_ADC_ConfigChannel+0x198>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d001      	beq.n	80016a2 <HAL_ADC_ConfigChannel+0x14e>
 800169e:	2b11      	cmp	r3, #17
 80016a0:	d19f      	bne.n	80015e2 <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <HAL_ADC_ConfigChannel+0x194>)
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80016aa:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80016b2:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016b4:	680a      	ldr	r2, [r1, #0]
 80016b6:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <HAL_ADC_ConfigChannel+0x198>)
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d192      	bne.n	80015e2 <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <HAL_ADC_ConfigChannel+0x19c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a0c      	ldr	r2, [pc, #48]	; (80016f4 <HAL_ADC_ConfigChannel+0x1a0>)
 80016c2:	fba2 2303 	umull	r2, r3, r2, r3
 80016c6:	0c9b      	lsrs	r3, r3, #18
 80016c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80016d0:	e002      	b.n	80016d8 <HAL_ADC_ConfigChannel+0x184>
        counter--;
 80016d2:	9b01      	ldr	r3, [sp, #4]
 80016d4:	3b01      	subs	r3, #1
 80016d6:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80016d8:	9b01      	ldr	r3, [sp, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f9      	bne.n	80016d2 <HAL_ADC_ConfigChannel+0x17e>
 80016de:	e780      	b.n	80015e2 <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 80016e0:	2002      	movs	r0, #2
 80016e2:	e782      	b.n	80015ea <HAL_ADC_ConfigChannel+0x96>
 80016e4:	40012000 	.word	0x40012000
 80016e8:	40012300 	.word	0x40012300
 80016ec:	10000012 	.word	0x10000012
 80016f0:	20000118 	.word	0x20000118
 80016f4:	431bde83 	.word	0x431bde83

080016f8 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80016f8:	4770      	bx	lr
	...

080016fc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016fc:	4a07      	ldr	r2, [pc, #28]	; (800171c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80016fe:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001700:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001704:	041b      	lsls	r3, r3, #16
 8001706:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001708:	0200      	lsls	r0, r0, #8
 800170a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800170e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001718:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800171a:	4770      	bx	lr
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001720:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001722:	4b17      	ldr	r3, [pc, #92]	; (8001780 <HAL_NVIC_SetPriority+0x60>)
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800172a:	f1c3 0407 	rsb	r4, r3, #7
 800172e:	2c04      	cmp	r4, #4
 8001730:	bf28      	it	cs
 8001732:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001734:	1d1d      	adds	r5, r3, #4
 8001736:	2d06      	cmp	r5, #6
 8001738:	d918      	bls.n	800176c <HAL_NVIC_SetPriority+0x4c>
 800173a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	f04f 35ff 	mov.w	r5, #4294967295
 8001740:	fa05 f404 	lsl.w	r4, r5, r4
 8001744:	ea21 0104 	bic.w	r1, r1, r4
 8001748:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800174a:	fa05 f303 	lsl.w	r3, r5, r3
 800174e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001752:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001754:	2800      	cmp	r0, #0
 8001756:	db0b      	blt.n	8001770 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001758:	0109      	lsls	r1, r1, #4
 800175a:	b2c9      	uxtb	r1, r1
 800175c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001760:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001764:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001768:	bc30      	pop	{r4, r5}
 800176a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800176c:	2300      	movs	r3, #0
 800176e:	e7e5      	b.n	800173c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001770:	f000 000f 	and.w	r0, r0, #15
 8001774:	0109      	lsls	r1, r1, #4
 8001776:	b2c9      	uxtb	r1, r1
 8001778:	4b02      	ldr	r3, [pc, #8]	; (8001784 <HAL_NVIC_SetPriority+0x64>)
 800177a:	5419      	strb	r1, [r3, r0]
 800177c:	e7f4      	b.n	8001768 <HAL_NVIC_SetPriority+0x48>
 800177e:	bf00      	nop
 8001780:	e000ed00 	.word	0xe000ed00
 8001784:	e000ed14 	.word	0xe000ed14

08001788 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001788:	2800      	cmp	r0, #0
 800178a:	db07      	blt.n	800179c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800178c:	f000 021f 	and.w	r2, r0, #31
 8001790:	0940      	lsrs	r0, r0, #5
 8001792:	2301      	movs	r3, #1
 8001794:	4093      	lsls	r3, r2
 8001796:	4a02      	ldr	r2, [pc, #8]	; (80017a0 <HAL_NVIC_EnableIRQ+0x18>)
 8001798:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000e100 	.word	0xe000e100

080017a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a4:	3801      	subs	r0, #1
 80017a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80017aa:	d20a      	bcs.n	80017c2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_SYSTICK_Config+0x24>)
 80017ae:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b0:	4a06      	ldr	r2, [pc, #24]	; (80017cc <HAL_SYSTICK_Config+0x28>)
 80017b2:	21f0      	movs	r1, #240	; 0xf0
 80017b4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b8:	2000      	movs	r0, #0
 80017ba:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017bc:	2207      	movs	r2, #7
 80017be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80017c2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000e010 	.word	0xe000e010
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017d0:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80017d2:	6805      	ldr	r5, [r0, #0]
 80017d4:	682c      	ldr	r4, [r5, #0]
 80017d6:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80017da:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80017dc:	6804      	ldr	r4, [r0, #0]
 80017de:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017e0:	6883      	ldr	r3, [r0, #8]
 80017e2:	2b40      	cmp	r3, #64	; 0x40
 80017e4:	d005      	beq.n	80017f2 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80017e6:	6803      	ldr	r3, [r0, #0]
 80017e8:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80017ea:	6803      	ldr	r3, [r0, #0]
 80017ec:	60da      	str	r2, [r3, #12]
  }
}
 80017ee:	bc30      	pop	{r4, r5}
 80017f0:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80017f2:	6803      	ldr	r3, [r0, #0]
 80017f4:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80017f6:	6803      	ldr	r3, [r0, #0]
 80017f8:	60d9      	str	r1, [r3, #12]
 80017fa:	e7f8      	b.n	80017ee <DMA_SetConfig+0x1e>

080017fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017fc:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017fe:	6803      	ldr	r3, [r0, #0]
 8001800:	b2d9      	uxtb	r1, r3
 8001802:	3910      	subs	r1, #16
 8001804:	4a0c      	ldr	r2, [pc, #48]	; (8001838 <DMA_CalcBaseAndBitshift+0x3c>)
 8001806:	fba2 4201 	umull	r4, r2, r2, r1
 800180a:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800180c:	4c0b      	ldr	r4, [pc, #44]	; (800183c <DMA_CalcBaseAndBitshift+0x40>)
 800180e:	5ca2      	ldrb	r2, [r4, r2]
 8001810:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001812:	295f      	cmp	r1, #95	; 0x5f
 8001814:	d909      	bls.n	800182a <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001816:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800181a:	f023 0303 	bic.w	r3, r3, #3
 800181e:	3304      	adds	r3, #4
 8001820:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001822:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001824:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001828:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800182a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800182e:	f023 0303 	bic.w	r3, r3, #3
 8001832:	6583      	str	r3, [r0, #88]	; 0x58
 8001834:	e7f5      	b.n	8001822 <DMA_CalcBaseAndBitshift+0x26>
 8001836:	bf00      	nop
 8001838:	aaaaaaab 	.word	0xaaaaaaab
 800183c:	0800e8f8 	.word	0x0800e8f8

08001840 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001840:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001842:	6982      	ldr	r2, [r0, #24]
 8001844:	b992      	cbnz	r2, 800186c <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8001846:	2b01      	cmp	r3, #1
 8001848:	d00a      	beq.n	8001860 <DMA_CheckFifoParam+0x20>
 800184a:	2b02      	cmp	r3, #2
 800184c:	d002      	beq.n	8001854 <DMA_CheckFifoParam+0x14>
 800184e:	b10b      	cbz	r3, 8001854 <DMA_CheckFifoParam+0x14>
 8001850:	2000      	movs	r0, #0
 8001852:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001854:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001856:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800185a:	d128      	bne.n	80018ae <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 800185c:	2000      	movs	r0, #0
 800185e:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001860:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001862:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001866:	d024      	beq.n	80018b2 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001868:	2000      	movs	r0, #0
 800186a:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800186c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001870:	d009      	beq.n	8001886 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001872:	2b02      	cmp	r3, #2
 8001874:	d925      	bls.n	80018c2 <DMA_CheckFifoParam+0x82>
 8001876:	2b03      	cmp	r3, #3
 8001878:	d125      	bne.n	80018c6 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800187a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800187c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001880:	d123      	bne.n	80018ca <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8001882:	2000      	movs	r0, #0
 8001884:	4770      	bx	lr
    switch (tmp)
 8001886:	2b03      	cmp	r3, #3
 8001888:	d803      	bhi.n	8001892 <DMA_CheckFifoParam+0x52>
 800188a:	e8df f003 	tbb	[pc, r3]
 800188e:	0414      	.short	0x0414
 8001890:	0a14      	.short	0x0a14
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001892:	2000      	movs	r0, #0
 8001894:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001896:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001898:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800189c:	d10d      	bne.n	80018ba <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 800189e:	2000      	movs	r0, #0
 80018a0:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018a2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80018a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018a8:	d009      	beq.n	80018be <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 80018aa:	2000      	movs	r0, #0
 80018ac:	4770      	bx	lr
        status = HAL_ERROR;
 80018ae:	2001      	movs	r0, #1
 80018b0:	4770      	bx	lr
        status = HAL_ERROR;
 80018b2:	2001      	movs	r0, #1
 80018b4:	4770      	bx	lr
      status = HAL_ERROR;
 80018b6:	2001      	movs	r0, #1
 80018b8:	4770      	bx	lr
        status = HAL_ERROR;
 80018ba:	2001      	movs	r0, #1
 80018bc:	4770      	bx	lr
        status = HAL_ERROR;
 80018be:	2001      	movs	r0, #1
 80018c0:	4770      	bx	lr
      status = HAL_ERROR;
 80018c2:	2001      	movs	r0, #1
 80018c4:	4770      	bx	lr
    switch (tmp)
 80018c6:	2000      	movs	r0, #0
 80018c8:	4770      	bx	lr
      {
        status = HAL_ERROR;
 80018ca:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 80018cc:	4770      	bx	lr
	...

080018d0 <HAL_DMA_Init>:
{
 80018d0:	b570      	push	{r4, r5, r6, lr}
 80018d2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80018d4:	f7ff fc24 	bl	8001120 <HAL_GetTick>
  if(hdma == NULL)
 80018d8:	2c00      	cmp	r4, #0
 80018da:	d05b      	beq.n	8001994 <HAL_DMA_Init+0xc4>
 80018dc:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 80018de:	2302      	movs	r3, #2
 80018e0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80018e4:	2300      	movs	r3, #0
 80018e6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80018ea:	6822      	ldr	r2, [r4, #0]
 80018ec:	6813      	ldr	r3, [r2, #0]
 80018ee:	f023 0301 	bic.w	r3, r3, #1
 80018f2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018f4:	6823      	ldr	r3, [r4, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	f012 0f01 	tst.w	r2, #1
 80018fc:	d00a      	beq.n	8001914 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018fe:	f7ff fc0f 	bl	8001120 <HAL_GetTick>
 8001902:	1b43      	subs	r3, r0, r5
 8001904:	2b05      	cmp	r3, #5
 8001906:	d9f5      	bls.n	80018f4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001908:	2320      	movs	r3, #32
 800190a:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800190c:	2003      	movs	r0, #3
 800190e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001912:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001914:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001916:	4820      	ldr	r0, [pc, #128]	; (8001998 <HAL_DMA_Init+0xc8>)
 8001918:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800191a:	6861      	ldr	r1, [r4, #4]
 800191c:	68a2      	ldr	r2, [r4, #8]
 800191e:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001920:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001922:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001924:	6921      	ldr	r1, [r4, #16]
 8001926:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001928:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800192a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800192c:	69a1      	ldr	r1, [r4, #24]
 800192e:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001930:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001932:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001934:	6a21      	ldr	r1, [r4, #32]
 8001936:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001938:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800193a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800193c:	2904      	cmp	r1, #4
 800193e:	d01e      	beq.n	800197e <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001940:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001942:	6826      	ldr	r6, [r4, #0]
 8001944:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001946:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 800194a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800194c:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800194e:	2b04      	cmp	r3, #4
 8001950:	d107      	bne.n	8001962 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8001952:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001954:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001956:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001958:	b11b      	cbz	r3, 8001962 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800195a:	4620      	mov	r0, r4
 800195c:	f7ff ff70 	bl	8001840 <DMA_CheckFifoParam>
 8001960:	b990      	cbnz	r0, 8001988 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8001962:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001964:	4620      	mov	r0, r4
 8001966:	f7ff ff49 	bl	80017fc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800196a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800196c:	233f      	movs	r3, #63	; 0x3f
 800196e:	4093      	lsls	r3, r2
 8001970:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001972:	2000      	movs	r0, #0
 8001974:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001976:	2301      	movs	r3, #1
 8001978:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800197c:	e7c9      	b.n	8001912 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800197e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001980:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001982:	4301      	orrs	r1, r0
 8001984:	430a      	orrs	r2, r1
 8001986:	e7db      	b.n	8001940 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001988:	2340      	movs	r3, #64	; 0x40
 800198a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800198c:	2001      	movs	r0, #1
 800198e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8001992:	e7be      	b.n	8001912 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001994:	2001      	movs	r0, #1
 8001996:	e7bc      	b.n	8001912 <HAL_DMA_Init+0x42>
 8001998:	f010803f 	.word	0xf010803f

0800199c <HAL_DMA_Start_IT>:
{
 800199c:	b538      	push	{r3, r4, r5, lr}
 800199e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019a0:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80019a2:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80019a6:	2801      	cmp	r0, #1
 80019a8:	d02b      	beq.n	8001a02 <HAL_DMA_Start_IT+0x66>
 80019aa:	2001      	movs	r0, #1
 80019ac:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80019b0:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 80019b4:	b2c0      	uxtb	r0, r0
 80019b6:	2801      	cmp	r0, #1
 80019b8:	d004      	beq.n	80019c4 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 80019ba:	2300      	movs	r3, #0
 80019bc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 80019c0:	2002      	movs	r0, #2
}
 80019c2:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80019c4:	2002      	movs	r0, #2
 80019c6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019ca:	2000      	movs	r0, #0
 80019cc:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019ce:	4620      	mov	r0, r4
 80019d0:	f7ff fefe 	bl	80017d0 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019d4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80019d6:	233f      	movs	r3, #63	; 0x3f
 80019d8:	4093      	lsls	r3, r2
 80019da:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80019dc:	6822      	ldr	r2, [r4, #0]
 80019de:	6813      	ldr	r3, [r2, #0]
 80019e0:	f043 0316 	orr.w	r3, r3, #22
 80019e4:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80019e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019e8:	b123      	cbz	r3, 80019f4 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 80019ea:	6822      	ldr	r2, [r4, #0]
 80019ec:	6813      	ldr	r3, [r2, #0]
 80019ee:	f043 0308 	orr.w	r3, r3, #8
 80019f2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80019f4:	6822      	ldr	r2, [r4, #0]
 80019f6:	6813      	ldr	r3, [r2, #0]
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019fe:	2000      	movs	r0, #0
 8001a00:	e7df      	b.n	80019c2 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8001a02:	2002      	movs	r0, #2
 8001a04:	e7dd      	b.n	80019c2 <HAL_DMA_Start_IT+0x26>

08001a06 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a06:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d003      	beq.n	8001a18 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001a14:	2001      	movs	r0, #1
 8001a16:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a18:	2305      	movs	r3, #5
 8001a1a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001a1e:	6802      	ldr	r2, [r0, #0]
 8001a20:	6813      	ldr	r3, [r2, #0]
 8001a22:	f023 0301 	bic.w	r3, r3, #1
 8001a26:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001a28:	2000      	movs	r0, #0
}
 8001a2a:	4770      	bx	lr

08001a2c <HAL_DMA_IRQHandler>:
{
 8001a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a36:	4b72      	ldr	r3, [pc, #456]	; (8001c00 <HAL_DMA_IRQHandler+0x1d4>)
 8001a38:	681d      	ldr	r5, [r3, #0]
 8001a3a:	4b72      	ldr	r3, [pc, #456]	; (8001c04 <HAL_DMA_IRQHandler+0x1d8>)
 8001a3c:	fba3 3505 	umull	r3, r5, r3, r5
 8001a40:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a42:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8001a44:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a46:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001a48:	2308      	movs	r3, #8
 8001a4a:	4093      	lsls	r3, r2
 8001a4c:	4233      	tst	r3, r6
 8001a4e:	d010      	beq.n	8001a72 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a50:	6803      	ldr	r3, [r0, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	f012 0f04 	tst.w	r2, #4
 8001a58:	d00b      	beq.n	8001a72 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	f022 0204 	bic.w	r2, r2, #4
 8001a60:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a62:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001a64:	2308      	movs	r3, #8
 8001a66:	4093      	lsls	r3, r2
 8001a68:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a6a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a72:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001a74:	2301      	movs	r3, #1
 8001a76:	4093      	lsls	r3, r2
 8001a78:	4233      	tst	r3, r6
 8001a7a:	d009      	beq.n	8001a90 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a7c:	6822      	ldr	r2, [r4, #0]
 8001a7e:	6952      	ldr	r2, [r2, #20]
 8001a80:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001a84:	d004      	beq.n	8001a90 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a86:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a88:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a8a:	f043 0302 	orr.w	r3, r3, #2
 8001a8e:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a90:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001a92:	2304      	movs	r3, #4
 8001a94:	4093      	lsls	r3, r2
 8001a96:	4233      	tst	r3, r6
 8001a98:	d009      	beq.n	8001aae <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a9a:	6822      	ldr	r2, [r4, #0]
 8001a9c:	6812      	ldr	r2, [r2, #0]
 8001a9e:	f012 0f02 	tst.w	r2, #2
 8001aa2:	d004      	beq.n	8001aae <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001aa4:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001aa6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001aa8:	f043 0304 	orr.w	r3, r3, #4
 8001aac:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001aae:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001ab0:	2310      	movs	r3, #16
 8001ab2:	4093      	lsls	r3, r2
 8001ab4:	4233      	tst	r3, r6
 8001ab6:	d024      	beq.n	8001b02 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ab8:	6822      	ldr	r2, [r4, #0]
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	f012 0f08 	tst.w	r2, #8
 8001ac0:	d01f      	beq.n	8001b02 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ac2:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ac4:	6823      	ldr	r3, [r4, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001acc:	d00d      	beq.n	8001aea <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001ad4:	d104      	bne.n	8001ae0 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8001ad6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ad8:	b19b      	cbz	r3, 8001b02 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8001ada:	4620      	mov	r0, r4
 8001adc:	4798      	blx	r3
 8001ade:	e010      	b.n	8001b02 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ae0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001ae2:	b173      	cbz	r3, 8001b02 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8001ae4:	4620      	mov	r0, r4
 8001ae6:	4798      	blx	r3
 8001ae8:	e00b      	b.n	8001b02 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001af0:	d103      	bne.n	8001afa <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	f022 0208 	bic.w	r2, r2, #8
 8001af8:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001afa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001afc:	b10b      	cbz	r3, 8001b02 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8001afe:	4620      	mov	r0, r4
 8001b00:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b02:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001b04:	2320      	movs	r3, #32
 8001b06:	4093      	lsls	r3, r2
 8001b08:	4233      	tst	r3, r6
 8001b0a:	d055      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b0c:	6822      	ldr	r2, [r4, #0]
 8001b0e:	6812      	ldr	r2, [r2, #0]
 8001b10:	f012 0f10 	tst.w	r2, #16
 8001b14:	d050      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b16:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b18:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b05      	cmp	r3, #5
 8001b20:	d00e      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b22:	6823      	ldr	r3, [r4, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001b2a:	d033      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001b32:	d12a      	bne.n	8001b8a <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8001b34:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d03e      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	4798      	blx	r3
 8001b3e:	e03b      	b.n	8001bb8 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b40:	6822      	ldr	r2, [r4, #0]
 8001b42:	6813      	ldr	r3, [r2, #0]
 8001b44:	f023 0316 	bic.w	r3, r3, #22
 8001b48:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b4a:	6822      	ldr	r2, [r4, #0]
 8001b4c:	6953      	ldr	r3, [r2, #20]
 8001b4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b52:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b56:	b1a3      	cbz	r3, 8001b82 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b58:	6822      	ldr	r2, [r4, #0]
 8001b5a:	6813      	ldr	r3, [r2, #0]
 8001b5c:	f023 0308 	bic.w	r3, r3, #8
 8001b60:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b62:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001b64:	233f      	movs	r3, #63	; 0x3f
 8001b66:	4093      	lsls	r3, r2
 8001b68:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8001b70:	2300      	movs	r3, #0
 8001b72:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8001b76:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d03f      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	4798      	blx	r3
        return;
 8001b80:	e03c      	b.n	8001bfc <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b82:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1e7      	bne.n	8001b58 <HAL_DMA_IRQHandler+0x12c>
 8001b88:	e7eb      	b.n	8001b62 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8001b8a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b8c:	b1a3      	cbz	r3, 8001bb8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8001b8e:	4620      	mov	r0, r4
 8001b90:	4798      	blx	r3
 8001b92:	e011      	b.n	8001bb8 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001b9a:	d109      	bne.n	8001bb0 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	f022 0210 	bic.w	r2, r2, #16
 8001ba2:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8001baa:	2300      	movs	r3, #0
 8001bac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8001bb0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001bb2:	b10b      	cbz	r3, 8001bb8 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001bb8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001bba:	b1fb      	cbz	r3, 8001bfc <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001bbc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001bbe:	f013 0f01 	tst.w	r3, #1
 8001bc2:	d017      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001bc4:	2305      	movs	r3, #5
 8001bc6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001bca:	6822      	ldr	r2, [r4, #0]
 8001bcc:	6813      	ldr	r3, [r2, #0]
 8001bce:	f023 0301 	bic.w	r3, r3, #1
 8001bd2:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001bd4:	9b01      	ldr	r3, [sp, #4]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	9301      	str	r3, [sp, #4]
 8001bda:	42ab      	cmp	r3, r5
 8001bdc:	d804      	bhi.n	8001be8 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001bde:	6823      	ldr	r3, [r4, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f013 0f01 	tst.w	r3, #1
 8001be6:	d1f5      	bne.n	8001bd4 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8001be8:	2301      	movs	r3, #1
 8001bea:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8001bf4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001bf6:	b10b      	cbz	r3, 8001bfc <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001bf8:	4620      	mov	r0, r4
 8001bfa:	4798      	blx	r3
}
 8001bfc:	b003      	add	sp, #12
 8001bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c00:	20000118 	.word	0x20000118
 8001c04:	1b4e81b5 	.word	0x1b4e81b5

08001c08 <HAL_DMA_GetState>:
  return hdma->State;
 8001c08:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8001c0c:	4770      	bx	lr

08001c0e <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8001c0e:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8001c10:	4770      	bx	lr
	...

08001c14 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c14:	2300      	movs	r3, #0
 8001c16:	2b0f      	cmp	r3, #15
 8001c18:	f200 80cb 	bhi.w	8001db2 <HAL_GPIO_Init+0x19e>
{
 8001c1c:	b4f0      	push	{r4, r5, r6, r7}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	e05d      	b.n	8001cde <HAL_GPIO_Init+0xca>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c22:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c24:	005f      	lsls	r7, r3, #1
 8001c26:	2403      	movs	r4, #3
 8001c28:	40bc      	lsls	r4, r7
 8001c2a:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c2e:	68cc      	ldr	r4, [r1, #12]
 8001c30:	40bc      	lsls	r4, r7
 8001c32:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8001c34:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c36:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c38:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c3c:	684c      	ldr	r4, [r1, #4]
 8001c3e:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8001c42:	409a      	lsls	r2, r3
 8001c44:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8001c46:	6042      	str	r2, [r0, #4]
 8001c48:	e057      	b.n	8001cfa <HAL_GPIO_Init+0xe6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c4a:	08dc      	lsrs	r4, r3, #3
 8001c4c:	3408      	adds	r4, #8
 8001c4e:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c52:	f003 0207 	and.w	r2, r3, #7
 8001c56:	0096      	lsls	r6, r2, #2
 8001c58:	220f      	movs	r2, #15
 8001c5a:	40b2      	lsls	r2, r6
 8001c5c:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c60:	690a      	ldr	r2, [r1, #16]
 8001c62:	40b2      	lsls	r2, r6
 8001c64:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 8001c66:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001c6a:	e05a      	b.n	8001d22 <HAL_GPIO_Init+0x10e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c6c:	2204      	movs	r2, #4
 8001c6e:	e000      	b.n	8001c72 <HAL_GPIO_Init+0x5e>
 8001c70:	2200      	movs	r2, #0
 8001c72:	40b2      	lsls	r2, r6
 8001c74:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c76:	3402      	adds	r4, #2
 8001c78:	4e4e      	ldr	r6, [pc, #312]	; (8001db4 <HAL_GPIO_Init+0x1a0>)
 8001c7a:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c7e:	4a4e      	ldr	r2, [pc, #312]	; (8001db8 <HAL_GPIO_Init+0x1a4>)
 8001c80:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001c82:	43ea      	mvns	r2, r5
 8001c84:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c88:	684f      	ldr	r7, [r1, #4]
 8001c8a:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001c8e:	d001      	beq.n	8001c94 <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 8001c90:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8001c94:	4c48      	ldr	r4, [pc, #288]	; (8001db8 <HAL_GPIO_Init+0x1a4>)
 8001c96:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8001c98:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001c9a:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c9e:	684f      	ldr	r7, [r1, #4]
 8001ca0:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001ca4:	d001      	beq.n	8001caa <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 8001ca6:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8001caa:	4c43      	ldr	r4, [pc, #268]	; (8001db8 <HAL_GPIO_Init+0x1a4>)
 8001cac:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cae:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001cb0:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cb4:	684f      	ldr	r7, [r1, #4]
 8001cb6:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001cba:	d001      	beq.n	8001cc0 <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 8001cbc:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8001cc0:	4c3d      	ldr	r4, [pc, #244]	; (8001db8 <HAL_GPIO_Init+0x1a4>)
 8001cc2:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8001cc4:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001cc6:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cc8:	684e      	ldr	r6, [r1, #4]
 8001cca:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001cce:	d001      	beq.n	8001cd4 <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 8001cd0:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8001cd4:	4c38      	ldr	r4, [pc, #224]	; (8001db8 <HAL_GPIO_Init+0x1a4>)
 8001cd6:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cd8:	3301      	adds	r3, #1
 8001cda:	2b0f      	cmp	r3, #15
 8001cdc:	d866      	bhi.n	8001dac <HAL_GPIO_Init+0x198>
    ioposition = 0x01U << position;
 8001cde:	2201      	movs	r2, #1
 8001ce0:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ce2:	680c      	ldr	r4, [r1, #0]
 8001ce4:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8001ce8:	ea32 0404 	bics.w	r4, r2, r4
 8001cec:	d1f4      	bne.n	8001cd8 <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cee:	684c      	ldr	r4, [r1, #4]
 8001cf0:	f004 0403 	and.w	r4, r4, #3
 8001cf4:	3c01      	subs	r4, #1
 8001cf6:	2c01      	cmp	r4, #1
 8001cf8:	d993      	bls.n	8001c22 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cfa:	684a      	ldr	r2, [r1, #4]
 8001cfc:	f002 0203 	and.w	r2, r2, #3
 8001d00:	2a03      	cmp	r2, #3
 8001d02:	d009      	beq.n	8001d18 <HAL_GPIO_Init+0x104>
        temp = GPIOx->PUPDR;
 8001d04:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d06:	005e      	lsls	r6, r3, #1
 8001d08:	2203      	movs	r2, #3
 8001d0a:	40b2      	lsls	r2, r6
 8001d0c:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d10:	688a      	ldr	r2, [r1, #8]
 8001d12:	40b2      	lsls	r2, r6
 8001d14:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001d16:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d18:	684a      	ldr	r2, [r1, #4]
 8001d1a:	f002 0203 	and.w	r2, r2, #3
 8001d1e:	2a02      	cmp	r2, #2
 8001d20:	d093      	beq.n	8001c4a <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8001d22:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d24:	005e      	lsls	r6, r3, #1
 8001d26:	2203      	movs	r2, #3
 8001d28:	40b2      	lsls	r2, r6
 8001d2a:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d2e:	684a      	ldr	r2, [r1, #4]
 8001d30:	f002 0203 	and.w	r2, r2, #3
 8001d34:	40b2      	lsls	r2, r6
 8001d36:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001d38:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d3a:	684a      	ldr	r2, [r1, #4]
 8001d3c:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8001d40:	d0ca      	beq.n	8001cd8 <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d42:	2200      	movs	r2, #0
 8001d44:	9201      	str	r2, [sp, #4]
 8001d46:	4a1d      	ldr	r2, [pc, #116]	; (8001dbc <HAL_GPIO_Init+0x1a8>)
 8001d48:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001d4a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001d4e:	6454      	str	r4, [r2, #68]	; 0x44
 8001d50:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d52:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001d56:	9201      	str	r2, [sp, #4]
 8001d58:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001d5a:	089c      	lsrs	r4, r3, #2
 8001d5c:	1ca6      	adds	r6, r4, #2
 8001d5e:	4a15      	ldr	r2, [pc, #84]	; (8001db4 <HAL_GPIO_Init+0x1a0>)
 8001d60:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d64:	f003 0203 	and.w	r2, r3, #3
 8001d68:	0096      	lsls	r6, r2, #2
 8001d6a:	220f      	movs	r2, #15
 8001d6c:	40b2      	lsls	r2, r6
 8001d6e:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d72:	4a13      	ldr	r2, [pc, #76]	; (8001dc0 <HAL_GPIO_Init+0x1ac>)
 8001d74:	4290      	cmp	r0, r2
 8001d76:	f43f af7b 	beq.w	8001c70 <HAL_GPIO_Init+0x5c>
 8001d7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d7e:	4290      	cmp	r0, r2
 8001d80:	d00e      	beq.n	8001da0 <HAL_GPIO_Init+0x18c>
 8001d82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d86:	4290      	cmp	r0, r2
 8001d88:	d00c      	beq.n	8001da4 <HAL_GPIO_Init+0x190>
 8001d8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d8e:	4290      	cmp	r0, r2
 8001d90:	d00a      	beq.n	8001da8 <HAL_GPIO_Init+0x194>
 8001d92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d96:	4290      	cmp	r0, r2
 8001d98:	f43f af68 	beq.w	8001c6c <HAL_GPIO_Init+0x58>
 8001d9c:	2207      	movs	r2, #7
 8001d9e:	e768      	b.n	8001c72 <HAL_GPIO_Init+0x5e>
 8001da0:	2201      	movs	r2, #1
 8001da2:	e766      	b.n	8001c72 <HAL_GPIO_Init+0x5e>
 8001da4:	2202      	movs	r2, #2
 8001da6:	e764      	b.n	8001c72 <HAL_GPIO_Init+0x5e>
 8001da8:	2203      	movs	r2, #3
 8001daa:	e762      	b.n	8001c72 <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 8001dac:	b002      	add	sp, #8
 8001dae:	bcf0      	pop	{r4, r5, r6, r7}
 8001db0:	4770      	bx	lr
 8001db2:	4770      	bx	lr
 8001db4:	40013800 	.word	0x40013800
 8001db8:	40013c00 	.word	0x40013c00
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40020000 	.word	0x40020000

08001dc4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dc4:	6903      	ldr	r3, [r0, #16]
 8001dc6:	4219      	tst	r1, r3
 8001dc8:	d001      	beq.n	8001dce <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8001dca:	2001      	movs	r0, #1
 8001dcc:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dce:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8001dd0:	4770      	bx	lr

08001dd2 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dd2:	b10a      	cbz	r2, 8001dd8 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dd4:	6181      	str	r1, [r0, #24]
 8001dd6:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dd8:	0409      	lsls	r1, r1, #16
 8001dda:	6181      	str	r1, [r0, #24]
  }
}
 8001ddc:	4770      	bx	lr

08001dde <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001dde:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001de0:	ea01 0203 	and.w	r2, r1, r3
 8001de4:	ea21 0103 	bic.w	r1, r1, r3
 8001de8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001dec:	6181      	str	r1, [r0, #24]
}
 8001dee:	4770      	bx	lr

08001df0 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001df0:	4770      	bx	lr
	...

08001df4 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001df4:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001df6:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	4203      	tst	r3, r0
 8001dfc:	d100      	bne.n	8001e00 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8001dfe:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e00:	4b02      	ldr	r3, [pc, #8]	; (8001e0c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001e02:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e04:	f7ff fff4 	bl	8001df0 <HAL_GPIO_EXTI_Callback>
}
 8001e08:	e7f9      	b.n	8001dfe <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001e0a:	bf00      	nop
 8001e0c:	40013c00 	.word	0x40013c00

08001e10 <I2C_Master_SB>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e10:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b40      	cmp	r3, #64	; 0x40
 8001e18:	d010      	beq.n	8001e3c <I2C_Master_SB+0x2c>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
    }
  }
  else
  {
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e1a:	6903      	ldr	r3, [r0, #16]
 8001e1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e20:	d01b      	beq.n	8001e5a <I2C_Master_SB+0x4a>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
      }
    }
    else
    {
      if (hi2c->EventCount == 0U)
 8001e22:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d139      	bne.n	8001e9c <I2C_Master_SB+0x8c>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001e28:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001e2a:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8001e2e:	6802      	ldr	r2, [r0, #0]
 8001e30:	f003 0306 	and.w	r3, r3, #6
 8001e34:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001e38:	6113      	str	r3, [r2, #16]
 8001e3a:	4770      	bx	lr
    if (hi2c->EventCount == 0U)
 8001e3c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001e3e:	b92b      	cbnz	r3, 8001e4c <I2C_Master_SB+0x3c>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001e40:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001e42:	6802      	ldr	r2, [r0, #0]
 8001e44:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001e48:	6113      	str	r3, [r2, #16]
 8001e4a:	4770      	bx	lr
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001e4c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001e4e:	6802      	ldr	r2, [r0, #0]
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	6113      	str	r3, [r2, #16]
 8001e58:	4770      	bx	lr
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001e5a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b21      	cmp	r3, #33	; 0x21
 8001e62:	d00f      	beq.n	8001e84 <I2C_Master_SB+0x74>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001e64:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001e66:	6802      	ldr	r2, [r0, #0]
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	6113      	str	r3, [r2, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001e70:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001e72:	b16b      	cbz	r3, 8001e90 <I2C_Master_SB+0x80>
 8001e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e76:	b15b      	cbz	r3, 8001e90 <I2C_Master_SB+0x80>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001e78:	6802      	ldr	r2, [r0, #0]
 8001e7a:	6853      	ldr	r3, [r2, #4]
 8001e7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e80:	6053      	str	r3, [r2, #4]
 8001e82:	4770      	bx	lr
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001e84:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001e86:	6802      	ldr	r2, [r0, #0]
 8001e88:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001e8c:	6113      	str	r3, [r2, #16]
 8001e8e:	e7ef      	b.n	8001e70 <I2C_Master_SB+0x60>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001e90:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001e92:	b133      	cbz	r3, 8001ea2 <I2C_Master_SB+0x92>
 8001e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1ee      	bne.n	8001e78 <I2C_Master_SB+0x68>
 8001e9a:	e002      	b.n	8001ea2 <I2C_Master_SB+0x92>
      }
      else if (hi2c->EventCount == 1U)
 8001e9c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d000      	beq.n	8001ea4 <I2C_Master_SB+0x94>
      {
        /* Do nothing */
      }
    }
  }
}
 8001ea2:	4770      	bx	lr
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001ea4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001ea6:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8001eaa:	6802      	ldr	r2, [r0, #0]
 8001eac:	f003 0306 	and.w	r3, r3, #6
 8001eb0:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
 8001eb4:	6113      	str	r3, [r2, #16]
}
 8001eb6:	e7f4      	b.n	8001ea2 <I2C_Master_SB+0x92>

08001eb8 <I2C_Master_ADD10>:
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001eb8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001eba:	6802      	ldr	r2, [r0, #0]
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	6113      	str	r3, [r2, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001ec0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001ec2:	b13b      	cbz	r3, 8001ed4 <I2C_Master_ADD10+0x1c>
 8001ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec6:	b12b      	cbz	r3, 8001ed4 <I2C_Master_ADD10+0x1c>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001ec8:	6802      	ldr	r2, [r0, #0]
 8001eca:	6853      	ldr	r3, [r2, #4]
 8001ecc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ed0:	6053      	str	r3, [r2, #4]
  }
}
 8001ed2:	4770      	bx	lr
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001ed4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0fb      	beq.n	8001ed2 <I2C_Master_ADD10+0x1a>
 8001eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1f3      	bne.n	8001ec8 <I2C_Master_ADD10+0x10>
 8001ee0:	e7f7      	b.n	8001ed2 <I2C_Master_ADD10+0x1a>

08001ee2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8001ee2:	b410      	push	{r4}
 8001ee4:	b08b      	sub	sp, #44	; 0x2c
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001ee6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001eea:	b2da      	uxtb	r2, r3
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8001eec:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8001eee:	6b04      	ldr	r4, [r0, #48]	; 0x30

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ef0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b22      	cmp	r3, #34	; 0x22
 8001ef8:	d00b      	beq.n	8001f12 <I2C_Master_ADDR+0x30>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001efa:	2300      	movs	r3, #0
 8001efc:	9309      	str	r3, [sp, #36]	; 0x24
 8001efe:	6803      	ldr	r3, [r0, #0]
 8001f00:	695a      	ldr	r2, [r3, #20]
 8001f02:	9209      	str	r2, [sp, #36]	; 0x24
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	9309      	str	r3, [sp, #36]	; 0x24
 8001f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
  }
}
 8001f0a:	b00b      	add	sp, #44	; 0x2c
 8001f0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f10:	4770      	bx	lr
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001f12:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001f14:	b90b      	cbnz	r3, 8001f1a <I2C_Master_ADDR+0x38>
 8001f16:	2a40      	cmp	r2, #64	; 0x40
 8001f18:	d017      	beq.n	8001f4a <I2C_Master_ADDR+0x68>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001f1a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001f1c:	b91b      	cbnz	r3, 8001f26 <I2C_Master_ADDR+0x44>
 8001f1e:	6903      	ldr	r3, [r0, #16]
 8001f20:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001f24:	d019      	beq.n	8001f5a <I2C_Master_ADDR+0x78>
      if (hi2c->XferCount == 0U)
 8001f26:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d125      	bne.n	8001f7a <I2C_Master_ADDR+0x98>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f2e:	9302      	str	r3, [sp, #8]
 8001f30:	6803      	ldr	r3, [r0, #0]
 8001f32:	695a      	ldr	r2, [r3, #20]
 8001f34:	9202      	str	r2, [sp, #8]
 8001f36:	699a      	ldr	r2, [r3, #24]
 8001f38:	9202      	str	r2, [sp, #8]
 8001f3a:	9a02      	ldr	r2, [sp, #8]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f42:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	6503      	str	r3, [r0, #80]	; 0x50
 8001f48:	e7df      	b.n	8001f0a <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	6803      	ldr	r3, [r0, #0]
 8001f4e:	695a      	ldr	r2, [r3, #20]
 8001f50:	9200      	str	r2, [sp, #0]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	9b00      	ldr	r3, [sp, #0]
 8001f58:	e7d7      	b.n	8001f0a <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	9301      	str	r3, [sp, #4]
 8001f5e:	6803      	ldr	r3, [r0, #0]
 8001f60:	695a      	ldr	r2, [r3, #20]
 8001f62:	9201      	str	r2, [sp, #4]
 8001f64:	699a      	ldr	r2, [r3, #24]
 8001f66:	9201      	str	r2, [sp, #4]
 8001f68:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f70:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001f72:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001f74:	3301      	adds	r3, #1
 8001f76:	6503      	str	r3, [r0, #80]	; 0x50
 8001f78:	e7c7      	b.n	8001f0a <I2C_Master_ADDR+0x28>
      else if (hi2c->XferCount == 1U)
 8001f7a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d025      	beq.n	8001fce <I2C_Master_ADDR+0xec>
      else if (hi2c->XferCount == 2U)
 8001f82:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d07b      	beq.n	8002082 <I2C_Master_ADDR+0x1a0>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f8a:	6802      	ldr	r2, [r0, #0]
 8001f8c:	6813      	ldr	r3, [r2, #0]
 8001f8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f92:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001f94:	6803      	ldr	r3, [r0, #0]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001f9c:	d00e      	beq.n	8001fbc <I2C_Master_ADDR+0xda>
 8001f9e:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8001fa2:	d007      	beq.n	8001fb4 <I2C_Master_ADDR+0xd2>
 8001fa4:	2901      	cmp	r1, #1
 8001fa6:	d005      	beq.n	8001fb4 <I2C_Master_ADDR+0xd2>
 8001fa8:	2908      	cmp	r1, #8
 8001faa:	d003      	beq.n	8001fb4 <I2C_Master_ADDR+0xd2>
 8001fac:	2910      	cmp	r1, #16
 8001fae:	d001      	beq.n	8001fb4 <I2C_Master_ADDR+0xd2>
 8001fb0:	2920      	cmp	r1, #32
 8001fb2:	d103      	bne.n	8001fbc <I2C_Master_ADDR+0xda>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001fba:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	9308      	str	r3, [sp, #32]
 8001fc0:	6803      	ldr	r3, [r0, #0]
 8001fc2:	695a      	ldr	r2, [r3, #20]
 8001fc4:	9208      	str	r2, [sp, #32]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	9308      	str	r3, [sp, #32]
 8001fca:	9b08      	ldr	r3, [sp, #32]
 8001fcc:	e7ba      	b.n	8001f44 <I2C_Master_ADDR+0x62>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001fce:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8001fd2:	d011      	beq.n	8001ff8 <I2C_Master_ADDR+0x116>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8001fd4:	2908      	cmp	r1, #8
 8001fd6:	d034      	beq.n	8002042 <I2C_Master_ADDR+0x160>
 8001fd8:	2920      	cmp	r1, #32
 8001fda:	d032      	beq.n	8002042 <I2C_Master_ADDR+0x160>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8001fdc:	2c12      	cmp	r4, #18
 8001fde:	d02e      	beq.n	800203e <I2C_Master_ADDR+0x15c>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001fe0:	2904      	cmp	r1, #4
 8001fe2:	d040      	beq.n	8002066 <I2C_Master_ADDR+0x184>
 8001fe4:	2902      	cmp	r1, #2
 8001fe6:	d03e      	beq.n	8002066 <I2C_Master_ADDR+0x184>
 8001fe8:	2910      	cmp	r1, #16
 8001fea:	d03c      	beq.n	8002066 <I2C_Master_ADDR+0x184>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fec:	6802      	ldr	r2, [r0, #0]
 8001fee:	6813      	ldr	r3, [r2, #0]
 8001ff0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	e03b      	b.n	8002070 <I2C_Master_ADDR+0x18e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ff8:	6802      	ldr	r2, [r0, #0]
 8001ffa:	6813      	ldr	r3, [r2, #0]
 8001ffc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002000:	6013      	str	r3, [r2, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002002:	6803      	ldr	r3, [r0, #0]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800200a:	d00c      	beq.n	8002026 <I2C_Master_ADDR+0x144>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002012:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002014:	2300      	movs	r3, #0
 8002016:	9303      	str	r3, [sp, #12]
 8002018:	6803      	ldr	r3, [r0, #0]
 800201a:	695a      	ldr	r2, [r3, #20]
 800201c:	9203      	str	r2, [sp, #12]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	9303      	str	r3, [sp, #12]
 8002022:	9b03      	ldr	r3, [sp, #12]
 8002024:	e78e      	b.n	8001f44 <I2C_Master_ADDR+0x62>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002026:	2200      	movs	r2, #0
 8002028:	9204      	str	r2, [sp, #16]
 800202a:	695a      	ldr	r2, [r3, #20]
 800202c:	9204      	str	r2, [sp, #16]
 800202e:	699a      	ldr	r2, [r3, #24]
 8002030:	9204      	str	r2, [sp, #16]
 8002032:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	e782      	b.n	8001f44 <I2C_Master_ADDR+0x62>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800203e:	2901      	cmp	r1, #1
 8002040:	d0ce      	beq.n	8001fe0 <I2C_Master_ADDR+0xfe>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002042:	6802      	ldr	r2, [r0, #0]
 8002044:	6813      	ldr	r3, [r2, #0]
 8002046:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800204a:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800204c:	2300      	movs	r3, #0
 800204e:	9306      	str	r3, [sp, #24]
 8002050:	6803      	ldr	r3, [r0, #0]
 8002052:	695a      	ldr	r2, [r3, #20]
 8002054:	9206      	str	r2, [sp, #24]
 8002056:	699a      	ldr	r2, [r3, #24]
 8002058:	9206      	str	r2, [sp, #24]
 800205a:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	e76e      	b.n	8001f44 <I2C_Master_ADDR+0x62>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002066:	6802      	ldr	r2, [r0, #0]
 8002068:	6813      	ldr	r3, [r2, #0]
 800206a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800206e:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002070:	2300      	movs	r3, #0
 8002072:	9305      	str	r3, [sp, #20]
 8002074:	6803      	ldr	r3, [r0, #0]
 8002076:	695a      	ldr	r2, [r3, #20]
 8002078:	9205      	str	r2, [sp, #20]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	9305      	str	r3, [sp, #20]
 800207e:	9b05      	ldr	r3, [sp, #20]
 8002080:	e760      	b.n	8001f44 <I2C_Master_ADDR+0x62>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002082:	2904      	cmp	r1, #4
 8002084:	d00e      	beq.n	80020a4 <I2C_Master_ADDR+0x1c2>
 8002086:	2902      	cmp	r1, #2
 8002088:	d00c      	beq.n	80020a4 <I2C_Master_ADDR+0x1c2>
 800208a:	2910      	cmp	r1, #16
 800208c:	d00a      	beq.n	80020a4 <I2C_Master_ADDR+0x1c2>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800208e:	6802      	ldr	r2, [r0, #0]
 8002090:	6813      	ldr	r3, [r2, #0]
 8002092:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002096:	6013      	str	r3, [r2, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002098:	6802      	ldr	r2, [r0, #0]
 800209a:	6813      	ldr	r3, [r2, #0]
 800209c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	e004      	b.n	80020ae <I2C_Master_ADDR+0x1cc>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020a4:	6802      	ldr	r2, [r0, #0]
 80020a6:	6813      	ldr	r3, [r2, #0]
 80020a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020ac:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80020ae:	6803      	ldr	r3, [r0, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80020b6:	d00e      	beq.n	80020d6 <I2C_Master_ADDR+0x1f4>
 80020b8:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80020bc:	d007      	beq.n	80020ce <I2C_Master_ADDR+0x1ec>
 80020be:	2901      	cmp	r1, #1
 80020c0:	d005      	beq.n	80020ce <I2C_Master_ADDR+0x1ec>
 80020c2:	2908      	cmp	r1, #8
 80020c4:	d003      	beq.n	80020ce <I2C_Master_ADDR+0x1ec>
 80020c6:	2910      	cmp	r1, #16
 80020c8:	d001      	beq.n	80020ce <I2C_Master_ADDR+0x1ec>
 80020ca:	2920      	cmp	r1, #32
 80020cc:	d103      	bne.n	80020d6 <I2C_Master_ADDR+0x1f4>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80020d4:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020d6:	2300      	movs	r3, #0
 80020d8:	9307      	str	r3, [sp, #28]
 80020da:	6803      	ldr	r3, [r0, #0]
 80020dc:	695a      	ldr	r2, [r3, #20]
 80020de:	9207      	str	r2, [sp, #28]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	9307      	str	r3, [sp, #28]
 80020e4:	9b07      	ldr	r3, [sp, #28]
 80020e6:	e72d      	b.n	8001f44 <I2C_Master_ADDR+0x62>

080020e8 <I2C_SlaveTransmit_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 80020e8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	b15b      	cbz	r3, 8002106 <I2C_SlaveTransmit_BTF+0x1e>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020ee:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80020f0:	6803      	ldr	r3, [r0, #0]
 80020f2:	7812      	ldrb	r2, [r2, #0]
 80020f4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80020f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80020f8:	3301      	adds	r3, #1
 80020fa:	6243      	str	r3, [r0, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80020fc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80020fe:	b29b      	uxth	r3, r3
 8002100:	3b01      	subs	r3, #1
 8002102:	b29b      	uxth	r3, r3
 8002104:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
}
 8002106:	4770      	bx	lr

08002108 <I2C_SlaveReceive_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 8002108:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800210a:	b29b      	uxth	r3, r3
 800210c:	b15b      	cbz	r3, 8002126 <I2C_SlaveReceive_BTF+0x1e>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800210e:	6803      	ldr	r3, [r0, #0]
 8002110:	691a      	ldr	r2, [r3, #16]
 8002112:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002114:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002116:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002118:	3301      	adds	r3, #1
 800211a:	6243      	str	r3, [r0, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800211c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800211e:	b29b      	uxth	r3, r3
 8002120:	3b01      	subs	r3, #1
 8002122:	b29b      	uxth	r3, r3
 8002124:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
}
 8002126:	4770      	bx	lr

08002128 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002128:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	9301      	str	r3, [sp, #4]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800212e:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <I2C_WaitOnSTOPRequestThroughIT+0x40>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	08db      	lsrs	r3, r3, #3
 8002134:	4a0d      	ldr	r2, [pc, #52]	; (800216c <I2C_WaitOnSTOPRequestThroughIT+0x44>)
 8002136:	fba2 2303 	umull	r2, r3, r2, r3
 800213a:	0a1b      	lsrs	r3, r3, #8
 800213c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002140:	9301      	str	r3, [sp, #4]
  do
  {
    count--;
 8002142:	9b01      	ldr	r3, [sp, #4]
 8002144:	3b01      	subs	r3, #1
 8002146:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8002148:	9b01      	ldr	r3, [sp, #4]
 800214a:	b133      	cbz	r3, 800215a <I2C_WaitOnSTOPRequestThroughIT+0x32>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;

      return HAL_ERROR;
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800214c:	6803      	ldr	r3, [r0, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002154:	d1f5      	bne.n	8002142 <I2C_WaitOnSTOPRequestThroughIT+0x1a>

  return HAL_OK;
 8002156:	2000      	movs	r0, #0
 8002158:	e004      	b.n	8002164 <I2C_WaitOnSTOPRequestThroughIT+0x3c>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800215a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800215c:	f043 0320 	orr.w	r3, r3, #32
 8002160:	6403      	str	r3, [r0, #64]	; 0x40
      return HAL_ERROR;
 8002162:	2001      	movs	r0, #1
}
 8002164:	b002      	add	sp, #8
 8002166:	4770      	bx	lr
 8002168:	20000118 	.word	0x20000118
 800216c:	14f8b589 	.word	0x14f8b589

08002170 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002170:	6803      	ldr	r3, [r0, #0]
 8002172:	695a      	ldr	r2, [r3, #20]
 8002174:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002178:	d101      	bne.n	800217e <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 800217a:	2000      	movs	r0, #0
}
 800217c:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800217e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002182:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002184:	2300      	movs	r3, #0
 8002186:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002188:	2220      	movs	r2, #32
 800218a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800218e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002192:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002194:	f042 0204 	orr.w	r2, r2, #4
 8002198:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 800219a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 800219e:	2001      	movs	r0, #1
 80021a0:	4770      	bx	lr

080021a2 <I2C_ConvertOtherXferOptions>:
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80021a2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80021a4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80021a8:	d004      	beq.n	80021b4 <I2C_ConvertOtherXferOptions+0x12>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80021aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80021ac:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80021b0:	d003      	beq.n	80021ba <I2C_ConvertOtherXferOptions+0x18>
  }
  else
  {
    /* Nothing to do */
  }
}
 80021b2:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80021b4:	2301      	movs	r3, #1
 80021b6:	62c3      	str	r3, [r0, #44]	; 0x2c
 80021b8:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80021ba:	2308      	movs	r3, #8
 80021bc:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80021be:	e7f8      	b.n	80021b2 <I2C_ConvertOtherXferOptions+0x10>

080021c0 <I2C_WaitOnFlagUntilTimeout>:
{
 80021c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021c4:	4607      	mov	r7, r0
 80021c6:	460d      	mov	r5, r1
 80021c8:	4690      	mov	r8, r2
 80021ca:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021cc:	e022      	b.n	8002214 <I2C_WaitOnFlagUntilTimeout+0x54>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ce:	f7fe ffa7 	bl	8001120 <HAL_GetTick>
 80021d2:	9b06      	ldr	r3, [sp, #24]
 80021d4:	1ac0      	subs	r0, r0, r3
 80021d6:	42b0      	cmp	r0, r6
 80021d8:	d800      	bhi.n	80021dc <I2C_WaitOnFlagUntilTimeout+0x1c>
 80021da:	b9de      	cbnz	r6, 8002214 <I2C_WaitOnFlagUntilTimeout+0x54>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80021dc:	2300      	movs	r3, #0
 80021de:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80021e0:	2220      	movs	r2, #32
 80021e2:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80021e6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80021ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80021ec:	f042 0220 	orr.w	r2, r2, #32
 80021f0:	643a      	str	r2, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80021f2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_ERROR;
 80021f6:	2001      	movs	r0, #1
 80021f8:	e01a      	b.n	8002230 <I2C_WaitOnFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	699c      	ldr	r4, [r3, #24]
 80021fe:	ea25 0404 	bic.w	r4, r5, r4
 8002202:	b2a4      	uxth	r4, r4
 8002204:	fab4 f484 	clz	r4, r4
 8002208:	0964      	lsrs	r4, r4, #5
 800220a:	45a0      	cmp	r8, r4
 800220c:	d10f      	bne.n	800222e <I2C_WaitOnFlagUntilTimeout+0x6e>
    if (Timeout != HAL_MAX_DELAY)
 800220e:	f1b6 3fff 	cmp.w	r6, #4294967295
 8002212:	d1dc      	bne.n	80021ce <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002214:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8002218:	2b01      	cmp	r3, #1
 800221a:	d1ee      	bne.n	80021fa <I2C_WaitOnFlagUntilTimeout+0x3a>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	695c      	ldr	r4, [r3, #20]
 8002220:	ea25 0404 	bic.w	r4, r5, r4
 8002224:	b2a4      	uxth	r4, r4
 8002226:	fab4 f484 	clz	r4, r4
 800222a:	0964      	lsrs	r4, r4, #5
 800222c:	e7ed      	b.n	800220a <I2C_WaitOnFlagUntilTimeout+0x4a>
  return HAL_OK;
 800222e:	2000      	movs	r0, #0
}
 8002230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002234 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002238:	4605      	mov	r5, r0
 800223a:	460e      	mov	r6, r1
 800223c:	4617      	mov	r7, r2
 800223e:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002240:	e03d      	b.n	80022be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002248:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800224a:	682b      	ldr	r3, [r5, #0]
 800224c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002250:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002252:	2300      	movs	r3, #0
 8002254:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002256:	2220      	movs	r2, #32
 8002258:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800225c:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002260:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002262:	f042 0204 	orr.w	r2, r2, #4
 8002266:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002268:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 800226c:	2001      	movs	r0, #1
 800226e:	e034      	b.n	80022da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002270:	f7fe ff56 	bl	8001120 <HAL_GetTick>
 8002274:	eba0 0008 	sub.w	r0, r0, r8
 8002278:	42b8      	cmp	r0, r7
 800227a:	d800      	bhi.n	800227e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
 800227c:	b9ff      	cbnz	r7, 80022be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800227e:	2300      	movs	r3, #0
 8002280:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002282:	2220      	movs	r2, #32
 8002284:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002288:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800228c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800228e:	f042 0220 	orr.w	r2, r2, #32
 8002292:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002294:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 8002298:	2001      	movs	r0, #1
 800229a:	e01e      	b.n	80022da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800229c:	682b      	ldr	r3, [r5, #0]
 800229e:	699c      	ldr	r4, [r3, #24]
 80022a0:	ea26 0404 	bic.w	r4, r6, r4
 80022a4:	b2a4      	uxth	r4, r4
 80022a6:	3c00      	subs	r4, #0
 80022a8:	bf18      	it	ne
 80022aa:	2401      	movne	r4, #1
 80022ac:	b1a4      	cbz	r4, 80022d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022ae:	682b      	ldr	r3, [r5, #0]
 80022b0:	695a      	ldr	r2, [r3, #20]
 80022b2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80022b6:	d1c4      	bne.n	8002242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 80022b8:	f1b7 3fff 	cmp.w	r7, #4294967295
 80022bc:	d1d8      	bne.n	8002270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022be:	f3c6 4307 	ubfx	r3, r6, #16, #8
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d1ea      	bne.n	800229c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 80022c6:	682b      	ldr	r3, [r5, #0]
 80022c8:	695c      	ldr	r4, [r3, #20]
 80022ca:	ea26 0404 	bic.w	r4, r6, r4
 80022ce:	b2a4      	uxth	r4, r4
 80022d0:	3c00      	subs	r4, #0
 80022d2:	bf18      	it	ne
 80022d4:	2401      	movne	r4, #1
 80022d6:	e7e9      	b.n	80022ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
  return HAL_OK;
 80022d8:	2000      	movs	r0, #0
}
 80022da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080022de <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80022de:	b570      	push	{r4, r5, r6, lr}
 80022e0:	4604      	mov	r4, r0
 80022e2:	460d      	mov	r5, r1
 80022e4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022e6:	6823      	ldr	r3, [r4, #0]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	f013 0f80 	tst.w	r3, #128	; 0x80
 80022ee:	d11c      	bne.n	800232a <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022f0:	4620      	mov	r0, r4
 80022f2:	f7ff ff3d 	bl	8002170 <I2C_IsAcknowledgeFailed>
 80022f6:	b9d0      	cbnz	r0, 800232e <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80022f8:	f1b5 3fff 	cmp.w	r5, #4294967295
 80022fc:	d0f3      	beq.n	80022e6 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022fe:	f7fe ff0f 	bl	8001120 <HAL_GetTick>
 8002302:	1b80      	subs	r0, r0, r6
 8002304:	42a8      	cmp	r0, r5
 8002306:	d801      	bhi.n	800230c <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8002308:	2d00      	cmp	r5, #0
 800230a:	d1ec      	bne.n	80022e6 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800230c:	2300      	movs	r3, #0
 800230e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002310:	2220      	movs	r2, #32
 8002312:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002316:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800231a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800231c:	f042 0220 	orr.w	r2, r2, #32
 8002320:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002322:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002326:	2001      	movs	r0, #1
 8002328:	e000      	b.n	800232c <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 800232a:	2000      	movs	r0, #0
}
 800232c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800232e:	2001      	movs	r0, #1
 8002330:	e7fc      	b.n	800232c <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
	...

08002334 <I2C_RequestMemoryWrite>:
{
 8002334:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002338:	b085      	sub	sp, #20
 800233a:	4604      	mov	r4, r0
 800233c:	460d      	mov	r5, r1
 800233e:	4691      	mov	r9, r2
 8002340:	461f      	mov	r7, r3
 8002342:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8002346:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002348:	6803      	ldr	r3, [r0, #0]
 800234a:	6819      	ldr	r1, [r3, #0]
 800234c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002350:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002352:	9600      	str	r6, [sp, #0]
 8002354:	4643      	mov	r3, r8
 8002356:	2200      	movs	r2, #0
 8002358:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800235c:	f7ff ff30 	bl	80021c0 <I2C_WaitOnFlagUntilTimeout>
 8002360:	b960      	cbnz	r0, 800237c <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002362:	6823      	ldr	r3, [r4, #0]
 8002364:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8002368:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800236a:	4633      	mov	r3, r6
 800236c:	4642      	mov	r2, r8
 800236e:	4926      	ldr	r1, [pc, #152]	; (8002408 <I2C_RequestMemoryWrite+0xd4>)
 8002370:	4620      	mov	r0, r4
 8002372:	f7ff ff5f 	bl	8002234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002376:	b168      	cbz	r0, 8002394 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 8002378:	2001      	movs	r0, #1
 800237a:	e008      	b.n	800238e <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800237c:	6823      	ldr	r3, [r4, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002384:	d002      	beq.n	800238c <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002386:	f44f 7300 	mov.w	r3, #512	; 0x200
 800238a:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 800238c:	2003      	movs	r0, #3
}
 800238e:	b005      	add	sp, #20
 8002390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002394:	2300      	movs	r3, #0
 8002396:	9303      	str	r3, [sp, #12]
 8002398:	6823      	ldr	r3, [r4, #0]
 800239a:	695a      	ldr	r2, [r3, #20]
 800239c:	9203      	str	r2, [sp, #12]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	9303      	str	r3, [sp, #12]
 80023a2:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023a4:	4632      	mov	r2, r6
 80023a6:	4641      	mov	r1, r8
 80023a8:	4620      	mov	r0, r4
 80023aa:	f7ff ff98 	bl	80022de <I2C_WaitOnTXEFlagUntilTimeout>
 80023ae:	b930      	cbnz	r0, 80023be <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023b0:	2f01      	cmp	r7, #1
 80023b2:	d10f      	bne.n	80023d4 <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023b4:	6823      	ldr	r3, [r4, #0]
 80023b6:	fa5f f689 	uxtb.w	r6, r9
 80023ba:	611e      	str	r6, [r3, #16]
 80023bc:	e7e7      	b.n	800238e <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d001      	beq.n	80023c8 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 80023c4:	2001      	movs	r0, #1
 80023c6:	e7e2      	b.n	800238e <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c8:	6822      	ldr	r2, [r4, #0]
 80023ca:	6813      	ldr	r3, [r2, #0]
 80023cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	e7f7      	b.n	80023c4 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80023d4:	6823      	ldr	r3, [r4, #0]
 80023d6:	ea4f 2219 	mov.w	r2, r9, lsr #8
 80023da:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023dc:	4632      	mov	r2, r6
 80023de:	4641      	mov	r1, r8
 80023e0:	4620      	mov	r0, r4
 80023e2:	f7ff ff7c 	bl	80022de <I2C_WaitOnTXEFlagUntilTimeout>
 80023e6:	b920      	cbnz	r0, 80023f2 <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023e8:	6823      	ldr	r3, [r4, #0]
 80023ea:	fa5f f689 	uxtb.w	r6, r9
 80023ee:	611e      	str	r6, [r3, #16]
 80023f0:	e7cd      	b.n	800238e <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	d001      	beq.n	80023fc <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 80023f8:	2001      	movs	r0, #1
 80023fa:	e7c8      	b.n	800238e <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023fc:	6822      	ldr	r2, [r4, #0]
 80023fe:	6813      	ldr	r3, [r2, #0]
 8002400:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	e7f7      	b.n	80023f8 <I2C_RequestMemoryWrite+0xc4>
 8002408:	00010002 	.word	0x00010002

0800240c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800240c:	b570      	push	{r4, r5, r6, lr}
 800240e:	4604      	mov	r4, r0
 8002410:	460d      	mov	r5, r1
 8002412:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002414:	6823      	ldr	r3, [r4, #0]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	f013 0f04 	tst.w	r3, #4
 800241c:	d11c      	bne.n	8002458 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800241e:	4620      	mov	r0, r4
 8002420:	f7ff fea6 	bl	8002170 <I2C_IsAcknowledgeFailed>
 8002424:	b9d0      	cbnz	r0, 800245c <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002426:	f1b5 3fff 	cmp.w	r5, #4294967295
 800242a:	d0f3      	beq.n	8002414 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242c:	f7fe fe78 	bl	8001120 <HAL_GetTick>
 8002430:	1b80      	subs	r0, r0, r6
 8002432:	42a8      	cmp	r0, r5
 8002434:	d801      	bhi.n	800243a <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8002436:	2d00      	cmp	r5, #0
 8002438:	d1ec      	bne.n	8002414 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800243a:	2300      	movs	r3, #0
 800243c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800243e:	2220      	movs	r2, #32
 8002440:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002444:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002448:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800244a:	f042 0220 	orr.w	r2, r2, #32
 800244e:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002450:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002454:	2001      	movs	r0, #1
 8002456:	e000      	b.n	800245a <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8002458:	2000      	movs	r0, #0
}
 800245a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800245c:	2001      	movs	r0, #1
 800245e:	e7fc      	b.n	800245a <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08002460 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002460:	2800      	cmp	r0, #0
 8002462:	f000 80cc 	beq.w	80025fe <HAL_I2C_Init+0x19e>
{
 8002466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002468:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800246a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800246e:	2b00      	cmp	r3, #0
 8002470:	d077      	beq.n	8002562 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002472:	2324      	movs	r3, #36	; 0x24
 8002474:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002478:	6822      	ldr	r2, [r4, #0]
 800247a:	6813      	ldr	r3, [r2, #0]
 800247c:	f023 0301 	bic.w	r3, r3, #1
 8002480:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002482:	6822      	ldr	r2, [r4, #0]
 8002484:	6813      	ldr	r3, [r2, #0]
 8002486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800248a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800248c:	6822      	ldr	r2, [r4, #0]
 800248e:	6813      	ldr	r3, [r2, #0]
 8002490:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002494:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002496:	f002 f8bb 	bl	8004610 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800249a:	6862      	ldr	r2, [r4, #4]
 800249c:	4b5a      	ldr	r3, [pc, #360]	; (8002608 <HAL_I2C_Init+0x1a8>)
 800249e:	429a      	cmp	r2, r3
 80024a0:	d864      	bhi.n	800256c <HAL_I2C_Init+0x10c>
 80024a2:	4b5a      	ldr	r3, [pc, #360]	; (800260c <HAL_I2C_Init+0x1ac>)
 80024a4:	4298      	cmp	r0, r3
 80024a6:	bf8c      	ite	hi
 80024a8:	2300      	movhi	r3, #0
 80024aa:	2301      	movls	r3, #1
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f040 80a8 	bne.w	8002602 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 80024b2:	4d57      	ldr	r5, [pc, #348]	; (8002610 <HAL_I2C_Init+0x1b0>)
 80024b4:	fba5 3500 	umull	r3, r5, r5, r0
 80024b8:	0caf      	lsrs	r7, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024ba:	6826      	ldr	r6, [r4, #0]
 80024bc:	6871      	ldr	r1, [r6, #4]
 80024be:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80024c2:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 80024c6:	6071      	str	r1, [r6, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024c8:	6821      	ldr	r1, [r4, #0]
 80024ca:	6a0b      	ldr	r3, [r1, #32]
 80024cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024d0:	6865      	ldr	r5, [r4, #4]
 80024d2:	4a4d      	ldr	r2, [pc, #308]	; (8002608 <HAL_I2C_Init+0x1a8>)
 80024d4:	4295      	cmp	r5, r2
 80024d6:	d84f      	bhi.n	8002578 <HAL_I2C_Init+0x118>
 80024d8:	1c7a      	adds	r2, r7, #1
 80024da:	4313      	orrs	r3, r2
 80024dc:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024de:	6825      	ldr	r5, [r4, #0]
 80024e0:	69e9      	ldr	r1, [r5, #28]
 80024e2:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80024e6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80024ea:	6863      	ldr	r3, [r4, #4]
 80024ec:	4a46      	ldr	r2, [pc, #280]	; (8002608 <HAL_I2C_Init+0x1a8>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d84c      	bhi.n	800258c <HAL_I2C_Init+0x12c>
 80024f2:	3801      	subs	r0, #1
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	fbb0 f0f3 	udiv	r0, r0, r3
 80024fa:	3001      	adds	r0, #1
 80024fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002500:	4218      	tst	r0, r3
 8002502:	d078      	beq.n	80025f6 <HAL_I2C_Init+0x196>
 8002504:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8002508:	430b      	orrs	r3, r1
 800250a:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800250c:	6821      	ldr	r1, [r4, #0]
 800250e:	680b      	ldr	r3, [r1, #0]
 8002510:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002514:	69e2      	ldr	r2, [r4, #28]
 8002516:	6a20      	ldr	r0, [r4, #32]
 8002518:	4302      	orrs	r2, r0
 800251a:	4313      	orrs	r3, r2
 800251c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800251e:	6821      	ldr	r1, [r4, #0]
 8002520:	688b      	ldr	r3, [r1, #8]
 8002522:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002526:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800252a:	6922      	ldr	r2, [r4, #16]
 800252c:	68e0      	ldr	r0, [r4, #12]
 800252e:	4302      	orrs	r2, r0
 8002530:	4313      	orrs	r3, r2
 8002532:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002534:	6821      	ldr	r1, [r4, #0]
 8002536:	68cb      	ldr	r3, [r1, #12]
 8002538:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800253c:	6962      	ldr	r2, [r4, #20]
 800253e:	69a0      	ldr	r0, [r4, #24]
 8002540:	4302      	orrs	r2, r0
 8002542:	4313      	orrs	r3, r2
 8002544:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002546:	6822      	ldr	r2, [r4, #0]
 8002548:	6813      	ldr	r3, [r2, #0]
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002550:	2000      	movs	r0, #0
 8002552:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002554:	2320      	movs	r3, #32
 8002556:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800255a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800255c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8002560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002562:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002566:	f008 fd79 	bl	800b05c <HAL_I2C_MspInit>
 800256a:	e782      	b.n	8002472 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800256c:	4b29      	ldr	r3, [pc, #164]	; (8002614 <HAL_I2C_Init+0x1b4>)
 800256e:	4298      	cmp	r0, r3
 8002570:	bf8c      	ite	hi
 8002572:	2300      	movhi	r3, #0
 8002574:	2301      	movls	r3, #1
 8002576:	e799      	b.n	80024ac <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002578:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800257c:	fb02 f207 	mul.w	r2, r2, r7
 8002580:	4d25      	ldr	r5, [pc, #148]	; (8002618 <HAL_I2C_Init+0x1b8>)
 8002582:	fba5 5202 	umull	r5, r2, r5, r2
 8002586:	0992      	lsrs	r2, r2, #6
 8002588:	3201      	adds	r2, #1
 800258a:	e7a6      	b.n	80024da <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800258c:	68a2      	ldr	r2, [r4, #8]
 800258e:	b9ba      	cbnz	r2, 80025c0 <HAL_I2C_Init+0x160>
 8002590:	1e46      	subs	r6, r0, #1
 8002592:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8002596:	fbb6 f6f7 	udiv	r6, r6, r7
 800259a:	3601      	adds	r6, #1
 800259c:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80025a0:	fab6 f686 	clz	r6, r6
 80025a4:	0976      	lsrs	r6, r6, #5
 80025a6:	bb46      	cbnz	r6, 80025fa <HAL_I2C_Init+0x19a>
 80025a8:	b9c2      	cbnz	r2, 80025dc <HAL_I2C_Init+0x17c>
 80025aa:	1e42      	subs	r2, r0, #1
 80025ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80025b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80025b4:	3201      	adds	r2, #1
 80025b6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80025ba:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 80025be:	e7a3      	b.n	8002508 <HAL_I2C_Init+0xa8>
 80025c0:	1e46      	subs	r6, r0, #1
 80025c2:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 80025c6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80025ca:	fbb6 f6f7 	udiv	r6, r6, r7
 80025ce:	3601      	adds	r6, #1
 80025d0:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80025d4:	fab6 f686 	clz	r6, r6
 80025d8:	0976      	lsrs	r6, r6, #5
 80025da:	e7e4      	b.n	80025a6 <HAL_I2C_Init+0x146>
 80025dc:	1e42      	subs	r2, r0, #1
 80025de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80025e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80025e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80025ea:	3201      	adds	r2, #1
 80025ec:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80025f0:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 80025f4:	e788      	b.n	8002508 <HAL_I2C_Init+0xa8>
 80025f6:	2304      	movs	r3, #4
 80025f8:	e786      	b.n	8002508 <HAL_I2C_Init+0xa8>
 80025fa:	2301      	movs	r3, #1
 80025fc:	e784      	b.n	8002508 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 80025fe:	2001      	movs	r0, #1
}
 8002600:	4770      	bx	lr
    return HAL_ERROR;
 8002602:	2001      	movs	r0, #1
 8002604:	e7ac      	b.n	8002560 <HAL_I2C_Init+0x100>
 8002606:	bf00      	nop
 8002608:	000186a0 	.word	0x000186a0
 800260c:	001e847f 	.word	0x001e847f
 8002610:	431bde83 	.word	0x431bde83
 8002614:	003d08ff 	.word	0x003d08ff
 8002618:	10624dd3 	.word	0x10624dd3

0800261c <HAL_I2C_Mem_Write>:
{
 800261c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002620:	b083      	sub	sp, #12
 8002622:	4604      	mov	r4, r0
 8002624:	460f      	mov	r7, r1
 8002626:	4690      	mov	r8, r2
 8002628:	4699      	mov	r9, r3
 800262a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800262c:	f7fe fd78 	bl	8001120 <HAL_GetTick>
 8002630:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002632:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8002636:	b2c0      	uxtb	r0, r0
 8002638:	2820      	cmp	r0, #32
 800263a:	d003      	beq.n	8002644 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 800263c:	2002      	movs	r0, #2
}
 800263e:	b003      	add	sp, #12
 8002640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002644:	9500      	str	r5, [sp, #0]
 8002646:	2319      	movs	r3, #25
 8002648:	2201      	movs	r2, #1
 800264a:	494b      	ldr	r1, [pc, #300]	; (8002778 <HAL_I2C_Mem_Write+0x15c>)
 800264c:	4620      	mov	r0, r4
 800264e:	f7ff fdb7 	bl	80021c0 <I2C_WaitOnFlagUntilTimeout>
 8002652:	2800      	cmp	r0, #0
 8002654:	f040 8089 	bne.w	800276a <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 8002658:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800265c:	2b01      	cmp	r3, #1
 800265e:	f000 8086 	beq.w	800276e <HAL_I2C_Mem_Write+0x152>
 8002662:	2301      	movs	r3, #1
 8002664:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002668:	6823      	ldr	r3, [r4, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	f012 0f01 	tst.w	r2, #1
 8002670:	d103      	bne.n	800267a <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	f042 0201 	orr.w	r2, r2, #1
 8002678:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800267a:	6822      	ldr	r2, [r4, #0]
 800267c:	6813      	ldr	r3, [r2, #0]
 800267e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002682:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002684:	2321      	movs	r3, #33	; 0x21
 8002686:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800268a:	2340      	movs	r3, #64	; 0x40
 800268c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002690:	2300      	movs	r3, #0
 8002692:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8002694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002696:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002698:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800269c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800269e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80026a0:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026a2:	4b36      	ldr	r3, [pc, #216]	; (800277c <HAL_I2C_Mem_Write+0x160>)
 80026a4:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026a6:	9501      	str	r5, [sp, #4]
 80026a8:	9600      	str	r6, [sp, #0]
 80026aa:	464b      	mov	r3, r9
 80026ac:	4642      	mov	r2, r8
 80026ae:	4639      	mov	r1, r7
 80026b0:	4620      	mov	r0, r4
 80026b2:	f7ff fe3f 	bl	8002334 <I2C_RequestMemoryWrite>
 80026b6:	2800      	cmp	r0, #0
 80026b8:	d15b      	bne.n	8002772 <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 80026ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d035      	beq.n	800272c <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026c0:	462a      	mov	r2, r5
 80026c2:	4631      	mov	r1, r6
 80026c4:	4620      	mov	r0, r4
 80026c6:	f7ff fe0a 	bl	80022de <I2C_WaitOnTXEFlagUntilTimeout>
 80026ca:	bb20      	cbnz	r0, 8002716 <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80026ce:	6823      	ldr	r3, [r4, #0]
 80026d0:	7812      	ldrb	r2, [r2, #0]
 80026d2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80026d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80026d6:	1c4b      	adds	r3, r1, #1
 80026d8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80026da:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80026dc:	3a01      	subs	r2, #1
 80026de:	b292      	uxth	r2, r2
 80026e0:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80026e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	3b01      	subs	r3, #1
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026ec:	6823      	ldr	r3, [r4, #0]
 80026ee:	6958      	ldr	r0, [r3, #20]
 80026f0:	f010 0f04 	tst.w	r0, #4
 80026f4:	d0e1      	beq.n	80026ba <HAL_I2C_Mem_Write+0x9e>
 80026f6:	2a00      	cmp	r2, #0
 80026f8:	d0df      	beq.n	80026ba <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026fa:	784a      	ldrb	r2, [r1, #1]
 80026fc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80026fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002700:	3301      	adds	r3, #1
 8002702:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8002704:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002706:	3b01      	subs	r3, #1
 8002708:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800270a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800270c:	b29b      	uxth	r3, r3
 800270e:	3b01      	subs	r3, #1
 8002710:	b29b      	uxth	r3, r3
 8002712:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002714:	e7d1      	b.n	80026ba <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002716:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002718:	2b04      	cmp	r3, #4
 800271a:	d001      	beq.n	8002720 <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 800271c:	2001      	movs	r0, #1
 800271e:	e78e      	b.n	800263e <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002720:	6822      	ldr	r2, [r4, #0]
 8002722:	6813      	ldr	r3, [r2, #0]
 8002724:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	e7f7      	b.n	800271c <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800272c:	462a      	mov	r2, r5
 800272e:	4631      	mov	r1, r6
 8002730:	4620      	mov	r0, r4
 8002732:	f7ff fe6b 	bl	800240c <I2C_WaitOnBTFFlagUntilTimeout>
 8002736:	b150      	cbz	r0, 800274e <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002738:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800273a:	2b04      	cmp	r3, #4
 800273c:	d001      	beq.n	8002742 <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 800273e:	2001      	movs	r0, #1
 8002740:	e77d      	b.n	800263e <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002742:	6822      	ldr	r2, [r4, #0]
 8002744:	6813      	ldr	r3, [r2, #0]
 8002746:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800274a:	6013      	str	r3, [r2, #0]
 800274c:	e7f7      	b.n	800273e <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274e:	6822      	ldr	r2, [r4, #0]
 8002750:	6813      	ldr	r3, [r2, #0]
 8002752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002756:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002758:	2320      	movs	r3, #32
 800275a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800275e:	2300      	movs	r3, #0
 8002760:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8002764:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8002768:	e769      	b.n	800263e <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 800276a:	2002      	movs	r0, #2
 800276c:	e767      	b.n	800263e <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 800276e:	2002      	movs	r0, #2
 8002770:	e765      	b.n	800263e <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8002772:	2001      	movs	r0, #1
 8002774:	e763      	b.n	800263e <HAL_I2C_Mem_Write+0x22>
 8002776:	bf00      	nop
 8002778:	00100002 	.word	0x00100002
 800277c:	ffff0000 	.word	0xffff0000

08002780 <HAL_I2C_Mem_Read_IT>:
{
 8002780:	b430      	push	{r4, r5}
 8002782:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002784:	2400      	movs	r4, #0
 8002786:	9401      	str	r4, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002788:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800278c:	b2e4      	uxtb	r4, r4
 800278e:	2c20      	cmp	r4, #32
 8002790:	d163      	bne.n	800285a <HAL_I2C_Mem_Read_IT+0xda>
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002792:	4c35      	ldr	r4, [pc, #212]	; (8002868 <HAL_I2C_Mem_Read_IT+0xe8>)
 8002794:	6824      	ldr	r4, [r4, #0]
 8002796:	08e4      	lsrs	r4, r4, #3
 8002798:	4d34      	ldr	r5, [pc, #208]	; (800286c <HAL_I2C_Mem_Read_IT+0xec>)
 800279a:	fba5 5404 	umull	r5, r4, r5, r4
 800279e:	0a24      	lsrs	r4, r4, #8
 80027a0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80027a4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80027a8:	9401      	str	r4, [sp, #4]
      count--;
 80027aa:	9c01      	ldr	r4, [sp, #4]
 80027ac:	3c01      	subs	r4, #1
 80027ae:	9401      	str	r4, [sp, #4]
      if (count == 0U)
 80027b0:	9c01      	ldr	r4, [sp, #4]
 80027b2:	2c00      	cmp	r4, #0
 80027b4:	d042      	beq.n	800283c <HAL_I2C_Mem_Read_IT+0xbc>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80027b6:	6804      	ldr	r4, [r0, #0]
 80027b8:	69a5      	ldr	r5, [r4, #24]
 80027ba:	f015 0f02 	tst.w	r5, #2
 80027be:	d1f4      	bne.n	80027aa <HAL_I2C_Mem_Read_IT+0x2a>
    __HAL_LOCK(hi2c);
 80027c0:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
 80027c4:	2d01      	cmp	r5, #1
 80027c6:	d04c      	beq.n	8002862 <HAL_I2C_Mem_Read_IT+0xe2>
 80027c8:	2501      	movs	r5, #1
 80027ca:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027ce:	6825      	ldr	r5, [r4, #0]
 80027d0:	f015 0f01 	tst.w	r5, #1
 80027d4:	d103      	bne.n	80027de <HAL_I2C_Mem_Read_IT+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80027d6:	6825      	ldr	r5, [r4, #0]
 80027d8:	f045 0501 	orr.w	r5, r5, #1
 80027dc:	6025      	str	r5, [r4, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027de:	6805      	ldr	r5, [r0, #0]
 80027e0:	682c      	ldr	r4, [r5, #0]
 80027e2:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 80027e6:	602c      	str	r4, [r5, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027e8:	2422      	movs	r4, #34	; 0x22
 80027ea:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027ee:	2440      	movs	r4, #64	; 0x40
 80027f0:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027f4:	2400      	movs	r4, #0
 80027f6:	6404      	str	r4, [r0, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80027f8:	9d04      	ldr	r5, [sp, #16]
 80027fa:	6245      	str	r5, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027fc:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 8002800:	8545      	strh	r5, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002802:	8d45      	ldrh	r5, [r0, #42]	; 0x2a
 8002804:	8505      	strh	r5, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002806:	4d1a      	ldr	r5, [pc, #104]	; (8002870 <HAL_I2C_Mem_Read_IT+0xf0>)
 8002808:	62c5      	str	r5, [r0, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800280a:	6441      	str	r1, [r0, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800280c:	6482      	str	r2, [r0, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800280e:	64c3      	str	r3, [r0, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8002810:	6504      	str	r4, [r0, #80]	; 0x50
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002812:	6802      	ldr	r2, [r0, #0]
 8002814:	6813      	ldr	r3, [r2, #0]
 8002816:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800281a:	6013      	str	r3, [r2, #0]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800281c:	6802      	ldr	r2, [r0, #0]
 800281e:	6813      	ldr	r3, [r2, #0]
 8002820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002824:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8002826:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    if (hi2c->XferSize > 0U)
 800282a:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 800282c:	b123      	cbz	r3, 8002838 <HAL_I2C_Mem_Read_IT+0xb8>
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800282e:	6802      	ldr	r2, [r0, #0]
 8002830:	6853      	ldr	r3, [r2, #4]
 8002832:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002836:	6053      	str	r3, [r2, #4]
    return HAL_OK;
 8002838:	2000      	movs	r0, #0
 800283a:	e00f      	b.n	800285c <HAL_I2C_Mem_Read_IT+0xdc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800283c:	2300      	movs	r3, #0
 800283e:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002840:	2220      	movs	r2, #32
 8002842:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002846:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800284a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800284c:	f042 0220 	orr.w	r2, r2, #32
 8002850:	6402      	str	r2, [r0, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002852:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        return HAL_ERROR;
 8002856:	2001      	movs	r0, #1
 8002858:	e000      	b.n	800285c <HAL_I2C_Mem_Read_IT+0xdc>
    return HAL_BUSY;
 800285a:	2002      	movs	r0, #2
}
 800285c:	b002      	add	sp, #8
 800285e:	bc30      	pop	{r4, r5}
 8002860:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002862:	2002      	movs	r0, #2
 8002864:	e7fa      	b.n	800285c <HAL_I2C_Mem_Read_IT+0xdc>
 8002866:	bf00      	nop
 8002868:	20000118 	.word	0x20000118
 800286c:	14f8b589 	.word	0x14f8b589
 8002870:	ffff0000 	.word	0xffff0000

08002874 <HAL_I2C_MasterTxCpltCallback>:
}
 8002874:	4770      	bx	lr

08002876 <HAL_I2C_MasterRxCpltCallback>:
}
 8002876:	4770      	bx	lr

08002878 <HAL_I2C_SlaveTxCpltCallback>:
}
 8002878:	4770      	bx	lr

0800287a <I2C_SlaveTransmit_TXE>:
{
 800287a:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800287c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002880:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 8002882:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002884:	b29b      	uxth	r3, r3
 8002886:	b183      	cbz	r3, 80028aa <I2C_SlaveTransmit_TXE+0x30>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002888:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800288a:	6803      	ldr	r3, [r0, #0]
 800288c:	7809      	ldrb	r1, [r1, #0]
 800288e:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 8002890:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002892:	3301      	adds	r3, #1
 8002894:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8002896:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002898:	b29b      	uxth	r3, r3
 800289a:	3b01      	subs	r3, #1
 800289c:	b29b      	uxth	r3, r3
 800289e:	8543      	strh	r3, [r0, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80028a0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	b90b      	cbnz	r3, 80028aa <I2C_SlaveTransmit_TXE+0x30>
 80028a6:	2a29      	cmp	r2, #41	; 0x29
 80028a8:	d000      	beq.n	80028ac <I2C_SlaveTransmit_TXE+0x32>
}
 80028aa:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028ac:	6802      	ldr	r2, [r0, #0]
 80028ae:	6853      	ldr	r3, [r2, #4]
 80028b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028b4:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80028b6:	2321      	movs	r3, #33	; 0x21
 80028b8:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80028ba:	2328      	movs	r3, #40	; 0x28
 80028bc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80028c0:	f7ff ffda 	bl	8002878 <HAL_I2C_SlaveTxCpltCallback>
}
 80028c4:	e7f1      	b.n	80028aa <I2C_SlaveTransmit_TXE+0x30>

080028c6 <HAL_I2C_SlaveRxCpltCallback>:
}
 80028c6:	4770      	bx	lr

080028c8 <I2C_SlaveReceive_RXNE>:
{
 80028c8:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028ca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80028ce:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 80028d0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	b183      	cbz	r3, 80028f8 <I2C_SlaveReceive_RXNE+0x30>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d6:	6803      	ldr	r3, [r0, #0]
 80028d8:	6919      	ldr	r1, [r3, #16]
 80028da:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80028dc:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 80028de:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80028e0:	3301      	adds	r3, #1
 80028e2:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 80028e4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	8543      	strh	r3, [r0, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80028ee:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	b90b      	cbnz	r3, 80028f8 <I2C_SlaveReceive_RXNE+0x30>
 80028f4:	2a2a      	cmp	r2, #42	; 0x2a
 80028f6:	d000      	beq.n	80028fa <I2C_SlaveReceive_RXNE+0x32>
}
 80028f8:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028fa:	6802      	ldr	r2, [r0, #0]
 80028fc:	6853      	ldr	r3, [r2, #4]
 80028fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002902:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002904:	2322      	movs	r3, #34	; 0x22
 8002906:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002908:	2328      	movs	r3, #40	; 0x28
 800290a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800290e:	f7ff ffda 	bl	80028c6 <HAL_I2C_SlaveRxCpltCallback>
}
 8002912:	e7f1      	b.n	80028f8 <I2C_SlaveReceive_RXNE+0x30>

08002914 <HAL_I2C_AddrCallback>:
}
 8002914:	4770      	bx	lr

08002916 <I2C_Slave_ADDR>:
{
 8002916:	b500      	push	{lr}
 8002918:	b083      	sub	sp, #12
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800291a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800291e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002922:	2b28      	cmp	r3, #40	; 0x28
 8002924:	d00c      	beq.n	8002940 <I2C_Slave_ADDR+0x2a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002926:	2300      	movs	r3, #0
 8002928:	9301      	str	r3, [sp, #4]
 800292a:	6802      	ldr	r2, [r0, #0]
 800292c:	6951      	ldr	r1, [r2, #20]
 800292e:	9101      	str	r1, [sp, #4]
 8002930:	6992      	ldr	r2, [r2, #24]
 8002932:	9201      	str	r2, [sp, #4]
 8002934:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(hi2c);
 8002936:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 800293a:	b003      	add	sp, #12
 800293c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002940:	6802      	ldr	r2, [r0, #0]
 8002942:	6853      	ldr	r3, [r2, #4]
 8002944:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002948:	6053      	str	r3, [r2, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800294a:	f011 0f04 	tst.w	r1, #4
 800294e:	d00b      	beq.n	8002968 <I2C_Slave_ADDR+0x52>
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002950:	2300      	movs	r3, #0
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002952:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002956:	d109      	bne.n	800296c <I2C_Slave_ADDR+0x56>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002958:	8982      	ldrh	r2, [r0, #12]
    __HAL_UNLOCK(hi2c);
 800295a:	2100      	movs	r1, #0
 800295c:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002960:	4619      	mov	r1, r3
 8002962:	f7ff ffd7 	bl	8002914 <HAL_I2C_AddrCallback>
 8002966:	e7e8      	b.n	800293a <I2C_Slave_ADDR+0x24>
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002968:	2301      	movs	r3, #1
 800296a:	e7f2      	b.n	8002952 <I2C_Slave_ADDR+0x3c>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800296c:	8b02      	ldrh	r2, [r0, #24]
 800296e:	e7f4      	b.n	800295a <I2C_Slave_ADDR+0x44>

08002970 <HAL_I2C_ListenCpltCallback>:
}
 8002970:	4770      	bx	lr
	...

08002974 <I2C_Slave_AF>:
{
 8002974:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002976:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800297a:	b2db      	uxtb	r3, r3
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800297c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800297e:	2a08      	cmp	r2, #8
 8002980:	d001      	beq.n	8002986 <I2C_Slave_AF+0x12>
 8002982:	2a20      	cmp	r2, #32
 8002984:	d101      	bne.n	800298a <I2C_Slave_AF+0x16>
 8002986:	2b28      	cmp	r3, #40	; 0x28
 8002988:	d006      	beq.n	8002998 <I2C_Slave_AF+0x24>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800298a:	2b21      	cmp	r3, #33	; 0x21
 800298c:	d01e      	beq.n	80029cc <I2C_Slave_AF+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800298e:	6803      	ldr	r3, [r0, #0]
 8002990:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002994:	615a      	str	r2, [r3, #20]
}
 8002996:	bd08      	pop	{r3, pc}
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002998:	4b1a      	ldr	r3, [pc, #104]	; (8002a04 <I2C_Slave_AF+0x90>)
 800299a:	62c3      	str	r3, [r0, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800299c:	6802      	ldr	r2, [r0, #0]
 800299e:	6853      	ldr	r3, [r2, #4]
 80029a0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80029a4:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029a6:	6803      	ldr	r3, [r0, #0]
 80029a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029ac:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ae:	6802      	ldr	r2, [r0, #0]
 80029b0:	6813      	ldr	r3, [r2, #0]
 80029b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029b6:	6013      	str	r3, [r2, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 80029b8:	2300      	movs	r3, #0
 80029ba:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80029bc:	2220      	movs	r2, #32
 80029be:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80029c2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80029c6:	f7ff ffd3 	bl	8002970 <HAL_I2C_ListenCpltCallback>
 80029ca:	e7e4      	b.n	8002996 <I2C_Slave_AF+0x22>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80029cc:	4b0d      	ldr	r3, [pc, #52]	; (8002a04 <I2C_Slave_AF+0x90>)
 80029ce:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80029d0:	2321      	movs	r3, #33	; 0x21
 80029d2:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80029d4:	2320      	movs	r3, #32
 80029d6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80029da:	2300      	movs	r3, #0
 80029dc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029e0:	6802      	ldr	r2, [r0, #0]
 80029e2:	6853      	ldr	r3, [r2, #4]
 80029e4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80029e8:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ea:	6803      	ldr	r3, [r0, #0]
 80029ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029f0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029f2:	6802      	ldr	r2, [r0, #0]
 80029f4:	6813      	ldr	r3, [r2, #0]
 80029f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029fa:	6013      	str	r3, [r2, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80029fc:	f7ff ff3c 	bl	8002878 <HAL_I2C_SlaveTxCpltCallback>
 8002a00:	e7c9      	b.n	8002996 <I2C_Slave_AF+0x22>
 8002a02:	bf00      	nop
 8002a04:	ffff0000 	.word	0xffff0000

08002a08 <HAL_I2C_MemTxCpltCallback>:
}
 8002a08:	4770      	bx	lr

08002a0a <I2C_MasterTransmit_BTF>:
{
 8002a0a:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a0c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a0e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b21      	cmp	r3, #33	; 0x21
 8002a16:	d000      	beq.n	8002a1a <I2C_MasterTransmit_BTF+0x10>
}
 8002a18:	bd08      	pop	{r3, pc}
    if (hi2c->XferCount != 0U)
 8002a1a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	b163      	cbz	r3, 8002a3a <I2C_MasterTransmit_BTF+0x30>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a20:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002a22:	6803      	ldr	r3, [r0, #0]
 8002a24:	7812      	ldrb	r2, [r2, #0]
 8002a26:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002a28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8002a2e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	3b01      	subs	r3, #1
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	8543      	strh	r3, [r0, #42]	; 0x2a
 8002a38:	e7ee      	b.n	8002a18 <I2C_MasterTransmit_BTF+0xe>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a3a:	2a08      	cmp	r2, #8
 8002a3c:	d004      	beq.n	8002a48 <I2C_MasterTransmit_BTF+0x3e>
 8002a3e:	2a20      	cmp	r2, #32
 8002a40:	d002      	beq.n	8002a48 <I2C_MasterTransmit_BTF+0x3e>
 8002a42:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002a46:	d119      	bne.n	8002a7c <I2C_MasterTransmit_BTF+0x72>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a48:	6802      	ldr	r2, [r0, #0]
 8002a4a:	6853      	ldr	r3, [r2, #4]
 8002a4c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a50:	6053      	str	r3, [r2, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a52:	6802      	ldr	r2, [r0, #0]
 8002a54:	6813      	ldr	r3, [r2, #0]
 8002a56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a5a:	6013      	str	r3, [r2, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002a60:	2320      	movs	r3, #32
 8002a62:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a66:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b40      	cmp	r3, #64	; 0x40
 8002a6e:	d015      	beq.n	8002a9c <I2C_MasterTransmit_BTF+0x92>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a70:	2300      	movs	r3, #0
 8002a72:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a76:	f7ff fefd 	bl	8002874 <HAL_I2C_MasterTxCpltCallback>
}
 8002a7a:	e7cd      	b.n	8002a18 <I2C_MasterTransmit_BTF+0xe>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a7c:	6802      	ldr	r2, [r0, #0]
 8002a7e:	6853      	ldr	r3, [r2, #4]
 8002a80:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a84:	6053      	str	r3, [r2, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002a86:	2311      	movs	r3, #17
 8002a88:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002a90:	2320      	movs	r3, #32
 8002a92:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a96:	f7ff feed 	bl	8002874 <HAL_I2C_MasterTxCpltCallback>
 8002a9a:	e7bd      	b.n	8002a18 <I2C_MasterTransmit_BTF+0xe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002aa2:	f7ff ffb1 	bl	8002a08 <HAL_I2C_MemTxCpltCallback>
 8002aa6:	e7b7      	b.n	8002a18 <I2C_MasterTransmit_BTF+0xe>

08002aa8 <I2C_MemoryTransmit_TXE_BTF>:
{
 8002aa8:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002aaa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  if (hi2c->EventCount == 0U)
 8002aae:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002ab0:	b99a      	cbnz	r2, 8002ada <I2C_MemoryTransmit_TXE_BTF+0x32>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002ab2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d008      	beq.n	8002aca <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002ab8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002aba:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8002abe:	6802      	ldr	r2, [r0, #0]
 8002ac0:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 8002ac2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	6503      	str	r3, [r0, #80]	; 0x50
}
 8002ac8:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002aca:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002acc:	6802      	ldr	r2, [r0, #0]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 8002ad2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002ad4:	3302      	adds	r3, #2
 8002ad6:	6503      	str	r3, [r0, #80]	; 0x50
 8002ad8:	e7f6      	b.n	8002ac8 <I2C_MemoryTransmit_TXE_BTF+0x20>
 8002ada:	b2db      	uxtb	r3, r3
  else if (hi2c->EventCount == 1U)
 8002adc:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002ade:	2a01      	cmp	r2, #1
 8002ae0:	d023      	beq.n	8002b2a <I2C_MemoryTransmit_TXE_BTF+0x82>
  else if (hi2c->EventCount == 2U)
 8002ae2:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002ae4:	2a02      	cmp	r2, #2
 8002ae6:	d1ef      	bne.n	8002ac8 <I2C_MemoryTransmit_TXE_BTF+0x20>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002ae8:	2b22      	cmp	r3, #34	; 0x22
 8002aea:	d026      	beq.n	8002b3a <I2C_MemoryTransmit_TXE_BTF+0x92>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002aec:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002aee:	b292      	uxth	r2, r2
 8002af0:	b10a      	cbz	r2, 8002af6 <I2C_MemoryTransmit_TXE_BTF+0x4e>
 8002af2:	2b21      	cmp	r3, #33	; 0x21
 8002af4:	d02a      	beq.n	8002b4c <I2C_MemoryTransmit_TXE_BTF+0xa4>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002af6:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002af8:	b292      	uxth	r2, r2
 8002afa:	2a00      	cmp	r2, #0
 8002afc:	d1e4      	bne.n	8002ac8 <I2C_MemoryTransmit_TXE_BTF+0x20>
 8002afe:	2b21      	cmp	r3, #33	; 0x21
 8002b00:	d1e2      	bne.n	8002ac8 <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b02:	6802      	ldr	r2, [r0, #0]
 8002b04:	6853      	ldr	r3, [r2, #4]
 8002b06:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b0a:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b0c:	6802      	ldr	r2, [r0, #0]
 8002b0e:	6813      	ldr	r3, [r2, #0]
 8002b10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b14:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b16:	2300      	movs	r3, #0
 8002b18:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b20:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002b24:	f7ff ff70 	bl	8002a08 <HAL_I2C_MemTxCpltCallback>
}
 8002b28:	e7ce      	b.n	8002ac8 <I2C_MemoryTransmit_TXE_BTF+0x20>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002b2a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002b2c:	6802      	ldr	r2, [r0, #0]
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	6113      	str	r3, [r2, #16]
    hi2c->EventCount++;
 8002b32:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002b34:	3301      	adds	r3, #1
 8002b36:	6503      	str	r3, [r0, #80]	; 0x50
 8002b38:	e7c6      	b.n	8002ac8 <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002b3a:	6802      	ldr	r2, [r0, #0]
 8002b3c:	6813      	ldr	r3, [r2, #0]
 8002b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b42:	6013      	str	r3, [r2, #0]
      hi2c->EventCount++;
 8002b44:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002b46:	3301      	adds	r3, #1
 8002b48:	6503      	str	r3, [r0, #80]	; 0x50
 8002b4a:	e7bd      	b.n	8002ac8 <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b4c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002b4e:	6803      	ldr	r3, [r0, #0]
 8002b50:	7812      	ldrb	r2, [r2, #0]
 8002b52:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002b54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002b56:	3301      	adds	r3, #1
 8002b58:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8002b5a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	8543      	strh	r3, [r0, #42]	; 0x2a
 8002b64:	e7b0      	b.n	8002ac8 <I2C_MemoryTransmit_TXE_BTF+0x20>

08002b66 <I2C_MasterTransmit_TXE>:
{
 8002b66:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b68:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002b6c:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002b6e:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8002b72:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002b74:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002b76:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8002b78:	b909      	cbnz	r1, 8002b7e <I2C_MasterTransmit_TXE+0x18>
 8002b7a:	2b21      	cmp	r3, #33	; 0x21
 8002b7c:	d004      	beq.n	8002b88 <I2C_MasterTransmit_TXE+0x22>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002b7e:	2b21      	cmp	r3, #33	; 0x21
 8002b80:	d03b      	beq.n	8002bfa <I2C_MasterTransmit_TXE+0x94>
 8002b82:	2a40      	cmp	r2, #64	; 0x40
 8002b84:	d037      	beq.n	8002bf6 <I2C_MasterTransmit_TXE+0x90>
}
 8002b86:	bd10      	pop	{r4, pc}
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002b88:	2c08      	cmp	r4, #8
 8002b8a:	d004      	beq.n	8002b96 <I2C_MasterTransmit_TXE+0x30>
 8002b8c:	2c20      	cmp	r4, #32
 8002b8e:	d002      	beq.n	8002b96 <I2C_MasterTransmit_TXE+0x30>
 8002b90:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 8002b94:	d119      	bne.n	8002bca <I2C_MasterTransmit_TXE+0x64>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b96:	6802      	ldr	r2, [r0, #0]
 8002b98:	6853      	ldr	r3, [r2, #4]
 8002b9a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b9e:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba0:	6802      	ldr	r2, [r0, #0]
 8002ba2:	6813      	ldr	r3, [r2, #0]
 8002ba4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ba8:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002baa:	2300      	movs	r3, #0
 8002bac:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002bae:	2320      	movs	r3, #32
 8002bb0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002bb4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b40      	cmp	r3, #64	; 0x40
 8002bbc:	d015      	beq.n	8002bea <I2C_MasterTransmit_TXE+0x84>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002bc4:	f7ff fe56 	bl	8002874 <HAL_I2C_MasterTxCpltCallback>
 8002bc8:	e7dd      	b.n	8002b86 <I2C_MasterTransmit_TXE+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bca:	6802      	ldr	r2, [r0, #0]
 8002bcc:	6853      	ldr	r3, [r2, #4]
 8002bce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002bd2:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002bd4:	2311      	movs	r3, #17
 8002bd6:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002bde:	2320      	movs	r3, #32
 8002be0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002be4:	f7ff fe46 	bl	8002874 <HAL_I2C_MasterTxCpltCallback>
 8002be8:	e7cd      	b.n	8002b86 <I2C_MasterTransmit_TXE+0x20>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bea:	2300      	movs	r3, #0
 8002bec:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002bf0:	f7ff ff0a 	bl	8002a08 <HAL_I2C_MemTxCpltCallback>
 8002bf4:	e7c7      	b.n	8002b86 <I2C_MasterTransmit_TXE+0x20>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002bf6:	2b22      	cmp	r3, #34	; 0x22
 8002bf8:	d1c5      	bne.n	8002b86 <I2C_MasterTransmit_TXE+0x20>
    if (hi2c->XferCount == 0U)
 8002bfa:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	b92b      	cbnz	r3, 8002c0c <I2C_MasterTransmit_TXE+0xa6>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c00:	6802      	ldr	r2, [r0, #0]
 8002c02:	6853      	ldr	r3, [r2, #4]
 8002c04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c08:	6053      	str	r3, [r2, #4]
 8002c0a:	e7bc      	b.n	8002b86 <I2C_MasterTransmit_TXE+0x20>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c0c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b40      	cmp	r3, #64	; 0x40
 8002c14:	d00c      	beq.n	8002c30 <I2C_MasterTransmit_TXE+0xca>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c16:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002c18:	6803      	ldr	r3, [r0, #0]
 8002c1a:	7812      	ldrb	r2, [r2, #0]
 8002c1c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002c1e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c20:	3301      	adds	r3, #1
 8002c22:	6243      	str	r3, [r0, #36]	; 0x24
        hi2c->XferCount--;
 8002c24:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8002c2e:	e7aa      	b.n	8002b86 <I2C_MasterTransmit_TXE+0x20>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002c30:	f7ff ff3a 	bl	8002aa8 <I2C_MemoryTransmit_TXE_BTF>
 8002c34:	e7a7      	b.n	8002b86 <I2C_MasterTransmit_TXE+0x20>

08002c36 <I2C_MasterReceive_BTF>:
{
 8002c36:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c38:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8002c3a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d014      	beq.n	8002c6c <I2C_MasterReceive_BTF+0x36>
  else if (hi2c->XferCount == 3U)
 8002c42:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	2b03      	cmp	r3, #3
 8002c48:	d022      	beq.n	8002c90 <I2C_MasterReceive_BTF+0x5a>
  else if (hi2c->XferCount == 2U)
 8002c4a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d039      	beq.n	8002cc6 <I2C_MasterReceive_BTF+0x90>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c52:	6803      	ldr	r3, [r0, #0]
 8002c54:	691a      	ldr	r2, [r3, #16]
 8002c56:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c58:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002c5a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8002c60:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8002c6a:	e010      	b.n	8002c8e <I2C_MasterReceive_BTF+0x58>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c6c:	6802      	ldr	r2, [r0, #0]
 8002c6e:	6853      	ldr	r3, [r2, #4]
 8002c70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c74:	6053      	str	r3, [r2, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c76:	6803      	ldr	r3, [r0, #0]
 8002c78:	691a      	ldr	r2, [r3, #16]
 8002c7a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c7c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002c7e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c80:	3301      	adds	r3, #1
 8002c82:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8002c84:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8002c8e:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c90:	6801      	ldr	r1, [r0, #0]
 8002c92:	684b      	ldr	r3, [r1, #4]
 8002c94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c98:	604b      	str	r3, [r1, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002c9a:	2a04      	cmp	r2, #4
 8002c9c:	d006      	beq.n	8002cac <I2C_MasterReceive_BTF+0x76>
 8002c9e:	2a02      	cmp	r2, #2
 8002ca0:	d004      	beq.n	8002cac <I2C_MasterReceive_BTF+0x76>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ca2:	6802      	ldr	r2, [r0, #0]
 8002ca4:	6813      	ldr	r3, [r2, #0]
 8002ca6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002caa:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cac:	6803      	ldr	r3, [r0, #0]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002cb2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002cb4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8002cba:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	8543      	strh	r3, [r0, #42]	; 0x2a
 8002cc4:	e7e3      	b.n	8002c8e <I2C_MasterReceive_BTF+0x58>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002cc6:	2a01      	cmp	r2, #1
 8002cc8:	d00b      	beq.n	8002ce2 <I2C_MasterReceive_BTF+0xac>
 8002cca:	2a10      	cmp	r2, #16
 8002ccc:	d009      	beq.n	8002ce2 <I2C_MasterReceive_BTF+0xac>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002cce:	2a04      	cmp	r2, #4
 8002cd0:	d038      	beq.n	8002d44 <I2C_MasterReceive_BTF+0x10e>
 8002cd2:	2a02      	cmp	r2, #2
 8002cd4:	d036      	beq.n	8002d44 <I2C_MasterReceive_BTF+0x10e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd6:	6802      	ldr	r2, [r0, #0]
 8002cd8:	6813      	ldr	r3, [r2, #0]
 8002cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cde:	6013      	str	r3, [r2, #0]
 8002ce0:	e004      	b.n	8002cec <I2C_MasterReceive_BTF+0xb6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ce2:	6802      	ldr	r2, [r0, #0]
 8002ce4:	6813      	ldr	r3, [r2, #0]
 8002ce6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cea:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cec:	6803      	ldr	r3, [r0, #0]
 8002cee:	691a      	ldr	r2, [r3, #16]
 8002cf0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002cf2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002cf4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002cf6:	1c53      	adds	r3, r2, #1
 8002cf8:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8002cfa:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	8543      	strh	r3, [r0, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d04:	6803      	ldr	r3, [r0, #0]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 8002d0a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8002d10:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	8543      	strh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002d1a:	6802      	ldr	r2, [r0, #0]
 8002d1c:	6853      	ldr	r3, [r2, #4]
 8002d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d22:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002d24:	2320      	movs	r3, #32
 8002d26:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d2a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b40      	cmp	r3, #64	; 0x40
 8002d32:	d00d      	beq.n	8002d50 <I2C_MasterReceive_BTF+0x11a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d34:	2300      	movs	r3, #0
 8002d36:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002d3a:	2312      	movs	r3, #18
 8002d3c:	6303      	str	r3, [r0, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002d3e:	f7ff fd9a 	bl	8002876 <HAL_I2C_MasterRxCpltCallback>
 8002d42:	e7a4      	b.n	8002c8e <I2C_MasterReceive_BTF+0x58>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d44:	6802      	ldr	r2, [r0, #0]
 8002d46:	6813      	ldr	r3, [r2, #0]
 8002d48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	e7cd      	b.n	8002cec <I2C_MasterReceive_BTF+0xb6>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d50:	2300      	movs	r3, #0
 8002d52:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d56:	6303      	str	r3, [r0, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002d58:	f008 fc16 	bl	800b588 <HAL_I2C_MemRxCpltCallback>
 8002d5c:	e797      	b.n	8002c8e <I2C_MasterReceive_BTF+0x58>

08002d5e <HAL_I2C_ErrorCallback>:
}
 8002d5e:	4770      	bx	lr

08002d60 <I2C_MasterReceive_RXNE>:
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d60:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b22      	cmp	r3, #34	; 0x22
 8002d68:	d000      	beq.n	8002d6c <I2C_MasterReceive_RXNE+0xc>
 8002d6a:	4770      	bx	lr
{
 8002d6c:	b510      	push	{r4, lr}
 8002d6e:	4604      	mov	r4, r0
    tmp = hi2c->XferCount;
 8002d70:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002d72:	b29b      	uxth	r3, r3
    if (tmp > 3U)
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d916      	bls.n	8002da6 <I2C_MasterReceive_RXNE+0x46>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d78:	6803      	ldr	r3, [r0, #0]
 8002d7a:	691a      	ldr	r2, [r3, #16]
 8002d7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d7e:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002d80:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d82:	3301      	adds	r3, #1
 8002d84:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8002d86:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	8543      	strh	r3, [r0, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8002d90:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	d000      	beq.n	8002d9a <I2C_MasterReceive_RXNE+0x3a>
}
 8002d98:	bd10      	pop	{r4, pc}
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d9a:	6802      	ldr	r2, [r0, #0]
 8002d9c:	6853      	ldr	r3, [r2, #4]
 8002d9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002da2:	6053      	str	r3, [r2, #4]
 8002da4:	e7f8      	b.n	8002d98 <I2C_MasterReceive_RXNE+0x38>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002da6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002da8:	2a02      	cmp	r2, #2
 8002daa:	d0f5      	beq.n	8002d98 <I2C_MasterReceive_RXNE+0x38>
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d8f3      	bhi.n	8002d98 <I2C_MasterReceive_RXNE+0x38>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002db0:	f7ff f9ba 	bl	8002128 <I2C_WaitOnSTOPRequestThroughIT>
 8002db4:	2800      	cmp	r0, #0
 8002db6:	d12e      	bne.n	8002e16 <I2C_MasterReceive_RXNE+0xb6>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002db8:	6822      	ldr	r2, [r4, #0]
 8002dba:	6813      	ldr	r3, [r2, #0]
 8002dbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002dc0:	6013      	str	r3, [r2, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002dc2:	6822      	ldr	r2, [r4, #0]
 8002dc4:	6853      	ldr	r3, [r2, #4]
 8002dc6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002dca:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dcc:	6823      	ldr	r3, [r4, #0]
 8002dce:	691a      	ldr	r2, [r3, #16]
 8002dd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002dd2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002dd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002dda:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	3b01      	subs	r3, #1
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002de4:	2320      	movs	r3, #32
 8002de6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002dea:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b40      	cmp	r3, #64	; 0x40
 8002df2:	d008      	beq.n	8002e06 <I2C_MasterReceive_RXNE+0xa6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df4:	2300      	movs	r3, #0
 8002df6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002dfa:	2312      	movs	r3, #18
 8002dfc:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002dfe:	4620      	mov	r0, r4
 8002e00:	f7ff fd39 	bl	8002876 <HAL_I2C_MasterRxCpltCallback>
 8002e04:	e7c8      	b.n	8002d98 <I2C_MasterReceive_RXNE+0x38>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e06:	2300      	movs	r3, #0
 8002e08:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002e0c:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002e0e:	4620      	mov	r0, r4
 8002e10:	f008 fbba 	bl	800b588 <HAL_I2C_MemRxCpltCallback>
 8002e14:	e7c0      	b.n	8002d98 <I2C_MasterReceive_RXNE+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e16:	6822      	ldr	r2, [r4, #0]
 8002e18:	6853      	ldr	r3, [r2, #4]
 8002e1a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e1e:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e20:	6823      	ldr	r3, [r4, #0]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e26:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002e28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002e2e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002e38:	2320      	movs	r3, #32
 8002e3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002e44:	4620      	mov	r0, r4
 8002e46:	f7ff ff8a 	bl	8002d5e <HAL_I2C_ErrorCallback>
}
 8002e4a:	e7a5      	b.n	8002d98 <I2C_MasterReceive_RXNE+0x38>

08002e4c <HAL_I2C_AbortCpltCallback>:
}
 8002e4c:	4770      	bx	lr
	...

08002e50 <I2C_DMAAbort>:
{
 8002e50:	b500      	push	{lr}
 8002e52:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	9301      	str	r3, [sp, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002e58:	6b80      	ldr	r0, [r0, #56]	; 0x38
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e5a:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8002e5e:	b2d2      	uxtb	r2, r2
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e60:	4b32      	ldr	r3, [pc, #200]	; (8002f2c <I2C_DMAAbort+0xdc>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	08db      	lsrs	r3, r3, #3
 8002e66:	4932      	ldr	r1, [pc, #200]	; (8002f30 <I2C_DMAAbort+0xe0>)
 8002e68:	fba1 1303 	umull	r1, r3, r1, r3
 8002e6c:	0a1b      	lsrs	r3, r3, #8
 8002e6e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002e72:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8002e76:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8002e78:	9b01      	ldr	r3, [sp, #4]
 8002e7a:	b143      	cbz	r3, 8002e8e <I2C_DMAAbort+0x3e>
    count--;
 8002e7c:	9b01      	ldr	r3, [sp, #4]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002e82:	6803      	ldr	r3, [r0, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002e8a:	d1f5      	bne.n	8002e78 <I2C_DMAAbort+0x28>
 8002e8c:	e003      	b.n	8002e96 <I2C_DMAAbort+0x46>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e8e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002e90:	f043 0320 	orr.w	r3, r3, #32
 8002e94:	6403      	str	r3, [r0, #64]	; 0x40
  if (hi2c->hdmatx != NULL)
 8002e96:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e98:	b10b      	cbz	r3, 8002e9e <I2C_DMAAbort+0x4e>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	63d9      	str	r1, [r3, #60]	; 0x3c
  if (hi2c->hdmarx != NULL)
 8002e9e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002ea0:	b10b      	cbz	r3, 8002ea6 <I2C_DMAAbort+0x56>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	63d9      	str	r1, [r3, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ea6:	6801      	ldr	r1, [r0, #0]
 8002ea8:	680b      	ldr	r3, [r1, #0]
 8002eaa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002eae:	600b      	str	r3, [r1, #0]
  hi2c->XferCount = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 8002eb4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002eb6:	b10b      	cbz	r3, 8002ebc <I2C_DMAAbort+0x6c>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002eb8:	2100      	movs	r1, #0
 8002eba:	6519      	str	r1, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 8002ebc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002ebe:	b10b      	cbz	r3, 8002ec4 <I2C_DMAAbort+0x74>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	6519      	str	r1, [r3, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 8002ec4:	6801      	ldr	r1, [r0, #0]
 8002ec6:	680b      	ldr	r3, [r1, #0]
 8002ec8:	f023 0301 	bic.w	r3, r3, #1
 8002ecc:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002ece:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b60      	cmp	r3, #96	; 0x60
 8002ed6:	d00e      	beq.n	8002ef6 <I2C_DMAAbort+0xa6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ed8:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8002edc:	2a28      	cmp	r2, #40	; 0x28
 8002ede:	d014      	beq.n	8002f0a <I2C_DMAAbort+0xba>
      hi2c->State = HAL_I2C_STATE_READY;
 8002ee0:	2320      	movs	r3, #32
 8002ee2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002eec:	f7ff ff37 	bl	8002d5e <HAL_I2C_ErrorCallback>
}
 8002ef0:	b003      	add	sp, #12
 8002ef2:	f85d fb04 	ldr.w	pc, [sp], #4
    hi2c->State         = HAL_I2C_STATE_READY;
 8002ef6:	2320      	movs	r3, #32
 8002ef8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002efc:	2300      	movs	r3, #0
 8002efe:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002f02:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8002f04:	f7ff ffa2 	bl	8002e4c <HAL_I2C_AbortCpltCallback>
 8002f08:	e7f2      	b.n	8002ef0 <I2C_DMAAbort+0xa0>
      __HAL_I2C_ENABLE(hi2c);
 8002f0a:	6802      	ldr	r2, [r0, #0]
 8002f0c:	6813      	ldr	r3, [r2, #0]
 8002f0e:	f043 0301 	orr.w	r3, r3, #1
 8002f12:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f14:	6802      	ldr	r2, [r0, #0]
 8002f16:	6813      	ldr	r3, [r2, #0]
 8002f18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f1c:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f22:	2328      	movs	r3, #40	; 0x28
 8002f24:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8002f28:	e7e0      	b.n	8002eec <I2C_DMAAbort+0x9c>
 8002f2a:	bf00      	nop
 8002f2c:	20000118 	.word	0x20000118
 8002f30:	14f8b589 	.word	0x14f8b589

08002f34 <I2C_ITError>:
{
 8002f34:	b510      	push	{r4, lr}
 8002f36:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f38:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002f3c:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002f3e:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8002f42:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002f44:	2a10      	cmp	r2, #16
 8002f46:	d036      	beq.n	8002fb6 <I2C_ITError+0x82>
 8002f48:	2a40      	cmp	r2, #64	; 0x40
 8002f4a:	d034      	beq.n	8002fb6 <I2C_ITError+0x82>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f4c:	f003 0228 	and.w	r2, r3, #40	; 0x28
 8002f50:	2a28      	cmp	r2, #40	; 0x28
 8002f52:	d038      	beq.n	8002fc6 <I2C_ITError+0x92>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002f54:	6822      	ldr	r2, [r4, #0]
 8002f56:	6852      	ldr	r2, [r2, #4]
 8002f58:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002f5c:	d107      	bne.n	8002f6e <I2C_ITError+0x3a>
 8002f5e:	2b60      	cmp	r3, #96	; 0x60
 8002f60:	d005      	beq.n	8002f6e <I2C_ITError+0x3a>
      hi2c->State = HAL_I2C_STATE_READY;
 8002f62:	2320      	movs	r3, #32
 8002f64:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	6323      	str	r3, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002f72:	6823      	ldr	r3, [r4, #0]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002f7a:	d048      	beq.n	800300e <I2C_ITError+0xda>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f82:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002f84:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002f86:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d020      	beq.n	8002fd2 <I2C_ITError+0x9e>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002f90:	4b44      	ldr	r3, [pc, #272]	; (80030a4 <I2C_ITError+0x170>)
 8002f92:	6513      	str	r3, [r2, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002f94:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002f96:	f7fe fd36 	bl	8001a06 <HAL_DMA_Abort_IT>
 8002f9a:	2800      	cmp	r0, #0
 8002f9c:	d049      	beq.n	8003032 <I2C_ITError+0xfe>
        __HAL_I2C_DISABLE(hi2c);
 8002f9e:	6822      	ldr	r2, [r4, #0]
 8002fa0:	6813      	ldr	r3, [r2, #0]
 8002fa2:	f023 0301 	bic.w	r3, r3, #1
 8002fa6:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8002fa8:	2320      	movs	r3, #32
 8002faa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002fae:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002fb0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002fb2:	4798      	blx	r3
 8002fb4:	e03d      	b.n	8003032 <I2C_ITError+0xfe>
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002fb6:	2b22      	cmp	r3, #34	; 0x22
 8002fb8:	d1c8      	bne.n	8002f4c <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002fba:	6821      	ldr	r1, [r4, #0]
 8002fbc:	680a      	ldr	r2, [r1, #0]
 8002fbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fc2:	600a      	str	r2, [r1, #0]
 8002fc4:	e7c2      	b.n	8002f4c <I2C_ITError+0x18>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002fca:	2328      	movs	r3, #40	; 0x28
 8002fcc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8002fd0:	e7cf      	b.n	8002f72 <I2C_ITError+0x3e>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002fd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002fd4:	4a33      	ldr	r2, [pc, #204]	; (80030a4 <I2C_ITError+0x170>)
 8002fd6:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002fd8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002fda:	f7fe fd14 	bl	8001a06 <HAL_DMA_Abort_IT>
 8002fde:	b340      	cbz	r0, 8003032 <I2C_ITError+0xfe>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002fe0:	6823      	ldr	r3, [r4, #0]
 8002fe2:	695a      	ldr	r2, [r3, #20]
 8002fe4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002fe8:	d005      	beq.n	8002ff6 <I2C_ITError+0xc2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fea:	691a      	ldr	r2, [r3, #16]
 8002fec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002fee:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002ff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8002ff6:	6822      	ldr	r2, [r4, #0]
 8002ff8:	6813      	ldr	r3, [r2, #0]
 8002ffa:	f023 0301 	bic.w	r3, r3, #1
 8002ffe:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003000:	2320      	movs	r3, #32
 8003002:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003006:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003008:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800300a:	4798      	blx	r3
 800300c:	e011      	b.n	8003032 <I2C_ITError+0xfe>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800300e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	2a60      	cmp	r2, #96	; 0x60
 8003016:	d01f      	beq.n	8003058 <I2C_ITError+0x124>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003018:	695a      	ldr	r2, [r3, #20]
 800301a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800301e:	d005      	beq.n	800302c <I2C_ITError+0xf8>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003020:	691a      	ldr	r2, [r3, #16]
 8003022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003024:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003028:	3301      	adds	r3, #1
 800302a:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 800302c:	4620      	mov	r0, r4
 800302e:	f7ff fe96 	bl	8002d5e <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 8003032:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003034:	f013 0f0f 	tst.w	r3, #15
 8003038:	d004      	beq.n	8003044 <I2C_ITError+0x110>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800303a:	6822      	ldr	r2, [r4, #0]
 800303c:	6853      	ldr	r3, [r2, #4]
 800303e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003042:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 8003044:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003048:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800304a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800304c:	f012 0f04 	tst.w	r2, #4
 8003050:	d001      	beq.n	8003056 <I2C_ITError+0x122>
 8003052:	2b28      	cmp	r3, #40	; 0x28
 8003054:	d018      	beq.n	8003088 <I2C_ITError+0x154>
}
 8003056:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8003058:	2220      	movs	r2, #32
 800305a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800305e:	2200      	movs	r2, #0
 8003060:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003062:	695a      	ldr	r2, [r3, #20]
 8003064:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003068:	d005      	beq.n	8003076 <I2C_ITError+0x142>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800306a:	691a      	ldr	r2, [r3, #16]
 800306c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800306e:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003070:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003072:	3301      	adds	r3, #1
 8003074:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8003076:	6822      	ldr	r2, [r4, #0]
 8003078:	6813      	ldr	r3, [r2, #0]
 800307a:	f023 0301 	bic.w	r3, r3, #1
 800307e:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8003080:	4620      	mov	r0, r4
 8003082:	f7ff fee3 	bl	8002e4c <HAL_I2C_AbortCpltCallback>
 8003086:	e7d4      	b.n	8003032 <I2C_ITError+0xfe>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003088:	4b07      	ldr	r3, [pc, #28]	; (80030a8 <I2C_ITError+0x174>)
 800308a:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800308c:	2300      	movs	r3, #0
 800308e:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003090:	2220      	movs	r2, #32
 8003092:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003096:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 800309a:	4620      	mov	r0, r4
 800309c:	f7ff fc68 	bl	8002970 <HAL_I2C_ListenCpltCallback>
}
 80030a0:	e7d9      	b.n	8003056 <I2C_ITError+0x122>
 80030a2:	bf00      	nop
 80030a4:	08002e51 	.word	0x08002e51
 80030a8:	ffff0000 	.word	0xffff0000

080030ac <I2C_Slave_STOPF>:
{
 80030ac:	b530      	push	{r4, r5, lr}
 80030ae:	b083      	sub	sp, #12
 80030b0:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030b2:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 80030b6:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030b8:	6802      	ldr	r2, [r0, #0]
 80030ba:	6853      	ldr	r3, [r2, #4]
 80030bc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80030c0:	6053      	str	r3, [r2, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80030c2:	2300      	movs	r3, #0
 80030c4:	9301      	str	r3, [sp, #4]
 80030c6:	6803      	ldr	r3, [r0, #0]
 80030c8:	695a      	ldr	r2, [r3, #20]
 80030ca:	9201      	str	r2, [sp, #4]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	f042 0201 	orr.w	r2, r2, #1
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030d6:	6802      	ldr	r2, [r0, #0]
 80030d8:	6813      	ldr	r3, [r2, #0]
 80030da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030de:	6013      	str	r3, [r2, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80030e0:	6803      	ldr	r3, [r0, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80030e8:	d038      	beq.n	800315c <I2C_Slave_STOPF+0xb0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80030ea:	2d22      	cmp	r5, #34	; 0x22
 80030ec:	d021      	beq.n	8003132 <I2C_Slave_STOPF+0x86>
 80030ee:	2d2a      	cmp	r5, #42	; 0x2a
 80030f0:	d01f      	beq.n	8003132 <I2C_Slave_STOPF+0x86>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80030f2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80030f4:	6812      	ldr	r2, [r2, #0]
 80030f6:	6852      	ldr	r2, [r2, #4]
 80030f8:	b292      	uxth	r2, r2
 80030fa:	8542      	strh	r2, [r0, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 80030fc:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80030fe:	b292      	uxth	r2, r2
 8003100:	b11a      	cbz	r2, 800310a <I2C_Slave_STOPF+0x5e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003102:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003104:	f042 0204 	orr.w	r2, r2, #4
 8003108:	6402      	str	r2, [r0, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003110:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003112:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003114:	f7fe fd78 	bl	8001c08 <HAL_DMA_GetState>
 8003118:	2801      	cmp	r0, #1
 800311a:	d01f      	beq.n	800315c <I2C_Slave_STOPF+0xb0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800311c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800311e:	4a44      	ldr	r2, [pc, #272]	; (8003230 <I2C_Slave_STOPF+0x184>)
 8003120:	651a      	str	r2, [r3, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003122:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003124:	f7fe fc6f 	bl	8001a06 <HAL_DMA_Abort_IT>
 8003128:	b1c0      	cbz	r0, 800315c <I2C_Slave_STOPF+0xb0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800312a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800312c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800312e:	4798      	blx	r3
 8003130:	e014      	b.n	800315c <I2C_Slave_STOPF+0xb0>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003132:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003134:	6812      	ldr	r2, [r2, #0]
 8003136:	6852      	ldr	r2, [r2, #4]
 8003138:	b292      	uxth	r2, r2
 800313a:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 800313c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800313e:	b292      	uxth	r2, r2
 8003140:	b11a      	cbz	r2, 800314a <I2C_Slave_STOPF+0x9e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003142:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003144:	f042 0204 	orr.w	r2, r2, #4
 8003148:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003150:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003152:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003154:	f7fe fd58 	bl	8001c08 <HAL_DMA_GetState>
 8003158:	2801      	cmp	r0, #1
 800315a:	d142      	bne.n	80031e2 <I2C_Slave_STOPF+0x136>
  if (hi2c->XferCount != 0U)
 800315c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800315e:	b29b      	uxth	r3, r3
 8003160:	b333      	cbz	r3, 80031b0 <I2C_Slave_STOPF+0x104>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003162:	6823      	ldr	r3, [r4, #0]
 8003164:	695a      	ldr	r2, [r3, #20]
 8003166:	f012 0f04 	tst.w	r2, #4
 800316a:	d00a      	beq.n	8003182 <I2C_Slave_STOPF+0xd6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800316c:	691a      	ldr	r2, [r3, #16]
 800316e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003170:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003172:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003174:	3301      	adds	r3, #1
 8003176:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003178:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800317a:	b29b      	uxth	r3, r3
 800317c:	3b01      	subs	r3, #1
 800317e:	b29b      	uxth	r3, r3
 8003180:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003182:	6823      	ldr	r3, [r4, #0]
 8003184:	695a      	ldr	r2, [r3, #20]
 8003186:	f012 0f40 	tst.w	r2, #64	; 0x40
 800318a:	d00a      	beq.n	80031a2 <I2C_Slave_STOPF+0xf6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800318c:	691a      	ldr	r2, [r3, #16]
 800318e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003190:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003192:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003194:	3301      	adds	r3, #1
 8003196:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003198:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800319a:	b29b      	uxth	r3, r3
 800319c:	3b01      	subs	r3, #1
 800319e:	b29b      	uxth	r3, r3
 80031a0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 80031a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	b11b      	cbz	r3, 80031b0 <I2C_Slave_STOPF+0x104>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031aa:	f043 0304 	orr.w	r3, r3, #4
 80031ae:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031b2:	bb13      	cbnz	r3, 80031fa <I2C_Slave_STOPF+0x14e>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80031b4:	2d2a      	cmp	r5, #42	; 0x2a
 80031b6:	d025      	beq.n	8003204 <I2C_Slave_STOPF+0x158>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80031b8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b28      	cmp	r3, #40	; 0x28
 80031c0:	d029      	beq.n	8003216 <I2C_Slave_STOPF+0x16a>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80031c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80031c4:	2b22      	cmp	r3, #34	; 0x22
 80031c6:	d001      	beq.n	80031cc <I2C_Slave_STOPF+0x120>
 80031c8:	2d22      	cmp	r5, #34	; 0x22
 80031ca:	d119      	bne.n	8003200 <I2C_Slave_STOPF+0x154>
        hi2c->PreviousState = I2C_STATE_NONE;
 80031cc:	2300      	movs	r3, #0
 80031ce:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80031d0:	2220      	movs	r2, #32
 80031d2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80031da:	4620      	mov	r0, r4
 80031dc:	f7ff fb73 	bl	80028c6 <HAL_I2C_SlaveRxCpltCallback>
}
 80031e0:	e00e      	b.n	8003200 <I2C_Slave_STOPF+0x154>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80031e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031e4:	4a12      	ldr	r2, [pc, #72]	; (8003230 <I2C_Slave_STOPF+0x184>)
 80031e6:	651a      	str	r2, [r3, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80031e8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80031ea:	f7fe fc0c 	bl	8001a06 <HAL_DMA_Abort_IT>
 80031ee:	2800      	cmp	r0, #0
 80031f0:	d0b4      	beq.n	800315c <I2C_Slave_STOPF+0xb0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80031f2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80031f4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80031f6:	4798      	blx	r3
 80031f8:	e7b0      	b.n	800315c <I2C_Slave_STOPF+0xb0>
    I2C_ITError(hi2c);
 80031fa:	4620      	mov	r0, r4
 80031fc:	f7ff fe9a 	bl	8002f34 <I2C_ITError>
}
 8003200:	b003      	add	sp, #12
 8003202:	bd30      	pop	{r4, r5, pc}
      hi2c->PreviousState = I2C_STATE_NONE;
 8003204:	2300      	movs	r3, #0
 8003206:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003208:	2328      	movs	r3, #40	; 0x28
 800320a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800320e:	4620      	mov	r0, r4
 8003210:	f7ff fb59 	bl	80028c6 <HAL_I2C_SlaveRxCpltCallback>
 8003214:	e7d0      	b.n	80031b8 <I2C_Slave_STOPF+0x10c>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003216:	4b07      	ldr	r3, [pc, #28]	; (8003234 <I2C_Slave_STOPF+0x188>)
 8003218:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800321a:	2300      	movs	r3, #0
 800321c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800321e:	2220      	movs	r2, #32
 8003220:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003224:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003228:	4620      	mov	r0, r4
 800322a:	f7ff fba1 	bl	8002970 <HAL_I2C_ListenCpltCallback>
 800322e:	e7e7      	b.n	8003200 <I2C_Slave_STOPF+0x154>
 8003230:	08002e51 	.word	0x08002e51
 8003234:	ffff0000 	.word	0xffff0000

08003238 <HAL_I2C_EV_IRQHandler>:
{
 8003238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800323a:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800323c:	6802      	ldr	r2, [r0, #0]
 800323e:	6855      	ldr	r5, [r2, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003240:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003242:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003246:	b2db      	uxtb	r3, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003248:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 800324c:	b2c8      	uxtb	r0, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800324e:	2b10      	cmp	r3, #16
 8003250:	d013      	beq.n	800327a <HAL_I2C_EV_IRQHandler+0x42>
 8003252:	2b40      	cmp	r3, #64	; 0x40
 8003254:	d011      	beq.n	800327a <HAL_I2C_EV_IRQHandler+0x42>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003256:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003258:	2b00      	cmp	r3, #0
 800325a:	d07a      	beq.n	8003352 <HAL_I2C_EV_IRQHandler+0x11a>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800325c:	6953      	ldr	r3, [r2, #20]
  uint32_t sr2itflags               = 0U;
 800325e:	2100      	movs	r1, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003260:	f013 0f02 	tst.w	r3, #2
 8003264:	d078      	beq.n	8003358 <HAL_I2C_EV_IRQHandler+0x120>
 8003266:	f415 7f00 	tst.w	r5, #512	; 0x200
 800326a:	d075      	beq.n	8003358 <HAL_I2C_EV_IRQHandler+0x120>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800326c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800326e:	b103      	cbz	r3, 8003272 <HAL_I2C_EV_IRQHandler+0x3a>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003270:	6991      	ldr	r1, [r2, #24]
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003272:	4620      	mov	r0, r4
 8003274:	f7ff fb4f 	bl	8002916 <I2C_Slave_ADDR>
}
 8003278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800327a:	f8d2 c018 	ldr.w	ip, [r2, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800327e:	6951      	ldr	r1, [r2, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003280:	f011 0701 	ands.w	r7, r1, #1
 8003284:	d105      	bne.n	8003292 <HAL_I2C_EV_IRQHandler+0x5a>
 8003286:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 800328a:	d0f5      	beq.n	8003278 <HAL_I2C_EV_IRQHandler+0x40>
 800328c:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8003290:	d0f2      	beq.n	8003278 <HAL_I2C_EV_IRQHandler+0x40>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003292:	b117      	cbz	r7, 800329a <HAL_I2C_EV_IRQHandler+0x62>
 8003294:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003298:	d129      	bne.n	80032ee <HAL_I2C_EV_IRQHandler+0xb6>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800329a:	f011 0f08 	tst.w	r1, #8
 800329e:	d002      	beq.n	80032a6 <HAL_I2C_EV_IRQHandler+0x6e>
 80032a0:	f415 7f00 	tst.w	r5, #512	; 0x200
 80032a4:	d12a      	bne.n	80032fc <HAL_I2C_EV_IRQHandler+0xc4>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032a6:	f011 0f02 	tst.w	r1, #2
 80032aa:	d002      	beq.n	80032b2 <HAL_I2C_EV_IRQHandler+0x7a>
 80032ac:	f415 7f00 	tst.w	r5, #512	; 0x200
 80032b0:	d128      	bne.n	8003304 <HAL_I2C_EV_IRQHandler+0xcc>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80032b2:	f01c 0f04 	tst.w	ip, #4
 80032b6:	d031      	beq.n	800331c <HAL_I2C_EV_IRQHandler+0xe4>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80032b8:	6852      	ldr	r2, [r2, #4]
 80032ba:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80032be:	d1db      	bne.n	8003278 <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032c0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80032c4:	d005      	beq.n	80032d2 <HAL_I2C_EV_IRQHandler+0x9a>
 80032c6:	f415 6f80 	tst.w	r5, #1024	; 0x400
 80032ca:	d002      	beq.n	80032d2 <HAL_I2C_EV_IRQHandler+0x9a>
 80032cc:	f011 0f04 	tst.w	r1, #4
 80032d0:	d01c      	beq.n	800330c <HAL_I2C_EV_IRQHandler+0xd4>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032d2:	f011 0f04 	tst.w	r1, #4
 80032d6:	d0cf      	beq.n	8003278 <HAL_I2C_EV_IRQHandler+0x40>
 80032d8:	f415 7f00 	tst.w	r5, #512	; 0x200
 80032dc:	d0cc      	beq.n	8003278 <HAL_I2C_EV_IRQHandler+0x40>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80032de:	2821      	cmp	r0, #33	; 0x21
 80032e0:	d018      	beq.n	8003314 <HAL_I2C_EV_IRQHandler+0xdc>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80032e2:	2b40      	cmp	r3, #64	; 0x40
 80032e4:	d1c8      	bne.n	8003278 <HAL_I2C_EV_IRQHandler+0x40>
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80032e6:	4620      	mov	r0, r4
 80032e8:	f7ff fbde 	bl	8002aa8 <I2C_MemoryTransmit_TXE_BTF>
 80032ec:	e7c4      	b.n	8003278 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_ConvertOtherXferOptions(hi2c);
 80032ee:	4620      	mov	r0, r4
 80032f0:	f7fe ff57 	bl	80021a2 <I2C_ConvertOtherXferOptions>
      I2C_Master_SB(hi2c);
 80032f4:	4620      	mov	r0, r4
 80032f6:	f7fe fd8b 	bl	8001e10 <I2C_Master_SB>
 80032fa:	e7bd      	b.n	8003278 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADD10(hi2c);
 80032fc:	4620      	mov	r0, r4
 80032fe:	f7fe fddb 	bl	8001eb8 <I2C_Master_ADD10>
 8003302:	e7b9      	b.n	8003278 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADDR(hi2c);
 8003304:	4620      	mov	r0, r4
 8003306:	f7fe fdec 	bl	8001ee2 <I2C_Master_ADDR>
 800330a:	e7b5      	b.n	8003278 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterTransmit_TXE(hi2c);
 800330c:	4620      	mov	r0, r4
 800330e:	f7ff fc2a 	bl	8002b66 <I2C_MasterTransmit_TXE>
 8003312:	e7b1      	b.n	8003278 <HAL_I2C_EV_IRQHandler+0x40>
            I2C_MasterTransmit_BTF(hi2c);
 8003314:	4620      	mov	r0, r4
 8003316:	f7ff fb78 	bl	8002a0a <I2C_MasterTransmit_BTF>
 800331a:	e7ad      	b.n	8003278 <HAL_I2C_EV_IRQHandler+0x40>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800331c:	6853      	ldr	r3, [r2, #4]
 800331e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003322:	d1a9      	bne.n	8003278 <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003324:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003328:	d005      	beq.n	8003336 <HAL_I2C_EV_IRQHandler+0xfe>
 800332a:	f415 6f80 	tst.w	r5, #1024	; 0x400
 800332e:	d002      	beq.n	8003336 <HAL_I2C_EV_IRQHandler+0xfe>
 8003330:	f011 0f04 	tst.w	r1, #4
 8003334:	d009      	beq.n	800334a <HAL_I2C_EV_IRQHandler+0x112>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003336:	f011 0f04 	tst.w	r1, #4
 800333a:	d09d      	beq.n	8003278 <HAL_I2C_EV_IRQHandler+0x40>
 800333c:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003340:	d09a      	beq.n	8003278 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_BTF(hi2c);
 8003342:	4620      	mov	r0, r4
 8003344:	f7ff fc77 	bl	8002c36 <I2C_MasterReceive_BTF>
 8003348:	e796      	b.n	8003278 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_RXNE(hi2c);
 800334a:	4620      	mov	r0, r4
 800334c:	f7ff fd08 	bl	8002d60 <I2C_MasterReceive_RXNE>
 8003350:	e792      	b.n	8003278 <HAL_I2C_EV_IRQHandler+0x40>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003352:	6991      	ldr	r1, [r2, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003354:	6953      	ldr	r3, [r2, #20]
 8003356:	e783      	b.n	8003260 <HAL_I2C_EV_IRQHandler+0x28>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003358:	f013 0f10 	tst.w	r3, #16
 800335c:	d002      	beq.n	8003364 <HAL_I2C_EV_IRQHandler+0x12c>
 800335e:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003362:	d118      	bne.n	8003396 <HAL_I2C_EV_IRQHandler+0x15e>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003364:	2821      	cmp	r0, #33	; 0x21
 8003366:	d01a      	beq.n	800339e <HAL_I2C_EV_IRQHandler+0x166>
 8003368:	2829      	cmp	r0, #41	; 0x29
 800336a:	d018      	beq.n	800339e <HAL_I2C_EV_IRQHandler+0x166>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800336c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003370:	d005      	beq.n	800337e <HAL_I2C_EV_IRQHandler+0x146>
 8003372:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8003376:	d002      	beq.n	800337e <HAL_I2C_EV_IRQHandler+0x146>
 8003378:	f013 0f04 	tst.w	r3, #4
 800337c:	d028      	beq.n	80033d0 <HAL_I2C_EV_IRQHandler+0x198>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800337e:	f013 0f04 	tst.w	r3, #4
 8003382:	f43f af79 	beq.w	8003278 <HAL_I2C_EV_IRQHandler+0x40>
 8003386:	f415 7f00 	tst.w	r5, #512	; 0x200
 800338a:	f43f af75 	beq.w	8003278 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_BTF(hi2c);
 800338e:	4620      	mov	r0, r4
 8003390:	f7fe feba 	bl	8002108 <I2C_SlaveReceive_BTF>
      }
 8003394:	e770      	b.n	8003278 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Slave_STOPF(hi2c);
 8003396:	4620      	mov	r0, r4
 8003398:	f7ff fe88 	bl	80030ac <I2C_Slave_STOPF>
 800339c:	e76c      	b.n	8003278 <HAL_I2C_EV_IRQHandler+0x40>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800339e:	f013 0f80 	tst.w	r3, #128	; 0x80
 80033a2:	d005      	beq.n	80033b0 <HAL_I2C_EV_IRQHandler+0x178>
 80033a4:	f415 6f80 	tst.w	r5, #1024	; 0x400
 80033a8:	d002      	beq.n	80033b0 <HAL_I2C_EV_IRQHandler+0x178>
 80033aa:	f013 0f04 	tst.w	r3, #4
 80033ae:	d00b      	beq.n	80033c8 <HAL_I2C_EV_IRQHandler+0x190>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033b0:	f013 0f04 	tst.w	r3, #4
 80033b4:	f43f af60 	beq.w	8003278 <HAL_I2C_EV_IRQHandler+0x40>
 80033b8:	f415 7f00 	tst.w	r5, #512	; 0x200
 80033bc:	f43f af5c 	beq.w	8003278 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_BTF(hi2c);
 80033c0:	4620      	mov	r0, r4
 80033c2:	f7fe fe91 	bl	80020e8 <I2C_SlaveTransmit_BTF>
 80033c6:	e757      	b.n	8003278 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_TXE(hi2c);
 80033c8:	4620      	mov	r0, r4
 80033ca:	f7ff fa56 	bl	800287a <I2C_SlaveTransmit_TXE>
 80033ce:	e753      	b.n	8003278 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_RXNE(hi2c);
 80033d0:	4620      	mov	r0, r4
 80033d2:	f7ff fa79 	bl	80028c8 <I2C_SlaveReceive_RXNE>
 80033d6:	e74f      	b.n	8003278 <HAL_I2C_EV_IRQHandler+0x40>

080033d8 <HAL_I2C_ER_IRQHandler>:
{
 80033d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033da:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80033dc:	6803      	ldr	r3, [r0, #0]
 80033de:	695d      	ldr	r5, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80033e0:	685f      	ldr	r7, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033e2:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80033e6:	b2d2      	uxtb	r2, r2
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80033e8:	f415 7f80 	tst.w	r5, #256	; 0x100
 80033ec:	d007      	beq.n	80033fe <HAL_I2C_ER_IRQHandler+0x26>
 80033ee:	f417 7f80 	tst.w	r7, #256	; 0x100
 80033f2:	d03c      	beq.n	800346e <HAL_I2C_ER_IRQHandler+0x96>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80033f4:	f46f 7180 	mvn.w	r1, #256	; 0x100
 80033f8:	6159      	str	r1, [r3, #20]
    error |= HAL_I2C_ERROR_BERR;
 80033fa:	2601      	movs	r6, #1
 80033fc:	e000      	b.n	8003400 <HAL_I2C_ER_IRQHandler+0x28>
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80033fe:	2600      	movs	r6, #0
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003400:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003404:	d008      	beq.n	8003418 <HAL_I2C_ER_IRQHandler+0x40>
 8003406:	f417 7f80 	tst.w	r7, #256	; 0x100
 800340a:	d005      	beq.n	8003418 <HAL_I2C_ER_IRQHandler+0x40>
    error |= HAL_I2C_ERROR_ARLO;
 800340c:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003410:	6823      	ldr	r3, [r4, #0]
 8003412:	f46f 7100 	mvn.w	r1, #512	; 0x200
 8003416:	6159      	str	r1, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003418:	f415 6f80 	tst.w	r5, #1024	; 0x400
 800341c:	d019      	beq.n	8003452 <HAL_I2C_ER_IRQHandler+0x7a>
 800341e:	f417 7f80 	tst.w	r7, #256	; 0x100
 8003422:	d016      	beq.n	8003452 <HAL_I2C_ER_IRQHandler+0x7a>
    tmp2 = hi2c->XferCount;
 8003424:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003426:	b299      	uxth	r1, r3
    tmp3 = hi2c->State;
 8003428:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800342c:	b2db      	uxtb	r3, r3
    tmp4 = hi2c->PreviousState;
 800342e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003430:	2a20      	cmp	r2, #32
 8003432:	d01e      	beq.n	8003472 <HAL_I2C_ER_IRQHandler+0x9a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003434:	6823      	ldr	r3, [r4, #0]
 8003436:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 800343a:	6159      	str	r1, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 800343c:	f046 0604 	orr.w	r6, r6, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003440:	2a10      	cmp	r2, #16
 8003442:	d001      	beq.n	8003448 <HAL_I2C_ER_IRQHandler+0x70>
 8003444:	2a40      	cmp	r2, #64	; 0x40
 8003446:	d104      	bne.n	8003452 <HAL_I2C_ER_IRQHandler+0x7a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003448:	6822      	ldr	r2, [r4, #0]
 800344a:	6813      	ldr	r3, [r2, #0]
 800344c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003450:	6013      	str	r3, [r2, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003452:	f415 6f00 	tst.w	r5, #2048	; 0x800
 8003456:	d008      	beq.n	800346a <HAL_I2C_ER_IRQHandler+0x92>
 8003458:	f417 7f80 	tst.w	r7, #256	; 0x100
 800345c:	d005      	beq.n	800346a <HAL_I2C_ER_IRQHandler+0x92>
    error |= HAL_I2C_ERROR_OVR;
 800345e:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003462:	6823      	ldr	r3, [r4, #0]
 8003464:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003468:	615a      	str	r2, [r3, #20]
  if (error != HAL_I2C_ERROR_NONE)
 800346a:	b986      	cbnz	r6, 800348e <HAL_I2C_ER_IRQHandler+0xb6>
}
 800346c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800346e:	2600      	movs	r6, #0
 8003470:	e7c6      	b.n	8003400 <HAL_I2C_ER_IRQHandler+0x28>
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003472:	2900      	cmp	r1, #0
 8003474:	d1de      	bne.n	8003434 <HAL_I2C_ER_IRQHandler+0x5c>
 8003476:	2b21      	cmp	r3, #33	; 0x21
 8003478:	d005      	beq.n	8003486 <HAL_I2C_ER_IRQHandler+0xae>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800347a:	2b29      	cmp	r3, #41	; 0x29
 800347c:	d003      	beq.n	8003486 <HAL_I2C_ER_IRQHandler+0xae>
 800347e:	2b28      	cmp	r3, #40	; 0x28
 8003480:	d1d8      	bne.n	8003434 <HAL_I2C_ER_IRQHandler+0x5c>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003482:	2821      	cmp	r0, #33	; 0x21
 8003484:	d1d6      	bne.n	8003434 <HAL_I2C_ER_IRQHandler+0x5c>
      I2C_Slave_AF(hi2c);
 8003486:	4620      	mov	r0, r4
 8003488:	f7ff fa74 	bl	8002974 <I2C_Slave_AF>
 800348c:	e7e1      	b.n	8003452 <HAL_I2C_ER_IRQHandler+0x7a>
    hi2c->ErrorCode |= error;
 800348e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003490:	431e      	orrs	r6, r3
 8003492:	6426      	str	r6, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 8003494:	4620      	mov	r0, r4
 8003496:	f7ff fd4d 	bl	8002f34 <I2C_ITError>
}
 800349a:	e7e7      	b.n	800346c <HAL_I2C_ER_IRQHandler+0x94>

0800349c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800349c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034a0:	b082      	sub	sp, #8
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034a2:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 80034a6:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80034aa:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80034ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d855      	bhi.n	8003562 <PCD_WriteEmptyTxFifo+0xc6>
 80034b6:	4607      	mov	r7, r0
 80034b8:	460c      	mov	r4, r1
 80034ba:	46c1      	mov	r9, r8
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 80034bc:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 80034be:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 80034c2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80034c6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d300      	bcc.n	80034ce <PCD_WriteEmptyTxFifo+0x32>
  len = ep->xfer_len - ep->xfer_count;
 80034cc:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 80034ce:	f102 0a03 	add.w	sl, r2, #3
 80034d2:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034d6:	e015      	b.n	8003504 <PCD_WriteEmptyTxFifo+0x68>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 80034d8:	f106 0a03 	add.w	sl, r6, #3
 80034dc:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80034e0:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 80034e4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80034e8:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80034ea:	7c3b      	ldrb	r3, [r7, #16]
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	b2b3      	uxth	r3, r6
 80034f0:	b2e2      	uxtb	r2, r4
 80034f2:	4640      	mov	r0, r8
 80034f4:	f003 fcfa 	bl	8006eec <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 80034f8:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80034fa:	4433      	add	r3, r6
 80034fc:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 80034fe:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8003500:	441e      	add	r6, r3
 8003502:	656e      	str	r6, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003504:	eb09 1344 	add.w	r3, r9, r4, lsl #5
 8003508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	b29b      	uxth	r3, r3
 8003510:	4553      	cmp	r3, sl
 8003512:	d312      	bcc.n	800353a <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003514:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8003518:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 800351c:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800351e:	6d13      	ldr	r3, [r2, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003520:	4299      	cmp	r1, r3
 8003522:	d20a      	bcs.n	800353a <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003524:	b14b      	cbz	r3, 800353a <PCD_WriteEmptyTxFifo+0x9e>
    len = ep->xfer_len - ep->xfer_count;
 8003526:	1a5b      	subs	r3, r3, r1
    if (len > ep->maxpacket)
 8003528:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800352c:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8003530:	6c56      	ldr	r6, [r2, #68]	; 0x44
 8003532:	429e      	cmp	r6, r3
 8003534:	d3d0      	bcc.n	80034d8 <PCD_WriteEmptyTxFifo+0x3c>
    len = ep->xfer_len - ep->xfer_count;
 8003536:	461e      	mov	r6, r3
 8003538:	e7ce      	b.n	80034d8 <PCD_WriteEmptyTxFifo+0x3c>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800353a:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 800353e:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 8003542:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003546:	429a      	cmp	r2, r3
 8003548:	d80f      	bhi.n	800356a <PCD_WriteEmptyTxFifo+0xce>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800354a:	f004 040f 	and.w	r4, r4, #15
 800354e:	2301      	movs	r3, #1
 8003550:	40a3      	lsls	r3, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003552:	f8d8 4834 	ldr.w	r4, [r8, #2100]	; 0x834
 8003556:	ea24 0403 	bic.w	r4, r4, r3
 800355a:	f8c8 4834 	str.w	r4, [r8, #2100]	; 0x834
  }

  return HAL_OK;
 800355e:	2000      	movs	r0, #0
 8003560:	e000      	b.n	8003564 <PCD_WriteEmptyTxFifo+0xc8>
    return HAL_ERROR;
 8003562:	2001      	movs	r0, #1
}
 8003564:	b002      	add	sp, #8
 8003566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return HAL_OK;
 800356a:	2000      	movs	r0, #0
 800356c:	e7fa      	b.n	8003564 <PCD_WriteEmptyTxFifo+0xc8>

0800356e <HAL_PCD_Init>:
{
 800356e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003570:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8003572:	2800      	cmp	r0, #0
 8003574:	f000 808c 	beq.w	8003690 <HAL_PCD_Init+0x122>
 8003578:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 800357a:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800357c:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8003580:	b32b      	cbz	r3, 80035ce <HAL_PCD_Init+0x60>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8003582:	2303      	movs	r3, #3
 8003584:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003588:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800358a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800358e:	d101      	bne.n	8003594 <HAL_PCD_Init+0x26>
    hpcd->Init.dma_enable = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	612b      	str	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 8003594:	6828      	ldr	r0, [r5, #0]
 8003596:	f003 fa49 	bl	8006a2c <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800359a:	462c      	mov	r4, r5
 800359c:	f854 7b10 	ldr.w	r7, [r4], #16
 80035a0:	466e      	mov	r6, sp
 80035a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035a4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80035a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035a8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80035aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035ae:	e886 0003 	stmia.w	r6, {r0, r1}
 80035b2:	1d2b      	adds	r3, r5, #4
 80035b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035b6:	4638      	mov	r0, r7
 80035b8:	f003 f97a 	bl	80068b0 <USB_CoreInit>
 80035bc:	4604      	mov	r4, r0
 80035be:	b158      	cbz	r0, 80035d8 <HAL_PCD_Init+0x6a>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035c0:	2302      	movs	r3, #2
 80035c2:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
    return HAL_ERROR;
 80035c6:	2401      	movs	r4, #1
}
 80035c8:	4620      	mov	r0, r4
 80035ca:	b00b      	add	sp, #44	; 0x2c
 80035cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80035ce:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 80035d2:	f008 f861 	bl	800b698 <HAL_PCD_MspInit>
 80035d6:	e7d4      	b.n	8003582 <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80035d8:	2100      	movs	r1, #0
 80035da:	6828      	ldr	r0, [r5, #0]
 80035dc:	f003 fe88 	bl	80072f0 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035e0:	4623      	mov	r3, r4
 80035e2:	e016      	b.n	8003612 <HAL_PCD_Init+0xa4>
    hpcd->IN_ep[i].is_in = 1U;
 80035e4:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 80035e8:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80035ec:	2101      	movs	r1, #1
 80035ee:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 80035f2:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035f6:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035fa:	2100      	movs	r1, #0
 80035fc:	f882 103f 	strb.w	r1, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8003600:	6451      	str	r1, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003602:	6491      	str	r1, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8003604:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8003608:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800360c:	6511      	str	r1, [r2, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800360e:	3301      	adds	r3, #1
 8003610:	b2db      	uxtb	r3, r3
 8003612:	6869      	ldr	r1, [r5, #4]
 8003614:	428b      	cmp	r3, r1
 8003616:	d3e5      	bcc.n	80035e4 <HAL_PCD_Init+0x76>
 8003618:	e016      	b.n	8003648 <HAL_PCD_Init+0xda>
    hpcd->OUT_ep[i].is_in = 0U;
 800361a:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800361e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003622:	2200      	movs	r2, #0
 8003624:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8003628:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800362c:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003630:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003634:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003638:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800363c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003640:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003644:	3401      	adds	r4, #1
 8003646:	b2e4      	uxtb	r4, r4
 8003648:	42a1      	cmp	r1, r4
 800364a:	d8e6      	bhi.n	800361a <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800364c:	462c      	mov	r4, r5
 800364e:	f854 7b10 	ldr.w	r7, [r4], #16
 8003652:	466e      	mov	r6, sp
 8003654:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003656:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003658:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800365a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800365c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003660:	e886 0003 	stmia.w	r6, {r0, r1}
 8003664:	1d2b      	adds	r3, r5, #4
 8003666:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003668:	4638      	mov	r0, r7
 800366a:	f003 fa1b 	bl	8006aa4 <USB_DevInit>
 800366e:	4604      	mov	r4, r0
 8003670:	b120      	cbz	r0, 800367c <HAL_PCD_Init+0x10e>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003672:	2302      	movs	r3, #2
 8003674:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
    return HAL_ERROR;
 8003678:	2401      	movs	r4, #1
 800367a:	e7a5      	b.n	80035c8 <HAL_PCD_Init+0x5a>
  hpcd->USB_Address = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003682:	2301      	movs	r3, #1
 8003684:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8003688:	6828      	ldr	r0, [r5, #0]
 800368a:	f003 fdee 	bl	800726a <USB_DevDisconnect>
  return HAL_OK;
 800368e:	e79b      	b.n	80035c8 <HAL_PCD_Init+0x5a>
    return HAL_ERROR;
 8003690:	2401      	movs	r4, #1
 8003692:	e799      	b.n	80035c8 <HAL_PCD_Init+0x5a>

08003694 <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003694:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hpcd);
 8003696:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800369a:	2b01      	cmp	r3, #1
 800369c:	d019      	beq.n	80036d2 <HAL_PCD_Start+0x3e>
{
 800369e:	b510      	push	{r4, lr}
 80036a0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80036a2:	2301      	movs	r3, #1
 80036a4:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80036a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d009      	beq.n	80036c2 <HAL_PCD_Start+0x2e>
  __HAL_PCD_ENABLE(hpcd);
 80036ae:	6820      	ldr	r0, [r4, #0]
 80036b0:	f003 f9b6 	bl	8006a20 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80036b4:	6820      	ldr	r0, [r4, #0]
 80036b6:	f003 fdca 	bl	800724e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80036ba:	2000      	movs	r0, #0
 80036bc:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80036c0:	bd10      	pop	{r4, pc}
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80036c2:	6983      	ldr	r3, [r0, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d0f2      	beq.n	80036ae <HAL_PCD_Start+0x1a>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036c8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80036ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ce:	6393      	str	r3, [r2, #56]	; 0x38
 80036d0:	e7ed      	b.n	80036ae <HAL_PCD_Start+0x1a>
  __HAL_LOCK(hpcd);
 80036d2:	2002      	movs	r0, #2
}
 80036d4:	4770      	bx	lr
	...

080036d8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036d8:	b570      	push	{r4, r5, r6, lr}
 80036da:	4604      	mov	r4, r0
 80036dc:	460d      	mov	r5, r1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036de:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80036e0:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036e2:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80036e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ea:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 80036ec:	6921      	ldr	r1, [r4, #16]
 80036ee:	2901      	cmp	r1, #1
 80036f0:	d011      	beq.n	8003716 <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80036f2:	4935      	ldr	r1, [pc, #212]	; (80037c8 <PCD_EP_OutXfrComplete_int+0xf0>)
 80036f4:	428e      	cmp	r6, r1
 80036f6:	d050      	beq.n	800379a <PCD_EP_OutXfrComplete_int+0xc2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80036f8:	b93d      	cbnz	r5, 800370a <PCD_EP_OutXfrComplete_int+0x32>
 80036fa:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 80036fe:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003702:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003706:	2b00      	cmp	r3, #0
 8003708:	d058      	beq.n	80037bc <PCD_EP_OutXfrComplete_int+0xe4>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800370a:	b2e9      	uxtb	r1, r5
 800370c:	4620      	mov	r0, r4
 800370e:	f008 f80f 	bl	800b730 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 8003712:	2000      	movs	r0, #0
 8003714:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003716:	f012 0f08 	tst.w	r2, #8
 800371a:	d009      	beq.n	8003730 <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800371c:	492b      	ldr	r1, [pc, #172]	; (80037cc <PCD_EP_OutXfrComplete_int+0xf4>)
 800371e:	428e      	cmp	r6, r1
 8003720:	d9f7      	bls.n	8003712 <PCD_EP_OutXfrComplete_int+0x3a>
 8003722:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8003726:	d0f4      	beq.n	8003712 <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003728:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800372c:	609a      	str	r2, [r3, #8]
 800372e:	e7f0      	b.n	8003712 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003730:	f012 0f20 	tst.w	r2, #32
 8003734:	d002      	beq.n	800373c <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003736:	2220      	movs	r2, #32
 8003738:	609a      	str	r2, [r3, #8]
 800373a:	e7ea      	b.n	8003712 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800373c:	f012 0f28 	tst.w	r2, #40	; 0x28
 8003740:	d1e7      	bne.n	8003712 <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003742:	4922      	ldr	r1, [pc, #136]	; (80037cc <PCD_EP_OutXfrComplete_int+0xf4>)
 8003744:	428e      	cmp	r6, r1
 8003746:	d906      	bls.n	8003756 <PCD_EP_OutXfrComplete_int+0x7e>
 8003748:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800374c:	d003      	beq.n	8003756 <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800374e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003752:	609a      	str	r2, [r3, #8]
 8003754:	e7dd      	b.n	8003712 <PCD_EP_OutXfrComplete_int+0x3a>
          hpcd->OUT_ep[epnum].maxpacket -
 8003756:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 800375a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800375e:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003768:	1ac9      	subs	r1, r1, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800376a:	f8c2 1214 	str.w	r1, [r2, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800376e:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 8003772:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 8003776:	440b      	add	r3, r1
 8003778:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800377c:	b915      	cbnz	r5, 8003784 <PCD_EP_OutXfrComplete_int+0xac>
 800377e:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8003782:	b123      	cbz	r3, 800378e <PCD_EP_OutXfrComplete_int+0xb6>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003784:	b2e9      	uxtb	r1, r5
 8003786:	4620      	mov	r0, r4
 8003788:	f007 ffd2 	bl	800b730 <HAL_PCD_DataOutStageCallback>
 800378c:	e7c1      	b.n	8003712 <PCD_EP_OutXfrComplete_int+0x3a>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800378e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8003792:	2101      	movs	r1, #1
 8003794:	f003 fdee 	bl	8007374 <USB_EP0_OutStart>
 8003798:	e7f4      	b.n	8003784 <PCD_EP_OutXfrComplete_int+0xac>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800379a:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800379e:	d003      	beq.n	80037a8 <PCD_EP_OutXfrComplete_int+0xd0>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80037a4:	609a      	str	r2, [r3, #8]
 80037a6:	e7b4      	b.n	8003712 <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80037a8:	f012 0f20 	tst.w	r2, #32
 80037ac:	d001      	beq.n	80037b2 <PCD_EP_OutXfrComplete_int+0xda>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037ae:	2220      	movs	r2, #32
 80037b0:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037b2:	b2e9      	uxtb	r1, r5
 80037b4:	4620      	mov	r0, r4
 80037b6:	f007 ffbb 	bl	800b730 <HAL_PCD_DataOutStageCallback>
 80037ba:	e7aa      	b.n	8003712 <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80037bc:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80037c0:	2100      	movs	r1, #0
 80037c2:	f003 fdd7 	bl	8007374 <USB_EP0_OutStart>
 80037c6:	e7a0      	b.n	800370a <PCD_EP_OutXfrComplete_int+0x32>
 80037c8:	4f54310a 	.word	0x4f54310a
 80037cc:	4f54300a 	.word	0x4f54300a

080037d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037d0:	b538      	push	{r3, r4, r5, lr}
 80037d2:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037d4:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80037d6:	6c1d      	ldr	r5, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037d8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80037dc:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	; 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037e0:	4a0e      	ldr	r2, [pc, #56]	; (800381c <PCD_EP_OutSetupPacket_int+0x4c>)
 80037e2:	4295      	cmp	r5, r2
 80037e4:	d907      	bls.n	80037f6 <PCD_EP_OutSetupPacket_int+0x26>
 80037e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ea:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 80037ee:	d002      	beq.n	80037f6 <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80037f4:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80037f6:	4620      	mov	r0, r4
 80037f8:	f007 ff92 	bl	800b720 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80037fc:	4b07      	ldr	r3, [pc, #28]	; (800381c <PCD_EP_OutSetupPacket_int+0x4c>)
 80037fe:	429d      	cmp	r5, r3
 8003800:	d902      	bls.n	8003808 <PCD_EP_OutSetupPacket_int+0x38>
 8003802:	6923      	ldr	r3, [r4, #16]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d001      	beq.n	800380c <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 8003808:	2000      	movs	r0, #0
 800380a:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800380c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8003810:	2101      	movs	r1, #1
 8003812:	6820      	ldr	r0, [r4, #0]
 8003814:	f003 fdae 	bl	8007374 <USB_EP0_OutStart>
 8003818:	e7f6      	b.n	8003808 <PCD_EP_OutSetupPacket_int+0x38>
 800381a:	bf00      	nop
 800381c:	4f54300a 	.word	0x4f54300a

08003820 <HAL_PCD_IRQHandler>:
{
 8003820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003824:	b083      	sub	sp, #12
 8003826:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003828:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800382a:	4628      	mov	r0, r5
 800382c:	f003 fd5c 	bl	80072e8 <USB_GetMode>
 8003830:	b110      	cbz	r0, 8003838 <HAL_PCD_IRQHandler+0x18>
}
 8003832:	b003      	add	sp, #12
 8003834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003838:	462f      	mov	r7, r5
 800383a:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800383c:	6820      	ldr	r0, [r4, #0]
 800383e:	f003 fd22 	bl	8007286 <USB_ReadInterrupts>
 8003842:	2800      	cmp	r0, #0
 8003844:	d0f5      	beq.n	8003832 <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003846:	6820      	ldr	r0, [r4, #0]
 8003848:	f003 fd1d 	bl	8007286 <USB_ReadInterrupts>
 800384c:	f010 0f02 	tst.w	r0, #2
 8003850:	d004      	beq.n	800385c <HAL_PCD_IRQHandler+0x3c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003852:	6822      	ldr	r2, [r4, #0]
 8003854:	6953      	ldr	r3, [r2, #20]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800385c:	6820      	ldr	r0, [r4, #0]
 800385e:	f003 fd12 	bl	8007286 <USB_ReadInterrupts>
 8003862:	f010 0f10 	tst.w	r0, #16
 8003866:	d014      	beq.n	8003892 <HAL_PCD_IRQHandler+0x72>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003868:	6822      	ldr	r2, [r4, #0]
 800386a:	6993      	ldr	r3, [r2, #24]
 800386c:	f023 0310 	bic.w	r3, r3, #16
 8003870:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 8003872:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003876:	f008 090f 	and.w	r9, r8, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800387a:	f3c8 4343 	ubfx	r3, r8, #17, #4
 800387e:	2b02      	cmp	r3, #2
 8003880:	d068      	beq.n	8003954 <HAL_PCD_IRQHandler+0x134>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003882:	2b06      	cmp	r3, #6
 8003884:	f000 808d 	beq.w	80039a2 <HAL_PCD_IRQHandler+0x182>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003888:	6822      	ldr	r2, [r4, #0]
 800388a:	6993      	ldr	r3, [r2, #24]
 800388c:	f043 0310 	orr.w	r3, r3, #16
 8003890:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003892:	6820      	ldr	r0, [r4, #0]
 8003894:	f003 fcf7 	bl	8007286 <USB_ReadInterrupts>
 8003898:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 800389c:	f040 8093 	bne.w	80039c6 <HAL_PCD_IRQHandler+0x1a6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80038a0:	6820      	ldr	r0, [r4, #0]
 80038a2:	f003 fcf0 	bl	8007286 <USB_ReadInterrupts>
 80038a6:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 80038aa:	f040 80d7 	bne.w	8003a5c <HAL_PCD_IRQHandler+0x23c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80038ae:	6820      	ldr	r0, [r4, #0]
 80038b0:	f003 fce9 	bl	8007286 <USB_ReadInterrupts>
 80038b4:	2800      	cmp	r0, #0
 80038b6:	f2c0 8143 	blt.w	8003b40 <HAL_PCD_IRQHandler+0x320>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80038ba:	6820      	ldr	r0, [r4, #0]
 80038bc:	f003 fce3 	bl	8007286 <USB_ReadInterrupts>
 80038c0:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80038c4:	d00a      	beq.n	80038dc <HAL_PCD_IRQHandler+0xbc>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80038c6:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 80038ca:	f013 0f01 	tst.w	r3, #1
 80038ce:	f040 8151 	bne.w	8003b74 <HAL_PCD_IRQHandler+0x354>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80038d2:	6822      	ldr	r2, [r4, #0]
 80038d4:	6953      	ldr	r3, [r2, #20]
 80038d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038da:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80038dc:	6820      	ldr	r0, [r4, #0]
 80038de:	f003 fcd2 	bl	8007286 <USB_ReadInterrupts>
 80038e2:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80038e6:	f040 8149 	bne.w	8003b7c <HAL_PCD_IRQHandler+0x35c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80038ea:	6820      	ldr	r0, [r4, #0]
 80038ec:	f003 fccb 	bl	8007286 <USB_ReadInterrupts>
 80038f0:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80038f4:	f040 81a8 	bne.w	8003c48 <HAL_PCD_IRQHandler+0x428>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80038f8:	6820      	ldr	r0, [r4, #0]
 80038fa:	f003 fcc4 	bl	8007286 <USB_ReadInterrupts>
 80038fe:	f010 0f08 	tst.w	r0, #8
 8003902:	f040 81b9 	bne.w	8003c78 <HAL_PCD_IRQHandler+0x458>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003906:	6820      	ldr	r0, [r4, #0]
 8003908:	f003 fcbd 	bl	8007286 <USB_ReadInterrupts>
 800390c:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8003910:	f040 81bb 	bne.w	8003c8a <HAL_PCD_IRQHandler+0x46a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003914:	6820      	ldr	r0, [r4, #0]
 8003916:	f003 fcb6 	bl	8007286 <USB_ReadInterrupts>
 800391a:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 800391e:	f040 81be 	bne.w	8003c9e <HAL_PCD_IRQHandler+0x47e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003922:	6820      	ldr	r0, [r4, #0]
 8003924:	f003 fcaf 	bl	8007286 <USB_ReadInterrupts>
 8003928:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800392c:	f040 81c1 	bne.w	8003cb2 <HAL_PCD_IRQHandler+0x492>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003930:	6820      	ldr	r0, [r4, #0]
 8003932:	f003 fca8 	bl	8007286 <USB_ReadInterrupts>
 8003936:	f010 0f04 	tst.w	r0, #4
 800393a:	f43f af7a 	beq.w	8003832 <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 800393e:	6823      	ldr	r3, [r4, #0]
 8003940:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003942:	f015 0f04 	tst.w	r5, #4
 8003946:	f040 81bd 	bne.w	8003cc4 <HAL_PCD_IRQHandler+0x4a4>
      hpcd->Instance->GOTGINT |= temp;
 800394a:	6822      	ldr	r2, [r4, #0]
 800394c:	6853      	ldr	r3, [r2, #4]
 800394e:	432b      	orrs	r3, r5
 8003950:	6053      	str	r3, [r2, #4]
 8003952:	e76e      	b.n	8003832 <HAL_PCD_IRQHandler+0x12>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003954:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003958:	ea18 0f03 	tst.w	r8, r3
 800395c:	d094      	beq.n	8003888 <HAL_PCD_IRQHandler+0x68>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800395e:	ea4f 1b18 	mov.w	fp, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003962:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003966:	9301      	str	r3, [sp, #4]
 8003968:	ebc9 0ac9 	rsb	sl, r9, r9, lsl #3
 800396c:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
 8003970:	f3c8 120a 	ubfx	r2, r8, #4, #11
 8003974:	f8da 1208 	ldr.w	r1, [sl, #520]	; 0x208
 8003978:	4628      	mov	r0, r5
 800397a:	f003 fbd7 	bl	800712c <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800397e:	f3cb 0b0a 	ubfx	fp, fp, #0, #11
 8003982:	f8da 3208 	ldr.w	r3, [sl, #520]	; 0x208
 8003986:	445b      	add	r3, fp
 8003988:	f8ca 3208 	str.w	r3, [sl, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800398c:	9b01      	ldr	r3, [sp, #4]
 800398e:	eba3 0309 	sub.w	r3, r3, r9
 8003992:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003996:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800399a:	445b      	add	r3, fp
 800399c:	f8ca 3214 	str.w	r3, [sl, #532]	; 0x214
 80039a0:	e772      	b.n	8003888 <HAL_PCD_IRQHandler+0x68>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80039a2:	2208      	movs	r2, #8
 80039a4:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80039a8:	4628      	mov	r0, r5
 80039aa:	f003 fbbf 	bl	800712c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039ae:	f3c8 180a 	ubfx	r8, r8, #4, #11
 80039b2:	ebc9 02c9 	rsb	r2, r9, r9, lsl #3
 80039b6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80039ba:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 80039be:	4443      	add	r3, r8
 80039c0:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 80039c4:	e760      	b.n	8003888 <HAL_PCD_IRQHandler+0x68>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80039c6:	6820      	ldr	r0, [r4, #0]
 80039c8:	f003 fc61 	bl	800728e <USB_ReadDevAllOutEpInterrupt>
 80039cc:	4680      	mov	r8, r0
      epnum = 0U;
 80039ce:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 80039d0:	e017      	b.n	8003a02 <HAL_PCD_IRQHandler+0x1e2>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80039d2:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80039d6:	2201      	movs	r2, #1
 80039d8:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80039dc:	4649      	mov	r1, r9
 80039de:	4620      	mov	r0, r4
 80039e0:	f7ff fe7a 	bl	80036d8 <PCD_EP_OutXfrComplete_int>
 80039e4:	e01d      	b.n	8003a22 <HAL_PCD_IRQHandler+0x202>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80039e6:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80039ea:	2208      	movs	r2, #8
 80039ec:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80039f0:	4649      	mov	r1, r9
 80039f2:	4620      	mov	r0, r4
 80039f4:	f7ff feec 	bl	80037d0 <PCD_EP_OutSetupPacket_int>
 80039f8:	e016      	b.n	8003a28 <HAL_PCD_IRQHandler+0x208>
        epnum++;
 80039fa:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 80039fe:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8003a02:	f1b8 0f00 	cmp.w	r8, #0
 8003a06:	f43f af4b 	beq.w	80038a0 <HAL_PCD_IRQHandler+0x80>
        if ((ep_intr & 0x1U) != 0U)
 8003a0a:	f018 0f01 	tst.w	r8, #1
 8003a0e:	d0f4      	beq.n	80039fa <HAL_PCD_IRQHandler+0x1da>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a10:	fa5f f189 	uxtb.w	r1, r9
 8003a14:	6820      	ldr	r0, [r4, #0]
 8003a16:	f003 fc4a 	bl	80072ae <USB_ReadDevOutEPInterrupt>
 8003a1a:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a1c:	f010 0f01 	tst.w	r0, #1
 8003a20:	d1d7      	bne.n	80039d2 <HAL_PCD_IRQHandler+0x1b2>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003a22:	f01a 0f08 	tst.w	sl, #8
 8003a26:	d1de      	bne.n	80039e6 <HAL_PCD_IRQHandler+0x1c6>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003a28:	f01a 0f10 	tst.w	sl, #16
 8003a2c:	d004      	beq.n	8003a38 <HAL_PCD_IRQHandler+0x218>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a2e:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8003a32:	2210      	movs	r2, #16
 8003a34:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a38:	f01a 0f20 	tst.w	sl, #32
 8003a3c:	d004      	beq.n	8003a48 <HAL_PCD_IRQHandler+0x228>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a3e:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8003a42:	2220      	movs	r2, #32
 8003a44:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003a48:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 8003a4c:	d0d5      	beq.n	80039fa <HAL_PCD_IRQHandler+0x1da>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003a4e:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8003a52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a56:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
 8003a5a:	e7ce      	b.n	80039fa <HAL_PCD_IRQHandler+0x1da>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003a5c:	6820      	ldr	r0, [r4, #0]
 8003a5e:	f003 fc1e 	bl	800729e <USB_ReadDevAllInEpInterrupt>
 8003a62:	4680      	mov	r8, r0
      epnum = 0U;
 8003a64:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8003a66:	e02a      	b.n	8003abe <HAL_PCD_IRQHandler+0x29e>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a68:	4659      	mov	r1, fp
 8003a6a:	4620      	mov	r0, r4
 8003a6c:	f007 fe6c 	bl	800b748 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a70:	f01a 0f08 	tst.w	sl, #8
 8003a74:	d004      	beq.n	8003a80 <HAL_PCD_IRQHandler+0x260>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a76:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8003a7a:	2208      	movs	r2, #8
 8003a7c:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a80:	f01a 0f10 	tst.w	sl, #16
 8003a84:	d004      	beq.n	8003a90 <HAL_PCD_IRQHandler+0x270>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003a86:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8003a8a:	2210      	movs	r2, #16
 8003a8c:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003a90:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8003a94:	d004      	beq.n	8003aa0 <HAL_PCD_IRQHandler+0x280>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003a96:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8003a9a:	2240      	movs	r2, #64	; 0x40
 8003a9c:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003aa0:	f01a 0f02 	tst.w	sl, #2
 8003aa4:	d004      	beq.n	8003ab0 <HAL_PCD_IRQHandler+0x290>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003aa6:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8003aaa:	2202      	movs	r2, #2
 8003aac:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003ab0:	f01a 0f80 	tst.w	sl, #128	; 0x80
 8003ab4:	d13f      	bne.n	8003b36 <HAL_PCD_IRQHandler+0x316>
        epnum++;
 8003ab6:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8003aba:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8003abe:	f1b8 0f00 	cmp.w	r8, #0
 8003ac2:	f43f aef4 	beq.w	80038ae <HAL_PCD_IRQHandler+0x8e>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003ac6:	f018 0f01 	tst.w	r8, #1
 8003aca:	d0f4      	beq.n	8003ab6 <HAL_PCD_IRQHandler+0x296>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003acc:	fa5f fb89 	uxtb.w	fp, r9
 8003ad0:	4659      	mov	r1, fp
 8003ad2:	6820      	ldr	r0, [r4, #0]
 8003ad4:	f003 fbf4 	bl	80072c0 <USB_ReadDevInEPInterrupt>
 8003ad8:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003ada:	f010 0f01 	tst.w	r0, #1
 8003ade:	d0c7      	beq.n	8003a70 <HAL_PCD_IRQHandler+0x250>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ae0:	f009 030f 	and.w	r3, r9, #15
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	fa01 f203 	lsl.w	r2, r1, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003aea:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8003aee:	ea23 0302 	bic.w	r3, r3, r2
 8003af2:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003af6:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8003afa:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
            if (hpcd->Init.dma_enable == 1U)
 8003afe:	6923      	ldr	r3, [r4, #16]
 8003b00:	428b      	cmp	r3, r1
 8003b02:	d1b1      	bne.n	8003a68 <HAL_PCD_IRQHandler+0x248>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003b04:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 8003b08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003b0c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003b0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b10:	440a      	add	r2, r1
 8003b12:	649a      	str	r2, [r3, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003b14:	f1b9 0f00 	cmp.w	r9, #0
 8003b18:	d1a6      	bne.n	8003a68 <HAL_PCD_IRQHandler+0x248>
 8003b1a:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 8003b1e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d19f      	bne.n	8003a68 <HAL_PCD_IRQHandler+0x248>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b28:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	6820      	ldr	r0, [r4, #0]
 8003b30:	f003 fc20 	bl	8007374 <USB_EP0_OutStart>
 8003b34:	e798      	b.n	8003a68 <HAL_PCD_IRQHandler+0x248>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003b36:	4649      	mov	r1, r9
 8003b38:	4620      	mov	r0, r4
 8003b3a:	f7ff fcaf 	bl	800349c <PCD_WriteEmptyTxFifo>
 8003b3e:	e7ba      	b.n	8003ab6 <HAL_PCD_IRQHandler+0x296>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b40:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8003b44:	f023 0301 	bic.w	r3, r3, #1
 8003b48:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8003b4c:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d008      	beq.n	8003b66 <HAL_PCD_IRQHandler+0x346>
        HAL_PCD_ResumeCallback(hpcd);
 8003b54:	4620      	mov	r0, r4
 8003b56:	f007 fe33 	bl	800b7c0 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b5a:	6822      	ldr	r2, [r4, #0]
 8003b5c:	6953      	ldr	r3, [r2, #20]
 8003b5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b62:	6153      	str	r3, [r2, #20]
 8003b64:	e6a9      	b.n	80038ba <HAL_PCD_IRQHandler+0x9a>
        hpcd->LPM_State = LPM_L0;
 8003b66:	2100      	movs	r1, #0
 8003b68:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b6c:	4620      	mov	r0, r4
 8003b6e:	f000 fa47 	bl	8004000 <HAL_PCDEx_LPM_Callback>
 8003b72:	e7f2      	b.n	8003b5a <HAL_PCD_IRQHandler+0x33a>
        HAL_PCD_SuspendCallback(hpcd);
 8003b74:	4620      	mov	r0, r4
 8003b76:	f007 fe0b 	bl	800b790 <HAL_PCD_SuspendCallback>
 8003b7a:	e6aa      	b.n	80038d2 <HAL_PCD_IRQHandler+0xb2>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b7c:	f505 6800 	add.w	r8, r5, #2048	; 0x800
 8003b80:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003b84:	f023 0301 	bic.w	r3, r3, #1
 8003b88:	f8c8 3004 	str.w	r3, [r8, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003b8c:	2110      	movs	r1, #16
 8003b8e:	6820      	ldr	r0, [r4, #0]
 8003b90:	f002 ff52 	bl	8006a38 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b94:	e020      	b.n	8003bd8 <HAL_PCD_IRQHandler+0x3b8>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003b96:	eb07 1346 	add.w	r3, r7, r6, lsl #5
 8003b9a:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8003b9e:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003ba2:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8003ba6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003baa:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003bae:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8003bb2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003bb6:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003bba:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003bbe:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8003bc2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003bc6:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003bca:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8003bce:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003bd2:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bd6:	3601      	adds	r6, #1
 8003bd8:	6863      	ldr	r3, [r4, #4]
 8003bda:	42b3      	cmp	r3, r6
 8003bdc:	d8db      	bhi.n	8003b96 <HAL_PCD_IRQHandler+0x376>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003bde:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8003be2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003be6:	f8c8 301c 	str.w	r3, [r8, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003bea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003bec:	b1eb      	cbz	r3, 8003c2a <HAL_PCD_IRQHandler+0x40a>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003bee:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 8003bf2:	f043 030b 	orr.w	r3, r3, #11
 8003bf6:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003bfa:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8003bfe:	f043 030b 	orr.w	r3, r3, #11
 8003c02:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003c06:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 8003c0a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003c0e:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c12:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8003c16:	7c21      	ldrb	r1, [r4, #16]
 8003c18:	6820      	ldr	r0, [r4, #0]
 8003c1a:	f003 fbab 	bl	8007374 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003c1e:	6822      	ldr	r2, [r4, #0]
 8003c20:	6953      	ldr	r3, [r2, #20]
 8003c22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c26:	6153      	str	r3, [r2, #20]
 8003c28:	e65f      	b.n	80038ea <HAL_PCD_IRQHandler+0xca>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003c2a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8003c2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c32:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003c36:	f8c8 3014 	str.w	r3, [r8, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003c3a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8003c3e:	f043 030b 	orr.w	r3, r3, #11
 8003c42:	f8c8 3010 	str.w	r3, [r8, #16]
 8003c46:	e7de      	b.n	8003c06 <HAL_PCD_IRQHandler+0x3e6>
      (void)USB_ActivateSetup(hpcd->Instance);
 8003c48:	6820      	ldr	r0, [r4, #0]
 8003c4a:	f003 fb82 	bl	8007352 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003c4e:	6820      	ldr	r0, [r4, #0]
 8003c50:	f002 fff4 	bl	8006c3c <USB_GetDevSpeed>
 8003c54:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c56:	6825      	ldr	r5, [r4, #0]
 8003c58:	f000 fcd4 	bl	8004604 <HAL_RCC_GetHCLKFreq>
 8003c5c:	4601      	mov	r1, r0
 8003c5e:	7b22      	ldrb	r2, [r4, #12]
 8003c60:	4628      	mov	r0, r5
 8003c62:	f002 fe6b 	bl	800693c <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8003c66:	4620      	mov	r0, r4
 8003c68:	f007 fd7f 	bl	800b76a <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003c6c:	6822      	ldr	r2, [r4, #0]
 8003c6e:	6953      	ldr	r3, [r2, #20]
 8003c70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c74:	6153      	str	r3, [r2, #20]
 8003c76:	e63f      	b.n	80038f8 <HAL_PCD_IRQHandler+0xd8>
      HAL_PCD_SOFCallback(hpcd);
 8003c78:	4620      	mov	r0, r4
 8003c7a:	f007 fd70 	bl	800b75e <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003c7e:	6822      	ldr	r2, [r4, #0]
 8003c80:	6953      	ldr	r3, [r2, #20]
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	6153      	str	r3, [r2, #20]
 8003c88:	e63d      	b.n	8003906 <HAL_PCD_IRQHandler+0xe6>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	f007 fda3 	bl	800b7d8 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003c92:	6822      	ldr	r2, [r4, #0]
 8003c94:	6953      	ldr	r3, [r2, #20]
 8003c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c9a:	6153      	str	r3, [r2, #20]
 8003c9c:	e63a      	b.n	8003914 <HAL_PCD_IRQHandler+0xf4>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	f007 fd93 	bl	800b7cc <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ca6:	6822      	ldr	r2, [r4, #0]
 8003ca8:	6953      	ldr	r3, [r2, #20]
 8003caa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cae:	6153      	str	r3, [r2, #20]
 8003cb0:	e637      	b.n	8003922 <HAL_PCD_IRQHandler+0x102>
      HAL_PCD_ConnectCallback(hpcd);
 8003cb2:	4620      	mov	r0, r4
 8003cb4:	f007 fd96 	bl	800b7e4 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003cb8:	6822      	ldr	r2, [r4, #0]
 8003cba:	6953      	ldr	r3, [r2, #20]
 8003cbc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003cc0:	6153      	str	r3, [r2, #20]
 8003cc2:	e635      	b.n	8003930 <HAL_PCD_IRQHandler+0x110>
        HAL_PCD_DisconnectCallback(hpcd);
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	f007 fd93 	bl	800b7f0 <HAL_PCD_DisconnectCallback>
 8003cca:	e63e      	b.n	800394a <HAL_PCD_IRQHandler+0x12a>

08003ccc <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8003ccc:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d00d      	beq.n	8003cf0 <HAL_PCD_SetAddress+0x24>
{
 8003cd4:	b510      	push	{r4, lr}
 8003cd6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003cd8:	2301      	movs	r3, #1
 8003cda:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003cde:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003ce2:	6800      	ldr	r0, [r0, #0]
 8003ce4:	f003 faa3 	bl	800722e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ce8:	2000      	movs	r0, #0
 8003cea:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8003cee:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003cf0:	2002      	movs	r0, #2
}
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_PCD_EP_Open>:
{
 8003cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf6:	4607      	mov	r7, r0
 8003cf8:	460c      	mov	r4, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8003cfa:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003cfe:	d127      	bne.n	8003d50 <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d00:	f001 050f 	and.w	r5, r1, #15
 8003d04:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 8003d08:	00b6      	lsls	r6, r6, #2
 8003d0a:	f506 76fc 	add.w	r6, r6, #504	; 0x1f8
 8003d0e:	4406      	add	r6, r0
 8003d10:	1d31      	adds	r1, r6, #4
    ep->is_in = 0U;
 8003d12:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 8003d16:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8003d1a:	2000      	movs	r0, #0
 8003d1c:	f885 01fd 	strb.w	r0, [r5, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d20:	f004 040f 	and.w	r4, r4, #15
 8003d24:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 8003d26:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8003d28:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8003d2a:	784a      	ldrb	r2, [r1, #1]
 8003d2c:	b102      	cbz	r2, 8003d30 <HAL_PCD_EP_Open+0x3c>
    ep->tx_fifo_num = ep->num;
 8003d2e:	80cc      	strh	r4, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d01d      	beq.n	8003d70 <HAL_PCD_EP_Open+0x7c>
  __HAL_LOCK(hpcd);
 8003d34:	f897 33bc 	ldrb.w	r3, [r7, #956]	; 0x3bc
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d01c      	beq.n	8003d76 <HAL_PCD_EP_Open+0x82>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	f887 33bc 	strb.w	r3, [r7, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003d42:	6838      	ldr	r0, [r7, #0]
 8003d44:	f002 ff8b 	bl	8006c5e <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d48:	2000      	movs	r0, #0
 8003d4a:	f887 03bc 	strb.w	r0, [r7, #956]	; 0x3bc
}
 8003d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d50:	f001 000f 	and.w	r0, r1, #15
 8003d54:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 8003d58:	0089      	lsls	r1, r1, #2
 8003d5a:	3138      	adds	r1, #56	; 0x38
 8003d5c:	4439      	add	r1, r7
 8003d5e:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8003d60:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8003d64:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8003d68:	2501      	movs	r5, #1
 8003d6a:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
 8003d6e:	e7d7      	b.n	8003d20 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	710b      	strb	r3, [r1, #4]
 8003d74:	e7de      	b.n	8003d34 <HAL_PCD_EP_Open+0x40>
  __HAL_LOCK(hpcd);
 8003d76:	2002      	movs	r0, #2
 8003d78:	e7e9      	b.n	8003d4e <HAL_PCD_EP_Open+0x5a>

08003d7a <HAL_PCD_EP_Close>:
{
 8003d7a:	b510      	push	{r4, lr}
 8003d7c:	4604      	mov	r4, r0
 8003d7e:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8003d80:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003d84:	d120      	bne.n	8003dc8 <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d86:	f001 000f 	and.w	r0, r1, #15
 8003d8a:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d94:	4423      	add	r3, r4
 8003d96:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 8003d98:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8003d9c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8003da0:	2300      	movs	r3, #0
 8003da2:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003da6:	f002 020f 	and.w	r2, r2, #15
 8003daa:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003dac:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d019      	beq.n	8003de8 <HAL_PCD_EP_Close+0x6e>
 8003db4:	2301      	movs	r3, #1
 8003db6:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003dba:	6820      	ldr	r0, [r4, #0]
 8003dbc:	f002 ff9a 	bl	8006cf4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003dc0:	2000      	movs	r0, #0
 8003dc2:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8003dc6:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dc8:	f001 000f 	and.w	r0, r1, #15
 8003dcc:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	3338      	adds	r3, #56	; 0x38
 8003dd4:	4423      	add	r3, r4
 8003dd6:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 8003dd8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8003ddc:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8003de0:	2301      	movs	r3, #1
 8003de2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8003de6:	e7de      	b.n	8003da6 <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 8003de8:	2002      	movs	r0, #2
 8003dea:	e7ec      	b.n	8003dc6 <HAL_PCD_EP_Close+0x4c>

08003dec <HAL_PCD_EP_Receive>:
{
 8003dec:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dee:	f001 040f 	and.w	r4, r1, #15
 8003df2:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8003df6:	0089      	lsls	r1, r1, #2
 8003df8:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8003dfc:	4401      	add	r1, r0
 8003dfe:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8003e00:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8003e04:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8003e08:	f8c5 2208 	str.w	r2, [r5, #520]	; 0x208
  ep->xfer_len = len;
 8003e0c:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
  ep->xfer_count = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
  ep->is_in = 0U;
 8003e16:	f885 31fd 	strb.w	r3, [r5, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e1a:	f885 41fc 	strb.w	r4, [r5, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 8003e1e:	6903      	ldr	r3, [r0, #16]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d006      	beq.n	8003e32 <HAL_PCD_EP_Receive+0x46>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e24:	b964      	cbnz	r4, 8003e40 <HAL_PCD_EP_Receive+0x54>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	6800      	ldr	r0, [r0, #0]
 8003e2a:	f002 ffd1 	bl	8006dd0 <USB_EP0StartXfer>
}
 8003e2e:	2000      	movs	r0, #0
 8003e30:	bd38      	pop	{r3, r4, r5, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8003e32:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8003e36:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8003e3a:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
 8003e3e:	e7f1      	b.n	8003e24 <HAL_PCD_EP_Receive+0x38>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	6800      	ldr	r0, [r0, #0]
 8003e44:	f003 f866 	bl	8006f14 <USB_EPStartXfer>
 8003e48:	e7f1      	b.n	8003e2e <HAL_PCD_EP_Receive+0x42>

08003e4a <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003e4a:	f001 010f 	and.w	r1, r1, #15
 8003e4e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8003e52:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8003e56:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8003e5a:	4770      	bx	lr

08003e5c <HAL_PCD_EP_Transmit>:
{
 8003e5c:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e5e:	f001 040f 	and.w	r4, r1, #15
 8003e62:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8003e66:	0089      	lsls	r1, r1, #2
 8003e68:	3138      	adds	r1, #56	; 0x38
 8003e6a:	4401      	add	r1, r0
 8003e6c:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8003e6e:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8003e72:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8003e76:	64aa      	str	r2, [r5, #72]	; 0x48
  ep->xfer_len = len;
 8003e78:	652b      	str	r3, [r5, #80]	; 0x50
  ep->xfer_count = 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	656b      	str	r3, [r5, #84]	; 0x54
  ep->is_in = 1U;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e84:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 8003e88:	6903      	ldr	r3, [r0, #16]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d006      	beq.n	8003e9c <HAL_PCD_EP_Transmit+0x40>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e8e:	b95c      	cbnz	r4, 8003ea8 <HAL_PCD_EP_Transmit+0x4c>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	6800      	ldr	r0, [r0, #0]
 8003e94:	f002 ff9c 	bl	8006dd0 <USB_EP0StartXfer>
}
 8003e98:	2000      	movs	r0, #0
 8003e9a:	bd38      	pop	{r3, r4, r5, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8003e9c:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8003ea0:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8003ea4:	64ea      	str	r2, [r5, #76]	; 0x4c
 8003ea6:	e7f2      	b.n	8003e8e <HAL_PCD_EP_Transmit+0x32>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	6800      	ldr	r0, [r0, #0]
 8003eac:	f003 f832 	bl	8006f14 <USB_EPStartXfer>
 8003eb0:	e7f2      	b.n	8003e98 <HAL_PCD_EP_Transmit+0x3c>

08003eb2 <HAL_PCD_EP_SetStall>:
{
 8003eb2:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003eb4:	f001 050f 	and.w	r5, r1, #15
 8003eb8:	6842      	ldr	r2, [r0, #4]
 8003eba:	4295      	cmp	r5, r2
 8003ebc:	d839      	bhi.n	8003f32 <HAL_PCD_EP_SetStall+0x80>
 8003ebe:	4604      	mov	r4, r0
 8003ec0:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8003ec2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003ec6:	d11f      	bne.n	8003f08 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 8003ec8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8003ecc:	0089      	lsls	r1, r1, #2
 8003ece:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8003ed2:	4401      	add	r1, r0
 8003ed4:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8003ed6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003eda:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ee8:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8003eea:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d021      	beq.n	8003f36 <HAL_PCD_EP_SetStall+0x84>
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ef8:	6820      	ldr	r0, [r4, #0]
 8003efa:	f003 f93d 	bl	8007178 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003efe:	b18d      	cbz	r5, 8003f24 <HAL_PCD_EP_SetStall+0x72>
  __HAL_UNLOCK(hpcd);
 8003f00:	2000      	movs	r0, #0
 8003f02:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8003f06:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f08:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
 8003f0c:	0089      	lsls	r1, r1, #2
 8003f0e:	3138      	adds	r1, #56	; 0x38
 8003f10:	4401      	add	r1, r0
 8003f12:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8003f14:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8003f18:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003f22:	e7df      	b.n	8003ee4 <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003f24:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8003f28:	7c21      	ldrb	r1, [r4, #16]
 8003f2a:	6820      	ldr	r0, [r4, #0]
 8003f2c:	f003 fa22 	bl	8007374 <USB_EP0_OutStart>
 8003f30:	e7e6      	b.n	8003f00 <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 8003f32:	2001      	movs	r0, #1
 8003f34:	e7e7      	b.n	8003f06 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 8003f36:	2002      	movs	r0, #2
 8003f38:	e7e5      	b.n	8003f06 <HAL_PCD_EP_SetStall+0x54>

08003f3a <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003f3a:	f001 030f 	and.w	r3, r1, #15
 8003f3e:	6842      	ldr	r2, [r0, #4]
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d831      	bhi.n	8003fa8 <HAL_PCD_EP_ClrStall+0x6e>
{
 8003f44:	b510      	push	{r4, lr}
 8003f46:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8003f48:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003f4c:	d11e      	bne.n	8003f8c <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f4e:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8003f52:	0089      	lsls	r1, r1, #2
 8003f54:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8003f58:	4401      	add	r1, r0
 8003f5a:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8003f5c:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8003f60:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003f64:	2000      	movs	r0, #0
 8003f66:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->is_stall = 0U;
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f6e:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003f70:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d019      	beq.n	8003fac <HAL_PCD_EP_ClrStall+0x72>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f7e:	6820      	ldr	r0, [r4, #0]
 8003f80:	f003 f927 	bl	80071d2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f84:	2000      	movs	r0, #0
 8003f86:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8003f8a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f8c:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8003f90:	0089      	lsls	r1, r1, #2
 8003f92:	3138      	adds	r1, #56	; 0x38
 8003f94:	4401      	add	r1, r0
 8003f96:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8003f98:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8003f9c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003fa0:	2001      	movs	r0, #1
 8003fa2:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
 8003fa6:	e7e0      	b.n	8003f6a <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 8003fa8:	2001      	movs	r0, #1
}
 8003faa:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8003fac:	2002      	movs	r0, #2
 8003fae:	e7ec      	b.n	8003f8a <HAL_PCD_EP_ClrStall+0x50>

08003fb0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003fb0:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003fb2:	6804      	ldr	r4, [r0, #0]
 8003fb4:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 8003fb6:	b919      	cbnz	r1, 8003fc0 <HAL_PCDEx_SetTxFiFo+0x10>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003fb8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8003fbc:	62a0      	str	r0, [r4, #40]	; 0x28
 8003fbe:	e018      	b.n	8003ff2 <HAL_PCDEx_SetTxFiFo+0x42>
 8003fc0:	460d      	mov	r5, r1
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003fc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003fc4:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003fc8:	2300      	movs	r3, #0
 8003fca:	1e69      	subs	r1, r5, #1
 8003fcc:	428b      	cmp	r3, r1
 8003fce:	d209      	bcs.n	8003fe4 <HAL_PCDEx_SetTxFiFo+0x34>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003fd0:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8003fd4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8003fd8:	6849      	ldr	r1, [r1, #4]
 8003fda:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003fde:	3301      	adds	r3, #1
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	e7f2      	b.n	8003fca <HAL_PCDEx_SetTxFiFo+0x1a>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003fe4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8003fe8:	f105 013f 	add.w	r1, r5, #63	; 0x3f
 8003fec:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8003ff0:	6048      	str	r0, [r1, #4]
  }

  return HAL_OK;
}
 8003ff2:	2000      	movs	r0, #0
 8003ff4:	bc30      	pop	{r4, r5}
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8003ff8:	6803      	ldr	r3, [r0, #0]
 8003ffa:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	4770      	bx	lr

08004000 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004000:	4770      	bx	lr
	...

08004004 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004004:	2800      	cmp	r0, #0
 8004006:	f000 81dd 	beq.w	80043c4 <HAL_RCC_OscConfig+0x3c0>
{
 800400a:	b570      	push	{r4, r5, r6, lr}
 800400c:	b082      	sub	sp, #8
 800400e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004010:	6803      	ldr	r3, [r0, #0]
 8004012:	f013 0f01 	tst.w	r3, #1
 8004016:	d03b      	beq.n	8004090 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004018:	4ba5      	ldr	r3, [pc, #660]	; (80042b0 <HAL_RCC_OscConfig+0x2ac>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f003 030c 	and.w	r3, r3, #12
 8004020:	2b04      	cmp	r3, #4
 8004022:	d02c      	beq.n	800407e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004024:	4ba2      	ldr	r3, [pc, #648]	; (80042b0 <HAL_RCC_OscConfig+0x2ac>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800402c:	2b08      	cmp	r3, #8
 800402e:	d021      	beq.n	8004074 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004030:	6863      	ldr	r3, [r4, #4]
 8004032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004036:	d04f      	beq.n	80040d8 <HAL_RCC_OscConfig+0xd4>
 8004038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800403c:	d052      	beq.n	80040e4 <HAL_RCC_OscConfig+0xe0>
 800403e:	4b9c      	ldr	r3, [pc, #624]	; (80042b0 <HAL_RCC_OscConfig+0x2ac>)
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800404e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004050:	6863      	ldr	r3, [r4, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d050      	beq.n	80040f8 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004056:	f7fd f863 	bl	8001120 <HAL_GetTick>
 800405a:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800405c:	4b94      	ldr	r3, [pc, #592]	; (80042b0 <HAL_RCC_OscConfig+0x2ac>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004064:	d114      	bne.n	8004090 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004066:	f7fd f85b 	bl	8001120 <HAL_GetTick>
 800406a:	1b40      	subs	r0, r0, r5
 800406c:	2864      	cmp	r0, #100	; 0x64
 800406e:	d9f5      	bls.n	800405c <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8004070:	2003      	movs	r0, #3
 8004072:	e1ae      	b.n	80043d2 <HAL_RCC_OscConfig+0x3ce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004074:	4b8e      	ldr	r3, [pc, #568]	; (80042b0 <HAL_RCC_OscConfig+0x2ac>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800407c:	d0d8      	beq.n	8004030 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800407e:	4b8c      	ldr	r3, [pc, #560]	; (80042b0 <HAL_RCC_OscConfig+0x2ac>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004086:	d003      	beq.n	8004090 <HAL_RCC_OscConfig+0x8c>
 8004088:	6863      	ldr	r3, [r4, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 819c 	beq.w	80043c8 <HAL_RCC_OscConfig+0x3c4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004090:	6823      	ldr	r3, [r4, #0]
 8004092:	f013 0f02 	tst.w	r3, #2
 8004096:	d054      	beq.n	8004142 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004098:	4b85      	ldr	r3, [pc, #532]	; (80042b0 <HAL_RCC_OscConfig+0x2ac>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f013 0f0c 	tst.w	r3, #12
 80040a0:	d03e      	beq.n	8004120 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040a2:	4b83      	ldr	r3, [pc, #524]	; (80042b0 <HAL_RCC_OscConfig+0x2ac>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	d033      	beq.n	8004116 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040ae:	68e3      	ldr	r3, [r4, #12]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d067      	beq.n	8004184 <HAL_RCC_OscConfig+0x180>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040b4:	4b7f      	ldr	r3, [pc, #508]	; (80042b4 <HAL_RCC_OscConfig+0x2b0>)
 80040b6:	2201      	movs	r2, #1
 80040b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ba:	f7fd f831 	bl	8001120 <HAL_GetTick>
 80040be:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c0:	4b7b      	ldr	r3, [pc, #492]	; (80042b0 <HAL_RCC_OscConfig+0x2ac>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f013 0f02 	tst.w	r3, #2
 80040c8:	d153      	bne.n	8004172 <HAL_RCC_OscConfig+0x16e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ca:	f7fd f829 	bl	8001120 <HAL_GetTick>
 80040ce:	1b40      	subs	r0, r0, r5
 80040d0:	2802      	cmp	r0, #2
 80040d2:	d9f5      	bls.n	80040c0 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80040d4:	2003      	movs	r0, #3
 80040d6:	e17c      	b.n	80043d2 <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040d8:	4a75      	ldr	r2, [pc, #468]	; (80042b0 <HAL_RCC_OscConfig+0x2ac>)
 80040da:	6813      	ldr	r3, [r2, #0]
 80040dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e0:	6013      	str	r3, [r2, #0]
 80040e2:	e7b5      	b.n	8004050 <HAL_RCC_OscConfig+0x4c>
 80040e4:	4b72      	ldr	r3, [pc, #456]	; (80042b0 <HAL_RCC_OscConfig+0x2ac>)
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	e7ab      	b.n	8004050 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80040f8:	f7fd f812 	bl	8001120 <HAL_GetTick>
 80040fc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040fe:	4b6c      	ldr	r3, [pc, #432]	; (80042b0 <HAL_RCC_OscConfig+0x2ac>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004106:	d0c3      	beq.n	8004090 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004108:	f7fd f80a 	bl	8001120 <HAL_GetTick>
 800410c:	1b40      	subs	r0, r0, r5
 800410e:	2864      	cmp	r0, #100	; 0x64
 8004110:	d9f5      	bls.n	80040fe <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8004112:	2003      	movs	r0, #3
 8004114:	e15d      	b.n	80043d2 <HAL_RCC_OscConfig+0x3ce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004116:	4b66      	ldr	r3, [pc, #408]	; (80042b0 <HAL_RCC_OscConfig+0x2ac>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800411e:	d1c6      	bne.n	80040ae <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004120:	4b63      	ldr	r3, [pc, #396]	; (80042b0 <HAL_RCC_OscConfig+0x2ac>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f013 0f02 	tst.w	r3, #2
 8004128:	d003      	beq.n	8004132 <HAL_RCC_OscConfig+0x12e>
 800412a:	68e3      	ldr	r3, [r4, #12]
 800412c:	2b01      	cmp	r3, #1
 800412e:	f040 814d 	bne.w	80043cc <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004132:	4a5f      	ldr	r2, [pc, #380]	; (80042b0 <HAL_RCC_OscConfig+0x2ac>)
 8004134:	6813      	ldr	r3, [r2, #0]
 8004136:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800413a:	6921      	ldr	r1, [r4, #16]
 800413c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004140:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004142:	6823      	ldr	r3, [r4, #0]
 8004144:	f013 0f08 	tst.w	r3, #8
 8004148:	d040      	beq.n	80041cc <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800414a:	6963      	ldr	r3, [r4, #20]
 800414c:	b363      	cbz	r3, 80041a8 <HAL_RCC_OscConfig+0x1a4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800414e:	4b5a      	ldr	r3, [pc, #360]	; (80042b8 <HAL_RCC_OscConfig+0x2b4>)
 8004150:	2201      	movs	r2, #1
 8004152:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004154:	f7fc ffe4 	bl	8001120 <HAL_GetTick>
 8004158:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800415a:	4b55      	ldr	r3, [pc, #340]	; (80042b0 <HAL_RCC_OscConfig+0x2ac>)
 800415c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800415e:	f013 0f02 	tst.w	r3, #2
 8004162:	d133      	bne.n	80041cc <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004164:	f7fc ffdc 	bl	8001120 <HAL_GetTick>
 8004168:	1b40      	subs	r0, r0, r5
 800416a:	2802      	cmp	r0, #2
 800416c:	d9f5      	bls.n	800415a <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 800416e:	2003      	movs	r0, #3
 8004170:	e12f      	b.n	80043d2 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004172:	4a4f      	ldr	r2, [pc, #316]	; (80042b0 <HAL_RCC_OscConfig+0x2ac>)
 8004174:	6813      	ldr	r3, [r2, #0]
 8004176:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800417a:	6921      	ldr	r1, [r4, #16]
 800417c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004180:	6013      	str	r3, [r2, #0]
 8004182:	e7de      	b.n	8004142 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8004184:	4b4b      	ldr	r3, [pc, #300]	; (80042b4 <HAL_RCC_OscConfig+0x2b0>)
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800418a:	f7fc ffc9 	bl	8001120 <HAL_GetTick>
 800418e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004190:	4b47      	ldr	r3, [pc, #284]	; (80042b0 <HAL_RCC_OscConfig+0x2ac>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f013 0f02 	tst.w	r3, #2
 8004198:	d0d3      	beq.n	8004142 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800419a:	f7fc ffc1 	bl	8001120 <HAL_GetTick>
 800419e:	1b40      	subs	r0, r0, r5
 80041a0:	2802      	cmp	r0, #2
 80041a2:	d9f5      	bls.n	8004190 <HAL_RCC_OscConfig+0x18c>
            return HAL_TIMEOUT;
 80041a4:	2003      	movs	r0, #3
 80041a6:	e114      	b.n	80043d2 <HAL_RCC_OscConfig+0x3ce>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041a8:	4b43      	ldr	r3, [pc, #268]	; (80042b8 <HAL_RCC_OscConfig+0x2b4>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ae:	f7fc ffb7 	bl	8001120 <HAL_GetTick>
 80041b2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041b4:	4b3e      	ldr	r3, [pc, #248]	; (80042b0 <HAL_RCC_OscConfig+0x2ac>)
 80041b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041b8:	f013 0f02 	tst.w	r3, #2
 80041bc:	d006      	beq.n	80041cc <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041be:	f7fc ffaf 	bl	8001120 <HAL_GetTick>
 80041c2:	1b40      	subs	r0, r0, r5
 80041c4:	2802      	cmp	r0, #2
 80041c6:	d9f5      	bls.n	80041b4 <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 80041c8:	2003      	movs	r0, #3
 80041ca:	e102      	b.n	80043d2 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041cc:	6823      	ldr	r3, [r4, #0]
 80041ce:	f013 0f04 	tst.w	r3, #4
 80041d2:	d076      	beq.n	80042c2 <HAL_RCC_OscConfig+0x2be>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041d4:	4b36      	ldr	r3, [pc, #216]	; (80042b0 <HAL_RCC_OscConfig+0x2ac>)
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80041dc:	d10d      	bne.n	80041fa <HAL_RCC_OscConfig+0x1f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041de:	2300      	movs	r3, #0
 80041e0:	9301      	str	r3, [sp, #4]
 80041e2:	4b33      	ldr	r3, [pc, #204]	; (80042b0 <HAL_RCC_OscConfig+0x2ac>)
 80041e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80041ea:	641a      	str	r2, [r3, #64]	; 0x40
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f2:	9301      	str	r3, [sp, #4]
 80041f4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80041f6:	2501      	movs	r5, #1
 80041f8:	e000      	b.n	80041fc <HAL_RCC_OscConfig+0x1f8>
    FlagStatus       pwrclkchanged = RESET;
 80041fa:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fc:	4b2f      	ldr	r3, [pc, #188]	; (80042bc <HAL_RCC_OscConfig+0x2b8>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004204:	d020      	beq.n	8004248 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004206:	68a3      	ldr	r3, [r4, #8]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d031      	beq.n	8004270 <HAL_RCC_OscConfig+0x26c>
 800420c:	2b05      	cmp	r3, #5
 800420e:	d035      	beq.n	800427c <HAL_RCC_OscConfig+0x278>
 8004210:	4b27      	ldr	r3, [pc, #156]	; (80042b0 <HAL_RCC_OscConfig+0x2ac>)
 8004212:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004214:	f022 0201 	bic.w	r2, r2, #1
 8004218:	671a      	str	r2, [r3, #112]	; 0x70
 800421a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800421c:	f022 0204 	bic.w	r2, r2, #4
 8004220:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004222:	68a3      	ldr	r3, [r4, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d033      	beq.n	8004290 <HAL_RCC_OscConfig+0x28c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004228:	f7fc ff7a 	bl	8001120 <HAL_GetTick>
 800422c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800422e:	4b20      	ldr	r3, [pc, #128]	; (80042b0 <HAL_RCC_OscConfig+0x2ac>)
 8004230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004232:	f013 0f02 	tst.w	r3, #2
 8004236:	d143      	bne.n	80042c0 <HAL_RCC_OscConfig+0x2bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004238:	f7fc ff72 	bl	8001120 <HAL_GetTick>
 800423c:	1b80      	subs	r0, r0, r6
 800423e:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
 8004242:	d9f4      	bls.n	800422e <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8004244:	2003      	movs	r0, #3
 8004246:	e0c4      	b.n	80043d2 <HAL_RCC_OscConfig+0x3ce>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004248:	4a1c      	ldr	r2, [pc, #112]	; (80042bc <HAL_RCC_OscConfig+0x2b8>)
 800424a:	6813      	ldr	r3, [r2, #0]
 800424c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004250:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004252:	f7fc ff65 	bl	8001120 <HAL_GetTick>
 8004256:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004258:	4b18      	ldr	r3, [pc, #96]	; (80042bc <HAL_RCC_OscConfig+0x2b8>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004260:	d1d1      	bne.n	8004206 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004262:	f7fc ff5d 	bl	8001120 <HAL_GetTick>
 8004266:	1b80      	subs	r0, r0, r6
 8004268:	2802      	cmp	r0, #2
 800426a:	d9f5      	bls.n	8004258 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 800426c:	2003      	movs	r0, #3
 800426e:	e0b0      	b.n	80043d2 <HAL_RCC_OscConfig+0x3ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004270:	4a0f      	ldr	r2, [pc, #60]	; (80042b0 <HAL_RCC_OscConfig+0x2ac>)
 8004272:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004274:	f043 0301 	orr.w	r3, r3, #1
 8004278:	6713      	str	r3, [r2, #112]	; 0x70
 800427a:	e7d2      	b.n	8004222 <HAL_RCC_OscConfig+0x21e>
 800427c:	4b0c      	ldr	r3, [pc, #48]	; (80042b0 <HAL_RCC_OscConfig+0x2ac>)
 800427e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004280:	f042 0204 	orr.w	r2, r2, #4
 8004284:	671a      	str	r2, [r3, #112]	; 0x70
 8004286:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004288:	f042 0201 	orr.w	r2, r2, #1
 800428c:	671a      	str	r2, [r3, #112]	; 0x70
 800428e:	e7c8      	b.n	8004222 <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004290:	f7fc ff46 	bl	8001120 <HAL_GetTick>
 8004294:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004296:	4b06      	ldr	r3, [pc, #24]	; (80042b0 <HAL_RCC_OscConfig+0x2ac>)
 8004298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429a:	f013 0f02 	tst.w	r3, #2
 800429e:	d00f      	beq.n	80042c0 <HAL_RCC_OscConfig+0x2bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042a0:	f7fc ff3e 	bl	8001120 <HAL_GetTick>
 80042a4:	1b80      	subs	r0, r0, r6
 80042a6:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
 80042aa:	d9f4      	bls.n	8004296 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80042ac:	2003      	movs	r0, #3
 80042ae:	e090      	b.n	80043d2 <HAL_RCC_OscConfig+0x3ce>
 80042b0:	40023800 	.word	0x40023800
 80042b4:	42470000 	.word	0x42470000
 80042b8:	42470e80 	.word	0x42470e80
 80042bc:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042c0:	b9ed      	cbnz	r5, 80042fe <HAL_RCC_OscConfig+0x2fa>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042c2:	69a3      	ldr	r3, [r4, #24]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 8083 	beq.w	80043d0 <HAL_RCC_OscConfig+0x3cc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042ca:	4a49      	ldr	r2, [pc, #292]	; (80043f0 <HAL_RCC_OscConfig+0x3ec>)
 80042cc:	6892      	ldr	r2, [r2, #8]
 80042ce:	f002 020c 	and.w	r2, r2, #12
 80042d2:	2a08      	cmp	r2, #8
 80042d4:	d051      	beq.n	800437a <HAL_RCC_OscConfig+0x376>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d017      	beq.n	800430a <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042da:	4b46      	ldr	r3, [pc, #280]	; (80043f4 <HAL_RCC_OscConfig+0x3f0>)
 80042dc:	2200      	movs	r2, #0
 80042de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e0:	f7fc ff1e 	bl	8001120 <HAL_GetTick>
 80042e4:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e6:	4b42      	ldr	r3, [pc, #264]	; (80043f0 <HAL_RCC_OscConfig+0x3ec>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80042ee:	d042      	beq.n	8004376 <HAL_RCC_OscConfig+0x372>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042f0:	f7fc ff16 	bl	8001120 <HAL_GetTick>
 80042f4:	1b00      	subs	r0, r0, r4
 80042f6:	2802      	cmp	r0, #2
 80042f8:	d9f5      	bls.n	80042e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80042fa:	2003      	movs	r0, #3
 80042fc:	e069      	b.n	80043d2 <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_PWR_CLK_DISABLE();
 80042fe:	4a3c      	ldr	r2, [pc, #240]	; (80043f0 <HAL_RCC_OscConfig+0x3ec>)
 8004300:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004302:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004306:	6413      	str	r3, [r2, #64]	; 0x40
 8004308:	e7db      	b.n	80042c2 <HAL_RCC_OscConfig+0x2be>
        __HAL_RCC_PLL_DISABLE();
 800430a:	4b3a      	ldr	r3, [pc, #232]	; (80043f4 <HAL_RCC_OscConfig+0x3f0>)
 800430c:	2200      	movs	r2, #0
 800430e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004310:	f7fc ff06 	bl	8001120 <HAL_GetTick>
 8004314:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004316:	4b36      	ldr	r3, [pc, #216]	; (80043f0 <HAL_RCC_OscConfig+0x3ec>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800431e:	d006      	beq.n	800432e <HAL_RCC_OscConfig+0x32a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004320:	f7fc fefe 	bl	8001120 <HAL_GetTick>
 8004324:	1b40      	subs	r0, r0, r5
 8004326:	2802      	cmp	r0, #2
 8004328:	d9f5      	bls.n	8004316 <HAL_RCC_OscConfig+0x312>
            return HAL_TIMEOUT;
 800432a:	2003      	movs	r0, #3
 800432c:	e051      	b.n	80043d2 <HAL_RCC_OscConfig+0x3ce>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800432e:	69e3      	ldr	r3, [r4, #28]
 8004330:	6a22      	ldr	r2, [r4, #32]
 8004332:	4313      	orrs	r3, r2
 8004334:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004336:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800433a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800433c:	0852      	lsrs	r2, r2, #1
 800433e:	3a01      	subs	r2, #1
 8004340:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004344:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004346:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800434a:	4a29      	ldr	r2, [pc, #164]	; (80043f0 <HAL_RCC_OscConfig+0x3ec>)
 800434c:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800434e:	4b29      	ldr	r3, [pc, #164]	; (80043f4 <HAL_RCC_OscConfig+0x3f0>)
 8004350:	2201      	movs	r2, #1
 8004352:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004354:	f7fc fee4 	bl	8001120 <HAL_GetTick>
 8004358:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800435a:	4b25      	ldr	r3, [pc, #148]	; (80043f0 <HAL_RCC_OscConfig+0x3ec>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004362:	d106      	bne.n	8004372 <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004364:	f7fc fedc 	bl	8001120 <HAL_GetTick>
 8004368:	1b00      	subs	r0, r0, r4
 800436a:	2802      	cmp	r0, #2
 800436c:	d9f5      	bls.n	800435a <HAL_RCC_OscConfig+0x356>
            return HAL_TIMEOUT;
 800436e:	2003      	movs	r0, #3
 8004370:	e02f      	b.n	80043d2 <HAL_RCC_OscConfig+0x3ce>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004372:	2000      	movs	r0, #0
 8004374:	e02d      	b.n	80043d2 <HAL_RCC_OscConfig+0x3ce>
 8004376:	2000      	movs	r0, #0
 8004378:	e02b      	b.n	80043d2 <HAL_RCC_OscConfig+0x3ce>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800437a:	2b01      	cmp	r3, #1
 800437c:	d02b      	beq.n	80043d6 <HAL_RCC_OscConfig+0x3d2>
        pll_config = RCC->PLLCFGR;
 800437e:	4b1c      	ldr	r3, [pc, #112]	; (80043f0 <HAL_RCC_OscConfig+0x3ec>)
 8004380:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004382:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8004386:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004388:	4291      	cmp	r1, r2
 800438a:	d126      	bne.n	80043da <HAL_RCC_OscConfig+0x3d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800438c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004390:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004392:	428a      	cmp	r2, r1
 8004394:	d123      	bne.n	80043de <HAL_RCC_OscConfig+0x3da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004396:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004398:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800439c:	401a      	ands	r2, r3
 800439e:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80043a2:	d11e      	bne.n	80043e2 <HAL_RCC_OscConfig+0x3de>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043a4:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80043a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80043aa:	0852      	lsrs	r2, r2, #1
 80043ac:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043ae:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80043b2:	d118      	bne.n	80043e6 <HAL_RCC_OscConfig+0x3e2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043b4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80043b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043ba:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80043be:	d114      	bne.n	80043ea <HAL_RCC_OscConfig+0x3e6>
  return HAL_OK;
 80043c0:	2000      	movs	r0, #0
 80043c2:	e006      	b.n	80043d2 <HAL_RCC_OscConfig+0x3ce>
    return HAL_ERROR;
 80043c4:	2001      	movs	r0, #1
}
 80043c6:	4770      	bx	lr
        return HAL_ERROR;
 80043c8:	2001      	movs	r0, #1
 80043ca:	e002      	b.n	80043d2 <HAL_RCC_OscConfig+0x3ce>
        return HAL_ERROR;
 80043cc:	2001      	movs	r0, #1
 80043ce:	e000      	b.n	80043d2 <HAL_RCC_OscConfig+0x3ce>
  return HAL_OK;
 80043d0:	2000      	movs	r0, #0
}
 80043d2:	b002      	add	sp, #8
 80043d4:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80043d6:	2001      	movs	r0, #1
 80043d8:	e7fb      	b.n	80043d2 <HAL_RCC_OscConfig+0x3ce>
          return HAL_ERROR;
 80043da:	2001      	movs	r0, #1
 80043dc:	e7f9      	b.n	80043d2 <HAL_RCC_OscConfig+0x3ce>
 80043de:	2001      	movs	r0, #1
 80043e0:	e7f7      	b.n	80043d2 <HAL_RCC_OscConfig+0x3ce>
 80043e2:	2001      	movs	r0, #1
 80043e4:	e7f5      	b.n	80043d2 <HAL_RCC_OscConfig+0x3ce>
 80043e6:	2001      	movs	r0, #1
 80043e8:	e7f3      	b.n	80043d2 <HAL_RCC_OscConfig+0x3ce>
 80043ea:	2001      	movs	r0, #1
 80043ec:	e7f1      	b.n	80043d2 <HAL_RCC_OscConfig+0x3ce>
 80043ee:	bf00      	nop
 80043f0:	40023800 	.word	0x40023800
 80043f4:	42470060 	.word	0x42470060

080043f8 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80043f8:	4b01      	ldr	r3, [pc, #4]	; (8004400 <HAL_RCC_EnableCSS+0x8>)
 80043fa:	2201      	movs	r2, #1
 80043fc:	601a      	str	r2, [r3, #0]
}
 80043fe:	4770      	bx	lr
 8004400:	4247004c 	.word	0x4247004c

08004404 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004406:	4b24      	ldr	r3, [pc, #144]	; (8004498 <HAL_RCC_GetSysClockFreq+0x94>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 030c 	and.w	r3, r3, #12
 800440e:	2b04      	cmp	r3, #4
 8004410:	d03d      	beq.n	800448e <HAL_RCC_GetSysClockFreq+0x8a>
 8004412:	2b08      	cmp	r3, #8
 8004414:	d13d      	bne.n	8004492 <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004416:	4b20      	ldr	r3, [pc, #128]	; (8004498 <HAL_RCC_GetSysClockFreq+0x94>)
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004424:	d012      	beq.n	800444c <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004426:	4b1c      	ldr	r3, [pc, #112]	; (8004498 <HAL_RCC_GetSysClockFreq+0x94>)
 8004428:	6859      	ldr	r1, [r3, #4]
 800442a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800442e:	2300      	movs	r3, #0
 8004430:	481a      	ldr	r0, [pc, #104]	; (800449c <HAL_RCC_GetSysClockFreq+0x98>)
 8004432:	fba1 0100 	umull	r0, r1, r1, r0
 8004436:	f7fc fc0f 	bl	8000c58 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800443a:	4b17      	ldr	r3, [pc, #92]	; (8004498 <HAL_RCC_GetSysClockFreq+0x94>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004442:	3301      	adds	r3, #1
 8004444:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8004446:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800444a:	e023      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800444c:	4b12      	ldr	r3, [pc, #72]	; (8004498 <HAL_RCC_GetSysClockFreq+0x94>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004454:	015c      	lsls	r4, r3, #5
 8004456:	2500      	movs	r5, #0
 8004458:	1ae4      	subs	r4, r4, r3
 800445a:	f165 0500 	sbc.w	r5, r5, #0
 800445e:	01ae      	lsls	r6, r5, #6
 8004460:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8004464:	01a7      	lsls	r7, r4, #6
 8004466:	1b38      	subs	r0, r7, r4
 8004468:	eb66 0105 	sbc.w	r1, r6, r5
 800446c:	00cc      	lsls	r4, r1, #3
 800446e:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 8004472:	00c5      	lsls	r5, r0, #3
 8004474:	18e8      	adds	r0, r5, r3
 8004476:	f144 0100 	adc.w	r1, r4, #0
 800447a:	028b      	lsls	r3, r1, #10
 800447c:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8004480:	0284      	lsls	r4, r0, #10
 8004482:	4620      	mov	r0, r4
 8004484:	4619      	mov	r1, r3
 8004486:	2300      	movs	r3, #0
 8004488:	f7fc fbe6 	bl	8000c58 <__aeabi_uldivmod>
 800448c:	e7d5      	b.n	800443a <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 800448e:	4803      	ldr	r0, [pc, #12]	; (800449c <HAL_RCC_GetSysClockFreq+0x98>)
 8004490:	e000      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0x90>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004492:	4803      	ldr	r0, [pc, #12]	; (80044a0 <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004496:	bf00      	nop
 8004498:	40023800 	.word	0x40023800
 800449c:	016e3600 	.word	0x016e3600
 80044a0:	00f42400 	.word	0x00f42400

080044a4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80044a4:	2800      	cmp	r0, #0
 80044a6:	f000 809b 	beq.w	80045e0 <HAL_RCC_ClockConfig+0x13c>
{
 80044aa:	b570      	push	{r4, r5, r6, lr}
 80044ac:	460d      	mov	r5, r1
 80044ae:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044b0:	4b4f      	ldr	r3, [pc, #316]	; (80045f0 <HAL_RCC_ClockConfig+0x14c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	428b      	cmp	r3, r1
 80044ba:	d208      	bcs.n	80044ce <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044bc:	b2cb      	uxtb	r3, r1
 80044be:	4a4c      	ldr	r2, [pc, #304]	; (80045f0 <HAL_RCC_ClockConfig+0x14c>)
 80044c0:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c2:	6813      	ldr	r3, [r2, #0]
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	428b      	cmp	r3, r1
 80044ca:	f040 808b 	bne.w	80045e4 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044ce:	6823      	ldr	r3, [r4, #0]
 80044d0:	f013 0f02 	tst.w	r3, #2
 80044d4:	d017      	beq.n	8004506 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d6:	f013 0f04 	tst.w	r3, #4
 80044da:	d004      	beq.n	80044e6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044dc:	4a45      	ldr	r2, [pc, #276]	; (80045f4 <HAL_RCC_ClockConfig+0x150>)
 80044de:	6893      	ldr	r3, [r2, #8]
 80044e0:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044e4:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	f013 0f08 	tst.w	r3, #8
 80044ec:	d004      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044ee:	4a41      	ldr	r2, [pc, #260]	; (80045f4 <HAL_RCC_ClockConfig+0x150>)
 80044f0:	6893      	ldr	r3, [r2, #8]
 80044f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044f6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044f8:	4a3e      	ldr	r2, [pc, #248]	; (80045f4 <HAL_RCC_ClockConfig+0x150>)
 80044fa:	6893      	ldr	r3, [r2, #8]
 80044fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004500:	68a1      	ldr	r1, [r4, #8]
 8004502:	430b      	orrs	r3, r1
 8004504:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004506:	6823      	ldr	r3, [r4, #0]
 8004508:	f013 0f01 	tst.w	r3, #1
 800450c:	d032      	beq.n	8004574 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800450e:	6863      	ldr	r3, [r4, #4]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d021      	beq.n	8004558 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004514:	1e9a      	subs	r2, r3, #2
 8004516:	2a01      	cmp	r2, #1
 8004518:	d925      	bls.n	8004566 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800451a:	4a36      	ldr	r2, [pc, #216]	; (80045f4 <HAL_RCC_ClockConfig+0x150>)
 800451c:	6812      	ldr	r2, [r2, #0]
 800451e:	f012 0f02 	tst.w	r2, #2
 8004522:	d061      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004524:	4933      	ldr	r1, [pc, #204]	; (80045f4 <HAL_RCC_ClockConfig+0x150>)
 8004526:	688a      	ldr	r2, [r1, #8]
 8004528:	f022 0203 	bic.w	r2, r2, #3
 800452c:	4313      	orrs	r3, r2
 800452e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004530:	f7fc fdf6 	bl	8001120 <HAL_GetTick>
 8004534:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004536:	4b2f      	ldr	r3, [pc, #188]	; (80045f4 <HAL_RCC_ClockConfig+0x150>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 030c 	and.w	r3, r3, #12
 800453e:	6862      	ldr	r2, [r4, #4]
 8004540:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004544:	d016      	beq.n	8004574 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004546:	f7fc fdeb 	bl	8001120 <HAL_GetTick>
 800454a:	1b80      	subs	r0, r0, r6
 800454c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004550:	4298      	cmp	r0, r3
 8004552:	d9f0      	bls.n	8004536 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8004554:	2003      	movs	r0, #3
 8004556:	e042      	b.n	80045de <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004558:	4a26      	ldr	r2, [pc, #152]	; (80045f4 <HAL_RCC_ClockConfig+0x150>)
 800455a:	6812      	ldr	r2, [r2, #0]
 800455c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004560:	d1e0      	bne.n	8004524 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8004562:	2001      	movs	r0, #1
 8004564:	e03b      	b.n	80045de <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004566:	4a23      	ldr	r2, [pc, #140]	; (80045f4 <HAL_RCC_ClockConfig+0x150>)
 8004568:	6812      	ldr	r2, [r2, #0]
 800456a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800456e:	d1d9      	bne.n	8004524 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8004570:	2001      	movs	r0, #1
 8004572:	e034      	b.n	80045de <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004574:	4b1e      	ldr	r3, [pc, #120]	; (80045f0 <HAL_RCC_ClockConfig+0x14c>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	42ab      	cmp	r3, r5
 800457e:	d907      	bls.n	8004590 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004580:	b2ea      	uxtb	r2, r5
 8004582:	4b1b      	ldr	r3, [pc, #108]	; (80045f0 <HAL_RCC_ClockConfig+0x14c>)
 8004584:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	42ab      	cmp	r3, r5
 800458e:	d12d      	bne.n	80045ec <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004590:	6823      	ldr	r3, [r4, #0]
 8004592:	f013 0f04 	tst.w	r3, #4
 8004596:	d006      	beq.n	80045a6 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004598:	4a16      	ldr	r2, [pc, #88]	; (80045f4 <HAL_RCC_ClockConfig+0x150>)
 800459a:	6893      	ldr	r3, [r2, #8]
 800459c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80045a0:	68e1      	ldr	r1, [r4, #12]
 80045a2:	430b      	orrs	r3, r1
 80045a4:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	f013 0f08 	tst.w	r3, #8
 80045ac:	d007      	beq.n	80045be <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045ae:	4a11      	ldr	r2, [pc, #68]	; (80045f4 <HAL_RCC_ClockConfig+0x150>)
 80045b0:	6893      	ldr	r3, [r2, #8]
 80045b2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80045b6:	6921      	ldr	r1, [r4, #16]
 80045b8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80045bc:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045be:	f7ff ff21 	bl	8004404 <HAL_RCC_GetSysClockFreq>
 80045c2:	4b0c      	ldr	r3, [pc, #48]	; (80045f4 <HAL_RCC_ClockConfig+0x150>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80045ca:	4a0b      	ldr	r2, [pc, #44]	; (80045f8 <HAL_RCC_ClockConfig+0x154>)
 80045cc:	5cd3      	ldrb	r3, [r2, r3]
 80045ce:	40d8      	lsrs	r0, r3
 80045d0:	4b0a      	ldr	r3, [pc, #40]	; (80045fc <HAL_RCC_ClockConfig+0x158>)
 80045d2:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80045d4:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <HAL_RCC_ClockConfig+0x15c>)
 80045d6:	6818      	ldr	r0, [r3, #0]
 80045d8:	f7fc fd56 	bl	8001088 <HAL_InitTick>
  return HAL_OK;
 80045dc:	2000      	movs	r0, #0
}
 80045de:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80045e0:	2001      	movs	r0, #1
}
 80045e2:	4770      	bx	lr
      return HAL_ERROR;
 80045e4:	2001      	movs	r0, #1
 80045e6:	e7fa      	b.n	80045de <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 80045e8:	2001      	movs	r0, #1
 80045ea:	e7f8      	b.n	80045de <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 80045ec:	2001      	movs	r0, #1
 80045ee:	e7f6      	b.n	80045de <HAL_RCC_ClockConfig+0x13a>
 80045f0:	40023c00 	.word	0x40023c00
 80045f4:	40023800 	.word	0x40023800
 80045f8:	0800e9d8 	.word	0x0800e9d8
 80045fc:	20000118 	.word	0x20000118
 8004600:	20000004 	.word	0x20000004

08004604 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8004604:	4b01      	ldr	r3, [pc, #4]	; (800460c <HAL_RCC_GetHCLKFreq+0x8>)
 8004606:	6818      	ldr	r0, [r3, #0]
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	20000118 	.word	0x20000118

08004610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004610:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004612:	f7ff fff7 	bl	8004604 <HAL_RCC_GetHCLKFreq>
 8004616:	4b04      	ldr	r3, [pc, #16]	; (8004628 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800461e:	4a03      	ldr	r2, [pc, #12]	; (800462c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004620:	5cd3      	ldrb	r3, [r2, r3]
}
 8004622:	40d8      	lsrs	r0, r3
 8004624:	bd08      	pop	{r3, pc}
 8004626:	bf00      	nop
 8004628:	40023800 	.word	0x40023800
 800462c:	0800e9e8 	.word	0x0800e9e8

08004630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004630:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004632:	f7ff ffe7 	bl	8004604 <HAL_RCC_GetHCLKFreq>
 8004636:	4b04      	ldr	r3, [pc, #16]	; (8004648 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800463e:	4a03      	ldr	r2, [pc, #12]	; (800464c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004640:	5cd3      	ldrb	r3, [r2, r3]
}
 8004642:	40d8      	lsrs	r0, r3
 8004644:	bd08      	pop	{r3, pc}
 8004646:	bf00      	nop
 8004648:	40023800 	.word	0x40023800
 800464c:	0800e9e8 	.word	0x0800e9e8

08004650 <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004650:	4770      	bx	lr
	...

08004654 <HAL_RCC_NMI_IRQHandler>:
{
 8004654:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004656:	4b06      	ldr	r3, [pc, #24]	; (8004670 <HAL_RCC_NMI_IRQHandler+0x1c>)
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800465e:	d100      	bne.n	8004662 <HAL_RCC_NMI_IRQHandler+0xe>
}
 8004660:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 8004662:	f7ff fff5 	bl	8004650 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004666:	4b03      	ldr	r3, [pc, #12]	; (8004674 <HAL_RCC_NMI_IRQHandler+0x20>)
 8004668:	2280      	movs	r2, #128	; 0x80
 800466a:	701a      	strb	r2, [r3, #0]
}
 800466c:	e7f8      	b.n	8004660 <HAL_RCC_NMI_IRQHandler+0xc>
 800466e:	bf00      	nop
 8004670:	40023800 	.word	0x40023800
 8004674:	4002380e 	.word	0x4002380e

08004678 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004678:	b530      	push	{r4, r5, lr}
 800467a:	b083      	sub	sp, #12
 800467c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800467e:	6803      	ldr	r3, [r0, #0]
 8004680:	f013 0f05 	tst.w	r3, #5
 8004684:	d10e      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004686:	6823      	ldr	r3, [r4, #0]
 8004688:	f013 0f02 	tst.w	r3, #2
 800468c:	d138      	bne.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x88>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	f013 0f08 	tst.w	r3, #8
 8004694:	f000 809a 	beq.w	80047cc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004698:	7d22      	ldrb	r2, [r4, #20]
 800469a:	4b4d      	ldr	r3, [pc, #308]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800469c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800469e:	2000      	movs	r0, #0
}
 80046a0:	b003      	add	sp, #12
 80046a2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 80046a4:	4b4b      	ldr	r3, [pc, #300]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80046aa:	f7fc fd39 	bl	8001120 <HAL_GetTick>
 80046ae:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046b0:	4b49      	ldr	r3, [pc, #292]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80046b8:	d006      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x50>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046ba:	f7fc fd31 	bl	8001120 <HAL_GetTick>
 80046be:	1b43      	subs	r3, r0, r5
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d9f5      	bls.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x38>
        return HAL_TIMEOUT;
 80046c4:	2003      	movs	r0, #3
 80046c6:	e7eb      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80046c8:	6863      	ldr	r3, [r4, #4]
 80046ca:	68a2      	ldr	r2, [r4, #8]
 80046cc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80046d0:	68e2      	ldr	r2, [r4, #12]
 80046d2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80046d6:	4a40      	ldr	r2, [pc, #256]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80046dc:	4b3d      	ldr	r3, [pc, #244]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80046de:	2201      	movs	r2, #1
 80046e0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80046e2:	f7fc fd1d 	bl	8001120 <HAL_GetTick>
 80046e6:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046e8:	4b3b      	ldr	r3, [pc, #236]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80046f0:	d1c9      	bne.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046f2:	f7fc fd15 	bl	8001120 <HAL_GetTick>
 80046f6:	1b40      	subs	r0, r0, r5
 80046f8:	2802      	cmp	r0, #2
 80046fa:	d9f5      	bls.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        return HAL_TIMEOUT;
 80046fc:	2003      	movs	r0, #3
 80046fe:	e7cf      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PWR_CLK_ENABLE();
 8004700:	2300      	movs	r3, #0
 8004702:	9301      	str	r3, [sp, #4]
 8004704:	4b34      	ldr	r3, [pc, #208]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004706:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004708:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800470c:	641a      	str	r2, [r3, #64]	; 0x40
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004714:	9301      	str	r3, [sp, #4]
 8004716:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8004718:	4a30      	ldr	r2, [pc, #192]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800471a:	6813      	ldr	r3, [r2, #0]
 800471c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004720:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004722:	f7fc fcfd 	bl	8001120 <HAL_GetTick>
 8004726:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004728:	4b2c      	ldr	r3, [pc, #176]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004730:	d106      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004732:	f7fc fcf5 	bl	8001120 <HAL_GetTick>
 8004736:	1b43      	subs	r3, r0, r5
 8004738:	2b02      	cmp	r3, #2
 800473a:	d9f5      	bls.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        return HAL_TIMEOUT;
 800473c:	2003      	movs	r0, #3
 800473e:	e7af      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x28>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004740:	4b25      	ldr	r3, [pc, #148]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004744:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004748:	d012      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 800474a:	6922      	ldr	r2, [r4, #16]
 800474c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004750:	429a      	cmp	r2, r3
 8004752:	d00d      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004754:	4b20      	ldr	r3, [pc, #128]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004756:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004758:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800475c:	4920      	ldr	r1, [pc, #128]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800475e:	2001      	movs	r0, #1
 8004760:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004762:	2000      	movs	r0, #0
 8004764:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 8004766:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476a:	f013 0f01 	tst.w	r3, #1
 800476e:	d112      	bne.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004770:	6923      	ldr	r3, [r4, #16]
 8004772:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004776:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800477a:	d01c      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 800477c:	4a16      	ldr	r2, [pc, #88]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800477e:	6893      	ldr	r3, [r2, #8]
 8004780:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004784:	6093      	str	r3, [r2, #8]
 8004786:	4914      	ldr	r1, [pc, #80]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004788:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 800478a:	6922      	ldr	r2, [r4, #16]
 800478c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004790:	4313      	orrs	r3, r2
 8004792:	670b      	str	r3, [r1, #112]	; 0x70
 8004794:	e77b      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x16>
        tickstart = HAL_GetTick();
 8004796:	f7fc fcc3 	bl	8001120 <HAL_GetTick>
 800479a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800479c:	4b0e      	ldr	r3, [pc, #56]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800479e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a0:	f013 0f02 	tst.w	r3, #2
 80047a4:	d1e4      	bne.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xf8>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047a6:	f7fc fcbb 	bl	8001120 <HAL_GetTick>
 80047aa:	1b40      	subs	r0, r0, r5
 80047ac:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
 80047b0:	d9f4      	bls.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x124>
            return HAL_TIMEOUT;
 80047b2:	2003      	movs	r0, #3
 80047b4:	e774      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047b6:	4908      	ldr	r1, [pc, #32]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047b8:	688a      	ldr	r2, [r1, #8]
 80047ba:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80047be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80047c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047c6:	4313      	orrs	r3, r2
 80047c8:	608b      	str	r3, [r1, #8]
 80047ca:	e7dc      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  return HAL_OK;
 80047cc:	2000      	movs	r0, #0
 80047ce:	e767      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80047d0:	424711e0 	.word	0x424711e0
 80047d4:	42470068 	.word	0x42470068
 80047d8:	40023800 	.word	0x40023800
 80047dc:	40007000 	.word	0x40007000
 80047e0:	42470e40 	.word	0x42470e40

080047e4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80047e4:	b538      	push	{r3, r4, r5, lr}
 80047e6:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80047e8:	6802      	ldr	r2, [r0, #0]
 80047ea:	68d3      	ldr	r3, [r2, #12]
 80047ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047f0:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80047f2:	f7fc fc95 	bl	8001120 <HAL_GetTick>
 80047f6:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f013 0f20 	tst.w	r3, #32
 8004800:	d107      	bne.n	8004812 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004802:	f7fc fc8d 	bl	8001120 <HAL_GetTick>
 8004806:	1b40      	subs	r0, r0, r5
 8004808:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800480c:	d9f4      	bls.n	80047f8 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 800480e:	2003      	movs	r0, #3
 8004810:	e000      	b.n	8004814 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8004812:	2000      	movs	r0, #0
}
 8004814:	bd38      	pop	{r3, r4, r5, pc}

08004816 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004816:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004818:	6803      	ldr	r3, [r0, #0]
 800481a:	68da      	ldr	r2, [r3, #12]
 800481c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004820:	d001      	beq.n	8004826 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8004822:	2000      	movs	r0, #0
}
 8004824:	bd38      	pop	{r3, r4, r5, pc}
 8004826:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004828:	f04f 32ff 	mov.w	r2, #4294967295
 800482c:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800482e:	f7fc fc77 	bl	8001120 <HAL_GetTick>
 8004832:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004834:	6823      	ldr	r3, [r4, #0]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	f013 0f40 	tst.w	r3, #64	; 0x40
 800483c:	d107      	bne.n	800484e <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800483e:	f7fc fc6f 	bl	8001120 <HAL_GetTick>
 8004842:	1b43      	subs	r3, r0, r5
 8004844:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004848:	d9f4      	bls.n	8004834 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 800484a:	2003      	movs	r0, #3
 800484c:	e7ea      	b.n	8004824 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 800484e:	2000      	movs	r0, #0
 8004850:	e7e8      	b.n	8004824 <RTC_EnterInitMode+0xe>

08004852 <HAL_RTC_Init>:
{
 8004852:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8004854:	2800      	cmp	r0, #0
 8004856:	d05c      	beq.n	8004912 <HAL_RTC_Init+0xc0>
 8004858:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800485a:	7f43      	ldrb	r3, [r0, #29]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d041      	beq.n	80048e4 <HAL_RTC_Init+0x92>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004860:	2302      	movs	r3, #2
 8004862:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004864:	6823      	ldr	r3, [r4, #0]
 8004866:	22ca      	movs	r2, #202	; 0xca
 8004868:	625a      	str	r2, [r3, #36]	; 0x24
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	2253      	movs	r2, #83	; 0x53
 800486e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004870:	4620      	mov	r0, r4
 8004872:	f7ff ffd0 	bl	8004816 <RTC_EnterInitMode>
 8004876:	4605      	mov	r5, r0
 8004878:	2800      	cmp	r0, #0
 800487a:	d137      	bne.n	80048ec <HAL_RTC_Init+0x9a>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800487c:	6822      	ldr	r2, [r4, #0]
 800487e:	6893      	ldr	r3, [r2, #8]
 8004880:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004884:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004888:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800488a:	6821      	ldr	r1, [r4, #0]
 800488c:	688a      	ldr	r2, [r1, #8]
 800488e:	6863      	ldr	r3, [r4, #4]
 8004890:	6920      	ldr	r0, [r4, #16]
 8004892:	4303      	orrs	r3, r0
 8004894:	6960      	ldr	r0, [r4, #20]
 8004896:	4303      	orrs	r3, r0
 8004898:	4313      	orrs	r3, r2
 800489a:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800489c:	6823      	ldr	r3, [r4, #0]
 800489e:	68e2      	ldr	r2, [r4, #12]
 80048a0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80048a2:	6822      	ldr	r2, [r4, #0]
 80048a4:	6913      	ldr	r3, [r2, #16]
 80048a6:	68a1      	ldr	r1, [r4, #8]
 80048a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80048ac:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80048ae:	6822      	ldr	r2, [r4, #0]
 80048b0:	68d3      	ldr	r3, [r2, #12]
 80048b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048b6:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80048b8:	6823      	ldr	r3, [r4, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f013 0f20 	tst.w	r3, #32
 80048c0:	d01b      	beq.n	80048fa <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80048c2:	6822      	ldr	r2, [r4, #0]
 80048c4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80048c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048ca:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80048cc:	6822      	ldr	r2, [r4, #0]
 80048ce:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80048d0:	69a1      	ldr	r1, [r4, #24]
 80048d2:	430b      	orrs	r3, r1
 80048d4:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	22ff      	movs	r2, #255	; 0xff
 80048da:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80048dc:	2301      	movs	r3, #1
 80048de:	7763      	strb	r3, [r4, #29]
}
 80048e0:	4628      	mov	r0, r5
 80048e2:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 80048e4:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80048e6:	f006 fc71 	bl	800b1cc <HAL_RTC_MspInit>
 80048ea:	e7b9      	b.n	8004860 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	22ff      	movs	r2, #255	; 0xff
 80048f0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80048f2:	2304      	movs	r3, #4
 80048f4:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 80048f6:	2501      	movs	r5, #1
 80048f8:	e7f2      	b.n	80048e0 <HAL_RTC_Init+0x8e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80048fa:	4620      	mov	r0, r4
 80048fc:	f7ff ff72 	bl	80047e4 <HAL_RTC_WaitForSynchro>
 8004900:	2800      	cmp	r0, #0
 8004902:	d0de      	beq.n	80048c2 <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004904:	6823      	ldr	r3, [r4, #0]
 8004906:	22ff      	movs	r2, #255	; 0xff
 8004908:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800490a:	2304      	movs	r3, #4
 800490c:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 800490e:	2501      	movs	r5, #1
 8004910:	e7e6      	b.n	80048e0 <HAL_RTC_Init+0x8e>
     return HAL_ERROR;
 8004912:	2501      	movs	r5, #1
 8004914:	e7e4      	b.n	80048e0 <HAL_RTC_Init+0x8e>

08004916 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8004916:	2300      	movs	r3, #0

  while(Value >= 10U)
 8004918:	2809      	cmp	r0, #9
 800491a:	d903      	bls.n	8004924 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
 800491c:	3301      	adds	r3, #1
    Value -= 10U;
 800491e:	380a      	subs	r0, #10
 8004920:	b2c0      	uxtb	r0, r0
 8004922:	e7f9      	b.n	8004918 <RTC_ByteToBcd2+0x2>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8004924:	011b      	lsls	r3, r3, #4
 8004926:	b2db      	uxtb	r3, r3
}
 8004928:	4318      	orrs	r0, r3
 800492a:	4770      	bx	lr

0800492c <HAL_RTC_SetTime>:
{
 800492c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800492e:	7f03      	ldrb	r3, [r0, #28]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d078      	beq.n	8004a26 <HAL_RTC_SetTime+0xfa>
 8004934:	4604      	mov	r4, r0
 8004936:	460e      	mov	r6, r1
 8004938:	2301      	movs	r3, #1
 800493a:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800493c:	2302      	movs	r3, #2
 800493e:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8004940:	2a00      	cmp	r2, #0
 8004942:	d147      	bne.n	80049d4 <HAL_RTC_SetTime+0xa8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004944:	6803      	ldr	r3, [r0, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f013 0f40 	tst.w	r3, #64	; 0x40
 800494c:	d101      	bne.n	8004952 <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00U;
 800494e:	2300      	movs	r3, #0
 8004950:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004952:	7830      	ldrb	r0, [r6, #0]
 8004954:	f7ff ffdf 	bl	8004916 <RTC_ByteToBcd2>
 8004958:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800495a:	7870      	ldrb	r0, [r6, #1]
 800495c:	f7ff ffdb 	bl	8004916 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004960:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004964:	78b0      	ldrb	r0, [r6, #2]
 8004966:	f7ff ffd6 	bl	8004916 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800496a:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800496c:	78f0      	ldrb	r0, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800496e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	22ca      	movs	r2, #202	; 0xca
 8004976:	625a      	str	r2, [r3, #36]	; 0x24
 8004978:	6823      	ldr	r3, [r4, #0]
 800497a:	2253      	movs	r2, #83	; 0x53
 800497c:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800497e:	4620      	mov	r0, r4
 8004980:	f7ff ff49 	bl	8004816 <RTC_EnterInitMode>
 8004984:	4607      	mov	r7, r0
 8004986:	2800      	cmp	r0, #0
 8004988:	d136      	bne.n	80049f8 <HAL_RTC_SetTime+0xcc>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800498a:	6823      	ldr	r3, [r4, #0]
 800498c:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 8004990:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 8004994:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004996:	6822      	ldr	r2, [r4, #0]
 8004998:	6893      	ldr	r3, [r2, #8]
 800499a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800499e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80049a0:	6821      	ldr	r1, [r4, #0]
 80049a2:	688b      	ldr	r3, [r1, #8]
 80049a4:	68f2      	ldr	r2, [r6, #12]
 80049a6:	6930      	ldr	r0, [r6, #16]
 80049a8:	4302      	orrs	r2, r0
 80049aa:	4313      	orrs	r3, r2
 80049ac:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80049ae:	6822      	ldr	r2, [r4, #0]
 80049b0:	68d3      	ldr	r3, [r2, #12]
 80049b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049b6:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80049b8:	6823      	ldr	r3, [r4, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f013 0f20 	tst.w	r3, #32
 80049c0:	d023      	beq.n	8004a0a <HAL_RTC_SetTime+0xde>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049c2:	6823      	ldr	r3, [r4, #0]
 80049c4:	22ff      	movs	r2, #255	; 0xff
 80049c6:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 80049c8:	2301      	movs	r3, #1
 80049ca:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc);
 80049cc:	2300      	movs	r3, #0
 80049ce:	7723      	strb	r3, [r4, #28]
}
 80049d0:	4638      	mov	r0, r7
 80049d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80049d4:	6803      	ldr	r3, [r0, #0]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80049dc:	d101      	bne.n	80049e2 <HAL_RTC_SetTime+0xb6>
      sTime->TimeFormat = 0x00U;
 80049de:	2300      	movs	r3, #0
 80049e0:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80049e2:	7835      	ldrb	r5, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80049e4:	7870      	ldrb	r0, [r6, #1]
 80049e6:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80049e8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
              ((uint32_t)sTime->Seconds) | \
 80049ec:	78b5      	ldrb	r5, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80049ee:	4328      	orrs	r0, r5
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80049f0:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80049f2:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80049f6:	e7bc      	b.n	8004972 <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049f8:	6823      	ldr	r3, [r4, #0]
 80049fa:	22ff      	movs	r2, #255	; 0xff
 80049fc:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80049fe:	2304      	movs	r3, #4
 8004a00:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8004a02:	2300      	movs	r3, #0
 8004a04:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8004a06:	2701      	movs	r7, #1
 8004a08:	e7e2      	b.n	80049d0 <HAL_RTC_SetTime+0xa4>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	f7ff feea 	bl	80047e4 <HAL_RTC_WaitForSynchro>
 8004a10:	2800      	cmp	r0, #0
 8004a12:	d0d6      	beq.n	80049c2 <HAL_RTC_SetTime+0x96>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a14:	6823      	ldr	r3, [r4, #0]
 8004a16:	22ff      	movs	r2, #255	; 0xff
 8004a18:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004a1a:	2304      	movs	r3, #4
 8004a1c:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8004a1e:	2300      	movs	r3, #0
 8004a20:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8004a22:	2701      	movs	r7, #1
 8004a24:	e7d4      	b.n	80049d0 <HAL_RTC_SetTime+0xa4>
  __HAL_LOCK(hrtc);
 8004a26:	2702      	movs	r7, #2
 8004a28:	e7d2      	b.n	80049d0 <HAL_RTC_SetTime+0xa4>

08004a2a <HAL_RTC_SetDate>:
{
 8004a2a:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8004a2c:	7f03      	ldrb	r3, [r0, #28]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d066      	beq.n	8004b00 <HAL_RTC_SetDate+0xd6>
 8004a32:	4604      	mov	r4, r0
 8004a34:	460e      	mov	r6, r1
 8004a36:	2301      	movs	r3, #1
 8004a38:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004a3e:	b93a      	cbnz	r2, 8004a50 <HAL_RTC_SetDate+0x26>
 8004a40:	784b      	ldrb	r3, [r1, #1]
 8004a42:	f013 0f10 	tst.w	r3, #16
 8004a46:	d003      	beq.n	8004a50 <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004a48:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8004a4c:	330a      	adds	r3, #10
 8004a4e:	704b      	strb	r3, [r1, #1]
  if(Format == RTC_FORMAT_BIN)
 8004a50:	2a00      	cmp	r2, #0
 8004a52:	d133      	bne.n	8004abc <HAL_RTC_SetDate+0x92>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004a54:	78f0      	ldrb	r0, [r6, #3]
 8004a56:	f7ff ff5e 	bl	8004916 <RTC_ByteToBcd2>
 8004a5a:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004a5c:	7870      	ldrb	r0, [r6, #1]
 8004a5e:	f7ff ff5a 	bl	8004916 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004a62:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004a66:	78b0      	ldrb	r0, [r6, #2]
 8004a68:	f7ff ff55 	bl	8004916 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004a6c:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13U));
 8004a6e:	7830      	ldrb	r0, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004a70:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a74:	6823      	ldr	r3, [r4, #0]
 8004a76:	22ca      	movs	r2, #202	; 0xca
 8004a78:	625a      	str	r2, [r3, #36]	; 0x24
 8004a7a:	6823      	ldr	r3, [r4, #0]
 8004a7c:	2253      	movs	r2, #83	; 0x53
 8004a7e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004a80:	4620      	mov	r0, r4
 8004a82:	f7ff fec8 	bl	8004816 <RTC_EnterInitMode>
 8004a86:	4606      	mov	r6, r0
 8004a88:	bb18      	cbnz	r0, 8004ad2 <HAL_RTC_SetDate+0xa8>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8004a90:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8004a94:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004a96:	6822      	ldr	r2, [r4, #0]
 8004a98:	68d3      	ldr	r3, [r2, #12]
 8004a9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a9e:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004aa0:	6823      	ldr	r3, [r4, #0]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f013 0f20 	tst.w	r3, #32
 8004aa8:	d01c      	beq.n	8004ae4 <HAL_RTC_SetDate+0xba>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004aaa:	6823      	ldr	r3, [r4, #0]
 8004aac:	22ff      	movs	r2, #255	; 0xff
 8004aae:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	7723      	strb	r3, [r4, #28]
}
 8004ab8:	4630      	mov	r0, r6
 8004aba:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004abc:	78f5      	ldrb	r5, [r6, #3]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004abe:	7870      	ldrb	r0, [r6, #1]
 8004ac0:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004ac2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
                  ((uint32_t)sDate->Date) | \
 8004ac6:	78b5      	ldrb	r5, [r6, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004ac8:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004aca:	7835      	ldrb	r5, [r6, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004acc:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 8004ad0:	e7d0      	b.n	8004a74 <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ad2:	6823      	ldr	r3, [r4, #0]
 8004ad4:	22ff      	movs	r2, #255	; 0xff
 8004ad6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ad8:	2304      	movs	r3, #4
 8004ada:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8004adc:	2300      	movs	r3, #0
 8004ade:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8004ae0:	2601      	movs	r6, #1
 8004ae2:	e7e9      	b.n	8004ab8 <HAL_RTC_SetDate+0x8e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	f7ff fe7d 	bl	80047e4 <HAL_RTC_WaitForSynchro>
 8004aea:	2800      	cmp	r0, #0
 8004aec:	d0dd      	beq.n	8004aaa <HAL_RTC_SetDate+0x80>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	22ff      	movs	r2, #255	; 0xff
 8004af2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004af4:	2304      	movs	r3, #4
 8004af6:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8004af8:	2300      	movs	r3, #0
 8004afa:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8004afc:	2601      	movs	r6, #1
 8004afe:	e7db      	b.n	8004ab8 <HAL_RTC_SetDate+0x8e>
 __HAL_LOCK(hrtc);
 8004b00:	2602      	movs	r6, #2
 8004b02:	e7d9      	b.n	8004ab8 <HAL_RTC_SetDate+0x8e>

08004b04 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004b04:	0903      	lsrs	r3, r0, #4
 8004b06:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8004b0a:	f000 000f 	and.w	r0, r0, #15
 8004b0e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8004b12:	b2c0      	uxtb	r0, r0
 8004b14:	4770      	bx	lr

08004b16 <HAL_RTC_GetTime>:
{
 8004b16:	b570      	push	{r4, r5, r6, lr}
 8004b18:	460c      	mov	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004b1a:	6803      	ldr	r3, [r0, #0]
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1e:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004b20:	6803      	ldr	r3, [r0, #0]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004b28:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004b2a:	6803      	ldr	r3, [r0, #0]
 8004b2c:	681d      	ldr	r5, [r3, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004b2e:	f3c5 4106 	ubfx	r1, r5, #16, #7
 8004b32:	f3c5 4005 	ubfx	r0, r5, #16, #6
 8004b36:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004b38:	f3c5 2606 	ubfx	r6, r5, #8, #7
 8004b3c:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004b3e:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 8004b42:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004b44:	f001 0340 	and.w	r3, r1, #64	; 0x40
 8004b48:	70e3      	strb	r3, [r4, #3]
  if(Format == RTC_FORMAT_BIN)
 8004b4a:	b952      	cbnz	r2, 8004b62 <HAL_RTC_GetTime+0x4c>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004b4c:	f7ff ffda 	bl	8004b04 <RTC_Bcd2ToByte>
 8004b50:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004b52:	4630      	mov	r0, r6
 8004b54:	f7ff ffd6 	bl	8004b04 <RTC_Bcd2ToByte>
 8004b58:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	f7ff ffd2 	bl	8004b04 <RTC_Bcd2ToByte>
 8004b60:	70a0      	strb	r0, [r4, #2]
}
 8004b62:	2000      	movs	r0, #0
 8004b64:	bd70      	pop	{r4, r5, r6, pc}

08004b66 <HAL_RTC_GetDate>:
{
 8004b66:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004b68:	6803      	ldr	r3, [r0, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004b6c:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8004b70:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004b72:	f3c3 2604 	ubfx	r6, r3, #8, #5
 8004b76:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004b78:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 8004b7c:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004b7e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004b82:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8004b84:	b95a      	cbnz	r2, 8004b9e <HAL_RTC_GetDate+0x38>
 8004b86:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004b88:	f7ff ffbc 	bl	8004b04 <RTC_Bcd2ToByte>
 8004b8c:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004b8e:	4630      	mov	r0, r6
 8004b90:	f7ff ffb8 	bl	8004b04 <RTC_Bcd2ToByte>
 8004b94:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004b96:	4628      	mov	r0, r5
 8004b98:	f7ff ffb4 	bl	8004b04 <RTC_Bcd2ToByte>
 8004b9c:	70a0      	strb	r0, [r4, #2]
}
 8004b9e:	2000      	movs	r0, #0
 8004ba0:	bd70      	pop	{r4, r5, r6, pc}

08004ba2 <SD_DMATransmitCplt>:
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004ba2:	6b83      	ldr	r3, [r0, #56]	; 0x38

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8004ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bac:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8004bae:	4770      	bx	lr

08004bb0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004bb0:	b570      	push	{r4, r5, r6, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	9301      	str	r3, [sp, #4]
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004bba:	6800      	ldr	r0, [r0, #0]
 8004bbc:	f001 fd6c 	bl	8006698 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bc0:	4605      	mov	r5, r0
 8004bc2:	b110      	cbz	r0, 8004bca <SD_PowerON+0x1a>
    hsd->SdCard.CardType = CARD_SDSC;
  }


  return HAL_SD_ERROR_NONE;
}
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	b002      	add	sp, #8
 8004bc8:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004bca:	6820      	ldr	r0, [r4, #0]
 8004bcc:	f001 fd77 	bl	80066be <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bd0:	b938      	cbnz	r0, 8004be2 <SD_PowerON+0x32>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	64a3      	str	r3, [r4, #72]	; 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004bd6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d00b      	beq.n	8004bf4 <SD_PowerON+0x44>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004bdc:	462e      	mov	r6, r5
 8004bde:	4628      	mov	r0, r5
 8004be0:	e014      	b.n	8004c0c <SD_PowerON+0x5c>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004be2:	2300      	movs	r3, #0
 8004be4:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004be6:	6820      	ldr	r0, [r4, #0]
 8004be8:	f001 fd56 	bl	8006698 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bec:	2800      	cmp	r0, #0
 8004bee:	d0f2      	beq.n	8004bd6 <SD_PowerON+0x26>
      return errorstate;
 8004bf0:	4605      	mov	r5, r0
 8004bf2:	e7e7      	b.n	8004bc4 <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	6820      	ldr	r0, [r4, #0]
 8004bf8:	f001 fd78 	bl	80066ec <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	d0ed      	beq.n	8004bdc <SD_PowerON+0x2c>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004c00:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8004c04:	e7de      	b.n	8004bc4 <SD_PowerON+0x14>
    count++;
 8004c06:	9b01      	ldr	r3, [sp, #4]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	9301      	str	r3, [sp, #4]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004c0c:	9a01      	ldr	r2, [sp, #4]
 8004c0e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d813      	bhi.n	8004c3e <SD_PowerON+0x8e>
 8004c16:	b996      	cbnz	r6, 8004c3e <SD_PowerON+0x8e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004c18:	2100      	movs	r1, #0
 8004c1a:	6820      	ldr	r0, [r4, #0]
 8004c1c:	f001 fd66 	bl	80066ec <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c20:	b9e0      	cbnz	r0, 8004c5c <SD_PowerON+0xac>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004c22:	4912      	ldr	r1, [pc, #72]	; (8004c6c <SD_PowerON+0xbc>)
 8004c24:	6820      	ldr	r0, [r4, #0]
 8004c26:	f001 fd79 	bl	800671c <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c2a:	4606      	mov	r6, r0
 8004c2c:	b9c0      	cbnz	r0, 8004c60 <SD_PowerON+0xb0>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004c2e:	2100      	movs	r1, #0
 8004c30:	6820      	ldr	r0, [r4, #0]
 8004c32:	f001 fb78 	bl	8006326 <SDIO_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004c36:	0fc3      	lsrs	r3, r0, #31
 8004c38:	d0e5      	beq.n	8004c06 <SD_PowerON+0x56>
 8004c3a:	461e      	mov	r6, r3
 8004c3c:	e7e3      	b.n	8004c06 <SD_PowerON+0x56>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004c3e:	9a01      	ldr	r2, [sp, #4]
 8004c40:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d80e      	bhi.n	8004c66 <SD_PowerON+0xb6>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004c48:	f010 4380 	ands.w	r3, r0, #1073741824	; 0x40000000
 8004c4c:	d002      	beq.n	8004c54 <SD_PowerON+0xa4>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	6463      	str	r3, [r4, #68]	; 0x44
 8004c52:	e7b7      	b.n	8004bc4 <SD_PowerON+0x14>
    hsd->SdCard.CardType = CARD_SDSC;
 8004c54:	2200      	movs	r2, #0
 8004c56:	6462      	str	r2, [r4, #68]	; 0x44
  return HAL_SD_ERROR_NONE;
 8004c58:	461d      	mov	r5, r3
 8004c5a:	e7b3      	b.n	8004bc4 <SD_PowerON+0x14>
      return errorstate;
 8004c5c:	4605      	mov	r5, r0
 8004c5e:	e7b1      	b.n	8004bc4 <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004c60:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8004c64:	e7ae      	b.n	8004bc4 <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004c66:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8004c6a:	e7ab      	b.n	8004bc4 <SD_PowerON+0x14>
 8004c6c:	c1100000 	.word	0xc1100000

08004c70 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004c72:	6a84      	ldr	r4, [r0, #40]	; 0x28
  dataremaining = hsd->RxXferSize;
 8004c74:	6ac6      	ldr	r6, [r0, #44]	; 0x2c

  if (dataremaining > 0U)
 8004c76:	b1ae      	cbz	r6, 8004ca4 <SD_Read_IT+0x34>
 8004c78:	4607      	mov	r7, r0
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004c7a:	2500      	movs	r5, #0
 8004c7c:	e00e      	b.n	8004c9c <SD_Read_IT+0x2c>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004c7e:	6838      	ldr	r0, [r7, #0]
 8004c80:	f001 fb28 	bl	80062d4 <SDIO_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 8004c84:	7020      	strb	r0, [r4, #0]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004c86:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8004c8a:	7063      	strb	r3, [r4, #1]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004c8c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8004c90:	70a3      	strb	r3, [r4, #2]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004c92:	0e00      	lsrs	r0, r0, #24
 8004c94:	70e0      	strb	r0, [r4, #3]
      tmp++;
 8004c96:	3404      	adds	r4, #4
      dataremaining--;
 8004c98:	3e04      	subs	r6, #4
    for(count = 0U; count < 8U; count++)
 8004c9a:	3501      	adds	r5, #1
 8004c9c:	2d07      	cmp	r5, #7
 8004c9e:	d9ee      	bls.n	8004c7e <SD_Read_IT+0xe>
    }

    hsd->pRxBuffPtr = tmp;
 8004ca0:	62bc      	str	r4, [r7, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004ca2:	62fe      	str	r6, [r7, #44]	; 0x2c
  }
}
 8004ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004ca6 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004ca6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ca8:	b083      	sub	sp, #12
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004caa:	6a04      	ldr	r4, [r0, #32]
  dataremaining = hsd->TxXferSize;
 8004cac:	6a46      	ldr	r6, [r0, #36]	; 0x24

  if (dataremaining > 0U)
 8004cae:	b1de      	cbz	r6, 8004ce8 <SD_Write_IT+0x42>
 8004cb0:	4607      	mov	r7, r0
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004cb2:	2500      	movs	r5, #0
 8004cb4:	e014      	b.n	8004ce0 <SD_Write_IT+0x3a>
    {
      data = (uint32_t)(*tmp);
 8004cb6:	7823      	ldrb	r3, [r4, #0]
 8004cb8:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 8U);
 8004cba:	7862      	ldrb	r2, [r4, #1]
 8004cbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004cc0:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 16U);
 8004cc2:	78a2      	ldrb	r2, [r4, #2]
 8004cc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004cc8:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 24U);
 8004cca:	78e2      	ldrb	r2, [r4, #3]
 8004ccc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004cd0:	9301      	str	r3, [sp, #4]
      tmp++;
 8004cd2:	3404      	adds	r4, #4
      dataremaining--;
 8004cd4:	3e04      	subs	r6, #4
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004cd6:	a901      	add	r1, sp, #4
 8004cd8:	6838      	ldr	r0, [r7, #0]
 8004cda:	f001 fafe 	bl	80062da <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004cde:	3501      	adds	r5, #1
 8004ce0:	2d07      	cmp	r5, #7
 8004ce2:	d9e8      	bls.n	8004cb6 <SD_Write_IT+0x10>
    }

    hsd->pTxBuffPtr = tmp;
 8004ce4:	623c      	str	r4, [r7, #32]
    hsd->TxXferSize = dataremaining;
 8004ce6:	627e      	str	r6, [r7, #36]	; 0x24
  }
}
 8004ce8:	b003      	add	sp, #12
 8004cea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004cec <SD_FindSCR>:
{
 8004cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cee:	b089      	sub	sp, #36	; 0x24
 8004cf0:	4604      	mov	r4, r0
 8004cf2:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8004cf4:	f7fc fa14 	bl	8001120 <HAL_GetTick>
 8004cf8:	4606      	mov	r6, r0
  uint32_t tempscr[2U] = {0U, 0U};
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004d00:	2108      	movs	r1, #8
 8004d02:	6820      	ldr	r0, [r4, #0]
 8004d04:	f001 fc1e 	bl	8006544 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d08:	4605      	mov	r5, r0
 8004d0a:	b110      	cbz	r0, 8004d12 <SD_FindSCR+0x26>
}
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	b009      	add	sp, #36	; 0x24
 8004d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004d12:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004d14:	0409      	lsls	r1, r1, #16
 8004d16:	6820      	ldr	r0, [r4, #0]
 8004d18:	f001 fce8 	bl	80066ec <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d1c:	4605      	mov	r5, r0
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	d1f4      	bne.n	8004d0c <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004d22:	f04f 33ff 	mov.w	r3, #4294967295
 8004d26:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8004d28:	2308      	movs	r3, #8
 8004d2a:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004d2c:	2330      	movs	r3, #48	; 0x30
 8004d2e:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004d30:	2302      	movs	r3, #2
 8004d32:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004d34:	2300      	movs	r3, #0
 8004d36:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004d3c:	a902      	add	r1, sp, #8
 8004d3e:	6820      	ldr	r0, [r4, #0]
 8004d40:	f001 fbee 	bl	8006520 <SDIO_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004d44:	6820      	ldr	r0, [r4, #0]
 8004d46:	f001 fd1a 	bl	800677e <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d4a:	4605      	mov	r5, r0
 8004d4c:	b158      	cbz	r0, 8004d66 <SD_FindSCR+0x7a>
 8004d4e:	e7dd      	b.n	8004d0c <SD_FindSCR+0x20>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004d50:	f001 fac0 	bl	80062d4 <SDIO_ReadFIFO>
 8004d54:	f84d 0025 	str.w	r0, [sp, r5, lsl #2]
      index++;
 8004d58:	3501      	adds	r5, #1
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004d5a:	f7fc f9e1 	bl	8001120 <HAL_GetTick>
 8004d5e:	1b83      	subs	r3, r0, r6
 8004d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d64:	d03f      	beq.n	8004de6 <SD_FindSCR+0xfa>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004d66:	6820      	ldr	r0, [r4, #0]
 8004d68:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d6a:	f013 0f2a 	tst.w	r3, #42	; 0x2a
 8004d6e:	d107      	bne.n	8004d80 <SD_FindSCR+0x94>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004d70:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d72:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8004d76:	d1eb      	bne.n	8004d50 <SD_FindSCR+0x64>
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004d78:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d7a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004d7e:	d1ec      	bne.n	8004d5a <SD_FindSCR+0x6e>
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004d80:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d82:	f013 0f08 	tst.w	r3, #8
 8004d86:	d125      	bne.n	8004dd4 <SD_FindSCR+0xe8>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004d88:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d8a:	f013 0f02 	tst.w	r3, #2
 8004d8e:	d124      	bne.n	8004dda <SD_FindSCR+0xee>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004d90:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8004d92:	f015 0520 	ands.w	r5, r5, #32
 8004d96:	d123      	bne.n	8004de0 <SD_FindSCR+0xf4>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004d98:	f240 533a 	movw	r3, #1338	; 0x53a
 8004d9c:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004d9e:	9a01      	ldr	r2, [sp, #4]
 8004da0:	0213      	lsls	r3, r2, #8
 8004da2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004da6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004daa:	0a11      	lsrs	r1, r2, #8
 8004dac:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004db0:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004db2:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004db6:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004db8:	9a00      	ldr	r2, [sp, #0]
 8004dba:	0213      	lsls	r3, r2, #8
 8004dbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004dc0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004dc4:	0a11      	lsrs	r1, r2, #8
 8004dc6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004dca:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004dcc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004dd0:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 8004dd2:	e79b      	b.n	8004d0c <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004dd4:	2508      	movs	r5, #8
 8004dd6:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004dd8:	e798      	b.n	8004d0c <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004dda:	2502      	movs	r5, #2
 8004ddc:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004dde:	e795      	b.n	8004d0c <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004de0:	2520      	movs	r5, #32
 8004de2:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8004de4:	e792      	b.n	8004d0c <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 8004de6:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8004dea:	e78f      	b.n	8004d0c <SD_FindSCR+0x20>

08004dec <SD_WideBus_Enable>:
{
 8004dec:	b510      	push	{r4, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 8004df2:	2100      	movs	r1, #0
 8004df4:	9100      	str	r1, [sp, #0]
 8004df6:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004df8:	6800      	ldr	r0, [r0, #0]
 8004dfa:	f001 fa94 	bl	8006326 <SDIO_GetResponse>
 8004dfe:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8004e02:	d113      	bne.n	8004e2c <SD_WideBus_Enable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 8004e04:	4669      	mov	r1, sp
 8004e06:	4620      	mov	r0, r4
 8004e08:	f7ff ff70 	bl	8004cec <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e0c:	b980      	cbnz	r0, 8004e30 <SD_WideBus_Enable+0x44>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004e0e:	9b01      	ldr	r3, [sp, #4]
 8004e10:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004e14:	d00e      	beq.n	8004e34 <SD_WideBus_Enable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004e16:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004e18:	0409      	lsls	r1, r1, #16
 8004e1a:	6820      	ldr	r0, [r4, #0]
 8004e1c:	f001 fc66 	bl	80066ec <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e20:	b930      	cbnz	r0, 8004e30 <SD_WideBus_Enable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004e22:	2102      	movs	r1, #2
 8004e24:	6820      	ldr	r0, [r4, #0]
 8004e26:	f001 fc92 	bl	800674e <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e2a:	e001      	b.n	8004e30 <SD_WideBus_Enable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004e2c:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 8004e30:	b002      	add	sp, #8
 8004e32:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004e34:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004e38:	e7fa      	b.n	8004e30 <SD_WideBus_Enable+0x44>

08004e3a <SD_WideBus_Disable>:
{
 8004e3a:	b510      	push	{r4, lr}
 8004e3c:	b082      	sub	sp, #8
 8004e3e:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 8004e40:	2100      	movs	r1, #0
 8004e42:	9100      	str	r1, [sp, #0]
 8004e44:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004e46:	6800      	ldr	r0, [r0, #0]
 8004e48:	f001 fa6d 	bl	8006326 <SDIO_GetResponse>
 8004e4c:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8004e50:	d113      	bne.n	8004e7a <SD_WideBus_Disable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 8004e52:	4669      	mov	r1, sp
 8004e54:	4620      	mov	r0, r4
 8004e56:	f7ff ff49 	bl	8004cec <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e5a:	b980      	cbnz	r0, 8004e7e <SD_WideBus_Disable+0x44>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004e5c:	9b01      	ldr	r3, [sp, #4]
 8004e5e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004e62:	d00e      	beq.n	8004e82 <SD_WideBus_Disable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004e64:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004e66:	0409      	lsls	r1, r1, #16
 8004e68:	6820      	ldr	r0, [r4, #0]
 8004e6a:	f001 fc3f 	bl	80066ec <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e6e:	b930      	cbnz	r0, 8004e7e <SD_WideBus_Disable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004e70:	2100      	movs	r1, #0
 8004e72:	6820      	ldr	r0, [r4, #0]
 8004e74:	f001 fc6b 	bl	800674e <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e78:	e001      	b.n	8004e7e <SD_WideBus_Disable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004e7a:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 8004e7e:	b002      	add	sp, #8
 8004e80:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004e82:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004e86:	e7fa      	b.n	8004e7e <SD_WideBus_Disable+0x44>

08004e88 <SD_SendStatus>:
{
 8004e88:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 8004e8a:	b181      	cbz	r1, 8004eae <SD_SendStatus+0x26>
 8004e8c:	4604      	mov	r4, r0
 8004e8e:	460e      	mov	r6, r1
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004e90:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8004e92:	0409      	lsls	r1, r1, #16
 8004e94:	6800      	ldr	r0, [r0, #0]
 8004e96:	f001 fccc 	bl	8006832 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e9a:	4605      	mov	r5, r0
 8004e9c:	b108      	cbz	r0, 8004ea2 <SD_SendStatus+0x1a>
}
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	6820      	ldr	r0, [r4, #0]
 8004ea6:	f001 fa3e 	bl	8006326 <SDIO_GetResponse>
 8004eaa:	6030      	str	r0, [r6, #0]
  return HAL_SD_ERROR_NONE;
 8004eac:	e7f7      	b.n	8004e9e <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 8004eae:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 8004eb2:	e7f4      	b.n	8004e9e <SD_SendStatus+0x16>

08004eb4 <HAL_SD_ReadBlocks_DMA>:
{
 8004eb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004eb8:	b087      	sub	sp, #28
 8004eba:	4604      	mov	r4, r0
  if(NULL == pData)
 8004ebc:	b191      	cbz	r1, 8004ee4 <HAL_SD_ReadBlocks_DMA+0x30>
 8004ebe:	4616      	mov	r6, r2
 8004ec0:	461f      	mov	r7, r3
 8004ec2:	460a      	mov	r2, r1
  if(hsd->State == HAL_SD_STATE_READY)
 8004ec4:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
 8004ec8:	b2ed      	uxtb	r5, r5
 8004eca:	2d01      	cmp	r5, #1
 8004ecc:	d17e      	bne.n	8004fcc <HAL_SD_ReadBlocks_DMA+0x118>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	6383      	str	r3, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004ed2:	19f1      	adds	r1, r6, r7
 8004ed4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8004ed6:	4299      	cmp	r1, r3
 8004ed8:	d90a      	bls.n	8004ef0 <HAL_SD_ReadBlocks_DMA+0x3c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004eda:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004edc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ee0:	6383      	str	r3, [r0, #56]	; 0x38
      return HAL_ERROR;
 8004ee2:	e074      	b.n	8004fce <HAL_SD_ReadBlocks_DMA+0x11a>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004ee4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004ee6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004eea:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8004eec:	2501      	movs	r5, #1
 8004eee:	e06e      	b.n	8004fce <HAL_SD_ReadBlocks_DMA+0x11a>
    hsd->State = HAL_SD_STATE_BUSY;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8004ef6:	6803      	ldr	r3, [r0, #0]
 8004ef8:	2100      	movs	r1, #0
 8004efa:	62d9      	str	r1, [r3, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8004efc:	6800      	ldr	r0, [r0, #0]
 8004efe:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004f00:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8004f04:	f043 0302 	orr.w	r3, r3, #2
 8004f08:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004f0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f0c:	4833      	ldr	r0, [pc, #204]	; (8004fdc <HAL_SD_ReadBlocks_DMA+0x128>)
 8004f0e:	63d8      	str	r0, [r3, #60]	; 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004f10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f12:	4833      	ldr	r0, [pc, #204]	; (8004fe0 <HAL_SD_ReadBlocks_DMA+0x12c>)
 8004f14:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->hdmarx->XferAbortCallback = NULL;
 8004f16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f18:	6519      	str	r1, [r3, #80]	; 0x50
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004f1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f1c:	6099      	str	r1, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8004f1e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004f20:	6801      	ldr	r1, [r0, #0]
 8004f22:	680b      	ldr	r3, [r1, #0]
 8004f24:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004f28:	6880      	ldr	r0, [r0, #8]
 8004f2a:	4303      	orrs	r3, r0
 8004f2c:	600b      	str	r3, [r1, #0]
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004f2e:	6821      	ldr	r1, [r4, #0]
 8004f30:	ea4f 2947 	mov.w	r9, r7, lsl #9
 8004f34:	ea4f 0399 	mov.w	r3, r9, lsr #2
 8004f38:	3180      	adds	r1, #128	; 0x80
 8004f3a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004f3c:	f7fc fd2e 	bl	800199c <HAL_DMA_Start_IT>
 8004f40:	4680      	mov	r8, r0
 8004f42:	bb60      	cbnz	r0, 8004f9e <HAL_SD_ReadBlocks_DMA+0xea>
      __HAL_SD_DMA_ENABLE(hsd);
 8004f44:	4b27      	ldr	r3, [pc, #156]	; (8004fe4 <HAL_SD_ReadBlocks_DMA+0x130>)
 8004f46:	2201      	movs	r2, #1
 8004f48:	601a      	str	r2, [r3, #0]
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004f4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d000      	beq.n	8004f52 <HAL_SD_ReadBlocks_DMA+0x9e>
        add *= 512U;
 8004f50:	0276      	lsls	r6, r6, #9
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004f52:	f04f 33ff 	mov.w	r3, #4294967295
 8004f56:	9300      	str	r3, [sp, #0]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004f58:	f8cd 9004 	str.w	r9, [sp, #4]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004f5c:	2390      	movs	r3, #144	; 0x90
 8004f5e:	9302      	str	r3, [sp, #8]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004f60:	2302      	movs	r3, #2
 8004f62:	9303      	str	r3, [sp, #12]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004f64:	2300      	movs	r3, #0
 8004f66:	9304      	str	r3, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004f6c:	4669      	mov	r1, sp
 8004f6e:	6820      	ldr	r0, [r4, #0]
 8004f70:	f001 fad6 	bl	8006520 <SDIO_ConfigData>
      if(NumberOfBlocks > 1U)
 8004f74:	2f01      	cmp	r7, #1
 8004f76:	d922      	bls.n	8004fbe <HAL_SD_ReadBlocks_DMA+0x10a>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004f78:	2382      	movs	r3, #130	; 0x82
 8004f7a:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004f7c:	4631      	mov	r1, r6
 8004f7e:	6820      	ldr	r0, [r4, #0]
 8004f80:	f001 fb10 	bl	80065a4 <SDMMC_CmdReadMultiBlock>
      if(errorstate != HAL_SD_ERROR_NONE)
 8004f84:	b338      	cbz	r0, 8004fd6 <HAL_SD_ReadBlocks_DMA+0x122>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	4a17      	ldr	r2, [pc, #92]	; (8004fe8 <HAL_SD_ReadBlocks_DMA+0x134>)
 8004f8a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004f8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f8e:	4318      	orrs	r0, r3
 8004f90:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004f92:	2301      	movs	r3, #1
 8004f94:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 8004f9c:	e017      	b.n	8004fce <HAL_SD_ReadBlocks_DMA+0x11a>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8004f9e:	6822      	ldr	r2, [r4, #0]
 8004fa0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8004fa2:	f423 7395 	bic.w	r3, r3, #298	; 0x12a
 8004fa6:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004fa8:	6823      	ldr	r3, [r4, #0]
 8004faa:	4a0f      	ldr	r2, [pc, #60]	; (8004fe8 <HAL_SD_ReadBlocks_DMA+0x134>)
 8004fac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004fae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004fb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fb4:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 8004fbc:	e007      	b.n	8004fce <HAL_SD_ReadBlocks_DMA+0x11a>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004fbe:	2381      	movs	r3, #129	; 0x81
 8004fc0:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004fc2:	4631      	mov	r1, r6
 8004fc4:	6820      	ldr	r0, [r4, #0]
 8004fc6:	f001 fad5 	bl	8006574 <SDMMC_CmdReadSingleBlock>
 8004fca:	e7db      	b.n	8004f84 <HAL_SD_ReadBlocks_DMA+0xd0>
    return HAL_BUSY;
 8004fcc:	2502      	movs	r5, #2
}
 8004fce:	4628      	mov	r0, r5
 8004fd0:	b007      	add	sp, #28
 8004fd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_OK;
 8004fd6:	4645      	mov	r5, r8
 8004fd8:	e7f9      	b.n	8004fce <HAL_SD_ReadBlocks_DMA+0x11a>
 8004fda:	bf00      	nop
 8004fdc:	08005127 	.word	0x08005127
 8004fe0:	08005609 	.word	0x08005609
 8004fe4:	4225858c 	.word	0x4225858c
 8004fe8:	004005ff 	.word	0x004005ff

08004fec <HAL_SD_WriteBlocks_DMA>:
{
 8004fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	4604      	mov	r4, r0
  if(NULL == pData)
 8004ff2:	2900      	cmp	r1, #0
 8004ff4:	d03b      	beq.n	800506e <HAL_SD_WriteBlocks_DMA+0x82>
 8004ff6:	461e      	mov	r6, r3
 8004ff8:	460f      	mov	r7, r1
  if(hsd->State == HAL_SD_STATE_READY)
 8004ffa:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
 8004ffe:	b2ed      	uxtb	r5, r5
 8005000:	2d01      	cmp	r5, #1
 8005002:	f040 8083 	bne.w	800510c <HAL_SD_WriteBlocks_DMA+0x120>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005006:	2300      	movs	r3, #0
 8005008:	6383      	str	r3, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800500a:	1993      	adds	r3, r2, r6
 800500c:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 800500e:	428b      	cmp	r3, r1
 8005010:	d833      	bhi.n	800507a <HAL_SD_WriteBlocks_DMA+0x8e>
    hsd->State = HAL_SD_STATE_BUSY;
 8005012:	2303      	movs	r3, #3
 8005014:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8005018:	6803      	ldr	r3, [r0, #0]
 800501a:	2100      	movs	r1, #0
 800501c:	62d9      	str	r1, [r3, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800501e:	6800      	ldr	r0, [r0, #0]
 8005020:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005022:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8005026:	f043 0302 	orr.w	r3, r3, #2
 800502a:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800502c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800502e:	4839      	ldr	r0, [pc, #228]	; (8005114 <HAL_SD_WriteBlocks_DMA+0x128>)
 8005030:	63d8      	str	r0, [r3, #60]	; 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8005032:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005034:	4838      	ldr	r0, [pc, #224]	; (8005118 <HAL_SD_WriteBlocks_DMA+0x12c>)
 8005036:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->hdmatx->XferAbortCallback = NULL;
 8005038:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800503a:	6519      	str	r1, [r3, #80]	; 0x50
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800503c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800503e:	2b01      	cmp	r3, #1
 8005040:	d000      	beq.n	8005044 <HAL_SD_WriteBlocks_DMA+0x58>
      add *= 512U;
 8005042:	0252      	lsls	r2, r2, #9
    if(NumberOfBlocks > 1U)
 8005044:	2e01      	cmp	r6, #1
 8005046:	d91d      	bls.n	8005084 <HAL_SD_WriteBlocks_DMA+0x98>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005048:	23a0      	movs	r3, #160	; 0xa0
 800504a:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800504c:	4611      	mov	r1, r2
 800504e:	6820      	ldr	r0, [r4, #0]
 8005050:	f001 fad8 	bl	8006604 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005054:	b1e8      	cbz	r0, 8005092 <HAL_SD_WriteBlocks_DMA+0xa6>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005056:	6823      	ldr	r3, [r4, #0]
 8005058:	4a30      	ldr	r2, [pc, #192]	; (800511c <HAL_SD_WriteBlocks_DMA+0x130>)
 800505a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800505c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800505e:	4318      	orrs	r0, r3
 8005060:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005062:	2301      	movs	r3, #1
 8005064:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005068:	2300      	movs	r3, #0
 800506a:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800506c:	e04f      	b.n	800510e <HAL_SD_WriteBlocks_DMA+0x122>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800506e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005070:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005074:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8005076:	2501      	movs	r5, #1
 8005078:	e049      	b.n	800510e <HAL_SD_WriteBlocks_DMA+0x122>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800507a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800507c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005080:	6383      	str	r3, [r0, #56]	; 0x38
      return HAL_ERROR;
 8005082:	e044      	b.n	800510e <HAL_SD_WriteBlocks_DMA+0x122>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005084:	2390      	movs	r3, #144	; 0x90
 8005086:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005088:	4611      	mov	r1, r2
 800508a:	6820      	ldr	r0, [r4, #0]
 800508c:	f001 faa2 	bl	80065d4 <SDMMC_CmdWriteSingleBlock>
 8005090:	e7e0      	b.n	8005054 <HAL_SD_WriteBlocks_DMA+0x68>
    __HAL_SD_DMA_ENABLE(hsd);
 8005092:	4b23      	ldr	r3, [pc, #140]	; (8005120 <HAL_SD_WriteBlocks_DMA+0x134>)
 8005094:	2201      	movs	r2, #1
 8005096:	601a      	str	r2, [r3, #0]
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005098:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800509a:	2240      	movs	r2, #64	; 0x40
 800509c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800509e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80050a0:	680a      	ldr	r2, [r1, #0]
 80050a2:	6813      	ldr	r3, [r2, #0]
 80050a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80050a8:	6889      	ldr	r1, [r1, #8]
 80050aa:	430b      	orrs	r3, r1
 80050ac:	6013      	str	r3, [r2, #0]
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80050ae:	6822      	ldr	r2, [r4, #0]
 80050b0:	0276      	lsls	r6, r6, #9
 80050b2:	08b3      	lsrs	r3, r6, #2
 80050b4:	3280      	adds	r2, #128	; 0x80
 80050b6:	4639      	mov	r1, r7
 80050b8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80050ba:	f7fc fc6f 	bl	800199c <HAL_DMA_Start_IT>
 80050be:	4607      	mov	r7, r0
 80050c0:	b198      	cbz	r0, 80050ea <HAL_SD_WriteBlocks_DMA+0xfe>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80050c2:	6822      	ldr	r2, [r4, #0]
 80050c4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80050c6:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80050ca:	f023 0302 	bic.w	r3, r3, #2
 80050ce:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80050d0:	6823      	ldr	r3, [r4, #0]
 80050d2:	4a12      	ldr	r2, [pc, #72]	; (800511c <HAL_SD_WriteBlocks_DMA+0x130>)
 80050d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80050d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050dc:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80050de:	2301      	movs	r3, #1
 80050e0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80050e4:	2300      	movs	r3, #0
 80050e6:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80050e8:	e011      	b.n	800510e <HAL_SD_WriteBlocks_DMA+0x122>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80050ea:	f04f 33ff 	mov.w	r3, #4294967295
 80050ee:	9300      	str	r3, [sp, #0]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80050f0:	9601      	str	r6, [sp, #4]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80050f2:	2390      	movs	r3, #144	; 0x90
 80050f4:	9302      	str	r3, [sp, #8]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80050f6:	2300      	movs	r3, #0
 80050f8:	9303      	str	r3, [sp, #12]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80050fa:	9304      	str	r3, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80050fc:	2301      	movs	r3, #1
 80050fe:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8005100:	4669      	mov	r1, sp
 8005102:	6820      	ldr	r0, [r4, #0]
 8005104:	f001 fa0c 	bl	8006520 <SDIO_ConfigData>
      return HAL_OK;
 8005108:	463d      	mov	r5, r7
 800510a:	e000      	b.n	800510e <HAL_SD_WriteBlocks_DMA+0x122>
    return HAL_BUSY;
 800510c:	2502      	movs	r5, #2
}
 800510e:	4628      	mov	r0, r5
 8005110:	b007      	add	sp, #28
 8005112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005114:	08004ba3 	.word	0x08004ba3
 8005118:	08005609 	.word	0x08005609
 800511c:	004005ff 	.word	0x004005ff
 8005120:	4225858c 	.word	0x4225858c

08005124 <HAL_SD_ErrorCallback>:
}
 8005124:	4770      	bx	lr

08005126 <SD_DMAReceiveCplt>:
{
 8005126:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005128:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800512a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800512c:	2b82      	cmp	r3, #130	; 0x82
 800512e:	d011      	beq.n	8005154 <SD_DMAReceiveCplt+0x2e>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005130:	6822      	ldr	r2, [r4, #0]
 8005132:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005134:	f023 0308 	bic.w	r3, r3, #8
 8005138:	62d3      	str	r3, [r2, #44]	; 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	f240 523a 	movw	r2, #1338	; 0x53a
 8005140:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8005142:	2301      	movs	r3, #1
 8005144:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005148:	2300      	movs	r3, #0
 800514a:	6323      	str	r3, [r4, #48]	; 0x30
  HAL_SD_RxCpltCallback(hsd);
 800514c:	4620      	mov	r0, r4
 800514e:	f005 fb66 	bl	800a81e <HAL_SD_RxCpltCallback>
}
 8005152:	bd10      	pop	{r4, pc}
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005154:	6820      	ldr	r0, [r4, #0]
 8005156:	f001 fa6d 	bl	8006634 <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 800515a:	4603      	mov	r3, r0
 800515c:	2800      	cmp	r0, #0
 800515e:	d0e7      	beq.n	8005130 <SD_DMAReceiveCplt+0xa>
      hsd->ErrorCode |= errorstate;
 8005160:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005162:	4313      	orrs	r3, r2
 8005164:	63a3      	str	r3, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 8005166:	4620      	mov	r0, r4
 8005168:	f7ff ffdc 	bl	8005124 <HAL_SD_ErrorCallback>
 800516c:	e7e0      	b.n	8005130 <SD_DMAReceiveCplt+0xa>
	...

08005170 <HAL_SD_GetCardCSD>:
{
 8005170:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005172:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005174:	0f9b      	lsrs	r3, r3, #30
 8005176:	700b      	strb	r3, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005178:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800517a:	f3c3 6383 	ubfx	r3, r3, #26, #4
 800517e:	704b      	strb	r3, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005180:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
 8005184:	f003 0303 	and.w	r3, r3, #3
 8005188:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800518a:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 800518e:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005190:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
 8005194:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005196:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 800519a:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800519c:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800519e:	0d1b      	lsrs	r3, r3, #20
 80051a0:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80051a2:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 80051a6:	f003 030f 	and.w	r3, r3, #15
 80051aa:	720b      	strb	r3, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80051ac:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80051ae:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 80051b2:	724b      	strb	r3, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80051b4:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80051b6:	f3c3 3380 	ubfx	r3, r3, #14, #1
 80051ba:	728b      	strb	r3, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80051bc:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80051be:	f3c3 3340 	ubfx	r3, r3, #13, #1
 80051c2:	72cb      	strb	r3, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80051c4:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80051c6:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80051ca:	730b      	strb	r3, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80051cc:	2300      	movs	r3, #0
 80051ce:	734b      	strb	r3, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 80051d0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f040 8088 	bne.w	80052e8 <HAL_SD_GetCardCSD+0x178>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80051d8:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80051da:	f640 73fc 	movw	r3, #4092	; 0xffc
 80051de:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 80051e2:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80051e4:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 80051e8:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80051ea:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80051ec:	f3c3 63c2 	ubfx	r3, r3, #27, #3
 80051f0:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80051f2:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80051fc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80051fe:	f3c3 5342 	ubfx	r3, r3, #21, #3
 8005202:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005204:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005206:	f3c3 4382 	ubfx	r3, r3, #18, #3
 800520a:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800520c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800520e:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 8005212:	760b      	strb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005214:	690b      	ldr	r3, [r1, #16]
 8005216:	3301      	adds	r3, #1
 8005218:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800521a:	7e0a      	ldrb	r2, [r1, #24]
 800521c:	f002 0207 	and.w	r2, r2, #7
 8005220:	3202      	adds	r2, #2
 8005222:	fa03 f202 	lsl.w	r2, r3, r2
 8005226:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005228:	7a0b      	ldrb	r3, [r1, #8]
 800522a:	f003 040f 	and.w	r4, r3, #15
 800522e:	2301      	movs	r3, #1
 8005230:	40a3      	lsls	r3, r4
 8005232:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005234:	0a5b      	lsrs	r3, r3, #9
 8005236:	fb03 f302 	mul.w	r3, r3, r2
 800523a:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800523c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005240:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005242:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005244:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8005248:	764b      	strb	r3, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800524a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800524c:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 8005250:	768b      	strb	r3, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005252:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005254:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005258:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800525a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800525c:	0fdb      	lsrs	r3, r3, #31
 800525e:	770b      	strb	r3, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005260:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8005262:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8005266:	774b      	strb	r3, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005268:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800526a:	f3c3 6382 	ubfx	r3, r3, #26, #3
 800526e:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005270:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8005272:	f3c3 5383 	ubfx	r3, r3, #22, #4
 8005276:	77cb      	strb	r3, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005278:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800527a:	f3c3 5340 	ubfx	r3, r3, #21, #1
 800527e:	f881 3020 	strb.w	r3, [r1, #32]
  pCSD->Reserved3 = 0;
 8005282:	2300      	movs	r3, #0
 8005284:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005288:	f8b0 2072 	ldrh.w	r2, [r0, #114]	; 0x72
 800528c:	f002 0201 	and.w	r2, r2, #1
 8005290:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005294:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8005296:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800529a:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800529e:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80052a0:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80052a4:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80052a8:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80052aa:	f3c2 3240 	ubfx	r2, r2, #13, #1
 80052ae:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80052b2:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80052b4:	f3c2 3200 	ubfx	r2, r2, #12, #1
 80052b8:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80052bc:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80052be:	f3c2 2281 	ubfx	r2, r2, #10, #2
 80052c2:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80052c6:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80052c8:	f3c2 2201 	ubfx	r2, r2, #8, #2
 80052cc:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80052d0:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80052d2:	f3c2 0246 	ubfx	r2, r2, #1, #7
 80052d6:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80052da:	2201      	movs	r2, #1
 80052dc:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
  return HAL_OK;
 80052e0:	4618      	mov	r0, r3
}
 80052e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052e6:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d111      	bne.n	8005310 <HAL_SD_GetCardCSD+0x1a0>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80052ec:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80052ee:	041b      	lsls	r3, r3, #16
 80052f0:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80052f4:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 80052f8:	4313      	orrs	r3, r2
 80052fa:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80052fc:	690b      	ldr	r3, [r1, #16]
 80052fe:	3301      	adds	r3, #1
 8005300:	029b      	lsls	r3, r3, #10
 8005302:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005304:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005306:	f44f 7300 	mov.w	r3, #512	; 0x200
 800530a:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800530c:	6603      	str	r3, [r0, #96]	; 0x60
 800530e:	e798      	b.n	8005242 <HAL_SD_GetCardCSD+0xd2>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005310:	6803      	ldr	r3, [r0, #0]
 8005312:	4a05      	ldr	r2, [pc, #20]	; (8005328 <HAL_SD_GetCardCSD+0x1b8>)
 8005314:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005316:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800531c:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800531e:	2301      	movs	r3, #1
 8005320:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8005324:	4618      	mov	r0, r3
 8005326:	e7dc      	b.n	80052e2 <HAL_SD_GetCardCSD+0x172>
 8005328:	004005ff 	.word	0x004005ff

0800532c <SD_InitCard>:
{
 800532c:	b570      	push	{r4, r5, r6, lr}
 800532e:	b090      	sub	sp, #64	; 0x40
 8005330:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 8005332:	2301      	movs	r3, #1
 8005334:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005338:	6800      	ldr	r0, [r0, #0]
 800533a:	f000 ffdb 	bl	80062f4 <SDIO_GetPowerState>
 800533e:	2800      	cmp	r0, #0
 8005340:	d06c      	beq.n	800541c <SD_InitCard+0xf0>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005342:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005344:	2b03      	cmp	r3, #3
 8005346:	d145      	bne.n	80053d4 <SD_InitCard+0xa8>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005348:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800534a:	2b03      	cmp	r3, #3
 800534c:	d15d      	bne.n	800540a <SD_InitCard+0xde>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800534e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005350:	2b03      	cmp	r3, #3
 8005352:	d01d      	beq.n	8005390 <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 8005354:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8005358:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800535a:	0409      	lsls	r1, r1, #16
 800535c:	6820      	ldr	r0, [r4, #0]
 800535e:	f001 fa3b 	bl	80067d8 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005362:	4605      	mov	r5, r0
 8005364:	2800      	cmp	r0, #0
 8005366:	d15b      	bne.n	8005420 <SD_InitCard+0xf4>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005368:	2100      	movs	r1, #0
 800536a:	6820      	ldr	r0, [r4, #0]
 800536c:	f000 ffdb 	bl	8006326 <SDIO_GetResponse>
 8005370:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005372:	2104      	movs	r1, #4
 8005374:	6820      	ldr	r0, [r4, #0]
 8005376:	f000 ffd6 	bl	8006326 <SDIO_GetResponse>
 800537a:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800537c:	2108      	movs	r1, #8
 800537e:	6820      	ldr	r0, [r4, #0]
 8005380:	f000 ffd1 	bl	8006326 <SDIO_GetResponse>
 8005384:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005386:	210c      	movs	r1, #12
 8005388:	6820      	ldr	r0, [r4, #0]
 800538a:	f000 ffcc 	bl	8006326 <SDIO_GetResponse>
 800538e:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005390:	2104      	movs	r1, #4
 8005392:	6820      	ldr	r0, [r4, #0]
 8005394:	f000 ffc7 	bl	8006326 <SDIO_GetResponse>
 8005398:	0d00      	lsrs	r0, r0, #20
 800539a:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800539c:	a905      	add	r1, sp, #20
 800539e:	4620      	mov	r0, r4
 80053a0:	f7ff fee6 	bl	8005170 <HAL_SD_GetCardCSD>
 80053a4:	2800      	cmp	r0, #0
 80053a6:	d13e      	bne.n	8005426 <SD_InitCard+0xfa>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80053a8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80053aa:	0412      	lsls	r2, r2, #16
 80053ac:	2300      	movs	r3, #0
 80053ae:	6820      	ldr	r0, [r4, #0]
 80053b0:	f001 f95a 	bl	8006668 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80053b4:	4605      	mov	r5, r0
 80053b6:	bb98      	cbnz	r0, 8005420 <SD_InitCard+0xf4>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80053b8:	4623      	mov	r3, r4
 80053ba:	f853 6b10 	ldr.w	r6, [r3], #16
 80053be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80053c2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80053c6:	3404      	adds	r4, #4
 80053c8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80053cc:	4630      	mov	r0, r6
 80053ce:	f000 ff65 	bl	800629c <SDIO_Init>
  return HAL_SD_ERROR_NONE;
 80053d2:	e025      	b.n	8005420 <SD_InitCard+0xf4>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80053d4:	6820      	ldr	r0, [r4, #0]
 80053d6:	f001 f9ea 	bl	80067ae <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 80053da:	4605      	mov	r5, r0
 80053dc:	bb00      	cbnz	r0, 8005420 <SD_InitCard+0xf4>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80053de:	2100      	movs	r1, #0
 80053e0:	6820      	ldr	r0, [r4, #0]
 80053e2:	f000 ffa0 	bl	8006326 <SDIO_GetResponse>
 80053e6:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80053e8:	2104      	movs	r1, #4
 80053ea:	6820      	ldr	r0, [r4, #0]
 80053ec:	f000 ff9b 	bl	8006326 <SDIO_GetResponse>
 80053f0:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80053f2:	2108      	movs	r1, #8
 80053f4:	6820      	ldr	r0, [r4, #0]
 80053f6:	f000 ff96 	bl	8006326 <SDIO_GetResponse>
 80053fa:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80053fc:	210c      	movs	r1, #12
 80053fe:	6820      	ldr	r0, [r4, #0]
 8005400:	f000 ff91 	bl	8006326 <SDIO_GetResponse>
 8005404:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 8005408:	e79e      	b.n	8005348 <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800540a:	f10d 0112 	add.w	r1, sp, #18
 800540e:	6820      	ldr	r0, [r4, #0]
 8005410:	f001 f9f7 	bl	8006802 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005414:	4605      	mov	r5, r0
 8005416:	2800      	cmp	r0, #0
 8005418:	d099      	beq.n	800534e <SD_InitCard+0x22>
 800541a:	e001      	b.n	8005420 <SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800541c:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 8005420:	4628      	mov	r0, r5
 8005422:	b010      	add	sp, #64	; 0x40
 8005424:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005426:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800542a:	e7f9      	b.n	8005420 <SD_InitCard+0xf4>

0800542c <HAL_SD_InitCard>:
{
 800542c:	b570      	push	{r4, r5, r6, lr}
 800542e:	b08a      	sub	sp, #40	; 0x28
 8005430:	4604      	mov	r4, r0
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005432:	2300      	movs	r3, #0
 8005434:	9304      	str	r3, [sp, #16]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005436:	9305      	str	r3, [sp, #20]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005438:	9306      	str	r3, [sp, #24]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800543a:	9307      	str	r3, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800543c:	9308      	str	r3, [sp, #32]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800543e:	2376      	movs	r3, #118	; 0x76
 8005440:	9309      	str	r3, [sp, #36]	; 0x24
  status = SDIO_Init(hsd->Instance, Init);
 8005442:	ab0a      	add	r3, sp, #40	; 0x28
 8005444:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8005448:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800544c:	ab04      	add	r3, sp, #16
 800544e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005450:	6820      	ldr	r0, [r4, #0]
 8005452:	f000 ff23 	bl	800629c <SDIO_Init>
  if(status != HAL_OK)
 8005456:	b118      	cbz	r0, 8005460 <HAL_SD_InitCard+0x34>
    return HAL_ERROR;
 8005458:	2501      	movs	r5, #1
}
 800545a:	4628      	mov	r0, r5
 800545c:	b00a      	add	sp, #40	; 0x28
 800545e:	bd70      	pop	{r4, r5, r6, pc}
 8005460:	4605      	mov	r5, r0
  __HAL_SD_DISABLE(hsd);
 8005462:	4e17      	ldr	r6, [pc, #92]	; (80054c0 <HAL_SD_InitCard+0x94>)
 8005464:	2300      	movs	r3, #0
 8005466:	6033      	str	r3, [r6, #0]
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005468:	6820      	ldr	r0, [r4, #0]
 800546a:	f000 ff3b 	bl	80062e4 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 800546e:	2301      	movs	r3, #1
 8005470:	6033      	str	r3, [r6, #0]
  errorstate = SD_PowerON(hsd);
 8005472:	4620      	mov	r0, r4
 8005474:	f7ff fb9c 	bl	8004bb0 <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005478:	b130      	cbz	r0, 8005488 <HAL_SD_InitCard+0x5c>
    hsd->State = HAL_SD_STATE_READY;
 800547a:	2501      	movs	r5, #1
 800547c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005480:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005482:	4303      	orrs	r3, r0
 8005484:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8005486:	e7e8      	b.n	800545a <HAL_SD_InitCard+0x2e>
  errorstate = SD_InitCard(hsd);
 8005488:	4620      	mov	r0, r4
 800548a:	f7ff ff4f 	bl	800532c <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 800548e:	b130      	cbz	r0, 800549e <HAL_SD_InitCard+0x72>
    hsd->State = HAL_SD_STATE_READY;
 8005490:	2501      	movs	r5, #1
 8005492:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005496:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005498:	4303      	orrs	r3, r0
 800549a:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800549c:	e7dd      	b.n	800545a <HAL_SD_InitCard+0x2e>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800549e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80054a2:	6820      	ldr	r0, [r4, #0]
 80054a4:	f001 f84e 	bl	8006544 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80054a8:	2800      	cmp	r0, #0
 80054aa:	d0d6      	beq.n	800545a <HAL_SD_InitCard+0x2e>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	4905      	ldr	r1, [pc, #20]	; (80054c4 <HAL_SD_InitCard+0x98>)
 80054b0:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80054b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80054b4:	4303      	orrs	r3, r0
 80054b6:	63a3      	str	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80054b8:	2501      	movs	r5, #1
 80054ba:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    return HAL_ERROR;
 80054be:	e7cc      	b.n	800545a <HAL_SD_InitCard+0x2e>
 80054c0:	422580a0 	.word	0x422580a0
 80054c4:	004005ff 	.word	0x004005ff

080054c8 <HAL_SD_Init>:
  if(hsd == NULL)
 80054c8:	b1a8      	cbz	r0, 80054f6 <HAL_SD_Init+0x2e>
{
 80054ca:	b510      	push	{r4, lr}
 80054cc:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 80054ce:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80054d2:	b163      	cbz	r3, 80054ee <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_BUSY;
 80054d4:	2303      	movs	r3, #3
 80054d6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80054da:	4620      	mov	r0, r4
 80054dc:	f7ff ffa6 	bl	800542c <HAL_SD_InitCard>
 80054e0:	b958      	cbnz	r0, 80054fa <HAL_SD_Init+0x32>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80054e2:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 80054e4:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 80054e6:	2301      	movs	r3, #1
 80054e8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80054ec:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 80054ee:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 80054f0:	f005 fe8e 	bl	800b210 <HAL_SD_MspInit>
 80054f4:	e7ee      	b.n	80054d4 <HAL_SD_Init+0xc>
    return HAL_ERROR;
 80054f6:	2001      	movs	r0, #1
}
 80054f8:	4770      	bx	lr
    return HAL_ERROR;
 80054fa:	2001      	movs	r0, #1
 80054fc:	e7f6      	b.n	80054ec <HAL_SD_Init+0x24>

080054fe <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80054fe:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005500:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005502:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005504:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005506:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005508:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800550a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800550c:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800550e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005510:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005512:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005514:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005516:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005518:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800551a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800551c:	61cb      	str	r3, [r1, #28]
}
 800551e:	2000      	movs	r0, #0
 8005520:	4770      	bx	lr
	...

08005524 <HAL_SD_ConfigWideBusOperation>:
{
 8005524:	b530      	push	{r4, r5, lr}
 8005526:	b08b      	sub	sp, #44	; 0x2c
 8005528:	4604      	mov	r4, r0
 800552a:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 800552c:	2303      	movs	r3, #3
 800552e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005532:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005534:	2b03      	cmp	r3, #3
 8005536:	d01c      	beq.n	8005572 <HAL_SD_ConfigWideBusOperation+0x4e>
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005538:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800553c:	d008      	beq.n	8005550 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800553e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8005542:	d00a      	beq.n	800555a <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005544:	b179      	cbz	r1, 8005566 <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005546:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005548:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800554c:	6383      	str	r3, [r0, #56]	; 0x38
 800554e:	e014      	b.n	800557a <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005550:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005556:	6383      	str	r3, [r0, #56]	; 0x38
 8005558:	e00f      	b.n	800557a <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 800555a:	f7ff fc47 	bl	8004dec <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 800555e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005560:	4303      	orrs	r3, r0
 8005562:	63a3      	str	r3, [r4, #56]	; 0x38
 8005564:	e009      	b.n	800557a <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 8005566:	f7ff fc68 	bl	8004e3a <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 800556a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800556c:	4303      	orrs	r3, r0
 800556e:	63a3      	str	r3, [r4, #56]	; 0x38
 8005570:	e003      	b.n	800557a <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005572:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005578:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800557a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800557c:	b1c3      	cbz	r3, 80055b0 <HAL_SD_ConfigWideBusOperation+0x8c>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800557e:	6823      	ldr	r3, [r4, #0]
 8005580:	4a17      	ldr	r2, [pc, #92]	; (80055e0 <HAL_SD_ConfigWideBusOperation+0xbc>)
 8005582:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005584:	2501      	movs	r5, #1
 8005586:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800558a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800558e:	6820      	ldr	r0, [r4, #0]
 8005590:	f000 ffd8 	bl	8006544 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005594:	b130      	cbz	r0, 80055a4 <HAL_SD_ConfigWideBusOperation+0x80>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	4911      	ldr	r1, [pc, #68]	; (80055e0 <HAL_SD_ConfigWideBusOperation+0xbc>)
 800559a:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800559c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800559e:	4303      	orrs	r3, r0
 80055a0:	63a3      	str	r3, [r4, #56]	; 0x38
    status = HAL_ERROR;
 80055a2:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 80055a4:	2301      	movs	r3, #1
 80055a6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80055aa:	4628      	mov	r0, r5
 80055ac:	b00b      	add	sp, #44	; 0x2c
 80055ae:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80055b0:	6863      	ldr	r3, [r4, #4]
 80055b2:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80055b4:	68a3      	ldr	r3, [r4, #8]
 80055b6:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80055b8:	68e3      	ldr	r3, [r4, #12]
 80055ba:	9306      	str	r3, [sp, #24]
    Init.BusWide             = WideMode;
 80055bc:	9507      	str	r5, [sp, #28]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80055be:	6963      	ldr	r3, [r4, #20]
 80055c0:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80055c2:	69a3      	ldr	r3, [r4, #24]
 80055c4:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDIO_Init(hsd->Instance, Init);
 80055c6:	ab0a      	add	r3, sp, #40	; 0x28
 80055c8:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80055cc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80055d0:	ab04      	add	r3, sp, #16
 80055d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055d4:	6820      	ldr	r0, [r4, #0]
 80055d6:	f000 fe61 	bl	800629c <SDIO_Init>
  HAL_StatusTypeDef status = HAL_OK;
 80055da:	2500      	movs	r5, #0
 80055dc:	e7d5      	b.n	800558a <HAL_SD_ConfigWideBusOperation+0x66>
 80055de:	bf00      	nop
 80055e0:	004005ff 	.word	0x004005ff

080055e4 <HAL_SD_GetCardState>:
{
 80055e4:	b510      	push	{r4, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 80055ea:	2300      	movs	r3, #0
 80055ec:	9301      	str	r3, [sp, #4]
  errorstate = SD_SendStatus(hsd, &resp1);
 80055ee:	a901      	add	r1, sp, #4
 80055f0:	f7ff fc4a 	bl	8004e88 <SD_SendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80055f4:	b110      	cbz	r0, 80055fc <HAL_SD_GetCardState+0x18>
    hsd->ErrorCode |= errorstate;
 80055f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80055f8:	4303      	orrs	r3, r0
 80055fa:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80055fc:	9801      	ldr	r0, [sp, #4]
 80055fe:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8005602:	b002      	add	sp, #8
 8005604:	bd10      	pop	{r4, pc}
	...

08005608 <SD_DMAError>:
{
 8005608:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800560a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800560c:	f7fc faff 	bl	8001c0e <HAL_DMA_GetError>
 8005610:	2802      	cmp	r0, #2
 8005612:	d00a      	beq.n	800562a <SD_DMAError+0x22>
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8005614:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8005618:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800561a:	6d52      	ldr	r2, [r2, #84]	; 0x54
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800561c:	2b01      	cmp	r3, #1
 800561e:	d005      	beq.n	800562c <SD_DMAError+0x24>
 8005620:	2a01      	cmp	r2, #1
 8005622:	d003      	beq.n	800562c <SD_DMAError+0x24>
    HAL_SD_ErrorCallback(hsd);
 8005624:	4620      	mov	r0, r4
 8005626:	f7ff fd7d 	bl	8005124 <HAL_SD_ErrorCallback>
}
 800562a:	bd10      	pop	{r4, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800562c:	6823      	ldr	r3, [r4, #0]
 800562e:	4a0f      	ldr	r2, [pc, #60]	; (800566c <SD_DMAError+0x64>)
 8005630:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005632:	6822      	ldr	r2, [r4, #0]
 8005634:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8005636:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 800563a:	63d3      	str	r3, [r2, #60]	; 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800563c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800563e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005642:	63a3      	str	r3, [r4, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8005644:	4620      	mov	r0, r4
 8005646:	f7ff ffcd 	bl	80055e4 <HAL_SD_GetCardState>
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800564a:	3805      	subs	r0, #5
 800564c:	2801      	cmp	r0, #1
 800564e:	d905      	bls.n	800565c <SD_DMAError+0x54>
      hsd->State= HAL_SD_STATE_READY;
 8005650:	2301      	movs	r3, #1
 8005652:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005656:	2300      	movs	r3, #0
 8005658:	6323      	str	r3, [r4, #48]	; 0x30
 800565a:	e7e3      	b.n	8005624 <SD_DMAError+0x1c>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800565c:	6820      	ldr	r0, [r4, #0]
 800565e:	f000 ffe9 	bl	8006634 <SDMMC_CmdStopTransfer>
 8005662:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005664:	4303      	orrs	r3, r0
 8005666:	63a3      	str	r3, [r4, #56]	; 0x38
 8005668:	e7f2      	b.n	8005650 <SD_DMAError+0x48>
 800566a:	bf00      	nop
 800566c:	004005ff 	.word	0x004005ff

08005670 <SD_DMATxAbort>:
{
 8005670:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005672:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005674:	6823      	ldr	r3, [r4, #0]
 8005676:	f240 523a 	movw	r2, #1338	; 0x53a
 800567a:	639a      	str	r2, [r3, #56]	; 0x38
  CardState = HAL_SD_GetCardState(hsd);
 800567c:	4620      	mov	r0, r4
 800567e:	f7ff ffb1 	bl	80055e4 <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 8005682:	2301      	movs	r3, #1
 8005684:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005688:	2300      	movs	r3, #0
 800568a:	6323      	str	r3, [r4, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800568c:	3805      	subs	r0, #5
 800568e:	2801      	cmp	r0, #1
 8005690:	d905      	bls.n	800569e <SD_DMATxAbort+0x2e>
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005692:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005694:	b953      	cbnz	r3, 80056ac <SD_DMATxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 8005696:	4620      	mov	r0, r4
 8005698:	f005 f8b9 	bl	800a80e <HAL_SD_AbortCallback>
}
 800569c:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800569e:	6820      	ldr	r0, [r4, #0]
 80056a0:	f000 ffc8 	bl	8006634 <SDMMC_CmdStopTransfer>
 80056a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80056a6:	4303      	orrs	r3, r0
 80056a8:	63a3      	str	r3, [r4, #56]	; 0x38
 80056aa:	e7f2      	b.n	8005692 <SD_DMATxAbort+0x22>
    HAL_SD_ErrorCallback(hsd);
 80056ac:	4620      	mov	r0, r4
 80056ae:	f7ff fd39 	bl	8005124 <HAL_SD_ErrorCallback>
}
 80056b2:	e7f3      	b.n	800569c <SD_DMATxAbort+0x2c>

080056b4 <SD_DMARxAbort>:
{
 80056b4:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80056b6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80056b8:	6823      	ldr	r3, [r4, #0]
 80056ba:	f240 523a 	movw	r2, #1338	; 0x53a
 80056be:	639a      	str	r2, [r3, #56]	; 0x38
  CardState = HAL_SD_GetCardState(hsd);
 80056c0:	4620      	mov	r0, r4
 80056c2:	f7ff ff8f 	bl	80055e4 <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 80056c6:	2301      	movs	r3, #1
 80056c8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80056cc:	2300      	movs	r3, #0
 80056ce:	6323      	str	r3, [r4, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80056d0:	3805      	subs	r0, #5
 80056d2:	2801      	cmp	r0, #1
 80056d4:	d905      	bls.n	80056e2 <SD_DMARxAbort+0x2e>
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80056d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80056d8:	b953      	cbnz	r3, 80056f0 <SD_DMARxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 80056da:	4620      	mov	r0, r4
 80056dc:	f005 f897 	bl	800a80e <HAL_SD_AbortCallback>
}
 80056e0:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80056e2:	6820      	ldr	r0, [r4, #0]
 80056e4:	f000 ffa6 	bl	8006634 <SDMMC_CmdStopTransfer>
 80056e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80056ea:	4303      	orrs	r3, r0
 80056ec:	63a3      	str	r3, [r4, #56]	; 0x38
 80056ee:	e7f2      	b.n	80056d6 <SD_DMARxAbort+0x22>
    HAL_SD_ErrorCallback(hsd);
 80056f0:	4620      	mov	r0, r4
 80056f2:	f7ff fd17 	bl	8005124 <HAL_SD_ErrorCallback>
}
 80056f6:	e7f3      	b.n	80056e0 <SD_DMARxAbort+0x2c>

080056f8 <HAL_SD_IRQHandler>:
{
 80056f8:	b538      	push	{r3, r4, r5, lr}
 80056fa:	4604      	mov	r4, r0
  uint32_t context = hsd->Context;
 80056fc:	6b05      	ldr	r5, [r0, #48]	; 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80056fe:	6803      	ldr	r3, [r0, #0]
 8005700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005702:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8005706:	d002      	beq.n	800570e <HAL_SD_IRQHandler+0x16>
 8005708:	f015 0f08 	tst.w	r5, #8
 800570c:	d128      	bne.n	8005760 <HAL_SD_IRQHandler+0x68>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800570e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005710:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005714:	d05a      	beq.n	80057cc <HAL_SD_IRQHandler+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8005716:	f44f 7280 	mov.w	r2, #256	; 0x100
 800571a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800571c:	6822      	ldr	r2, [r4, #0]
 800571e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8005720:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8005724:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8005728:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800572a:	6822      	ldr	r2, [r4, #0]
 800572c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800572e:	f023 0301 	bic.w	r3, r3, #1
 8005732:	62d3      	str	r3, [r2, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 8005734:	f015 0f08 	tst.w	r5, #8
 8005738:	d026      	beq.n	8005788 <HAL_SD_IRQHandler+0x90>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800573a:	f015 0f22 	tst.w	r5, #34	; 0x22
 800573e:	d112      	bne.n	8005766 <HAL_SD_IRQHandler+0x6e>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005740:	6823      	ldr	r3, [r4, #0]
 8005742:	f240 523a 	movw	r2, #1338	; 0x53a
 8005746:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005748:	2301      	movs	r3, #1
 800574a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800574e:	2300      	movs	r3, #0
 8005750:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005752:	f015 0f03 	tst.w	r5, #3
 8005756:	d013      	beq.n	8005780 <HAL_SD_IRQHandler+0x88>
        HAL_SD_RxCpltCallback(hsd);
 8005758:	4620      	mov	r0, r4
 800575a:	f005 f860 	bl	800a81e <HAL_SD_RxCpltCallback>
 800575e:	e001      	b.n	8005764 <HAL_SD_IRQHandler+0x6c>
    SD_Read_IT(hsd);
 8005760:	f7ff fa86 	bl	8004c70 <SD_Read_IT>
}
 8005764:	bd38      	pop	{r3, r4, r5, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005766:	6820      	ldr	r0, [r4, #0]
 8005768:	f000 ff64 	bl	8006634 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800576c:	4603      	mov	r3, r0
 800576e:	2800      	cmp	r0, #0
 8005770:	d0e6      	beq.n	8005740 <HAL_SD_IRQHandler+0x48>
          hsd->ErrorCode |= errorstate;
 8005772:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005774:	4313      	orrs	r3, r2
 8005776:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005778:	4620      	mov	r0, r4
 800577a:	f7ff fcd3 	bl	8005124 <HAL_SD_ErrorCallback>
 800577e:	e7df      	b.n	8005740 <HAL_SD_IRQHandler+0x48>
        HAL_SD_TxCpltCallback(hsd);
 8005780:	4620      	mov	r0, r4
 8005782:	f005 f848 	bl	800a816 <HAL_SD_TxCpltCallback>
 8005786:	e7ed      	b.n	8005764 <HAL_SD_IRQHandler+0x6c>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005788:	f015 0f80 	tst.w	r5, #128	; 0x80
 800578c:	d0ea      	beq.n	8005764 <HAL_SD_IRQHandler+0x6c>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800578e:	f015 0f20 	tst.w	r5, #32
 8005792:	d10e      	bne.n	80057b2 <HAL_SD_IRQHandler+0xba>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005794:	f015 0f03 	tst.w	r5, #3
 8005798:	d1e4      	bne.n	8005764 <HAL_SD_IRQHandler+0x6c>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800579a:	6822      	ldr	r2, [r4, #0]
 800579c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800579e:	f023 0308 	bic.w	r3, r3, #8
 80057a2:	62d3      	str	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80057a4:	2301      	movs	r3, #1
 80057a6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80057aa:	4620      	mov	r0, r4
 80057ac:	f005 f833 	bl	800a816 <HAL_SD_TxCpltCallback>
 80057b0:	e7d8      	b.n	8005764 <HAL_SD_IRQHandler+0x6c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80057b2:	6820      	ldr	r0, [r4, #0]
 80057b4:	f000 ff3e 	bl	8006634 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80057b8:	4603      	mov	r3, r0
 80057ba:	2800      	cmp	r0, #0
 80057bc:	d0ea      	beq.n	8005794 <HAL_SD_IRQHandler+0x9c>
          hsd->ErrorCode |= errorstate;
 80057be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80057c0:	4313      	orrs	r3, r2
 80057c2:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80057c4:	4620      	mov	r0, r4
 80057c6:	f7ff fcad 	bl	8005124 <HAL_SD_ErrorCallback>
 80057ca:	e7e3      	b.n	8005794 <HAL_SD_IRQHandler+0x9c>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80057cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057ce:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80057d2:	d002      	beq.n	80057da <HAL_SD_IRQHandler+0xe2>
 80057d4:	f015 0f08 	tst.w	r5, #8
 80057d8:	d155      	bne.n	8005886 <HAL_SD_IRQHandler+0x18e>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80057da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80057dc:	f240 223a 	movw	r2, #570	; 0x23a
 80057e0:	4211      	tst	r1, r2
 80057e2:	d0bf      	beq.n	8005764 <HAL_SD_IRQHandler+0x6c>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80057e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057e6:	f012 0f02 	tst.w	r2, #2
 80057ea:	d003      	beq.n	80057f4 <HAL_SD_IRQHandler+0xfc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80057ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80057ee:	f042 0202 	orr.w	r2, r2, #2
 80057f2:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80057f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057f6:	f012 0f08 	tst.w	r2, #8
 80057fa:	d003      	beq.n	8005804 <HAL_SD_IRQHandler+0x10c>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80057fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80057fe:	f042 0208 	orr.w	r2, r2, #8
 8005802:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8005804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005806:	f012 0f20 	tst.w	r2, #32
 800580a:	d003      	beq.n	8005814 <HAL_SD_IRQHandler+0x11c>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800580c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800580e:	f042 0220 	orr.w	r2, r2, #32
 8005812:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8005814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005816:	f012 0f10 	tst.w	r2, #16
 800581a:	d003      	beq.n	8005824 <HAL_SD_IRQHandler+0x12c>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800581c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800581e:	f042 0210 	orr.w	r2, r2, #16
 8005822:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8005824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005826:	f412 7f00 	tst.w	r2, #512	; 0x200
 800582a:	d003      	beq.n	8005834 <HAL_SD_IRQHandler+0x13c>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800582c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800582e:	f042 0208 	orr.w	r2, r2, #8
 8005832:	63a2      	str	r2, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8005834:	f240 723a 	movw	r2, #1850	; 0x73a
 8005838:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800583a:	6822      	ldr	r2, [r4, #0]
 800583c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800583e:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8005842:	f023 0302 	bic.w	r3, r3, #2
 8005846:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005848:	6820      	ldr	r0, [r4, #0]
 800584a:	f000 fef3 	bl	8006634 <SDMMC_CmdStopTransfer>
 800584e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005850:	4303      	orrs	r3, r0
 8005852:	63a3      	str	r3, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005854:	f015 0f08 	tst.w	r5, #8
 8005858:	d119      	bne.n	800588e <HAL_SD_IRQHandler+0x196>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800585a:	f015 0f80 	tst.w	r5, #128	; 0x80
 800585e:	d081      	beq.n	8005764 <HAL_SD_IRQHandler+0x6c>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005860:	f015 0f30 	tst.w	r5, #48	; 0x30
 8005864:	d11c      	bne.n	80058a0 <HAL_SD_IRQHandler+0x1a8>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005866:	f015 0f03 	tst.w	r5, #3
 800586a:	d026      	beq.n	80058ba <HAL_SD_IRQHandler+0x1c2>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800586c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800586e:	4a18      	ldr	r2, [pc, #96]	; (80058d0 <HAL_SD_IRQHandler+0x1d8>)
 8005870:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005872:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005874:	f7fc f8c7 	bl	8001a06 <HAL_DMA_Abort_IT>
 8005878:	2800      	cmp	r0, #0
 800587a:	f43f af73 	beq.w	8005764 <HAL_SD_IRQHandler+0x6c>
          SD_DMARxAbort(hsd->hdmarx);
 800587e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005880:	f7ff ff18 	bl	80056b4 <SD_DMARxAbort>
 8005884:	e76e      	b.n	8005764 <HAL_SD_IRQHandler+0x6c>
    SD_Write_IT(hsd);
 8005886:	4620      	mov	r0, r4
 8005888:	f7ff fa0d 	bl	8004ca6 <SD_Write_IT>
 800588c:	e76a      	b.n	8005764 <HAL_SD_IRQHandler+0x6c>
      hsd->State = HAL_SD_STATE_READY;
 800588e:	2301      	movs	r3, #1
 8005890:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005894:	2300      	movs	r3, #0
 8005896:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005898:	4620      	mov	r0, r4
 800589a:	f7ff fc43 	bl	8005124 <HAL_SD_ErrorCallback>
 800589e:	e761      	b.n	8005764 <HAL_SD_IRQHandler+0x6c>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80058a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80058a2:	4a0c      	ldr	r2, [pc, #48]	; (80058d4 <HAL_SD_IRQHandler+0x1dc>)
 80058a4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80058a6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80058a8:	f7fc f8ad 	bl	8001a06 <HAL_DMA_Abort_IT>
 80058ac:	2800      	cmp	r0, #0
 80058ae:	f43f af59 	beq.w	8005764 <HAL_SD_IRQHandler+0x6c>
          SD_DMATxAbort(hsd->hdmatx);
 80058b2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80058b4:	f7ff fedc 	bl	8005670 <SD_DMATxAbort>
 80058b8:	e754      	b.n	8005764 <HAL_SD_IRQHandler+0x6c>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80058ba:	2300      	movs	r3, #0
 80058bc:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80058be:	2201      	movs	r2, #1
 80058c0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80058c4:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80058c6:	4620      	mov	r0, r4
 80058c8:	f004 ffa1 	bl	800a80e <HAL_SD_AbortCallback>
}
 80058cc:	e74a      	b.n	8005764 <HAL_SD_IRQHandler+0x6c>
 80058ce:	bf00      	nop
 80058d0:	080056b5 	.word	0x080056b5
 80058d4:	08005671 	.word	0x08005671

080058d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058d8:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058da:	6a03      	ldr	r3, [r0, #32]
 80058dc:	f023 0301 	bic.w	r3, r3, #1
 80058e0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058e2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058e4:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058e6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058e8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058ec:	680c      	ldr	r4, [r1, #0]
 80058ee:	ea44 0502 	orr.w	r5, r4, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058f2:	f023 0202 	bic.w	r2, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058f6:	688b      	ldr	r3, [r1, #8]
 80058f8:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058fa:	4c0d      	ldr	r4, [pc, #52]	; (8005930 <TIM_OC1_SetConfig+0x58>)
 80058fc:	42a0      	cmp	r0, r4
 80058fe:	d009      	beq.n	8005914 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005900:	4c0b      	ldr	r4, [pc, #44]	; (8005930 <TIM_OC1_SetConfig+0x58>)
 8005902:	42a0      	cmp	r0, r4
 8005904:	d00d      	beq.n	8005922 <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005906:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005908:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800590a:	684a      	ldr	r2, [r1, #4]
 800590c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800590e:	6203      	str	r3, [r0, #32]
}
 8005910:	bc70      	pop	{r4, r5, r6}
 8005912:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8005914:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005918:	68ca      	ldr	r2, [r1, #12]
 800591a:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC1NE;
 800591c:	f023 0304 	bic.w	r3, r3, #4
 8005920:	e7ee      	b.n	8005900 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005922:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8005926:	694a      	ldr	r2, [r1, #20]
 8005928:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 800592a:	698e      	ldr	r6, [r1, #24]
 800592c:	4316      	orrs	r6, r2
 800592e:	e7ea      	b.n	8005906 <TIM_OC1_SetConfig+0x2e>
 8005930:	40010000 	.word	0x40010000

08005934 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005934:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005936:	6a03      	ldr	r3, [r0, #32]
 8005938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800593c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800593e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005940:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005942:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005944:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005948:	680c      	ldr	r4, [r1, #0]
 800594a:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800594c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005950:	688c      	ldr	r4, [r1, #8]
 8005952:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005956:	4c0f      	ldr	r4, [pc, #60]	; (8005994 <TIM_OC3_SetConfig+0x60>)
 8005958:	42a0      	cmp	r0, r4
 800595a:	d009      	beq.n	8005970 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800595c:	4c0d      	ldr	r4, [pc, #52]	; (8005994 <TIM_OC3_SetConfig+0x60>)
 800595e:	42a0      	cmp	r0, r4
 8005960:	d00e      	beq.n	8005980 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005962:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005964:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005966:	684a      	ldr	r2, [r1, #4]
 8005968:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800596a:	6203      	str	r3, [r0, #32]
}
 800596c:	bc30      	pop	{r4, r5}
 800596e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8005970:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005974:	68cc      	ldr	r4, [r1, #12]
 8005976:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800597a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800597e:	e7ed      	b.n	800595c <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005980:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005984:	694c      	ldr	r4, [r1, #20]
 8005986:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800598a:	698c      	ldr	r4, [r1, #24]
 800598c:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
 8005990:	e7e7      	b.n	8005962 <TIM_OC3_SetConfig+0x2e>
 8005992:	bf00      	nop
 8005994:	40010000 	.word	0x40010000

08005998 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005998:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800599a:	6a03      	ldr	r3, [r0, #32]
 800599c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059a0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059a6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059a8:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059ac:	680d      	ldr	r5, [r1, #0]
 80059ae:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059b6:	688d      	ldr	r5, [r1, #8]
 80059b8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059bc:	4d07      	ldr	r5, [pc, #28]	; (80059dc <TIM_OC4_SetConfig+0x44>)
 80059be:	42a8      	cmp	r0, r5
 80059c0:	d006      	beq.n	80059d0 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059c2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059c4:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059c6:	684a      	ldr	r2, [r1, #4]
 80059c8:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ca:	6203      	str	r3, [r0, #32]
}
 80059cc:	bc30      	pop	{r4, r5}
 80059ce:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059d0:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059d4:	694d      	ldr	r5, [r1, #20]
 80059d6:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80059da:	e7f2      	b.n	80059c2 <TIM_OC4_SetConfig+0x2a>
 80059dc:	40010000 	.word	0x40010000

080059e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059e0:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059e2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059e4:	6a05      	ldr	r5, [r0, #32]
 80059e6:	f025 0501 	bic.w	r5, r5, #1
 80059ea:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ec:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059ee:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059f2:	ea44 1402 	orr.w	r4, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059f6:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80059fa:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059fc:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 80059fe:	6203      	str	r3, [r0, #32]
}
 8005a00:	bc30      	pop	{r4, r5}
 8005a02:	4770      	bx	lr

08005a04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a04:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a06:	6a05      	ldr	r5, [r0, #32]
 8005a08:	f025 0510 	bic.w	r5, r5, #16
 8005a0c:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a0e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8005a10:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a12:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a16:	ea44 3402 	orr.w	r4, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a1e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a22:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8005a24:	6203      	str	r3, [r0, #32]
}
 8005a26:	bc30      	pop	{r4, r5}
 8005a28:	4770      	bx	lr

08005a2a <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a2a:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a30:	430b      	orrs	r3, r1
 8005a32:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a36:	6083      	str	r3, [r0, #8]
}
 8005a38:	4770      	bx	lr
	...

08005a3c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005a3c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d12f      	bne.n	8005aa6 <HAL_TIM_Base_Start_IT+0x6a>
  htim->State = HAL_TIM_STATE_BUSY;
 8005a46:	2302      	movs	r3, #2
 8005a48:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a4c:	6802      	ldr	r2, [r0, #0]
 8005a4e:	68d3      	ldr	r3, [r2, #12]
 8005a50:	f043 0301 	orr.w	r3, r3, #1
 8005a54:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a56:	6803      	ldr	r3, [r0, #0]
 8005a58:	4a15      	ldr	r2, [pc, #84]	; (8005ab0 <HAL_TIM_Base_Start_IT+0x74>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d018      	beq.n	8005a90 <HAL_TIM_Base_Start_IT+0x54>
 8005a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a62:	d015      	beq.n	8005a90 <HAL_TIM_Base_Start_IT+0x54>
 8005a64:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d011      	beq.n	8005a90 <HAL_TIM_Base_Start_IT+0x54>
 8005a6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d00d      	beq.n	8005a90 <HAL_TIM_Base_Start_IT+0x54>
 8005a74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d009      	beq.n	8005a90 <HAL_TIM_Base_Start_IT+0x54>
 8005a7c:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d005      	beq.n	8005a90 <HAL_TIM_Base_Start_IT+0x54>
    __HAL_TIM_ENABLE(htim);
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	f042 0201 	orr.w	r2, r2, #1
 8005a8a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005a8c:	2000      	movs	r0, #0
 8005a8e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a90:	689a      	ldr	r2, [r3, #8]
 8005a92:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a96:	2a06      	cmp	r2, #6
 8005a98:	d007      	beq.n	8005aaa <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	f042 0201 	orr.w	r2, r2, #1
 8005aa0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005aa2:	2000      	movs	r0, #0
 8005aa4:	4770      	bx	lr
    return HAL_ERROR;
 8005aa6:	2001      	movs	r0, #1
 8005aa8:	4770      	bx	lr
  return HAL_OK;
 8005aaa:	2000      	movs	r0, #0
}
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	40010000 	.word	0x40010000

08005ab4 <HAL_TIM_OC_MspInit>:
}
 8005ab4:	4770      	bx	lr

08005ab6 <HAL_TIM_PeriodElapsedCallback>:
}
 8005ab6:	4770      	bx	lr

08005ab8 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8005ab8:	4770      	bx	lr

08005aba <HAL_TIM_IC_CaptureCallback>:
}
 8005aba:	4770      	bx	lr

08005abc <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8005abc:	4770      	bx	lr

08005abe <HAL_TIM_TriggerCallback>:
}
 8005abe:	4770      	bx	lr

08005ac0 <HAL_TIM_IRQHandler>:
{
 8005ac0:	b510      	push	{r4, lr}
 8005ac2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ac4:	6803      	ldr	r3, [r0, #0]
 8005ac6:	691a      	ldr	r2, [r3, #16]
 8005ac8:	f012 0f02 	tst.w	r2, #2
 8005acc:	d011      	beq.n	8005af2 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ace:	68da      	ldr	r2, [r3, #12]
 8005ad0:	f012 0f02 	tst.w	r2, #2
 8005ad4:	d00d      	beq.n	8005af2 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ad6:	f06f 0202 	mvn.w	r2, #2
 8005ada:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005adc:	2301      	movs	r3, #1
 8005ade:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ae0:	6803      	ldr	r3, [r0, #0]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	f013 0f03 	tst.w	r3, #3
 8005ae8:	d070      	beq.n	8005bcc <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8005aea:	f7ff ffe6 	bl	8005aba <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aee:	2300      	movs	r3, #0
 8005af0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005af2:	6823      	ldr	r3, [r4, #0]
 8005af4:	691a      	ldr	r2, [r3, #16]
 8005af6:	f012 0f04 	tst.w	r2, #4
 8005afa:	d012      	beq.n	8005b22 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005afc:	68da      	ldr	r2, [r3, #12]
 8005afe:	f012 0f04 	tst.w	r2, #4
 8005b02:	d00e      	beq.n	8005b22 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b04:	f06f 0204 	mvn.w	r2, #4
 8005b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b0a:	2302      	movs	r3, #2
 8005b0c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b0e:	6823      	ldr	r3, [r4, #0]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005b16:	d05f      	beq.n	8005bd8 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8005b18:	4620      	mov	r0, r4
 8005b1a:	f7ff ffce 	bl	8005aba <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b22:	6823      	ldr	r3, [r4, #0]
 8005b24:	691a      	ldr	r2, [r3, #16]
 8005b26:	f012 0f08 	tst.w	r2, #8
 8005b2a:	d012      	beq.n	8005b52 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	f012 0f08 	tst.w	r2, #8
 8005b32:	d00e      	beq.n	8005b52 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b34:	f06f 0208 	mvn.w	r2, #8
 8005b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b3a:	2304      	movs	r3, #4
 8005b3c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b3e:	6823      	ldr	r3, [r4, #0]
 8005b40:	69db      	ldr	r3, [r3, #28]
 8005b42:	f013 0f03 	tst.w	r3, #3
 8005b46:	d04e      	beq.n	8005be6 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8005b48:	4620      	mov	r0, r4
 8005b4a:	f7ff ffb6 	bl	8005aba <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b52:	6823      	ldr	r3, [r4, #0]
 8005b54:	691a      	ldr	r2, [r3, #16]
 8005b56:	f012 0f10 	tst.w	r2, #16
 8005b5a:	d012      	beq.n	8005b82 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b5c:	68da      	ldr	r2, [r3, #12]
 8005b5e:	f012 0f10 	tst.w	r2, #16
 8005b62:	d00e      	beq.n	8005b82 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b64:	f06f 0210 	mvn.w	r2, #16
 8005b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b6a:	2308      	movs	r3, #8
 8005b6c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b6e:	6823      	ldr	r3, [r4, #0]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005b76:	d03d      	beq.n	8005bf4 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8005b78:	4620      	mov	r0, r4
 8005b7a:	f7ff ff9e 	bl	8005aba <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	691a      	ldr	r2, [r3, #16]
 8005b86:	f012 0f01 	tst.w	r2, #1
 8005b8a:	d003      	beq.n	8005b94 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	f012 0f01 	tst.w	r2, #1
 8005b92:	d136      	bne.n	8005c02 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b94:	6823      	ldr	r3, [r4, #0]
 8005b96:	691a      	ldr	r2, [r3, #16]
 8005b98:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005b9c:	d003      	beq.n	8005ba6 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b9e:	68da      	ldr	r2, [r3, #12]
 8005ba0:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005ba4:	d134      	bne.n	8005c10 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ba6:	6823      	ldr	r3, [r4, #0]
 8005ba8:	691a      	ldr	r2, [r3, #16]
 8005baa:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005bae:	d003      	beq.n	8005bb8 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bb0:	68da      	ldr	r2, [r3, #12]
 8005bb2:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005bb6:	d132      	bne.n	8005c1e <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bb8:	6823      	ldr	r3, [r4, #0]
 8005bba:	691a      	ldr	r2, [r3, #16]
 8005bbc:	f012 0f20 	tst.w	r2, #32
 8005bc0:	d003      	beq.n	8005bca <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bc2:	68da      	ldr	r2, [r3, #12]
 8005bc4:	f012 0f20 	tst.w	r2, #32
 8005bc8:	d130      	bne.n	8005c2c <HAL_TIM_IRQHandler+0x16c>
}
 8005bca:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bcc:	f7ff ff74 	bl	8005ab8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	f7ff ff73 	bl	8005abc <HAL_TIM_PWM_PulseFinishedCallback>
 8005bd6:	e78a      	b.n	8005aee <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bd8:	4620      	mov	r0, r4
 8005bda:	f7ff ff6d 	bl	8005ab8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bde:	4620      	mov	r0, r4
 8005be0:	f7ff ff6c 	bl	8005abc <HAL_TIM_PWM_PulseFinishedCallback>
 8005be4:	e79b      	b.n	8005b1e <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005be6:	4620      	mov	r0, r4
 8005be8:	f7ff ff66 	bl	8005ab8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bec:	4620      	mov	r0, r4
 8005bee:	f7ff ff65 	bl	8005abc <HAL_TIM_PWM_PulseFinishedCallback>
 8005bf2:	e7ac      	b.n	8005b4e <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	f7ff ff5f 	bl	8005ab8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	f7ff ff5e 	bl	8005abc <HAL_TIM_PWM_PulseFinishedCallback>
 8005c00:	e7bd      	b.n	8005b7e <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c02:	f06f 0201 	mvn.w	r2, #1
 8005c06:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c08:	4620      	mov	r0, r4
 8005c0a:	f7ff ff54 	bl	8005ab6 <HAL_TIM_PeriodElapsedCallback>
 8005c0e:	e7c1      	b.n	8005b94 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c14:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005c16:	4620      	mov	r0, r4
 8005c18:	f000 f9df 	bl	8005fda <HAL_TIMEx_BreakCallback>
 8005c1c:	e7c3      	b.n	8005ba6 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c22:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005c24:	4620      	mov	r0, r4
 8005c26:	f7ff ff4a 	bl	8005abe <HAL_TIM_TriggerCallback>
 8005c2a:	e7c5      	b.n	8005bb8 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c2c:	f06f 0220 	mvn.w	r2, #32
 8005c30:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005c32:	4620      	mov	r0, r4
 8005c34:	f000 f9d0 	bl	8005fd8 <HAL_TIMEx_CommutCallback>
}
 8005c38:	e7c7      	b.n	8005bca <HAL_TIM_IRQHandler+0x10a>
	...

08005c3c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8005c3c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c3e:	4a25      	ldr	r2, [pc, #148]	; (8005cd4 <TIM_Base_SetConfig+0x98>)
 8005c40:	4290      	cmp	r0, r2
 8005c42:	d00e      	beq.n	8005c62 <TIM_Base_SetConfig+0x26>
 8005c44:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005c48:	d00b      	beq.n	8005c62 <TIM_Base_SetConfig+0x26>
 8005c4a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005c4e:	4290      	cmp	r0, r2
 8005c50:	d007      	beq.n	8005c62 <TIM_Base_SetConfig+0x26>
 8005c52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c56:	4290      	cmp	r0, r2
 8005c58:	d003      	beq.n	8005c62 <TIM_Base_SetConfig+0x26>
 8005c5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c5e:	4290      	cmp	r0, r2
 8005c60:	d103      	bne.n	8005c6a <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005c66:	684a      	ldr	r2, [r1, #4]
 8005c68:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c6a:	4a1a      	ldr	r2, [pc, #104]	; (8005cd4 <TIM_Base_SetConfig+0x98>)
 8005c6c:	4290      	cmp	r0, r2
 8005c6e:	d01a      	beq.n	8005ca6 <TIM_Base_SetConfig+0x6a>
 8005c70:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005c74:	d017      	beq.n	8005ca6 <TIM_Base_SetConfig+0x6a>
 8005c76:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005c7a:	4290      	cmp	r0, r2
 8005c7c:	d013      	beq.n	8005ca6 <TIM_Base_SetConfig+0x6a>
 8005c7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c82:	4290      	cmp	r0, r2
 8005c84:	d00f      	beq.n	8005ca6 <TIM_Base_SetConfig+0x6a>
 8005c86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c8a:	4290      	cmp	r0, r2
 8005c8c:	d00b      	beq.n	8005ca6 <TIM_Base_SetConfig+0x6a>
 8005c8e:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8005c92:	4290      	cmp	r0, r2
 8005c94:	d007      	beq.n	8005ca6 <TIM_Base_SetConfig+0x6a>
 8005c96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c9a:	4290      	cmp	r0, r2
 8005c9c:	d003      	beq.n	8005ca6 <TIM_Base_SetConfig+0x6a>
 8005c9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ca2:	4290      	cmp	r0, r2
 8005ca4:	d103      	bne.n	8005cae <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005caa:	68ca      	ldr	r2, [r1, #12]
 8005cac:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cb2:	694a      	ldr	r2, [r1, #20]
 8005cb4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005cb6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cb8:	688b      	ldr	r3, [r1, #8]
 8005cba:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005cbc:	680b      	ldr	r3, [r1, #0]
 8005cbe:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cc0:	4b04      	ldr	r3, [pc, #16]	; (8005cd4 <TIM_Base_SetConfig+0x98>)
 8005cc2:	4298      	cmp	r0, r3
 8005cc4:	d002      	beq.n	8005ccc <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	6143      	str	r3, [r0, #20]
}
 8005cca:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8005ccc:	690b      	ldr	r3, [r1, #16]
 8005cce:	6303      	str	r3, [r0, #48]	; 0x30
 8005cd0:	e7f9      	b.n	8005cc6 <TIM_Base_SetConfig+0x8a>
 8005cd2:	bf00      	nop
 8005cd4:	40010000 	.word	0x40010000

08005cd8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005cd8:	b340      	cbz	r0, 8005d2c <HAL_TIM_Base_Init+0x54>
{
 8005cda:	b510      	push	{r4, lr}
 8005cdc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005cde:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005ce2:	b1f3      	cbz	r3, 8005d22 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cea:	4621      	mov	r1, r4
 8005cec:	f851 0b04 	ldr.w	r0, [r1], #4
 8005cf0:	f7ff ffa4 	bl	8005c3c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cfa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005cfe:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005d02:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005d06:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d12:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005d16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005d1a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005d1e:	2000      	movs	r0, #0
}
 8005d20:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005d22:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005d26:	f005 fb3f 	bl	800b3a8 <HAL_TIM_Base_MspInit>
 8005d2a:	e7db      	b.n	8005ce4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005d2c:	2001      	movs	r0, #1
}
 8005d2e:	4770      	bx	lr

08005d30 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8005d30:	b340      	cbz	r0, 8005d84 <HAL_TIM_OC_Init+0x54>
{
 8005d32:	b510      	push	{r4, lr}
 8005d34:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005d36:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005d3a:	b1f3      	cbz	r3, 8005d7a <HAL_TIM_OC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005d42:	4621      	mov	r1, r4
 8005d44:	f851 0b04 	ldr.w	r0, [r1], #4
 8005d48:	f7ff ff78 	bl	8005c3c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d52:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005d56:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005d5a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005d5e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d62:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d6a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005d6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005d72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005d76:	2000      	movs	r0, #0
}
 8005d78:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005d7a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8005d7e:	f7ff fe99 	bl	8005ab4 <HAL_TIM_OC_MspInit>
 8005d82:	e7db      	b.n	8005d3c <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8005d84:	2001      	movs	r0, #1
}
 8005d86:	4770      	bx	lr

08005d88 <TIM_OC2_SetConfig>:
{
 8005d88:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d8a:	6a03      	ldr	r3, [r0, #32]
 8005d8c:	f023 0310 	bic.w	r3, r3, #16
 8005d90:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005d92:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005d94:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005d96:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d98:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d9c:	680d      	ldr	r5, [r1, #0]
 8005d9e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8005da2:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005da6:	688d      	ldr	r5, [r1, #8]
 8005da8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005dac:	4d0e      	ldr	r5, [pc, #56]	; (8005de8 <TIM_OC2_SetConfig+0x60>)
 8005dae:	42a8      	cmp	r0, r5
 8005db0:	d009      	beq.n	8005dc6 <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005db2:	4d0d      	ldr	r5, [pc, #52]	; (8005de8 <TIM_OC2_SetConfig+0x60>)
 8005db4:	42a8      	cmp	r0, r5
 8005db6:	d00e      	beq.n	8005dd6 <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8005db8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005dba:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005dbc:	684a      	ldr	r2, [r1, #4]
 8005dbe:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005dc0:	6203      	str	r3, [r0, #32]
}
 8005dc2:	bc30      	pop	{r4, r5}
 8005dc4:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8005dc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dca:	68cd      	ldr	r5, [r1, #12]
 8005dcc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005dd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dd4:	e7ed      	b.n	8005db2 <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005dd6:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005dda:	694d      	ldr	r5, [r1, #20]
 8005ddc:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005de0:	698d      	ldr	r5, [r1, #24]
 8005de2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8005de6:	e7e7      	b.n	8005db8 <TIM_OC2_SetConfig+0x30>
 8005de8:	40010000 	.word	0x40010000

08005dec <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8005dec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d028      	beq.n	8005e46 <HAL_TIM_OC_ConfigChannel+0x5a>
{
 8005df4:	b510      	push	{r4, lr}
 8005df6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005df8:	2301      	movs	r3, #1
 8005dfa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8005dfe:	2a0c      	cmp	r2, #12
 8005e00:	d81c      	bhi.n	8005e3c <HAL_TIM_OC_ConfigChannel+0x50>
 8005e02:	e8df f002 	tbb	[pc, r2]
 8005e06:	1b07      	.short	0x1b07
 8005e08:	1b0c1b1b 	.word	0x1b0c1b1b
 8005e0c:	1b111b1b 	.word	0x1b111b1b
 8005e10:	1b1b      	.short	0x1b1b
 8005e12:	16          	.byte	0x16
 8005e13:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e14:	6800      	ldr	r0, [r0, #0]
 8005e16:	f7ff fd5f 	bl	80058d8 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005e1a:	2000      	movs	r0, #0
      break;
 8005e1c:	e00f      	b.n	8005e3e <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e1e:	6800      	ldr	r0, [r0, #0]
 8005e20:	f7ff ffb2 	bl	8005d88 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005e24:	2000      	movs	r0, #0
      break;
 8005e26:	e00a      	b.n	8005e3e <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e28:	6800      	ldr	r0, [r0, #0]
 8005e2a:	f7ff fd83 	bl	8005934 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005e2e:	2000      	movs	r0, #0
      break;
 8005e30:	e005      	b.n	8005e3e <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e32:	6800      	ldr	r0, [r0, #0]
 8005e34:	f7ff fdb0 	bl	8005998 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005e38:	2000      	movs	r0, #0
      break;
 8005e3a:	e000      	b.n	8005e3e <HAL_TIM_OC_ConfigChannel+0x52>
  __HAL_LOCK(htim);
 8005e3c:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8005e3e:	2300      	movs	r3, #0
 8005e40:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005e44:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8005e46:	2002      	movs	r0, #2
}
 8005e48:	4770      	bx	lr

08005e4a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e4a:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e4c:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e4e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e52:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8005e56:	430a      	orrs	r2, r1
 8005e58:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e5a:	6082      	str	r2, [r0, #8]
}
 8005e5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005e62:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d078      	beq.n	8005f5c <HAL_TIM_ConfigClockSource+0xfa>
{
 8005e6a:	b510      	push	{r4, lr}
 8005e6c:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005e6e:	2301      	movs	r3, #1
 8005e70:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005e74:	2302      	movs	r3, #2
 8005e76:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005e7a:	6802      	ldr	r2, [r0, #0]
 8005e7c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8005e86:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8005e88:	680b      	ldr	r3, [r1, #0]
 8005e8a:	2b60      	cmp	r3, #96	; 0x60
 8005e8c:	d04c      	beq.n	8005f28 <HAL_TIM_ConfigClockSource+0xc6>
 8005e8e:	d829      	bhi.n	8005ee4 <HAL_TIM_ConfigClockSource+0x82>
 8005e90:	2b40      	cmp	r3, #64	; 0x40
 8005e92:	d054      	beq.n	8005f3e <HAL_TIM_ConfigClockSource+0xdc>
 8005e94:	d90c      	bls.n	8005eb0 <HAL_TIM_ConfigClockSource+0x4e>
 8005e96:	2b50      	cmp	r3, #80	; 0x50
 8005e98:	d122      	bne.n	8005ee0 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e9a:	68ca      	ldr	r2, [r1, #12]
 8005e9c:	6849      	ldr	r1, [r1, #4]
 8005e9e:	6800      	ldr	r0, [r0, #0]
 8005ea0:	f7ff fd9e 	bl	80059e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ea4:	2150      	movs	r1, #80	; 0x50
 8005ea6:	6820      	ldr	r0, [r4, #0]
 8005ea8:	f7ff fdbf 	bl	8005a2a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005eac:	2000      	movs	r0, #0
      break;
 8005eae:	e005      	b.n	8005ebc <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8005eb0:	2b20      	cmp	r3, #32
 8005eb2:	d00d      	beq.n	8005ed0 <HAL_TIM_ConfigClockSource+0x6e>
 8005eb4:	d909      	bls.n	8005eca <HAL_TIM_ConfigClockSource+0x68>
 8005eb6:	2b30      	cmp	r3, #48	; 0x30
 8005eb8:	d00a      	beq.n	8005ed0 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8005eba:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005ec8:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8005eca:	b10b      	cbz	r3, 8005ed0 <HAL_TIM_ConfigClockSource+0x6e>
 8005ecc:	2b10      	cmp	r3, #16
 8005ece:	d105      	bne.n	8005edc <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	6820      	ldr	r0, [r4, #0]
 8005ed4:	f7ff fda9 	bl	8005a2a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005ed8:	2000      	movs	r0, #0
      break;
 8005eda:	e7ef      	b.n	8005ebc <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8005edc:	2001      	movs	r0, #1
 8005ede:	e7ed      	b.n	8005ebc <HAL_TIM_ConfigClockSource+0x5a>
 8005ee0:	2001      	movs	r0, #1
 8005ee2:	e7eb      	b.n	8005ebc <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8005ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee8:	d034      	beq.n	8005f54 <HAL_TIM_ConfigClockSource+0xf2>
 8005eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eee:	d10c      	bne.n	8005f0a <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8005ef0:	68cb      	ldr	r3, [r1, #12]
 8005ef2:	684a      	ldr	r2, [r1, #4]
 8005ef4:	6889      	ldr	r1, [r1, #8]
 8005ef6:	6800      	ldr	r0, [r0, #0]
 8005ef8:	f7ff ffa7 	bl	8005e4a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005efc:	6822      	ldr	r2, [r4, #0]
 8005efe:	6893      	ldr	r3, [r2, #8]
 8005f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f04:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005f06:	2000      	movs	r0, #0
      break;
 8005f08:	e7d8      	b.n	8005ebc <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8005f0a:	2b70      	cmp	r3, #112	; 0x70
 8005f0c:	d124      	bne.n	8005f58 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8005f0e:	68cb      	ldr	r3, [r1, #12]
 8005f10:	684a      	ldr	r2, [r1, #4]
 8005f12:	6889      	ldr	r1, [r1, #8]
 8005f14:	6800      	ldr	r0, [r0, #0]
 8005f16:	f7ff ff98 	bl	8005e4a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005f1a:	6822      	ldr	r2, [r4, #0]
 8005f1c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f1e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005f22:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005f24:	2000      	movs	r0, #0
      break;
 8005f26:	e7c9      	b.n	8005ebc <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f28:	68ca      	ldr	r2, [r1, #12]
 8005f2a:	6849      	ldr	r1, [r1, #4]
 8005f2c:	6800      	ldr	r0, [r0, #0]
 8005f2e:	f7ff fd69 	bl	8005a04 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f32:	2160      	movs	r1, #96	; 0x60
 8005f34:	6820      	ldr	r0, [r4, #0]
 8005f36:	f7ff fd78 	bl	8005a2a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005f3a:	2000      	movs	r0, #0
      break;
 8005f3c:	e7be      	b.n	8005ebc <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f3e:	68ca      	ldr	r2, [r1, #12]
 8005f40:	6849      	ldr	r1, [r1, #4]
 8005f42:	6800      	ldr	r0, [r0, #0]
 8005f44:	f7ff fd4c 	bl	80059e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f48:	2140      	movs	r1, #64	; 0x40
 8005f4a:	6820      	ldr	r0, [r4, #0]
 8005f4c:	f7ff fd6d 	bl	8005a2a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005f50:	2000      	movs	r0, #0
      break;
 8005f52:	e7b3      	b.n	8005ebc <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8005f54:	2000      	movs	r0, #0
 8005f56:	e7b1      	b.n	8005ebc <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8005f58:	2001      	movs	r0, #1
 8005f5a:	e7af      	b.n	8005ebc <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8005f5c:	2002      	movs	r0, #2
}
 8005f5e:	4770      	bx	lr

08005f60 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f60:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d033      	beq.n	8005fd0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
{
 8005f68:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f70:	2302      	movs	r3, #2
 8005f72:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f76:	6803      	ldr	r3, [r0, #0]
 8005f78:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f7a:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f7c:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f80:	680a      	ldr	r2, [r1, #0]
 8005f82:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f86:	6803      	ldr	r3, [r0, #0]
 8005f88:	4a12      	ldr	r2, [pc, #72]	; (8005fd4 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d012      	beq.n	8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8005f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f92:	d00f      	beq.n	8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8005f94:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d00b      	beq.n	8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8005f9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d007      	beq.n	8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8005fa4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d003      	beq.n	8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8005fac:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d104      	bne.n	8005fbe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fb4:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fb8:	684a      	ldr	r2, [r1, #4]
 8005fba:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fbc:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8005fca:	4618      	mov	r0, r3
}
 8005fcc:	bc30      	pop	{r4, r5}
 8005fce:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005fd0:	2002      	movs	r0, #2
}
 8005fd2:	4770      	bx	lr
 8005fd4:	40010000 	.word	0x40010000

08005fd8 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fd8:	4770      	bx	lr

08005fda <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fda:	4770      	bx	lr

08005fdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fdc:	b570      	push	{r4, r5, r6, lr}
 8005fde:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fe0:	6802      	ldr	r2, [r0, #0]
 8005fe2:	6913      	ldr	r3, [r2, #16]
 8005fe4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005fe8:	68c1      	ldr	r1, [r0, #12]
 8005fea:	430b      	orrs	r3, r1
 8005fec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005fee:	6883      	ldr	r3, [r0, #8]
 8005ff0:	6902      	ldr	r2, [r0, #16]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	6942      	ldr	r2, [r0, #20]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	69c2      	ldr	r2, [r0, #28]
 8005ffa:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8005ffc:	6801      	ldr	r1, [r0, #0]
 8005ffe:	68cb      	ldr	r3, [r1, #12]
 8006000:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006004:	f023 030c 	bic.w	r3, r3, #12
 8006008:	4313      	orrs	r3, r2
 800600a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800600c:	6802      	ldr	r2, [r0, #0]
 800600e:	6953      	ldr	r3, [r2, #20]
 8006010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006014:	6981      	ldr	r1, [r0, #24]
 8006016:	430b      	orrs	r3, r1
 8006018:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800601a:	6803      	ldr	r3, [r0, #0]
 800601c:	4a34      	ldr	r2, [pc, #208]	; (80060f0 <UART_SetConfig+0x114>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d006      	beq.n	8006030 <UART_SetConfig+0x54>
 8006022:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006026:	4293      	cmp	r3, r2
 8006028:	d002      	beq.n	8006030 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800602a:	f7fe faf1 	bl	8004610 <HAL_RCC_GetPCLK1Freq>
 800602e:	e001      	b.n	8006034 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006030:	f7fe fafe 	bl	8004630 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006034:	69e3      	ldr	r3, [r4, #28]
 8006036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800603a:	d02a      	beq.n	8006092 <UART_SetConfig+0xb6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800603c:	2600      	movs	r6, #0
 800603e:	1805      	adds	r5, r0, r0
 8006040:	eb46 0106 	adc.w	r1, r6, r6
 8006044:	182d      	adds	r5, r5, r0
 8006046:	eb46 0101 	adc.w	r1, r6, r1
 800604a:	00cb      	lsls	r3, r1, #3
 800604c:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8006050:	00ea      	lsls	r2, r5, #3
 8006052:	4615      	mov	r5, r2
 8006054:	4619      	mov	r1, r3
 8006056:	6863      	ldr	r3, [r4, #4]
 8006058:	009a      	lsls	r2, r3, #2
 800605a:	0f9b      	lsrs	r3, r3, #30
 800605c:	1828      	adds	r0, r5, r0
 800605e:	eb46 0101 	adc.w	r1, r6, r1
 8006062:	f7fa fdf9 	bl	8000c58 <__aeabi_uldivmod>
 8006066:	4d23      	ldr	r5, [pc, #140]	; (80060f4 <UART_SetConfig+0x118>)
 8006068:	fba5 3200 	umull	r3, r2, r5, r0
 800606c:	0951      	lsrs	r1, r2, #5
 800606e:	2364      	movs	r3, #100	; 0x64
 8006070:	fb03 0311 	mls	r3, r3, r1, r0
 8006074:	011b      	lsls	r3, r3, #4
 8006076:	3332      	adds	r3, #50	; 0x32
 8006078:	fba5 2303 	umull	r2, r3, r5, r3
 800607c:	095b      	lsrs	r3, r3, #5
 800607e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006082:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8006086:	f003 030f 	and.w	r3, r3, #15
 800608a:	6821      	ldr	r1, [r4, #0]
 800608c:	4413      	add	r3, r2
 800608e:	608b      	str	r3, [r1, #8]
  }
}
 8006090:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006092:	2600      	movs	r6, #0
 8006094:	1805      	adds	r5, r0, r0
 8006096:	eb46 0106 	adc.w	r1, r6, r6
 800609a:	182d      	adds	r5, r5, r0
 800609c:	eb46 0101 	adc.w	r1, r6, r1
 80060a0:	00cb      	lsls	r3, r1, #3
 80060a2:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80060a6:	00ea      	lsls	r2, r5, #3
 80060a8:	4615      	mov	r5, r2
 80060aa:	4619      	mov	r1, r3
 80060ac:	6862      	ldr	r2, [r4, #4]
 80060ae:	4633      	mov	r3, r6
 80060b0:	1892      	adds	r2, r2, r2
 80060b2:	eb46 0303 	adc.w	r3, r6, r3
 80060b6:	1828      	adds	r0, r5, r0
 80060b8:	eb46 0101 	adc.w	r1, r6, r1
 80060bc:	f7fa fdcc 	bl	8000c58 <__aeabi_uldivmod>
 80060c0:	4d0c      	ldr	r5, [pc, #48]	; (80060f4 <UART_SetConfig+0x118>)
 80060c2:	fba5 3200 	umull	r3, r2, r5, r0
 80060c6:	0951      	lsrs	r1, r2, #5
 80060c8:	2364      	movs	r3, #100	; 0x64
 80060ca:	fb03 0311 	mls	r3, r3, r1, r0
 80060ce:	00db      	lsls	r3, r3, #3
 80060d0:	3332      	adds	r3, #50	; 0x32
 80060d2:	fba5 2303 	umull	r2, r3, r5, r3
 80060d6:	095b      	lsrs	r3, r3, #5
 80060d8:	005a      	lsls	r2, r3, #1
 80060da:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80060de:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80060e2:	f003 0307 	and.w	r3, r3, #7
 80060e6:	6821      	ldr	r1, [r4, #0]
 80060e8:	4413      	add	r3, r2
 80060ea:	608b      	str	r3, [r1, #8]
 80060ec:	e7d0      	b.n	8006090 <UART_SetConfig+0xb4>
 80060ee:	bf00      	nop
 80060f0:	40011000 	.word	0x40011000
 80060f4:	51eb851f 	.word	0x51eb851f

080060f8 <HAL_UART_Init>:
  if (huart == NULL)
 80060f8:	b358      	cbz	r0, 8006152 <HAL_UART_Init+0x5a>
{
 80060fa:	b510      	push	{r4, lr}
 80060fc:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80060fe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006102:	b30b      	cbz	r3, 8006148 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8006104:	2324      	movs	r3, #36	; 0x24
 8006106:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800610a:	6822      	ldr	r2, [r4, #0]
 800610c:	68d3      	ldr	r3, [r2, #12]
 800610e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006112:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8006114:	4620      	mov	r0, r4
 8006116:	f7ff ff61 	bl	8005fdc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800611a:	6822      	ldr	r2, [r4, #0]
 800611c:	6913      	ldr	r3, [r2, #16]
 800611e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006122:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006124:	6822      	ldr	r2, [r4, #0]
 8006126:	6953      	ldr	r3, [r2, #20]
 8006128:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800612c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800612e:	6822      	ldr	r2, [r4, #0]
 8006130:	68d3      	ldr	r3, [r2, #12]
 8006132:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006136:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006138:	2000      	movs	r0, #0
 800613a:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800613c:	2320      	movs	r3, #32
 800613e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006142:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8006146:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006148:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800614c:	f005 f94a 	bl	800b3e4 <HAL_UART_MspInit>
 8006150:	e7d8      	b.n	8006104 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8006152:	2001      	movs	r0, #1
}
 8006154:	4770      	bx	lr
	...

08006158 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006158:	4b0b      	ldr	r3, [pc, #44]	; (8006188 <SDMMC_GetCmdError+0x30>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a0b      	ldr	r2, [pc, #44]	; (800618c <SDMMC_GetCmdError+0x34>)
 800615e:	fba2 2303 	umull	r2, r3, r2, r3
 8006162:	0a5a      	lsrs	r2, r3, #9
 8006164:	f241 3388 	movw	r3, #5000	; 0x1388
 8006168:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 800616c:	461a      	mov	r2, r3
 800616e:	3b01      	subs	r3, #1
 8006170:	b13a      	cbz	r2, 8006182 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006172:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8006174:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006178:	d0f8      	beq.n	800616c <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800617a:	23c5      	movs	r3, #197	; 0xc5
 800617c:	6383      	str	r3, [r0, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800617e:	2000      	movs	r0, #0
 8006180:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8006182:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006186:	4770      	bx	lr
 8006188:	20000118 	.word	0x20000118
 800618c:	10624dd3 	.word	0x10624dd3

08006190 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006190:	4601      	mov	r1, r0
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006192:	4b14      	ldr	r3, [pc, #80]	; (80061e4 <SDMMC_GetCmdResp2+0x54>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a14      	ldr	r2, [pc, #80]	; (80061e8 <SDMMC_GetCmdResp2+0x58>)
 8006198:	fba2 2303 	umull	r2, r3, r2, r3
 800619c:	0a5a      	lsrs	r2, r3, #9
 800619e:	f241 3388 	movw	r3, #5000	; 0x1388
 80061a2:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 80061a6:	461a      	mov	r2, r3
 80061a8:	3b01      	subs	r3, #1
 80061aa:	b1ba      	cbz	r2, 80061dc <SDMMC_GetCmdResp2+0x4c>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 80061ac:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80061ae:	f012 0f45 	tst.w	r2, #69	; 0x45
 80061b2:	d0f8      	beq.n	80061a6 <SDMMC_GetCmdResp2+0x16>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80061b4:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80061b8:	d1f5      	bne.n	80061a6 <SDMMC_GetCmdResp2+0x16>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80061ba:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80061bc:	f013 0f04 	tst.w	r3, #4
 80061c0:	d106      	bne.n	80061d0 <SDMMC_GetCmdResp2+0x40>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80061c2:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80061c4:	f010 0001 	ands.w	r0, r0, #1
 80061c8:	d105      	bne.n	80061d6 <SDMMC_GetCmdResp2+0x46>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80061ca:	23c5      	movs	r3, #197	; 0xc5
 80061cc:	638b      	str	r3, [r1, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80061ce:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80061d0:	2004      	movs	r0, #4
 80061d2:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80061d4:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80061d6:	2001      	movs	r0, #1
 80061d8:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80061da:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80061dc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	20000118 	.word	0x20000118
 80061e8:	10624dd3 	.word	0x10624dd3

080061ec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80061ec:	4601      	mov	r1, r0
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80061ee:	4b10      	ldr	r3, [pc, #64]	; (8006230 <SDMMC_GetCmdResp3+0x44>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a10      	ldr	r2, [pc, #64]	; (8006234 <SDMMC_GetCmdResp3+0x48>)
 80061f4:	fba2 2303 	umull	r2, r3, r2, r3
 80061f8:	0a5a      	lsrs	r2, r3, #9
 80061fa:	f241 3388 	movw	r3, #5000	; 0x1388
 80061fe:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8006202:	461a      	mov	r2, r3
 8006204:	3b01      	subs	r3, #1
 8006206:	b182      	cbz	r2, 800622a <SDMMC_GetCmdResp3+0x3e>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8006208:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800620a:	f012 0f45 	tst.w	r2, #69	; 0x45
 800620e:	d0f8      	beq.n	8006202 <SDMMC_GetCmdResp3+0x16>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006210:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8006214:	d1f5      	bne.n	8006202 <SDMMC_GetCmdResp3+0x16>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006216:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8006218:	f010 0004 	ands.w	r0, r0, #4
 800621c:	d102      	bne.n	8006224 <SDMMC_GetCmdResp3+0x38>
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800621e:	23c5      	movs	r3, #197	; 0xc5
 8006220:	638b      	str	r3, [r1, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006222:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006224:	2004      	movs	r0, #4
 8006226:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006228:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800622a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800622e:	4770      	bx	lr
 8006230:	20000118 	.word	0x20000118
 8006234:	10624dd3 	.word	0x10624dd3

08006238 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006238:	4601      	mov	r1, r0
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800623a:	4b16      	ldr	r3, [pc, #88]	; (8006294 <SDMMC_GetCmdResp7+0x5c>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a16      	ldr	r2, [pc, #88]	; (8006298 <SDMMC_GetCmdResp7+0x60>)
 8006240:	fba2 2303 	umull	r2, r3, r2, r3
 8006244:	0a5a      	lsrs	r2, r3, #9
 8006246:	f241 3388 	movw	r3, #5000	; 0x1388
 800624a:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 800624e:	461a      	mov	r2, r3
 8006250:	3b01      	subs	r3, #1
 8006252:	b1e2      	cbz	r2, 800628e <SDMMC_GetCmdResp7+0x56>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8006254:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006256:	f012 0f45 	tst.w	r2, #69	; 0x45
 800625a:	d0f8      	beq.n	800624e <SDMMC_GetCmdResp7+0x16>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800625c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8006260:	d1f5      	bne.n	800624e <SDMMC_GetCmdResp7+0x16>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006262:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006264:	f013 0f04 	tst.w	r3, #4
 8006268:	d10b      	bne.n	8006282 <SDMMC_GetCmdResp7+0x4a>
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800626a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800626c:	f013 0301 	ands.w	r3, r3, #1
 8006270:	d10a      	bne.n	8006288 <SDMMC_GetCmdResp7+0x50>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006272:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8006274:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8006278:	d00b      	beq.n	8006292 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800627a:	2240      	movs	r2, #64	; 0x40
 800627c:	638a      	str	r2, [r1, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800627e:	4618      	mov	r0, r3
 8006280:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006282:	2004      	movs	r0, #4
 8006284:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006286:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006288:	2001      	movs	r0, #1
 800628a:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800628c:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800628e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  
}
 8006292:	4770      	bx	lr
 8006294:	20000118 	.word	0x20000118
 8006298:	10624dd3 	.word	0x10624dd3

0800629c <SDIO_Init>:
{
 800629c:	b084      	sub	sp, #16
 800629e:	b410      	push	{r4}
 80062a0:	ac02      	add	r4, sp, #8
 80062a2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 80062a6:	460b      	mov	r3, r1
 80062a8:	9a03      	ldr	r2, [sp, #12]
 80062aa:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 80062ac:	9a04      	ldr	r2, [sp, #16]
             Init.ClockBypass         |\
 80062ae:	4313      	orrs	r3, r2
             Init.BusWide             |\
 80062b0:	9a05      	ldr	r2, [sp, #20]
             Init.ClockPowerSave      |\
 80062b2:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 80062b4:	9a06      	ldr	r2, [sp, #24]
             Init.BusWide             |\
 80062b6:	4313      	orrs	r3, r2
             Init.ClockDiv
 80062b8:	9a07      	ldr	r2, [sp, #28]
             Init.HardwareFlowControl |\
 80062ba:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80062bc:	6842      	ldr	r2, [r0, #4]
 80062be:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
 80062c2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80062c6:	4313      	orrs	r3, r2
 80062c8:	6043      	str	r3, [r0, #4]
}
 80062ca:	2000      	movs	r0, #0
 80062cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062d0:	b004      	add	sp, #16
 80062d2:	4770      	bx	lr

080062d4 <SDIO_ReadFIFO>:
  return (SDIOx->FIFO);
 80062d4:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 80062d8:	4770      	bx	lr

080062da <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 80062da:	680b      	ldr	r3, [r1, #0]
 80062dc:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 80062e0:	2000      	movs	r0, #0
 80062e2:	4770      	bx	lr

080062e4 <SDIO_PowerState_ON>:
{  
 80062e4:	b508      	push	{r3, lr}
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80062e6:	2303      	movs	r3, #3
 80062e8:	6003      	str	r3, [r0, #0]
  HAL_Delay(2);
 80062ea:	2002      	movs	r0, #2
 80062ec:	f7fa ff1e 	bl	800112c <HAL_Delay>
}
 80062f0:	2000      	movs	r0, #0
 80062f2:	bd08      	pop	{r3, pc}

080062f4 <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80062f4:	6800      	ldr	r0, [r0, #0]
}
 80062f6:	f000 0003 	and.w	r0, r0, #3
 80062fa:	4770      	bx	lr

080062fc <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 80062fc:	680b      	ldr	r3, [r1, #0]
 80062fe:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006300:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 8006302:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006304:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 8006306:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 8006308:	4313      	orrs	r3, r2
                       Command->CPSM);
 800630a:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 800630c:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800630e:	68c2      	ldr	r2, [r0, #12]
 8006310:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8006314:	f022 020f 	bic.w	r2, r2, #15
 8006318:	4313      	orrs	r3, r2
 800631a:	60c3      	str	r3, [r0, #12]
}
 800631c:	2000      	movs	r0, #0
 800631e:	4770      	bx	lr

08006320 <SDIO_GetCommandResponse>:
  return (uint8_t)(SDIOx->RESPCMD);
 8006320:	6900      	ldr	r0, [r0, #16]
}
 8006322:	b2c0      	uxtb	r0, r0
 8006324:	4770      	bx	lr

08006326 <SDIO_GetResponse>:
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006326:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8006328:	5840      	ldr	r0, [r0, r1]
}  
 800632a:	4770      	bx	lr

0800632c <SDMMC_GetCmdResp1>:
{
 800632c:	b538      	push	{r3, r4, r5, lr}
 800632e:	4604      	mov	r4, r0
 8006330:	460d      	mov	r5, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006332:	4b50      	ldr	r3, [pc, #320]	; (8006474 <SDMMC_GetCmdResp1+0x148>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4950      	ldr	r1, [pc, #320]	; (8006478 <SDMMC_GetCmdResp1+0x14c>)
 8006338:	fba1 1303 	umull	r1, r3, r1, r3
 800633c:	0a5b      	lsrs	r3, r3, #9
 800633e:	fb02 f203 	mul.w	r2, r2, r3
    if (count-- == 0U)
 8006342:	4613      	mov	r3, r2
 8006344:	3a01      	subs	r2, #1
 8006346:	2b00      	cmp	r3, #0
 8006348:	d05d      	beq.n	8006406 <SDMMC_GetCmdResp1+0xda>
    sta_reg = SDIOx->STA;
 800634a:	6b63      	ldr	r3, [r4, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800634c:	f013 0f45 	tst.w	r3, #69	; 0x45
 8006350:	d0f7      	beq.n	8006342 <SDMMC_GetCmdResp1+0x16>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006352:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006356:	d1f4      	bne.n	8006342 <SDMMC_GetCmdResp1+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006358:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800635a:	f013 0f04 	tst.w	r3, #4
 800635e:	d106      	bne.n	800636e <SDMMC_GetCmdResp1+0x42>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006360:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006362:	f013 0f01 	tst.w	r3, #1
 8006366:	d005      	beq.n	8006374 <SDMMC_GetCmdResp1+0x48>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006368:	2001      	movs	r0, #1
 800636a:	63a0      	str	r0, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800636c:	e04d      	b.n	800640a <SDMMC_GetCmdResp1+0xde>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800636e:	2004      	movs	r0, #4
 8006370:	63a0      	str	r0, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006372:	e04a      	b.n	800640a <SDMMC_GetCmdResp1+0xde>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006374:	23c5      	movs	r3, #197	; 0xc5
 8006376:	63a3      	str	r3, [r4, #56]	; 0x38
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006378:	4620      	mov	r0, r4
 800637a:	f7ff ffd1 	bl	8006320 <SDIO_GetCommandResponse>
 800637e:	42a8      	cmp	r0, r5
 8006380:	d001      	beq.n	8006386 <SDMMC_GetCmdResp1+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006382:	2001      	movs	r0, #1
 8006384:	e041      	b.n	800640a <SDMMC_GetCmdResp1+0xde>
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006386:	2100      	movs	r1, #0
 8006388:	4620      	mov	r0, r4
 800638a:	f7ff ffcc 	bl	8006326 <SDIO_GetResponse>
 800638e:	4603      	mov	r3, r0
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006390:	483a      	ldr	r0, [pc, #232]	; (800647c <SDMMC_GetCmdResp1+0x150>)
 8006392:	4018      	ands	r0, r3
 8006394:	b3c8      	cbz	r0, 800640a <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006396:	2b00      	cmp	r3, #0
 8006398:	db38      	blt.n	800640c <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800639a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800639e:	d138      	bne.n	8006412 <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80063a0:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80063a4:	d137      	bne.n	8006416 <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80063a6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80063aa:	d136      	bne.n	800641a <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80063ac:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80063b0:	d136      	bne.n	8006420 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80063b2:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80063b6:	d136      	bne.n	8006426 <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80063b8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80063bc:	d136      	bne.n	800642c <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80063be:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80063c2:	d136      	bne.n	8006432 <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80063c4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80063c8:	d136      	bne.n	8006438 <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80063ca:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80063ce:	d136      	bne.n	800643e <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80063d0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80063d4:	d136      	bne.n	8006444 <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80063d6:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80063da:	d136      	bne.n	800644a <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80063dc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80063e0:	d136      	bne.n	8006450 <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80063e2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80063e6:	d136      	bne.n	8006456 <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80063e8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80063ec:	d136      	bne.n	800645c <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80063ee:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80063f2:	d136      	bne.n	8006462 <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80063f4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80063f8:	d136      	bne.n	8006468 <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80063fa:	f013 0f08 	tst.w	r3, #8
 80063fe:	d036      	beq.n	800646e <SDMMC_GetCmdResp1+0x142>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006400:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006404:	e001      	b.n	800640a <SDMMC_GetCmdResp1+0xde>
      return SDMMC_ERROR_TIMEOUT;
 8006406:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800640a:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800640c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8006410:	e7fb      	b.n	800640a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006412:	2040      	movs	r0, #64	; 0x40
 8006414:	e7f9      	b.n	800640a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006416:	2080      	movs	r0, #128	; 0x80
 8006418:	e7f7      	b.n	800640a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800641a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800641e:	e7f4      	b.n	800640a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006420:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006424:	e7f1      	b.n	800640a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006426:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800642a:	e7ee      	b.n	800640a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800642c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006430:	e7eb      	b.n	800640a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006432:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006436:	e7e8      	b.n	800640a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006438:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800643c:	e7e5      	b.n	800640a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800643e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006442:	e7e2      	b.n	800640a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CC_ERR;
 8006444:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006448:	e7df      	b.n	800640a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800644a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800644e:	e7dc      	b.n	800640a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006450:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8006454:	e7d9      	b.n	800640a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006456:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800645a:	e7d6      	b.n	800640a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800645c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006460:	e7d3      	b.n	800640a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006462:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8006466:	e7d0      	b.n	800640a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_RESET;
 8006468:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800646c:	e7cd      	b.n	800640a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800646e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006472:	e7ca      	b.n	800640a <SDMMC_GetCmdResp1+0xde>
 8006474:	20000118 	.word	0x20000118
 8006478:	10624dd3 	.word	0x10624dd3
 800647c:	fdffe008 	.word	0xfdffe008

08006480 <SDMMC_GetCmdResp6>:
{
 8006480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006482:	4605      	mov	r5, r0
 8006484:	460e      	mov	r6, r1
 8006486:	4617      	mov	r7, r2
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006488:	4b23      	ldr	r3, [pc, #140]	; (8006518 <SDMMC_GetCmdResp6+0x98>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4823      	ldr	r0, [pc, #140]	; (800651c <SDMMC_GetCmdResp6+0x9c>)
 800648e:	fba0 2303 	umull	r2, r3, r0, r3
 8006492:	0a58      	lsrs	r0, r3, #9
 8006494:	f241 3388 	movw	r3, #5000	; 0x1388
 8006498:	fb03 f300 	mul.w	r3, r3, r0
    if (count-- == 0U)
 800649c:	461c      	mov	r4, r3
 800649e:	3b01      	subs	r3, #1
 80064a0:	b38c      	cbz	r4, 8006506 <SDMMC_GetCmdResp6+0x86>
    sta_reg = SDIOx->STA;
 80064a2:	6b6c      	ldr	r4, [r5, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80064a4:	f014 0f45 	tst.w	r4, #69	; 0x45
 80064a8:	d0f8      	beq.n	800649c <SDMMC_GetCmdResp6+0x1c>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80064aa:	f414 6f00 	tst.w	r4, #2048	; 0x800
 80064ae:	d1f5      	bne.n	800649c <SDMMC_GetCmdResp6+0x1c>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80064b0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80064b2:	f013 0f04 	tst.w	r3, #4
 80064b6:	d106      	bne.n	80064c6 <SDMMC_GetCmdResp6+0x46>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80064b8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80064ba:	f013 0f01 	tst.w	r3, #1
 80064be:	d005      	beq.n	80064cc <SDMMC_GetCmdResp6+0x4c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80064c0:	2001      	movs	r0, #1
 80064c2:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80064c4:	e021      	b.n	800650a <SDMMC_GetCmdResp6+0x8a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80064c6:	2004      	movs	r0, #4
 80064c8:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80064ca:	e01e      	b.n	800650a <SDMMC_GetCmdResp6+0x8a>
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80064cc:	4628      	mov	r0, r5
 80064ce:	f7ff ff27 	bl	8006320 <SDIO_GetCommandResponse>
 80064d2:	42b0      	cmp	r0, r6
 80064d4:	d001      	beq.n	80064da <SDMMC_GetCmdResp6+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80064d6:	2001      	movs	r0, #1
 80064d8:	e017      	b.n	800650a <SDMMC_GetCmdResp6+0x8a>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80064da:	23c5      	movs	r3, #197	; 0xc5
 80064dc:	63ab      	str	r3, [r5, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80064de:	2100      	movs	r1, #0
 80064e0:	4628      	mov	r0, r5
 80064e2:	f7ff ff20 	bl	8006326 <SDIO_GetResponse>
 80064e6:	4603      	mov	r3, r0
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80064e8:	f410 4060 	ands.w	r0, r0, #57344	; 0xe000
 80064ec:	d008      	beq.n	8006500 <SDMMC_GetCmdResp6+0x80>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80064ee:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80064f2:	d10b      	bne.n	800650c <SDMMC_GetCmdResp6+0x8c>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80064f4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80064f8:	d00b      	beq.n	8006512 <SDMMC_GetCmdResp6+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80064fa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80064fe:	e004      	b.n	800650a <SDMMC_GetCmdResp6+0x8a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006500:	0c1b      	lsrs	r3, r3, #16
 8006502:	803b      	strh	r3, [r7, #0]
    return SDMMC_ERROR_NONE;
 8006504:	e001      	b.n	800650a <SDMMC_GetCmdResp6+0x8a>
      return SDMMC_ERROR_TIMEOUT;
 8006506:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800650a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 800650c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006510:	e7fb      	b.n	800650a <SDMMC_GetCmdResp6+0x8a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006512:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006516:	e7f8      	b.n	800650a <SDMMC_GetCmdResp6+0x8a>
 8006518:	20000118 	.word	0x20000118
 800651c:	10624dd3 	.word	0x10624dd3

08006520 <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 8006520:	680b      	ldr	r3, [r1, #0]
 8006522:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 8006524:	684b      	ldr	r3, [r1, #4]
 8006526:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006528:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 800652a:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800652c:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 800652e:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 8006530:	4313      	orrs	r3, r2
                       Data->DPSM);
 8006532:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 8006534:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006536:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8006538:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 800653c:	4313      	orrs	r3, r2
 800653e:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8006540:	2000      	movs	r0, #0
 8006542:	4770      	bx	lr

08006544 <SDMMC_CmdBlockLength>:
{
 8006544:	b530      	push	{r4, r5, lr}
 8006546:	b087      	sub	sp, #28
 8006548:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800654a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800654c:	2510      	movs	r5, #16
 800654e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006550:	2340      	movs	r3, #64	; 0x40
 8006552:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006554:	2300      	movs	r3, #0
 8006556:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006558:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800655c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800655e:	a901      	add	r1, sp, #4
 8006560:	f7ff fecc 	bl	80062fc <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006564:	f241 3288 	movw	r2, #5000	; 0x1388
 8006568:	4629      	mov	r1, r5
 800656a:	4620      	mov	r0, r4
 800656c:	f7ff fede 	bl	800632c <SDMMC_GetCmdResp1>
}
 8006570:	b007      	add	sp, #28
 8006572:	bd30      	pop	{r4, r5, pc}

08006574 <SDMMC_CmdReadSingleBlock>:
{
 8006574:	b530      	push	{r4, r5, lr}
 8006576:	b087      	sub	sp, #28
 8006578:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800657a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800657c:	2511      	movs	r5, #17
 800657e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006580:	2340      	movs	r3, #64	; 0x40
 8006582:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006584:	2300      	movs	r3, #0
 8006586:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006588:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800658c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800658e:	a901      	add	r1, sp, #4
 8006590:	f7ff feb4 	bl	80062fc <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006594:	f241 3288 	movw	r2, #5000	; 0x1388
 8006598:	4629      	mov	r1, r5
 800659a:	4620      	mov	r0, r4
 800659c:	f7ff fec6 	bl	800632c <SDMMC_GetCmdResp1>
}
 80065a0:	b007      	add	sp, #28
 80065a2:	bd30      	pop	{r4, r5, pc}

080065a4 <SDMMC_CmdReadMultiBlock>:
{
 80065a4:	b530      	push	{r4, r5, lr}
 80065a6:	b087      	sub	sp, #28
 80065a8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80065aa:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80065ac:	2512      	movs	r5, #18
 80065ae:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80065b0:	2340      	movs	r3, #64	; 0x40
 80065b2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80065b4:	2300      	movs	r3, #0
 80065b6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80065b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065bc:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80065be:	a901      	add	r1, sp, #4
 80065c0:	f7ff fe9c 	bl	80062fc <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80065c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80065c8:	4629      	mov	r1, r5
 80065ca:	4620      	mov	r0, r4
 80065cc:	f7ff feae 	bl	800632c <SDMMC_GetCmdResp1>
}
 80065d0:	b007      	add	sp, #28
 80065d2:	bd30      	pop	{r4, r5, pc}

080065d4 <SDMMC_CmdWriteSingleBlock>:
{
 80065d4:	b530      	push	{r4, r5, lr}
 80065d6:	b087      	sub	sp, #28
 80065d8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80065da:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80065dc:	2518      	movs	r5, #24
 80065de:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80065e0:	2340      	movs	r3, #64	; 0x40
 80065e2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80065e4:	2300      	movs	r3, #0
 80065e6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80065e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065ec:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80065ee:	a901      	add	r1, sp, #4
 80065f0:	f7ff fe84 	bl	80062fc <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80065f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80065f8:	4629      	mov	r1, r5
 80065fa:	4620      	mov	r0, r4
 80065fc:	f7ff fe96 	bl	800632c <SDMMC_GetCmdResp1>
}
 8006600:	b007      	add	sp, #28
 8006602:	bd30      	pop	{r4, r5, pc}

08006604 <SDMMC_CmdWriteMultiBlock>:
{
 8006604:	b530      	push	{r4, r5, lr}
 8006606:	b087      	sub	sp, #28
 8006608:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800660a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800660c:	2519      	movs	r5, #25
 800660e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006610:	2340      	movs	r3, #64	; 0x40
 8006612:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006614:	2300      	movs	r3, #0
 8006616:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006618:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800661c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800661e:	a901      	add	r1, sp, #4
 8006620:	f7ff fe6c 	bl	80062fc <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006624:	f241 3288 	movw	r2, #5000	; 0x1388
 8006628:	4629      	mov	r1, r5
 800662a:	4620      	mov	r0, r4
 800662c:	f7ff fe7e 	bl	800632c <SDMMC_GetCmdResp1>
}
 8006630:	b007      	add	sp, #28
 8006632:	bd30      	pop	{r4, r5, pc}

08006634 <SDMMC_CmdStopTransfer>:
{
 8006634:	b530      	push	{r4, r5, lr}
 8006636:	b087      	sub	sp, #28
 8006638:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800663a:	2300      	movs	r3, #0
 800663c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800663e:	250c      	movs	r5, #12
 8006640:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006642:	2240      	movs	r2, #64	; 0x40
 8006644:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006646:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800664c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800664e:	a901      	add	r1, sp, #4
 8006650:	f7ff fe54 	bl	80062fc <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006654:	4a03      	ldr	r2, [pc, #12]	; (8006664 <SDMMC_CmdStopTransfer+0x30>)
 8006656:	4629      	mov	r1, r5
 8006658:	4620      	mov	r0, r4
 800665a:	f7ff fe67 	bl	800632c <SDMMC_GetCmdResp1>
}
 800665e:	b007      	add	sp, #28
 8006660:	bd30      	pop	{r4, r5, pc}
 8006662:	bf00      	nop
 8006664:	05f5e100 	.word	0x05f5e100

08006668 <SDMMC_CmdSelDesel>:
{
 8006668:	b530      	push	{r4, r5, lr}
 800666a:	b087      	sub	sp, #28
 800666c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800666e:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006670:	2507      	movs	r5, #7
 8006672:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006674:	2340      	movs	r3, #64	; 0x40
 8006676:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006678:	2300      	movs	r3, #0
 800667a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800667c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006680:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006682:	a901      	add	r1, sp, #4
 8006684:	f7ff fe3a 	bl	80062fc <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006688:	f241 3288 	movw	r2, #5000	; 0x1388
 800668c:	4629      	mov	r1, r5
 800668e:	4620      	mov	r0, r4
 8006690:	f7ff fe4c 	bl	800632c <SDMMC_GetCmdResp1>
}
 8006694:	b007      	add	sp, #28
 8006696:	bd30      	pop	{r4, r5, pc}

08006698 <SDMMC_CmdGoIdleState>:
{
 8006698:	b510      	push	{r4, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800669e:	2300      	movs	r3, #0
 80066a0:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80066a2:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80066a4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80066a6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80066a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066ac:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80066ae:	a901      	add	r1, sp, #4
 80066b0:	f7ff fe24 	bl	80062fc <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdError(SDIOx);
 80066b4:	4620      	mov	r0, r4
 80066b6:	f7ff fd4f 	bl	8006158 <SDMMC_GetCmdError>
}
 80066ba:	b006      	add	sp, #24
 80066bc:	bd10      	pop	{r4, pc}

080066be <SDMMC_CmdOperCond>:
{
 80066be:	b510      	push	{r4, lr}
 80066c0:	b086      	sub	sp, #24
 80066c2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80066c4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80066c8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80066ca:	2308      	movs	r3, #8
 80066cc:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80066ce:	2340      	movs	r3, #64	; 0x40
 80066d0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80066d2:	2300      	movs	r3, #0
 80066d4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80066d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066da:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80066dc:	a901      	add	r1, sp, #4
 80066de:	f7ff fe0d 	bl	80062fc <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80066e2:	4620      	mov	r0, r4
 80066e4:	f7ff fda8 	bl	8006238 <SDMMC_GetCmdResp7>
}
 80066e8:	b006      	add	sp, #24
 80066ea:	bd10      	pop	{r4, pc}

080066ec <SDMMC_CmdAppCommand>:
{
 80066ec:	b530      	push	{r4, r5, lr}
 80066ee:	b087      	sub	sp, #28
 80066f0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80066f2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80066f4:	2537      	movs	r5, #55	; 0x37
 80066f6:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80066f8:	2340      	movs	r3, #64	; 0x40
 80066fa:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80066fc:	2300      	movs	r3, #0
 80066fe:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006700:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006704:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006706:	a901      	add	r1, sp, #4
 8006708:	f7ff fdf8 	bl	80062fc <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800670c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006710:	4629      	mov	r1, r5
 8006712:	4620      	mov	r0, r4
 8006714:	f7ff fe0a 	bl	800632c <SDMMC_GetCmdResp1>
}
 8006718:	b007      	add	sp, #28
 800671a:	bd30      	pop	{r4, r5, pc}

0800671c <SDMMC_CmdAppOperCommand>:
{
 800671c:	b510      	push	{r4, lr}
 800671e:	b086      	sub	sp, #24
 8006720:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006722:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8006726:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800672a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800672c:	2329      	movs	r3, #41	; 0x29
 800672e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006730:	2340      	movs	r3, #64	; 0x40
 8006732:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006734:	2300      	movs	r3, #0
 8006736:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006738:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800673c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800673e:	a901      	add	r1, sp, #4
 8006740:	f7ff fddc 	bl	80062fc <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006744:	4620      	mov	r0, r4
 8006746:	f7ff fd51 	bl	80061ec <SDMMC_GetCmdResp3>
}
 800674a:	b006      	add	sp, #24
 800674c:	bd10      	pop	{r4, pc}

0800674e <SDMMC_CmdBusWidth>:
{
 800674e:	b530      	push	{r4, r5, lr}
 8006750:	b087      	sub	sp, #28
 8006752:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006754:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006756:	2506      	movs	r5, #6
 8006758:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800675a:	2340      	movs	r3, #64	; 0x40
 800675c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800675e:	2300      	movs	r3, #0
 8006760:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006766:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006768:	a901      	add	r1, sp, #4
 800676a:	f7ff fdc7 	bl	80062fc <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800676e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006772:	4629      	mov	r1, r5
 8006774:	4620      	mov	r0, r4
 8006776:	f7ff fdd9 	bl	800632c <SDMMC_GetCmdResp1>
}
 800677a:	b007      	add	sp, #28
 800677c:	bd30      	pop	{r4, r5, pc}

0800677e <SDMMC_CmdSendSCR>:
{
 800677e:	b530      	push	{r4, r5, lr}
 8006780:	b087      	sub	sp, #28
 8006782:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8006784:	2300      	movs	r3, #0
 8006786:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006788:	2533      	movs	r5, #51	; 0x33
 800678a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800678c:	2240      	movs	r2, #64	; 0x40
 800678e:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006790:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006796:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006798:	a901      	add	r1, sp, #4
 800679a:	f7ff fdaf 	bl	80062fc <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800679e:	f241 3288 	movw	r2, #5000	; 0x1388
 80067a2:	4629      	mov	r1, r5
 80067a4:	4620      	mov	r0, r4
 80067a6:	f7ff fdc1 	bl	800632c <SDMMC_GetCmdResp1>
}
 80067aa:	b007      	add	sp, #28
 80067ac:	bd30      	pop	{r4, r5, pc}

080067ae <SDMMC_CmdSendCID>:
{
 80067ae:	b510      	push	{r4, lr}
 80067b0:	b086      	sub	sp, #24
 80067b2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80067b4:	2300      	movs	r3, #0
 80067b6:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80067b8:	2202      	movs	r2, #2
 80067ba:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80067bc:	22c0      	movs	r2, #192	; 0xc0
 80067be:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80067c0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80067c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067c6:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80067c8:	a901      	add	r1, sp, #4
 80067ca:	f7ff fd97 	bl	80062fc <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80067ce:	4620      	mov	r0, r4
 80067d0:	f7ff fcde 	bl	8006190 <SDMMC_GetCmdResp2>
}
 80067d4:	b006      	add	sp, #24
 80067d6:	bd10      	pop	{r4, pc}

080067d8 <SDMMC_CmdSendCSD>:
{
 80067d8:	b510      	push	{r4, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80067de:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80067e0:	2309      	movs	r3, #9
 80067e2:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80067e4:	23c0      	movs	r3, #192	; 0xc0
 80067e6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80067e8:	2300      	movs	r3, #0
 80067ea:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80067ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067f0:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80067f2:	a901      	add	r1, sp, #4
 80067f4:	f7ff fd82 	bl	80062fc <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80067f8:	4620      	mov	r0, r4
 80067fa:	f7ff fcc9 	bl	8006190 <SDMMC_GetCmdResp2>
}
 80067fe:	b006      	add	sp, #24
 8006800:	bd10      	pop	{r4, pc}

08006802 <SDMMC_CmdSetRelAdd>:
{
 8006802:	b570      	push	{r4, r5, r6, lr}
 8006804:	b086      	sub	sp, #24
 8006806:	4604      	mov	r4, r0
 8006808:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 800680a:	2300      	movs	r3, #0
 800680c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800680e:	2603      	movs	r6, #3
 8006810:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006812:	2240      	movs	r2, #64	; 0x40
 8006814:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006816:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800681c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800681e:	a901      	add	r1, sp, #4
 8006820:	f7ff fd6c 	bl	80062fc <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006824:	462a      	mov	r2, r5
 8006826:	4631      	mov	r1, r6
 8006828:	4620      	mov	r0, r4
 800682a:	f7ff fe29 	bl	8006480 <SDMMC_GetCmdResp6>
}
 800682e:	b006      	add	sp, #24
 8006830:	bd70      	pop	{r4, r5, r6, pc}

08006832 <SDMMC_CmdSendStatus>:
{
 8006832:	b530      	push	{r4, r5, lr}
 8006834:	b087      	sub	sp, #28
 8006836:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8006838:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800683a:	250d      	movs	r5, #13
 800683c:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800683e:	2340      	movs	r3, #64	; 0x40
 8006840:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006842:	2300      	movs	r3, #0
 8006844:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800684a:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800684c:	a901      	add	r1, sp, #4
 800684e:	f7ff fd55 	bl	80062fc <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006852:	f241 3288 	movw	r2, #5000	; 0x1388
 8006856:	4629      	mov	r1, r5
 8006858:	4620      	mov	r0, r4
 800685a:	f7ff fd67 	bl	800632c <SDMMC_GetCmdResp1>
}
 800685e:	b007      	add	sp, #28
 8006860:	bd30      	pop	{r4, r5, pc}
	...

08006864 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006864:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8006866:	2300      	movs	r3, #0
 8006868:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800686a:	9b01      	ldr	r3, [sp, #4]
 800686c:	3301      	adds	r3, #1
 800686e:	9301      	str	r3, [sp, #4]
 8006870:	4a0e      	ldr	r2, [pc, #56]	; (80068ac <USB_CoreReset+0x48>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d814      	bhi.n	80068a0 <USB_CoreReset+0x3c>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006876:	6903      	ldr	r3, [r0, #16]
 8006878:	2b00      	cmp	r3, #0
 800687a:	daf6      	bge.n	800686a <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 800687c:	2300      	movs	r3, #0
 800687e:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006880:	6903      	ldr	r3, [r0, #16]
 8006882:	f043 0301 	orr.w	r3, r3, #1
 8006886:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8006888:	9b01      	ldr	r3, [sp, #4]
 800688a:	3301      	adds	r3, #1
 800688c:	9301      	str	r3, [sp, #4]
 800688e:	4a07      	ldr	r2, [pc, #28]	; (80068ac <USB_CoreReset+0x48>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d808      	bhi.n	80068a6 <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006894:	6903      	ldr	r3, [r0, #16]
 8006896:	f013 0f01 	tst.w	r3, #1
 800689a:	d1f5      	bne.n	8006888 <USB_CoreReset+0x24>

  return HAL_OK;
 800689c:	2000      	movs	r0, #0
 800689e:	e000      	b.n	80068a2 <USB_CoreReset+0x3e>
      return HAL_TIMEOUT;
 80068a0:	2003      	movs	r0, #3
}
 80068a2:	b002      	add	sp, #8
 80068a4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80068a6:	2003      	movs	r0, #3
 80068a8:	e7fb      	b.n	80068a2 <USB_CoreReset+0x3e>
 80068aa:	bf00      	nop
 80068ac:	00030d40 	.word	0x00030d40

080068b0 <USB_CoreInit>:
{
 80068b0:	b084      	sub	sp, #16
 80068b2:	b510      	push	{r4, lr}
 80068b4:	4604      	mov	r4, r0
 80068b6:	a803      	add	r0, sp, #12
 80068b8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80068bc:	9b08      	ldr	r3, [sp, #32]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d11f      	bne.n	8006902 <USB_CoreInit+0x52>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80068c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80068c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068c8:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80068ca:	68e3      	ldr	r3, [r4, #12]
 80068cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80068d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068d4:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80068d6:	68e3      	ldr	r3, [r4, #12]
 80068d8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80068dc:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 80068de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d009      	beq.n	80068f8 <USB_CoreInit+0x48>
    ret = USB_CoreReset(USBx);
 80068e4:	4620      	mov	r0, r4
 80068e6:	f7ff ffbd 	bl	8006864 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80068ea:	9b06      	ldr	r3, [sp, #24]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d01b      	beq.n	8006928 <USB_CoreInit+0x78>
}
 80068f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068f4:	b004      	add	sp, #16
 80068f6:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80068f8:	68e3      	ldr	r3, [r4, #12]
 80068fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068fe:	60e3      	str	r3, [r4, #12]
 8006900:	e7f0      	b.n	80068e4 <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006902:	68e3      	ldr	r3, [r4, #12]
 8006904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006908:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 800690a:	4620      	mov	r0, r4
 800690c:	f7ff ffaa 	bl	8006864 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8006910:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006912:	b923      	cbnz	r3, 800691e <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006914:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800691a:	63a3      	str	r3, [r4, #56]	; 0x38
 800691c:	e7e5      	b.n	80068ea <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800691e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006920:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006924:	63a3      	str	r3, [r4, #56]	; 0x38
 8006926:	e7e0      	b.n	80068ea <USB_CoreInit+0x3a>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006928:	68a3      	ldr	r3, [r4, #8]
 800692a:	f043 0306 	orr.w	r3, r3, #6
 800692e:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006930:	68a3      	ldr	r3, [r4, #8]
 8006932:	f043 0320 	orr.w	r3, r3, #32
 8006936:	60a3      	str	r3, [r4, #8]
 8006938:	e7da      	b.n	80068f0 <USB_CoreInit+0x40>
	...

0800693c <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800693c:	2a02      	cmp	r2, #2
 800693e:	d00a      	beq.n	8006956 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006940:	2109      	movs	r1, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006942:	68c2      	ldr	r2, [r0, #12]
 8006944:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8006948:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800694a:	68c3      	ldr	r3, [r0, #12]
 800694c:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8006950:	60c3      	str	r3, [r0, #12]
}
 8006952:	2000      	movs	r0, #0
 8006954:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006956:	4b23      	ldr	r3, [pc, #140]	; (80069e4 <USB_SetTurnaroundTime+0xa8>)
 8006958:	440b      	add	r3, r1
 800695a:	4a23      	ldr	r2, [pc, #140]	; (80069e8 <USB_SetTurnaroundTime+0xac>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d92f      	bls.n	80069c0 <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006960:	4b22      	ldr	r3, [pc, #136]	; (80069ec <USB_SetTurnaroundTime+0xb0>)
 8006962:	440b      	add	r3, r1
 8006964:	4a22      	ldr	r2, [pc, #136]	; (80069f0 <USB_SetTurnaroundTime+0xb4>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d92c      	bls.n	80069c4 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800696a:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 800696e:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8006972:	4a20      	ldr	r2, [pc, #128]	; (80069f4 <USB_SetTurnaroundTime+0xb8>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d927      	bls.n	80069c8 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006978:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 800697c:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 8006980:	4a1d      	ldr	r2, [pc, #116]	; (80069f8 <USB_SetTurnaroundTime+0xbc>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d322      	bcc.n	80069cc <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006986:	4b1d      	ldr	r3, [pc, #116]	; (80069fc <USB_SetTurnaroundTime+0xc0>)
 8006988:	440b      	add	r3, r1
 800698a:	4a1d      	ldr	r2, [pc, #116]	; (8006a00 <USB_SetTurnaroundTime+0xc4>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d91f      	bls.n	80069d0 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006990:	4b1c      	ldr	r3, [pc, #112]	; (8006a04 <USB_SetTurnaroundTime+0xc8>)
 8006992:	440b      	add	r3, r1
 8006994:	4a1c      	ldr	r2, [pc, #112]	; (8006a08 <USB_SetTurnaroundTime+0xcc>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d31c      	bcc.n	80069d4 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800699a:	4b1c      	ldr	r3, [pc, #112]	; (8006a0c <USB_SetTurnaroundTime+0xd0>)
 800699c:	440b      	add	r3, r1
 800699e:	4a1c      	ldr	r2, [pc, #112]	; (8006a10 <USB_SetTurnaroundTime+0xd4>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d319      	bcc.n	80069d8 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80069a4:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 80069a8:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 80069ac:	4a19      	ldr	r2, [pc, #100]	; (8006a14 <USB_SetTurnaroundTime+0xd8>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d314      	bcc.n	80069dc <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80069b2:	4b19      	ldr	r3, [pc, #100]	; (8006a18 <USB_SetTurnaroundTime+0xdc>)
 80069b4:	440b      	add	r3, r1
 80069b6:	4a19      	ldr	r2, [pc, #100]	; (8006a1c <USB_SetTurnaroundTime+0xe0>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d211      	bcs.n	80069e0 <USB_SetTurnaroundTime+0xa4>
      UsbTrd = 0x7U;
 80069bc:	2107      	movs	r1, #7
 80069be:	e7c0      	b.n	8006942 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 80069c0:	210f      	movs	r1, #15
 80069c2:	e7be      	b.n	8006942 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 80069c4:	210e      	movs	r1, #14
 80069c6:	e7bc      	b.n	8006942 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 80069c8:	210d      	movs	r1, #13
 80069ca:	e7ba      	b.n	8006942 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 80069cc:	210c      	movs	r1, #12
 80069ce:	e7b8      	b.n	8006942 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 80069d0:	210b      	movs	r1, #11
 80069d2:	e7b6      	b.n	8006942 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 80069d4:	210a      	movs	r1, #10
 80069d6:	e7b4      	b.n	8006942 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 80069d8:	2109      	movs	r1, #9
 80069da:	e7b2      	b.n	8006942 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 80069dc:	2108      	movs	r1, #8
 80069de:	e7b0      	b.n	8006942 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 80069e0:	2106      	movs	r1, #6
 80069e2:	e7ae      	b.n	8006942 <USB_SetTurnaroundTime+0x6>
 80069e4:	ff275340 	.word	0xff275340
 80069e8:	000c34ff 	.word	0x000c34ff
 80069ec:	ff1b1e40 	.word	0xff1b1e40
 80069f0:	000f423f 	.word	0x000f423f
 80069f4:	00124f7f 	.word	0x00124f7f
 80069f8:	0013d620 	.word	0x0013d620
 80069fc:	fee5b660 	.word	0xfee5b660
 8006a00:	0016e35f 	.word	0x0016e35f
 8006a04:	feced300 	.word	0xfeced300
 8006a08:	001b7740 	.word	0x001b7740
 8006a0c:	feb35bc0 	.word	0xfeb35bc0
 8006a10:	002191c0 	.word	0x002191c0
 8006a14:	00387520 	.word	0x00387520
 8006a18:	fe5954e0 	.word	0xfe5954e0
 8006a1c:	00419ce0 	.word	0x00419ce0

08006a20 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006a20:	6883      	ldr	r3, [r0, #8]
 8006a22:	f043 0301 	orr.w	r3, r3, #1
 8006a26:	6083      	str	r3, [r0, #8]
}
 8006a28:	2000      	movs	r0, #0
 8006a2a:	4770      	bx	lr

08006a2c <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a2c:	6883      	ldr	r3, [r0, #8]
 8006a2e:	f023 0301 	bic.w	r3, r3, #1
 8006a32:	6083      	str	r3, [r0, #8]
}
 8006a34:	2000      	movs	r0, #0
 8006a36:	4770      	bx	lr

08006a38 <USB_FlushTxFifo>:
{
 8006a38:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a3e:	0189      	lsls	r1, r1, #6
 8006a40:	f041 0120 	orr.w	r1, r1, #32
 8006a44:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8006a46:	9b01      	ldr	r3, [sp, #4]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	9301      	str	r3, [sp, #4]
 8006a4c:	4a05      	ldr	r2, [pc, #20]	; (8006a64 <USB_FlushTxFifo+0x2c>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d805      	bhi.n	8006a5e <USB_FlushTxFifo+0x26>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a52:	6903      	ldr	r3, [r0, #16]
 8006a54:	f013 0f20 	tst.w	r3, #32
 8006a58:	d1f5      	bne.n	8006a46 <USB_FlushTxFifo+0xe>
  return HAL_OK;
 8006a5a:	2000      	movs	r0, #0
 8006a5c:	e000      	b.n	8006a60 <USB_FlushTxFifo+0x28>
      return HAL_TIMEOUT;
 8006a5e:	2003      	movs	r0, #3
}
 8006a60:	b002      	add	sp, #8
 8006a62:	4770      	bx	lr
 8006a64:	00030d40 	.word	0x00030d40

08006a68 <USB_FlushRxFifo>:
{
 8006a68:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a6e:	2310      	movs	r3, #16
 8006a70:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8006a72:	9b01      	ldr	r3, [sp, #4]
 8006a74:	3301      	adds	r3, #1
 8006a76:	9301      	str	r3, [sp, #4]
 8006a78:	4a05      	ldr	r2, [pc, #20]	; (8006a90 <USB_FlushRxFifo+0x28>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d805      	bhi.n	8006a8a <USB_FlushRxFifo+0x22>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a7e:	6903      	ldr	r3, [r0, #16]
 8006a80:	f013 0f10 	tst.w	r3, #16
 8006a84:	d1f5      	bne.n	8006a72 <USB_FlushRxFifo+0xa>
  return HAL_OK;
 8006a86:	2000      	movs	r0, #0
 8006a88:	e000      	b.n	8006a8c <USB_FlushRxFifo+0x24>
      return HAL_TIMEOUT;
 8006a8a:	2003      	movs	r0, #3
}
 8006a8c:	b002      	add	sp, #8
 8006a8e:	4770      	bx	lr
 8006a90:	00030d40 	.word	0x00030d40

08006a94 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8006a94:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8006a98:	4319      	orrs	r1, r3
 8006a9a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8006a9e:	2000      	movs	r0, #0
 8006aa0:	4770      	bx	lr
	...

08006aa4 <USB_DevInit>:
{
 8006aa4:	b084      	sub	sp, #16
 8006aa6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006aaa:	4604      	mov	r4, r0
 8006aac:	a809      	add	r0, sp, #36	; 0x24
 8006aae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ab2:	4625      	mov	r5, r4
  for (i = 0U; i < 15U; i++)
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	e006      	b.n	8006ac6 <USB_DevInit+0x22>
    USBx->DIEPTXF[i] = 0U;
 8006ab8:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006abc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	2b0e      	cmp	r3, #14
 8006ac8:	d9f6      	bls.n	8006ab8 <USB_DevInit+0x14>
  if (cfg.vbus_sensing_enable == 0U)
 8006aca:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 8006ace:	f1b8 0f00 	cmp.w	r8, #0
 8006ad2:	d124      	bne.n	8006b1e <USB_DevInit+0x7a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ad4:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 8006ad8:	f043 0302 	orr.w	r3, r3, #2
 8006adc:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006ae0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006ae2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ae6:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006ae8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006aea:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006aee:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006af0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006af6:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8006af8:	2300      	movs	r3, #0
 8006afa:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006afe:	f504 6600 	add.w	r6, r4, #2048	; 0x800
 8006b02:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8006b06:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d114      	bne.n	8006b3a <USB_DevInit+0x96>
    if (cfg.speed == USBD_HS_SPEED)
 8006b10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b12:	b96b      	cbnz	r3, 8006b30 <USB_DevInit+0x8c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006b14:	2100      	movs	r1, #0
 8006b16:	4620      	mov	r0, r4
 8006b18:	f7ff ffbc 	bl	8006a94 <USB_SetDevSpeed>
 8006b1c:	e011      	b.n	8006b42 <USB_DevInit+0x9e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006b1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006b20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b24:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006b26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006b28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b2c:	63a3      	str	r3, [r4, #56]	; 0x38
 8006b2e:	e7e3      	b.n	8006af8 <USB_DevInit+0x54>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006b30:	2101      	movs	r1, #1
 8006b32:	4620      	mov	r0, r4
 8006b34:	f7ff ffae 	bl	8006a94 <USB_SetDevSpeed>
 8006b38:	e003      	b.n	8006b42 <USB_DevInit+0x9e>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006b3a:	2103      	movs	r1, #3
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	f7ff ffa9 	bl	8006a94 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b42:	2110      	movs	r1, #16
 8006b44:	4620      	mov	r0, r4
 8006b46:	f7ff ff77 	bl	8006a38 <USB_FlushTxFifo>
 8006b4a:	4681      	mov	r9, r0
 8006b4c:	b108      	cbz	r0, 8006b52 <USB_DevInit+0xae>
    ret = HAL_ERROR;
 8006b4e:	f04f 0901 	mov.w	r9, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b52:	4620      	mov	r0, r4
 8006b54:	f7ff ff88 	bl	8006a68 <USB_FlushRxFifo>
 8006b58:	b108      	cbz	r0, 8006b5e <USB_DevInit+0xba>
    ret = HAL_ERROR;
 8006b5a:	f04f 0901 	mov.w	r9, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006b62:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006b64:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b66:	e00a      	b.n	8006b7e <USB_DevInit+0xda>
      if (i == 0U)
 8006b68:	b9c3      	cbnz	r3, 8006b9c <USB_DevInit+0xf8>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006b6a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8006b6e:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006b72:	2200      	movs	r2, #0
 8006b74:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006b76:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8006b7a:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006b80:	429f      	cmp	r7, r3
 8006b82:	d910      	bls.n	8006ba6 <USB_DevInit+0x102>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b84:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8006b88:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 8006b8c:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 8006b90:	2800      	cmp	r0, #0
 8006b92:	dbe9      	blt.n	8006b68 <USB_DevInit+0xc4>
      USBx_INEP(i)->DIEPCTL = 0U;
 8006b94:	2000      	movs	r0, #0
 8006b96:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8006b9a:	e7ea      	b.n	8006b72 <USB_DevInit+0xce>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006ba0:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8006ba4:	e7e5      	b.n	8006b72 <USB_DevInit+0xce>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	e00a      	b.n	8006bc0 <USB_DevInit+0x11c>
      if (i == 0U)
 8006baa:	b1bb      	cbz	r3, 8006bdc <USB_DevInit+0x138>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006bac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006bb0:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	610a      	str	r2, [r1, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006bb8:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8006bbc:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	429f      	cmp	r7, r3
 8006bc2:	d910      	bls.n	8006be6 <USB_DevInit+0x142>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006bc4:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8006bc8:	f502 6130 	add.w	r1, r2, #2816	; 0xb00
 8006bcc:	f8d2 0b00 	ldr.w	r0, [r2, #2816]	; 0xb00
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	dbea      	blt.n	8006baa <USB_DevInit+0x106>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
 8006bda:	e7eb      	b.n	8006bb4 <USB_DevInit+0x110>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006bdc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8006be0:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
 8006be4:	e7e6      	b.n	8006bb4 <USB_DevInit+0x110>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006be6:	6933      	ldr	r3, [r6, #16]
 8006be8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bec:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006bf2:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8006bf6:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8006bf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bfa:	b91b      	cbnz	r3, 8006c04 <USB_DevInit+0x160>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006bfc:	69a3      	ldr	r3, [r4, #24]
 8006bfe:	f043 0310 	orr.w	r3, r3, #16
 8006c02:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006c04:	69a2      	ldr	r2, [r4, #24]
 8006c06:	4b0c      	ldr	r3, [pc, #48]	; (8006c38 <USB_DevInit+0x194>)
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8006c0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c0e:	b11b      	cbz	r3, 8006c18 <USB_DevInit+0x174>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006c10:	69a3      	ldr	r3, [r4, #24]
 8006c12:	f043 0308 	orr.w	r3, r3, #8
 8006c16:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8006c18:	f1b8 0f01 	cmp.w	r8, #1
 8006c1c:	d004      	beq.n	8006c28 <USB_DevInit+0x184>
}
 8006c1e:	4648      	mov	r0, r9
 8006c20:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c24:	b004      	add	sp, #16
 8006c26:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006c28:	69a3      	ldr	r3, [r4, #24]
 8006c2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c2e:	f043 0304 	orr.w	r3, r3, #4
 8006c32:	61a3      	str	r3, [r4, #24]
 8006c34:	e7f3      	b.n	8006c1e <USB_DevInit+0x17a>
 8006c36:	bf00      	nop
 8006c38:	803c3800 	.word	0x803c3800

08006c3c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006c3c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006c40:	f013 0306 	ands.w	r3, r3, #6
 8006c44:	d007      	beq.n	8006c56 <USB_GetDevSpeed+0x1a>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d007      	beq.n	8006c5a <USB_GetDevSpeed+0x1e>
 8006c4a:	2b06      	cmp	r3, #6
 8006c4c:	d001      	beq.n	8006c52 <USB_GetDevSpeed+0x16>
    speed = 0xFU;
 8006c4e:	200f      	movs	r0, #15
}
 8006c50:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 8006c52:	2002      	movs	r0, #2
 8006c54:	4770      	bx	lr
    speed = USBD_HS_SPEED;
 8006c56:	2000      	movs	r0, #0
 8006c58:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 8006c5a:	2002      	movs	r0, #2
 8006c5c:	4770      	bx	lr

08006c5e <USB_ActivateEndpoint>:
{
 8006c5e:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 8006c60:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8006c62:	784b      	ldrb	r3, [r1, #1]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d022      	beq.n	8006cae <USB_ActivateEndpoint+0x50>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006c68:	f8d0 381c 	ldr.w	r3, [r0, #2076]	; 0x81c
 8006c6c:	f004 060f 	and.w	r6, r4, #15
 8006c70:	2201      	movs	r2, #1
 8006c72:	40b2      	lsls	r2, r6
 8006c74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c78:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006c7c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8006c80:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006c84:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006c88:	d10e      	bne.n	8006ca8 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006c8a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006c8e:	688a      	ldr	r2, [r1, #8]
 8006c90:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006c94:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006c96:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ca4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8006ca8:	2000      	movs	r0, #0
 8006caa:	bc70      	pop	{r4, r5, r6}
 8006cac:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006cae:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8006cb2:	f004 060f 	and.w	r6, r4, #15
 8006cb6:	40b3      	lsls	r3, r6
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006cc0:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8006cc4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006cc8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006ccc:	d1ec      	bne.n	8006ca8 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006cce:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006cd2:	688a      	ldr	r2, [r1, #8]
 8006cd4:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006cd8:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006cda:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006cde:	ea42 5484 	orr.w	r4, r2, r4, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ce2:	431c      	orrs	r4, r3
 8006ce4:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8006ce8:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8006cec:	f8c0 4900 	str.w	r4, [r0, #2304]	; 0x900
 8006cf0:	e7da      	b.n	8006ca8 <USB_ActivateEndpoint+0x4a>
	...

08006cf4 <USB_DeactivateEndpoint>:
{
 8006cf4:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 8006cf6:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8006cf8:	784a      	ldrb	r2, [r1, #1]
 8006cfa:	2a01      	cmp	r2, #1
 8006cfc:	d024      	beq.n	8006d48 <USB_DeactivateEndpoint+0x54>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006cfe:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8006d02:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8006d06:	2a00      	cmp	r2, #0
 8006d08:	db50      	blt.n	8006dac <USB_DeactivateEndpoint+0xb8>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d0a:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 8006d0e:	780a      	ldrb	r2, [r1, #0]
 8006d10:	f002 020f 	and.w	r2, r2, #15
 8006d14:	2401      	movs	r4, #1
 8006d16:	fa04 f202 	lsl.w	r2, r4, r2
 8006d1a:	ea25 4202 	bic.w	r2, r5, r2, lsl #16
 8006d1e:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d22:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8006d26:	7809      	ldrb	r1, [r1, #0]
 8006d28:	f001 010f 	and.w	r1, r1, #15
 8006d2c:	408c      	lsls	r4, r1
 8006d2e:	ea22 4404 	bic.w	r4, r2, r4, lsl #16
 8006d32:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006d36:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8006d3a:	4a23      	ldr	r2, [pc, #140]	; (8006dc8 <USB_DeactivateEndpoint+0xd4>)
 8006d3c:	400a      	ands	r2, r1
 8006d3e:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 8006d42:	2000      	movs	r0, #0
 8006d44:	bc30      	pop	{r4, r5}
 8006d46:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d48:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8006d4c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8006d50:	2a00      	cmp	r2, #0
 8006d52:	db1e      	blt.n	8006d92 <USB_DeactivateEndpoint+0x9e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006d54:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 8006d58:	780a      	ldrb	r2, [r1, #0]
 8006d5a:	f002 020f 	and.w	r2, r2, #15
 8006d5e:	2401      	movs	r4, #1
 8006d60:	fa04 f202 	lsl.w	r2, r4, r2
 8006d64:	b292      	uxth	r2, r2
 8006d66:	ea25 0202 	bic.w	r2, r5, r2
 8006d6a:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006d6e:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8006d72:	7809      	ldrb	r1, [r1, #0]
 8006d74:	f001 010f 	and.w	r1, r1, #15
 8006d78:	408c      	lsls	r4, r1
 8006d7a:	b2a4      	uxth	r4, r4
 8006d7c:	ea22 0404 	bic.w	r4, r2, r4
 8006d80:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006d84:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8006d88:	4a10      	ldr	r2, [pc, #64]	; (8006dcc <USB_DeactivateEndpoint+0xd8>)
 8006d8a:	400a      	ands	r2, r1
 8006d8c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8006d90:	e7d7      	b.n	8006d42 <USB_DeactivateEndpoint+0x4e>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006d92:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8006d96:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8006d9a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006d9e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8006da2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006da6:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8006daa:	e7d3      	b.n	8006d54 <USB_DeactivateEndpoint+0x60>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006dac:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8006db0:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8006db4:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006db8:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8006dbc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006dc0:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8006dc4:	e7a1      	b.n	8006d0a <USB_DeactivateEndpoint+0x16>
 8006dc6:	bf00      	nop
 8006dc8:	eff37800 	.word	0xeff37800
 8006dcc:	ec337800 	.word	0xec337800

08006dd0 <USB_EP0StartXfer>:
{
 8006dd0:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 8006dd2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8006dd4:	784c      	ldrb	r4, [r1, #1]
 8006dd6:	2c01      	cmp	r4, #1
 8006dd8:	d026      	beq.n	8006e28 <USB_EP0StartXfer+0x58>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006dda:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8006dde:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8006de2:	691c      	ldr	r4, [r3, #16]
 8006de4:	0ce4      	lsrs	r4, r4, #19
 8006de6:	04e4      	lsls	r4, r4, #19
 8006de8:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006dea:	691c      	ldr	r4, [r3, #16]
 8006dec:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8006df0:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8006df4:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 8006df6:	694c      	ldr	r4, [r1, #20]
 8006df8:	b10c      	cbz	r4, 8006dfe <USB_EP0StartXfer+0x2e>
      ep->xfer_len = ep->maxpacket;
 8006dfa:	688c      	ldr	r4, [r1, #8]
 8006dfc:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006dfe:	691c      	ldr	r4, [r3, #16]
 8006e00:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8006e04:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006e06:	691c      	ldr	r4, [r3, #16]
 8006e08:	688d      	ldr	r5, [r1, #8]
 8006e0a:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8006e0e:	432c      	orrs	r4, r5
 8006e10:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8006e12:	2a01      	cmp	r2, #1
 8006e14:	d065      	beq.n	8006ee2 <USB_EP0StartXfer+0x112>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006e16:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006e1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e1e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8006e22:	2000      	movs	r0, #0
 8006e24:	bc70      	pop	{r4, r5, r6}
 8006e26:	4770      	bx	lr
    if (ep->xfer_len == 0U)
 8006e28:	694c      	ldr	r4, [r1, #20]
 8006e2a:	bb6c      	cbnz	r4, 8006e88 <USB_EP0StartXfer+0xb8>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e2c:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8006e30:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8006e34:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8006e38:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8006e3c:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e40:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8006e44:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8006e48:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e4c:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8006e50:	0ced      	lsrs	r5, r5, #19
 8006e52:	04ed      	lsls	r5, r5, #19
 8006e54:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 8006e58:	2a01      	cmp	r2, #1
 8006e5a:	d033      	beq.n	8006ec4 <USB_EP0StartXfer+0xf4>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e5c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8006e60:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8006e64:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8006e68:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 8006e6c:	694b      	ldr	r3, [r1, #20]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d0d7      	beq.n	8006e22 <USB_EP0StartXfer+0x52>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006e72:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8006e76:	780a      	ldrb	r2, [r1, #0]
 8006e78:	f002 010f 	and.w	r1, r2, #15
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	408a      	lsls	r2, r1
 8006e80:	4313      	orrs	r3, r2
 8006e82:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8006e86:	e7cc      	b.n	8006e22 <USB_EP0StartXfer+0x52>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e88:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8006e8c:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 8006e90:	6925      	ldr	r5, [r4, #16]
 8006e92:	0ced      	lsrs	r5, r5, #19
 8006e94:	04ed      	lsls	r5, r5, #19
 8006e96:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e98:	6925      	ldr	r5, [r4, #16]
 8006e9a:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8006e9e:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8006ea2:	6125      	str	r5, [r4, #16]
      if (ep->xfer_len > ep->maxpacket)
 8006ea4:	694e      	ldr	r6, [r1, #20]
 8006ea6:	688d      	ldr	r5, [r1, #8]
 8006ea8:	42ae      	cmp	r6, r5
 8006eaa:	d900      	bls.n	8006eae <USB_EP0StartXfer+0xde>
        ep->xfer_len = ep->maxpacket;
 8006eac:	614d      	str	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006eae:	6925      	ldr	r5, [r4, #16]
 8006eb0:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8006eb4:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006eb6:	6925      	ldr	r5, [r4, #16]
 8006eb8:	694e      	ldr	r6, [r1, #20]
 8006eba:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8006ebe:	4335      	orrs	r5, r6
 8006ec0:	6125      	str	r5, [r4, #16]
 8006ec2:	e7c9      	b.n	8006e58 <USB_EP0StartXfer+0x88>
      if ((uint32_t)ep->dma_addr != 0U)
 8006ec4:	690a      	ldr	r2, [r1, #16]
 8006ec6:	b11a      	cbz	r2, 8006ed0 <USB_EP0StartXfer+0x100>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006ec8:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8006ecc:	f8c1 2914 	str.w	r2, [r1, #2324]	; 0x914
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ed0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8006ed4:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8006ed8:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8006edc:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 8006ee0:	e79f      	b.n	8006e22 <USB_EP0StartXfer+0x52>
      if ((uint32_t)ep->xfer_buff != 0U)
 8006ee2:	68ca      	ldr	r2, [r1, #12]
 8006ee4:	2a00      	cmp	r2, #0
 8006ee6:	d096      	beq.n	8006e16 <USB_EP0StartXfer+0x46>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006ee8:	615a      	str	r2, [r3, #20]
 8006eea:	e794      	b.n	8006e16 <USB_EP0StartXfer+0x46>

08006eec <USB_WritePacket>:
{
 8006eec:	b470      	push	{r4, r5, r6}
 8006eee:	f89d 400c 	ldrb.w	r4, [sp, #12]
  if (dma == 0U)
 8006ef2:	b964      	cbnz	r4, 8006f0e <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8006ef4:	3303      	adds	r3, #3
 8006ef6:	089d      	lsrs	r5, r3, #2
    for (i = 0U; i < count32b; i++)
 8006ef8:	42ac      	cmp	r4, r5
 8006efa:	d208      	bcs.n	8006f0e <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006efc:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 8006f00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f04:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f08:	601e      	str	r6, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8006f0a:	3401      	adds	r4, #1
 8006f0c:	e7f4      	b.n	8006ef8 <USB_WritePacket+0xc>
}
 8006f0e:	2000      	movs	r0, #0
 8006f10:	bc70      	pop	{r4, r5, r6}
 8006f12:	4770      	bx	lr

08006f14 <USB_EPStartXfer>:
{
 8006f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f16:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8006f18:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8006f1a:	784c      	ldrb	r4, [r1, #1]
 8006f1c:	2c01      	cmp	r4, #1
 8006f1e:	d02b      	beq.n	8006f78 <USB_EPStartXfer+0x64>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006f20:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8006f24:	f503 6430 	add.w	r4, r3, #2816	; 0xb00
 8006f28:	6925      	ldr	r5, [r4, #16]
 8006f2a:	0ced      	lsrs	r5, r5, #19
 8006f2c:	04ed      	lsls	r5, r5, #19
 8006f2e:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006f30:	6925      	ldr	r5, [r4, #16]
 8006f32:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8006f36:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8006f3a:	6125      	str	r5, [r4, #16]
    if (ep->xfer_len == 0U)
 8006f3c:	694d      	ldr	r5, [r1, #20]
 8006f3e:	2d00      	cmp	r5, #0
 8006f40:	f040 80c3 	bne.w	80070ca <USB_EPStartXfer+0x1b6>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006f44:	6925      	ldr	r5, [r4, #16]
 8006f46:	688e      	ldr	r6, [r1, #8]
 8006f48:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8006f4c:	4335      	orrs	r5, r6
 8006f4e:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f50:	6925      	ldr	r5, [r4, #16]
 8006f52:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8006f56:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 8006f58:	2a01      	cmp	r2, #1
 8006f5a:	f000 80cb 	beq.w	80070f4 <USB_EPStartXfer+0x1e0>
    if (ep->type == EP_TYPE_ISOC)
 8006f5e:	78ca      	ldrb	r2, [r1, #3]
 8006f60:	2a01      	cmp	r2, #1
 8006f62:	f000 80cd 	beq.w	8007100 <USB_EPStartXfer+0x1ec>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006f66:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8006f6a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8006f6e:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 8006f72:	2000      	movs	r0, #0
 8006f74:	b003      	add	sp, #12
 8006f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8006f78:	694c      	ldr	r4, [r1, #20]
 8006f7a:	bb84      	cbnz	r4, 8006fde <USB_EPStartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f7c:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8006f80:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8006f84:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8006f88:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8006f8c:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f90:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8006f94:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8006f98:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f9c:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8006fa0:	0ced      	lsrs	r5, r5, #19
 8006fa2:	04ed      	lsls	r5, r5, #19
 8006fa4:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 8006fa8:	2a01      	cmp	r2, #1
 8006faa:	d04c      	beq.n	8007046 <USB_EPStartXfer+0x132>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006fac:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8006fb0:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8006fb4:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8006fb8:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8006fbc:	78cc      	ldrb	r4, [r1, #3]
 8006fbe:	2c01      	cmp	r4, #1
 8006fc0:	d06a      	beq.n	8007098 <USB_EPStartXfer+0x184>
        if (ep->xfer_len > 0U)
 8006fc2:	694b      	ldr	r3, [r1, #20]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d0d4      	beq.n	8006f72 <USB_EPStartXfer+0x5e>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006fc8:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8006fcc:	7809      	ldrb	r1, [r1, #0]
 8006fce:	f001 040f 	and.w	r4, r1, #15
 8006fd2:	2101      	movs	r1, #1
 8006fd4:	40a1      	lsls	r1, r4
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 8006fdc:	e7c9      	b.n	8006f72 <USB_EPStartXfer+0x5e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fde:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8006fe2:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8006fe6:	0ced      	lsrs	r5, r5, #19
 8006fe8:	04ed      	lsls	r5, r5, #19
 8006fea:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fee:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8006ff2:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8006ff6:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8006ffa:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006ffe:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007002:	694d      	ldr	r5, [r1, #20]
 8007004:	688f      	ldr	r7, [r1, #8]
 8007006:	443d      	add	r5, r7
 8007008:	3d01      	subs	r5, #1
 800700a:	fbb5 f5f7 	udiv	r5, r5, r7
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800700e:	4f46      	ldr	r7, [pc, #280]	; (8007128 <USB_EPStartXfer+0x214>)
 8007010:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 8007014:	4335      	orrs	r5, r6
 8007016:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800701a:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800701e:	694e      	ldr	r6, [r1, #20]
 8007020:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8007024:	4335      	orrs	r5, r6
 8007026:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800702a:	f504 6410 	add.w	r4, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 800702e:	78cd      	ldrb	r5, [r1, #3]
 8007030:	2d01      	cmp	r5, #1
 8007032:	d1b9      	bne.n	8006fa8 <USB_EPStartXfer+0x94>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007034:	6925      	ldr	r5, [r4, #16]
 8007036:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 800703a:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800703c:	6925      	ldr	r5, [r4, #16]
 800703e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007042:	6125      	str	r5, [r4, #16]
 8007044:	e7b0      	b.n	8006fa8 <USB_EPStartXfer+0x94>
      if ((uint32_t)ep->dma_addr != 0U)
 8007046:	690a      	ldr	r2, [r1, #16]
 8007048:	b11a      	cbz	r2, 8007052 <USB_EPStartXfer+0x13e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800704a:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800704e:	f8c4 2914 	str.w	r2, [r4, #2324]	; 0x914
      if (ep->type == EP_TYPE_ISOC)
 8007052:	78ca      	ldrb	r2, [r1, #3]
 8007054:	2a01      	cmp	r2, #1
 8007056:	d008      	beq.n	800706a <USB_EPStartXfer+0x156>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007058:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800705c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8007060:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8007064:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8007068:	e783      	b.n	8006f72 <USB_EPStartXfer+0x5e>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800706a:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800706e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007072:	d108      	bne.n	8007086 <USB_EPStartXfer+0x172>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007074:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8007078:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 800707c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007080:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8007084:	e7e8      	b.n	8007058 <USB_EPStartXfer+0x144>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007086:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 800708a:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 800708e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007092:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8007096:	e7df      	b.n	8007058 <USB_EPStartXfer+0x144>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007098:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 800709c:	f414 7f80 	tst.w	r4, #256	; 0x100
 80070a0:	d10c      	bne.n	80070bc <USB_EPStartXfer+0x1a8>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80070a2:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 80070a6:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 80070aa:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80070ae:	9200      	str	r2, [sp, #0]
 80070b0:	8a8b      	ldrh	r3, [r1, #20]
 80070b2:	780a      	ldrb	r2, [r1, #0]
 80070b4:	68c9      	ldr	r1, [r1, #12]
 80070b6:	f7ff ff19 	bl	8006eec <USB_WritePacket>
 80070ba:	e75a      	b.n	8006f72 <USB_EPStartXfer+0x5e>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80070bc:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 80070c0:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 80070c4:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 80070c8:	e7f1      	b.n	80070ae <USB_EPStartXfer+0x19a>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80070ca:	688e      	ldr	r6, [r1, #8]
 80070cc:	4435      	add	r5, r6
 80070ce:	3d01      	subs	r5, #1
 80070d0:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80070d4:	6926      	ldr	r6, [r4, #16]
 80070d6:	4f14      	ldr	r7, [pc, #80]	; (8007128 <USB_EPStartXfer+0x214>)
 80070d8:	ea07 47c5 	and.w	r7, r7, r5, lsl #19
 80070dc:	433e      	orrs	r6, r7
 80070de:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80070e0:	6927      	ldr	r7, [r4, #16]
 80070e2:	688e      	ldr	r6, [r1, #8]
 80070e4:	b2ad      	uxth	r5, r5
 80070e6:	fb06 f505 	mul.w	r5, r6, r5
 80070ea:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80070ee:	433d      	orrs	r5, r7
 80070f0:	6125      	str	r5, [r4, #16]
 80070f2:	e731      	b.n	8006f58 <USB_EPStartXfer+0x44>
      if ((uint32_t)ep->xfer_buff != 0U)
 80070f4:	68ca      	ldr	r2, [r1, #12]
 80070f6:	2a00      	cmp	r2, #0
 80070f8:	f43f af31 	beq.w	8006f5e <USB_EPStartXfer+0x4a>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80070fc:	6162      	str	r2, [r4, #20]
 80070fe:	e72e      	b.n	8006f5e <USB_EPStartXfer+0x4a>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007100:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8007104:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007108:	d106      	bne.n	8007118 <USB_EPStartXfer+0x204>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800710a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800710e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007112:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8007116:	e726      	b.n	8006f66 <USB_EPStartXfer+0x52>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007118:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800711c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007120:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8007124:	e71f      	b.n	8006f66 <USB_EPStartXfer+0x52>
 8007126:	bf00      	nop
 8007128:	1ff80000 	.word	0x1ff80000

0800712c <USB_ReadPacket>:
{
 800712c:	b4f0      	push	{r4, r5, r6, r7}
 800712e:	b082      	sub	sp, #8
 8007130:	4607      	mov	r7, r0
 8007132:	4608      	mov	r0, r1
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007134:	463e      	mov	r6, r7
  uint32_t count32b = (uint32_t)len >> 2U;
 8007136:	0895      	lsrs	r5, r2, #2
  uint16_t remaining_bytes = len % 4U;
 8007138:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 800713c:	2300      	movs	r3, #0
 800713e:	42ab      	cmp	r3, r5
 8007140:	d206      	bcs.n	8007150 <USB_ReadPacket+0x24>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007142:	f506 5480 	add.w	r4, r6, #4096	; 0x1000
 8007146:	6824      	ldr	r4, [r4, #0]
 8007148:	f840 4b04 	str.w	r4, [r0], #4
  for (i = 0U; i < count32b; i++)
 800714c:	3301      	adds	r3, #1
 800714e:	e7f6      	b.n	800713e <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 8007150:	b17a      	cbz	r2, 8007172 <USB_ReadPacket+0x46>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007152:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	9301      	str	r3, [sp, #4]
    i = 0U;
 800715a:	2500      	movs	r5, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800715c:	b2eb      	uxtb	r3, r5
 800715e:	00dc      	lsls	r4, r3, #3
 8007160:	9b01      	ldr	r3, [sp, #4]
 8007162:	40e3      	lsrs	r3, r4
 8007164:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 8007168:	3501      	adds	r5, #1
      remaining_bytes--;
 800716a:	3a01      	subs	r2, #1
 800716c:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 800716e:	2a00      	cmp	r2, #0
 8007170:	d1f4      	bne.n	800715c <USB_ReadPacket+0x30>
}
 8007172:	b002      	add	sp, #8
 8007174:	bcf0      	pop	{r4, r5, r6, r7}
 8007176:	4770      	bx	lr

08007178 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8007178:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800717a:	784a      	ldrb	r2, [r1, #1]
 800717c:	2a01      	cmp	r2, #1
 800717e:	d014      	beq.n	80071aa <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007180:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8007184:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8007188:	2a00      	cmp	r2, #0
 800718a:	db06      	blt.n	800719a <USB_EPSetStall+0x22>
 800718c:	b12b      	cbz	r3, 800719a <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800718e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007192:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007196:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800719a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800719e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80071a2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80071a6:	2000      	movs	r0, #0
 80071a8:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80071aa:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80071ae:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80071b2:	2a00      	cmp	r2, #0
 80071b4:	db06      	blt.n	80071c4 <USB_EPSetStall+0x4c>
 80071b6:	b12b      	cbz	r3, 80071c4 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80071b8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80071bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80071c0:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80071c4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80071c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80071cc:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 80071d0:	e7e9      	b.n	80071a6 <USB_EPSetStall+0x2e>

080071d2 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 80071d2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80071d4:	784a      	ldrb	r2, [r1, #1]
 80071d6:	2a01      	cmp	r2, #1
 80071d8:	d00e      	beq.n	80071f8 <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80071da:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80071de:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80071e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80071e6:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80071ea:	78cb      	ldrb	r3, [r1, #3]
 80071ec:	3b02      	subs	r3, #2
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d915      	bls.n	8007220 <USB_EPClearStall+0x4e>
}
 80071f4:	2000      	movs	r0, #0
 80071f6:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80071f8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80071fc:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007200:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007204:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007208:	78cb      	ldrb	r3, [r1, #3]
 800720a:	3b02      	subs	r3, #2
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b01      	cmp	r3, #1
 8007210:	d8f0      	bhi.n	80071f4 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007212:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800721a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800721e:	e7e9      	b.n	80071f4 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007220:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007228:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800722c:	e7e2      	b.n	80071f4 <USB_EPClearStall+0x22>

0800722e <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800722e:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8007232:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007236:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800723a:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800723e:	0109      	lsls	r1, r1, #4
 8007240:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8007244:	4319      	orrs	r1, r3
 8007246:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800724a:	2000      	movs	r0, #0
 800724c:	4770      	bx	lr

0800724e <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800724e:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8007252:	f023 0303 	bic.w	r3, r3, #3
 8007256:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800725a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800725e:	f023 0302 	bic.w	r3, r3, #2
 8007262:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8007266:	2000      	movs	r0, #0
 8007268:	4770      	bx	lr

0800726a <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800726a:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 800726e:	f023 0303 	bic.w	r3, r3, #3
 8007272:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007276:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800727a:	f043 0302 	orr.w	r3, r3, #2
 800727e:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8007282:	2000      	movs	r0, #0
 8007284:	4770      	bx	lr

08007286 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8007286:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8007288:	6980      	ldr	r0, [r0, #24]
}
 800728a:	4010      	ands	r0, r2
 800728c:	4770      	bx	lr

0800728e <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800728e:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8007292:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007296:	69c0      	ldr	r0, [r0, #28]
 8007298:	4018      	ands	r0, r3
}
 800729a:	0c00      	lsrs	r0, r0, #16
 800729c:	4770      	bx	lr

0800729e <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800729e:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80072a2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80072a6:	69c0      	ldr	r0, [r0, #28]
 80072a8:	4018      	ands	r0, r3
}
 80072aa:	b280      	uxth	r0, r0
 80072ac:	4770      	bx	lr

080072ae <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80072ae:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80072b2:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80072b6:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80072ba:	6940      	ldr	r0, [r0, #20]
}
 80072bc:	4010      	ands	r0, r2
 80072be:	4770      	bx	lr

080072c0 <USB_ReadDevInEPInterrupt>:
{
 80072c0:	b410      	push	{r4}
  msk = USBx_DEVICE->DIEPMSK;
 80072c2:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 80072c6:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80072ca:	f001 020f 	and.w	r2, r1, #15
 80072ce:	40d3      	lsrs	r3, r2
 80072d0:	01db      	lsls	r3, r3, #7
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	4323      	orrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80072d6:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 80072da:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 80072de:	6880      	ldr	r0, [r0, #8]
}
 80072e0:	4018      	ands	r0, r3
 80072e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80072e8:	6940      	ldr	r0, [r0, #20]
}
 80072ea:	f000 0001 	and.w	r0, r0, #1
 80072ee:	4770      	bx	lr

080072f0 <USB_SetCurrentMode>:
{
 80072f0:	b538      	push	{r3, r4, r5, lr}
 80072f2:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80072f4:	68c3      	ldr	r3, [r0, #12]
 80072f6:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80072fa:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80072fc:	2901      	cmp	r1, #1
 80072fe:	d013      	beq.n	8007328 <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 8007300:	bb19      	cbnz	r1, 800734a <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007302:	68c3      	ldr	r3, [r0, #12]
 8007304:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007308:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 800730a:	2400      	movs	r4, #0
      HAL_Delay(1U);
 800730c:	2001      	movs	r0, #1
 800730e:	f7f9 ff0d 	bl	800112c <HAL_Delay>
      ms++;
 8007312:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007314:	4628      	mov	r0, r5
 8007316:	f7ff ffe7 	bl	80072e8 <USB_GetMode>
 800731a:	b108      	cbz	r0, 8007320 <USB_SetCurrentMode+0x30>
 800731c:	2c31      	cmp	r4, #49	; 0x31
 800731e:	d9f5      	bls.n	800730c <USB_SetCurrentMode+0x1c>
  if (ms == 50U)
 8007320:	2c32      	cmp	r4, #50	; 0x32
 8007322:	d014      	beq.n	800734e <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 8007324:	2000      	movs	r0, #0
}
 8007326:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007328:	68c3      	ldr	r3, [r0, #12]
 800732a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800732e:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8007330:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8007332:	2001      	movs	r0, #1
 8007334:	f7f9 fefa 	bl	800112c <HAL_Delay>
      ms++;
 8007338:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800733a:	4628      	mov	r0, r5
 800733c:	f7ff ffd4 	bl	80072e8 <USB_GetMode>
 8007340:	2801      	cmp	r0, #1
 8007342:	d0ed      	beq.n	8007320 <USB_SetCurrentMode+0x30>
 8007344:	2c31      	cmp	r4, #49	; 0x31
 8007346:	d9f4      	bls.n	8007332 <USB_SetCurrentMode+0x42>
 8007348:	e7ea      	b.n	8007320 <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 800734a:	2001      	movs	r0, #1
 800734c:	e7eb      	b.n	8007326 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 800734e:	2001      	movs	r0, #1
 8007350:	e7e9      	b.n	8007326 <USB_SetCurrentMode+0x36>

08007352 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007352:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007356:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800735a:	f023 0307 	bic.w	r3, r3, #7
 800735e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007362:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8007366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800736a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800736e:	2000      	movs	r0, #0
 8007370:	4770      	bx	lr
	...

08007374 <USB_EP0_OutStart>:
{
 8007374:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007376:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007378:	4b15      	ldr	r3, [pc, #84]	; (80073d0 <USB_EP0_OutStart+0x5c>)
 800737a:	429c      	cmp	r4, r3
 800737c:	d903      	bls.n	8007386 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800737e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007382:	2b00      	cmp	r3, #0
 8007384:	db16      	blt.n	80073b4 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007386:	2400      	movs	r4, #0
 8007388:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800738c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8007390:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8007394:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007398:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800739c:	f044 0418 	orr.w	r4, r4, #24
 80073a0:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80073a4:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 80073a8:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 80073ac:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 80073b0:	2901      	cmp	r1, #1
 80073b2:	d003      	beq.n	80073bc <USB_EP0_OutStart+0x48>
}
 80073b4:	2000      	movs	r0, #0
 80073b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073ba:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80073bc:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80073c0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80073c4:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80073c8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80073cc:	e7f2      	b.n	80073b4 <USB_EP0_OutStart+0x40>
 80073ce:	bf00      	nop
 80073d0:	4f54300a 	.word	0x4f54300a

080073d4 <SensorArray_Init>:
		eSensor_MCP9808,
		eSensor_MCP9808
};

void SensorArray_Init()
{
 80073d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	I2C_HandleTypeDef *hI2CA = HandlesAssigner_GetHandle(eHandle_I2C1);
 80073d6:	2001      	movs	r0, #1
 80073d8:	f002 feb8 	bl	800a14c <HandlesAssigner_GetHandle>
 80073dc:	4607      	mov	r7, r0
	I2C_HandleTypeDef *hI2CB = HandlesAssigner_GetHandle(eHandle_I2C2);
 80073de:	2002      	movs	r0, #2
 80073e0:	f002 feb4 	bl	800a14c <HandlesAssigner_GetHandle>
 80073e4:	4606      	mov	r6, r0

	for(uint8_t u8Idx = 0; u8Idx < Sensor_I2CA_DeviceCount; u8Idx++)
 80073e6:	2400      	movs	r4, #0
 80073e8:	e02b      	b.n	8007442 <SensorArray_Init+0x6e>
		kaSensorArrayDataA[u8Idx].eSensorType = eSensorTypeListArrayA[u8Idx];

		if(eSensorTypeListArrayA[u8Idx] == eSensor_MCP9803)
		{

			kaSensorArrayDataA[u8Idx].u8Address = MCP9803_CalculateAddress(u8DeviceAddressListA[u8Idx]);
 80073ea:	4b3d      	ldr	r3, [pc, #244]	; (80074e0 <SensorArray_Init+0x10c>)
 80073ec:	5d18      	ldrb	r0, [r3, r4]
 80073ee:	f000 f8b7 	bl	8007560 <MCP9803_CalculateAddress>
 80073f2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80073f6:	4a3b      	ldr	r2, [pc, #236]	; (80074e4 <SensorArray_Init+0x110>)
 80073f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80073fc:	7058      	strb	r0, [r3, #1]
			kaSensorArrayDataA[u8Idx].fcnDecodeTemperature = &MCP9803_DecodeTemperature;
 80073fe:	4a3a      	ldr	r2, [pc, #232]	; (80074e8 <SensorArray_Init+0x114>)
 8007400:	60da      	str	r2, [r3, #12]
			kaSensorArrayDataA[u8Idx].fcnReadTemperature = &MCP9803_Read;
 8007402:	4a3a      	ldr	r2, [pc, #232]	; (80074ec <SensorArray_Init+0x118>)
 8007404:	611a      	str	r2, [r3, #16]
			kaSensorArrayDataA[u8Idx].fcnSendConfig = &MCP9803_ConfigureResolution;
 8007406:	4a3a      	ldr	r2, [pc, #232]	; (80074f0 <SensorArray_Init+0x11c>)
 8007408:	615a      	str	r2, [r3, #20]
 800740a:	e00d      	b.n	8007428 <SensorArray_Init+0x54>
		}
		else if (eSensorTypeListArrayA[u8Idx] == eSensor_MCP9808)
		{
			kaSensorArrayDataA[u8Idx].u8Address = MCP9808_CalculateAddress(u8DeviceAddressListA[u8Idx]);
 800740c:	4b34      	ldr	r3, [pc, #208]	; (80074e0 <SensorArray_Init+0x10c>)
 800740e:	5d18      	ldrb	r0, [r3, r4]
 8007410:	f000 f90a 	bl	8007628 <MCP9808_CalculateAddress>
 8007414:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8007418:	4a32      	ldr	r2, [pc, #200]	; (80074e4 <SensorArray_Init+0x110>)
 800741a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800741e:	7058      	strb	r0, [r3, #1]
			kaSensorArrayDataA[u8Idx].fcnDecodeTemperature = &MCP9808_DecodeTemperature;
 8007420:	4a34      	ldr	r2, [pc, #208]	; (80074f4 <SensorArray_Init+0x120>)
 8007422:	60da      	str	r2, [r3, #12]
			kaSensorArrayDataA[u8Idx].fcnReadTemperature = &MCP9808_Read;
 8007424:	4a34      	ldr	r2, [pc, #208]	; (80074f8 <SensorArray_Init+0x124>)
 8007426:	611a      	str	r2, [r3, #16]
			//todo: manage the fact that there is no config for MCP9808
		}
		kaSensorArrayDataA[u8Idx].hTranscieverHandle = hI2CA;
 8007428:	4a2e      	ldr	r2, [pc, #184]	; (80074e4 <SensorArray_Init+0x110>)
 800742a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800742e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007432:	605f      	str	r7, [r3, #4]
		kaSensorArrayDataA[u8Idx].bEnabled = true;
 8007434:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007438:	2301      	movs	r3, #1
 800743a:	f802 3035 	strb.w	r3, [r2, r5, lsl #3]
	for(uint8_t u8Idx = 0; u8Idx < Sensor_I2CA_DeviceCount; u8Idx++)
 800743e:	441c      	add	r4, r3
 8007440:	b2e4      	uxtb	r4, r4
 8007442:	2c07      	cmp	r4, #7
 8007444:	d80d      	bhi.n	8007462 <SensorArray_Init+0x8e>
		kaSensorArrayDataA[u8Idx].eSensorType = eSensorTypeListArrayA[u8Idx];
 8007446:	4625      	mov	r5, r4
 8007448:	4b2c      	ldr	r3, [pc, #176]	; (80074fc <SensorArray_Init+0x128>)
 800744a:	5d19      	ldrb	r1, [r3, r4]
 800744c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8007450:	4a24      	ldr	r2, [pc, #144]	; (80074e4 <SensorArray_Init+0x110>)
 8007452:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007456:	72d9      	strb	r1, [r3, #11]
		if(eSensorTypeListArrayA[u8Idx] == eSensor_MCP9803)
 8007458:	2901      	cmp	r1, #1
 800745a:	d0c6      	beq.n	80073ea <SensorArray_Init+0x16>
		else if (eSensorTypeListArrayA[u8Idx] == eSensor_MCP9808)
 800745c:	2900      	cmp	r1, #0
 800745e:	d1e3      	bne.n	8007428 <SensorArray_Init+0x54>
 8007460:	e7d4      	b.n	800740c <SensorArray_Init+0x38>
	}
	for(uint8_t u8Idx = 0; u8Idx < Sensor_I2CB_DeviceCount; u8Idx++)
 8007462:	2400      	movs	r4, #0
 8007464:	e02b      	b.n	80074be <SensorArray_Init+0xea>
	{
		kaSensorArrayDataB[u8Idx].eSensorType = eSensorTypeListArrayB[u8Idx];

		if(eSensorTypeListArrayB[u8Idx] == eSensor_MCP9803)
		{
			kaSensorArrayDataB[u8Idx].u8Address = MCP9803_CalculateAddress(u8DeviceAddressListB[u8Idx]);
 8007466:	4b26      	ldr	r3, [pc, #152]	; (8007500 <SensorArray_Init+0x12c>)
 8007468:	5d18      	ldrb	r0, [r3, r4]
 800746a:	f000 f879 	bl	8007560 <MCP9803_CalculateAddress>
 800746e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8007472:	4a24      	ldr	r2, [pc, #144]	; (8007504 <SensorArray_Init+0x130>)
 8007474:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007478:	7058      	strb	r0, [r3, #1]
			kaSensorArrayDataB[u8Idx].fcnDecodeTemperature = &MCP9803_DecodeTemperature;
 800747a:	4a1b      	ldr	r2, [pc, #108]	; (80074e8 <SensorArray_Init+0x114>)
 800747c:	60da      	str	r2, [r3, #12]
			kaSensorArrayDataB[u8Idx].fcnReadTemperature = &MCP9803_Read;
 800747e:	4a1b      	ldr	r2, [pc, #108]	; (80074ec <SensorArray_Init+0x118>)
 8007480:	611a      	str	r2, [r3, #16]
			kaSensorArrayDataB[u8Idx].fcnSendConfig = &MCP9803_ConfigureResolution;
 8007482:	4a1b      	ldr	r2, [pc, #108]	; (80074f0 <SensorArray_Init+0x11c>)
 8007484:	615a      	str	r2, [r3, #20]
 8007486:	e00d      	b.n	80074a4 <SensorArray_Init+0xd0>
		}
		else if (eSensorTypeListArrayB[u8Idx] == eSensor_MCP9808)
		{
			kaSensorArrayDataB[u8Idx].u8Address = MCP9808_CalculateAddress(u8DeviceAddressListB[u8Idx]);
 8007488:	4b1d      	ldr	r3, [pc, #116]	; (8007500 <SensorArray_Init+0x12c>)
 800748a:	5d18      	ldrb	r0, [r3, r4]
 800748c:	f000 f8cc 	bl	8007628 <MCP9808_CalculateAddress>
 8007490:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8007494:	4a1b      	ldr	r2, [pc, #108]	; (8007504 <SensorArray_Init+0x130>)
 8007496:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800749a:	7058      	strb	r0, [r3, #1]
			kaSensorArrayDataB[u8Idx].fcnDecodeTemperature = &MCP9808_DecodeTemperature;
 800749c:	4a15      	ldr	r2, [pc, #84]	; (80074f4 <SensorArray_Init+0x120>)
 800749e:	60da      	str	r2, [r3, #12]
			kaSensorArrayDataB[u8Idx].fcnReadTemperature = &MCP9808_Read;
 80074a0:	4a15      	ldr	r2, [pc, #84]	; (80074f8 <SensorArray_Init+0x124>)
 80074a2:	611a      	str	r2, [r3, #16]
			//todo: manage the fact that there is no config for MCP9808
		}
		kaSensorArrayDataB[u8Idx].hTranscieverHandle = hI2CB;
 80074a4:	4a17      	ldr	r2, [pc, #92]	; (8007504 <SensorArray_Init+0x130>)
 80074a6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80074aa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80074ae:	605e      	str	r6, [r3, #4]
		kaSensorArrayDataB[u8Idx].bEnabled = true;
 80074b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074b4:	2301      	movs	r3, #1
 80074b6:	f802 3035 	strb.w	r3, [r2, r5, lsl #3]
	for(uint8_t u8Idx = 0; u8Idx < Sensor_I2CB_DeviceCount; u8Idx++)
 80074ba:	441c      	add	r4, r3
 80074bc:	b2e4      	uxtb	r4, r4
 80074be:	2c07      	cmp	r4, #7
 80074c0:	d80d      	bhi.n	80074de <SensorArray_Init+0x10a>
		kaSensorArrayDataB[u8Idx].eSensorType = eSensorTypeListArrayB[u8Idx];
 80074c2:	4625      	mov	r5, r4
 80074c4:	4b10      	ldr	r3, [pc, #64]	; (8007508 <SensorArray_Init+0x134>)
 80074c6:	5d19      	ldrb	r1, [r3, r4]
 80074c8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80074cc:	4a0d      	ldr	r2, [pc, #52]	; (8007504 <SensorArray_Init+0x130>)
 80074ce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80074d2:	72d9      	strb	r1, [r3, #11]
		if(eSensorTypeListArrayB[u8Idx] == eSensor_MCP9803)
 80074d4:	2901      	cmp	r1, #1
 80074d6:	d0c6      	beq.n	8007466 <SensorArray_Init+0x92>
		else if (eSensorTypeListArrayB[u8Idx] == eSensor_MCP9808)
 80074d8:	2900      	cmp	r1, #0
 80074da:	d1e3      	bne.n	80074a4 <SensorArray_Init+0xd0>
 80074dc:	e7d4      	b.n	8007488 <SensorArray_Init+0xb4>
	}
}
 80074de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074e0:	0800e910 	.word	0x0800e910
 80074e4:	20001848 	.word	0x20001848
 80074e8:	08007569 	.word	0x08007569
 80074ec:	0800750d 	.word	0x0800750d
 80074f0:	0800752d 	.word	0x0800752d
 80074f4:	08007631 	.word	0x08007631
 80074f8:	08007609 	.word	0x08007609
 80074fc:	0800e900 	.word	0x0800e900
 8007500:	0800e918 	.word	0x0800e918
 8007504:	20001908 	.word	0x20001908
 8007508:	0800e908 	.word	0x0800e908

0800750c <MCP9803_Read>:
#define MCP9803_ResolutionConfigMask	( 0x60 )
/* Since initialization is made in blocking mode there is a necessity for a timeout */
#define MCP9803_InitizalizationTimeout	( 50 )

void MCP9803_Read(TemperatureSensor_t *kSensor)
{
 800750c:	b500      	push	{lr}
 800750e:	b083      	sub	sp, #12
	HAL_I2C_Mem_Read_IT(kSensor->hTranscieverHandle, kSensor->u8Address, MCP9803_AddressAmbientTemperature, 1, kSensor->u16RawMeasurement, 2);
 8007510:	f100 0308 	add.w	r3, r0, #8
 8007514:	2202      	movs	r2, #2
 8007516:	9201      	str	r2, [sp, #4]
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	2301      	movs	r3, #1
 800751c:	2200      	movs	r2, #0
 800751e:	7841      	ldrb	r1, [r0, #1]
 8007520:	6840      	ldr	r0, [r0, #4]
 8007522:	f7fb f92d 	bl	8002780 <HAL_I2C_Mem_Read_IT>
}
 8007526:	b003      	add	sp, #12
 8007528:	f85d fb04 	ldr.w	pc, [sp], #4

0800752c <MCP9803_ConfigureResolution>:

void MCP9803_ConfigureResolution(TemperatureSensor_t *kSensor, MCP9803_Resolution_t eBitResolution)
{
 800752c:	b500      	push	{lr}
 800752e:	b085      	sub	sp, #20
	static uint8_t u8Data;
	u8Data = ((uint8_t)eBitResolution) & MCP9803_ResolutionConfigMask;
 8007530:	f001 0160 	and.w	r1, r1, #96	; 0x60
 8007534:	4b09      	ldr	r3, [pc, #36]	; (800755c <MCP9803_ConfigureResolution+0x30>)
 8007536:	7019      	strb	r1, [r3, #0]

	HAL_StatusTypeDef Result = HAL_I2C_Mem_Write(kSensor->hTranscieverHandle, kSensor->u8Address, MCP9803_AddressConfiguration, 1, &u8Data, 1, MCP9803_InitizalizationTimeout);
 8007538:	2232      	movs	r2, #50	; 0x32
 800753a:	9202      	str	r2, [sp, #8]
 800753c:	2201      	movs	r2, #1
 800753e:	9201      	str	r2, [sp, #4]
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	4613      	mov	r3, r2
 8007544:	7841      	ldrb	r1, [r0, #1]
 8007546:	6840      	ldr	r0, [r0, #4]
 8007548:	f7fb f868 	bl	800261c <HAL_I2C_Mem_Write>

	if(Result == HAL_OK)
 800754c:	b910      	cbnz	r0, 8007554 <MCP9803_ConfigureResolution+0x28>
	{
		u8Data = 0; //todo: make a AssertError upon HAL_Status in all HAL calls
 800754e:	4b03      	ldr	r3, [pc, #12]	; (800755c <MCP9803_ConfigureResolution+0x30>)
 8007550:	2200      	movs	r2, #0
 8007552:	701a      	strb	r2, [r3, #0]
	}
}
 8007554:	b005      	add	sp, #20
 8007556:	f85d fb04 	ldr.w	pc, [sp], #4
 800755a:	bf00      	nop
 800755c:	2000036c 	.word	0x2000036c

08007560 <MCP9803_CalculateAddress>:

uint8_t MCP9803_CalculateAddress(uint8_t u8BitSettings)
{
	return ((MCP9803_AddresLowerNibble << 4) + u8BitSettings);
 8007560:	3870      	subs	r0, #112	; 0x70
}
 8007562:	b2c0      	uxtb	r0, r0
 8007564:	4770      	bx	lr
	...

08007568 <MCP9803_DecodeTemperature>:

float MCP9803_DecodeTemperature(TemperatureSensor_t *kSensor)
{
 8007568:	b5d0      	push	{r4, r6, r7, lr}
 800756a:	4603      	mov	r3, r0
	uint16_t u16FixedPointReadingHigh = 0;
	bool bNegativeSign = false;
	float fResult = 0.0;


	u16FixedPointReadingLow = ((uint16_t)(kSensor->u16RawMeasurement[0]));
 800756c:	7a02      	ldrb	r2, [r0, #8]
	bNegativeSign = ( u16FixedPointReadingLow & 0x80) && 0x80;
	u16FixedPointReadingLow = u16FixedPointReadingLow & (0x007F); // Mask to delete threshold data and sign
 800756e:	f002 007f 	and.w	r0, r2, #127	; 0x7f

	u16FixedPointReadingHigh = ((uint16_t)(kSensor->u16RawMeasurement[1])) >> 4;
 8007572:	7a5b      	ldrb	r3, [r3, #9]
 8007574:	091c      	lsrs	r4, r3, #4

	if (bNegativeSign)
 8007576:	f012 0f80 	tst.w	r2, #128	; 0x80
 800757a:	d120      	bne.n	80075be <MCP9803_DecodeTemperature+0x56>
	{
		fResult = (((float)u16FixedPointReadingLow) + (((float)u16FixedPointReadingHigh) * 0.0625)) * -1;
	}
	else
	{
		fResult = ((float)u16FixedPointReadingLow) + (((float)u16FixedPointReadingHigh) * 0.0625);
 800757c:	ee07 0a90 	vmov	s15, r0
 8007580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007584:	ee17 0a90 	vmov	r0, s15
 8007588:	f7f8 ffe6 	bl	8000558 <__aeabi_f2d>
 800758c:	4606      	mov	r6, r0
 800758e:	460f      	mov	r7, r1
 8007590:	ee07 4a90 	vmov	s15, r4
 8007594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007598:	ee17 0a90 	vmov	r0, s15
 800759c:	f7f8 ffdc 	bl	8000558 <__aeabi_f2d>
 80075a0:	2200      	movs	r2, #0
 80075a2:	4b18      	ldr	r3, [pc, #96]	; (8007604 <MCP9803_DecodeTemperature+0x9c>)
 80075a4:	f7f9 f830 	bl	8000608 <__aeabi_dmul>
 80075a8:	4602      	mov	r2, r0
 80075aa:	460b      	mov	r3, r1
 80075ac:	4630      	mov	r0, r6
 80075ae:	4639      	mov	r1, r7
 80075b0:	f7f8 fe74 	bl	800029c <__adddf3>
 80075b4:	f7f9 fb00 	bl	8000bb8 <__aeabi_d2f>
 80075b8:	ee00 0a10 	vmov	s0, r0
	}

	return fResult;
}
 80075bc:	bdd0      	pop	{r4, r6, r7, pc}
		fResult = (((float)u16FixedPointReadingLow) + (((float)u16FixedPointReadingHigh) * 0.0625)) * -1;
 80075be:	ee07 0a90 	vmov	s15, r0
 80075c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075c6:	ee17 0a90 	vmov	r0, s15
 80075ca:	f7f8 ffc5 	bl	8000558 <__aeabi_f2d>
 80075ce:	4606      	mov	r6, r0
 80075d0:	460f      	mov	r7, r1
 80075d2:	ee07 4a90 	vmov	s15, r4
 80075d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075da:	ee17 0a90 	vmov	r0, s15
 80075de:	f7f8 ffbb 	bl	8000558 <__aeabi_f2d>
 80075e2:	2200      	movs	r2, #0
 80075e4:	4b07      	ldr	r3, [pc, #28]	; (8007604 <MCP9803_DecodeTemperature+0x9c>)
 80075e6:	f7f9 f80f 	bl	8000608 <__aeabi_dmul>
 80075ea:	4602      	mov	r2, r0
 80075ec:	460b      	mov	r3, r1
 80075ee:	4630      	mov	r0, r6
 80075f0:	4639      	mov	r1, r7
 80075f2:	f7f8 fe53 	bl	800029c <__adddf3>
 80075f6:	f7f9 fadf 	bl	8000bb8 <__aeabi_d2f>
 80075fa:	ee07 0a90 	vmov	s15, r0
 80075fe:	eeb1 0a67 	vneg.f32	s0, s15
 8007602:	e7db      	b.n	80075bc <MCP9803_DecodeTemperature+0x54>
 8007604:	3fb00000 	.word	0x3fb00000

08007608 <MCP9808_Read>:
#include "TemperatureSensor_ArrayData.h"

#define MCP9808_AddresLowerNibble 0x3

void MCP9808_Read(TemperatureSensor_t *kSensor)
{
 8007608:	b500      	push	{lr}
 800760a:	b083      	sub	sp, #12
	HAL_I2C_Mem_Read_IT(kSensor->hTranscieverHandle, kSensor->u8Address, MCP9808_AddressAmbientTemperature, 1, kSensor->u16RawMeasurement, 2);
 800760c:	f100 0308 	add.w	r3, r0, #8
 8007610:	2202      	movs	r2, #2
 8007612:	9201      	str	r2, [sp, #4]
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	2301      	movs	r3, #1
 8007618:	2205      	movs	r2, #5
 800761a:	7841      	ldrb	r1, [r0, #1]
 800761c:	6840      	ldr	r0, [r0, #4]
 800761e:	f7fb f8af 	bl	8002780 <HAL_I2C_Mem_Read_IT>
}
 8007622:	b003      	add	sp, #12
 8007624:	f85d fb04 	ldr.w	pc, [sp], #4

08007628 <MCP9808_CalculateAddress>:

uint8_t MCP9808_CalculateAddress(uint8_t u8BitSettings)
{
	return ((MCP9808_AddresLowerNibble << 4) + u8BitSettings);
 8007628:	3030      	adds	r0, #48	; 0x30
}
 800762a:	b2c0      	uxtb	r0, r0
 800762c:	4770      	bx	lr
	...

08007630 <MCP9808_DecodeTemperature>:
	uint16_t u16FixedPointReadingHigh = 0;
	uint16_t u16FixedPointReading = 0;
	bool bNegativeSign = false;
	float fResult = 0.0;

	u16FixedPointReadingLow = ((uint16_t)(kSensor->u16RawMeasurement[0])) << 8;
 8007630:	7a02      	ldrb	r2, [r0, #8]
 8007632:	0212      	lsls	r2, r2, #8
	bNegativeSign = ( u16FixedPointReadingLow & 0x1000) && 0x1000;
	u16FixedPointReadingLow = u16FixedPointReadingLow & (0x0FFF); // Mask to delete threshold data and sign
 8007634:	f402 6370 	and.w	r3, r2, #3840	; 0xf00

	u16FixedPointReadingHigh = ((uint16_t)(kSensor->u16RawMeasurement[1]));
 8007638:	7a41      	ldrb	r1, [r0, #9]
	u16FixedPointReading = u16FixedPointReadingLow + u16FixedPointReadingHigh;
 800763a:	440b      	add	r3, r1

	if (bNegativeSign)
 800763c:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8007640:	d008      	beq.n	8007654 <MCP9808_DecodeTemperature+0x24>
	{
		fResult = ((float)(u16FixedPointReading) / 16) * -1;
 8007642:	ee07 3a90 	vmov	s15, r3
 8007646:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 800764a:	eddf 7a07 	vldr	s15, [pc, #28]	; 8007668 <MCP9808_DecodeTemperature+0x38>
 800764e:	ee27 0ac0 	vnmul.f32	s0, s15, s0
 8007652:	4770      	bx	lr
	}
	else
	{
		fResult = ((float)(u16FixedPointReading) / 16);
 8007654:	ee07 3a90 	vmov	s15, r3
 8007658:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 800765c:	eddf 7a02 	vldr	s15, [pc, #8]	; 8007668 <MCP9808_DecodeTemperature+0x38>
 8007660:	ee20 0a27 	vmul.f32	s0, s0, s15
	}

	return fResult;
}
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	3d800000 	.word	0x3d800000

0800766c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800766c:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800766e:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8007672:	b184      	cbz	r4, 8007696 <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007674:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8007678:	b17b      	cbz	r3, 800769a <USBD_CDC_EP0_RxReady+0x2e>
 800767a:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800767e:	28ff      	cmp	r0, #255	; 0xff
 8007680:	d00d      	beq.n	800769e <USBD_CDC_EP0_RxReady+0x32>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8007688:	4621      	mov	r1, r4
 800768a:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800768c:	23ff      	movs	r3, #255	; 0xff
 800768e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007692:	2000      	movs	r0, #0
}
 8007694:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8007696:	2003      	movs	r0, #3
 8007698:	e7fc      	b.n	8007694 <USBD_CDC_EP0_RxReady+0x28>
  return (uint8_t)USBD_OK;
 800769a:	2000      	movs	r0, #0
 800769c:	e7fa      	b.n	8007694 <USBD_CDC_EP0_RxReady+0x28>
 800769e:	2000      	movs	r0, #0
 80076a0:	e7f8      	b.n	8007694 <USBD_CDC_EP0_RxReady+0x28>
	...

080076a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80076a4:	2343      	movs	r3, #67	; 0x43
 80076a6:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 80076a8:	4800      	ldr	r0, [pc, #0]	; (80076ac <USBD_CDC_GetFSCfgDesc+0x8>)
 80076aa:	4770      	bx	lr
 80076ac:	20000040 	.word	0x20000040

080076b0 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80076b0:	2343      	movs	r3, #67	; 0x43
 80076b2:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 80076b4:	4800      	ldr	r0, [pc, #0]	; (80076b8 <USBD_CDC_GetHSCfgDesc+0x8>)
 80076b6:	4770      	bx	lr
 80076b8:	20000084 	.word	0x20000084

080076bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80076bc:	2343      	movs	r3, #67	; 0x43
 80076be:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 80076c0:	4800      	ldr	r0, [pc, #0]	; (80076c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80076c2:	4770      	bx	lr
 80076c4:	200000d4 	.word	0x200000d4

080076c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80076c8:	230a      	movs	r3, #10
 80076ca:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 80076cc:	4800      	ldr	r0, [pc, #0]	; (80076d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80076ce:	4770      	bx	lr
 80076d0:	200000c8 	.word	0x200000c8

080076d4 <USBD_CDC_DataOut>:
{
 80076d4:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80076d6:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 80076da:	b175      	cbz	r5, 80076fa <USBD_CDC_DataOut+0x26>
 80076dc:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80076de:	f004 f8d8 	bl	800b892 <USBD_LL_GetRxDataSize>
 80076e2:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80076e6:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 80076f0:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 80076f4:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80076f6:	2000      	movs	r0, #0
}
 80076f8:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 80076fa:	2003      	movs	r0, #3
 80076fc:	e7fc      	b.n	80076f8 <USBD_CDC_DataOut+0x24>

080076fe <USBD_CDC_DataIn>:
{
 80076fe:	b538      	push	{r3, r4, r5, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007700:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 8007704:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8007708:	b353      	cbz	r3, 8007760 <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800770a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800770e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007712:	6992      	ldr	r2, [r2, #24]
 8007714:	b14a      	cbz	r2, 800772a <USBD_CDC_DataIn+0x2c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007716:	ebc1 05c1 	rsb	r5, r1, r1, lsl #3
 800771a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800771e:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8007720:	fbb2 f4f5 	udiv	r4, r2, r5
 8007724:	fb05 2214 	mls	r2, r5, r4, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007728:	b172      	cbz	r2, 8007748 <USBD_CDC_DataIn+0x4a>
    hcdc->TxState = 0U;
 800772a:	2200      	movs	r2, #0
 800772c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007730:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 8007734:	6914      	ldr	r4, [r2, #16]
 8007736:	b1ac      	cbz	r4, 8007764 <USBD_CDC_DataIn+0x66>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007738:	460a      	mov	r2, r1
 800773a:	f503 7104 	add.w	r1, r3, #528	; 0x210
 800773e:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8007742:	47a0      	blx	r4
  return (uint8_t)USBD_OK;
 8007744:	2000      	movs	r0, #0
}
 8007746:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[epnum].total_length = 0U;
 8007748:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800774c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007750:	2400      	movs	r4, #0
 8007752:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007754:	4623      	mov	r3, r4
 8007756:	4622      	mov	r2, r4
 8007758:	f004 f8e4 	bl	800b924 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800775c:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800775e:	e7f2      	b.n	8007746 <USBD_CDC_DataIn+0x48>
    return (uint8_t)USBD_FAIL;
 8007760:	2003      	movs	r0, #3
 8007762:	e7f0      	b.n	8007746 <USBD_CDC_DataIn+0x48>
  return (uint8_t)USBD_OK;
 8007764:	2000      	movs	r0, #0
 8007766:	e7ee      	b.n	8007746 <USBD_CDC_DataIn+0x48>

08007768 <USBD_CDC_Setup>:
{
 8007768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800776a:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800776c:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 8007770:	2300      	movs	r3, #0
 8007772:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 8007776:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (hcdc == NULL)
 800777a:	2e00      	cmp	r6, #0
 800777c:	d06c      	beq.n	8007858 <USBD_CDC_Setup+0xf0>
 800777e:	4607      	mov	r7, r0
 8007780:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007782:	780b      	ldrb	r3, [r1, #0]
 8007784:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8007788:	d02a      	beq.n	80077e0 <USBD_CDC_Setup+0x78>
 800778a:	2d20      	cmp	r5, #32
 800778c:	d15e      	bne.n	800784c <USBD_CDC_Setup+0xe4>
      if (req->wLength != 0U)
 800778e:	88ca      	ldrh	r2, [r1, #6]
 8007790:	b1f2      	cbz	r2, 80077d0 <USBD_CDC_Setup+0x68>
        if ((req->bmRequest & 0x80U) != 0U)
 8007792:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007796:	d00f      	beq.n	80077b8 <USBD_CDC_Setup+0x50>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007798:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	4631      	mov	r1, r6
 80077a0:	7860      	ldrb	r0, [r4, #1]
 80077a2:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80077a4:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80077a6:	2a07      	cmp	r2, #7
 80077a8:	bf28      	it	cs
 80077aa:	2207      	movcs	r2, #7
 80077ac:	4631      	mov	r1, r6
 80077ae:	4638      	mov	r0, r7
 80077b0:	f000 fe10 	bl	80083d4 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80077b4:	2500      	movs	r5, #0
 80077b6:	e04c      	b.n	8007852 <USBD_CDC_Setup+0xea>
          hcdc->CmdOpCode = req->bRequest;
 80077b8:	784b      	ldrb	r3, [r1, #1]
 80077ba:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80077be:	798b      	ldrb	r3, [r1, #6]
 80077c0:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80077c4:	88ca      	ldrh	r2, [r1, #6]
 80077c6:	4631      	mov	r1, r6
 80077c8:	f000 fe19 	bl	80083fe <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 80077cc:	2500      	movs	r5, #0
 80077ce:	e040      	b.n	8007852 <USBD_CDC_Setup+0xea>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80077d0:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	2200      	movs	r2, #0
 80077d8:	7848      	ldrb	r0, [r1, #1]
 80077da:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 80077dc:	2500      	movs	r5, #0
 80077de:	e038      	b.n	8007852 <USBD_CDC_Setup+0xea>
      switch (req->bRequest)
 80077e0:	784e      	ldrb	r6, [r1, #1]
 80077e2:	2e0b      	cmp	r6, #11
 80077e4:	d82e      	bhi.n	8007844 <USBD_CDC_Setup+0xdc>
 80077e6:	e8df f006 	tbb	[pc, r6]
 80077ea:	3406      	.short	0x3406
 80077ec:	2d2d2d2d 	.word	0x2d2d2d2d
 80077f0:	2d2d2d2d 	.word	0x2d2d2d2d
 80077f4:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077f6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	2b03      	cmp	r3, #3
 80077fe:	d003      	beq.n	8007808 <USBD_CDC_Setup+0xa0>
            USBD_CtlError(pdev, req);
 8007800:	f000 fac1 	bl	8007d86 <USBD_CtlError>
            ret = USBD_FAIL;
 8007804:	2503      	movs	r5, #3
 8007806:	e024      	b.n	8007852 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007808:	2202      	movs	r2, #2
 800780a:	a901      	add	r1, sp, #4
 800780c:	f000 fde2 	bl	80083d4 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8007810:	4635      	mov	r5, r6
 8007812:	e01e      	b.n	8007852 <USBD_CDC_Setup+0xea>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007814:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007818:	b2db      	uxtb	r3, r3
 800781a:	2b03      	cmp	r3, #3
 800781c:	d003      	beq.n	8007826 <USBD_CDC_Setup+0xbe>
            USBD_CtlError(pdev, req);
 800781e:	f000 fab2 	bl	8007d86 <USBD_CtlError>
            ret = USBD_FAIL;
 8007822:	2503      	movs	r5, #3
 8007824:	e015      	b.n	8007852 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007826:	2201      	movs	r2, #1
 8007828:	f10d 0107 	add.w	r1, sp, #7
 800782c:	f000 fdd2 	bl	80083d4 <USBD_CtlSendData>
 8007830:	e00f      	b.n	8007852 <USBD_CDC_Setup+0xea>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007832:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007836:	b2db      	uxtb	r3, r3
 8007838:	2b03      	cmp	r3, #3
 800783a:	d00a      	beq.n	8007852 <USBD_CDC_Setup+0xea>
            USBD_CtlError(pdev, req);
 800783c:	f000 faa3 	bl	8007d86 <USBD_CtlError>
            ret = USBD_FAIL;
 8007840:	2503      	movs	r5, #3
 8007842:	e006      	b.n	8007852 <USBD_CDC_Setup+0xea>
          USBD_CtlError(pdev, req);
 8007844:	f000 fa9f 	bl	8007d86 <USBD_CtlError>
          ret = USBD_FAIL;
 8007848:	2503      	movs	r5, #3
          break;
 800784a:	e002      	b.n	8007852 <USBD_CDC_Setup+0xea>
      USBD_CtlError(pdev, req);
 800784c:	f000 fa9b 	bl	8007d86 <USBD_CtlError>
      ret = USBD_FAIL;
 8007850:	2503      	movs	r5, #3
}
 8007852:	4628      	mov	r0, r5
 8007854:	b003      	add	sp, #12
 8007856:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 8007858:	2503      	movs	r5, #3
 800785a:	e7fa      	b.n	8007852 <USBD_CDC_Setup+0xea>

0800785c <USBD_CDC_DeInit>:
{
 800785c:	b538      	push	{r3, r4, r5, lr}
 800785e:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007860:	2181      	movs	r1, #129	; 0x81
 8007862:	f004 f83f 	bl	800b8e4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007866:	2500      	movs	r5, #0
 8007868:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800786a:	2101      	movs	r1, #1
 800786c:	4620      	mov	r0, r4
 800786e:	f004 f839 	bl	800b8e4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007872:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007876:	2182      	movs	r1, #130	; 0x82
 8007878:	4620      	mov	r0, r4
 800787a:	f004 f833 	bl	800b8e4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800787e:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007882:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 8007886:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800788a:	b14b      	cbz	r3, 80078a0 <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800788c:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007894:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8007898:	f004 f806 	bl	800b8a8 <USBD_static_free>
    pdev->pClassData = NULL;
 800789c:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 80078a0:	2000      	movs	r0, #0
 80078a2:	bd38      	pop	{r3, r4, r5, pc}

080078a4 <USBD_CDC_Init>:
{
 80078a4:	b570      	push	{r4, r5, r6, lr}
 80078a6:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80078a8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80078ac:	f003 fff8 	bl	800b8a0 <USBD_static_malloc>
  if (hcdc == NULL)
 80078b0:	b3b8      	cbz	r0, 8007922 <USBD_CDC_Init+0x7e>
 80078b2:	4606      	mov	r6, r0
  pdev->pClassData = (void *)hcdc;
 80078b4:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078b8:	7c23      	ldrb	r3, [r4, #16]
 80078ba:	bbbb      	cbnz	r3, 800792c <USBD_CDC_Init+0x88>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80078bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078c0:	2202      	movs	r2, #2
 80078c2:	2181      	movs	r1, #129	; 0x81
 80078c4:	4620      	mov	r0, r4
 80078c6:	f004 f802 	bl	800b8ce <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80078ca:	2501      	movs	r5, #1
 80078cc:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80078ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078d2:	2202      	movs	r2, #2
 80078d4:	4629      	mov	r1, r5
 80078d6:	4620      	mov	r0, r4
 80078d8:	f003 fff9 	bl	800b8ce <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80078dc:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80078e0:	2310      	movs	r3, #16
 80078e2:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80078e6:	2308      	movs	r3, #8
 80078e8:	2203      	movs	r2, #3
 80078ea:	2182      	movs	r1, #130	; 0x82
 80078ec:	4620      	mov	r0, r4
 80078ee:	f003 ffee 	bl	800b8ce <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80078f2:	2301      	movs	r3, #1
 80078f4:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80078f8:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4798      	blx	r3
  hcdc->TxState = 0U;
 8007900:	2300      	movs	r3, #0
 8007902:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
  hcdc->RxState = 0U;
 8007906:	f8c6 3218 	str.w	r3, [r6, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800790a:	7c25      	ldrb	r5, [r4, #16]
 800790c:	bb15      	cbnz	r5, 8007954 <USBD_CDC_Init+0xb0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800790e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007912:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8007916:	2101      	movs	r1, #1
 8007918:	4620      	mov	r0, r4
 800791a:	f004 f80b 	bl	800b934 <USBD_LL_PrepareReceive>
}
 800791e:	4628      	mov	r0, r5
 8007920:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 8007922:	2300      	movs	r3, #0
 8007924:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007928:	2502      	movs	r5, #2
 800792a:	e7f8      	b.n	800791e <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800792c:	2340      	movs	r3, #64	; 0x40
 800792e:	2202      	movs	r2, #2
 8007930:	2181      	movs	r1, #129	; 0x81
 8007932:	4620      	mov	r0, r4
 8007934:	f003 ffcb 	bl	800b8ce <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007938:	2501      	movs	r5, #1
 800793a:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800793c:	2340      	movs	r3, #64	; 0x40
 800793e:	2202      	movs	r2, #2
 8007940:	4629      	mov	r1, r5
 8007942:	4620      	mov	r0, r4
 8007944:	f003 ffc3 	bl	800b8ce <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007948:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800794c:	2310      	movs	r3, #16
 800794e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8007952:	e7c8      	b.n	80078e6 <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007954:	2340      	movs	r3, #64	; 0x40
 8007956:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800795a:	2101      	movs	r1, #1
 800795c:	4620      	mov	r0, r4
 800795e:	f003 ffe9 	bl	800b934 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8007962:	2500      	movs	r5, #0
 8007964:	e7db      	b.n	800791e <USBD_CDC_Init+0x7a>

08007966 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8007966:	b119      	cbz	r1, 8007970 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 8007968:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800796c:	2000      	movs	r0, #0
 800796e:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8007970:	2003      	movs	r0, #3
}
 8007972:	4770      	bx	lr

08007974 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007974:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8007978:	b12b      	cbz	r3, 8007986 <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 800797a:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800797e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007982:	2000      	movs	r0, #0
 8007984:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8007986:	2003      	movs	r0, #3
}
 8007988:	4770      	bx	lr

0800798a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800798a:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800798e:	b11b      	cbz	r3, 8007998 <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 8007990:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007994:	2000      	movs	r0, #0
 8007996:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8007998:	2003      	movs	r0, #3
}
 800799a:	4770      	bx	lr

0800799c <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800799c:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 80079a0:	b1a2      	cbz	r2, 80079cc <USBD_CDC_TransmitPacket+0x30>
{
 80079a2:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 80079a4:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 80079a8:	b10b      	cbz	r3, 80079ae <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 80079aa:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 80079ac:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 80079ae:	2301      	movs	r3, #1
 80079b0:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80079b4:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 80079b8:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80079ba:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 80079be:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 80079c2:	2181      	movs	r1, #129	; 0x81
 80079c4:	f003 ffae 	bl	800b924 <USBD_LL_Transmit>
    ret = USBD_OK;
 80079c8:	2000      	movs	r0, #0
 80079ca:	e7ef      	b.n	80079ac <USBD_CDC_TransmitPacket+0x10>
    return (uint8_t)USBD_FAIL;
 80079cc:	2003      	movs	r0, #3
}
 80079ce:	4770      	bx	lr

080079d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80079d0:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80079d2:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 80079d6:	b192      	cbz	r2, 80079fe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079d8:	7c04      	ldrb	r4, [r0, #16]
 80079da:	b944      	cbnz	r4, 80079ee <USBD_CDC_ReceivePacket+0x1e>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80079dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079e0:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80079e4:	2101      	movs	r1, #1
 80079e6:	f003 ffa5 	bl	800b934 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 80079ea:	4620      	mov	r0, r4
 80079ec:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80079ee:	2340      	movs	r3, #64	; 0x40
 80079f0:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80079f4:	2101      	movs	r1, #1
 80079f6:	f003 ff9d 	bl	800b934 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80079fa:	2400      	movs	r4, #0
 80079fc:	e7f5      	b.n	80079ea <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 80079fe:	2403      	movs	r4, #3
 8007a00:	e7f3      	b.n	80079ea <USBD_CDC_ReceivePacket+0x1a>

08007a02 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007a02:	b198      	cbz	r0, 8007a2c <USBD_Init+0x2a>
{
 8007a04:	b508      	push	{r3, lr}
 8007a06:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007a08:	2000      	movs	r0, #0
 8007a0a:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007a0e:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007a12:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007a16:	b109      	cbz	r1, 8007a1c <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 8007a18:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a1c:	2101      	movs	r1, #1
 8007a1e:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 8007a22:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007a24:	4618      	mov	r0, r3
 8007a26:	f003 fee9 	bl	800b7fc <USBD_LL_Init>

  return ret;
}
 8007a2a:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8007a2c:	2003      	movs	r0, #3
}
 8007a2e:	4770      	bx	lr

08007a30 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007a30:	b510      	push	{r4, lr}
 8007a32:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8007a34:	2300      	movs	r3, #0
 8007a36:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8007a3a:	b161      	cbz	r1, 8007a56 <USBD_RegisterClass+0x26>
 8007a3c:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007a3e:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007a42:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8007a44:	b14b      	cbz	r3, 8007a5a <USBD_RegisterClass+0x2a>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007a46:	f10d 0006 	add.w	r0, sp, #6
 8007a4a:	4798      	blx	r3
 8007a4c:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007a50:	2000      	movs	r0, #0
}
 8007a52:	b002      	add	sp, #8
 8007a54:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8007a56:	2003      	movs	r0, #3
 8007a58:	e7fb      	b.n	8007a52 <USBD_RegisterClass+0x22>
  return USBD_OK;
 8007a5a:	2000      	movs	r0, #0
 8007a5c:	e7f9      	b.n	8007a52 <USBD_RegisterClass+0x22>

08007a5e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007a5e:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007a60:	f003 ff2d 	bl	800b8be <USBD_LL_Start>
}
 8007a64:	bd08      	pop	{r3, pc}

08007a66 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a66:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8007a68:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007a6c:	b113      	cbz	r3, 8007a74 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4798      	blx	r3
  }

  return ret;
}
 8007a72:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007a74:	2003      	movs	r0, #3
 8007a76:	e7fc      	b.n	8007a72 <USBD_SetClassConfig+0xc>

08007a78 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a78:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007a7a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007a7e:	b10b      	cbz	r3, 8007a84 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	4798      	blx	r3
  }

  return USBD_OK;
}
 8007a84:	2000      	movs	r0, #0
 8007a86:	bd08      	pop	{r3, pc}

08007a88 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a88:	b538      	push	{r3, r4, r5, lr}
 8007a8a:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007a8c:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8007a90:	4628      	mov	r0, r5
 8007a92:	f000 f964 	bl	8007d5e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007a96:	2301      	movs	r3, #1
 8007a98:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007a9c:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8007aa0:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007aa4:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 8007aa8:	f001 031f 	and.w	r3, r1, #31
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d00d      	beq.n	8007acc <USBD_LL_SetupStage+0x44>
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	d010      	beq.n	8007ad6 <USBD_LL_SetupStage+0x4e>
 8007ab4:	b12b      	cbz	r3, 8007ac2 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007ab6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8007aba:	4620      	mov	r0, r4
 8007abc:	f003 ff1a 	bl	800b8f4 <USBD_LL_StallEP>
      break;
 8007ac0:	e003      	b.n	8007aca <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007ac2:	4629      	mov	r1, r5
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	f000 fb08 	bl	80080da <USBD_StdDevReq>
  }

  return ret;
}
 8007aca:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007acc:	4629      	mov	r1, r5
 8007ace:	4620      	mov	r0, r4
 8007ad0:	f000 fb3b 	bl	800814a <USBD_StdItfReq>
      break;
 8007ad4:	e7f9      	b.n	8007aca <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007ad6:	4629      	mov	r1, r5
 8007ad8:	4620      	mov	r0, r4
 8007ada:	f000 fb6a 	bl	80081b2 <USBD_StdEPReq>
      break;
 8007ade:	e7f4      	b.n	8007aca <USBD_LL_SetupStage+0x42>

08007ae0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007ae0:	b538      	push	{r3, r4, r5, lr}
 8007ae2:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007ae4:	460d      	mov	r5, r1
 8007ae6:	bb41      	cbnz	r1, 8007b3a <USBD_LL_DataOutStage+0x5a>
 8007ae8:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007aea:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8007aee:	2a03      	cmp	r2, #3
 8007af0:	d001      	beq.n	8007af6 <USBD_LL_DataOutStage+0x16>
        }
      }
    }
  }

  return USBD_OK;
 8007af2:	4608      	mov	r0, r1
}
 8007af4:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8007af6:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 8007afa:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 8007afe:	4291      	cmp	r1, r2
 8007b00:	d809      	bhi.n	8007b16 <USBD_LL_DataOutStage+0x36>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b02:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	2b03      	cmp	r3, #3
 8007b0a:	d00f      	beq.n	8007b2c <USBD_LL_DataOutStage+0x4c>
        (void)USBD_CtlSendStatus(pdev);
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	f000 fc8d 	bl	800842c <USBD_CtlSendStatus>
  return USBD_OK;
 8007b12:	4628      	mov	r0, r5
 8007b14:	e7ee      	b.n	8007af4 <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8007b16:	1a89      	subs	r1, r1, r2
 8007b18:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007b1c:	428a      	cmp	r2, r1
 8007b1e:	bf28      	it	cs
 8007b20:	460a      	movcs	r2, r1
 8007b22:	4619      	mov	r1, r3
 8007b24:	f000 fc7a 	bl	800841c <USBD_CtlContinueRx>
  return USBD_OK;
 8007b28:	4628      	mov	r0, r5
 8007b2a:	e7e3      	b.n	8007af4 <USBD_LL_DataOutStage+0x14>
          if (pdev->pClass->EP0_RxReady != NULL)
 8007b2c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d0ea      	beq.n	8007b0c <USBD_LL_DataOutStage+0x2c>
            pdev->pClass->EP0_RxReady(pdev);
 8007b36:	4798      	blx	r3
 8007b38:	e7e8      	b.n	8007b0c <USBD_LL_DataOutStage+0x2c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b3a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	2b03      	cmp	r3, #3
 8007b42:	d001      	beq.n	8007b48 <USBD_LL_DataOutStage+0x68>
  return USBD_OK;
 8007b44:	2000      	movs	r0, #0
 8007b46:	e7d5      	b.n	8007af4 <USBD_LL_DataOutStage+0x14>
      if (pdev->pClass->DataOut != NULL)
 8007b48:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	b10b      	cbz	r3, 8007b54 <USBD_LL_DataOutStage+0x74>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007b50:	4798      	blx	r3
        if (ret != USBD_OK)
 8007b52:	e7cf      	b.n	8007af4 <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 8007b54:	2000      	movs	r0, #0
 8007b56:	e7cd      	b.n	8007af4 <USBD_LL_DataOutStage+0x14>

08007b58 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b58:	b538      	push	{r3, r4, r5, lr}
 8007b5a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007b5c:	460d      	mov	r5, r1
 8007b5e:	2900      	cmp	r1, #0
 8007b60:	d14a      	bne.n	8007bf8 <USBD_LL_DataInStage+0xa0>
 8007b62:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b64:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8007b68:	2a02      	cmp	r2, #2
 8007b6a:	d005      	beq.n	8007b78 <USBD_LL_DataInStage+0x20>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007b6c:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d03c      	beq.n	8007bee <USBD_LL_DataInStage+0x96>
        }
      }
    }
  }

  return USBD_OK;
 8007b74:	4628      	mov	r0, r5
}
 8007b76:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8007b78:	69c2      	ldr	r2, [r0, #28]
 8007b7a:	6a01      	ldr	r1, [r0, #32]
 8007b7c:	428a      	cmp	r2, r1
 8007b7e:	d80e      	bhi.n	8007b9e <USBD_LL_DataInStage+0x46>
        if ((pep->maxpacket == pep->rem_length) &&
 8007b80:	428a      	cmp	r2, r1
 8007b82:	d018      	beq.n	8007bb6 <USBD_LL_DataInStage+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b84:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	2b03      	cmp	r3, #3
 8007b8c:	d027      	beq.n	8007bde <USBD_LL_DataInStage+0x86>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b8e:	2180      	movs	r1, #128	; 0x80
 8007b90:	4620      	mov	r0, r4
 8007b92:	f003 feaf 	bl	800b8f4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007b96:	4620      	mov	r0, r4
 8007b98:	f000 fc53 	bl	8008442 <USBD_CtlReceiveStatus>
 8007b9c:	e7e6      	b.n	8007b6c <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8007b9e:	1a52      	subs	r2, r2, r1
 8007ba0:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	f000 fc23 	bl	80083ee <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ba8:	2300      	movs	r3, #0
 8007baa:	461a      	mov	r2, r3
 8007bac:	4619      	mov	r1, r3
 8007bae:	4620      	mov	r0, r4
 8007bb0:	f003 fec0 	bl	800b934 <USBD_LL_PrepareReceive>
 8007bb4:	e7da      	b.n	8007b6c <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 8007bb6:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8007bb8:	4299      	cmp	r1, r3
 8007bba:	d8e3      	bhi.n	8007b84 <USBD_LL_DataInStage+0x2c>
            (pep->total_length < pdev->ep0_data_len))
 8007bbc:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d2df      	bcs.n	8007b84 <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	4611      	mov	r1, r2
 8007bc8:	f000 fc11 	bl	80083ee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007bcc:	2100      	movs	r1, #0
 8007bce:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	460a      	mov	r2, r1
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	f003 feac 	bl	800b934 <USBD_LL_PrepareReceive>
 8007bdc:	e7c6      	b.n	8007b6c <USBD_LL_DataInStage+0x14>
            if (pdev->pClass->EP0_TxSent != NULL)
 8007bde:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d0d2      	beq.n	8007b8e <USBD_LL_DataInStage+0x36>
              pdev->pClass->EP0_TxSent(pdev);
 8007be8:	4620      	mov	r0, r4
 8007bea:	4798      	blx	r3
 8007bec:	e7cf      	b.n	8007b8e <USBD_LL_DataInStage+0x36>
      pdev->dev_test_mode = 0U;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	e7be      	b.n	8007b76 <USBD_LL_DataInStage+0x1e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bf8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d001      	beq.n	8007c06 <USBD_LL_DataInStage+0xae>
  return USBD_OK;
 8007c02:	2000      	movs	r0, #0
 8007c04:	e7b7      	b.n	8007b76 <USBD_LL_DataInStage+0x1e>
      if (pdev->pClass->DataIn != NULL)
 8007c06:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007c0a:	695b      	ldr	r3, [r3, #20]
 8007c0c:	b10b      	cbz	r3, 8007c12 <USBD_LL_DataInStage+0xba>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007c0e:	4798      	blx	r3
        if (ret != USBD_OK)
 8007c10:	e7b1      	b.n	8007b76 <USBD_LL_DataInStage+0x1e>
  return USBD_OK;
 8007c12:	2000      	movs	r0, #0
 8007c14:	e7af      	b.n	8007b76 <USBD_LL_DataInStage+0x1e>

08007c16 <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c16:	2301      	movs	r3, #1
 8007c18:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8007c22:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c24:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007c28:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007c2c:	b1f3      	cbz	r3, 8007c6c <USBD_LL_Reset+0x56>
{
 8007c2e:	b570      	push	{r4, r5, r6, lr}
 8007c30:	4604      	mov	r4, r0
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 8007c32:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8007c36:	b11a      	cbz	r2, 8007c40 <USBD_LL_Reset+0x2a>
  {
    if (pdev->pClass->DeInit != NULL)
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	b10b      	cbz	r3, 8007c40 <USBD_LL_Reset+0x2a>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c40:	2340      	movs	r3, #64	; 0x40
 8007c42:	2200      	movs	r2, #0
 8007c44:	4611      	mov	r1, r2
 8007c46:	4620      	mov	r0, r4
 8007c48:	f003 fe41 	bl	800b8ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007c4c:	2601      	movs	r6, #1
 8007c4e:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c52:	2540      	movs	r5, #64	; 0x40
 8007c54:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c58:	462b      	mov	r3, r5
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	2180      	movs	r1, #128	; 0x80
 8007c5e:	4620      	mov	r0, r4
 8007c60:	f003 fe35 	bl	800b8ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007c64:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c66:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 8007c68:	2000      	movs	r0, #0
}
 8007c6a:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8007c6c:	2003      	movs	r0, #3
}
 8007c6e:	4770      	bx	lr

08007c70 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8007c70:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8007c72:	2000      	movs	r0, #0
 8007c74:	4770      	bx	lr

08007c76 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8007c76:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007c80:	2304      	movs	r3, #4
 8007c82:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8007c86:	2000      	movs	r0, #0
 8007c88:	4770      	bx	lr

08007c8a <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007c8a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	2b04      	cmp	r3, #4
 8007c92:	d001      	beq.n	8007c98 <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8007c94:	2000      	movs	r0, #0
 8007c96:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8007c98:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 8007ca2:	e7f7      	b.n	8007c94 <USBD_LL_Resume+0xa>

08007ca4 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 8007ca4:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8007ca8:	b162      	cbz	r2, 8007cc4 <USBD_LL_SOF+0x20>
{
 8007caa:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cac:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b03      	cmp	r3, #3
 8007cb4:	d001      	beq.n	8007cba <USBD_LL_SOF+0x16>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 8007cb6:	2000      	movs	r0, #0
}
 8007cb8:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8007cba:	69d3      	ldr	r3, [r2, #28]
 8007cbc:	b123      	cbz	r3, 8007cc8 <USBD_LL_SOF+0x24>
      (void)pdev->pClass->SOF(pdev);
 8007cbe:	4798      	blx	r3
  return USBD_OK;
 8007cc0:	2000      	movs	r0, #0
 8007cc2:	e7f9      	b.n	8007cb8 <USBD_LL_SOF+0x14>
    return USBD_FAIL;
 8007cc4:	2003      	movs	r0, #3
}
 8007cc6:	4770      	bx	lr
  return USBD_OK;
 8007cc8:	2000      	movs	r0, #0
 8007cca:	e7f5      	b.n	8007cb8 <USBD_LL_SOF+0x14>

08007ccc <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 8007ccc:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8007cd0:	b162      	cbz	r2, 8007cec <USBD_LL_IsoINIncomplete+0x20>
{
 8007cd2:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cd4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	2b03      	cmp	r3, #3
 8007cdc:	d001      	beq.n	8007ce2 <USBD_LL_IsoINIncomplete+0x16>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8007cde:	2000      	movs	r0, #0
}
 8007ce0:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007ce2:	6a13      	ldr	r3, [r2, #32]
 8007ce4:	b123      	cbz	r3, 8007cf0 <USBD_LL_IsoINIncomplete+0x24>
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007ce6:	4798      	blx	r3
  return USBD_OK;
 8007ce8:	2000      	movs	r0, #0
 8007cea:	e7f9      	b.n	8007ce0 <USBD_LL_IsoINIncomplete+0x14>
    return USBD_FAIL;
 8007cec:	2003      	movs	r0, #3
}
 8007cee:	4770      	bx	lr
  return USBD_OK;
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	e7f5      	b.n	8007ce0 <USBD_LL_IsoINIncomplete+0x14>

08007cf4 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 8007cf4:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8007cf8:	b162      	cbz	r2, 8007d14 <USBD_LL_IsoOUTIncomplete+0x20>
{
 8007cfa:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cfc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	2b03      	cmp	r3, #3
 8007d04:	d001      	beq.n	8007d0a <USBD_LL_IsoOUTIncomplete+0x16>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8007d06:	2000      	movs	r0, #0
}
 8007d08:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007d0a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8007d0c:	b123      	cbz	r3, 8007d18 <USBD_LL_IsoOUTIncomplete+0x24>
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007d0e:	4798      	blx	r3
  return USBD_OK;
 8007d10:	2000      	movs	r0, #0
 8007d12:	e7f9      	b.n	8007d08 <USBD_LL_IsoOUTIncomplete+0x14>
    return USBD_FAIL;
 8007d14:	2003      	movs	r0, #3
}
 8007d16:	4770      	bx	lr
  return USBD_OK;
 8007d18:	2000      	movs	r0, #0
 8007d1a:	e7f5      	b.n	8007d08 <USBD_LL_IsoOUTIncomplete+0x14>

08007d1c <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8007d1c:	2000      	movs	r0, #0
 8007d1e:	4770      	bx	lr

08007d20 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007d20:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d22:	2301      	movs	r3, #1
 8007d24:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007d28:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007d2c:	b113      	cbz	r3, 8007d34 <USBD_LL_DevDisconnected+0x14>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	7901      	ldrb	r1, [r0, #4]
 8007d32:	4798      	blx	r3
  }

  return USBD_OK;
}
 8007d34:	2000      	movs	r0, #0
 8007d36:	bd08      	pop	{r3, pc}

08007d38 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d38:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 8007d3a:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8007d3c:	781a      	ldrb	r2, [r3, #0]
 8007d3e:	b11a      	cbz	r2, 8007d48 <USBD_GetLen+0x10>
  {
    len++;
 8007d40:	3001      	adds	r0, #1
 8007d42:	b2c0      	uxtb	r0, r0
    pbuff++;
 8007d44:	3301      	adds	r3, #1
 8007d46:	e7f9      	b.n	8007d3c <USBD_GetLen+0x4>
  }

  return len;
}
 8007d48:	4770      	bx	lr

08007d4a <USBD_SetFeature>:
{
 8007d4a:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d4c:	884b      	ldrh	r3, [r1, #2]
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d000      	beq.n	8007d54 <USBD_SetFeature+0xa>
}
 8007d52:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8007d54:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007d58:	f000 fb68 	bl	800842c <USBD_CtlSendStatus>
}
 8007d5c:	e7f9      	b.n	8007d52 <USBD_SetFeature+0x8>

08007d5e <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8007d5e:	780b      	ldrb	r3, [r1, #0]
 8007d60:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8007d62:	784b      	ldrb	r3, [r1, #1]
 8007d64:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 8007d66:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8007d68:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007d6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8007d6e:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 8007d70:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8007d72:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007d74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8007d78:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 8007d7a:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 8007d7c:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007d7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8007d82:	80c3      	strh	r3, [r0, #6]
}
 8007d84:	4770      	bx	lr

08007d86 <USBD_CtlError>:
{
 8007d86:	b510      	push	{r4, lr}
 8007d88:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d8a:	2180      	movs	r1, #128	; 0x80
 8007d8c:	f003 fdb2 	bl	800b8f4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007d90:	2100      	movs	r1, #0
 8007d92:	4620      	mov	r0, r4
 8007d94:	f003 fdae 	bl	800b8f4 <USBD_LL_StallEP>
}
 8007d98:	bd10      	pop	{r4, pc}

08007d9a <USBD_GetDescriptor>:
{
 8007d9a:	b530      	push	{r4, r5, lr}
 8007d9c:	b083      	sub	sp, #12
 8007d9e:	4604      	mov	r4, r0
 8007da0:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8007da2:	2300      	movs	r3, #0
 8007da4:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8007da8:	884a      	ldrh	r2, [r1, #2]
 8007daa:	0a13      	lsrs	r3, r2, #8
 8007dac:	3b01      	subs	r3, #1
 8007dae:	2b06      	cmp	r3, #6
 8007db0:	f200 80ab 	bhi.w	8007f0a <USBD_GetDescriptor+0x170>
 8007db4:	e8df f003 	tbb	[pc, r3]
 8007db8:	a9331f04 	.word	0xa9331f04
 8007dbc:	8da9      	.short	0x8da9
 8007dbe:	9a          	.byte	0x9a
 8007dbf:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007dc0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f10d 0106 	add.w	r1, sp, #6
 8007dca:	7c00      	ldrb	r0, [r0, #16]
 8007dcc:	4798      	blx	r3
  if (req->wLength != 0U)
 8007dce:	88ea      	ldrh	r2, [r5, #6]
 8007dd0:	2a00      	cmp	r2, #0
 8007dd2:	f000 80a3 	beq.w	8007f1c <USBD_GetDescriptor+0x182>
    if (len != 0U)
 8007dd6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	f000 8099 	beq.w	8007f12 <USBD_GetDescriptor+0x178>
      len = MIN(len, req->wLength);
 8007de0:	429a      	cmp	r2, r3
 8007de2:	bf28      	it	cs
 8007de4:	461a      	movcs	r2, r3
 8007de6:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007dea:	4601      	mov	r1, r0
 8007dec:	4620      	mov	r0, r4
 8007dee:	f000 faf1 	bl	80083d4 <USBD_CtlSendData>
}
 8007df2:	b003      	add	sp, #12
 8007df4:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007df6:	7c03      	ldrb	r3, [r0, #16]
 8007df8:	b943      	cbnz	r3, 8007e0c <USBD_GetDescriptor+0x72>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007dfa:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e00:	f10d 0006 	add.w	r0, sp, #6
 8007e04:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e06:	2302      	movs	r3, #2
 8007e08:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8007e0a:	e7e0      	b.n	8007dce <USBD_GetDescriptor+0x34>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007e0c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e12:	f10d 0006 	add.w	r0, sp, #6
 8007e16:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e18:	2302      	movs	r3, #2
 8007e1a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8007e1c:	e7d7      	b.n	8007dce <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 8007e1e:	b2d2      	uxtb	r2, r2
 8007e20:	2a05      	cmp	r2, #5
 8007e22:	d852      	bhi.n	8007eca <USBD_GetDescriptor+0x130>
 8007e24:	e8df f002 	tbb	[pc, r2]
 8007e28:	2a1d1003 	.word	0x2a1d1003
 8007e2c:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007e2e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	b123      	cbz	r3, 8007e40 <USBD_GetDescriptor+0xa6>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e36:	f10d 0106 	add.w	r1, sp, #6
 8007e3a:	7c00      	ldrb	r0, [r0, #16]
 8007e3c:	4798      	blx	r3
  if (err != 0U)
 8007e3e:	e7c6      	b.n	8007dce <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8007e40:	4629      	mov	r1, r5
 8007e42:	f7ff ffa0 	bl	8007d86 <USBD_CtlError>
  if (err != 0U)
 8007e46:	e7d4      	b.n	8007df2 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e48:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	b123      	cbz	r3, 8007e5a <USBD_GetDescriptor+0xc0>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e50:	f10d 0106 	add.w	r1, sp, #6
 8007e54:	7c00      	ldrb	r0, [r0, #16]
 8007e56:	4798      	blx	r3
  if (err != 0U)
 8007e58:	e7b9      	b.n	8007dce <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8007e5a:	4629      	mov	r1, r5
 8007e5c:	f7ff ff93 	bl	8007d86 <USBD_CtlError>
  if (err != 0U)
 8007e60:	e7c7      	b.n	8007df2 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e62:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	b123      	cbz	r3, 8007e74 <USBD_GetDescriptor+0xda>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e6a:	f10d 0106 	add.w	r1, sp, #6
 8007e6e:	7c00      	ldrb	r0, [r0, #16]
 8007e70:	4798      	blx	r3
  if (err != 0U)
 8007e72:	e7ac      	b.n	8007dce <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8007e74:	4629      	mov	r1, r5
 8007e76:	f7ff ff86 	bl	8007d86 <USBD_CtlError>
  if (err != 0U)
 8007e7a:	e7ba      	b.n	8007df2 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e7c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	b123      	cbz	r3, 8007e8e <USBD_GetDescriptor+0xf4>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e84:	f10d 0106 	add.w	r1, sp, #6
 8007e88:	7c00      	ldrb	r0, [r0, #16]
 8007e8a:	4798      	blx	r3
  if (err != 0U)
 8007e8c:	e79f      	b.n	8007dce <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8007e8e:	4629      	mov	r1, r5
 8007e90:	f7ff ff79 	bl	8007d86 <USBD_CtlError>
  if (err != 0U)
 8007e94:	e7ad      	b.n	8007df2 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e96:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007e9a:	695b      	ldr	r3, [r3, #20]
 8007e9c:	b123      	cbz	r3, 8007ea8 <USBD_GetDescriptor+0x10e>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e9e:	f10d 0106 	add.w	r1, sp, #6
 8007ea2:	7c00      	ldrb	r0, [r0, #16]
 8007ea4:	4798      	blx	r3
  if (err != 0U)
 8007ea6:	e792      	b.n	8007dce <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8007ea8:	4629      	mov	r1, r5
 8007eaa:	f7ff ff6c 	bl	8007d86 <USBD_CtlError>
  if (err != 0U)
 8007eae:	e7a0      	b.n	8007df2 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007eb0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007eb4:	699b      	ldr	r3, [r3, #24]
 8007eb6:	b123      	cbz	r3, 8007ec2 <USBD_GetDescriptor+0x128>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007eb8:	f10d 0106 	add.w	r1, sp, #6
 8007ebc:	7c00      	ldrb	r0, [r0, #16]
 8007ebe:	4798      	blx	r3
  if (err != 0U)
 8007ec0:	e785      	b.n	8007dce <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8007ec2:	4629      	mov	r1, r5
 8007ec4:	f7ff ff5f 	bl	8007d86 <USBD_CtlError>
  if (err != 0U)
 8007ec8:	e793      	b.n	8007df2 <USBD_GetDescriptor+0x58>
          USBD_CtlError(pdev, req);
 8007eca:	4629      	mov	r1, r5
 8007ecc:	f7ff ff5b 	bl	8007d86 <USBD_CtlError>
  if (err != 0U)
 8007ed0:	e78f      	b.n	8007df2 <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ed2:	7c03      	ldrb	r3, [r0, #16]
 8007ed4:	b933      	cbnz	r3, 8007ee4 <USBD_GetDescriptor+0x14a>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007ed6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007edc:	f10d 0006 	add.w	r0, sp, #6
 8007ee0:	4798      	blx	r3
  if (err != 0U)
 8007ee2:	e774      	b.n	8007dce <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8007ee4:	4629      	mov	r1, r5
 8007ee6:	f7ff ff4e 	bl	8007d86 <USBD_CtlError>
  if (err != 0U)
 8007eea:	e782      	b.n	8007df2 <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007eec:	7c03      	ldrb	r3, [r0, #16]
 8007eee:	b943      	cbnz	r3, 8007f02 <USBD_GetDescriptor+0x168>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007ef0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8007ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef6:	f10d 0006 	add.w	r0, sp, #6
 8007efa:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007efc:	2307      	movs	r3, #7
 8007efe:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8007f00:	e765      	b.n	8007dce <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8007f02:	4629      	mov	r1, r5
 8007f04:	f7ff ff3f 	bl	8007d86 <USBD_CtlError>
  if (err != 0U)
 8007f08:	e773      	b.n	8007df2 <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 8007f0a:	4629      	mov	r1, r5
 8007f0c:	f7ff ff3b 	bl	8007d86 <USBD_CtlError>
    return;
 8007f10:	e76f      	b.n	8007df2 <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 8007f12:	4629      	mov	r1, r5
 8007f14:	4620      	mov	r0, r4
 8007f16:	f7ff ff36 	bl	8007d86 <USBD_CtlError>
 8007f1a:	e76a      	b.n	8007df2 <USBD_GetDescriptor+0x58>
    (void)USBD_CtlSendStatus(pdev);
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	f000 fa85 	bl	800842c <USBD_CtlSendStatus>
 8007f22:	e766      	b.n	8007df2 <USBD_GetDescriptor+0x58>

08007f24 <USBD_SetAddress>:
{
 8007f24:	b538      	push	{r3, r4, r5, lr}
 8007f26:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f28:	888b      	ldrh	r3, [r1, #4]
 8007f2a:	b9fb      	cbnz	r3, 8007f6c <USBD_SetAddress+0x48>
 8007f2c:	88cb      	ldrh	r3, [r1, #6]
 8007f2e:	b9eb      	cbnz	r3, 8007f6c <USBD_SetAddress+0x48>
 8007f30:	884b      	ldrh	r3, [r1, #2]
 8007f32:	2b7f      	cmp	r3, #127	; 0x7f
 8007f34:	d81a      	bhi.n	8007f6c <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f36:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f3a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	2b03      	cmp	r3, #3
 8007f42:	d00c      	beq.n	8007f5e <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 8007f44:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f48:	4629      	mov	r1, r5
 8007f4a:	f003 fce3 	bl	800b914 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007f4e:	4620      	mov	r0, r4
 8007f50:	f000 fa6c 	bl	800842c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8007f54:	b135      	cbz	r5, 8007f64 <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f56:	2302      	movs	r3, #2
 8007f58:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8007f5c:	e009      	b.n	8007f72 <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 8007f5e:	f7ff ff12 	bl	8007d86 <USBD_CtlError>
 8007f62:	e006      	b.n	8007f72 <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f64:	2301      	movs	r3, #1
 8007f66:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8007f6a:	e002      	b.n	8007f72 <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	f7ff ff0a 	bl	8007d86 <USBD_CtlError>
}
 8007f72:	bd38      	pop	{r3, r4, r5, pc}

08007f74 <USBD_SetConfig>:
{
 8007f74:	b570      	push	{r4, r5, r6, lr}
 8007f76:	4604      	mov	r4, r0
 8007f78:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 8007f7a:	788d      	ldrb	r5, [r1, #2]
 8007f7c:	4b2e      	ldr	r3, [pc, #184]	; (8008038 <USBD_SetConfig+0xc4>)
 8007f7e:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f80:	2d01      	cmp	r5, #1
 8007f82:	d810      	bhi.n	8007fa6 <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 8007f84:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d00f      	beq.n	8007fae <USBD_SetConfig+0x3a>
 8007f8e:	2b03      	cmp	r3, #3
 8007f90:	d023      	beq.n	8007fda <USBD_SetConfig+0x66>
      USBD_CtlError(pdev, req);
 8007f92:	f7ff fef8 	bl	8007d86 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f96:	4b28      	ldr	r3, [pc, #160]	; (8008038 <USBD_SetConfig+0xc4>)
 8007f98:	7819      	ldrb	r1, [r3, #0]
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f7ff fd6c 	bl	8007a78 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007fa0:	2503      	movs	r5, #3
}
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 8007fa6:	f7ff feee 	bl	8007d86 <USBD_CtlError>
    return USBD_FAIL;
 8007faa:	2503      	movs	r5, #3
 8007fac:	e7f9      	b.n	8007fa2 <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 8007fae:	b18d      	cbz	r5, 8007fd4 <USBD_SetConfig+0x60>
        pdev->dev_config = cfgidx;
 8007fb0:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007fb2:	4629      	mov	r1, r5
 8007fb4:	f7ff fd57 	bl	8007a66 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8007fb8:	4605      	mov	r5, r0
 8007fba:	b120      	cbz	r0, 8007fc6 <USBD_SetConfig+0x52>
          USBD_CtlError(pdev, req);
 8007fbc:	4631      	mov	r1, r6
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	f7ff fee1 	bl	8007d86 <USBD_CtlError>
 8007fc4:	e7ed      	b.n	8007fa2 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8007fc6:	4620      	mov	r0, r4
 8007fc8:	f000 fa30 	bl	800842c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007fcc:	2303      	movs	r3, #3
 8007fce:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8007fd2:	e7e6      	b.n	8007fa2 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8007fd4:	f000 fa2a 	bl	800842c <USBD_CtlSendStatus>
 8007fd8:	e7e3      	b.n	8007fa2 <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 8007fda:	b1cd      	cbz	r5, 8008010 <USBD_SetConfig+0x9c>
      else if (cfgidx != pdev->dev_config)
 8007fdc:	6841      	ldr	r1, [r0, #4]
 8007fde:	428d      	cmp	r5, r1
 8007fe0:	d025      	beq.n	800802e <USBD_SetConfig+0xba>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007fe2:	b2c9      	uxtb	r1, r1
 8007fe4:	f7ff fd48 	bl	8007a78 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007fe8:	4b13      	ldr	r3, [pc, #76]	; (8008038 <USBD_SetConfig+0xc4>)
 8007fea:	7819      	ldrb	r1, [r3, #0]
 8007fec:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007fee:	4620      	mov	r0, r4
 8007ff0:	f7ff fd39 	bl	8007a66 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8007ff4:	4605      	mov	r5, r0
 8007ff6:	b1b0      	cbz	r0, 8008026 <USBD_SetConfig+0xb2>
          USBD_CtlError(pdev, req);
 8007ff8:	4631      	mov	r1, r6
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	f7ff fec3 	bl	8007d86 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008000:	7921      	ldrb	r1, [r4, #4]
 8008002:	4620      	mov	r0, r4
 8008004:	f7ff fd38 	bl	8007a78 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008008:	2302      	movs	r3, #2
 800800a:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800800e:	e7c8      	b.n	8007fa2 <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008010:	2302      	movs	r3, #2
 8008012:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008016:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008018:	4629      	mov	r1, r5
 800801a:	f7ff fd2d 	bl	8007a78 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800801e:	4620      	mov	r0, r4
 8008020:	f000 fa04 	bl	800842c <USBD_CtlSendStatus>
 8008024:	e7bd      	b.n	8007fa2 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8008026:	4620      	mov	r0, r4
 8008028:	f000 fa00 	bl	800842c <USBD_CtlSendStatus>
 800802c:	e7b9      	b.n	8007fa2 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800802e:	f000 f9fd 	bl	800842c <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8008032:	2500      	movs	r5, #0
 8008034:	e7b5      	b.n	8007fa2 <USBD_SetConfig+0x2e>
 8008036:	bf00      	nop
 8008038:	2000036d 	.word	0x2000036d

0800803c <USBD_GetConfig>:
{
 800803c:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800803e:	88cb      	ldrh	r3, [r1, #6]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d10b      	bne.n	800805c <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 8008044:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008048:	b2db      	uxtb	r3, r3
 800804a:	2b02      	cmp	r3, #2
 800804c:	d909      	bls.n	8008062 <USBD_GetConfig+0x26>
 800804e:	2b03      	cmp	r3, #3
 8008050:	d109      	bne.n	8008066 <USBD_GetConfig+0x2a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008052:	2201      	movs	r2, #1
 8008054:	1d01      	adds	r1, r0, #4
 8008056:	f000 f9bd 	bl	80083d4 <USBD_CtlSendData>
        break;
 800805a:	e001      	b.n	8008060 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 800805c:	f7ff fe93 	bl	8007d86 <USBD_CtlError>
}
 8008060:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 8008062:	b25b      	sxtb	r3, r3
 8008064:	b913      	cbnz	r3, 800806c <USBD_GetConfig+0x30>
        USBD_CtlError(pdev, req);
 8008066:	f7ff fe8e 	bl	8007d86 <USBD_CtlError>
}
 800806a:	e7f9      	b.n	8008060 <USBD_GetConfig+0x24>
        pdev->dev_default_config = 0U;
 800806c:	4601      	mov	r1, r0
 800806e:	2300      	movs	r3, #0
 8008070:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008074:	2201      	movs	r2, #1
 8008076:	f000 f9ad 	bl	80083d4 <USBD_CtlSendData>
        break;
 800807a:	e7f1      	b.n	8008060 <USBD_GetConfig+0x24>

0800807c <USBD_GetStatus>:
{
 800807c:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800807e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008082:	3b01      	subs	r3, #1
 8008084:	2b02      	cmp	r3, #2
 8008086:	d812      	bhi.n	80080ae <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 8008088:	88cb      	ldrh	r3, [r1, #6]
 800808a:	2b02      	cmp	r3, #2
 800808c:	d10c      	bne.n	80080a8 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800808e:	2301      	movs	r3, #1
 8008090:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 8008092:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8008096:	b10b      	cbz	r3, 800809c <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008098:	2303      	movs	r3, #3
 800809a:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800809c:	2202      	movs	r2, #2
 800809e:	f100 010c 	add.w	r1, r0, #12
 80080a2:	f000 f997 	bl	80083d4 <USBD_CtlSendData>
}
 80080a6:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 80080a8:	f7ff fe6d 	bl	8007d86 <USBD_CtlError>
        break;
 80080ac:	e7fb      	b.n	80080a6 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 80080ae:	f7ff fe6a 	bl	8007d86 <USBD_CtlError>
}
 80080b2:	e7f8      	b.n	80080a6 <USBD_GetStatus+0x2a>

080080b4 <USBD_ClrFeature>:
{
 80080b4:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80080b6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80080ba:	3b01      	subs	r3, #1
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d809      	bhi.n	80080d4 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080c0:	884b      	ldrh	r3, [r1, #2]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d000      	beq.n	80080c8 <USBD_ClrFeature+0x14>
}
 80080c6:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 80080c8:	2300      	movs	r3, #0
 80080ca:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80080ce:	f000 f9ad 	bl	800842c <USBD_CtlSendStatus>
 80080d2:	e7f8      	b.n	80080c6 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 80080d4:	f7ff fe57 	bl	8007d86 <USBD_CtlError>
}
 80080d8:	e7f5      	b.n	80080c6 <USBD_ClrFeature+0x12>

080080da <USBD_StdDevReq>:
{
 80080da:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080dc:	780c      	ldrb	r4, [r1, #0]
 80080de:	f004 0460 	and.w	r4, r4, #96	; 0x60
 80080e2:	2c20      	cmp	r4, #32
 80080e4:	d006      	beq.n	80080f4 <USBD_StdDevReq+0x1a>
 80080e6:	2c40      	cmp	r4, #64	; 0x40
 80080e8:	d004      	beq.n	80080f4 <USBD_StdDevReq+0x1a>
 80080ea:	b154      	cbz	r4, 8008102 <USBD_StdDevReq+0x28>
      USBD_CtlError(pdev, req);
 80080ec:	f7ff fe4b 	bl	8007d86 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80080f0:	2400      	movs	r4, #0
      break;
 80080f2:	e004      	b.n	80080fe <USBD_StdDevReq+0x24>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080f4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	4798      	blx	r3
 80080fc:	4604      	mov	r4, r0
}
 80080fe:	4620      	mov	r0, r4
 8008100:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 8008102:	784d      	ldrb	r5, [r1, #1]
 8008104:	2d09      	cmp	r5, #9
 8008106:	d81d      	bhi.n	8008144 <USBD_StdDevReq+0x6a>
 8008108:	e8df f005 	tbb	[pc, r5]
 800810c:	161c1912 	.word	0x161c1912
 8008110:	1c05081c 	.word	0x1c05081c
 8008114:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 8008116:	f7ff fe40 	bl	8007d9a <USBD_GetDescriptor>
          break;
 800811a:	e7f0      	b.n	80080fe <USBD_StdDevReq+0x24>
          USBD_SetAddress(pdev, req);
 800811c:	f7ff ff02 	bl	8007f24 <USBD_SetAddress>
          break;
 8008120:	e7ed      	b.n	80080fe <USBD_StdDevReq+0x24>
          ret = USBD_SetConfig(pdev, req);
 8008122:	f7ff ff27 	bl	8007f74 <USBD_SetConfig>
 8008126:	4604      	mov	r4, r0
          break;
 8008128:	e7e9      	b.n	80080fe <USBD_StdDevReq+0x24>
          USBD_GetConfig(pdev, req);
 800812a:	f7ff ff87 	bl	800803c <USBD_GetConfig>
          break;
 800812e:	e7e6      	b.n	80080fe <USBD_StdDevReq+0x24>
          USBD_GetStatus(pdev, req);
 8008130:	f7ff ffa4 	bl	800807c <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8008134:	462c      	mov	r4, r5
          break;
 8008136:	e7e2      	b.n	80080fe <USBD_StdDevReq+0x24>
          USBD_SetFeature(pdev, req);
 8008138:	f7ff fe07 	bl	8007d4a <USBD_SetFeature>
          break;
 800813c:	e7df      	b.n	80080fe <USBD_StdDevReq+0x24>
          USBD_ClrFeature(pdev, req);
 800813e:	f7ff ffb9 	bl	80080b4 <USBD_ClrFeature>
          break;
 8008142:	e7dc      	b.n	80080fe <USBD_StdDevReq+0x24>
          USBD_CtlError(pdev, req);
 8008144:	f7ff fe1f 	bl	8007d86 <USBD_CtlError>
          break;
 8008148:	e7d9      	b.n	80080fe <USBD_StdDevReq+0x24>

0800814a <USBD_StdItfReq>:
{
 800814a:	b570      	push	{r4, r5, r6, lr}
 800814c:	4605      	mov	r5, r0
 800814e:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008150:	780b      	ldrb	r3, [r1, #0]
 8008152:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008156:	2b20      	cmp	r3, #32
 8008158:	d007      	beq.n	800816a <USBD_StdItfReq+0x20>
 800815a:	2b40      	cmp	r3, #64	; 0x40
 800815c:	d005      	beq.n	800816a <USBD_StdItfReq+0x20>
 800815e:	b123      	cbz	r3, 800816a <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 8008160:	f7ff fe11 	bl	8007d86 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008164:	2600      	movs	r6, #0
}
 8008166:	4630      	mov	r0, r6
 8008168:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 800816a:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 800816e:	3b01      	subs	r3, #1
 8008170:	2b02      	cmp	r3, #2
 8008172:	d818      	bhi.n	80081a6 <USBD_StdItfReq+0x5c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008174:	7923      	ldrb	r3, [r4, #4]
 8008176:	2b01      	cmp	r3, #1
 8008178:	d80f      	bhi.n	800819a <USBD_StdItfReq+0x50>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800817a:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	4621      	mov	r1, r4
 8008182:	4628      	mov	r0, r5
 8008184:	4798      	blx	r3
 8008186:	4606      	mov	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008188:	88e3      	ldrh	r3, [r4, #6]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1eb      	bne.n	8008166 <USBD_StdItfReq+0x1c>
 800818e:	2800      	cmp	r0, #0
 8008190:	d1e9      	bne.n	8008166 <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 8008192:	4628      	mov	r0, r5
 8008194:	f000 f94a 	bl	800842c <USBD_CtlSendStatus>
 8008198:	e7e5      	b.n	8008166 <USBD_StdItfReq+0x1c>
            USBD_CtlError(pdev, req);
 800819a:	4621      	mov	r1, r4
 800819c:	4628      	mov	r0, r5
 800819e:	f7ff fdf2 	bl	8007d86 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80081a2:	2600      	movs	r6, #0
 80081a4:	e7df      	b.n	8008166 <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 80081a6:	4621      	mov	r1, r4
 80081a8:	4628      	mov	r0, r5
 80081aa:	f7ff fdec 	bl	8007d86 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80081ae:	2600      	movs	r6, #0
          break;
 80081b0:	e7d9      	b.n	8008166 <USBD_StdItfReq+0x1c>

080081b2 <USBD_StdEPReq>:
{
 80081b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081b4:	4606      	mov	r6, r0
 80081b6:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 80081b8:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081ba:	780c      	ldrb	r4, [r1, #0]
 80081bc:	f004 0460 	and.w	r4, r4, #96	; 0x60
 80081c0:	2c20      	cmp	r4, #32
 80081c2:	d008      	beq.n	80081d6 <USBD_StdEPReq+0x24>
 80081c4:	b2d9      	uxtb	r1, r3
 80081c6:	2c40      	cmp	r4, #64	; 0x40
 80081c8:	d005      	beq.n	80081d6 <USBD_StdEPReq+0x24>
 80081ca:	b16c      	cbz	r4, 80081e8 <USBD_StdEPReq+0x36>
      USBD_CtlError(pdev, req);
 80081cc:	4629      	mov	r1, r5
 80081ce:	f7ff fdda 	bl	8007d86 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80081d2:	2400      	movs	r4, #0
      break;
 80081d4:	e006      	b.n	80081e4 <USBD_StdEPReq+0x32>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80081d6:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	4629      	mov	r1, r5
 80081de:	4630      	mov	r0, r6
 80081e0:	4798      	blx	r3
 80081e2:	4604      	mov	r4, r0
}
 80081e4:	4620      	mov	r0, r4
 80081e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      switch (req->bRequest)
 80081e8:	786f      	ldrb	r7, [r5, #1]
 80081ea:	2f01      	cmp	r7, #1
 80081ec:	d02f      	beq.n	800824e <USBD_StdEPReq+0x9c>
 80081ee:	2f03      	cmp	r7, #3
 80081f0:	d005      	beq.n	80081fe <USBD_StdEPReq+0x4c>
 80081f2:	2f00      	cmp	r7, #0
 80081f4:	d059      	beq.n	80082aa <USBD_StdEPReq+0xf8>
          USBD_CtlError(pdev, req);
 80081f6:	4629      	mov	r1, r5
 80081f8:	f7ff fdc5 	bl	8007d86 <USBD_CtlError>
          break;
 80081fc:	e7f2      	b.n	80081e4 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 80081fe:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008202:	b2db      	uxtb	r3, r3
 8008204:	2b02      	cmp	r3, #2
 8008206:	d005      	beq.n	8008214 <USBD_StdEPReq+0x62>
 8008208:	2b03      	cmp	r3, #3
 800820a:	d012      	beq.n	8008232 <USBD_StdEPReq+0x80>
              USBD_CtlError(pdev, req);
 800820c:	4629      	mov	r1, r5
 800820e:	f7ff fdba 	bl	8007d86 <USBD_CtlError>
              break;
 8008212:	e7e7      	b.n	80081e4 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008214:	b109      	cbz	r1, 800821a <USBD_StdEPReq+0x68>
 8008216:	2980      	cmp	r1, #128	; 0x80
 8008218:	d104      	bne.n	8008224 <USBD_StdEPReq+0x72>
                USBD_CtlError(pdev, req);
 800821a:	4629      	mov	r1, r5
 800821c:	4630      	mov	r0, r6
 800821e:	f7ff fdb2 	bl	8007d86 <USBD_CtlError>
 8008222:	e7df      	b.n	80081e4 <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008224:	f003 fb66 	bl	800b8f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008228:	2180      	movs	r1, #128	; 0x80
 800822a:	4630      	mov	r0, r6
 800822c:	f003 fb62 	bl	800b8f4 <USBD_LL_StallEP>
 8008230:	e7d8      	b.n	80081e4 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008232:	886b      	ldrh	r3, [r5, #2]
 8008234:	b923      	cbnz	r3, 8008240 <USBD_StdEPReq+0x8e>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008236:	b119      	cbz	r1, 8008240 <USBD_StdEPReq+0x8e>
 8008238:	2980      	cmp	r1, #128	; 0x80
 800823a:	d001      	beq.n	8008240 <USBD_StdEPReq+0x8e>
 800823c:	88eb      	ldrh	r3, [r5, #6]
 800823e:	b11b      	cbz	r3, 8008248 <USBD_StdEPReq+0x96>
              (void)USBD_CtlSendStatus(pdev);
 8008240:	4630      	mov	r0, r6
 8008242:	f000 f8f3 	bl	800842c <USBD_CtlSendStatus>
              break;
 8008246:	e7cd      	b.n	80081e4 <USBD_StdEPReq+0x32>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008248:	f003 fb54 	bl	800b8f4 <USBD_LL_StallEP>
 800824c:	e7f8      	b.n	8008240 <USBD_StdEPReq+0x8e>
          switch (pdev->dev_state)
 800824e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008252:	b2db      	uxtb	r3, r3
 8008254:	2b02      	cmp	r3, #2
 8008256:	d005      	beq.n	8008264 <USBD_StdEPReq+0xb2>
 8008258:	2b03      	cmp	r3, #3
 800825a:	d012      	beq.n	8008282 <USBD_StdEPReq+0xd0>
              USBD_CtlError(pdev, req);
 800825c:	4629      	mov	r1, r5
 800825e:	f7ff fd92 	bl	8007d86 <USBD_CtlError>
              break;
 8008262:	e7bf      	b.n	80081e4 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008264:	b109      	cbz	r1, 800826a <USBD_StdEPReq+0xb8>
 8008266:	2980      	cmp	r1, #128	; 0x80
 8008268:	d104      	bne.n	8008274 <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 800826a:	4629      	mov	r1, r5
 800826c:	4630      	mov	r0, r6
 800826e:	f7ff fd8a 	bl	8007d86 <USBD_CtlError>
 8008272:	e7b7      	b.n	80081e4 <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008274:	f003 fb3e 	bl	800b8f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008278:	2180      	movs	r1, #128	; 0x80
 800827a:	4630      	mov	r0, r6
 800827c:	f003 fb3a 	bl	800b8f4 <USBD_LL_StallEP>
 8008280:	e7b0      	b.n	80081e4 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008282:	886b      	ldrh	r3, [r5, #2]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d1ad      	bne.n	80081e4 <USBD_StdEPReq+0x32>
                if ((ep_addr & 0x7FU) != 0x00U)
 8008288:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 800828c:	d10a      	bne.n	80082a4 <USBD_StdEPReq+0xf2>
                (void)USBD_CtlSendStatus(pdev);
 800828e:	4630      	mov	r0, r6
 8008290:	f000 f8cc 	bl	800842c <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008294:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	4629      	mov	r1, r5
 800829c:	4630      	mov	r0, r6
 800829e:	4798      	blx	r3
 80082a0:	4604      	mov	r4, r0
 80082a2:	e79f      	b.n	80081e4 <USBD_StdEPReq+0x32>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80082a4:	f003 fb2e 	bl	800b904 <USBD_LL_ClearStallEP>
 80082a8:	e7f1      	b.n	800828e <USBD_StdEPReq+0xdc>
          switch (pdev->dev_state)
 80082aa:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80082ae:	b2d2      	uxtb	r2, r2
 80082b0:	2a02      	cmp	r2, #2
 80082b2:	d006      	beq.n	80082c2 <USBD_StdEPReq+0x110>
 80082b4:	2a03      	cmp	r2, #3
 80082b6:	d029      	beq.n	800830c <USBD_StdEPReq+0x15a>
              USBD_CtlError(pdev, req);
 80082b8:	4629      	mov	r1, r5
 80082ba:	f7ff fd64 	bl	8007d86 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80082be:	463c      	mov	r4, r7
              break;
 80082c0:	e790      	b.n	80081e4 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082c2:	b109      	cbz	r1, 80082c8 <USBD_StdEPReq+0x116>
 80082c4:	2980      	cmp	r1, #128	; 0x80
 80082c6:	d113      	bne.n	80082f0 <USBD_StdEPReq+0x13e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80082cc:	d115      	bne.n	80082fa <USBD_StdEPReq+0x148>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80082ce:	f001 017f 	and.w	r1, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082d2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80082d6:	0089      	lsls	r1, r1, #2
 80082d8:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 80082dc:	4431      	add	r1, r6
 80082de:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 80082e0:	2300      	movs	r3, #0
 80082e2:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80082e4:	2202      	movs	r2, #2
 80082e6:	4630      	mov	r0, r6
 80082e8:	f000 f874 	bl	80083d4 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80082ec:	463c      	mov	r4, r7
              break;
 80082ee:	e779      	b.n	80081e4 <USBD_StdEPReq+0x32>
                USBD_CtlError(pdev, req);
 80082f0:	4629      	mov	r1, r5
 80082f2:	f7ff fd48 	bl	8007d86 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80082f6:	463c      	mov	r4, r7
                break;
 80082f8:	e774      	b.n	80081e4 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082fa:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80082fe:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8008302:	0089      	lsls	r1, r1, #2
 8008304:	3110      	adds	r1, #16
 8008306:	4431      	add	r1, r6
 8008308:	3104      	adds	r1, #4
 800830a:	e7e9      	b.n	80082e0 <USBD_StdEPReq+0x12e>
              if ((ep_addr & 0x80U) == 0x80U)
 800830c:	b25b      	sxtb	r3, r3
 800830e:	2b00      	cmp	r3, #0
 8008310:	db1f      	blt.n	8008352 <USBD_StdEPReq+0x1a0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008312:	f001 020f 	and.w	r2, r1, #15
 8008316:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800831a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800831e:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 8008322:	b322      	cbz	r2, 800836e <USBD_StdEPReq+0x1bc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008324:	2b00      	cmp	r3, #0
 8008326:	db27      	blt.n	8008378 <USBD_StdEPReq+0x1c6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008328:	f001 037f 	and.w	r3, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800832c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008330:	009c      	lsls	r4, r3, #2
 8008332:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 8008336:	4434      	add	r4, r6
 8008338:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800833a:	b109      	cbz	r1, 8008340 <USBD_StdEPReq+0x18e>
 800833c:	2980      	cmp	r1, #128	; 0x80
 800833e:	d124      	bne.n	800838a <USBD_StdEPReq+0x1d8>
                pep->status = 0x0000U;
 8008340:	2300      	movs	r3, #0
 8008342:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008344:	2202      	movs	r2, #2
 8008346:	4621      	mov	r1, r4
 8008348:	4630      	mov	r0, r6
 800834a:	f000 f843 	bl	80083d4 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800834e:	463c      	mov	r4, r7
              break;
 8008350:	e748      	b.n	80081e4 <USBD_StdEPReq+0x32>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008352:	f001 020f 	and.w	r2, r1, #15
 8008356:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800835a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800835e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8008360:	2a00      	cmp	r2, #0
 8008362:	d1df      	bne.n	8008324 <USBD_StdEPReq+0x172>
                  USBD_CtlError(pdev, req);
 8008364:	4629      	mov	r1, r5
 8008366:	f7ff fd0e 	bl	8007d86 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800836a:	463c      	mov	r4, r7
                  break;
 800836c:	e73a      	b.n	80081e4 <USBD_StdEPReq+0x32>
                  USBD_CtlError(pdev, req);
 800836e:	4629      	mov	r1, r5
 8008370:	f7ff fd09 	bl	8007d86 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8008374:	463c      	mov	r4, r7
                  break;
 8008376:	e735      	b.n	80081e4 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008378:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800837c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008380:	009c      	lsls	r4, r3, #2
 8008382:	3410      	adds	r4, #16
 8008384:	4434      	add	r4, r6
 8008386:	3404      	adds	r4, #4
 8008388:	e7d7      	b.n	800833a <USBD_StdEPReq+0x188>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800838a:	4630      	mov	r0, r6
 800838c:	f003 fa6a 	bl	800b864 <USBD_LL_IsStallEP>
 8008390:	b110      	cbz	r0, 8008398 <USBD_StdEPReq+0x1e6>
                pep->status = 0x0001U;
 8008392:	2301      	movs	r3, #1
 8008394:	6023      	str	r3, [r4, #0]
 8008396:	e7d5      	b.n	8008344 <USBD_StdEPReq+0x192>
                pep->status = 0x0000U;
 8008398:	2300      	movs	r3, #0
 800839a:	6023      	str	r3, [r4, #0]
 800839c:	e7d2      	b.n	8008344 <USBD_StdEPReq+0x192>

0800839e <USBD_GetString>:
  if (desc == NULL)
 800839e:	b1c0      	cbz	r0, 80083d2 <USBD_GetString+0x34>
{
 80083a0:	b570      	push	{r4, r5, r6, lr}
 80083a2:	460d      	mov	r5, r1
 80083a4:	4616      	mov	r6, r2
 80083a6:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80083a8:	f7ff fcc6 	bl	8007d38 <USBD_GetLen>
 80083ac:	3001      	adds	r0, #1
 80083ae:	0040      	lsls	r0, r0, #1
 80083b0:	8030      	strh	r0, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 80083b2:	7028      	strb	r0, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80083b4:	2303      	movs	r3, #3
 80083b6:	706b      	strb	r3, [r5, #1]
  idx++;
 80083b8:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 80083ba:	7822      	ldrb	r2, [r4, #0]
 80083bc:	b142      	cbz	r2, 80083d0 <USBD_GetString+0x32>
    unicode[idx] = *pdesc;
 80083be:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 80083c0:	3401      	adds	r4, #1
    idx++;
 80083c2:	1c5a      	adds	r2, r3, #1
 80083c4:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 80083c6:	2100      	movs	r1, #0
 80083c8:	54a9      	strb	r1, [r5, r2]
    idx++;
 80083ca:	3302      	adds	r3, #2
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	e7f4      	b.n	80083ba <USBD_GetString+0x1c>
}
 80083d0:	bd70      	pop	{r4, r5, r6, pc}
 80083d2:	4770      	bx	lr

080083d4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80083d4:	b510      	push	{r4, lr}
 80083d6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80083d8:	2202      	movs	r2, #2
 80083da:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80083de:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80083e0:	61c3      	str	r3, [r0, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083e2:	460a      	mov	r2, r1
 80083e4:	2100      	movs	r1, #0
 80083e6:	f003 fa9d 	bl	800b924 <USBD_LL_Transmit>

  return USBD_OK;
}
 80083ea:	2000      	movs	r0, #0
 80083ec:	bd10      	pop	{r4, pc}

080083ee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80083ee:	b508      	push	{r3, lr}
 80083f0:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083f2:	460a      	mov	r2, r1
 80083f4:	2100      	movs	r1, #0
 80083f6:	f003 fa95 	bl	800b924 <USBD_LL_Transmit>

  return USBD_OK;
}
 80083fa:	2000      	movs	r0, #0
 80083fc:	bd08      	pop	{r3, pc}

080083fe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80083fe:	b510      	push	{r4, lr}
 8008400:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008402:	2203      	movs	r2, #3
 8008404:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008408:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800840c:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008410:	460a      	mov	r2, r1
 8008412:	2100      	movs	r1, #0
 8008414:	f003 fa8e 	bl	800b934 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008418:	2000      	movs	r0, #0
 800841a:	bd10      	pop	{r4, pc}

0800841c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800841c:	b508      	push	{r3, lr}
 800841e:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008420:	460a      	mov	r2, r1
 8008422:	2100      	movs	r1, #0
 8008424:	f003 fa86 	bl	800b934 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008428:	2000      	movs	r0, #0
 800842a:	bd08      	pop	{r3, pc}

0800842c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800842c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800842e:	2204      	movs	r2, #4
 8008430:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008434:	2300      	movs	r3, #0
 8008436:	461a      	mov	r2, r3
 8008438:	4619      	mov	r1, r3
 800843a:	f003 fa73 	bl	800b924 <USBD_LL_Transmit>

  return USBD_OK;
}
 800843e:	2000      	movs	r0, #0
 8008440:	bd08      	pop	{r3, pc}

08008442 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008442:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008444:	2205      	movs	r2, #5
 8008446:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800844a:	2300      	movs	r3, #0
 800844c:	461a      	mov	r2, r3
 800844e:	4619      	mov	r1, r3
 8008450:	f003 fa70 	bl	800b934 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008454:	2000      	movs	r0, #0
 8008456:	bd08      	pop	{r3, pc}

08008458 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008458:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800845a:	4b04      	ldr	r3, [pc, #16]	; (800846c <disk_status+0x14>)
 800845c:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8008460:	6852      	ldr	r2, [r2, #4]
 8008462:	6852      	ldr	r2, [r2, #4]
 8008464:	4403      	add	r3, r0
 8008466:	7a18      	ldrb	r0, [r3, #8]
 8008468:	4790      	blx	r2
  return stat;
}
 800846a:	bd08      	pop	{r3, pc}
 800846c:	20000398 	.word	0x20000398

08008470 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008470:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8008472:	4b08      	ldr	r3, [pc, #32]	; (8008494 <disk_initialize+0x24>)
 8008474:	5c1b      	ldrb	r3, [r3, r0]
 8008476:	b953      	cbnz	r3, 800848e <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
 8008478:	4b06      	ldr	r3, [pc, #24]	; (8008494 <disk_initialize+0x24>)
 800847a:	2201      	movs	r2, #1
 800847c:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800847e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8008482:	6852      	ldr	r2, [r2, #4]
 8008484:	6812      	ldr	r2, [r2, #0]
 8008486:	4418      	add	r0, r3
 8008488:	7a00      	ldrb	r0, [r0, #8]
 800848a:	4790      	blx	r2
  }
  return stat;
}
 800848c:	bd08      	pop	{r3, pc}
  DSTATUS stat = RES_OK;
 800848e:	2000      	movs	r0, #0
 8008490:	e7fc      	b.n	800848c <disk_initialize+0x1c>
 8008492:	bf00      	nop
 8008494:	20000398 	.word	0x20000398

08008498 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008498:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800849a:	4c04      	ldr	r4, [pc, #16]	; (80084ac <disk_read+0x14>)
 800849c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80084a0:	686d      	ldr	r5, [r5, #4]
 80084a2:	68ad      	ldr	r5, [r5, #8]
 80084a4:	4404      	add	r4, r0
 80084a6:	7a20      	ldrb	r0, [r4, #8]
 80084a8:	47a8      	blx	r5
  return res;
}
 80084aa:	bd38      	pop	{r3, r4, r5, pc}
 80084ac:	20000398 	.word	0x20000398

080084b0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80084b0:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80084b2:	4c04      	ldr	r4, [pc, #16]	; (80084c4 <disk_write+0x14>)
 80084b4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80084b8:	686d      	ldr	r5, [r5, #4]
 80084ba:	68ed      	ldr	r5, [r5, #12]
 80084bc:	4404      	add	r4, r0
 80084be:	7a20      	ldrb	r0, [r4, #8]
 80084c0:	47a8      	blx	r5
  return res;
}
 80084c2:	bd38      	pop	{r3, r4, r5, pc}
 80084c4:	20000398 	.word	0x20000398

080084c8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80084c8:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80084ca:	4b04      	ldr	r3, [pc, #16]	; (80084dc <disk_ioctl+0x14>)
 80084cc:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 80084d0:	6864      	ldr	r4, [r4, #4]
 80084d2:	6924      	ldr	r4, [r4, #16]
 80084d4:	4403      	add	r3, r0
 80084d6:	7a18      	ldrb	r0, [r3, #8]
 80084d8:	47a0      	blx	r4
  return res;
}
 80084da:	bd10      	pop	{r4, pc}
 80084dc:	20000398 	.word	0x20000398

080084e0 <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 80084e0:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 80084e2:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 80084e4:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80084e8:	4770      	bx	lr

080084ea <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 80084ea:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 80084ec:	7883      	ldrb	r3, [r0, #2]
 80084ee:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 80084f2:	7843      	ldrb	r3, [r0, #1]
 80084f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 80084f8:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 80084fa:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80084fe:	4770      	bx	lr

08008500 <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8008500:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 8008502:	0a09      	lsrs	r1, r1, #8
 8008504:	7041      	strb	r1, [r0, #1]
}
 8008506:	4770      	bx	lr

08008508 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8008508:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800850a:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800850e:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8008510:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8008514:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8008516:	0e09      	lsrs	r1, r1, #24
 8008518:	70c1      	strb	r1, [r0, #3]
}
 800851a:	4770      	bx	lr

0800851c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800851c:	b410      	push	{r4}
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 800851e:	4614      	mov	r4, r2
 8008520:	b12a      	cbz	r2, 800852e <mem_cpy+0x12>
		do {
			*d++ = *s++;
 8008522:	780a      	ldrb	r2, [r1, #0]
 8008524:	3101      	adds	r1, #1
 8008526:	7002      	strb	r2, [r0, #0]
 8008528:	3001      	adds	r0, #1
		} while (--cnt);
 800852a:	3c01      	subs	r4, #1
 800852c:	d1f9      	bne.n	8008522 <mem_cpy+0x6>
	}
}
 800852e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008532:	4770      	bx	lr

08008534 <mem_set>:
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8008534:	7001      	strb	r1, [r0, #0]
 8008536:	3001      	adds	r0, #1
	} while (--cnt);
 8008538:	3a01      	subs	r2, #1
 800853a:	d1fb      	bne.n	8008534 <mem_set>
}
 800853c:	4770      	bx	lr

0800853e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800853e:	b410      	push	{r4}
 8008540:	4604      	mov	r4, r0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 8008542:	7820      	ldrb	r0, [r4, #0]
 8008544:	3401      	adds	r4, #1
 8008546:	780b      	ldrb	r3, [r1, #0]
 8008548:	3101      	adds	r1, #1
 800854a:	1ac0      	subs	r0, r0, r3
	} while (--cnt && r == 0);
 800854c:	3a01      	subs	r2, #1
 800854e:	d001      	beq.n	8008554 <mem_cmp+0x16>
 8008550:	2800      	cmp	r0, #0
 8008552:	d0f6      	beq.n	8008542 <mem_cmp+0x4>

	return r;
}
 8008554:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008558:	4770      	bx	lr

0800855a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800855a:	4603      	mov	r3, r0
	while (*str && *str != chr) str++;
 800855c:	7818      	ldrb	r0, [r3, #0]
 800855e:	b118      	cbz	r0, 8008568 <chk_chr+0xe>
 8008560:	4288      	cmp	r0, r1
 8008562:	d001      	beq.n	8008568 <chk_chr+0xe>
 8008564:	3301      	adds	r3, #1
 8008566:	e7f9      	b.n	800855c <chk_chr+0x2>
	return *str;
}
 8008568:	4770      	bx	lr
	...

0800856c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800856c:	b430      	push	{r4, r5}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800856e:	2500      	movs	r5, #0
 8008570:	462b      	mov	r3, r5
 8008572:	e001      	b.n	8008578 <chk_lock+0xc>
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
				Files[i].clu == dp->obj.sclust &&
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 8008574:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008576:	3301      	adds	r3, #1
 8008578:	2b01      	cmp	r3, #1
 800857a:	d815      	bhi.n	80085a8 <chk_lock+0x3c>
		if (Files[i].fs) {	/* Existing entry */
 800857c:	011a      	lsls	r2, r3, #4
 800857e:	4c17      	ldr	r4, [pc, #92]	; (80085dc <chk_lock+0x70>)
 8008580:	58a2      	ldr	r2, [r4, r2]
 8008582:	2a00      	cmp	r2, #0
 8008584:	d0f6      	beq.n	8008574 <chk_lock+0x8>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008586:	6804      	ldr	r4, [r0, #0]
 8008588:	42a2      	cmp	r2, r4
 800858a:	d1f4      	bne.n	8008576 <chk_lock+0xa>
				Files[i].clu == dp->obj.sclust &&
 800858c:	4a13      	ldr	r2, [pc, #76]	; (80085dc <chk_lock+0x70>)
 800858e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8008592:	6854      	ldr	r4, [r2, #4]
 8008594:	6882      	ldr	r2, [r0, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008596:	4294      	cmp	r4, r2
 8008598:	d1ed      	bne.n	8008576 <chk_lock+0xa>
				Files[i].ofs == dp->dptr) break;
 800859a:	4a10      	ldr	r2, [pc, #64]	; (80085dc <chk_lock+0x70>)
 800859c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80085a0:	6894      	ldr	r4, [r2, #8]
 80085a2:	6942      	ldr	r2, [r0, #20]
				Files[i].clu == dp->obj.sclust &&
 80085a4:	4294      	cmp	r4, r2
 80085a6:	d1e6      	bne.n	8008576 <chk_lock+0xa>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d00a      	beq.n	80085c2 <chk_lock+0x56>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80085ac:	b9a1      	cbnz	r1, 80085d8 <chk_lock+0x6c>
 80085ae:	4a0b      	ldr	r2, [pc, #44]	; (80085dc <chk_lock+0x70>)
 80085b0:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80085b4:	899b      	ldrh	r3, [r3, #12]
 80085b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085ba:	d00b      	beq.n	80085d4 <chk_lock+0x68>
 80085bc:	2000      	movs	r0, #0
}
 80085be:	bc30      	pop	{r4, r5}
 80085c0:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80085c2:	b92d      	cbnz	r5, 80085d0 <chk_lock+0x64>
 80085c4:	2902      	cmp	r1, #2
 80085c6:	d001      	beq.n	80085cc <chk_lock+0x60>
 80085c8:	2012      	movs	r0, #18
 80085ca:	e7f8      	b.n	80085be <chk_lock+0x52>
 80085cc:	2000      	movs	r0, #0
 80085ce:	e7f6      	b.n	80085be <chk_lock+0x52>
 80085d0:	2000      	movs	r0, #0
 80085d2:	e7f4      	b.n	80085be <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80085d4:	2010      	movs	r0, #16
 80085d6:	e7f2      	b.n	80085be <chk_lock+0x52>
 80085d8:	2010      	movs	r0, #16
 80085da:	e7f0      	b.n	80085be <chk_lock+0x52>
 80085dc:	20000374 	.word	0x20000374

080085e0 <enq_lock>:
static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80085e0:	2000      	movs	r0, #0
 80085e2:	e000      	b.n	80085e6 <enq_lock+0x6>
 80085e4:	3001      	adds	r0, #1
 80085e6:	2801      	cmp	r0, #1
 80085e8:	d804      	bhi.n	80085f4 <enq_lock+0x14>
 80085ea:	0103      	lsls	r3, r0, #4
 80085ec:	4a03      	ldr	r2, [pc, #12]	; (80085fc <enq_lock+0x1c>)
 80085ee:	58d3      	ldr	r3, [r2, r3]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1f7      	bne.n	80085e4 <enq_lock+0x4>
	return (i == _FS_LOCK) ? 0 : 1;
}
 80085f4:	3802      	subs	r0, #2
 80085f6:	bf18      	it	ne
 80085f8:	2001      	movne	r0, #1
 80085fa:	4770      	bx	lr
 80085fc:	20000374 	.word	0x20000374

08008600 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008600:	b470      	push	{r4, r5, r6}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008602:	2300      	movs	r3, #0
 8008604:	e000      	b.n	8008608 <inc_lock+0x8>
 8008606:	3301      	adds	r3, #1
 8008608:	2b01      	cmp	r3, #1
 800860a:	d813      	bhi.n	8008634 <inc_lock+0x34>
		if (Files[i].fs == dp->obj.fs &&
 800860c:	011a      	lsls	r2, r3, #4
 800860e:	4c24      	ldr	r4, [pc, #144]	; (80086a0 <inc_lock+0xa0>)
 8008610:	58a4      	ldr	r4, [r4, r2]
 8008612:	6802      	ldr	r2, [r0, #0]
 8008614:	4294      	cmp	r4, r2
 8008616:	d1f6      	bne.n	8008606 <inc_lock+0x6>
			Files[i].clu == dp->obj.sclust &&
 8008618:	4a21      	ldr	r2, [pc, #132]	; (80086a0 <inc_lock+0xa0>)
 800861a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800861e:	6854      	ldr	r4, [r2, #4]
 8008620:	6882      	ldr	r2, [r0, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008622:	4294      	cmp	r4, r2
 8008624:	d1ef      	bne.n	8008606 <inc_lock+0x6>
			Files[i].ofs == dp->dptr) break;
 8008626:	4a1e      	ldr	r2, [pc, #120]	; (80086a0 <inc_lock+0xa0>)
 8008628:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800862c:	6894      	ldr	r4, [r2, #8]
 800862e:	6942      	ldr	r2, [r0, #20]
			Files[i].clu == dp->obj.sclust &&
 8008630:	4294      	cmp	r4, r2
 8008632:	d1e8      	bne.n	8008606 <inc_lock+0x6>
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008634:	2b02      	cmp	r3, #2
 8008636:	d013      	beq.n	8008660 <inc_lock+0x60>
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008638:	b121      	cbz	r1, 8008644 <inc_lock+0x44>
 800863a:	4a19      	ldr	r2, [pc, #100]	; (80086a0 <inc_lock+0xa0>)
 800863c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8008640:	8992      	ldrh	r2, [r2, #12]
 8008642:	bb52      	cbnz	r2, 800869a <inc_lock+0x9a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008644:	bb21      	cbnz	r1, 8008690 <inc_lock+0x90>
 8008646:	4a16      	ldr	r2, [pc, #88]	; (80086a0 <inc_lock+0xa0>)
 8008648:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800864c:	8991      	ldrh	r1, [r2, #12]
 800864e:	3101      	adds	r1, #1
 8008650:	b289      	uxth	r1, r1
 8008652:	4a13      	ldr	r2, [pc, #76]	; (80086a0 <inc_lock+0xa0>)
 8008654:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8008658:	8191      	strh	r1, [r2, #12]

	return i + 1;
 800865a:	1c58      	adds	r0, r3, #1
}
 800865c:	bc70      	pop	{r4, r5, r6}
 800865e:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008660:	2300      	movs	r3, #0
 8008662:	2b01      	cmp	r3, #1
 8008664:	d805      	bhi.n	8008672 <inc_lock+0x72>
 8008666:	011a      	lsls	r2, r3, #4
 8008668:	4c0d      	ldr	r4, [pc, #52]	; (80086a0 <inc_lock+0xa0>)
 800866a:	58a2      	ldr	r2, [r4, r2]
 800866c:	b10a      	cbz	r2, 8008672 <inc_lock+0x72>
 800866e:	3301      	adds	r3, #1
 8008670:	e7f7      	b.n	8008662 <inc_lock+0x62>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008672:	2b02      	cmp	r3, #2
 8008674:	d00f      	beq.n	8008696 <inc_lock+0x96>
		Files[i].fs = dp->obj.fs;
 8008676:	6806      	ldr	r6, [r0, #0]
 8008678:	4d09      	ldr	r5, [pc, #36]	; (80086a0 <inc_lock+0xa0>)
 800867a:	011c      	lsls	r4, r3, #4
 800867c:	eb05 1203 	add.w	r2, r5, r3, lsl #4
 8008680:	512e      	str	r6, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 8008682:	6884      	ldr	r4, [r0, #8]
 8008684:	6054      	str	r4, [r2, #4]
		Files[i].ofs = dp->dptr;
 8008686:	6940      	ldr	r0, [r0, #20]
 8008688:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 800868a:	2000      	movs	r0, #0
 800868c:	8190      	strh	r0, [r2, #12]
 800868e:	e7d3      	b.n	8008638 <inc_lock+0x38>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008690:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008694:	e7dd      	b.n	8008652 <inc_lock+0x52>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008696:	2000      	movs	r0, #0
 8008698:	e7e0      	b.n	800865c <inc_lock+0x5c>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800869a:	2000      	movs	r0, #0
 800869c:	e7de      	b.n	800865c <inc_lock+0x5c>
 800869e:	bf00      	nop
 80086a0:	20000374 	.word	0x20000374

080086a4 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80086a4:	3801      	subs	r0, #1
 80086a6:	2801      	cmp	r0, #1
 80086a8:	d815      	bhi.n	80086d6 <dec_lock+0x32>
		n = Files[i].ctr;
 80086aa:	4b0d      	ldr	r3, [pc, #52]	; (80086e0 <dec_lock+0x3c>)
 80086ac:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80086b0:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80086b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086b6:	d003      	beq.n	80086c0 <dec_lock+0x1c>
		if (n > 0) n--;				/* Decrement read mode open count */
 80086b8:	b11b      	cbz	r3, 80086c2 <dec_lock+0x1e>
 80086ba:	3b01      	subs	r3, #1
 80086bc:	b29b      	uxth	r3, r3
 80086be:	e000      	b.n	80086c2 <dec_lock+0x1e>
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80086c0:	2300      	movs	r3, #0
		Files[i].ctr = n;
 80086c2:	4a07      	ldr	r2, [pc, #28]	; (80086e0 <dec_lock+0x3c>)
 80086c4:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 80086c8:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80086ca:	b933      	cbnz	r3, 80086da <dec_lock+0x36>
 80086cc:	0103      	lsls	r3, r0, #4
 80086ce:	2000      	movs	r0, #0
 80086d0:	4a03      	ldr	r2, [pc, #12]	; (80086e0 <dec_lock+0x3c>)
 80086d2:	50d0      	str	r0, [r2, r3]
 80086d4:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80086d6:	2002      	movs	r0, #2
 80086d8:	4770      	bx	lr
		res = FR_OK;
 80086da:	2000      	movs	r0, #0
	}
	return res;
}
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	20000374 	.word	0x20000374

080086e4 <clear_lock>:
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80086e4:	2300      	movs	r3, #0
 80086e6:	e003      	b.n	80086f0 <clear_lock+0xc>
		if (Files[i].fs == fs) Files[i].fs = 0;
	}
}
 80086e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086ec:	4770      	bx	lr
	for (i = 0; i < _FS_LOCK; i++) {
 80086ee:	3301      	adds	r3, #1
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d811      	bhi.n	8008718 <clear_lock+0x34>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80086f4:	011a      	lsls	r2, r3, #4
 80086f6:	4909      	ldr	r1, [pc, #36]	; (800871c <clear_lock+0x38>)
 80086f8:	588a      	ldr	r2, [r1, r2]
 80086fa:	4282      	cmp	r2, r0
 80086fc:	d1f7      	bne.n	80086ee <clear_lock+0xa>
{
 80086fe:	b410      	push	{r4}
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008700:	011a      	lsls	r2, r3, #4
 8008702:	2400      	movs	r4, #0
 8008704:	508c      	str	r4, [r1, r2]
	for (i = 0; i < _FS_LOCK; i++) {
 8008706:	3301      	adds	r3, #1
 8008708:	2b01      	cmp	r3, #1
 800870a:	d8ed      	bhi.n	80086e8 <clear_lock+0x4>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800870c:	011a      	lsls	r2, r3, #4
 800870e:	4903      	ldr	r1, [pc, #12]	; (800871c <clear_lock+0x38>)
 8008710:	588a      	ldr	r2, [r1, r2]
 8008712:	4282      	cmp	r2, r0
 8008714:	d1f7      	bne.n	8008706 <clear_lock+0x22>
 8008716:	e7f3      	b.n	8008700 <clear_lock+0x1c>
 8008718:	4770      	bx	lr
 800871a:	bf00      	nop
 800871c:	20000374 	.word	0x20000374

08008720 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8008720:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008722:	6943      	ldr	r3, [r0, #20]
 8008724:	3b02      	subs	r3, #2
 8008726:	428b      	cmp	r3, r1
 8008728:	d904      	bls.n	8008734 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 800872a:	8943      	ldrh	r3, [r0, #10]
 800872c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800872e:	fb01 0003 	mla	r0, r1, r3, r0
 8008732:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008734:	2000      	movs	r0, #0
}
 8008736:	4770      	bx	lr

08008738 <clmt_clust>:
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008738:	6802      	ldr	r2, [r0, #0]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800873a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800873c:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800873e:	0a49      	lsrs	r1, r1, #9
 8008740:	8952      	ldrh	r2, [r2, #10]
 8008742:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008746:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008748:	b130      	cbz	r0, 8008758 <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 800874a:	4281      	cmp	r1, r0
 800874c:	d302      	bcc.n	8008754 <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 800874e:	1a09      	subs	r1, r1, r0
 8008750:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008752:	e7f8      	b.n	8008746 <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 8008754:	6858      	ldr	r0, [r3, #4]
 8008756:	4408      	add	r0, r1
}
 8008758:	4770      	bx	lr

0800875a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800875a:	b570      	push	{r4, r5, r6, lr}
 800875c:	4606      	mov	r6, r0
 800875e:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008760:	f101 001a 	add.w	r0, r1, #26
 8008764:	f7ff febc 	bl	80084e0 <ld_word>
	if (fs->fs_type == FS_FAT32) {
 8008768:	7833      	ldrb	r3, [r6, #0]
 800876a:	2b03      	cmp	r3, #3
 800876c:	d000      	beq.n	8008770 <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 800876e:	bd70      	pop	{r4, r5, r6, pc}
 8008770:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008772:	f105 0014 	add.w	r0, r5, #20
 8008776:	f7ff feb3 	bl	80084e0 <ld_word>
 800877a:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 800877e:	e7f6      	b.n	800876e <ld_clust+0x14>

08008780 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008780:	b570      	push	{r4, r5, r6, lr}
 8008782:	4606      	mov	r6, r0
 8008784:	460c      	mov	r4, r1
 8008786:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008788:	b291      	uxth	r1, r2
 800878a:	f104 001a 	add.w	r0, r4, #26
 800878e:	f7ff feb7 	bl	8008500 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008792:	7833      	ldrb	r3, [r6, #0]
 8008794:	2b03      	cmp	r3, #3
 8008796:	d000      	beq.n	800879a <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 8008798:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800879a:	0c29      	lsrs	r1, r5, #16
 800879c:	f104 0014 	add.w	r0, r4, #20
 80087a0:	f7ff feae 	bl	8008500 <st_word>
}
 80087a4:	e7f8      	b.n	8008798 <st_clust+0x18>
	...

080087a8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80087a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ac:	4681      	mov	r9, r0
 80087ae:	468a      	mov	sl, r1
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80087b0:	680f      	ldr	r7, [r1, #0]
 80087b2:	f100 0b24 	add.w	fp, r0, #36	; 0x24
	mem_set(sfn, ' ', 11);
 80087b6:	220b      	movs	r2, #11
 80087b8:	2120      	movs	r1, #32
 80087ba:	4658      	mov	r0, fp
 80087bc:	f7ff feba 	bl	8008534 <mem_set>
	si = i = 0; ni = 8;
 80087c0:	2600      	movs	r6, #0
 80087c2:	4633      	mov	r3, r6
 80087c4:	f04f 0808 	mov.w	r8, #8
 80087c8:	e02c      	b.n	8008824 <create_name+0x7c>
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ') break; 			/* Break if end of the path name */
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80087ca:	3501      	adds	r5, #1
 80087cc:	5d7b      	ldrb	r3, [r7, r5]
 80087ce:	2b2f      	cmp	r3, #47	; 0x2f
 80087d0:	d0fb      	beq.n	80087ca <create_name+0x22>
 80087d2:	2b5c      	cmp	r3, #92	; 0x5c
 80087d4:	d0f9      	beq.n	80087ca <create_name+0x22>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80087d6:	443d      	add	r5, r7
 80087d8:	f8ca 5000 	str.w	r5, [sl]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80087dc:	2e00      	cmp	r6, #0
 80087de:	d043      	beq.n	8008868 <create_name+0xc0>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80087e0:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
 80087e4:	2be5      	cmp	r3, #229	; 0xe5
 80087e6:	d035      	beq.n	8008854 <create_name+0xac>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80087e8:	2c20      	cmp	r4, #32
 80087ea:	d837      	bhi.n	800885c <create_name+0xb4>
 80087ec:	2304      	movs	r3, #4
 80087ee:	f889 302f 	strb.w	r3, [r9, #47]	; 0x2f

	return FR_OK;
 80087f2:	2000      	movs	r0, #0
 80087f4:	e028      	b.n	8008848 <create_name+0xa0>
			i = 8; ni = 11;				/* Goto extension */
 80087f6:	2608      	movs	r6, #8
 80087f8:	f04f 080b 	mov.w	r8, #11
 80087fc:	e011      	b.n	8008822 <create_name+0x7a>
		if (c >= 0x80) {				/* Extended character? */
 80087fe:	f014 0f80 	tst.w	r4, #128	; 0x80
 8008802:	d123      	bne.n	800884c <create_name+0xa4>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008804:	4621      	mov	r1, r4
 8008806:	4819      	ldr	r0, [pc, #100]	; (800886c <create_name+0xc4>)
 8008808:	f7ff fea7 	bl	800855a <chk_chr>
 800880c:	bb50      	cbnz	r0, 8008864 <create_name+0xbc>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800880e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008812:	b2db      	uxtb	r3, r3
 8008814:	2b19      	cmp	r3, #25
 8008816:	d801      	bhi.n	800881c <create_name+0x74>
 8008818:	3c20      	subs	r4, #32
 800881a:	b2e4      	uxtb	r4, r4
			sfn[i++] = c;
 800881c:	f80b 4006 	strb.w	r4, [fp, r6]
 8008820:	3601      	adds	r6, #1
			i = 8; ni = 11;				/* Goto extension */
 8008822:	462b      	mov	r3, r5
		c = (BYTE)p[si++];
 8008824:	1c5d      	adds	r5, r3, #1
 8008826:	5cfc      	ldrb	r4, [r7, r3]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008828:	2c20      	cmp	r4, #32
 800882a:	d9d4      	bls.n	80087d6 <create_name+0x2e>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800882c:	2c2f      	cmp	r4, #47	; 0x2f
 800882e:	d0cd      	beq.n	80087cc <create_name+0x24>
 8008830:	2c5c      	cmp	r4, #92	; 0x5c
 8008832:	d0cb      	beq.n	80087cc <create_name+0x24>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008834:	2c2e      	cmp	r4, #46	; 0x2e
 8008836:	d001      	beq.n	800883c <create_name+0x94>
 8008838:	45b0      	cmp	r8, r6
 800883a:	d8e0      	bhi.n	80087fe <create_name+0x56>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800883c:	f1b8 0f0b 	cmp.w	r8, #11
 8008840:	d00e      	beq.n	8008860 <create_name+0xb8>
 8008842:	2c2e      	cmp	r4, #46	; 0x2e
 8008844:	d0d7      	beq.n	80087f6 <create_name+0x4e>
 8008846:	2006      	movs	r0, #6
#endif /* _USE_LFN != 0 */
}
 8008848:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800884c:	3c80      	subs	r4, #128	; 0x80
 800884e:	4b08      	ldr	r3, [pc, #32]	; (8008870 <create_name+0xc8>)
 8008850:	5d1c      	ldrb	r4, [r3, r4]
 8008852:	e7d7      	b.n	8008804 <create_name+0x5c>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008854:	2305      	movs	r3, #5
 8008856:	f889 3024 	strb.w	r3, [r9, #36]	; 0x24
 800885a:	e7c5      	b.n	80087e8 <create_name+0x40>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800885c:	2300      	movs	r3, #0
 800885e:	e7c6      	b.n	80087ee <create_name+0x46>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008860:	2006      	movs	r0, #6
 8008862:	e7f1      	b.n	8008848 <create_name+0xa0>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008864:	2006      	movs	r0, #6
 8008866:	e7ef      	b.n	8008848 <create_name+0xa0>
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008868:	2006      	movs	r0, #6
 800886a:	e7ed      	b.n	8008848 <create_name+0xa0>
 800886c:	0800e920 	.word	0x0800e920
 8008870:	0800e930 	.word	0x0800e930

08008874 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008874:	4601      	mov	r1, r0
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008876:	6800      	ldr	r0, [r0, #0]
 8008878:	b108      	cbz	r0, 800887e <get_ldnumber+0xa>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800887a:	4602      	mov	r2, r0
 800887c:	e003      	b.n	8008886 <get_ldnumber+0x12>
	int vol = -1;
 800887e:	f04f 30ff 	mov.w	r0, #4294967295
 8008882:	4770      	bx	lr
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008884:	3201      	adds	r2, #1
 8008886:	7813      	ldrb	r3, [r2, #0]
 8008888:	2b20      	cmp	r3, #32
 800888a:	d901      	bls.n	8008890 <get_ldnumber+0x1c>
 800888c:	2b3a      	cmp	r3, #58	; 0x3a
 800888e:	d1f9      	bne.n	8008884 <get_ldnumber+0x10>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008890:	2b3a      	cmp	r3, #58	; 0x3a
 8008892:	d001      	beq.n	8008898 <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008894:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8008896:	4770      	bx	lr
{
 8008898:	b410      	push	{r4}
			i = *tp++ - '0';
 800889a:	4603      	mov	r3, r0
 800889c:	f813 0b01 	ldrb.w	r0, [r3], #1
 80088a0:	3830      	subs	r0, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80088a2:	2809      	cmp	r0, #9
 80088a4:	d808      	bhi.n	80088b8 <get_ldnumber+0x44>
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d002      	beq.n	80088b0 <get_ldnumber+0x3c>
	int vol = -1;
 80088aa:	f04f 30ff 	mov.w	r0, #4294967295
 80088ae:	e005      	b.n	80088bc <get_ldnumber+0x48>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80088b0:	b938      	cbnz	r0, 80088c2 <get_ldnumber+0x4e>
					*path = ++tt;
 80088b2:	3201      	adds	r2, #1
 80088b4:	600a      	str	r2, [r1, #0]
 80088b6:	e001      	b.n	80088bc <get_ldnumber+0x48>
	int vol = -1;
 80088b8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80088bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088c0:	4770      	bx	lr
	int vol = -1;
 80088c2:	f04f 30ff 	mov.w	r0, #4294967295
			return vol;
 80088c6:	e7f9      	b.n	80088bc <get_ldnumber+0x48>

080088c8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80088c8:	b538      	push	{r3, r4, r5, lr}
 80088ca:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80088cc:	4604      	mov	r4, r0
 80088ce:	b198      	cbz	r0, 80088f8 <validate+0x30>
 80088d0:	6803      	ldr	r3, [r0, #0]
 80088d2:	b19b      	cbz	r3, 80088fc <validate+0x34>
 80088d4:	781a      	ldrb	r2, [r3, #0]
 80088d6:	b1a2      	cbz	r2, 8008902 <validate+0x3a>
 80088d8:	8881      	ldrh	r1, [r0, #4]
 80088da:	88da      	ldrh	r2, [r3, #6]
 80088dc:	4291      	cmp	r1, r2
 80088de:	d003      	beq.n	80088e8 <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 80088e0:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80088e2:	2400      	movs	r4, #0
 80088e4:	602c      	str	r4, [r5, #0]
	return res;
}
 80088e6:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80088e8:	7858      	ldrb	r0, [r3, #1]
 80088ea:	f7ff fdb5 	bl	8008458 <disk_status>
 80088ee:	f010 0001 	ands.w	r0, r0, #1
 80088f2:	d109      	bne.n	8008908 <validate+0x40>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80088f4:	6824      	ldr	r4, [r4, #0]
 80088f6:	e7f5      	b.n	80088e4 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 80088f8:	2009      	movs	r0, #9
 80088fa:	e7f3      	b.n	80088e4 <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80088fc:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 80088fe:	2009      	movs	r0, #9
 8008900:	e7f0      	b.n	80088e4 <validate+0x1c>
 8008902:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008904:	2400      	movs	r4, #0
 8008906:	e7ed      	b.n	80088e4 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8008908:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800890a:	2400      	movs	r4, #0
 800890c:	e7ea      	b.n	80088e4 <validate+0x1c>

0800890e <sync_window>:
{
 800890e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008912:	78c5      	ldrb	r5, [r0, #3]
 8008914:	b915      	cbnz	r5, 800891c <sync_window+0xe>
}
 8008916:	4628      	mov	r0, r5
 8008918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800891c:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 800891e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008920:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008924:	2301      	movs	r3, #1
 8008926:	463a      	mov	r2, r7
 8008928:	4641      	mov	r1, r8
 800892a:	7840      	ldrb	r0, [r0, #1]
 800892c:	f7ff fdc0 	bl	80084b0 <disk_write>
 8008930:	4605      	mov	r5, r0
 8008932:	b998      	cbnz	r0, 800895c <sync_window+0x4e>
			fs->wflag = 0;
 8008934:	2300      	movs	r3, #0
 8008936:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008938:	6a23      	ldr	r3, [r4, #32]
 800893a:	1afb      	subs	r3, r7, r3
 800893c:	69a2      	ldr	r2, [r4, #24]
 800893e:	4293      	cmp	r3, r2
 8008940:	d2e9      	bcs.n	8008916 <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008942:	78a6      	ldrb	r6, [r4, #2]
 8008944:	2e01      	cmp	r6, #1
 8008946:	d9e6      	bls.n	8008916 <sync_window+0x8>
					wsect += fs->fsize;
 8008948:	69a3      	ldr	r3, [r4, #24]
 800894a:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800894c:	2301      	movs	r3, #1
 800894e:	463a      	mov	r2, r7
 8008950:	4641      	mov	r1, r8
 8008952:	7860      	ldrb	r0, [r4, #1]
 8008954:	f7ff fdac 	bl	80084b0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008958:	3e01      	subs	r6, #1
 800895a:	e7f3      	b.n	8008944 <sync_window+0x36>
			res = FR_DISK_ERR;
 800895c:	2501      	movs	r5, #1
 800895e:	e7da      	b.n	8008916 <sync_window+0x8>

08008960 <move_window>:
{
 8008960:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008962:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008964:	428b      	cmp	r3, r1
 8008966:	d102      	bne.n	800896e <move_window+0xe>
	FRESULT res = FR_OK;
 8008968:	2600      	movs	r6, #0
}
 800896a:	4630      	mov	r0, r6
 800896c:	bd70      	pop	{r4, r5, r6, pc}
 800896e:	4604      	mov	r4, r0
 8008970:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 8008972:	f7ff ffcc 	bl	800890e <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008976:	4606      	mov	r6, r0
 8008978:	2800      	cmp	r0, #0
 800897a:	d1f6      	bne.n	800896a <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800897c:	2301      	movs	r3, #1
 800897e:	462a      	mov	r2, r5
 8008980:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8008984:	7860      	ldrb	r0, [r4, #1]
 8008986:	f7ff fd87 	bl	8008498 <disk_read>
 800898a:	b110      	cbz	r0, 8008992 <move_window+0x32>
				res = FR_DISK_ERR;
 800898c:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800898e:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 8008992:	62e5      	str	r5, [r4, #44]	; 0x2c
 8008994:	e7e9      	b.n	800896a <move_window+0xa>
	...

08008998 <check_fs>:
{
 8008998:	b538      	push	{r3, r4, r5, lr}
 800899a:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800899c:	2300      	movs	r3, #0
 800899e:	70c3      	strb	r3, [r0, #3]
 80089a0:	f04f 33ff 	mov.w	r3, #4294967295
 80089a4:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80089a6:	f7ff ffdb 	bl	8008960 <move_window>
 80089aa:	bb30      	cbnz	r0, 80089fa <check_fs+0x62>
 80089ac:	4605      	mov	r5, r0
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80089ae:	f204 202e 	addw	r0, r4, #558	; 0x22e
 80089b2:	f7ff fd95 	bl	80084e0 <ld_word>
 80089b6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80089ba:	4298      	cmp	r0, r3
 80089bc:	d11f      	bne.n	80089fe <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80089be:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80089c2:	2be9      	cmp	r3, #233	; 0xe9
 80089c4:	d007      	beq.n	80089d6 <check_fs+0x3e>
 80089c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80089c8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80089cc:	4a0d      	ldr	r2, [pc, #52]	; (8008a04 <check_fs+0x6c>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d001      	beq.n	80089d6 <check_fs+0x3e>
	return 2;
 80089d2:	2502      	movs	r5, #2
 80089d4:	e014      	b.n	8008a00 <check_fs+0x68>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80089d6:	f104 0066 	add.w	r0, r4, #102	; 0x66
 80089da:	f7ff fd86 	bl	80084ea <ld_dword>
 80089de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80089e2:	4b09      	ldr	r3, [pc, #36]	; (8008a08 <check_fs+0x70>)
 80089e4:	4298      	cmp	r0, r3
 80089e6:	d00b      	beq.n	8008a00 <check_fs+0x68>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80089e8:	f104 0082 	add.w	r0, r4, #130	; 0x82
 80089ec:	f7ff fd7d 	bl	80084ea <ld_dword>
 80089f0:	4b06      	ldr	r3, [pc, #24]	; (8008a0c <check_fs+0x74>)
 80089f2:	4298      	cmp	r0, r3
 80089f4:	d004      	beq.n	8008a00 <check_fs+0x68>
	return 2;
 80089f6:	2502      	movs	r5, #2
 80089f8:	e002      	b.n	8008a00 <check_fs+0x68>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80089fa:	2504      	movs	r5, #4
 80089fc:	e000      	b.n	8008a00 <check_fs+0x68>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80089fe:	2503      	movs	r5, #3
}
 8008a00:	4628      	mov	r0, r5
 8008a02:	bd38      	pop	{r3, r4, r5, pc}
 8008a04:	009000eb 	.word	0x009000eb
 8008a08:	00544146 	.word	0x00544146
 8008a0c:	33544146 	.word	0x33544146

08008a10 <find_volume>:
{
 8008a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a14:	b085      	sub	sp, #20
 8008a16:	460d      	mov	r5, r1
 8008a18:	4616      	mov	r6, r2
	*rfs = 0;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 8008a1e:	f7ff ff29 	bl	8008874 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008a22:	1e07      	subs	r7, r0, #0
 8008a24:	f2c0 8144 	blt.w	8008cb0 <find_volume+0x2a0>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008a28:	4bb5      	ldr	r3, [pc, #724]	; (8008d00 <find_volume+0x2f0>)
 8008a2a:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008a2e:	2c00      	cmp	r4, #0
 8008a30:	f000 8143 	beq.w	8008cba <find_volume+0x2aa>
	*rfs = fs;							/* Return pointer to the file system object */
 8008a34:	602c      	str	r4, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008a36:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008a3a:	7823      	ldrb	r3, [r4, #0]
 8008a3c:	b173      	cbz	r3, 8008a5c <find_volume+0x4c>
		stat = disk_status(fs->drv);
 8008a3e:	7860      	ldrb	r0, [r4, #1]
 8008a40:	f7ff fd0a 	bl	8008458 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008a44:	f010 0501 	ands.w	r5, r0, #1
 8008a48:	d108      	bne.n	8008a5c <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008a4a:	2e00      	cmp	r6, #0
 8008a4c:	f000 8131 	beq.w	8008cb2 <find_volume+0x2a2>
 8008a50:	f010 0f04 	tst.w	r0, #4
 8008a54:	f000 812d 	beq.w	8008cb2 <find_volume+0x2a2>
				return FR_WRITE_PROTECTED;
 8008a58:	250a      	movs	r5, #10
 8008a5a:	e12a      	b.n	8008cb2 <find_volume+0x2a2>
	fs->fs_type = 0;					/* Clear the file system object */
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008a60:	b2f8      	uxtb	r0, r7
 8008a62:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008a64:	f7ff fd04 	bl	8008470 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008a68:	f010 0501 	ands.w	r5, r0, #1
 8008a6c:	f040 8127 	bne.w	8008cbe <find_volume+0x2ae>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008a70:	b11e      	cbz	r6, 8008a7a <find_volume+0x6a>
 8008a72:	f010 0f04 	tst.w	r0, #4
 8008a76:	f040 8124 	bne.w	8008cc2 <find_volume+0x2b2>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008a7a:	2100      	movs	r1, #0
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f7ff ff8b 	bl	8008998 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008a82:	2802      	cmp	r0, #2
 8008a84:	f000 80b6 	beq.w	8008bf4 <find_volume+0x1e4>
	bsect = 0;
 8008a88:	2700      	movs	r7, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008a8a:	2804      	cmp	r0, #4
 8008a8c:	f000 811b 	beq.w	8008cc6 <find_volume+0x2b6>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008a90:	2801      	cmp	r0, #1
 8008a92:	f200 811a 	bhi.w	8008cca <find_volume+0x2ba>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008a96:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 8008a9a:	f7ff fd21 	bl	80084e0 <ld_word>
 8008a9e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8008aa2:	f040 8114 	bne.w	8008cce <find_volume+0x2be>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008aa6:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8008aaa:	f7ff fd19 	bl	80084e0 <ld_word>
 8008aae:	4606      	mov	r6, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008ab0:	b920      	cbnz	r0, 8008abc <find_volume+0xac>
 8008ab2:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8008ab6:	f7ff fd18 	bl	80084ea <ld_dword>
 8008aba:	4606      	mov	r6, r0
		fs->fsize = fasize;
 8008abc:	61a6      	str	r6, [r4, #24]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008abe:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8008ac2:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008ac4:	1e53      	subs	r3, r2, #1
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	f200 8102 	bhi.w	8008cd2 <find_volume+0x2c2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008ace:	fb06 f802 	mul.w	r8, r6, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008ad2:	f894 903d 	ldrb.w	r9, [r4, #61]	; 0x3d
 8008ad6:	f8a4 900a 	strh.w	r9, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008ada:	f1b9 0f00 	cmp.w	r9, #0
 8008ade:	f000 80fa 	beq.w	8008cd6 <find_volume+0x2c6>
 8008ae2:	f109 33ff 	add.w	r3, r9, #4294967295
 8008ae6:	ea19 0f03 	tst.w	r9, r3
 8008aea:	f040 80f6 	bne.w	8008cda <find_volume+0x2ca>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008aee:	f104 0041 	add.w	r0, r4, #65	; 0x41
 8008af2:	f7ff fcf5 	bl	80084e0 <ld_word>
 8008af6:	4682      	mov	sl, r0
 8008af8:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008afa:	f010 0f0f 	tst.w	r0, #15
 8008afe:	f040 80ee 	bne.w	8008cde <find_volume+0x2ce>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008b02:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8008b06:	f7ff fceb 	bl	80084e0 <ld_word>
 8008b0a:	4683      	mov	fp, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008b0c:	b920      	cbnz	r0, 8008b18 <find_volume+0x108>
 8008b0e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008b12:	f7ff fcea 	bl	80084ea <ld_dword>
 8008b16:	4683      	mov	fp, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008b18:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 8008b1c:	f7ff fce0 	bl	80084e0 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008b20:	4602      	mov	r2, r0
 8008b22:	2800      	cmp	r0, #0
 8008b24:	f000 80dd 	beq.w	8008ce2 <find_volume+0x2d2>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008b28:	eb00 0308 	add.w	r3, r0, r8
 8008b2c:	eb03 131a 	add.w	r3, r3, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008b30:	459b      	cmp	fp, r3
 8008b32:	f0c0 80d8 	bcc.w	8008ce6 <find_volume+0x2d6>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008b36:	ebab 0b03 	sub.w	fp, fp, r3
 8008b3a:	fbbb f1f9 	udiv	r1, fp, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008b3e:	45cb      	cmp	fp, r9
 8008b40:	f0c0 80d3 	bcc.w	8008cea <find_volume+0x2da>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008b44:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8008b48:	4281      	cmp	r1, r0
 8008b4a:	d96b      	bls.n	8008c24 <find_volume+0x214>
		fmt = FS_FAT32;
 8008b4c:	f04f 0b03 	mov.w	fp, #3
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008b50:	f640 70f5 	movw	r0, #4085	; 0xff5
 8008b54:	4281      	cmp	r1, r0
 8008b56:	d801      	bhi.n	8008b5c <find_volume+0x14c>
 8008b58:	f04f 0b01 	mov.w	fp, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008b5c:	f101 0902 	add.w	r9, r1, #2
 8008b60:	f8c4 9014 	str.w	r9, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008b64:	61e7      	str	r7, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008b66:	443a      	add	r2, r7
 8008b68:	6222      	str	r2, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008b6a:	443b      	add	r3, r7
 8008b6c:	62a3      	str	r3, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8008b6e:	f1bb 0f03 	cmp.w	fp, #3
 8008b72:	d05a      	beq.n	8008c2a <find_volume+0x21a>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008b74:	f1ba 0f00 	cmp.w	sl, #0
 8008b78:	f000 80bd 	beq.w	8008cf6 <find_volume+0x2e6>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008b7c:	4442      	add	r2, r8
 8008b7e:	6262      	str	r2, [r4, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008b80:	f1bb 0f02 	cmp.w	fp, #2
 8008b84:	d062      	beq.n	8008c4c <find_volume+0x23c>
 8008b86:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8008b8a:	f009 0901 	and.w	r9, r9, #1
 8008b8e:	eb09 0953 	add.w	r9, r9, r3, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008b92:	f209 19ff 	addw	r9, r9, #511	; 0x1ff
 8008b96:	ebb6 2f59 	cmp.w	r6, r9, lsr #9
 8008b9a:	f0c0 80ae 	bcc.w	8008cfa <find_volume+0x2ea>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8008ba2:	6123      	str	r3, [r4, #16]
 8008ba4:	60e3      	str	r3, [r4, #12]
		fs->fsi_flag = 0x80;
 8008ba6:	2380      	movs	r3, #128	; 0x80
 8008ba8:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008baa:	f1bb 0f03 	cmp.w	fp, #3
 8008bae:	d050      	beq.n	8008c52 <find_volume+0x242>
	fs->fs_type = fmt;		/* FAT sub-type */
 8008bb0:	f884 b000 	strb.w	fp, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 8008bb4:	4a53      	ldr	r2, [pc, #332]	; (8008d04 <find_volume+0x2f4>)
 8008bb6:	8813      	ldrh	r3, [r2, #0]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	8013      	strh	r3, [r2, #0]
 8008bbe:	80e3      	strh	r3, [r4, #6]
	clear_lock(fs);
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	f7ff fd8f 	bl	80086e4 <clear_lock>
	return FR_OK;
 8008bc6:	e074      	b.n	8008cb2 <find_volume+0x2a2>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008bc8:	2000      	movs	r0, #0
 8008bca:	ab04      	add	r3, sp, #16
 8008bcc:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8008bd0:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008bd4:	3601      	adds	r6, #1
 8008bd6:	2e03      	cmp	r6, #3
 8008bd8:	d80e      	bhi.n	8008bf8 <find_volume+0x1e8>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008bda:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8008bde:	0133      	lsls	r3, r6, #4
 8008be0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008be4:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008be6:	7903      	ldrb	r3, [r0, #4]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d0ed      	beq.n	8008bc8 <find_volume+0x1b8>
 8008bec:	3008      	adds	r0, #8
 8008bee:	f7ff fc7c 	bl	80084ea <ld_dword>
 8008bf2:	e7ea      	b.n	8008bca <find_volume+0x1ba>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008bf4:	2600      	movs	r6, #0
 8008bf6:	e7ee      	b.n	8008bd6 <find_volume+0x1c6>
 8008bf8:	2600      	movs	r6, #0
 8008bfa:	e00a      	b.n	8008c12 <find_volume+0x202>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008bfc:	4639      	mov	r1, r7
 8008bfe:	4620      	mov	r0, r4
 8008c00:	f7ff feca 	bl	8008998 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008c04:	2801      	cmp	r0, #1
 8008c06:	f67f af40 	bls.w	8008a8a <find_volume+0x7a>
 8008c0a:	3601      	adds	r6, #1
 8008c0c:	2e03      	cmp	r6, #3
 8008c0e:	f63f af3c 	bhi.w	8008a8a <find_volume+0x7a>
			bsect = br[i];
 8008c12:	ab04      	add	r3, sp, #16
 8008c14:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8008c18:	f853 7c10 	ldr.w	r7, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008c1c:	2f00      	cmp	r7, #0
 8008c1e:	d1ed      	bne.n	8008bfc <find_volume+0x1ec>
 8008c20:	2003      	movs	r0, #3
 8008c22:	e7f2      	b.n	8008c0a <find_volume+0x1fa>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008c24:	f04f 0b02 	mov.w	fp, #2
 8008c28:	e792      	b.n	8008b50 <find_volume+0x140>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008c2a:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8008c2e:	f7ff fc57 	bl	80084e0 <ld_word>
 8008c32:	2800      	cmp	r0, #0
 8008c34:	d15b      	bne.n	8008cee <find_volume+0x2de>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008c36:	f1ba 0f00 	cmp.w	sl, #0
 8008c3a:	d15a      	bne.n	8008cf2 <find_volume+0x2e2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008c3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008c40:	f7ff fc53 	bl	80084ea <ld_dword>
 8008c44:	6260      	str	r0, [r4, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008c46:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8008c4a:	e7a2      	b.n	8008b92 <find_volume+0x182>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008c4c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8008c50:	e79f      	b.n	8008b92 <find_volume+0x182>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008c52:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8008c56:	f7ff fc43 	bl	80084e0 <ld_word>
 8008c5a:	2801      	cmp	r0, #1
 8008c5c:	d1a8      	bne.n	8008bb0 <find_volume+0x1a0>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008c5e:	1c79      	adds	r1, r7, #1
 8008c60:	4620      	mov	r0, r4
 8008c62:	f7ff fe7d 	bl	8008960 <move_window>
 8008c66:	2800      	cmp	r0, #0
 8008c68:	d1a2      	bne.n	8008bb0 <find_volume+0x1a0>
			fs->fsi_flag = 0;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008c6e:	f204 202e 	addw	r0, r4, #558	; 0x22e
 8008c72:	f7ff fc35 	bl	80084e0 <ld_word>
 8008c76:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008c7a:	4298      	cmp	r0, r3
 8008c7c:	d198      	bne.n	8008bb0 <find_volume+0x1a0>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008c7e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8008c82:	f7ff fc32 	bl	80084ea <ld_dword>
 8008c86:	4b20      	ldr	r3, [pc, #128]	; (8008d08 <find_volume+0x2f8>)
 8008c88:	4298      	cmp	r0, r3
 8008c8a:	d191      	bne.n	8008bb0 <find_volume+0x1a0>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008c8c:	f504 7005 	add.w	r0, r4, #532	; 0x214
 8008c90:	f7ff fc2b 	bl	80084ea <ld_dword>
 8008c94:	4b1d      	ldr	r3, [pc, #116]	; (8008d0c <find_volume+0x2fc>)
 8008c96:	4298      	cmp	r0, r3
 8008c98:	d18a      	bne.n	8008bb0 <find_volume+0x1a0>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008c9a:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8008c9e:	f7ff fc24 	bl	80084ea <ld_dword>
 8008ca2:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008ca4:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8008ca8:	f7ff fc1f 	bl	80084ea <ld_dword>
 8008cac:	60e0      	str	r0, [r4, #12]
 8008cae:	e77f      	b.n	8008bb0 <find_volume+0x1a0>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008cb0:	250b      	movs	r5, #11
}
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	b005      	add	sp, #20
 8008cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008cba:	250c      	movs	r5, #12
 8008cbc:	e7f9      	b.n	8008cb2 <find_volume+0x2a2>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008cbe:	2503      	movs	r5, #3
 8008cc0:	e7f7      	b.n	8008cb2 <find_volume+0x2a2>
		return FR_WRITE_PROTECTED;
 8008cc2:	250a      	movs	r5, #10
 8008cc4:	e7f5      	b.n	8008cb2 <find_volume+0x2a2>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008cc6:	2501      	movs	r5, #1
 8008cc8:	e7f3      	b.n	8008cb2 <find_volume+0x2a2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008cca:	250d      	movs	r5, #13
 8008ccc:	e7f1      	b.n	8008cb2 <find_volume+0x2a2>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008cce:	250d      	movs	r5, #13
 8008cd0:	e7ef      	b.n	8008cb2 <find_volume+0x2a2>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008cd2:	250d      	movs	r5, #13
 8008cd4:	e7ed      	b.n	8008cb2 <find_volume+0x2a2>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008cd6:	250d      	movs	r5, #13
 8008cd8:	e7eb      	b.n	8008cb2 <find_volume+0x2a2>
 8008cda:	250d      	movs	r5, #13
 8008cdc:	e7e9      	b.n	8008cb2 <find_volume+0x2a2>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008cde:	250d      	movs	r5, #13
 8008ce0:	e7e7      	b.n	8008cb2 <find_volume+0x2a2>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008ce2:	250d      	movs	r5, #13
 8008ce4:	e7e5      	b.n	8008cb2 <find_volume+0x2a2>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008ce6:	250d      	movs	r5, #13
 8008ce8:	e7e3      	b.n	8008cb2 <find_volume+0x2a2>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008cea:	250d      	movs	r5, #13
 8008cec:	e7e1      	b.n	8008cb2 <find_volume+0x2a2>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008cee:	250d      	movs	r5, #13
 8008cf0:	e7df      	b.n	8008cb2 <find_volume+0x2a2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008cf2:	250d      	movs	r5, #13
 8008cf4:	e7dd      	b.n	8008cb2 <find_volume+0x2a2>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008cf6:	250d      	movs	r5, #13
 8008cf8:	e7db      	b.n	8008cb2 <find_volume+0x2a2>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008cfa:	250d      	movs	r5, #13
 8008cfc:	e7d9      	b.n	8008cb2 <find_volume+0x2a2>
 8008cfe:	bf00      	nop
 8008d00:	20000370 	.word	0x20000370
 8008d04:	20000394 	.word	0x20000394
 8008d08:	41615252 	.word	0x41615252
 8008d0c:	61417272 	.word	0x61417272

08008d10 <put_fat>:
{
 8008d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008d14:	2901      	cmp	r1, #1
 8008d16:	d97e      	bls.n	8008e16 <put_fat+0x106>
 8008d18:	4607      	mov	r7, r0
 8008d1a:	460c      	mov	r4, r1
 8008d1c:	4616      	mov	r6, r2
 8008d1e:	6943      	ldr	r3, [r0, #20]
 8008d20:	428b      	cmp	r3, r1
 8008d22:	d97a      	bls.n	8008e1a <put_fat+0x10a>
		switch (fs->fs_type) {
 8008d24:	7803      	ldrb	r3, [r0, #0]
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	d045      	beq.n	8008db6 <put_fat+0xa6>
 8008d2a:	2b03      	cmp	r3, #3
 8008d2c:	d057      	beq.n	8008dde <put_fat+0xce>
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d003      	beq.n	8008d3a <put_fat+0x2a>
 8008d32:	2502      	movs	r5, #2
}
 8008d34:	4628      	mov	r0, r5
 8008d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			bc = (UINT)clst; bc += bc / 2;
 8008d3a:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008d3e:	6a01      	ldr	r1, [r0, #32]
 8008d40:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8008d44:	f7ff fe0c 	bl	8008960 <move_window>
			if (res != FR_OK) break;
 8008d48:	4605      	mov	r5, r0
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	d1f2      	bne.n	8008d34 <put_fat+0x24>
			p = fs->win + bc++ % SS(fs);
 8008d4e:	f107 0a30 	add.w	sl, r7, #48	; 0x30
 8008d52:	f108 0901 	add.w	r9, r8, #1
 8008d56:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008d5a:	f014 0401 	ands.w	r4, r4, #1
 8008d5e:	d01f      	beq.n	8008da0 <put_fat+0x90>
 8008d60:	f91a 3008 	ldrsb.w	r3, [sl, r8]
 8008d64:	f003 030f 	and.w	r3, r3, #15
 8008d68:	0132      	lsls	r2, r6, #4
 8008d6a:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
 8008d76:	2301      	movs	r3, #1
 8008d78:	70fb      	strb	r3, [r7, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008d7a:	6a39      	ldr	r1, [r7, #32]
 8008d7c:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 8008d80:	4638      	mov	r0, r7
 8008d82:	f7ff fded 	bl	8008960 <move_window>
			if (res != FR_OK) break;
 8008d86:	4605      	mov	r5, r0
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	d1d3      	bne.n	8008d34 <put_fat+0x24>
			p = fs->win + bc % SS(fs);
 8008d8c:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008d90:	b144      	cbz	r4, 8008da4 <put_fat+0x94>
 8008d92:	f3c6 1207 	ubfx	r2, r6, #4, #8
 8008d96:	f80a 2009 	strb.w	r2, [sl, r9]
			fs->wflag = 1;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	70fb      	strb	r3, [r7, #3]
			break;
 8008d9e:	e7c9      	b.n	8008d34 <put_fat+0x24>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008da0:	b2f3      	uxtb	r3, r6
 8008da2:	e7e6      	b.n	8008d72 <put_fat+0x62>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008da4:	f91a 2009 	ldrsb.w	r2, [sl, r9]
 8008da8:	f022 020f 	bic.w	r2, r2, #15
 8008dac:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8008db0:	4332      	orrs	r2, r6
 8008db2:	b2d2      	uxtb	r2, r2
 8008db4:	e7ef      	b.n	8008d96 <put_fat+0x86>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008db6:	6a01      	ldr	r1, [r0, #32]
 8008db8:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8008dbc:	f7ff fdd0 	bl	8008960 <move_window>
			if (res != FR_OK) break;
 8008dc0:	4605      	mov	r5, r0
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	d1b6      	bne.n	8008d34 <put_fat+0x24>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008dc6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8008dca:	0064      	lsls	r4, r4, #1
 8008dcc:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8008dd0:	b2b1      	uxth	r1, r6
 8008dd2:	4420      	add	r0, r4
 8008dd4:	f7ff fb94 	bl	8008500 <st_word>
			fs->wflag = 1;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	70fb      	strb	r3, [r7, #3]
			break;
 8008ddc:	e7aa      	b.n	8008d34 <put_fat+0x24>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008dde:	6a01      	ldr	r1, [r0, #32]
 8008de0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8008de4:	f7ff fdbc 	bl	8008960 <move_window>
			if (res != FR_OK) break;
 8008de8:	4605      	mov	r5, r0
 8008dea:	2800      	cmp	r0, #0
 8008dec:	d1a2      	bne.n	8008d34 <put_fat+0x24>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008dee:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
 8008df2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008df6:	00a4      	lsls	r4, r4, #2
 8008df8:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8008dfc:	441c      	add	r4, r3
 8008dfe:	4620      	mov	r0, r4
 8008e00:	f7ff fb73 	bl	80084ea <ld_dword>
 8008e04:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008e08:	4331      	orrs	r1, r6
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	f7ff fb7c 	bl	8008508 <st_dword>
			fs->wflag = 1;
 8008e10:	2301      	movs	r3, #1
 8008e12:	70fb      	strb	r3, [r7, #3]
			break;
 8008e14:	e78e      	b.n	8008d34 <put_fat+0x24>
	FRESULT res = FR_INT_ERR;
 8008e16:	2502      	movs	r5, #2
 8008e18:	e78c      	b.n	8008d34 <put_fat+0x24>
 8008e1a:	2502      	movs	r5, #2
 8008e1c:	e78a      	b.n	8008d34 <put_fat+0x24>

08008e1e <get_fat>:
{
 8008e1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 8008e20:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008e22:	2901      	cmp	r1, #1
 8008e24:	d956      	bls.n	8008ed4 <get_fat+0xb6>
 8008e26:	460c      	mov	r4, r1
 8008e28:	696b      	ldr	r3, [r5, #20]
 8008e2a:	428b      	cmp	r3, r1
 8008e2c:	d954      	bls.n	8008ed8 <get_fat+0xba>
		switch (fs->fs_type) {
 8008e2e:	782b      	ldrb	r3, [r5, #0]
 8008e30:	2b02      	cmp	r3, #2
 8008e32:	d02d      	beq.n	8008e90 <get_fat+0x72>
 8008e34:	2b03      	cmp	r3, #3
 8008e36:	d03b      	beq.n	8008eb0 <get_fat+0x92>
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d001      	beq.n	8008e40 <get_fat+0x22>
 8008e3c:	2001      	movs	r0, #1
 8008e3e:	e04a      	b.n	8008ed6 <get_fat+0xb8>
			bc = (UINT)clst; bc += bc / 2;
 8008e40:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008e44:	6a29      	ldr	r1, [r5, #32]
 8008e46:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	f7ff fd88 	bl	8008960 <move_window>
 8008e50:	b110      	cbz	r0, 8008e58 <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008e52:	f04f 30ff 	mov.w	r0, #4294967295
 8008e56:	e03e      	b.n	8008ed6 <get_fat+0xb8>
			wc = fs->win[bc++ % SS(fs)];
 8008e58:	1c77      	adds	r7, r6, #1
 8008e5a:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8008e5e:	442e      	add	r6, r5
 8008e60:	f896 6030 	ldrb.w	r6, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008e64:	6a29      	ldr	r1, [r5, #32]
 8008e66:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8008e6a:	4628      	mov	r0, r5
 8008e6c:	f7ff fd78 	bl	8008960 <move_window>
 8008e70:	bba0      	cbnz	r0, 8008edc <get_fat+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008e72:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8008e76:	443d      	add	r5, r7
 8008e78:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
 8008e7c:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008e80:	f014 0f01 	tst.w	r4, #1
 8008e84:	d001      	beq.n	8008e8a <get_fat+0x6c>
 8008e86:	0900      	lsrs	r0, r0, #4
 8008e88:	e025      	b.n	8008ed6 <get_fat+0xb8>
 8008e8a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8008e8e:	e022      	b.n	8008ed6 <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008e90:	6a29      	ldr	r1, [r5, #32]
 8008e92:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8008e96:	4628      	mov	r0, r5
 8008e98:	f7ff fd62 	bl	8008960 <move_window>
 8008e9c:	bb08      	cbnz	r0, 8008ee2 <get_fat+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008e9e:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8008ea2:	0064      	lsls	r4, r4, #1
 8008ea4:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8008ea8:	4420      	add	r0, r4
 8008eaa:	f7ff fb19 	bl	80084e0 <ld_word>
			break;
 8008eae:	e012      	b.n	8008ed6 <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008eb0:	6a29      	ldr	r1, [r5, #32]
 8008eb2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	f7ff fd52 	bl	8008960 <move_window>
 8008ebc:	b9a0      	cbnz	r0, 8008ee8 <get_fat+0xca>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008ebe:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8008ec2:	00a4      	lsls	r4, r4, #2
 8008ec4:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8008ec8:	4420      	add	r0, r4
 8008eca:	f7ff fb0e 	bl	80084ea <ld_dword>
 8008ece:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8008ed2:	e000      	b.n	8008ed6 <get_fat+0xb8>
		val = 1;	/* Internal error */
 8008ed4:	2001      	movs	r0, #1
}
 8008ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 8008ed8:	2001      	movs	r0, #1
 8008eda:	e7fc      	b.n	8008ed6 <get_fat+0xb8>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008edc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee0:	e7f9      	b.n	8008ed6 <get_fat+0xb8>
 8008ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee6:	e7f6      	b.n	8008ed6 <get_fat+0xb8>
 8008ee8:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 8008eec:	e7f3      	b.n	8008ed6 <get_fat+0xb8>

08008eee <dir_sdi>:
{
 8008eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 8008ef2:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008ef6:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8008efa:	d242      	bcs.n	8008f82 <dir_sdi+0x94>
 8008efc:	4606      	mov	r6, r0
 8008efe:	460f      	mov	r7, r1
 8008f00:	f011 0f1f 	tst.w	r1, #31
 8008f04:	d13f      	bne.n	8008f86 <dir_sdi+0x98>
	dp->dptr = ofs;				/* Set current offset */
 8008f06:	6141      	str	r1, [r0, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008f08:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008f0a:	b92c      	cbnz	r4, 8008f18 <dir_sdi+0x2a>
 8008f0c:	f898 3000 	ldrb.w	r3, [r8]
 8008f10:	2b02      	cmp	r3, #2
 8008f12:	d901      	bls.n	8008f18 <dir_sdi+0x2a>
		clst = fs->dirbase;
 8008f14:	f8d8 4024 	ldr.w	r4, [r8, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008f18:	b9b4      	cbnz	r4, 8008f48 <dir_sdi+0x5a>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008f1a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8008f1e:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 8008f22:	d932      	bls.n	8008f8a <dir_sdi+0x9c>
		dp->sect = fs->dirbase;
 8008f24:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8008f28:	61f3      	str	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 8008f2a:	61b4      	str	r4, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008f2c:	69f3      	ldr	r3, [r6, #28]
 8008f2e:	b393      	cbz	r3, 8008f96 <dir_sdi+0xa8>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008f30:	eb03 2357 	add.w	r3, r3, r7, lsr #9
 8008f34:	61f3      	str	r3, [r6, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008f36:	f108 0330 	add.w	r3, r8, #48	; 0x30
 8008f3a:	f3c7 0108 	ubfx	r1, r7, #0, #9
 8008f3e:	4419      	add	r1, r3
 8008f40:	6231      	str	r1, [r6, #32]
	return FR_OK;
 8008f42:	2000      	movs	r0, #0
}
 8008f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008f48:	f8b8 500a 	ldrh.w	r5, [r8, #10]
 8008f4c:	026d      	lsls	r5, r5, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8008f4e:	e000      	b.n	8008f52 <dir_sdi+0x64>
			ofs -= csz;
 8008f50:	1b7f      	subs	r7, r7, r5
		while (ofs >= csz) {				/* Follow cluster chain */
 8008f52:	42af      	cmp	r7, r5
 8008f54:	d30f      	bcc.n	8008f76 <dir_sdi+0x88>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008f56:	4621      	mov	r1, r4
 8008f58:	4630      	mov	r0, r6
 8008f5a:	f7ff ff60 	bl	8008e1e <get_fat>
 8008f5e:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008f60:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008f64:	d013      	beq.n	8008f8e <dir_sdi+0xa0>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008f66:	2801      	cmp	r0, #1
 8008f68:	d913      	bls.n	8008f92 <dir_sdi+0xa4>
 8008f6a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8008f6e:	4283      	cmp	r3, r0
 8008f70:	d8ee      	bhi.n	8008f50 <dir_sdi+0x62>
 8008f72:	2002      	movs	r0, #2
 8008f74:	e7e6      	b.n	8008f44 <dir_sdi+0x56>
		dp->sect = clust2sect(fs, clst);
 8008f76:	4621      	mov	r1, r4
 8008f78:	4640      	mov	r0, r8
 8008f7a:	f7ff fbd1 	bl	8008720 <clust2sect>
 8008f7e:	61f0      	str	r0, [r6, #28]
 8008f80:	e7d3      	b.n	8008f2a <dir_sdi+0x3c>
		return FR_INT_ERR;
 8008f82:	2002      	movs	r0, #2
 8008f84:	e7de      	b.n	8008f44 <dir_sdi+0x56>
 8008f86:	2002      	movs	r0, #2
 8008f88:	e7dc      	b.n	8008f44 <dir_sdi+0x56>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008f8a:	2002      	movs	r0, #2
 8008f8c:	e7da      	b.n	8008f44 <dir_sdi+0x56>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008f8e:	2001      	movs	r0, #1
 8008f90:	e7d8      	b.n	8008f44 <dir_sdi+0x56>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008f92:	2002      	movs	r0, #2
 8008f94:	e7d6      	b.n	8008f44 <dir_sdi+0x56>
	if (!dp->sect) return FR_INT_ERR;
 8008f96:	2002      	movs	r0, #2
 8008f98:	e7d4      	b.n	8008f44 <dir_sdi+0x56>

08008f9a <create_chain>:
{
 8008f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f9e:	4605      	mov	r5, r0
	FATFS *fs = obj->fs;
 8008fa0:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8008fa2:	460f      	mov	r7, r1
 8008fa4:	b951      	cbnz	r1, 8008fbc <create_chain+0x22>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008fa6:	f8d6 800c 	ldr.w	r8, [r6, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008faa:	f1b8 0f00 	cmp.w	r8, #0
 8008fae:	d012      	beq.n	8008fd6 <create_chain+0x3c>
 8008fb0:	6973      	ldr	r3, [r6, #20]
 8008fb2:	4543      	cmp	r3, r8
 8008fb4:	d811      	bhi.n	8008fda <create_chain+0x40>
 8008fb6:	f04f 0801 	mov.w	r8, #1
 8008fba:	e00e      	b.n	8008fda <create_chain+0x40>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008fbc:	f7ff ff2f 	bl	8008e1e <get_fat>
 8008fc0:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008fc2:	2801      	cmp	r0, #1
 8008fc4:	d947      	bls.n	8009056 <create_chain+0xbc>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008fc6:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008fca:	d049      	beq.n	8009060 <create_chain+0xc6>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008fcc:	6972      	ldr	r2, [r6, #20]
 8008fce:	4282      	cmp	r2, r0
 8008fd0:	d846      	bhi.n	8009060 <create_chain+0xc6>
		scl = clst;
 8008fd2:	46b8      	mov	r8, r7
 8008fd4:	e001      	b.n	8008fda <create_chain+0x40>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008fd6:	f04f 0801 	mov.w	r8, #1
		ncl = scl;	/* Start cluster */
 8008fda:	4644      	mov	r4, r8
 8008fdc:	e00c      	b.n	8008ff8 <create_chain+0x5e>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008fde:	4621      	mov	r1, r4
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	f7ff ff1c 	bl	8008e1e <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	b178      	cbz	r0, 800900a <create_chain+0x70>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008fea:	2801      	cmp	r0, #1
 8008fec:	d038      	beq.n	8009060 <create_chain+0xc6>
 8008fee:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008ff2:	d035      	beq.n	8009060 <create_chain+0xc6>
			if (ncl == scl) return 0;		/* No free cluster */
 8008ff4:	4544      	cmp	r4, r8
 8008ff6:	d032      	beq.n	800905e <create_chain+0xc4>
			ncl++;							/* Next cluster */
 8008ff8:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008ffa:	6973      	ldr	r3, [r6, #20]
 8008ffc:	42a3      	cmp	r3, r4
 8008ffe:	d8ee      	bhi.n	8008fde <create_chain+0x44>
				if (ncl > scl) return 0;	/* No free cluster */
 8009000:	f1b8 0f01 	cmp.w	r8, #1
 8009004:	d929      	bls.n	800905a <create_chain+0xc0>
				ncl = 2;
 8009006:	2402      	movs	r4, #2
 8009008:	e7e9      	b.n	8008fde <create_chain+0x44>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800900a:	f04f 32ff 	mov.w	r2, #4294967295
 800900e:	4621      	mov	r1, r4
 8009010:	4630      	mov	r0, r6
 8009012:	f7ff fe7d 	bl	8008d10 <put_fat>
		if (res == FR_OK && clst != 0) {
 8009016:	4603      	mov	r3, r0
 8009018:	b900      	cbnz	r0, 800901c <create_chain+0x82>
 800901a:	b977      	cbnz	r7, 800903a <create_chain+0xa0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800901c:	b9a3      	cbnz	r3, 8009048 <create_chain+0xae>
		fs->last_clst = ncl;
 800901e:	60f4      	str	r4, [r6, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009020:	6932      	ldr	r2, [r6, #16]
 8009022:	6973      	ldr	r3, [r6, #20]
 8009024:	3b02      	subs	r3, #2
 8009026:	429a      	cmp	r2, r3
 8009028:	d801      	bhi.n	800902e <create_chain+0x94>
 800902a:	3a01      	subs	r2, #1
 800902c:	6132      	str	r2, [r6, #16]
		fs->fsi_flag |= 1;
 800902e:	7933      	ldrb	r3, [r6, #4]
 8009030:	f043 0301 	orr.w	r3, r3, #1
 8009034:	7133      	strb	r3, [r6, #4]
 8009036:	4623      	mov	r3, r4
 8009038:	e012      	b.n	8009060 <create_chain+0xc6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800903a:	4622      	mov	r2, r4
 800903c:	4639      	mov	r1, r7
 800903e:	4630      	mov	r0, r6
 8009040:	f7ff fe66 	bl	8008d10 <put_fat>
 8009044:	4603      	mov	r3, r0
 8009046:	e7e9      	b.n	800901c <create_chain+0x82>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009048:	2b01      	cmp	r3, #1
 800904a:	d001      	beq.n	8009050 <create_chain+0xb6>
 800904c:	2301      	movs	r3, #1
 800904e:	e007      	b.n	8009060 <create_chain+0xc6>
 8009050:	f04f 33ff 	mov.w	r3, #4294967295
 8009054:	e004      	b.n	8009060 <create_chain+0xc6>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009056:	2301      	movs	r3, #1
 8009058:	e002      	b.n	8009060 <create_chain+0xc6>
				if (ncl > scl) return 0;	/* No free cluster */
 800905a:	2300      	movs	r3, #0
 800905c:	e000      	b.n	8009060 <create_chain+0xc6>
			if (ncl == scl) return 0;		/* No free cluster */
 800905e:	2300      	movs	r3, #0
}
 8009060:	4618      	mov	r0, r3
 8009062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009066 <remove_chain>:
{
 8009066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009068:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 800906a:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800906c:	2901      	cmp	r1, #1
 800906e:	d92e      	bls.n	80090ce <remove_chain+0x68>
 8009070:	4606      	mov	r6, r0
 8009072:	4611      	mov	r1, r2
 8009074:	696b      	ldr	r3, [r5, #20]
 8009076:	42a3      	cmp	r3, r4
 8009078:	d92b      	bls.n	80090d2 <remove_chain+0x6c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800907a:	b14a      	cbz	r2, 8009090 <remove_chain+0x2a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800907c:	f04f 32ff 	mov.w	r2, #4294967295
 8009080:	4628      	mov	r0, r5
 8009082:	f7ff fe45 	bl	8008d10 <put_fat>
		if (res != FR_OK) return res;
 8009086:	4607      	mov	r7, r0
 8009088:	b110      	cbz	r0, 8009090 <remove_chain+0x2a>
 800908a:	e023      	b.n	80090d4 <remove_chain+0x6e>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800908c:	42a2      	cmp	r2, r4
 800908e:	d921      	bls.n	80090d4 <remove_chain+0x6e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009090:	4627      	mov	r7, r4
 8009092:	4621      	mov	r1, r4
 8009094:	4630      	mov	r0, r6
 8009096:	f7ff fec2 	bl	8008e1e <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 800909a:	4604      	mov	r4, r0
 800909c:	b1e0      	cbz	r0, 80090d8 <remove_chain+0x72>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800909e:	2801      	cmp	r0, #1
 80090a0:	d01c      	beq.n	80090dc <remove_chain+0x76>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80090a2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80090a6:	d01b      	beq.n	80090e0 <remove_chain+0x7a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80090a8:	2200      	movs	r2, #0
 80090aa:	4639      	mov	r1, r7
 80090ac:	4628      	mov	r0, r5
 80090ae:	f7ff fe2f 	bl	8008d10 <put_fat>
			if (res != FR_OK) return res;
 80090b2:	4607      	mov	r7, r0
 80090b4:	b970      	cbnz	r0, 80090d4 <remove_chain+0x6e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80090b6:	692b      	ldr	r3, [r5, #16]
 80090b8:	696a      	ldr	r2, [r5, #20]
 80090ba:	1e91      	subs	r1, r2, #2
 80090bc:	428b      	cmp	r3, r1
 80090be:	d2e5      	bcs.n	800908c <remove_chain+0x26>
			fs->free_clst++;
 80090c0:	3301      	adds	r3, #1
 80090c2:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
 80090c4:	792b      	ldrb	r3, [r5, #4]
 80090c6:	f043 0301 	orr.w	r3, r3, #1
 80090ca:	712b      	strb	r3, [r5, #4]
 80090cc:	e7de      	b.n	800908c <remove_chain+0x26>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80090ce:	2702      	movs	r7, #2
 80090d0:	e000      	b.n	80090d4 <remove_chain+0x6e>
 80090d2:	2702      	movs	r7, #2
}
 80090d4:	4638      	mov	r0, r7
 80090d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
 80090d8:	2700      	movs	r7, #0
 80090da:	e7fb      	b.n	80090d4 <remove_chain+0x6e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80090dc:	2702      	movs	r7, #2
 80090de:	e7f9      	b.n	80090d4 <remove_chain+0x6e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80090e0:	2701      	movs	r7, #1
 80090e2:	e7f7      	b.n	80090d4 <remove_chain+0x6e>

080090e4 <dir_next>:
{
 80090e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	FATFS *fs = dp->obj.fs;
 80090e8:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80090ea:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80090ec:	69c3      	ldr	r3, [r0, #28]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d06c      	beq.n	80091cc <dir_next+0xe8>
 80090f2:	4604      	mov	r4, r0
 80090f4:	4688      	mov	r8, r1
 80090f6:	3520      	adds	r5, #32
 80090f8:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 80090fc:	d268      	bcs.n	80091d0 <dir_next+0xec>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80090fe:	f3c5 0708 	ubfx	r7, r5, #0, #9
 8009102:	b93f      	cbnz	r7, 8009114 <dir_next+0x30>
		dp->sect++;				/* Next sector */
 8009104:	3301      	adds	r3, #1
 8009106:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8009108:	6981      	ldr	r1, [r0, #24]
 800910a:	b979      	cbnz	r1, 800912c <dir_next+0x48>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800910c:	8933      	ldrh	r3, [r6, #8]
 800910e:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8009112:	d907      	bls.n	8009124 <dir_next+0x40>
	dp->dptr = ofs;						/* Current entry */
 8009114:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009116:	f106 0330 	add.w	r3, r6, #48	; 0x30
 800911a:	443b      	add	r3, r7
 800911c:	6223      	str	r3, [r4, #32]
	return FR_OK;
 800911e:	2000      	movs	r0, #0
}
 8009120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				dp->sect = 0; return FR_NO_FILE;
 8009124:	2300      	movs	r3, #0
 8009126:	61c3      	str	r3, [r0, #28]
 8009128:	2004      	movs	r0, #4
 800912a:	e7f9      	b.n	8009120 <dir_next+0x3c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800912c:	8973      	ldrh	r3, [r6, #10]
 800912e:	3b01      	subs	r3, #1
 8009130:	ea13 2955 	ands.w	r9, r3, r5, lsr #9
 8009134:	d1ee      	bne.n	8009114 <dir_next+0x30>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009136:	f7ff fe72 	bl	8008e1e <get_fat>
 800913a:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800913c:	2801      	cmp	r0, #1
 800913e:	d949      	bls.n	80091d4 <dir_next+0xf0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009140:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009144:	d048      	beq.n	80091d8 <dir_next+0xf4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009146:	6973      	ldr	r3, [r6, #20]
 8009148:	4283      	cmp	r3, r0
 800914a:	d837      	bhi.n	80091bc <dir_next+0xd8>
					if (!stretch) {								/* If no stretch, report EOT */
 800914c:	f1b8 0f00 	cmp.w	r8, #0
 8009150:	d011      	beq.n	8009176 <dir_next+0x92>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009152:	69a1      	ldr	r1, [r4, #24]
 8009154:	4620      	mov	r0, r4
 8009156:	f7ff ff20 	bl	8008f9a <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800915a:	4682      	mov	sl, r0
 800915c:	2800      	cmp	r0, #0
 800915e:	d03d      	beq.n	80091dc <dir_next+0xf8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009160:	2801      	cmp	r0, #1
 8009162:	d03d      	beq.n	80091e0 <dir_next+0xfc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009164:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009168:	d03c      	beq.n	80091e4 <dir_next+0x100>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800916a:	4630      	mov	r0, r6
 800916c:	f7ff fbcf 	bl	800890e <sync_window>
 8009170:	b128      	cbz	r0, 800917e <dir_next+0x9a>
 8009172:	2001      	movs	r0, #1
 8009174:	e7d4      	b.n	8009120 <dir_next+0x3c>
						dp->sect = 0; return FR_NO_FILE;
 8009176:	2300      	movs	r3, #0
 8009178:	61e3      	str	r3, [r4, #28]
 800917a:	2004      	movs	r0, #4
 800917c:	e7d0      	b.n	8009120 <dir_next+0x3c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800917e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009182:	2100      	movs	r1, #0
 8009184:	f106 0030 	add.w	r0, r6, #48	; 0x30
 8009188:	f7ff f9d4 	bl	8008534 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800918c:	4651      	mov	r1, sl
 800918e:	4630      	mov	r0, r6
 8009190:	f7ff fac6 	bl	8008720 <clust2sect>
 8009194:	62f0      	str	r0, [r6, #44]	; 0x2c
 8009196:	8973      	ldrh	r3, [r6, #10]
 8009198:	4599      	cmp	r9, r3
 800919a:	d20b      	bcs.n	80091b4 <dir_next+0xd0>
						fs->wflag = 1;
 800919c:	2301      	movs	r3, #1
 800919e:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80091a0:	4630      	mov	r0, r6
 80091a2:	f7ff fbb4 	bl	800890e <sync_window>
 80091a6:	b9f8      	cbnz	r0, 80091e8 <dir_next+0x104>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80091a8:	f109 0901 	add.w	r9, r9, #1
 80091ac:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80091ae:	3301      	adds	r3, #1
 80091b0:	62f3      	str	r3, [r6, #44]	; 0x2c
 80091b2:	e7f0      	b.n	8009196 <dir_next+0xb2>
					fs->winsect -= n;							/* Restore window offset */
 80091b4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80091b6:	eba3 0309 	sub.w	r3, r3, r9
 80091ba:	62f3      	str	r3, [r6, #44]	; 0x2c
				dp->clust = clst;		/* Initialize data for new cluster */
 80091bc:	f8c4 a018 	str.w	sl, [r4, #24]
				dp->sect = clust2sect(fs, clst);
 80091c0:	4651      	mov	r1, sl
 80091c2:	4630      	mov	r0, r6
 80091c4:	f7ff faac 	bl	8008720 <clust2sect>
 80091c8:	61e0      	str	r0, [r4, #28]
 80091ca:	e7a3      	b.n	8009114 <dir_next+0x30>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80091cc:	2004      	movs	r0, #4
 80091ce:	e7a7      	b.n	8009120 <dir_next+0x3c>
 80091d0:	2004      	movs	r0, #4
 80091d2:	e7a5      	b.n	8009120 <dir_next+0x3c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80091d4:	2002      	movs	r0, #2
 80091d6:	e7a3      	b.n	8009120 <dir_next+0x3c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80091d8:	2001      	movs	r0, #1
 80091da:	e7a1      	b.n	8009120 <dir_next+0x3c>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80091dc:	2007      	movs	r0, #7
 80091de:	e79f      	b.n	8009120 <dir_next+0x3c>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80091e0:	2002      	movs	r0, #2
 80091e2:	e79d      	b.n	8009120 <dir_next+0x3c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80091e4:	2001      	movs	r0, #1
 80091e6:	e79b      	b.n	8009120 <dir_next+0x3c>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80091e8:	2001      	movs	r0, #1
 80091ea:	e799      	b.n	8009120 <dir_next+0x3c>

080091ec <dir_find>:
{
 80091ec:	b570      	push	{r4, r5, r6, lr}
 80091ee:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 80091f0:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80091f2:	2100      	movs	r1, #0
 80091f4:	f7ff fe7b 	bl	8008eee <dir_sdi>
	if (res != FR_OK) return res;
 80091f8:	4605      	mov	r5, r0
 80091fa:	b140      	cbz	r0, 800920e <dir_find+0x22>
}
 80091fc:	4628      	mov	r0, r5
 80091fe:	bd70      	pop	{r4, r5, r6, pc}
		res = dir_next(dp, 0);	/* Next entry */
 8009200:	2100      	movs	r1, #0
 8009202:	4620      	mov	r0, r4
 8009204:	f7ff ff6e 	bl	80090e4 <dir_next>
	} while (res == FR_OK);
 8009208:	4605      	mov	r5, r0
 800920a:	2800      	cmp	r0, #0
 800920c:	d1f6      	bne.n	80091fc <dir_find+0x10>
		res = move_window(fs, dp->sect);
 800920e:	69e1      	ldr	r1, [r4, #28]
 8009210:	4630      	mov	r0, r6
 8009212:	f7ff fba5 	bl	8008960 <move_window>
		if (res != FR_OK) break;
 8009216:	4605      	mov	r5, r0
 8009218:	2800      	cmp	r0, #0
 800921a:	d1ef      	bne.n	80091fc <dir_find+0x10>
		c = dp->dir[DIR_Name];
 800921c:	6a20      	ldr	r0, [r4, #32]
 800921e:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009220:	b17b      	cbz	r3, 8009242 <dir_find+0x56>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009222:	7ac3      	ldrb	r3, [r0, #11]
 8009224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009228:	71a3      	strb	r3, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800922a:	7ac3      	ldrb	r3, [r0, #11]
 800922c:	f013 0f08 	tst.w	r3, #8
 8009230:	d1e6      	bne.n	8009200 <dir_find+0x14>
 8009232:	220b      	movs	r2, #11
 8009234:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8009238:	f7ff f981 	bl	800853e <mem_cmp>
 800923c:	2800      	cmp	r0, #0
 800923e:	d1df      	bne.n	8009200 <dir_find+0x14>
 8009240:	e7dc      	b.n	80091fc <dir_find+0x10>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009242:	2504      	movs	r5, #4
 8009244:	e7da      	b.n	80091fc <dir_find+0x10>

08009246 <follow_path>:
{
 8009246:	b530      	push	{r4, r5, lr}
 8009248:	b083      	sub	sp, #12
 800924a:	4604      	mov	r4, r0
 800924c:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 800924e:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009250:	e001      	b.n	8009256 <follow_path+0x10>
 8009252:	3301      	adds	r3, #1
 8009254:	9301      	str	r3, [sp, #4]
 8009256:	9b01      	ldr	r3, [sp, #4]
 8009258:	781a      	ldrb	r2, [r3, #0]
 800925a:	2a2f      	cmp	r2, #47	; 0x2f
 800925c:	d0f9      	beq.n	8009252 <follow_path+0xc>
 800925e:	2a5c      	cmp	r2, #92	; 0x5c
 8009260:	d0f7      	beq.n	8009252 <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 8009262:	2200      	movs	r2, #0
 8009264:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	2b1f      	cmp	r3, #31
 800926a:	d81b      	bhi.n	80092a4 <follow_path+0x5e>
		dp->fn[NSFLAG] = NS_NONAME;
 800926c:	2380      	movs	r3, #128	; 0x80
 800926e:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009272:	4611      	mov	r1, r2
 8009274:	4620      	mov	r0, r4
 8009276:	f7ff fe3a 	bl	8008eee <dir_sdi>
 800927a:	4603      	mov	r3, r0
}
 800927c:	4618      	mov	r0, r3
 800927e:	b003      	add	sp, #12
 8009280:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009282:	2804      	cmp	r0, #4
 8009284:	d1fa      	bne.n	800927c <follow_path+0x36>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009286:	f012 0f04 	tst.w	r2, #4
 800928a:	d1f7      	bne.n	800927c <follow_path+0x36>
 800928c:	2305      	movs	r3, #5
 800928e:	e7f5      	b.n	800927c <follow_path+0x36>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009290:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8009294:	6963      	ldr	r3, [r4, #20]
 8009296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800929a:	4419      	add	r1, r3
 800929c:	4628      	mov	r0, r5
 800929e:	f7ff fa5c 	bl	800875a <ld_clust>
 80092a2:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80092a4:	a901      	add	r1, sp, #4
 80092a6:	4620      	mov	r0, r4
 80092a8:	f7ff fa7e 	bl	80087a8 <create_name>
			if (res != FR_OK) break;
 80092ac:	4603      	mov	r3, r0
 80092ae:	2800      	cmp	r0, #0
 80092b0:	d1e4      	bne.n	800927c <follow_path+0x36>
			res = dir_find(dp);				/* Find an object with the segment name */
 80092b2:	4620      	mov	r0, r4
 80092b4:	f7ff ff9a 	bl	80091ec <dir_find>
			ns = dp->fn[NSFLAG];
 80092b8:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 80092bc:	4603      	mov	r3, r0
 80092be:	2800      	cmp	r0, #0
 80092c0:	d1df      	bne.n	8009282 <follow_path+0x3c>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80092c2:	f012 0f04 	tst.w	r2, #4
 80092c6:	d1d9      	bne.n	800927c <follow_path+0x36>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80092c8:	79a3      	ldrb	r3, [r4, #6]
 80092ca:	f013 0f10 	tst.w	r3, #16
 80092ce:	d1df      	bne.n	8009290 <follow_path+0x4a>
				res = FR_NO_PATH; break;
 80092d0:	2305      	movs	r3, #5
 80092d2:	e7d3      	b.n	800927c <follow_path+0x36>

080092d4 <dir_alloc>:
{
 80092d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092d6:	4604      	mov	r4, r0
 80092d8:	460e      	mov	r6, r1
	FATFS *fs = dp->obj.fs;
 80092da:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);
 80092dc:	2100      	movs	r1, #0
 80092de:	f7ff fe06 	bl	8008eee <dir_sdi>
	if (res == FR_OK) {
 80092e2:	4602      	mov	r2, r0
 80092e4:	b9c0      	cbnz	r0, 8009318 <dir_alloc+0x44>
		n = 0;
 80092e6:	2500      	movs	r5, #0
 80092e8:	e008      	b.n	80092fc <dir_alloc+0x28>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80092ea:	3501      	adds	r5, #1
 80092ec:	42b5      	cmp	r5, r6
 80092ee:	d013      	beq.n	8009318 <dir_alloc+0x44>
			res = dir_next(dp, 1);
 80092f0:	2101      	movs	r1, #1
 80092f2:	4620      	mov	r0, r4
 80092f4:	f7ff fef6 	bl	80090e4 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80092f8:	4602      	mov	r2, r0
 80092fa:	b968      	cbnz	r0, 8009318 <dir_alloc+0x44>
			res = move_window(fs, dp->sect);
 80092fc:	69e1      	ldr	r1, [r4, #28]
 80092fe:	4638      	mov	r0, r7
 8009300:	f7ff fb2e 	bl	8008960 <move_window>
			if (res != FR_OK) break;
 8009304:	4602      	mov	r2, r0
 8009306:	b938      	cbnz	r0, 8009318 <dir_alloc+0x44>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009308:	6a23      	ldr	r3, [r4, #32]
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	2be5      	cmp	r3, #229	; 0xe5
 800930e:	d0ec      	beq.n	80092ea <dir_alloc+0x16>
 8009310:	2b00      	cmp	r3, #0
 8009312:	d0ea      	beq.n	80092ea <dir_alloc+0x16>
				n = 0;					/* Not a blank entry. Restart to search */
 8009314:	2500      	movs	r5, #0
 8009316:	e7eb      	b.n	80092f0 <dir_alloc+0x1c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009318:	2a04      	cmp	r2, #4
 800931a:	d001      	beq.n	8009320 <dir_alloc+0x4c>
}
 800931c:	4610      	mov	r0, r2
 800931e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009320:	2207      	movs	r2, #7
 8009322:	e7fb      	b.n	800931c <dir_alloc+0x48>

08009324 <dir_register>:
{
 8009324:	b570      	push	{r4, r5, r6, lr}
 8009326:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8009328:	6806      	ldr	r6, [r0, #0]
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800932a:	2101      	movs	r1, #1
 800932c:	f7ff ffd2 	bl	80092d4 <dir_alloc>
	if (res == FR_OK) {
 8009330:	4605      	mov	r5, r0
 8009332:	b108      	cbz	r0, 8009338 <dir_register+0x14>
}
 8009334:	4628      	mov	r0, r5
 8009336:	bd70      	pop	{r4, r5, r6, pc}
		res = move_window(fs, dp->sect);
 8009338:	69e1      	ldr	r1, [r4, #28]
 800933a:	4630      	mov	r0, r6
 800933c:	f7ff fb10 	bl	8008960 <move_window>
		if (res == FR_OK) {
 8009340:	4605      	mov	r5, r0
 8009342:	2800      	cmp	r0, #0
 8009344:	d1f6      	bne.n	8009334 <dir_register+0x10>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009346:	2220      	movs	r2, #32
 8009348:	2100      	movs	r1, #0
 800934a:	6a20      	ldr	r0, [r4, #32]
 800934c:	f7ff f8f2 	bl	8008534 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009350:	220b      	movs	r2, #11
 8009352:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8009356:	6a20      	ldr	r0, [r4, #32]
 8009358:	f7ff f8e0 	bl	800851c <mem_cpy>
			fs->wflag = 1;
 800935c:	2301      	movs	r3, #1
 800935e:	70f3      	strb	r3, [r6, #3]
 8009360:	e7e8      	b.n	8009334 <dir_register+0x10>
	...

08009364 <sync_fs>:
{
 8009364:	b570      	push	{r4, r5, r6, lr}
 8009366:	4604      	mov	r4, r0
	res = sync_window(fs);
 8009368:	f7ff fad1 	bl	800890e <sync_window>
	if (res == FR_OK) {
 800936c:	4605      	mov	r5, r0
 800936e:	b948      	cbnz	r0, 8009384 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009370:	7823      	ldrb	r3, [r4, #0]
 8009372:	2b03      	cmp	r3, #3
 8009374:	d008      	beq.n	8009388 <sync_fs+0x24>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009376:	2200      	movs	r2, #0
 8009378:	4611      	mov	r1, r2
 800937a:	7860      	ldrb	r0, [r4, #1]
 800937c:	f7ff f8a4 	bl	80084c8 <disk_ioctl>
 8009380:	b100      	cbz	r0, 8009384 <sync_fs+0x20>
 8009382:	2501      	movs	r5, #1
}
 8009384:	4628      	mov	r0, r5
 8009386:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009388:	7923      	ldrb	r3, [r4, #4]
 800938a:	2b01      	cmp	r3, #1
 800938c:	d1f3      	bne.n	8009376 <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 800938e:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009392:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009396:	2100      	movs	r1, #0
 8009398:	4630      	mov	r0, r6
 800939a:	f7ff f8cb 	bl	8008534 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800939e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80093a2:	f204 202e 	addw	r0, r4, #558	; 0x22e
 80093a6:	f7ff f8ab 	bl	8008500 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80093aa:	490f      	ldr	r1, [pc, #60]	; (80093e8 <sync_fs+0x84>)
 80093ac:	4630      	mov	r0, r6
 80093ae:	f7ff f8ab 	bl	8008508 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80093b2:	490e      	ldr	r1, [pc, #56]	; (80093ec <sync_fs+0x88>)
 80093b4:	f504 7005 	add.w	r0, r4, #532	; 0x214
 80093b8:	f7ff f8a6 	bl	8008508 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80093bc:	6921      	ldr	r1, [r4, #16]
 80093be:	f504 7006 	add.w	r0, r4, #536	; 0x218
 80093c2:	f7ff f8a1 	bl	8008508 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80093c6:	68e1      	ldr	r1, [r4, #12]
 80093c8:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80093cc:	f7ff f89c 	bl	8008508 <st_dword>
			fs->winsect = fs->volbase + 1;
 80093d0:	69e2      	ldr	r2, [r4, #28]
 80093d2:	3201      	adds	r2, #1
 80093d4:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80093d6:	2301      	movs	r3, #1
 80093d8:	4631      	mov	r1, r6
 80093da:	7860      	ldrb	r0, [r4, #1]
 80093dc:	f7ff f868 	bl	80084b0 <disk_write>
			fs->fsi_flag = 0;
 80093e0:	2300      	movs	r3, #0
 80093e2:	7123      	strb	r3, [r4, #4]
 80093e4:	e7c7      	b.n	8009376 <sync_fs+0x12>
 80093e6:	bf00      	nop
 80093e8:	41615252 	.word	0x41615252
 80093ec:	61417272 	.word	0x61417272

080093f0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80093f0:	b570      	push	{r4, r5, r6, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	9001      	str	r0, [sp, #4]
 80093f6:	9100      	str	r1, [sp, #0]
 80093f8:	4616      	mov	r6, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80093fa:	9103      	str	r1, [sp, #12]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80093fc:	a803      	add	r0, sp, #12
 80093fe:	f7ff fa39 	bl	8008874 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8009402:	1e04      	subs	r4, r0, #0
 8009404:	db1c      	blt.n	8009440 <f_mount+0x50>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009406:	4b10      	ldr	r3, [pc, #64]	; (8009448 <f_mount+0x58>)
 8009408:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]

	if (cfs) {
 800940c:	b125      	cbz	r5, 8009418 <f_mount+0x28>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800940e:	4628      	mov	r0, r5
 8009410:	f7ff f968 	bl	80086e4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009414:	2300      	movs	r3, #0
 8009416:	702b      	strb	r3, [r5, #0]
	}

	if (fs) {
 8009418:	9b01      	ldr	r3, [sp, #4]
 800941a:	b10b      	cbz	r3, 8009420 <f_mount+0x30>
		fs->fs_type = 0;				/* Clear new fs object */
 800941c:	2200      	movs	r2, #0
 800941e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009420:	9b01      	ldr	r3, [sp, #4]
 8009422:	4a09      	ldr	r2, [pc, #36]	; (8009448 <f_mount+0x58>)
 8009424:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009428:	b163      	cbz	r3, 8009444 <f_mount+0x54>
 800942a:	2e01      	cmp	r6, #1
 800942c:	d002      	beq.n	8009434 <f_mount+0x44>
 800942e:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8009430:	b004      	add	sp, #16
 8009432:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009434:	2200      	movs	r2, #0
 8009436:	a901      	add	r1, sp, #4
 8009438:	4668      	mov	r0, sp
 800943a:	f7ff fae9 	bl	8008a10 <find_volume>
	LEAVE_FF(fs, res);
 800943e:	e7f7      	b.n	8009430 <f_mount+0x40>
	if (vol < 0) return FR_INVALID_DRIVE;
 8009440:	200b      	movs	r0, #11
 8009442:	e7f5      	b.n	8009430 <f_mount+0x40>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009444:	2000      	movs	r0, #0
 8009446:	e7f3      	b.n	8009430 <f_mount+0x40>
 8009448:	20000370 	.word	0x20000370

0800944c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800944c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009450:	b091      	sub	sp, #68	; 0x44
 8009452:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009454:	2800      	cmp	r0, #0
 8009456:	f000 810a 	beq.w	800966e <f_open+0x222>
 800945a:	4615      	mov	r5, r2
 800945c:	4606      	mov	r6, r0

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800945e:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8009462:	463a      	mov	r2, r7
 8009464:	a903      	add	r1, sp, #12
 8009466:	a801      	add	r0, sp, #4
 8009468:	f7ff fad2 	bl	8008a10 <find_volume>
	if (res == FR_OK) {
 800946c:	4604      	mov	r4, r0
 800946e:	b130      	cbz	r0, 800947e <f_open+0x32>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009470:	b10c      	cbz	r4, 8009476 <f_open+0x2a>
 8009472:	2300      	movs	r3, #0
 8009474:	6033      	str	r3, [r6, #0]

	LEAVE_FF(fs, res);
}
 8009476:	4620      	mov	r0, r4
 8009478:	b011      	add	sp, #68	; 0x44
 800947a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 800947e:	9b03      	ldr	r3, [sp, #12]
 8009480:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8009482:	9901      	ldr	r1, [sp, #4]
 8009484:	a804      	add	r0, sp, #16
 8009486:	f7ff fede 	bl	8009246 <follow_path>
		if (res == FR_OK) {
 800948a:	4604      	mov	r4, r0
 800948c:	b960      	cbnz	r0, 80094a8 <f_open+0x5c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800948e:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 8009492:	2b00      	cmp	r3, #0
 8009494:	db50      	blt.n	8009538 <f_open+0xec>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009496:	f037 0301 	bics.w	r3, r7, #1
 800949a:	bf14      	ite	ne
 800949c:	2101      	movne	r1, #1
 800949e:	2100      	moveq	r1, #0
 80094a0:	a804      	add	r0, sp, #16
 80094a2:	f7ff f863 	bl	800856c <chk_lock>
 80094a6:	4604      	mov	r4, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80094a8:	f015 0f1c 	tst.w	r5, #28
 80094ac:	d05a      	beq.n	8009564 <f_open+0x118>
			if (res != FR_OK) {					/* No file, create new */
 80094ae:	2c00      	cmp	r4, #0
 80094b0:	d04e      	beq.n	8009550 <f_open+0x104>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80094b2:	2c04      	cmp	r4, #4
 80094b4:	d042      	beq.n	800953c <f_open+0xf0>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80094b6:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80094ba:	2c00      	cmp	r4, #0
 80094bc:	d161      	bne.n	8009582 <f_open+0x136>
 80094be:	f017 0f08 	tst.w	r7, #8
 80094c2:	d05e      	beq.n	8009582 <f_open+0x136>
				dw = GET_FATTIME();
 80094c4:	f001 f9e8 	bl	800a898 <get_fattime>
 80094c8:	4605      	mov	r5, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80094ca:	4601      	mov	r1, r0
 80094cc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80094ce:	300e      	adds	r0, #14
 80094d0:	f7ff f81a 	bl	8008508 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80094d4:	4629      	mov	r1, r5
 80094d6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80094d8:	3016      	adds	r0, #22
 80094da:	f7ff f815 	bl	8008508 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80094de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094e0:	2220      	movs	r2, #32
 80094e2:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80094e4:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80094e8:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80094ec:	4649      	mov	r1, r9
 80094ee:	4640      	mov	r0, r8
 80094f0:	f7ff f933 	bl	800875a <ld_clust>
 80094f4:	4605      	mov	r5, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80094f6:	2200      	movs	r2, #0
 80094f8:	4649      	mov	r1, r9
 80094fa:	4640      	mov	r0, r8
 80094fc:	f7ff f940 	bl	8008780 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009500:	2100      	movs	r1, #0
 8009502:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009504:	301c      	adds	r0, #28
 8009506:	f7fe ffff 	bl	8008508 <st_dword>
					fs->wflag = 1;
 800950a:	9b03      	ldr	r3, [sp, #12]
 800950c:	2201      	movs	r2, #1
 800950e:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8009510:	b3bd      	cbz	r5, 8009582 <f_open+0x136>
						dw = fs->winsect;
 8009512:	9b03      	ldr	r3, [sp, #12]
 8009514:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 8009518:	2200      	movs	r2, #0
 800951a:	4629      	mov	r1, r5
 800951c:	a804      	add	r0, sp, #16
 800951e:	f7ff fda2 	bl	8009066 <remove_chain>
						if (res == FR_OK) {
 8009522:	4604      	mov	r4, r0
 8009524:	bb68      	cbnz	r0, 8009582 <f_open+0x136>
							res = move_window(fs, dw);
 8009526:	4641      	mov	r1, r8
 8009528:	9803      	ldr	r0, [sp, #12]
 800952a:	f7ff fa19 	bl	8008960 <move_window>
 800952e:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009530:	3d01      	subs	r5, #1
 8009532:	9b03      	ldr	r3, [sp, #12]
 8009534:	60dd      	str	r5, [r3, #12]
 8009536:	e024      	b.n	8009582 <f_open+0x136>
				res = FR_INVALID_NAME;
 8009538:	2406      	movs	r4, #6
 800953a:	e7b5      	b.n	80094a8 <f_open+0x5c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800953c:	f7ff f850 	bl	80085e0 <enq_lock>
 8009540:	b908      	cbnz	r0, 8009546 <f_open+0xfa>
 8009542:	2412      	movs	r4, #18
 8009544:	e7b7      	b.n	80094b6 <f_open+0x6a>
 8009546:	a804      	add	r0, sp, #16
 8009548:	f7ff feec 	bl	8009324 <dir_register>
 800954c:	4604      	mov	r4, r0
 800954e:	e7b2      	b.n	80094b6 <f_open+0x6a>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009550:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8009554:	f013 0f11 	tst.w	r3, #17
 8009558:	d112      	bne.n	8009580 <f_open+0x134>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800955a:	f015 0f04 	tst.w	r5, #4
 800955e:	d0ac      	beq.n	80094ba <f_open+0x6e>
 8009560:	2408      	movs	r4, #8
 8009562:	e00e      	b.n	8009582 <f_open+0x136>
			if (res == FR_OK) {					/* Following succeeded */
 8009564:	b96c      	cbnz	r4, 8009582 <f_open+0x136>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009566:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800956a:	f013 0f10 	tst.w	r3, #16
 800956e:	d14c      	bne.n	800960a <f_open+0x1be>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009570:	f015 0f02 	tst.w	r5, #2
 8009574:	d005      	beq.n	8009582 <f_open+0x136>
 8009576:	f013 0f01 	tst.w	r3, #1
 800957a:	d002      	beq.n	8009582 <f_open+0x136>
						res = FR_DENIED;
 800957c:	2407      	movs	r4, #7
 800957e:	e016      	b.n	80095ae <f_open+0x162>
					res = FR_DENIED;
 8009580:	2407      	movs	r4, #7
		if (res == FR_OK) {
 8009582:	b9a4      	cbnz	r4, 80095ae <f_open+0x162>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009584:	f017 0f08 	tst.w	r7, #8
 8009588:	d001      	beq.n	800958e <f_open+0x142>
				mode |= FA_MODIFIED;
 800958a:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800958e:	9b03      	ldr	r3, [sp, #12]
 8009590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009592:	6273      	str	r3, [r6, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009594:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009596:	62b3      	str	r3, [r6, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009598:	f037 0301 	bics.w	r3, r7, #1
 800959c:	bf14      	ite	ne
 800959e:	2101      	movne	r1, #1
 80095a0:	2100      	moveq	r1, #0
 80095a2:	a804      	add	r0, sp, #16
 80095a4:	f7ff f82c 	bl	8008600 <inc_lock>
 80095a8:	6130      	str	r0, [r6, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80095aa:	2800      	cmp	r0, #0
 80095ac:	d05d      	beq.n	800966a <f_open+0x21e>
		if (res == FR_OK) {
 80095ae:	2c00      	cmp	r4, #0
 80095b0:	f47f af5e 	bne.w	8009470 <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80095b4:	9d03      	ldr	r5, [sp, #12]
 80095b6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80095ba:	4641      	mov	r1, r8
 80095bc:	4628      	mov	r0, r5
 80095be:	f7ff f8cc 	bl	800875a <ld_clust>
 80095c2:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80095c4:	f108 001c 	add.w	r0, r8, #28
 80095c8:	f7fe ff8f 	bl	80084ea <ld_dword>
 80095cc:	60f0      	str	r0, [r6, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 80095ce:	2100      	movs	r1, #0
 80095d0:	62f1      	str	r1, [r6, #44]	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 80095d2:	6035      	str	r5, [r6, #0]
			fp->obj.id = fs->id;
 80095d4:	88eb      	ldrh	r3, [r5, #6]
 80095d6:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
 80095d8:	7537      	strb	r7, [r6, #20]
			fp->err = 0;			/* Clear error flag */
 80095da:	7571      	strb	r1, [r6, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80095dc:	6231      	str	r1, [r6, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80095de:	61b1      	str	r1, [r6, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80095e0:	f106 0830 	add.w	r8, r6, #48	; 0x30
 80095e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095e8:	4640      	mov	r0, r8
 80095ea:	f7fe ffa3 	bl	8008534 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80095ee:	f017 0f20 	tst.w	r7, #32
 80095f2:	f43f af3d 	beq.w	8009470 <f_open+0x24>
 80095f6:	68f5      	ldr	r5, [r6, #12]
 80095f8:	2d00      	cmp	r5, #0
 80095fa:	f43f af39 	beq.w	8009470 <f_open+0x24>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80095fe:	61b5      	str	r5, [r6, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009600:	9b03      	ldr	r3, [sp, #12]
 8009602:	895f      	ldrh	r7, [r3, #10]
 8009604:	027f      	lsls	r7, r7, #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009606:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009608:	e005      	b.n	8009616 <f_open+0x1ca>
					res = FR_NO_FILE;
 800960a:	2404      	movs	r4, #4
 800960c:	e7cf      	b.n	80095ae <f_open+0x162>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800960e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009612:	d00b      	beq.n	800962c <f_open+0x1e0>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009614:	1bed      	subs	r5, r5, r7
 8009616:	b95c      	cbnz	r4, 8009630 <f_open+0x1e4>
 8009618:	42bd      	cmp	r5, r7
 800961a:	d909      	bls.n	8009630 <f_open+0x1e4>
					clst = get_fat(&fp->obj, clst);
 800961c:	4630      	mov	r0, r6
 800961e:	f7ff fbfe 	bl	8008e1e <get_fat>
 8009622:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8009624:	2801      	cmp	r0, #1
 8009626:	d8f2      	bhi.n	800960e <f_open+0x1c2>
 8009628:	2402      	movs	r4, #2
 800962a:	e7f0      	b.n	800960e <f_open+0x1c2>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800962c:	2401      	movs	r4, #1
 800962e:	e7f1      	b.n	8009614 <f_open+0x1c8>
				fp->clust = clst;
 8009630:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009632:	2c00      	cmp	r4, #0
 8009634:	f47f af1c 	bne.w	8009470 <f_open+0x24>
 8009638:	f3c5 0308 	ubfx	r3, r5, #0, #9
 800963c:	2b00      	cmp	r3, #0
 800963e:	f43f af17 	beq.w	8009470 <f_open+0x24>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009642:	9f03      	ldr	r7, [sp, #12]
 8009644:	4638      	mov	r0, r7
 8009646:	f7ff f86b 	bl	8008720 <clust2sect>
 800964a:	b908      	cbnz	r0, 8009650 <f_open+0x204>
						res = FR_INT_ERR;
 800964c:	2402      	movs	r4, #2
 800964e:	e710      	b.n	8009472 <f_open+0x26>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009650:	eb00 2255 	add.w	r2, r0, r5, lsr #9
 8009654:	6232      	str	r2, [r6, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009656:	2301      	movs	r3, #1
 8009658:	4641      	mov	r1, r8
 800965a:	7878      	ldrb	r0, [r7, #1]
 800965c:	f7fe ff1c 	bl	8008498 <disk_read>
 8009660:	2800      	cmp	r0, #0
 8009662:	f43f af05 	beq.w	8009470 <f_open+0x24>
 8009666:	2401      	movs	r4, #1
 8009668:	e703      	b.n	8009472 <f_open+0x26>
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800966a:	2402      	movs	r4, #2
 800966c:	e700      	b.n	8009470 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 800966e:	2409      	movs	r4, #9
 8009670:	e701      	b.n	8009476 <f_open+0x2a>

08009672 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009672:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009676:	b085      	sub	sp, #20
 8009678:	4604      	mov	r4, r0
 800967a:	460e      	mov	r6, r1
 800967c:	4615      	mov	r5, r2
 800967e:	4698      	mov	r8, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8009680:	2300      	movs	r3, #0
 8009682:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009686:	9001      	str	r0, [sp, #4]
 8009688:	a903      	add	r1, sp, #12
 800968a:	f7ff f91d 	bl	80088c8 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800968e:	9000      	str	r0, [sp, #0]
 8009690:	2800      	cmp	r0, #0
 8009692:	d14a      	bne.n	800972a <f_write+0xb8>
 8009694:	7d63      	ldrb	r3, [r4, #21]
 8009696:	9300      	str	r3, [sp, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d146      	bne.n	800972a <f_write+0xb8>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800969c:	7d23      	ldrb	r3, [r4, #20]
 800969e:	f013 0f02 	tst.w	r3, #2
 80096a2:	f000 80e3 	beq.w	800986c <f_write+0x1fa>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80096a6:	69a3      	ldr	r3, [r4, #24]
 80096a8:	42eb      	cmn	r3, r5
 80096aa:	f0c0 80b1 	bcc.w	8009810 <f_write+0x19e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80096ae:	43dd      	mvns	r5, r3
 80096b0:	e0ae      	b.n	8009810 <f_write+0x19e>
					if (clst == 0) {		/* If no cluster is allocated, */
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80096b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d03c      	beq.n	8009732 <f_write+0xc0>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80096b8:	4620      	mov	r0, r4
 80096ba:	f7ff f83d 	bl	8008738 <clmt_clust>
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80096be:	2800      	cmp	r0, #0
 80096c0:	f000 80cf 	beq.w	8009862 <f_write+0x1f0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80096c4:	2801      	cmp	r0, #1
 80096c6:	d039      	beq.n	800973c <f_write+0xca>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80096c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80096cc:	d03d      	beq.n	800974a <f_write+0xd8>
				fp->clust = clst;			/* Update current cluster */
 80096ce:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80096d0:	68a3      	ldr	r3, [r4, #8]
 80096d2:	b903      	cbnz	r3, 80096d6 <f_write+0x64>
 80096d4:	60a0      	str	r0, [r4, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80096d6:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	db3c      	blt.n	8009758 <f_write+0xe6>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80096de:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80096e2:	69e1      	ldr	r1, [r4, #28]
 80096e4:	4658      	mov	r0, fp
 80096e6:	f7ff f81b 	bl	8008720 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 80096ea:	4681      	mov	r9, r0
 80096ec:	2800      	cmp	r0, #0
 80096ee:	d048      	beq.n	8009782 <f_write+0x110>
			sect += csect;
 80096f0:	44b9      	add	r9, r7
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80096f2:	ea4f 2a55 	mov.w	sl, r5, lsr #9
			if (cc) {						/* Write maximum contiguous sectors directly */
 80096f6:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80096fa:	d35e      	bcc.n	80097ba <f_write+0x148>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80096fc:	eb07 030a 	add.w	r3, r7, sl
 8009700:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 8009704:	4293      	cmp	r3, r2
 8009706:	d901      	bls.n	800970c <f_write+0x9a>
					cc = fs->csize - csect;
 8009708:	eba2 0a07 	sub.w	sl, r2, r7
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800970c:	4653      	mov	r3, sl
 800970e:	464a      	mov	r2, r9
 8009710:	4631      	mov	r1, r6
 8009712:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8009716:	f7fe fecb 	bl	80084b0 <disk_write>
 800971a:	2800      	cmp	r0, #0
 800971c:	d038      	beq.n	8009790 <f_write+0x11e>
 800971e:	f04f 0a01 	mov.w	sl, #1
 8009722:	f884 a015 	strb.w	sl, [r4, #21]
 8009726:	f8cd a000 	str.w	sl, [sp]
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 800972a:	9800      	ldr	r0, [sp, #0]
 800972c:	b005      	add	sp, #20
 800972e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009732:	69e1      	ldr	r1, [r4, #28]
 8009734:	9801      	ldr	r0, [sp, #4]
 8009736:	f7ff fc30 	bl	8008f9a <create_chain>
 800973a:	e7c0      	b.n	80096be <f_write+0x4c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800973c:	f04f 0a02 	mov.w	sl, #2
 8009740:	f884 a015 	strb.w	sl, [r4, #21]
 8009744:	f8cd a000 	str.w	sl, [sp]
 8009748:	e7ef      	b.n	800972a <f_write+0xb8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800974a:	f04f 0a01 	mov.w	sl, #1
 800974e:	f884 a015 	strb.w	sl, [r4, #21]
 8009752:	f8cd a000 	str.w	sl, [sp]
 8009756:	e7e8      	b.n	800972a <f_write+0xb8>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009758:	2301      	movs	r3, #1
 800975a:	6a22      	ldr	r2, [r4, #32]
 800975c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8009760:	9803      	ldr	r0, [sp, #12]
 8009762:	7840      	ldrb	r0, [r0, #1]
 8009764:	f7fe fea4 	bl	80084b0 <disk_write>
 8009768:	b920      	cbnz	r0, 8009774 <f_write+0x102>
				fp->flag &= (BYTE)~FA_DIRTY;
 800976a:	7d23      	ldrb	r3, [r4, #20]
 800976c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009770:	7523      	strb	r3, [r4, #20]
 8009772:	e7b4      	b.n	80096de <f_write+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009774:	f04f 0a01 	mov.w	sl, #1
 8009778:	f884 a015 	strb.w	sl, [r4, #21]
 800977c:	f8cd a000 	str.w	sl, [sp]
 8009780:	e7d3      	b.n	800972a <f_write+0xb8>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009782:	f04f 0a02 	mov.w	sl, #2
 8009786:	f884 a015 	strb.w	sl, [r4, #21]
 800978a:	f8cd a000 	str.w	sl, [sp]
 800978e:	e7cc      	b.n	800972a <f_write+0xb8>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009790:	6a21      	ldr	r1, [r4, #32]
 8009792:	eba1 0109 	sub.w	r1, r1, r9
 8009796:	4551      	cmp	r1, sl
 8009798:	d302      	bcc.n	80097a0 <f_write+0x12e>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800979a:	ea4f 274a 	mov.w	r7, sl, lsl #9
				continue;
 800979e:	e028      	b.n	80097f2 <f_write+0x180>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80097a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097a4:	eb06 2141 	add.w	r1, r6, r1, lsl #9
 80097a8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80097ac:	f7fe feb6 	bl	800851c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80097b0:	7d23      	ldrb	r3, [r4, #20]
 80097b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097b6:	7523      	strb	r3, [r4, #20]
 80097b8:	e7ef      	b.n	800979a <f_write+0x128>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80097ba:	6a23      	ldr	r3, [r4, #32]
 80097bc:	454b      	cmp	r3, r9
 80097be:	d003      	beq.n	80097c8 <f_write+0x156>
				fp->fptr < fp->obj.objsize &&
 80097c0:	69a2      	ldr	r2, [r4, #24]
 80097c2:	68e3      	ldr	r3, [r4, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d33b      	bcc.n	8009840 <f_write+0x1ce>
			fp->sect = sect;
 80097c8:	f8c4 9020 	str.w	r9, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80097cc:	69a3      	ldr	r3, [r4, #24]
 80097ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097d2:	f5c3 7700 	rsb	r7, r3, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80097d6:	42bd      	cmp	r5, r7
 80097d8:	d200      	bcs.n	80097dc <f_write+0x16a>
 80097da:	462f      	mov	r7, r5
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80097dc:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80097e0:	463a      	mov	r2, r7
 80097e2:	4631      	mov	r1, r6
 80097e4:	4418      	add	r0, r3
 80097e6:	f7fe fe99 	bl	800851c <mem_cpy>
		fp->flag |= FA_DIRTY;
 80097ea:	7d23      	ldrb	r3, [r4, #20]
 80097ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80097f0:	7523      	strb	r3, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80097f2:	443e      	add	r6, r7
 80097f4:	69a3      	ldr	r3, [r4, #24]
 80097f6:	443b      	add	r3, r7
 80097f8:	61a3      	str	r3, [r4, #24]
 80097fa:	68e2      	ldr	r2, [r4, #12]
 80097fc:	4293      	cmp	r3, r2
 80097fe:	bf38      	it	cc
 8009800:	4613      	movcc	r3, r2
 8009802:	60e3      	str	r3, [r4, #12]
 8009804:	f8d8 3000 	ldr.w	r3, [r8]
 8009808:	443b      	add	r3, r7
 800980a:	f8c8 3000 	str.w	r3, [r8]
 800980e:	1bed      	subs	r5, r5, r7
	for ( ;  btw;							/* Repeat until all data written */
 8009810:	b33d      	cbz	r5, 8009862 <f_write+0x1f0>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009812:	69a1      	ldr	r1, [r4, #24]
 8009814:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8009818:	2b00      	cmp	r3, #0
 800981a:	d1d7      	bne.n	80097cc <f_write+0x15a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800981c:	9b03      	ldr	r3, [sp, #12]
 800981e:	895f      	ldrh	r7, [r3, #10]
 8009820:	3f01      	subs	r7, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8009822:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
 8009826:	f47f af56 	bne.w	80096d6 <f_write+0x64>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800982a:	2900      	cmp	r1, #0
 800982c:	f47f af41 	bne.w	80096b2 <f_write+0x40>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009830:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8009832:	2800      	cmp	r0, #0
 8009834:	f47f af43 	bne.w	80096be <f_write+0x4c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009838:	9801      	ldr	r0, [sp, #4]
 800983a:	f7ff fbae 	bl	8008f9a <create_chain>
 800983e:	e73e      	b.n	80096be <f_write+0x4c>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009840:	2301      	movs	r3, #1
 8009842:	464a      	mov	r2, r9
 8009844:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8009848:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800984c:	f7fe fe24 	bl	8008498 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8009850:	2800      	cmp	r0, #0
 8009852:	d0b9      	beq.n	80097c8 <f_write+0x156>
					ABORT(fs, FR_DISK_ERR);
 8009854:	f04f 0a01 	mov.w	sl, #1
 8009858:	f884 a015 	strb.w	sl, [r4, #21]
 800985c:	f8cd a000 	str.w	sl, [sp]
 8009860:	e763      	b.n	800972a <f_write+0xb8>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009862:	7d23      	ldrb	r3, [r4, #20]
 8009864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009868:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 800986a:	e75e      	b.n	800972a <f_write+0xb8>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800986c:	2307      	movs	r3, #7
 800986e:	9300      	str	r3, [sp, #0]
 8009870:	e75b      	b.n	800972a <f_write+0xb8>

08009872 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009872:	b570      	push	{r4, r5, r6, lr}
 8009874:	b082      	sub	sp, #8
 8009876:	4604      	mov	r4, r0
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009878:	a901      	add	r1, sp, #4
 800987a:	f7ff f825 	bl	80088c8 <validate>
	if (res == FR_OK) {
 800987e:	b970      	cbnz	r0, 800989e <f_sync+0x2c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009880:	7d23      	ldrb	r3, [r4, #20]
 8009882:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009886:	d00a      	beq.n	800989e <f_sync+0x2c>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009888:	f013 0f80 	tst.w	r3, #128	; 0x80
 800988c:	d109      	bne.n	80098a2 <f_sync+0x30>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800988e:	f001 f803 	bl	800a898 <get_fattime>
 8009892:	4605      	mov	r5, r0
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009894:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009896:	9801      	ldr	r0, [sp, #4]
 8009898:	f7ff f862 	bl	8008960 <move_window>
				if (res == FR_OK) {
 800989c:	b178      	cbz	r0, 80098be <f_sync+0x4c>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800989e:	b002      	add	sp, #8
 80098a0:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80098a2:	2301      	movs	r3, #1
 80098a4:	6a22      	ldr	r2, [r4, #32]
 80098a6:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80098aa:	9801      	ldr	r0, [sp, #4]
 80098ac:	7840      	ldrb	r0, [r0, #1]
 80098ae:	f7fe fdff 	bl	80084b0 <disk_write>
 80098b2:	bb40      	cbnz	r0, 8009906 <f_sync+0x94>
				fp->flag &= (BYTE)~FA_DIRTY;
 80098b4:	7d23      	ldrb	r3, [r4, #20]
 80098b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098ba:	7523      	strb	r3, [r4, #20]
 80098bc:	e7e7      	b.n	800988e <f_sync+0x1c>
					dir = fp->dir_ptr;
 80098be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80098c0:	7af3      	ldrb	r3, [r6, #11]
 80098c2:	f043 0320 	orr.w	r3, r3, #32
 80098c6:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80098c8:	68a2      	ldr	r2, [r4, #8]
 80098ca:	4631      	mov	r1, r6
 80098cc:	6820      	ldr	r0, [r4, #0]
 80098ce:	f7fe ff57 	bl	8008780 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80098d2:	68e1      	ldr	r1, [r4, #12]
 80098d4:	f106 001c 	add.w	r0, r6, #28
 80098d8:	f7fe fe16 	bl	8008508 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80098dc:	4629      	mov	r1, r5
 80098de:	f106 0016 	add.w	r0, r6, #22
 80098e2:	f7fe fe11 	bl	8008508 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80098e6:	2100      	movs	r1, #0
 80098e8:	f106 0012 	add.w	r0, r6, #18
 80098ec:	f7fe fe08 	bl	8008500 <st_word>
					fs->wflag = 1;
 80098f0:	9b01      	ldr	r3, [sp, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80098f6:	9801      	ldr	r0, [sp, #4]
 80098f8:	f7ff fd34 	bl	8009364 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 80098fc:	7d23      	ldrb	r3, [r4, #20]
 80098fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009902:	7523      	strb	r3, [r4, #20]
 8009904:	e7cb      	b.n	800989e <f_sync+0x2c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009906:	2001      	movs	r0, #1
 8009908:	e7c9      	b.n	800989e <f_sync+0x2c>

0800990a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800990a:	b510      	push	{r4, lr}
 800990c:	b082      	sub	sp, #8
 800990e:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009910:	f7ff ffaf 	bl	8009872 <f_sync>
	if (res == FR_OK)
 8009914:	b108      	cbz	r0, 800991a <f_close+0x10>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8009916:	b002      	add	sp, #8
 8009918:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800991a:	a901      	add	r1, sp, #4
 800991c:	4620      	mov	r0, r4
 800991e:	f7fe ffd3 	bl	80088c8 <validate>
		if (res == FR_OK) {
 8009922:	2800      	cmp	r0, #0
 8009924:	d1f7      	bne.n	8009916 <f_close+0xc>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009926:	6920      	ldr	r0, [r4, #16]
 8009928:	f7fe febc 	bl	80086a4 <dec_lock>
			if (res == FR_OK)
 800992c:	2800      	cmp	r0, #0
 800992e:	d1f2      	bne.n	8009916 <f_close+0xc>
				fp->obj.fs = 0;			/* Invalidate file object */
 8009930:	6020      	str	r0, [r4, #0]
 8009932:	e7f0      	b.n	8009916 <f_close+0xc>

08009934 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8009934:	4b10      	ldr	r3, [pc, #64]	; (8009978 <FATFS_LinkDriverEx+0x44>)
 8009936:	7a5b      	ldrb	r3, [r3, #9]
 8009938:	b9e3      	cbnz	r3, 8009974 <FATFS_LinkDriverEx+0x40>
{
 800993a:	b470      	push	{r4, r5, r6}
 800993c:	4604      	mov	r4, r0
 800993e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 8009942:	4b0d      	ldr	r3, [pc, #52]	; (8009978 <FATFS_LinkDriverEx+0x44>)
 8009944:	7a5d      	ldrb	r5, [r3, #9]
 8009946:	b2ed      	uxtb	r5, r5
 8009948:	2600      	movs	r6, #0
 800994a:	555e      	strb	r6, [r3, r5]
    disk.drv[disk.nbr] = drv;
 800994c:	7a5d      	ldrb	r5, [r3, #9]
 800994e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8009952:	606c      	str	r4, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8009954:	7a5c      	ldrb	r4, [r3, #9]
 8009956:	441c      	add	r4, r3
 8009958:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 800995a:	7a5a      	ldrb	r2, [r3, #9]
 800995c:	1c54      	adds	r4, r2, #1
 800995e:	b2e4      	uxtb	r4, r4
 8009960:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 8009962:	3230      	adds	r2, #48	; 0x30
 8009964:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8009966:	233a      	movs	r3, #58	; 0x3a
 8009968:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800996a:	232f      	movs	r3, #47	; 0x2f
 800996c:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800996e:	70ce      	strb	r6, [r1, #3]
    ret = 0;
  }

  return ret;
}
 8009970:	bc70      	pop	{r4, r5, r6}
 8009972:	4770      	bx	lr
  uint8_t ret = 1;
 8009974:	2001      	movs	r0, #1
}
 8009976:	4770      	bx	lr
 8009978:	20000398 	.word	0x20000398

0800997c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800997c:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 800997e:	2200      	movs	r2, #0
 8009980:	f7ff ffd8 	bl	8009934 <FATFS_LinkDriverEx>
}
 8009984:	bd08      	pop	{r3, pc}
	...

08009988 <AsynchronousTaskTimerUpdate>:

}

void AsynchronousTaskTimerUpdate()
{
	if(kApplicationBase.sAsyncTimers.s1000ms.bEnabledFlag)
 8009988:	4b16      	ldr	r3, [pc, #88]	; (80099e4 <AsynchronousTaskTimerUpdate+0x5c>)
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	b12b      	cbz	r3, 800999a <AsynchronousTaskTimerUpdate+0x12>
	{
		kApplicationBase.sAsyncTimers.s1000ms.u16Counter++;
 800998e:	4a15      	ldr	r2, [pc, #84]	; (80099e4 <AsynchronousTaskTimerUpdate+0x5c>)
 8009990:	8853      	ldrh	r3, [r2, #2]
 8009992:	b29b      	uxth	r3, r3
 8009994:	3301      	adds	r3, #1
 8009996:	b29b      	uxth	r3, r3
 8009998:	8053      	strh	r3, [r2, #2]
	}
	if(kApplicationBase.sAsyncTimers.s100ms.bEnabledFlag)
 800999a:	4b12      	ldr	r3, [pc, #72]	; (80099e4 <AsynchronousTaskTimerUpdate+0x5c>)
 800999c:	791b      	ldrb	r3, [r3, #4]
 800999e:	b12b      	cbz	r3, 80099ac <AsynchronousTaskTimerUpdate+0x24>
	{
		kApplicationBase.sAsyncTimers.s100ms.u16Counter++;
 80099a0:	4a10      	ldr	r2, [pc, #64]	; (80099e4 <AsynchronousTaskTimerUpdate+0x5c>)
 80099a2:	88d3      	ldrh	r3, [r2, #6]
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	3301      	adds	r3, #1
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	80d3      	strh	r3, [r2, #6]
	}
	if(kApplicationBase.sAsyncTimers.s10ms.bEnabledFlag)
 80099ac:	4b0d      	ldr	r3, [pc, #52]	; (80099e4 <AsynchronousTaskTimerUpdate+0x5c>)
 80099ae:	7a1b      	ldrb	r3, [r3, #8]
 80099b0:	b12b      	cbz	r3, 80099be <AsynchronousTaskTimerUpdate+0x36>
	{
		kApplicationBase.sAsyncTimers.s10ms.u16Counter++;
 80099b2:	4a0c      	ldr	r2, [pc, #48]	; (80099e4 <AsynchronousTaskTimerUpdate+0x5c>)
 80099b4:	8953      	ldrh	r3, [r2, #10]
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	3301      	adds	r3, #1
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	8153      	strh	r3, [r2, #10]
	}
	if(kApplicationBase.sAsyncTimers.s1ms.bEnabledFlag)
 80099be:	4b09      	ldr	r3, [pc, #36]	; (80099e4 <AsynchronousTaskTimerUpdate+0x5c>)
 80099c0:	7b1b      	ldrb	r3, [r3, #12]
 80099c2:	b12b      	cbz	r3, 80099d0 <AsynchronousTaskTimerUpdate+0x48>
	{
		kApplicationBase.sAsyncTimers.s1ms.u16Counter++;
 80099c4:	4a07      	ldr	r2, [pc, #28]	; (80099e4 <AsynchronousTaskTimerUpdate+0x5c>)
 80099c6:	89d3      	ldrh	r3, [r2, #14]
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	3301      	adds	r3, #1
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	81d3      	strh	r3, [r2, #14]
	}
	if(kApplicationBase.sAsyncTimers.s500us.bEnabledFlag)
 80099d0:	4b04      	ldr	r3, [pc, #16]	; (80099e4 <AsynchronousTaskTimerUpdate+0x5c>)
 80099d2:	7c1b      	ldrb	r3, [r3, #16]
 80099d4:	b12b      	cbz	r3, 80099e2 <AsynchronousTaskTimerUpdate+0x5a>
	{
		kApplicationBase.sAsyncTimers.s500us.u16Counter++;
 80099d6:	4a03      	ldr	r2, [pc, #12]	; (80099e4 <AsynchronousTaskTimerUpdate+0x5c>)
 80099d8:	8a53      	ldrh	r3, [r2, #18]
 80099da:	b29b      	uxth	r3, r3
 80099dc:	3301      	adds	r3, #1
 80099de:	b29b      	uxth	r3, r3
 80099e0:	8253      	strh	r3, [r2, #18]
	}

}
 80099e2:	4770      	bx	lr
 80099e4:	200003a4 	.word	0x200003a4

080099e8 <AsynchronousTask_1ms>:

/* Internal functions */

void AsynchronousTask_1ms()
{
 80099e8:	b508      	push	{r3, lr}
	 * 10 us with no frame assembly,
	 * 70 us with frame assembly
	 *
	 * two functions (22.12.2201): EventSystem and CommManager
	 */
	EventSystem_HandleEvent();
 80099ea:	f000 fb3b 	bl	800a064 <EventSystem_HandleEvent>
	CommManager_Operate();
 80099ee:	f000 fd97 	bl	800a520 <CommManager_Operate>
	SetSecondDebugPinOn();
 80099f2:	f7f7 fb35 	bl	8001060 <SetSecondDebugPinOn>
	DataSaver_Operate();
 80099f6:	f000 fa1d 	bl	8009e34 <DataSaver_Operate>
	SetSecondDebugPinOff();
 80099fa:	f7f7 fb3b 	bl	8001074 <SetSecondDebugPinOff>
}
 80099fe:	bd08      	pop	{r3, pc}

08009a00 <AsynchronousTask_10ms>:

void AsynchronousTask_10ms()
{
 8009a00:	b508      	push	{r3, lr}
	 * 5-10 us with no communication
	 * 1-9 us with communication
	 *
	 * one function (22.12.2201): TempCollect
	 */
	TempCollect_Operate();
 8009a02:	f000 fbdd 	bl	800a1c0 <TempCollect_Operate>
}
 8009a06:	bd08      	pop	{r3, pc}

08009a08 <AsynchronousTask_100ms>:

void AsynchronousTask_100ms()
{
 8009a08:	b508      	push	{r3, lr}
	 * 8-11 us with no communication
	 * same with communication
	 *
	 * two functions (22.12.2201): USB_Check and DataHandler
	 */
	USB_CheckForUSBConnection();
 8009a0a:	f000 fe3b 	bl	800a684 <USB_CheckForUSBConnection>
	DataHandler_Operate();
 8009a0e:	f000 f9a3 	bl	8009d58 <DataHandler_Operate>
}
 8009a12:	bd08      	pop	{r3, pc}

08009a14 <AsynchronousTask_1000ms>:

void AsynchronousTask_1000ms()
{
 8009a14:	b508      	push	{r3, lr}
	 * 999 ms without communication
	 * same with communication
	 *
	 * Measured 22.12.2021
	 */
	ToggleLED_B();
 8009a16:	f7f7 fac7 	bl	8000fa8 <ToggleLED_B>
////		kCardResult = f_write(&SDFile, &cDataToBeWritten, 100, &kWordCount);
////		SetSecondDebugPinOff();
//	}


}
 8009a1a:	bd08      	pop	{r3, pc}

08009a1c <AsynchronousTaskScheduler>:

void AsynchronousTaskScheduler()
{
 8009a1c:	b508      	push	{r3, lr}
	if(kApplicationBase.sAsyncTimers.s1000ms.u16Counter >= dAsynchronousTaskPeriod1000ms)
 8009a1e:	4b16      	ldr	r3, [pc, #88]	; (8009a78 <AsynchronousTaskScheduler+0x5c>)
 8009a20:	885b      	ldrh	r3, [r3, #2]
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a28:	d20e      	bcs.n	8009a48 <AsynchronousTaskScheduler+0x2c>
	{
		AsynchronousTask_1000ms();
		kApplicationBase.sAsyncTimers.s1000ms.u16Counter = 0;
	}

	if(kApplicationBase.sAsyncTimers.s100ms.u16Counter >= dAsynchronousTaskPeriod100ms)
 8009a2a:	4b13      	ldr	r3, [pc, #76]	; (8009a78 <AsynchronousTaskScheduler+0x5c>)
 8009a2c:	88db      	ldrh	r3, [r3, #6]
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	2b63      	cmp	r3, #99	; 0x63
 8009a32:	d80f      	bhi.n	8009a54 <AsynchronousTaskScheduler+0x38>
	{
		AsynchronousTask_100ms();
		kApplicationBase.sAsyncTimers.s100ms.u16Counter = 0;
	}

	if(kApplicationBase.sAsyncTimers.s10ms.u16Counter >= dAsynchronousTaskPeriod10ms)
 8009a34:	4b10      	ldr	r3, [pc, #64]	; (8009a78 <AsynchronousTaskScheduler+0x5c>)
 8009a36:	895b      	ldrh	r3, [r3, #10]
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	2b09      	cmp	r3, #9
 8009a3c:	d810      	bhi.n	8009a60 <AsynchronousTaskScheduler+0x44>
	{
		AsynchronousTask_10ms();
		kApplicationBase.sAsyncTimers.s10ms.u16Counter = 0;
	}

 	if(kApplicationBase.sAsyncTimers.s1ms.u16Counter >= dAsynchronousTaskPeriod1ms)
 8009a3e:	4b0e      	ldr	r3, [pc, #56]	; (8009a78 <AsynchronousTaskScheduler+0x5c>)
 8009a40:	89db      	ldrh	r3, [r3, #14]
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	b993      	cbnz	r3, 8009a6c <AsynchronousTaskScheduler+0x50>
	{
		AsynchronousTask_1ms();
		kApplicationBase.sAsyncTimers.s1ms.u16Counter = 0;
	}

}
 8009a46:	bd08      	pop	{r3, pc}
		AsynchronousTask_1000ms();
 8009a48:	f7ff ffe4 	bl	8009a14 <AsynchronousTask_1000ms>
		kApplicationBase.sAsyncTimers.s1000ms.u16Counter = 0;
 8009a4c:	4b0a      	ldr	r3, [pc, #40]	; (8009a78 <AsynchronousTaskScheduler+0x5c>)
 8009a4e:	2200      	movs	r2, #0
 8009a50:	805a      	strh	r2, [r3, #2]
 8009a52:	e7ea      	b.n	8009a2a <AsynchronousTaskScheduler+0xe>
		AsynchronousTask_100ms();
 8009a54:	f7ff ffd8 	bl	8009a08 <AsynchronousTask_100ms>
		kApplicationBase.sAsyncTimers.s100ms.u16Counter = 0;
 8009a58:	4b07      	ldr	r3, [pc, #28]	; (8009a78 <AsynchronousTaskScheduler+0x5c>)
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	80da      	strh	r2, [r3, #6]
 8009a5e:	e7e9      	b.n	8009a34 <AsynchronousTaskScheduler+0x18>
		AsynchronousTask_10ms();
 8009a60:	f7ff ffce 	bl	8009a00 <AsynchronousTask_10ms>
		kApplicationBase.sAsyncTimers.s10ms.u16Counter = 0;
 8009a64:	4b04      	ldr	r3, [pc, #16]	; (8009a78 <AsynchronousTaskScheduler+0x5c>)
 8009a66:	2200      	movs	r2, #0
 8009a68:	815a      	strh	r2, [r3, #10]
 8009a6a:	e7e8      	b.n	8009a3e <AsynchronousTaskScheduler+0x22>
		AsynchronousTask_1ms();
 8009a6c:	f7ff ffbc 	bl	80099e8 <AsynchronousTask_1ms>
		kApplicationBase.sAsyncTimers.s1ms.u16Counter = 0;
 8009a70:	4b01      	ldr	r3, [pc, #4]	; (8009a78 <AsynchronousTaskScheduler+0x5c>)
 8009a72:	2200      	movs	r2, #0
 8009a74:	81da      	strh	r2, [r3, #14]
}
 8009a76:	e7e6      	b.n	8009a46 <AsynchronousTaskScheduler+0x2a>
 8009a78:	200003a4 	.word	0x200003a4

08009a7c <AppEnableResetTaskTimers>:

}

void AppEnableResetTaskTimers()
{
	kApplicationBase.sAsyncTimers.s1000ms.bEnabledFlag = true;
 8009a7c:	4b06      	ldr	r3, [pc, #24]	; (8009a98 <AppEnableResetTaskTimers+0x1c>)
 8009a7e:	2201      	movs	r2, #1
 8009a80:	701a      	strb	r2, [r3, #0]
	kApplicationBase.sAsyncTimers.s100ms.bEnabledFlag = true;
 8009a82:	711a      	strb	r2, [r3, #4]
	kApplicationBase.sAsyncTimers.s10ms.bEnabledFlag = true;
 8009a84:	721a      	strb	r2, [r3, #8]
	kApplicationBase.sAsyncTimers.s1ms.bEnabledFlag = true;
 8009a86:	731a      	strb	r2, [r3, #12]
	kApplicationBase.sAsyncTimers.s500us.bEnabledFlag = true;
 8009a88:	741a      	strb	r2, [r3, #16]

	kApplicationBase.sAsyncTimers.s1000ms.u16Counter = 0;
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	805a      	strh	r2, [r3, #2]
	kApplicationBase.sAsyncTimers.s100ms.u16Counter = 0;
 8009a8e:	80da      	strh	r2, [r3, #6]
	kApplicationBase.sAsyncTimers.s10ms.u16Counter = 0;
 8009a90:	815a      	strh	r2, [r3, #10]
	kApplicationBase.sAsyncTimers.s1ms.u16Counter = 0;
 8009a92:	81da      	strh	r2, [r3, #14]
	kApplicationBase.sAsyncTimers.s500us.u16Counter = 0;
 8009a94:	825a      	strh	r2, [r3, #18]
}
 8009a96:	4770      	bx	lr
 8009a98:	200003a4 	.word	0x200003a4

08009a9c <AssertError>:

void AssertError( AppErrorList_t eAppError )
{
	kApplicationBase.u32ErrorReg |= (uint32_t)eAppError;
 8009a9c:	4a02      	ldr	r2, [pc, #8]	; (8009aa8 <AssertError+0xc>)
 8009a9e:	6953      	ldr	r3, [r2, #20]
 8009aa0:	4303      	orrs	r3, r0
 8009aa2:	6153      	str	r3, [r2, #20]
}
 8009aa4:	4770      	bx	lr
 8009aa6:	bf00      	nop
 8009aa8:	200003a4 	.word	0x200003a4

08009aac <AppStateChangeRequest>:
{
 8009aac:	b508      	push	{r3, lr}
	switch(kApplicationBase.eApplicationState)
 8009aae:	4b1a      	ldr	r3, [pc, #104]	; (8009b18 <AppStateChangeRequest+0x6c>)
 8009ab0:	7e5b      	ldrb	r3, [r3, #25]
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	2b03      	cmp	r3, #3
 8009ab6:	d82b      	bhi.n	8009b10 <AppStateChangeRequest+0x64>
 8009ab8:	e8df f003 	tbb	[pc, r3]
 8009abc:	26160c02 	.word	0x26160c02
		if(eNewState == eApp_Initialization)
 8009ac0:	2801      	cmp	r0, #1
 8009ac2:	d103      	bne.n	8009acc <AppStateChangeRequest+0x20>
			kApplicationBase.eApplicationState = eApp_Initialization;
 8009ac4:	4b14      	ldr	r3, [pc, #80]	; (8009b18 <AppStateChangeRequest+0x6c>)
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	765a      	strb	r2, [r3, #25]
 8009aca:	e020      	b.n	8009b0e <AppStateChangeRequest+0x62>
			AssertError(AppError_WrongStateTransition);
 8009acc:	2020      	movs	r0, #32
 8009ace:	f7ff ffe5 	bl	8009a9c <AssertError>
 8009ad2:	e01c      	b.n	8009b0e <AppStateChangeRequest+0x62>
		if(eNewState == eApp_Perform)
 8009ad4:	2802      	cmp	r0, #2
 8009ad6:	d103      	bne.n	8009ae0 <AppStateChangeRequest+0x34>
			kApplicationBase.eApplicationState = eApp_Perform;
 8009ad8:	4b0f      	ldr	r3, [pc, #60]	; (8009b18 <AppStateChangeRequest+0x6c>)
 8009ada:	2202      	movs	r2, #2
 8009adc:	765a      	strb	r2, [r3, #25]
 8009ade:	e016      	b.n	8009b0e <AppStateChangeRequest+0x62>
			AssertError(AppError_WrongStateTransition);
 8009ae0:	2020      	movs	r0, #32
 8009ae2:	f7ff ffdb 	bl	8009a9c <AssertError>
 8009ae6:	e012      	b.n	8009b0e <AppStateChangeRequest+0x62>
		if(eNewState == eApp_Initialization)
 8009ae8:	2801      	cmp	r0, #1
 8009aea:	d005      	beq.n	8009af8 <AppStateChangeRequest+0x4c>
		else if(eNewState == eApp_Shutdown)
 8009aec:	2803      	cmp	r0, #3
 8009aee:	d107      	bne.n	8009b00 <AppStateChangeRequest+0x54>
			kApplicationBase.eApplicationState = eApp_Shutdown;
 8009af0:	4b09      	ldr	r3, [pc, #36]	; (8009b18 <AppStateChangeRequest+0x6c>)
 8009af2:	2203      	movs	r2, #3
 8009af4:	765a      	strb	r2, [r3, #25]
 8009af6:	e00a      	b.n	8009b0e <AppStateChangeRequest+0x62>
			kApplicationBase.eApplicationState = eApp_Initialization;
 8009af8:	4b07      	ldr	r3, [pc, #28]	; (8009b18 <AppStateChangeRequest+0x6c>)
 8009afa:	2201      	movs	r2, #1
 8009afc:	765a      	strb	r2, [r3, #25]
 8009afe:	e006      	b.n	8009b0e <AppStateChangeRequest+0x62>
			AssertError(AppError_WrongStateTransition);
 8009b00:	2020      	movs	r0, #32
 8009b02:	f7ff ffcb 	bl	8009a9c <AssertError>
 8009b06:	e002      	b.n	8009b0e <AppStateChangeRequest+0x62>
		AssertError(AppError_WrongStateTransition);
 8009b08:	2020      	movs	r0, #32
 8009b0a:	f7ff ffc7 	bl	8009a9c <AssertError>
}
 8009b0e:	bd08      	pop	{r3, pc}
		AssertError(AppError_WrongStateTransition);
 8009b10:	2020      	movs	r0, #32
 8009b12:	f7ff ffc3 	bl	8009a9c <AssertError>
}
 8009b16:	e7fa      	b.n	8009b0e <AppStateChangeRequest+0x62>
 8009b18:	200003a4 	.word	0x200003a4

08009b1c <TurnOnSynchronousEvent>:

void TurnOnSynchronousEvent()
{
 8009b1c:	b508      	push	{r3, lr}
	 HAL_TIM_Base_Start_IT(kApplicationBase.phSynchronousEventTimer);
 8009b1e:	4b02      	ldr	r3, [pc, #8]	; (8009b28 <TurnOnSynchronousEvent+0xc>)
 8009b20:	69d8      	ldr	r0, [r3, #28]
 8009b22:	f7fb ff8b 	bl	8005a3c <HAL_TIM_Base_Start_IT>
}
 8009b26:	bd08      	pop	{r3, pc}
 8009b28:	200003a4 	.word	0x200003a4

08009b2c <ApplicationPerform>:
{
 8009b2c:	b508      	push	{r3, lr}
	switch(kApplicationBase.eApplicationState)
 8009b2e:	4b1b      	ldr	r3, [pc, #108]	; (8009b9c <ApplicationPerform+0x70>)
 8009b30:	7e5b      	ldrb	r3, [r3, #25]
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	2b03      	cmp	r3, #3
 8009b36:	d82d      	bhi.n	8009b94 <ApplicationPerform+0x68>
 8009b38:	e8df f003 	tbb	[pc, r3]
 8009b3c:	0d290e02 	.word	0x0d290e02
		OperateLED_A(eLED_On);
 8009b40:	2000      	movs	r0, #0
 8009b42:	f7f7 fa05 	bl	8000f50 <OperateLED_A>
		kApplicationBase.phSynchronousEventTimer = HandlesAssigner_GetHandle(eHandle_TIM2);
 8009b46:	2000      	movs	r0, #0
 8009b48:	f000 fb00 	bl	800a14c <HandlesAssigner_GetHandle>
 8009b4c:	4b13      	ldr	r3, [pc, #76]	; (8009b9c <ApplicationPerform+0x70>)
 8009b4e:	61d8      	str	r0, [r3, #28]
		AppStateChangeRequest(eApp_Initialization);
 8009b50:	2001      	movs	r0, #1
 8009b52:	f7ff ffab 	bl	8009aac <AppStateChangeRequest>
}
 8009b56:	bd08      	pop	{r3, pc}
		TurnAllSensorOn();
 8009b58:	f7f7 fa66 	bl	8001028 <TurnAllSensorOn>
		SensorArray_Init();
 8009b5c:	f7fd fc3a 	bl	80073d4 <SensorArray_Init>
		USB_InitalizeTransmitterLogic();
 8009b60:	f000 fd76 	bl	800a650 <USB_InitalizeTransmitterLogic>
		AppEnableResetTaskTimers();
 8009b64:	f7ff ff8a 	bl	8009a7c <AppEnableResetTaskTimers>
		TempCollect_Initialize();
 8009b68:	f000 fc22 	bl	800a3b0 <TempCollect_Initialize>
		DataHandler_Initialize();
 8009b6c:	f000 f854 	bl	8009c18 <DataHandler_Initialize>
		CommManager_Initialize();
 8009b70:	f000 fccc 	bl	800a50c <CommManager_Initialize>
		EventSystem_Initialize();
 8009b74:	f000 fa70 	bl	800a058 <EventSystem_Initialize>
		SignalProcessing_Initialize((uint8_t)dMemoryWidth);
 8009b78:	2010      	movs	r0, #16
 8009b7a:	f000 fdd5 	bl	800a728 <SignalProcessing_Initialize>
		DataSaver_Initialize();
 8009b7e:	f000 f933 	bl	8009de8 <DataSaver_Initialize>
		TurnOnSynchronousEvent();
 8009b82:	f7ff ffcb 	bl	8009b1c <TurnOnSynchronousEvent>
		AppStateChangeRequest(eApp_Perform);
 8009b86:	2002      	movs	r0, #2
 8009b88:	f7ff ff90 	bl	8009aac <AppStateChangeRequest>
		break;
 8009b8c:	e7e3      	b.n	8009b56 <ApplicationPerform+0x2a>
		AsynchronousTaskScheduler();
 8009b8e:	f7ff ff45 	bl	8009a1c <AsynchronousTaskScheduler>
		break;
 8009b92:	e7e0      	b.n	8009b56 <ApplicationPerform+0x2a>
		AssertError(AppError_AppDefaultStateEntryError);
 8009b94:	2010      	movs	r0, #16
 8009b96:	f7ff ff81 	bl	8009a9c <AssertError>
}
 8009b9a:	e7dc      	b.n	8009b56 <ApplicationPerform+0x2a>
 8009b9c:	200003a4 	.word	0x200003a4

08009ba0 <DataHandler_Reset>:
	DataHandler_Reset();
	kDataHandler.bEnabled = true;

}
void DataHandler_Reset()
{
 8009ba0:	b430      	push	{r4, r5}
	kDataHandler.u8ActiveMemoryPage = 0;
 8009ba2:	4b1c      	ldr	r3, [pc, #112]	; (8009c14 <DataHandler_Reset+0x74>)
 8009ba4:	2500      	movs	r5, #0
 8009ba6:	f883 5414 	strb.w	r5, [r3, #1044]	; 0x414
	kDataHandler.u8LastMemoryPage = 0;
 8009baa:	f883 5415 	strb.w	r5, [r3, #1045]	; 0x415
	kDataHandler.u8WidthPointer = 0;
 8009bae:	f883 5416 	strb.w	r5, [r3, #1046]	; 0x416
	kDataHandler.u8LengthPointer = 0;
 8009bb2:	f883 5417 	strb.w	r5, [r3, #1047]	; 0x417
	kDataHandler.bPageFilled = false;
 8009bb6:	f883 5419 	strb.w	r5, [r3, #1049]	; 0x419
	kDataHandler.bReadyToSend = false;
 8009bba:	f883 5418 	strb.w	r5, [r3, #1048]	; 0x418

	for(uint8_t u8PageIdx = 0; u8PageIdx < dMemoryPagesCount; u8PageIdx++)
 8009bbe:	e022      	b.n	8009c06 <DataHandler_Reset+0x66>
	{
		for(uint8_t u8LengthIdx = 0; u8LengthIdx < dMemoryLength; u8LengthIdx++)
 8009bc0:	3401      	adds	r4, #1
 8009bc2:	b2e4      	uxtb	r4, r4
 8009bc4:	2c07      	cmp	r4, #7
 8009bc6:	d81c      	bhi.n	8009c02 <DataHandler_Reset+0x62>
		{
			kDataHandler.kMeasurementMemory[u8PageIdx].bAlreadySent = false;
 8009bc8:	4628      	mov	r0, r5
 8009bca:	eb05 1385 	add.w	r3, r5, r5, lsl #6
 8009bce:	00da      	lsls	r2, r3, #3
 8009bd0:	4b10      	ldr	r3, [pc, #64]	; (8009c14 <DataHandler_Reset+0x74>)
 8009bd2:	4413      	add	r3, r2
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
			kDataHandler.kMeasurementMemory[u8PageIdx].bHardSaved = false;
 8009bda:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
			kDataHandler.kMeasurementMemory[u8PageIdx].bHardSaveRequest = false;
 8009bde:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a

			for(uint8_t u8WidthIdx = 0; u8WidthIdx < dMemoryWidth; u8WidthIdx++)
 8009be2:	2a0f      	cmp	r2, #15
 8009be4:	d8ec      	bhi.n	8009bc0 <DataHandler_Reset+0x20>
			{
				kDataHandler.kMeasurementMemory[u8PageIdx].fMeasurementArray[u8LengthIdx][u8WidthIdx] = 0;
 8009be6:	eb00 1180 	add.w	r1, r0, r0, lsl #6
 8009bea:	004b      	lsls	r3, r1, #1
 8009bec:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8009bf0:	4413      	add	r3, r2
 8009bf2:	4908      	ldr	r1, [pc, #32]	; (8009c14 <DataHandler_Reset+0x74>)
 8009bf4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	6099      	str	r1, [r3, #8]
			for(uint8_t u8WidthIdx = 0; u8WidthIdx < dMemoryWidth; u8WidthIdx++)
 8009bfc:	3201      	adds	r2, #1
 8009bfe:	b2d2      	uxtb	r2, r2
 8009c00:	e7ef      	b.n	8009be2 <DataHandler_Reset+0x42>
	for(uint8_t u8PageIdx = 0; u8PageIdx < dMemoryPagesCount; u8PageIdx++)
 8009c02:	3501      	adds	r5, #1
 8009c04:	b2ed      	uxtb	r5, r5
 8009c06:	2d01      	cmp	r5, #1
 8009c08:	d801      	bhi.n	8009c0e <DataHandler_Reset+0x6e>
		for(uint8_t u8LengthIdx = 0; u8LengthIdx < dMemoryLength; u8LengthIdx++)
 8009c0a:	2400      	movs	r4, #0
 8009c0c:	e7da      	b.n	8009bc4 <DataHandler_Reset+0x24>
			}
		}
	}

}
 8009c0e:	bc30      	pop	{r4, r5}
 8009c10:	4770      	bx	lr
 8009c12:	bf00      	nop
 8009c14:	200003c4 	.word	0x200003c4

08009c18 <DataHandler_Initialize>:
{
 8009c18:	b508      	push	{r3, lr}
	DataHandler_Reset();
 8009c1a:	f7ff ffc1 	bl	8009ba0 <DataHandler_Reset>
	kDataHandler.bEnabled = true;
 8009c1e:	4b02      	ldr	r3, [pc, #8]	; (8009c28 <DataHandler_Initialize+0x10>)
 8009c20:	2201      	movs	r2, #1
 8009c22:	701a      	strb	r2, [r3, #0]
}
 8009c24:	bd08      	pop	{r3, pc}
 8009c26:	bf00      	nop
 8009c28:	200003c4 	.word	0x200003c4

08009c2c <DataHandler_OpenNewMeasurement>:
void DataHandler_OpenNewMeasurement( uint32_t u32TimeStamp )
{
 8009c2c:	b508      	push	{r3, lr}

	if( kDataHandler.bEnabled )
 8009c2e:	4b20      	ldr	r3, [pc, #128]	; (8009cb0 <DataHandler_OpenNewMeasurement+0x84>)
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	b3bb      	cbz	r3, 8009ca4 <DataHandler_OpenNewMeasurement+0x78>
	{
		kDataHandler.u8LengthPointer++;
 8009c34:	4a1e      	ldr	r2, [pc, #120]	; (8009cb0 <DataHandler_OpenNewMeasurement+0x84>)
 8009c36:	f892 3417 	ldrb.w	r3, [r2, #1047]	; 0x417
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	f882 3417 	strb.w	r3, [r2, #1047]	; 0x417
		kDataHandler.u8WidthPointer = 0;
 8009c42:	2100      	movs	r1, #0
 8009c44:	f882 1416 	strb.w	r1, [r2, #1046]	; 0x416

		/*
		 * Every time new measurement is opened the previous one is assumed to be ready for transmission
		 */
		kDataHandler.bReadyToSend = true;
 8009c48:	2101      	movs	r1, #1
 8009c4a:	f882 1418 	strb.w	r1, [r2, #1048]	; 0x418

		if(kDataHandler.u8LengthPointer >= dMemoryLength)
 8009c4e:	2b07      	cmp	r3, #7
 8009c50:	d927      	bls.n	8009ca2 <DataHandler_OpenNewMeasurement+0x76>
		{
			kDataHandler.u8LengthPointer = 0;
 8009c52:	4613      	mov	r3, r2
 8009c54:	2100      	movs	r1, #0
 8009c56:	f882 1417 	strb.w	r1, [r2, #1047]	; 0x417
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bAlreadySent = false;
 8009c5a:	f892 2414 	ldrb.w	r2, [r2, #1044]	; 0x414
 8009c5e:	eb02 1282 	add.w	r2, r2, r2, lsl #6
 8009c62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c66:	f883 1208 	strb.w	r1, [r3, #520]	; 0x208
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bHardSaveRequest = true;
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bHardSaved = false;
 8009c70:	f883 1209 	strb.w	r1, [r3, #521]	; 0x209
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].u16Timestamp = u32TimeStamp;
 8009c74:	6058      	str	r0, [r3, #4]

			if( !kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bHardSaved )
			{
				AssertError(AppError_DataLost); // Data not saved; possibly add timestamp to track lost data chunks
 8009c76:	2040      	movs	r0, #64	; 0x40
 8009c78:	f7ff ff10 	bl	8009a9c <AssertError>
			}

			kDataHandler.u8LastMemoryPage = kDataHandler.u8ActiveMemoryPage;
 8009c7c:	4a0c      	ldr	r2, [pc, #48]	; (8009cb0 <DataHandler_OpenNewMeasurement+0x84>)
 8009c7e:	f892 3414 	ldrb.w	r3, [r2, #1044]	; 0x414
 8009c82:	f882 3415 	strb.w	r3, [r2, #1045]	; 0x415
			kDataHandler.u8ActiveMemoryPage++;
 8009c86:	3301      	adds	r3, #1
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	f882 3414 	strb.w	r3, [r2, #1044]	; 0x414
			if(kDataHandler.u8ActiveMemoryPage >= dMemoryPagesCount)
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d903      	bls.n	8009c9a <DataHandler_OpenNewMeasurement+0x6e>
			{
				kDataHandler.u8ActiveMemoryPage = 0;
 8009c92:	4613      	mov	r3, r2
 8009c94:	2200      	movs	r2, #0
 8009c96:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
			}
			kDataHandler.bPageFilled = true;
 8009c9a:	4b05      	ldr	r3, [pc, #20]	; (8009cb0 <DataHandler_OpenNewMeasurement+0x84>)
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
	else
	{
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
	}

}
 8009ca2:	bd08      	pop	{r3, pc}
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
 8009ca4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009ca8:	f7ff fef8 	bl	8009a9c <AssertError>
}
 8009cac:	e7f9      	b.n	8009ca2 <DataHandler_OpenNewMeasurement+0x76>
 8009cae:	bf00      	nop
 8009cb0:	200003c4 	.word	0x200003c4

08009cb4 <DataHandler_StoreMeasurement>:

void DataHandler_StoreMeasurement( float fNewMeasurement )
{
 8009cb4:	b508      	push	{r3, lr}
	uint8_t u8MemPage = kDataHandler.u8ActiveMemoryPage;
 8009cb6:	4a13      	ldr	r2, [pc, #76]	; (8009d04 <DataHandler_StoreMeasurement+0x50>)
 8009cb8:	f892 3414 	ldrb.w	r3, [r2, #1044]	; 0x414
	uint8_t u8LenPtr = kDataHandler.u8LengthPointer;
 8009cbc:	f892 0417 	ldrb.w	r0, [r2, #1047]	; 0x417
	uint8_t u8WidPtr = kDataHandler.u8WidthPointer;
 8009cc0:	f892 1416 	ldrb.w	r1, [r2, #1046]	; 0x416

	if( kDataHandler.bEnabled )
 8009cc4:	7812      	ldrb	r2, [r2, #0]
 8009cc6:	b1ba      	cbz	r2, 8009cf8 <DataHandler_StoreMeasurement+0x44>
	{
		kDataHandler.kMeasurementMemory[u8MemPage].fMeasurementArray[u8LenPtr][u8WidPtr] = fNewMeasurement;
 8009cc8:	4a0e      	ldr	r2, [pc, #56]	; (8009d04 <DataHandler_StoreMeasurement+0x50>)
 8009cca:	eb03 1383 	add.w	r3, r3, r3, lsl #6
 8009cce:	005b      	lsls	r3, r3, #1
 8009cd0:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8009cd4:	440b      	add	r3, r1
 8009cd6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009cda:	ed83 0a02 	vstr	s0, [r3, #8]
		kDataHandler.u8WidthPointer++;
 8009cde:	1c4b      	adds	r3, r1, #1
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	f882 3416 	strb.w	r3, [r2, #1046]	; 0x416

		if(kDataHandler.u8WidthPointer >= dMemoryWidth)
 8009ce6:	2b0f      	cmp	r3, #15
 8009ce8:	d800      	bhi.n	8009cec <DataHandler_StoreMeasurement+0x38>
	}
	else
	{
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
	}
}
 8009cea:	bd08      	pop	{r3, pc}
			kDataHandler.u8WidthPointer--;
 8009cec:	f882 1416 	strb.w	r1, [r2, #1046]	; 0x416
			AssertError(AppError_WidthOverstretched); // Width overstretched - no new measurement was called;
 8009cf0:	2080      	movs	r0, #128	; 0x80
 8009cf2:	f7ff fed3 	bl	8009a9c <AssertError>
 8009cf6:	e7f8      	b.n	8009cea <DataHandler_StoreMeasurement+0x36>
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
 8009cf8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009cfc:	f7ff fece 	bl	8009a9c <AssertError>
}
 8009d00:	e7f3      	b.n	8009cea <DataHandler_StoreMeasurement+0x36>
 8009d02:	bf00      	nop
 8009d04:	200003c4 	.word	0x200003c4

08009d08 <DataHandler_AccessTransmissionMemoryInterchange>:

void DataHandler_AccessTransmissionMemoryInterchange( MemoryInterchange_t ** pkMemoryInterchangeAddress)
{
	MemoryInterchange_t *pkPointer;
	pkPointer = &kTransmissionMemoryInterchange;
	*pkMemoryInterchangeAddress = pkPointer;
 8009d08:	4b01      	ldr	r3, [pc, #4]	; (8009d10 <DataHandler_AccessTransmissionMemoryInterchange+0x8>)
 8009d0a:	6003      	str	r3, [r0, #0]
}
 8009d0c:	4770      	bx	lr
 8009d0e:	bf00      	nop
 8009d10:	200007e8 	.word	0x200007e8

08009d14 <DataHandler_AccessStorageMemoryInterchange>:
void DataHandler_AccessStorageMemoryInterchange( MemoryInterchange_t ** pkMemoryInterchangeAddress)
{
	MemoryInterchange_t *pkPointer;
	pkPointer = &kStorageMemoryInterchange;
	*pkMemoryInterchangeAddress = pkPointer;
 8009d14:	4b01      	ldr	r3, [pc, #4]	; (8009d1c <DataHandler_AccessStorageMemoryInterchange+0x8>)
 8009d16:	6003      	str	r3, [r0, #0]
}
 8009d18:	4770      	bx	lr
 8009d1a:	bf00      	nop
 8009d1c:	200007e0 	.word	0x200007e0

08009d20 <DataHandler_CopyMemoryToInterchangeBuffer>:

void DataHandler_CopyMemoryToInterchangeBuffer( float *pfMemoryArray )
{
 8009d20:	b510      	push	{r4, lr}
 8009d22:	4604      	mov	r4, r0
	if( (kTransmissionMemoryInterchange.eMemoryState != MemoryState_DataSent) && ( kTransmissionMemoryInterchange.eMemoryState != MemoryState_DataSkipped ) )
 8009d24:	4b0a      	ldr	r3, [pc, #40]	; (8009d50 <DataHandler_CopyMemoryToInterchangeBuffer+0x30>)
 8009d26:	795b      	ldrb	r3, [r3, #5]
 8009d28:	3b02      	subs	r3, #2
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d80b      	bhi.n	8009d48 <DataHandler_CopyMemoryToInterchangeBuffer+0x28>
	{
		AssertError(AppError_DataLost); // Memory would be overwritten otherwise;
	}
	else
	{
		kTransmissionMemoryInterchange.fDataPointer = pfMemoryArray;
 8009d30:	4b07      	ldr	r3, [pc, #28]	; (8009d50 <DataHandler_CopyMemoryToInterchangeBuffer+0x30>)
 8009d32:	6018      	str	r0, [r3, #0]
		kTransmissionMemoryInterchange.eMemoryState = MemoryState_NewData;
 8009d34:	2200      	movs	r2, #0
 8009d36:	715a      	strb	r2, [r3, #5]
	}

	if( !kStorageMemoryInterchange.bAddedToAverage )
 8009d38:	4b06      	ldr	r3, [pc, #24]	; (8009d54 <DataHandler_CopyMemoryToInterchangeBuffer+0x34>)
 8009d3a:	791b      	ldrb	r3, [r3, #4]
 8009d3c:	b11b      	cbz	r3, 8009d46 <DataHandler_CopyMemoryToInterchangeBuffer+0x26>
	{
		//todo: add average missing error;
	}
	else
	{
		kStorageMemoryInterchange.fDataPointer = pfMemoryArray;
 8009d3e:	4b05      	ldr	r3, [pc, #20]	; (8009d54 <DataHandler_CopyMemoryToInterchangeBuffer+0x34>)
 8009d40:	601c      	str	r4, [r3, #0]
		kStorageMemoryInterchange.bAddedToAverage = false;
 8009d42:	2200      	movs	r2, #0
 8009d44:	711a      	strb	r2, [r3, #4]
	}

}
 8009d46:	bd10      	pop	{r4, pc}
		AssertError(AppError_DataLost); // Memory would be overwritten otherwise;
 8009d48:	2040      	movs	r0, #64	; 0x40
 8009d4a:	f7ff fea7 	bl	8009a9c <AssertError>
 8009d4e:	e7f3      	b.n	8009d38 <DataHandler_CopyMemoryToInterchangeBuffer+0x18>
 8009d50:	200007e8 	.word	0x200007e8
 8009d54:	200007e0 	.word	0x200007e0

08009d58 <DataHandler_Operate>:
{
 8009d58:	b508      	push	{r3, lr}
	if( kDataHandler.bEnabled )
 8009d5a:	4b22      	ldr	r3, [pc, #136]	; (8009de4 <DataHandler_Operate+0x8c>)
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d03b      	beq.n	8009dda <DataHandler_Operate+0x82>
		if( kDataHandler.bPageFilled )
 8009d62:	4b20      	ldr	r3, [pc, #128]	; (8009de4 <DataHandler_Operate+0x8c>)
 8009d64:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8009d68:	b163      	cbz	r3, 8009d84 <DataHandler_Operate+0x2c>
			kDataHandler.kMeasurementMemory[kDataHandler.u8LastMemoryPage].bHardSaveRequest = true;
 8009d6a:	491e      	ldr	r1, [pc, #120]	; (8009de4 <DataHandler_Operate+0x8c>)
 8009d6c:	f891 3415 	ldrb.w	r3, [r1, #1045]	; 0x415
 8009d70:	eb03 1383 	add.w	r3, r3, r3, lsl #6
 8009d74:	00da      	lsls	r2, r3, #3
 8009d76:	440a      	add	r2, r1
 8009d78:	2301      	movs	r3, #1
 8009d7a:	f882 320a 	strb.w	r3, [r2, #522]	; 0x20a
			kDataHandler.bPageFilled = false;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	f881 3419 	strb.w	r3, [r1, #1049]	; 0x419
		if( kDataHandler.bReadyToSend )
 8009d84:	4b17      	ldr	r3, [pc, #92]	; (8009de4 <DataHandler_Operate+0x8c>)
 8009d86:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009d8a:	b1bb      	cbz	r3, 8009dbc <DataHandler_Operate+0x64>
			if(kDataHandler.u8LengthPointer == 0)
 8009d8c:	4b15      	ldr	r3, [pc, #84]	; (8009de4 <DataHandler_Operate+0x8c>)
 8009d8e:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 8009d92:	b9a3      	cbnz	r3, 8009dbe <DataHandler_Operate+0x66>
				DataHandler_CopyMemoryToInterchangeBuffer(kDataHandler.kMeasurementMemory[kDataHandler.u8LastMemoryPage].fMeasurementArray[dMemoryLength-1]);
 8009d94:	4813      	ldr	r0, [pc, #76]	; (8009de4 <DataHandler_Operate+0x8c>)
 8009d96:	f890 3415 	ldrb.w	r3, [r0, #1045]	; 0x415
 8009d9a:	eb03 1383 	add.w	r3, r3, r3, lsl #6
 8009d9e:	00da      	lsls	r2, r3, #3
 8009da0:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
 8009da4:	4410      	add	r0, r2
 8009da6:	3008      	adds	r0, #8
 8009da8:	f7ff ffba 	bl	8009d20 <DataHandler_CopyMemoryToInterchangeBuffer>
			CallForTransmissionEvent(); // Inform main event system that there is a pending transmission and data is preloaded to Memory Interchange
 8009dac:	f000 f9f4 	bl	800a198 <CallForTransmissionEvent>
			CallForAverageAddition(); // Inform event system that data is also ready for averaging
 8009db0:	f000 fa01 	bl	800a1b6 <CallForAverageAddition>
			kDataHandler.bReadyToSend = false;
 8009db4:	4b0b      	ldr	r3, [pc, #44]	; (8009de4 <DataHandler_Operate+0x8c>)
 8009db6:	2200      	movs	r2, #0
 8009db8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
}
 8009dbc:	bd08      	pop	{r3, pc}
				DataHandler_CopyMemoryToInterchangeBuffer(kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].fMeasurementArray[kDataHandler.u8LengthPointer-1]);
 8009dbe:	4809      	ldr	r0, [pc, #36]	; (8009de4 <DataHandler_Operate+0x8c>)
 8009dc0:	f890 2414 	ldrb.w	r2, [r0, #1044]	; 0x414
 8009dc4:	3b01      	subs	r3, #1
 8009dc6:	eb02 1282 	add.w	r2, r2, r2, lsl #6
 8009dca:	00d1      	lsls	r1, r2, #3
 8009dcc:	eb01 1383 	add.w	r3, r1, r3, lsl #6
 8009dd0:	4418      	add	r0, r3
 8009dd2:	3008      	adds	r0, #8
 8009dd4:	f7ff ffa4 	bl	8009d20 <DataHandler_CopyMemoryToInterchangeBuffer>
 8009dd8:	e7e8      	b.n	8009dac <DataHandler_Operate+0x54>
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
 8009dda:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009dde:	f7ff fe5d 	bl	8009a9c <AssertError>
}
 8009de2:	e7eb      	b.n	8009dbc <DataHandler_Operate+0x64>
 8009de4:	200003c4 	.word	0x200003c4

08009de8 <DataSaver_Initialize>:

static DataSaver_t kDataSaver;
static WORD kWordCount;

void DataSaver_Initialize()
{
 8009de8:	b508      	push	{r3, lr}
	kDataSaver.bEnabled = true;
 8009dea:	4b0f      	ldr	r3, [pc, #60]	; (8009e28 <DataSaver_Initialize+0x40>)
 8009dec:	2201      	movs	r2, #1
 8009dee:	701a      	strb	r2, [r3, #0]
	kDataSaver.u8CurrentSavingPage = 0;
 8009df0:	2100      	movs	r1, #0
 8009df2:	7119      	strb	r1, [r3, #4]
	kDataSaver.u8PreviousSavingPage = 0;
 8009df4:	7159      	strb	r1, [r3, #5]
	kDataSaver.u16SaveIndex = 0;
 8009df6:	80d9      	strh	r1, [r3, #6]
	kDataSaver.u16TickCounter = 0;
 8009df8:	f8a3 1cbc 	strh.w	r1, [r3, #3260]	; 0xcbc
	kDataSaver.u8DataProcessingIndex = 0;
 8009dfc:	f883 1cb0 	strb.w	r1, [r3, #3248]	; 0xcb0
	kDataSaver.eState = DataSaverState_Wait;
 8009e00:	f883 1cbe 	strb.w	r1, [r3, #3262]	; 0xcbe

	if( f_mount(&SDFatFS, (TCHAR const*)SDPath, 1) != FR_OK )
 8009e04:	4909      	ldr	r1, [pc, #36]	; (8009e2c <DataSaver_Initialize+0x44>)
 8009e06:	480a      	ldr	r0, [pc, #40]	; (8009e30 <DataSaver_Initialize+0x48>)
 8009e08:	f7ff faf2 	bl	80093f0 <f_mount>
 8009e0c:	b930      	cbnz	r0, 8009e1c <DataSaver_Initialize+0x34>
	{
		AssertError(AppError_SDCardNotMounted);
	}

	kDataSaver.phRTCHandle = HandlesAssigner_GetHandle(eHandle_RTC);
 8009e0e:	2003      	movs	r0, #3
 8009e10:	f000 f99c 	bl	800a14c <HandlesAssigner_GetHandle>
 8009e14:	4b04      	ldr	r3, [pc, #16]	; (8009e28 <DataSaver_Initialize+0x40>)
 8009e16:	f8c3 0cc0 	str.w	r0, [r3, #3264]	; 0xcc0
}
 8009e1a:	bd08      	pop	{r3, pc}
		AssertError(AppError_SDCardNotMounted);
 8009e1c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8009e20:	f7ff fe3c 	bl	8009a9c <AssertError>
 8009e24:	e7f3      	b.n	8009e0e <DataSaver_Initialize+0x26>
 8009e26:	bf00      	nop
 8009e28:	200007f0 	.word	0x200007f0
 8009e2c:	200019cc 	.word	0x200019cc
 8009e30:	20001c00 	.word	0x20001c00

08009e34 <DataSaver_Operate>:

void DataSaver_Operate()
{
 8009e34:	b538      	push	{r3, r4, r5, lr}
	if(kDataSaver.bEnabled)
 8009e36:	4b6b      	ldr	r3, [pc, #428]	; (8009fe4 <DataSaver_Operate+0x1b0>)
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d047      	beq.n	8009ece <DataSaver_Operate+0x9a>
	{
		switch(kDataSaver.eState)
 8009e3e:	4b69      	ldr	r3, [pc, #420]	; (8009fe4 <DataSaver_Operate+0x1b0>)
 8009e40:	f893 3cbe 	ldrb.w	r3, [r3, #3262]	; 0xcbe
 8009e44:	2b07      	cmp	r3, #7
 8009e46:	d842      	bhi.n	8009ece <DataSaver_Operate+0x9a>
 8009e48:	e8df f003 	tbb	[pc, r3]
 8009e4c:	42351404 	.word	0x42351404
 8009e50:	c3b1a559 	.word	0xc3b1a559
		{
		case DataSaverState_Wait:
			if ( kDataSaver.bAveragingPeriodElapsed )
 8009e54:	4b63      	ldr	r3, [pc, #396]	; (8009fe4 <DataSaver_Operate+0x1b0>)
 8009e56:	785b      	ldrb	r3, [r3, #1]
 8009e58:	b123      	cbz	r3, 8009e64 <DataSaver_Operate+0x30>
			{
				kDataSaver.eState = DataSaverState_CalculateAverage;
 8009e5a:	4b62      	ldr	r3, [pc, #392]	; (8009fe4 <DataSaver_Operate+0x1b0>)
 8009e5c:	2202      	movs	r2, #2
 8009e5e:	f883 2cbe 	strb.w	r2, [r3, #3262]	; 0xcbe
 8009e62:	e034      	b.n	8009ece <DataSaver_Operate+0x9a>
			}
			else if ( kDataSaver.bNewDataAvailable )
 8009e64:	4b5f      	ldr	r3, [pc, #380]	; (8009fe4 <DataSaver_Operate+0x1b0>)
 8009e66:	789b      	ldrb	r3, [r3, #2]
 8009e68:	b38b      	cbz	r3, 8009ece <DataSaver_Operate+0x9a>
			{
				kDataSaver.eState = DataSaverState_AddToAverageSum;
 8009e6a:	4b5e      	ldr	r3, [pc, #376]	; (8009fe4 <DataSaver_Operate+0x1b0>)
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	f883 2cbe 	strb.w	r2, [r3, #3262]	; 0xcbe
 8009e72:	e02c      	b.n	8009ece <DataSaver_Operate+0x9a>
			}
			break;
		case DataSaverState_AddToAverageSum:

			if( kDataSaver.u8DataProcessingIndex < dMaximumChannels )
 8009e74:	4b5b      	ldr	r3, [pc, #364]	; (8009fe4 <DataSaver_Operate+0x1b0>)
 8009e76:	f893 0cb0 	ldrb.w	r0, [r3, #3248]	; 0xcb0
 8009e7a:	280f      	cmp	r0, #15
 8009e7c:	d90b      	bls.n	8009e96 <DataSaver_Operate+0x62>
				SignalProcessing_AddSampleToAverage(kDataSaver.pkMeasurementPointer->fDataPointer[kDataSaver.u8DataProcessingIndex], kDataSaver.u8DataProcessingIndex);
				kDataSaver.u8DataProcessingIndex++;
			}
			else
			{
				kDataSaver.bNewDataAvailable = false;
 8009e7e:	4b59      	ldr	r3, [pc, #356]	; (8009fe4 <DataSaver_Operate+0x1b0>)
 8009e80:	2200      	movs	r2, #0
 8009e82:	709a      	strb	r2, [r3, #2]
				kDataSaver.u8DataProcessingIndex = 0;
 8009e84:	f883 2cb0 	strb.w	r2, [r3, #3248]	; 0xcb0
				kDataSaver.eState = DataSaverState_Wait;
 8009e88:	f883 2cbe 	strb.w	r2, [r3, #3262]	; 0xcbe
				kDataSaver.pkMeasurementPointer->bAddedToAverage = true;
 8009e8c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009e90:	2201      	movs	r2, #1
 8009e92:	711a      	strb	r2, [r3, #4]
 8009e94:	e01b      	b.n	8009ece <DataSaver_Operate+0x9a>
				SignalProcessing_AddSampleToAverage(kDataSaver.pkMeasurementPointer->fDataPointer[kDataSaver.u8DataProcessingIndex], kDataSaver.u8DataProcessingIndex);
 8009e96:	461c      	mov	r4, r3
 8009e98:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8009ea2:	ed93 0a00 	vldr	s0, [r3]
 8009ea6:	f000 fc47 	bl	800a738 <SignalProcessing_AddSampleToAverage>
				kDataSaver.u8DataProcessingIndex++;
 8009eaa:	f894 3cb0 	ldrb.w	r3, [r4, #3248]	; 0xcb0
 8009eae:	3301      	adds	r3, #1
 8009eb0:	f884 3cb0 	strb.w	r3, [r4, #3248]	; 0xcb0
 8009eb4:	e00b      	b.n	8009ece <DataSaver_Operate+0x9a>
			}
			break;
		case DataSaverState_CalculateAverage:
			SignalProcessing_CalculateAverage();
 8009eb6:	f000 fc59 	bl	800a76c <SignalProcessing_CalculateAverage>
			kDataSaver.pfAveragePointer = SignalProcessing_ReadAverage();
 8009eba:	f000 fc75 	bl	800a7a8 <SignalProcessing_ReadAverage>
 8009ebe:	4b49      	ldr	r3, [pc, #292]	; (8009fe4 <DataSaver_Operate+0x1b0>)
 8009ec0:	f8c3 0cb8 	str.w	r0, [r3, #3256]	; 0xcb8
			kDataSaver.bAveragingPeriodElapsed = false;
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	705a      	strb	r2, [r3, #1]
			kDataSaver.eState = DataSaverState_GetCurrentTime;
 8009ec8:	2203      	movs	r2, #3
 8009eca:	f883 2cbe 	strb.w	r2, [r3, #3262]	; 0xcbe
		default:
			break;
		}

	}
}
 8009ece:	bd38      	pop	{r3, r4, r5, pc}
			SetFirstDebugPinOn();
 8009ed0:	f7f7 f8b2 	bl	8001038 <SetFirstDebugPinOn>
			HAL_RTC_GetTime(kDataSaver.phRTCHandle, &kDataSaver.kTimeData, RTC_FORMAT_BCD);
 8009ed4:	4c43      	ldr	r4, [pc, #268]	; (8009fe4 <DataSaver_Operate+0x1b0>)
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	f604 41c4 	addw	r1, r4, #3268	; 0xcc4
 8009edc:	f8d4 0cc0 	ldr.w	r0, [r4, #3264]	; 0xcc0
 8009ee0:	f7fa fe19 	bl	8004b16 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(kDataSaver.phRTCHandle, &kDataSaver.kDateData, RTC_FORMAT_BCD);
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	f604 41d8 	addw	r1, r4, #3288	; 0xcd8
 8009eea:	f8d4 0cc0 	ldr.w	r0, [r4, #3264]	; 0xcc0
 8009eee:	f7fa fe3a 	bl	8004b66 <HAL_RTC_GetDate>
			SetFirstDebugPinOff();
 8009ef2:	f7f7 f8ab 	bl	800104c <SetFirstDebugPinOff>
			kDataSaver.eState = DataSaverState_StoreAverage;
 8009ef6:	2304      	movs	r3, #4
 8009ef8:	f884 3cbe 	strb.w	r3, [r4, #3262]	; 0xcbe
			break;
 8009efc:	e7e7      	b.n	8009ece <DataSaver_Operate+0x9a>
			if( kDataSaver.u8DataProcessingIndex < dMaximumChannels )
 8009efe:	4b39      	ldr	r3, [pc, #228]	; (8009fe4 <DataSaver_Operate+0x1b0>)
 8009f00:	f893 3cb0 	ldrb.w	r3, [r3, #3248]	; 0xcb0
 8009f04:	2b0f      	cmp	r3, #15
 8009f06:	d927      	bls.n	8009f58 <DataSaver_Operate+0x124>
				kDataSaver.u8SavingPage[kDataSaver.u8CurrentSavingPage][kDataSaver.u16SaveIndex++] = '\r';
 8009f08:	4a36      	ldr	r2, [pc, #216]	; (8009fe4 <DataSaver_Operate+0x1b0>)
 8009f0a:	7911      	ldrb	r1, [r2, #4]
 8009f0c:	88d0      	ldrh	r0, [r2, #6]
 8009f0e:	1c43      	adds	r3, r0, #1
 8009f10:	b29c      	uxth	r4, r3
 8009f12:	f240 6354 	movw	r3, #1620	; 0x654
 8009f16:	fb03 2301 	mla	r3, r3, r1, r2
 8009f1a:	4418      	add	r0, r3
 8009f1c:	250d      	movs	r5, #13
 8009f1e:	7205      	strb	r5, [r0, #8]
				kDataSaver.u8SavingPage[kDataSaver.u8CurrentSavingPage][kDataSaver.u16SaveIndex++] = '\n';
 8009f20:	1c60      	adds	r0, r4, #1
 8009f22:	b280      	uxth	r0, r0
 8009f24:	80d0      	strh	r0, [r2, #6]
 8009f26:	4423      	add	r3, r4
 8009f28:	240a      	movs	r4, #10
 8009f2a:	721c      	strb	r4, [r3, #8]
				kDataSaver.u8DataProcessingIndex = 0;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	f882 3cb0 	strb.w	r3, [r2, #3248]	; 0xcb0
				if( (kDataSaver.u16SaveIndex + ( dMaxDataLenght * dMaximumChannels)) > ( dSavingPageSize ) )
 8009f32:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8009f36:	4298      	cmp	r0, r3
 8009f38:	d928      	bls.n	8009f8c <DataSaver_Operate+0x158>
					kDataSaver.u16SaveIndex = 0;
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	80da      	strh	r2, [r3, #6]
					kDataSaver.u8PreviousSavingPage = kDataSaver.u8CurrentSavingPage;
 8009f40:	7159      	strb	r1, [r3, #5]
					kDataSaver.u8CurrentSavingPage++;
 8009f42:	3101      	adds	r1, #1
 8009f44:	b2c9      	uxtb	r1, r1
 8009f46:	7119      	strb	r1, [r3, #4]
					if(kDataSaver.u8CurrentSavingPage >= dSavingPageCount)
 8009f48:	2901      	cmp	r1, #1
 8009f4a:	d900      	bls.n	8009f4e <DataSaver_Operate+0x11a>
						kDataSaver.u8CurrentSavingPage = 0;
 8009f4c:	711a      	strb	r2, [r3, #4]
					kDataSaver.eState = DataSaverState_OpenFile;
 8009f4e:	4b25      	ldr	r3, [pc, #148]	; (8009fe4 <DataSaver_Operate+0x1b0>)
 8009f50:	2205      	movs	r2, #5
 8009f52:	f883 2cbe 	strb.w	r2, [r3, #3262]	; 0xcbe
 8009f56:	e7ba      	b.n	8009ece <DataSaver_Operate+0x9a>
						&kDataSaver.u8SavingPage[kDataSaver.u8CurrentSavingPage][kDataSaver.u16SaveIndex],
 8009f58:	4c22      	ldr	r4, [pc, #136]	; (8009fe4 <DataSaver_Operate+0x1b0>)
 8009f5a:	7920      	ldrb	r0, [r4, #4]
 8009f5c:	88e1      	ldrh	r1, [r4, #6]
						kDataSaver.pfAveragePointer[kDataSaver.u8DataProcessingIndex]);
 8009f5e:	f8d4 2cb8 	ldr.w	r2, [r4, #3256]	; 0xcb8
 8009f62:	eb02 0383 	add.w	r3, r2, r3, lsl #2
				FrameAssembler_ConvertFloatToCharArray(
 8009f66:	f240 6254 	movw	r2, #1620	; 0x654
 8009f6a:	fb02 1000 	mla	r0, r2, r0, r1
 8009f6e:	3008      	adds	r0, #8
 8009f70:	ed93 0a00 	vldr	s0, [r3]
 8009f74:	4420      	add	r0, r4
 8009f76:	f000 fb5b 	bl	800a630 <FrameAssembler_ConvertFloatToCharArray>
				kDataSaver.u16SaveIndex += dMaxDataLenght;
 8009f7a:	88e3      	ldrh	r3, [r4, #6]
 8009f7c:	330a      	adds	r3, #10
 8009f7e:	80e3      	strh	r3, [r4, #6]
				kDataSaver.u8DataProcessingIndex++;
 8009f80:	f894 3cb0 	ldrb.w	r3, [r4, #3248]	; 0xcb0
 8009f84:	3301      	adds	r3, #1
 8009f86:	f884 3cb0 	strb.w	r3, [r4, #3248]	; 0xcb0
 8009f8a:	e7a0      	b.n	8009ece <DataSaver_Operate+0x9a>
					kDataSaver.eState = DataSaverState_Wait;
 8009f8c:	4b15      	ldr	r3, [pc, #84]	; (8009fe4 <DataSaver_Operate+0x1b0>)
 8009f8e:	2200      	movs	r2, #0
 8009f90:	f883 2cbe 	strb.w	r2, [r3, #3262]	; 0xcbe
 8009f94:	e79b      	b.n	8009ece <DataSaver_Operate+0x9a>
			kDataSaver.kCardResult = f_open(&SDFile, "Test_6.txt", FA_OPEN_APPEND | FA_WRITE );
 8009f96:	2232      	movs	r2, #50	; 0x32
 8009f98:	4913      	ldr	r1, [pc, #76]	; (8009fe8 <DataSaver_Operate+0x1b4>)
 8009f9a:	4814      	ldr	r0, [pc, #80]	; (8009fec <DataSaver_Operate+0x1b8>)
 8009f9c:	f7ff fa56 	bl	800944c <f_open>
 8009fa0:	4b10      	ldr	r3, [pc, #64]	; (8009fe4 <DataSaver_Operate+0x1b0>)
 8009fa2:	f883 0cbf 	strb.w	r0, [r3, #3263]	; 0xcbf
			kDataSaver.eState = DataSaverState_CallSDSave;
 8009fa6:	2206      	movs	r2, #6
 8009fa8:	f883 2cbe 	strb.w	r2, [r3, #3262]	; 0xcbe
			break;
 8009fac:	e78f      	b.n	8009ece <DataSaver_Operate+0x9a>
			kDataSaver.kCardResult = f_write(&SDFile, &kDataSaver.u8SavingPage[kDataSaver.u8PreviousSavingPage][0], dSavingPageSize, &kWordCount);
 8009fae:	4c0d      	ldr	r4, [pc, #52]	; (8009fe4 <DataSaver_Operate+0x1b0>)
 8009fb0:	7961      	ldrb	r1, [r4, #5]
 8009fb2:	f240 6254 	movw	r2, #1620	; 0x654
 8009fb6:	fb02 f101 	mul.w	r1, r2, r1
 8009fba:	3108      	adds	r1, #8
 8009fbc:	4b0c      	ldr	r3, [pc, #48]	; (8009ff0 <DataSaver_Operate+0x1bc>)
 8009fbe:	4421      	add	r1, r4
 8009fc0:	480a      	ldr	r0, [pc, #40]	; (8009fec <DataSaver_Operate+0x1b8>)
 8009fc2:	f7ff fb56 	bl	8009672 <f_write>
 8009fc6:	f884 0cbf 	strb.w	r0, [r4, #3263]	; 0xcbf
			kDataSaver.eState = DataSaverState_CloseFile;
 8009fca:	2307      	movs	r3, #7
 8009fcc:	f884 3cbe 	strb.w	r3, [r4, #3262]	; 0xcbe
			break;
 8009fd0:	e77d      	b.n	8009ece <DataSaver_Operate+0x9a>
			f_close(&SDFile);
 8009fd2:	4806      	ldr	r0, [pc, #24]	; (8009fec <DataSaver_Operate+0x1b8>)
 8009fd4:	f7ff fc99 	bl	800990a <f_close>
			kDataSaver.eState = DataSaverState_Wait;
 8009fd8:	4b02      	ldr	r3, [pc, #8]	; (8009fe4 <DataSaver_Operate+0x1b0>)
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f883 2cbe 	strb.w	r2, [r3, #3262]	; 0xcbe
}
 8009fe0:	e775      	b.n	8009ece <DataSaver_Operate+0x9a>
 8009fe2:	bf00      	nop
 8009fe4:	200007f0 	.word	0x200007f0
 8009fe8:	0800e9b0 	.word	0x0800e9b0
 8009fec:	200019d0 	.word	0x200019d0
 8009ff0:	200014cc 	.word	0x200014cc

08009ff4 <DataSaver_NewDataAvailable>:

void DataSaver_NewDataAvailable()
{
 8009ff4:	b508      	push	{r3, lr}
	if( !kDataSaver.bNewDataAvailable )
 8009ff6:	4b08      	ldr	r3, [pc, #32]	; (800a018 <DataSaver_NewDataAvailable+0x24>)
 8009ff8:	789b      	ldrb	r3, [r3, #2]
 8009ffa:	b93b      	cbnz	r3, 800a00c <DataSaver_NewDataAvailable+0x18>
	{
		kDataSaver.bNewDataAvailable = true;
 8009ffc:	4806      	ldr	r0, [pc, #24]	; (800a018 <DataSaver_NewDataAvailable+0x24>)
 8009ffe:	2301      	movs	r3, #1
 800a000:	7083      	strb	r3, [r0, #2]
		DataHandler_AccessStorageMemoryInterchange(&kDataSaver.pkMeasurementPointer);
 800a002:	f600 40b4 	addw	r0, r0, #3252	; 0xcb4
 800a006:	f7ff fe85 	bl	8009d14 <DataHandler_AccessStorageMemoryInterchange>
	}
	else
	{
		AssertError(AppError_AveragingDataOverlaped);
	}
}
 800a00a:	bd08      	pop	{r3, pc}
		AssertError(AppError_AveragingDataOverlaped);
 800a00c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a010:	f7ff fd44 	bl	8009a9c <AssertError>
}
 800a014:	e7f9      	b.n	800a00a <DataSaver_NewDataAvailable+0x16>
 800a016:	bf00      	nop
 800a018:	200007f0 	.word	0x200007f0

0800a01c <DataSaver_TickAveragingPeriod>:

void DataSaver_TickAveragingPeriod()
{
 800a01c:	b508      	push	{r3, lr}
	if( kDataSaver.bEnabled )
 800a01e:	4b0d      	ldr	r3, [pc, #52]	; (800a054 <DataSaver_TickAveragingPeriod+0x38>)
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	b18b      	cbz	r3, 800a048 <DataSaver_TickAveragingPeriod+0x2c>
	{
		kDataSaver.u16TickCounter++;
 800a024:	4a0b      	ldr	r2, [pc, #44]	; (800a054 <DataSaver_TickAveragingPeriod+0x38>)
 800a026:	f8b2 3cbc 	ldrh.w	r3, [r2, #3260]	; 0xcbc
 800a02a:	3301      	adds	r3, #1
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	f8a2 3cbc 	strh.w	r3, [r2, #3260]	; 0xcbc

		if(kDataSaver.u16TickCounter >= ((uint16_t)dAveragingPeriodTicks ) )
 800a032:	2b07      	cmp	r3, #7
 800a034:	d908      	bls.n	800a048 <DataSaver_TickAveragingPeriod+0x2c>
		{
			kDataSaver.u16TickCounter = 0;
 800a036:	4613      	mov	r3, r2
 800a038:	2200      	movs	r2, #0
 800a03a:	f8a3 2cbc 	strh.w	r2, [r3, #3260]	; 0xcbc
			if( !kDataSaver.bAveragingPeriodElapsed )
 800a03e:	785b      	ldrb	r3, [r3, #1]
 800a040:	b91b      	cbnz	r3, 800a04a <DataSaver_TickAveragingPeriod+0x2e>
			{
				kDataSaver.bAveragingPeriodElapsed = true;
 800a042:	4b04      	ldr	r3, [pc, #16]	; (800a054 <DataSaver_TickAveragingPeriod+0x38>)
 800a044:	2201      	movs	r2, #1
 800a046:	705a      	strb	r2, [r3, #1]
			{
				AssertError(AppError_AveragingDataLost);
			}
		}
	}
}
 800a048:	bd08      	pop	{r3, pc}
				AssertError(AppError_AveragingDataLost);
 800a04a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a04e:	f7ff fd25 	bl	8009a9c <AssertError>
}
 800a052:	e7f9      	b.n	800a048 <DataSaver_TickAveragingPeriod+0x2c>
 800a054:	200007f0 	.word	0x200007f0

0800a058 <EventSystem_Initialize>:

static EventData_t kEventData;

void EventSystem_Initialize()
{
	kEventData.bInitalized = true;
 800a058:	4b01      	ldr	r3, [pc, #4]	; (800a060 <EventSystem_Initialize+0x8>)
 800a05a:	2201      	movs	r2, #1
 800a05c:	701a      	strb	r2, [r3, #0]
}
 800a05e:	4770      	bx	lr
 800a060:	200014d0 	.word	0x200014d0

0800a064 <EventSystem_HandleEvent>:
void EventSystem_HandleEvent()
{
 800a064:	b508      	push	{r3, lr}
	uint32_t u32EventCode = 0;

	u32EventCode = (uint32_t)Event_DataReadyToTransmit;
	if( (kEventData.u32EventRegister & u32EventCode) == u32EventCode )
 800a066:	4b1b      	ldr	r3, [pc, #108]	; (800a0d4 <EventSystem_HandleEvent+0x70>)
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	f013 0f01 	tst.w	r3, #1
 800a06e:	d10f      	bne.n	800a090 <EventSystem_HandleEvent+0x2c>
		ComManager_ArmTransmission();
		kEventData.u32EventRegister &= ~(u32EventCode);
	}

	u32EventCode = (uint32_t)Event_USBConnected;
	if( (kEventData.u32EventRegister & u32EventCode) == u32EventCode )
 800a070:	4b18      	ldr	r3, [pc, #96]	; (800a0d4 <EventSystem_HandleEvent+0x70>)
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	f013 0f02 	tst.w	r3, #2
 800a078:	d112      	bne.n	800a0a0 <EventSystem_HandleEvent+0x3c>
		CommManager_SetUSBConnectionState(USB_Connected);
		kEventData.u32EventRegister &= ~(u32EventCode);
	}

	u32EventCode = (uint32_t)Event_USBDisconnected;
	if( (kEventData.u32EventRegister & u32EventCode) == u32EventCode )
 800a07a:	4b16      	ldr	r3, [pc, #88]	; (800a0d4 <EventSystem_HandleEvent+0x70>)
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	f013 0f04 	tst.w	r3, #4
 800a082:	d116      	bne.n	800a0b2 <EventSystem_HandleEvent+0x4e>
		CommManager_SetUSBConnectionState(USB_Disconnected);
		kEventData.u32EventRegister &= ~(u32EventCode);
	}

	u32EventCode = (uint32_t)Event_DataReadyForAverage;
	if( (kEventData.u32EventRegister & u32EventCode) == u32EventCode )
 800a084:	4b13      	ldr	r3, [pc, #76]	; (800a0d4 <EventSystem_HandleEvent+0x70>)
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	f013 0f10 	tst.w	r3, #16
 800a08c:	d11a      	bne.n	800a0c4 <EventSystem_HandleEvent+0x60>
	{
		DataSaver_NewDataAvailable();
		kEventData.u32EventRegister &= ~(u32EventCode);
	}
}
 800a08e:	bd08      	pop	{r3, pc}
		ComManager_ArmTransmission();
 800a090:	f000 fa12 	bl	800a4b8 <ComManager_ArmTransmission>
		kEventData.u32EventRegister &= ~(u32EventCode);
 800a094:	4a0f      	ldr	r2, [pc, #60]	; (800a0d4 <EventSystem_HandleEvent+0x70>)
 800a096:	6853      	ldr	r3, [r2, #4]
 800a098:	f023 0301 	bic.w	r3, r3, #1
 800a09c:	6053      	str	r3, [r2, #4]
 800a09e:	e7e7      	b.n	800a070 <EventSystem_HandleEvent+0xc>
		CommManager_SetUSBConnectionState(USB_Connected);
 800a0a0:	2001      	movs	r0, #1
 800a0a2:	f000 f9f3 	bl	800a48c <CommManager_SetUSBConnectionState>
		kEventData.u32EventRegister &= ~(u32EventCode);
 800a0a6:	4a0b      	ldr	r2, [pc, #44]	; (800a0d4 <EventSystem_HandleEvent+0x70>)
 800a0a8:	6853      	ldr	r3, [r2, #4]
 800a0aa:	f023 0302 	bic.w	r3, r3, #2
 800a0ae:	6053      	str	r3, [r2, #4]
 800a0b0:	e7e3      	b.n	800a07a <EventSystem_HandleEvent+0x16>
		CommManager_SetUSBConnectionState(USB_Disconnected);
 800a0b2:	2000      	movs	r0, #0
 800a0b4:	f000 f9ea 	bl	800a48c <CommManager_SetUSBConnectionState>
		kEventData.u32EventRegister &= ~(u32EventCode);
 800a0b8:	4a06      	ldr	r2, [pc, #24]	; (800a0d4 <EventSystem_HandleEvent+0x70>)
 800a0ba:	6853      	ldr	r3, [r2, #4]
 800a0bc:	f023 0304 	bic.w	r3, r3, #4
 800a0c0:	6053      	str	r3, [r2, #4]
 800a0c2:	e7df      	b.n	800a084 <EventSystem_HandleEvent+0x20>
		DataSaver_NewDataAvailable();
 800a0c4:	f7ff ff96 	bl	8009ff4 <DataSaver_NewDataAvailable>
		kEventData.u32EventRegister &= ~(u32EventCode);
 800a0c8:	4a02      	ldr	r2, [pc, #8]	; (800a0d4 <EventSystem_HandleEvent+0x70>)
 800a0ca:	6853      	ldr	r3, [r2, #4]
 800a0cc:	f023 0310 	bic.w	r3, r3, #16
 800a0d0:	6053      	str	r3, [r2, #4]
}
 800a0d2:	e7dc      	b.n	800a08e <EventSystem_HandleEvent+0x2a>
 800a0d4:	200014d0 	.word	0x200014d0

0800a0d8 <EventSystem_Signalize>:

void EventSystem_Signalize(Event_t eEvent)
{
 800a0d8:	b508      	push	{r3, lr}
	uint32_t u32EventCode = (uint32_t)eEvent;

	if(kEventData.bInitalized)
 800a0da:	4b08      	ldr	r3, [pc, #32]	; (800a0fc <EventSystem_Signalize+0x24>)
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	b13b      	cbz	r3, 800a0f0 <EventSystem_Signalize+0x18>
	{
		if( (kEventData.u32EventRegister & u32EventCode) == u32EventCode )
 800a0e0:	4b06      	ldr	r3, [pc, #24]	; (800a0fc <EventSystem_Signalize+0x24>)
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	ea30 0203 	bics.w	r2, r0, r3
 800a0e8:	d003      	beq.n	800a0f2 <EventSystem_Signalize+0x1a>
		{
			AssertError(AppError_EventOverlap); // Event already set, before handling it
		}
		else
		{
			kEventData.u32EventRegister |= u32EventCode; // Set bit in register according to the event code
 800a0ea:	4318      	orrs	r0, r3
 800a0ec:	4b03      	ldr	r3, [pc, #12]	; (800a0fc <EventSystem_Signalize+0x24>)
 800a0ee:	6058      	str	r0, [r3, #4]
		}
	}
}
 800a0f0:	bd08      	pop	{r3, pc}
			AssertError(AppError_EventOverlap); // Event already set, before handling it
 800a0f2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a0f6:	f7ff fcd1 	bl	8009a9c <AssertError>
 800a0fa:	e7f9      	b.n	800a0f0 <EventSystem_Signalize+0x18>
 800a0fc:	200014d0 	.word	0x200014d0

0800a100 <HandlesAssigner_ShareHandle>:
}HandleAssignerData_t;

static HandleAssignerData_t kHandleAssignerData;

void HandlesAssigner_ShareHandle(void * phHandle, HandleType_t eHandleDeviceType)
{
 800a100:	b508      	push	{r3, lr}
	switch(eHandleDeviceType)
 800a102:	2906      	cmp	r1, #6
 800a104:	d81a      	bhi.n	800a13c <HandlesAssigner_ShareHandle+0x3c>
 800a106:	e8df f001 	tbb	[pc, r1]
 800a10a:	0704      	.short	0x0704
 800a10c:	13100d0a 	.word	0x13100d0a
 800a110:	16          	.byte	0x16
 800a111:	00          	.byte	0x00
	{
		case (eHandle_TIM2):
			kHandleAssignerData.phTIM2 = phHandle;
 800a112:	4b0d      	ldr	r3, [pc, #52]	; (800a148 <HandlesAssigner_ShareHandle+0x48>)
 800a114:	6158      	str	r0, [r3, #20]
			break;
		default:
			AssertError(AppError_HALHandleAssignmentError);
			break;
	}
}
 800a116:	bd08      	pop	{r3, pc}
			kHandleAssignerData.phI2C1 = phHandle;
 800a118:	4b0b      	ldr	r3, [pc, #44]	; (800a148 <HandlesAssigner_ShareHandle+0x48>)
 800a11a:	6058      	str	r0, [r3, #4]
			break;
 800a11c:	e7fb      	b.n	800a116 <HandlesAssigner_ShareHandle+0x16>
			kHandleAssignerData.phI2C2 = phHandle;
 800a11e:	4b0a      	ldr	r3, [pc, #40]	; (800a148 <HandlesAssigner_ShareHandle+0x48>)
 800a120:	6098      	str	r0, [r3, #8]
			break;
 800a122:	e7f8      	b.n	800a116 <HandlesAssigner_ShareHandle+0x16>
			kHandleAssignerData.phRTC = phHandle;
 800a124:	4b08      	ldr	r3, [pc, #32]	; (800a148 <HandlesAssigner_ShareHandle+0x48>)
 800a126:	60d8      	str	r0, [r3, #12]
			break;
 800a128:	e7f5      	b.n	800a116 <HandlesAssigner_ShareHandle+0x16>
			kHandleAssignerData.phSD = phHandle;
 800a12a:	4b07      	ldr	r3, [pc, #28]	; (800a148 <HandlesAssigner_ShareHandle+0x48>)
 800a12c:	6118      	str	r0, [r3, #16]
			break;
 800a12e:	e7f2      	b.n	800a116 <HandlesAssigner_ShareHandle+0x16>
			kHandleAssignerData.phADC1 = phHandle;
 800a130:	4b05      	ldr	r3, [pc, #20]	; (800a148 <HandlesAssigner_ShareHandle+0x48>)
 800a132:	6018      	str	r0, [r3, #0]
			break;
 800a134:	e7ef      	b.n	800a116 <HandlesAssigner_ShareHandle+0x16>
			kHandleAssignerData.phUART1 = phHandle;
 800a136:	4b04      	ldr	r3, [pc, #16]	; (800a148 <HandlesAssigner_ShareHandle+0x48>)
 800a138:	6198      	str	r0, [r3, #24]
			break;
 800a13a:	e7ec      	b.n	800a116 <HandlesAssigner_ShareHandle+0x16>
			AssertError(AppError_HALHandleAssignmentError);
 800a13c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a140:	f7ff fcac 	bl	8009a9c <AssertError>
}
 800a144:	e7e7      	b.n	800a116 <HandlesAssigner_ShareHandle+0x16>
 800a146:	bf00      	nop
 800a148:	200014d8 	.word	0x200014d8

0800a14c <HandlesAssigner_GetHandle>:

void* HandlesAssigner_GetHandle(HandleType_t eHandleDeviceType)
{
 800a14c:	b510      	push	{r4, lr}
	void * phHandle;
	switch(eHandleDeviceType)
 800a14e:	2806      	cmp	r0, #6
 800a150:	d81b      	bhi.n	800a18a <HandlesAssigner_GetHandle+0x3e>
 800a152:	e8df f000 	tbb	[pc, r0]
 800a156:	0804      	.short	0x0804
 800a158:	14110e0b 	.word	0x14110e0b
 800a15c:	17          	.byte	0x17
 800a15d:	00          	.byte	0x00
	{
		case (eHandle_TIM2):
			phHandle = kHandleAssignerData.phTIM2;
 800a15e:	4b0d      	ldr	r3, [pc, #52]	; (800a194 <HandlesAssigner_GetHandle+0x48>)
 800a160:	695c      	ldr	r4, [r3, #20]
		default:
			AssertError(AppError_HALHandleAssignmentError);
			break;
	}
	return phHandle;
}
 800a162:	4620      	mov	r0, r4
 800a164:	bd10      	pop	{r4, pc}
			phHandle = kHandleAssignerData.phI2C1;
 800a166:	4b0b      	ldr	r3, [pc, #44]	; (800a194 <HandlesAssigner_GetHandle+0x48>)
 800a168:	685c      	ldr	r4, [r3, #4]
			break;
 800a16a:	e7fa      	b.n	800a162 <HandlesAssigner_GetHandle+0x16>
			phHandle = kHandleAssignerData.phI2C2;
 800a16c:	4b09      	ldr	r3, [pc, #36]	; (800a194 <HandlesAssigner_GetHandle+0x48>)
 800a16e:	689c      	ldr	r4, [r3, #8]
			break;
 800a170:	e7f7      	b.n	800a162 <HandlesAssigner_GetHandle+0x16>
			phHandle = kHandleAssignerData.phRTC;
 800a172:	4b08      	ldr	r3, [pc, #32]	; (800a194 <HandlesAssigner_GetHandle+0x48>)
 800a174:	68dc      	ldr	r4, [r3, #12]
			break;
 800a176:	e7f4      	b.n	800a162 <HandlesAssigner_GetHandle+0x16>
			phHandle = kHandleAssignerData.phSD;
 800a178:	4b06      	ldr	r3, [pc, #24]	; (800a194 <HandlesAssigner_GetHandle+0x48>)
 800a17a:	691c      	ldr	r4, [r3, #16]
			break;
 800a17c:	e7f1      	b.n	800a162 <HandlesAssigner_GetHandle+0x16>
			phHandle = kHandleAssignerData.phADC1;
 800a17e:	4b05      	ldr	r3, [pc, #20]	; (800a194 <HandlesAssigner_GetHandle+0x48>)
 800a180:	681c      	ldr	r4, [r3, #0]
			break;
 800a182:	e7ee      	b.n	800a162 <HandlesAssigner_GetHandle+0x16>
			phHandle = kHandleAssignerData.phUART1;
 800a184:	4b03      	ldr	r3, [pc, #12]	; (800a194 <HandlesAssigner_GetHandle+0x48>)
 800a186:	699c      	ldr	r4, [r3, #24]
			break;
 800a188:	e7eb      	b.n	800a162 <HandlesAssigner_GetHandle+0x16>
			AssertError(AppError_HALHandleAssignmentError);
 800a18a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a18e:	f7ff fc85 	bl	8009a9c <AssertError>
	return phHandle;
 800a192:	e7e6      	b.n	800a162 <HandlesAssigner_GetHandle+0x16>
 800a194:	200014d8 	.word	0x200014d8

0800a198 <CallForTransmissionEvent>:
#include "ModuleInterconnect.h"
#include "EventSystem.h"
#include "DataCommon.h"

void CallForTransmissionEvent()
{
 800a198:	b508      	push	{r3, lr}
	EventSystem_Signalize(Event_DataReadyToTransmit);
 800a19a:	2001      	movs	r0, #1
 800a19c:	f7ff ff9c 	bl	800a0d8 <EventSystem_Signalize>
}
 800a1a0:	bd08      	pop	{r3, pc}

0800a1a2 <CallForUSBConnection>:

void CallForUSBConnection()
{
 800a1a2:	b508      	push	{r3, lr}
	EventSystem_Signalize(Event_USBConnected);
 800a1a4:	2002      	movs	r0, #2
 800a1a6:	f7ff ff97 	bl	800a0d8 <EventSystem_Signalize>
}
 800a1aa:	bd08      	pop	{r3, pc}

0800a1ac <CallForUSBDisonnection>:
void CallForUSBDisonnection()
{
 800a1ac:	b508      	push	{r3, lr}
	EventSystem_Signalize(Event_USBDisconnected);
 800a1ae:	2004      	movs	r0, #4
 800a1b0:	f7ff ff92 	bl	800a0d8 <EventSystem_Signalize>
}
 800a1b4:	bd08      	pop	{r3, pc}

0800a1b6 <CallForAverageAddition>:

void CallForAverageAddition()
{
 800a1b6:	b508      	push	{r3, lr}
	EventSystem_Signalize(Event_DataReadyForAverage);
 800a1b8:	2010      	movs	r0, #16
 800a1ba:	f7ff ff8d 	bl	800a0d8 <EventSystem_Signalize>
}
 800a1be:	bd08      	pop	{r3, pc}

0800a1c0 <TempCollect_Operate>:
	.bEnabledFlag = false,
	.eState = TempCollect_EntryState,
};

void TempCollect_Operate()
{
 800a1c0:	b510      	push	{r4, lr}
	switch(kTemperatureData.eState)
 800a1c2:	4b77      	ldr	r3, [pc, #476]	; (800a3a0 <TempCollect_Operate+0x1e0>)
 800a1c4:	79db      	ldrb	r3, [r3, #7]
 800a1c6:	2b05      	cmp	r3, #5
 800a1c8:	f200 80e4 	bhi.w	800a394 <TempCollect_Operate+0x1d4>
 800a1cc:	e8df f003 	tbb	[pc, r3]
 800a1d0:	77160803 	.word	0x77160803
 800a1d4:	40bb      	.short	0x40bb
	{
	case(TempCollect_EntryState):
		AssertError(AppError_TempCollectUninitialized); // Incorrect entry - before initialization
 800a1d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a1da:	f7ff fc5f 	bl	8009a9c <AssertError>
		break;
	default:
		AssertError(AppError_TempCollectDefaultState); // Incorrect entry
	break;
	}
}
 800a1de:	bd10      	pop	{r4, pc}
		if(kTemperatureData.bScheduleMeasurement)
 800a1e0:	4b6f      	ldr	r3, [pc, #444]	; (800a3a0 <TempCollect_Operate+0x1e0>)
 800a1e2:	799b      	ldrb	r3, [r3, #6]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d0fa      	beq.n	800a1de <TempCollect_Operate+0x1e>
			kTemperatureData.eState = TempCollect_TemperatureReadRequest;
 800a1e8:	4b6d      	ldr	r3, [pc, #436]	; (800a3a0 <TempCollect_Operate+0x1e0>)
 800a1ea:	2202      	movs	r2, #2
 800a1ec:	71da      	strb	r2, [r3, #7]
			kTemperatureData.u16ArrayASensorIndex = 0;
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	829a      	strh	r2, [r3, #20]
			kTemperatureData.u16ArrayBSensorIndex = 0;
 800a1f2:	82da      	strh	r2, [r3, #22]
			kTemperatureData.bReadFinished[0] = false;
 800a1f4:	721a      	strb	r2, [r3, #8]
			kTemperatureData.bReadFinished[1] = false;
 800a1f6:	725a      	strb	r2, [r3, #9]
			kTemperatureData.u8TimeoutCounter = 0;
 800a1f8:	771a      	strb	r2, [r3, #28]
 800a1fa:	e7f0      	b.n	800a1de <TempCollect_Operate+0x1e>
		kTemperatureData.bScheduleMeasurement = false;
 800a1fc:	4b68      	ldr	r3, [pc, #416]	; (800a3a0 <TempCollect_Operate+0x1e0>)
 800a1fe:	2200      	movs	r2, #0
 800a200:	719a      	strb	r2, [r3, #6]
		if(kTemperatureData.u16ArrayASensorIndex < Sensor_I2CA_DeviceCount)
 800a202:	8a9b      	ldrh	r3, [r3, #20]
 800a204:	2b07      	cmp	r3, #7
 800a206:	d80d      	bhi.n	800a224 <TempCollect_Operate+0x64>
			kTemperatureData.bStateReady[0] = false;
 800a208:	4a65      	ldr	r2, [pc, #404]	; (800a3a0 <TempCollect_Operate+0x1e0>)
 800a20a:	2100      	movs	r1, #0
 800a20c:	7291      	strb	r1, [r2, #10]
			kaSensorArrayDataA[kTemperatureData.u16ArrayASensorIndex].fcnReadTemperature(&kaSensorArrayDataA[kTemperatureData.u16ArrayASensorIndex]);
 800a20e:	4865      	ldr	r0, [pc, #404]	; (800a3a4 <TempCollect_Operate+0x1e4>)
 800a210:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800a214:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800a218:	6912      	ldr	r2, [r2, #16]
 800a21a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a21e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800a222:	4790      	blx	r2
		if(kTemperatureData.u16ArrayBSensorIndex < Sensor_I2CB_DeviceCount)
 800a224:	4b5e      	ldr	r3, [pc, #376]	; (800a3a0 <TempCollect_Operate+0x1e0>)
 800a226:	8adb      	ldrh	r3, [r3, #22]
 800a228:	2b07      	cmp	r3, #7
 800a22a:	d80d      	bhi.n	800a248 <TempCollect_Operate+0x88>
			kTemperatureData.bStateReady[1] = false;
 800a22c:	4a5c      	ldr	r2, [pc, #368]	; (800a3a0 <TempCollect_Operate+0x1e0>)
 800a22e:	2100      	movs	r1, #0
 800a230:	72d1      	strb	r1, [r2, #11]
			kaSensorArrayDataB[kTemperatureData.u16ArrayBSensorIndex].fcnReadTemperature(&kaSensorArrayDataB[kTemperatureData.u16ArrayBSensorIndex]);
 800a232:	485d      	ldr	r0, [pc, #372]	; (800a3a8 <TempCollect_Operate+0x1e8>)
 800a234:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800a238:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800a23c:	6912      	ldr	r2, [r2, #16]
 800a23e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a242:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800a246:	4790      	blx	r2
		kTemperatureData.eState = TempCollect_Waiting;
 800a248:	4b55      	ldr	r3, [pc, #340]	; (800a3a0 <TempCollect_Operate+0x1e0>)
 800a24a:	2205      	movs	r2, #5
 800a24c:	71da      	strb	r2, [r3, #7]
		break;
 800a24e:	e7c6      	b.n	800a1de <TempCollect_Operate+0x1e>
		if(kTemperatureData.bStateReady[0] && kTemperatureData.bStateReady[1])
 800a250:	4b53      	ldr	r3, [pc, #332]	; (800a3a0 <TempCollect_Operate+0x1e0>)
 800a252:	7a9a      	ldrb	r2, [r3, #10]
 800a254:	b13a      	cbz	r2, 800a266 <TempCollect_Operate+0xa6>
 800a256:	7adb      	ldrb	r3, [r3, #11]
 800a258:	b12b      	cbz	r3, 800a266 <TempCollect_Operate+0xa6>
			kTemperatureData.eState = TempCollect_ProcessData;
 800a25a:	4b51      	ldr	r3, [pc, #324]	; (800a3a0 <TempCollect_Operate+0x1e0>)
 800a25c:	2203      	movs	r2, #3
 800a25e:	71da      	strb	r2, [r3, #7]
			kTemperatureData.u8TimeoutCounter = 0;
 800a260:	2200      	movs	r2, #0
 800a262:	771a      	strb	r2, [r3, #28]
 800a264:	e7bb      	b.n	800a1de <TempCollect_Operate+0x1e>
			kTemperatureData.u8TimeoutCounter++;
 800a266:	494e      	ldr	r1, [pc, #312]	; (800a3a0 <TempCollect_Operate+0x1e0>)
 800a268:	7f0b      	ldrb	r3, [r1, #28]
 800a26a:	3301      	adds	r3, #1
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	770b      	strb	r3, [r1, #28]
			if( (kTemperatureData.u8TimeoutCounter > dTimeoutMaxWait) || kTemperatureData.bErrorOnArray[0] || kTemperatureData.bErrorOnArray[1] )
 800a270:	2b0f      	cmp	r3, #15
 800a272:	d806      	bhi.n	800a282 <TempCollect_Operate+0xc2>
 800a274:	69cb      	ldr	r3, [r1, #28]
 800a276:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a27a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d0ad      	beq.n	800a1de <TempCollect_Operate+0x1e>
				kTemperatureData.u8TimeoutCounter = 0;
 800a282:	4b47      	ldr	r3, [pc, #284]	; (800a3a0 <TempCollect_Operate+0x1e0>)
 800a284:	2100      	movs	r1, #0
 800a286:	7719      	strb	r1, [r3, #28]
				if(!kTemperatureData.bStateReady[0] || kTemperatureData.bErrorOnArray[0])
 800a288:	b10a      	cbz	r2, 800a28e <TempCollect_Operate+0xce>
 800a28a:	7f5b      	ldrb	r3, [r3, #29]
 800a28c:	b133      	cbz	r3, 800a29c <TempCollect_Operate+0xdc>
					kTemperatureData.bErrorOnArray[0] = true;
 800a28e:	4b44      	ldr	r3, [pc, #272]	; (800a3a0 <TempCollect_Operate+0x1e0>)
 800a290:	2201      	movs	r2, #1
 800a292:	775a      	strb	r2, [r3, #29]
					AssertError(AppError_ArrayAError);
 800a294:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a298:	f7ff fc00 	bl	8009a9c <AssertError>
				if(!kTemperatureData.bStateReady[1] || kTemperatureData.bErrorOnArray[1])
 800a29c:	4b40      	ldr	r3, [pc, #256]	; (800a3a0 <TempCollect_Operate+0x1e0>)
 800a29e:	7adb      	ldrb	r3, [r3, #11]
 800a2a0:	b113      	cbz	r3, 800a2a8 <TempCollect_Operate+0xe8>
 800a2a2:	4b3f      	ldr	r3, [pc, #252]	; (800a3a0 <TempCollect_Operate+0x1e0>)
 800a2a4:	7f9b      	ldrb	r3, [r3, #30]
 800a2a6:	b133      	cbz	r3, 800a2b6 <TempCollect_Operate+0xf6>
					kTemperatureData.bErrorOnArray[1] = true;
 800a2a8:	4b3d      	ldr	r3, [pc, #244]	; (800a3a0 <TempCollect_Operate+0x1e0>)
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	779a      	strb	r2, [r3, #30]
					AssertError(AppError_ArrayBError);
 800a2ae:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a2b2:	f7ff fbf3 	bl	8009a9c <AssertError>
				kTemperatureData.eState = TempCollect_ProcessData;
 800a2b6:	4b3a      	ldr	r3, [pc, #232]	; (800a3a0 <TempCollect_Operate+0x1e0>)
 800a2b8:	2203      	movs	r2, #3
 800a2ba:	71da      	strb	r2, [r3, #7]
 800a2bc:	e78f      	b.n	800a1de <TempCollect_Operate+0x1e>
		if( !kTemperatureData.bReadFinished[0] )
 800a2be:	4b38      	ldr	r3, [pc, #224]	; (800a3a0 <TempCollect_Operate+0x1e0>)
 800a2c0:	7a1b      	ldrb	r3, [r3, #8]
 800a2c2:	b963      	cbnz	r3, 800a2de <TempCollect_Operate+0x11e>
			if(kTemperatureData.bErrorOnArray[0])
 800a2c4:	4b36      	ldr	r3, [pc, #216]	; (800a3a0 <TempCollect_Operate+0x1e0>)
 800a2c6:	7f5b      	ldrb	r3, [r3, #29]
 800a2c8:	b1eb      	cbz	r3, 800a306 <TempCollect_Operate+0x146>
				kTemperatureData.fConvertedTemperature[0] = dErrorIndication;
 800a2ca:	4b35      	ldr	r3, [pc, #212]	; (800a3a0 <TempCollect_Operate+0x1e0>)
 800a2cc:	4a37      	ldr	r2, [pc, #220]	; (800a3ac <TempCollect_Operate+0x1ec>)
 800a2ce:	60da      	str	r2, [r3, #12]
				kTemperatureData.bErrorOnArray[0] = false;
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	775a      	strb	r2, [r3, #29]
		DataHandler_StoreMeasurement(kTemperatureData.fConvertedTemperature[0]);
 800a2d4:	4b32      	ldr	r3, [pc, #200]	; (800a3a0 <TempCollect_Operate+0x1e0>)
 800a2d6:	ed93 0a03 	vldr	s0, [r3, #12]
 800a2da:	f7ff fceb 	bl	8009cb4 <DataHandler_StoreMeasurement>
		if( !kTemperatureData.bReadFinished[1] )
 800a2de:	4b30      	ldr	r3, [pc, #192]	; (800a3a0 <TempCollect_Operate+0x1e0>)
 800a2e0:	7a5b      	ldrb	r3, [r3, #9]
 800a2e2:	b963      	cbnz	r3, 800a2fe <TempCollect_Operate+0x13e>
			if(kTemperatureData.bErrorOnArray[1])
 800a2e4:	4b2e      	ldr	r3, [pc, #184]	; (800a3a0 <TempCollect_Operate+0x1e0>)
 800a2e6:	7f9b      	ldrb	r3, [r3, #30]
 800a2e8:	b1eb      	cbz	r3, 800a326 <TempCollect_Operate+0x166>
				kTemperatureData.fConvertedTemperature[1] = dErrorIndication;
 800a2ea:	4b2d      	ldr	r3, [pc, #180]	; (800a3a0 <TempCollect_Operate+0x1e0>)
 800a2ec:	4a2f      	ldr	r2, [pc, #188]	; (800a3ac <TempCollect_Operate+0x1ec>)
 800a2ee:	611a      	str	r2, [r3, #16]
				kTemperatureData.bErrorOnArray[1] = false;
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	779a      	strb	r2, [r3, #30]
			DataHandler_StoreMeasurement(kTemperatureData.fConvertedTemperature[1]);
 800a2f4:	4b2a      	ldr	r3, [pc, #168]	; (800a3a0 <TempCollect_Operate+0x1e0>)
 800a2f6:	ed93 0a04 	vldr	s0, [r3, #16]
 800a2fa:	f7ff fcdb 	bl	8009cb4 <DataHandler_StoreMeasurement>
		kTemperatureData.eState = TempCollect_ArmNewReading;
 800a2fe:	4b28      	ldr	r3, [pc, #160]	; (800a3a0 <TempCollect_Operate+0x1e0>)
 800a300:	2204      	movs	r2, #4
 800a302:	71da      	strb	r2, [r3, #7]
		break;
 800a304:	e76b      	b.n	800a1de <TempCollect_Operate+0x1e>
				kTemperatureData.fConvertedTemperature[0] = kaSensorArrayDataA[kTemperatureData.u16ArrayASensorIndex].fcnDecodeTemperature(&kaSensorArrayDataA[kTemperatureData.u16ArrayASensorIndex]);
 800a306:	4c26      	ldr	r4, [pc, #152]	; (800a3a0 <TempCollect_Operate+0x1e0>)
 800a308:	8aa3      	ldrh	r3, [r4, #20]
 800a30a:	4826      	ldr	r0, [pc, #152]	; (800a3a4 <TempCollect_Operate+0x1e4>)
 800a30c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800a310:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800a314:	68d2      	ldr	r2, [r2, #12]
 800a316:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a31a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800a31e:	4790      	blx	r2
 800a320:	ed84 0a03 	vstr	s0, [r4, #12]
 800a324:	e7d6      	b.n	800a2d4 <TempCollect_Operate+0x114>
				kTemperatureData.fConvertedTemperature[1] = kaSensorArrayDataB[kTemperatureData.u16ArrayBSensorIndex].fcnDecodeTemperature(&kaSensorArrayDataB[kTemperatureData.u16ArrayBSensorIndex]);
 800a326:	4c1e      	ldr	r4, [pc, #120]	; (800a3a0 <TempCollect_Operate+0x1e0>)
 800a328:	8ae3      	ldrh	r3, [r4, #22]
 800a32a:	481f      	ldr	r0, [pc, #124]	; (800a3a8 <TempCollect_Operate+0x1e8>)
 800a32c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800a330:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800a334:	68d2      	ldr	r2, [r2, #12]
 800a336:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a33a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800a33e:	4790      	blx	r2
 800a340:	ed84 0a04 	vstr	s0, [r4, #16]
 800a344:	e7d6      	b.n	800a2f4 <TempCollect_Operate+0x134>
		kTemperatureData.u16ArrayASensorIndex++;
 800a346:	4a16      	ldr	r2, [pc, #88]	; (800a3a0 <TempCollect_Operate+0x1e0>)
 800a348:	8a93      	ldrh	r3, [r2, #20]
 800a34a:	3301      	adds	r3, #1
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	8293      	strh	r3, [r2, #20]
		if( kTemperatureData.u16ArrayASensorIndex >= Sensor_I2CA_DeviceCount)
 800a350:	2b07      	cmp	r3, #7
 800a352:	d902      	bls.n	800a35a <TempCollect_Operate+0x19a>
			kTemperatureData.bReadFinished[0] = true;
 800a354:	4613      	mov	r3, r2
 800a356:	2201      	movs	r2, #1
 800a358:	721a      	strb	r2, [r3, #8]
		kTemperatureData.u16ArrayBSensorIndex++;
 800a35a:	4a11      	ldr	r2, [pc, #68]	; (800a3a0 <TempCollect_Operate+0x1e0>)
 800a35c:	8ad3      	ldrh	r3, [r2, #22]
 800a35e:	3301      	adds	r3, #1
 800a360:	b29b      	uxth	r3, r3
 800a362:	82d3      	strh	r3, [r2, #22]
		if( kTemperatureData.u16ArrayBSensorIndex >= Sensor_I2CB_DeviceCount)
 800a364:	2b07      	cmp	r3, #7
 800a366:	d902      	bls.n	800a36e <TempCollect_Operate+0x1ae>
			kTemperatureData.bReadFinished[1] = true;
 800a368:	4613      	mov	r3, r2
 800a36a:	2201      	movs	r2, #1
 800a36c:	725a      	strb	r2, [r3, #9]
		if ( kTemperatureData.bReadFinished[0] && kTemperatureData.bReadFinished[1] )
 800a36e:	4b0c      	ldr	r3, [pc, #48]	; (800a3a0 <TempCollect_Operate+0x1e0>)
 800a370:	7a1b      	ldrb	r3, [r3, #8]
 800a372:	b113      	cbz	r3, 800a37a <TempCollect_Operate+0x1ba>
 800a374:	4b0a      	ldr	r3, [pc, #40]	; (800a3a0 <TempCollect_Operate+0x1e0>)
 800a376:	7a5b      	ldrb	r3, [r3, #9]
 800a378:	b91b      	cbnz	r3, 800a382 <TempCollect_Operate+0x1c2>
			kTemperatureData.eState = TempCollect_TemperatureReadRequest;
 800a37a:	4b09      	ldr	r3, [pc, #36]	; (800a3a0 <TempCollect_Operate+0x1e0>)
 800a37c:	2202      	movs	r2, #2
 800a37e:	71da      	strb	r2, [r3, #7]
 800a380:	e72d      	b.n	800a1de <TempCollect_Operate+0x1e>
			kTemperatureData.eState = TempCollect_Initialized;
 800a382:	4b07      	ldr	r3, [pc, #28]	; (800a3a0 <TempCollect_Operate+0x1e0>)
 800a384:	2201      	movs	r2, #1
 800a386:	71da      	strb	r2, [r3, #7]
			DataHandler_OpenNewMeasurement(kTemperatureData.u32MeasurementCounter++);
 800a388:	6998      	ldr	r0, [r3, #24]
 800a38a:	1882      	adds	r2, r0, r2
 800a38c:	619a      	str	r2, [r3, #24]
 800a38e:	f7ff fc4d 	bl	8009c2c <DataHandler_OpenNewMeasurement>
 800a392:	e724      	b.n	800a1de <TempCollect_Operate+0x1e>
		AssertError(AppError_TempCollectDefaultState); // Incorrect entry
 800a394:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a398:	f7ff fb80 	bl	8009a9c <AssertError>
}
 800a39c:	e71f      	b.n	800a1de <TempCollect_Operate+0x1e>
 800a39e:	bf00      	nop
 800a3a0:	200014f8 	.word	0x200014f8
 800a3a4:	20001848 	.word	0x20001848
 800a3a8:	20001908 	.word	0x20001908
 800a3ac:	43480000 	.word	0x43480000

0800a3b0 <TempCollect_Initialize>:

void TempCollect_Initialize()
{
 800a3b0:	b538      	push	{r3, r4, r5, lr}
	kTemperatureData.eState = TempCollect_Initialized;
 800a3b2:	4b1d      	ldr	r3, [pc, #116]	; (800a428 <TempCollect_Initialize+0x78>)
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	71da      	strb	r2, [r3, #7]
	kTemperatureData.bEnabledFlag = true;
 800a3b8:	715a      	strb	r2, [r3, #5]
	{
		kTemperatureData.bStateReady[1] = true;
	}
	/* Sensor configuration in blocking mode: once during startup */
	//todo: Reconsider the implementation
	for(uint8_t u8Idx = 0; u8Idx < Sensor_I2CA_DeviceCount; u8Idx++ )
 800a3ba:	2400      	movs	r4, #0
 800a3bc:	e001      	b.n	800a3c2 <TempCollect_Initialize+0x12>
 800a3be:	3401      	adds	r4, #1
 800a3c0:	b2e4      	uxtb	r4, r4
 800a3c2:	2c07      	cmp	r4, #7
 800a3c4:	d814      	bhi.n	800a3f0 <TempCollect_Initialize+0x40>
	{
		if (kaSensorArrayDataA[u8Idx].eSensorType == eSensor_MCP9803)
 800a3c6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800a3ca:	00da      	lsls	r2, r3, #3
 800a3cc:	4b17      	ldr	r3, [pc, #92]	; (800a42c <TempCollect_Initialize+0x7c>)
 800a3ce:	4413      	add	r3, r2
 800a3d0:	7adb      	ldrb	r3, [r3, #11]
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d1f3      	bne.n	800a3be <TempCollect_Initialize+0xe>
		{
			kaSensorArrayDataA[u8Idx].fcnSendConfig(&kaSensorArrayDataA[u8Idx], eMCP9803_Resolution_12bit);
 800a3d6:	4815      	ldr	r0, [pc, #84]	; (800a42c <TempCollect_Initialize+0x7c>)
 800a3d8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800a3dc:	00d3      	lsls	r3, r2, #3
 800a3de:	4403      	add	r3, r0
 800a3e0:	695d      	ldr	r5, [r3, #20]
 800a3e2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800a3e6:	00d3      	lsls	r3, r2, #3
 800a3e8:	2160      	movs	r1, #96	; 0x60
 800a3ea:	4418      	add	r0, r3
 800a3ec:	47a8      	blx	r5
 800a3ee:	e7e6      	b.n	800a3be <TempCollect_Initialize+0xe>
		}
	}
	for(uint8_t u8Idx = 0; u8Idx < Sensor_I2CB_DeviceCount; u8Idx++ )
 800a3f0:	2400      	movs	r4, #0
 800a3f2:	e001      	b.n	800a3f8 <TempCollect_Initialize+0x48>
 800a3f4:	3401      	adds	r4, #1
 800a3f6:	b2e4      	uxtb	r4, r4
 800a3f8:	2c07      	cmp	r4, #7
 800a3fa:	d814      	bhi.n	800a426 <TempCollect_Initialize+0x76>
	{
		if (kaSensorArrayDataB[u8Idx].eSensorType == eSensor_MCP9803)
 800a3fc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800a400:	00da      	lsls	r2, r3, #3
 800a402:	4b0b      	ldr	r3, [pc, #44]	; (800a430 <TempCollect_Initialize+0x80>)
 800a404:	4413      	add	r3, r2
 800a406:	7adb      	ldrb	r3, [r3, #11]
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d1f3      	bne.n	800a3f4 <TempCollect_Initialize+0x44>
		{
			kaSensorArrayDataB[u8Idx].fcnSendConfig(&kaSensorArrayDataB[u8Idx], eMCP9803_Resolution_12bit);
 800a40c:	4808      	ldr	r0, [pc, #32]	; (800a430 <TempCollect_Initialize+0x80>)
 800a40e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800a412:	00d3      	lsls	r3, r2, #3
 800a414:	4403      	add	r3, r0
 800a416:	695d      	ldr	r5, [r3, #20]
 800a418:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800a41c:	00d3      	lsls	r3, r2, #3
 800a41e:	2160      	movs	r1, #96	; 0x60
 800a420:	4418      	add	r0, r3
 800a422:	47a8      	blx	r5
 800a424:	e7e6      	b.n	800a3f4 <TempCollect_Initialize+0x44>
		}
	}
}
 800a426:	bd38      	pop	{r3, r4, r5, pc}
 800a428:	200014f8 	.word	0x200014f8
 800a42c:	20001848 	.word	0x20001848
 800a430:	20001908 	.word	0x20001908

0800a434 <TempCollect_ScheduleMeasurement>:
void TempCollect_RetrieveResult(TemperatureData_t *sTemperatureData);

/* Interrupt callback functions */

void TempCollect_ScheduleMeasurement()
{
 800a434:	b508      	push	{r3, lr}
	ToggleLED_D();
 800a436:	f7f6 fdbf 	bl	8000fb8 <ToggleLED_D>
	if(kTemperatureData.bScheduleMeasurement)
 800a43a:	4b06      	ldr	r3, [pc, #24]	; (800a454 <TempCollect_ScheduleMeasurement+0x20>)
 800a43c:	799b      	ldrb	r3, [r3, #6]
 800a43e:	b91b      	cbnz	r3, 800a448 <TempCollect_ScheduleMeasurement+0x14>
	{
		AssertError(AppError_TempCollectRequestOverlap); // Overlap of requests;
	}
	else
	{
		kTemperatureData.bScheduleMeasurement = true;
 800a440:	4b04      	ldr	r3, [pc, #16]	; (800a454 <TempCollect_ScheduleMeasurement+0x20>)
 800a442:	2201      	movs	r2, #1
 800a444:	719a      	strb	r2, [r3, #6]
	}
}
 800a446:	bd08      	pop	{r3, pc}
		AssertError(AppError_TempCollectRequestOverlap); // Overlap of requests;
 800a448:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a44c:	f7ff fb26 	bl	8009a9c <AssertError>
 800a450:	e7f9      	b.n	800a446 <TempCollect_ScheduleMeasurement+0x12>
 800a452:	bf00      	nop
 800a454:	200014f8 	.word	0x200014f8

0800a458 <TempCollect_I2CA_Done>:

void TempCollect_I2CA_Done()
{
	kTemperatureData.bStateReady[0] = true;
 800a458:	4b01      	ldr	r3, [pc, #4]	; (800a460 <TempCollect_I2CA_Done+0x8>)
 800a45a:	2201      	movs	r2, #1
 800a45c:	729a      	strb	r2, [r3, #10]
}
 800a45e:	4770      	bx	lr
 800a460:	200014f8 	.word	0x200014f8

0800a464 <TempCollect_I2CB_Done>:
void TempCollect_I2CB_Done()
{
	kTemperatureData.bStateReady[1] = true;
 800a464:	4b01      	ldr	r3, [pc, #4]	; (800a46c <TempCollect_I2CB_Done+0x8>)
 800a466:	2201      	movs	r2, #1
 800a468:	72da      	strb	r2, [r3, #11]
}
 800a46a:	4770      	bx	lr
 800a46c:	200014f8 	.word	0x200014f8

0800a470 <TempCollect_CommFaultOccured>:

void TempCollect_CommFaultOccured(CommunicationModule_t eModule)
{
	if( eModule == eModule_I2CA)
 800a470:	4603      	mov	r3, r0
 800a472:	b910      	cbnz	r0, 800a47a <TempCollect_CommFaultOccured+0xa>
	{
		kTemperatureData.bErrorOnArray[0] = true;
 800a474:	4a04      	ldr	r2, [pc, #16]	; (800a488 <TempCollect_CommFaultOccured+0x18>)
 800a476:	2101      	movs	r1, #1
 800a478:	7751      	strb	r1, [r2, #29]
	}
	if( eModule == eModule_I2CB)
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d000      	beq.n	800a480 <TempCollect_CommFaultOccured+0x10>
	{
		kTemperatureData.bErrorOnArray[1] = true;
	}
}
 800a47e:	4770      	bx	lr
		kTemperatureData.bErrorOnArray[1] = true;
 800a480:	4b01      	ldr	r3, [pc, #4]	; (800a488 <TempCollect_CommFaultOccured+0x18>)
 800a482:	2201      	movs	r2, #1
 800a484:	779a      	strb	r2, [r3, #30]
}
 800a486:	e7fa      	b.n	800a47e <TempCollect_CommFaultOccured+0xe>
 800a488:	200014f8 	.word	0x200014f8

0800a48c <CommManager_SetUSBConnectionState>:
		}
	}
}

void CommManager_SetUSBConnectionState( USBState_t eState )
{
 800a48c:	b508      	push	{r3, lr}
	//todo: Add periodic change of the VSENSE pin
	if( eState == USB_Connected)
 800a48e:	2801      	cmp	r0, #1
 800a490:	d008      	beq.n	800a4a4 <CommManager_SetUSBConnectionState+0x18>
		kCommData.bUSBConnected = true;
		OperateLED_C(eLED_On);
	}
	else
	{
		kCommData.bUSBConnected = false;
 800a492:	4b08      	ldr	r3, [pc, #32]	; (800a4b4 <CommManager_SetUSBConnectionState+0x28>)
 800a494:	2200      	movs	r2, #0
 800a496:	761a      	strb	r2, [r3, #24]
		kCommData.eState = Comm_Abort; // Cancel transmission - clear buffer, stop frame assembly and other;
 800a498:	2207      	movs	r2, #7
 800a49a:	721a      	strb	r2, [r3, #8]
		OperateLED_C(eLED_Off);
 800a49c:	2001      	movs	r0, #1
 800a49e:	f7f6 fd6d 	bl	8000f7c <OperateLED_C>
	}
}
 800a4a2:	bd08      	pop	{r3, pc}
		kCommData.bUSBConnected = true;
 800a4a4:	4b03      	ldr	r3, [pc, #12]	; (800a4b4 <CommManager_SetUSBConnectionState+0x28>)
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	761a      	strb	r2, [r3, #24]
		OperateLED_C(eLED_On);
 800a4aa:	2000      	movs	r0, #0
 800a4ac:	f7f6 fd66 	bl	8000f7c <OperateLED_C>
 800a4b0:	e7f7      	b.n	800a4a2 <CommManager_SetUSBConnectionState+0x16>
 800a4b2:	bf00      	nop
 800a4b4:	20001518 	.word	0x20001518

0800a4b8 <ComManager_ArmTransmission>:

void ComManager_ArmTransmission()
{
 800a4b8:	b510      	push	{r4, lr}
	DataHandler_AccessTransmissionMemoryInterchange(&kCommData.pkMemoryPointer);
 800a4ba:	4c0c      	ldr	r4, [pc, #48]	; (800a4ec <ComManager_ArmTransmission+0x34>)
 800a4bc:	1d20      	adds	r0, r4, #4
 800a4be:	f7ff fc23 	bl	8009d08 <DataHandler_AccessTransmissionMemoryInterchange>

	if( kCommData.bUSBConnected)
 800a4c2:	7e23      	ldrb	r3, [r4, #24]
 800a4c4:	b163      	cbz	r3, 800a4e0 <ComManager_ArmTransmission+0x28>
	{
		if(kCommData.eState == Comm_Idle)
 800a4c6:	7a23      	ldrb	r3, [r4, #8]
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d104      	bne.n	800a4d6 <ComManager_ArmTransmission+0x1e>
		{
			kCommData.eState = Comm_OpenTransmission;
 800a4cc:	2202      	movs	r2, #2
 800a4ce:	7222      	strb	r2, [r4, #8]
			kCommData.u16ReadoutPointer = 0;
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	8162      	strh	r2, [r4, #10]
 800a4d4:	e008      	b.n	800a4e8 <ComManager_ArmTransmission+0x30>

		}
		else
		{
			AssertError(AppError_TransmissionOverlap);
 800a4d6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a4da:	f7ff fadf 	bl	8009a9c <AssertError>
 800a4de:	e003      	b.n	800a4e8 <ComManager_ArmTransmission+0x30>
		}
	}
	else
	{
		kCommData.pkMemoryPointer->eMemoryState = MemoryState_DataSkipped;
 800a4e0:	4b02      	ldr	r3, [pc, #8]	; (800a4ec <ComManager_ArmTransmission+0x34>)
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	2203      	movs	r2, #3
 800a4e6:	715a      	strb	r2, [r3, #5]
	}

}
 800a4e8:	bd10      	pop	{r4, pc}
 800a4ea:	bf00      	nop
 800a4ec:	20001518 	.word	0x20001518

0800a4f0 <CommManager_FlushFrame>:

/* Internal functions */

void CommManager_FlushFrame()
{
	for(uint8_t u8Idx = 0; u8Idx < dMaxDataLenght; u8Idx++)
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	2b09      	cmp	r3, #9
 800a4f4:	d806      	bhi.n	800a504 <CommManager_FlushFrame+0x14>
	{
		kCommData.u8Frame[u8Idx] = 0;
 800a4f6:	4a04      	ldr	r2, [pc, #16]	; (800a508 <CommManager_FlushFrame+0x18>)
 800a4f8:	441a      	add	r2, r3
 800a4fa:	2100      	movs	r1, #0
 800a4fc:	7311      	strb	r1, [r2, #12]
	for(uint8_t u8Idx = 0; u8Idx < dMaxDataLenght; u8Idx++)
 800a4fe:	3301      	adds	r3, #1
 800a500:	b2db      	uxtb	r3, r3
 800a502:	e7f6      	b.n	800a4f2 <CommManager_FlushFrame+0x2>
	}
}
 800a504:	4770      	bx	lr
 800a506:	bf00      	nop
 800a508:	20001518 	.word	0x20001518

0800a50c <CommManager_Initialize>:
{
 800a50c:	b508      	push	{r3, lr}
	kCommData.bInitialized = true;
 800a50e:	4b03      	ldr	r3, [pc, #12]	; (800a51c <CommManager_Initialize+0x10>)
 800a510:	2201      	movs	r2, #1
 800a512:	701a      	strb	r2, [r3, #0]
	CommManager_FlushFrame();
 800a514:	f7ff ffec 	bl	800a4f0 <CommManager_FlushFrame>
}
 800a518:	bd08      	pop	{r3, pc}
 800a51a:	bf00      	nop
 800a51c:	20001518 	.word	0x20001518

0800a520 <CommManager_Operate>:
	if(kCommData.bInitialized)
 800a520:	4b42      	ldr	r3, [pc, #264]	; (800a62c <CommManager_Operate+0x10c>)
 800a522:	781b      	ldrb	r3, [r3, #0]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d07f      	beq.n	800a628 <CommManager_Operate+0x108>
{
 800a528:	b510      	push	{r4, lr}
		switch (kCommData.eState)
 800a52a:	4b40      	ldr	r3, [pc, #256]	; (800a62c <CommManager_Operate+0x10c>)
 800a52c:	7a1b      	ldrb	r3, [r3, #8]
 800a52e:	2b07      	cmp	r3, #7
 800a530:	d808      	bhi.n	800a544 <CommManager_Operate+0x24>
 800a532:	e8df f003 	tbb	[pc, r3]
 800a536:	0704      	.short	0x0704
 800a538:	2d241108 	.word	0x2d241108
 800a53c:	6e07      	.short	0x6e07
			kCommData.eState = Comm_Idle;
 800a53e:	4b3b      	ldr	r3, [pc, #236]	; (800a62c <CommManager_Operate+0x10c>)
 800a540:	2201      	movs	r2, #1
 800a542:	721a      	strb	r2, [r3, #8]
}
 800a544:	bd10      	pop	{r4, pc}
			kCommData.u8Frame[0] = dOpeningByte;
 800a546:	4a39      	ldr	r2, [pc, #228]	; (800a62c <CommManager_Operate+0x10c>)
 800a548:	210a      	movs	r1, #10
 800a54a:	7311      	strb	r1, [r2, #12]
			kCommData.u8CurrentFrameLength = 1;
 800a54c:	2101      	movs	r1, #1
 800a54e:	7591      	strb	r1, [r2, #22]
			kCommData.ePreviousState = kCommData.eState;
 800a550:	7253      	strb	r3, [r2, #9]
			kCommData.eState = Comm_Transmit;
 800a552:	2305      	movs	r3, #5
 800a554:	7213      	strb	r3, [r2, #8]
			break;
 800a556:	e7f5      	b.n	800a544 <CommManager_Operate+0x24>
			pfPointer = kCommData.pkMemoryPointer->fDataPointer;
 800a558:	4c34      	ldr	r4, [pc, #208]	; (800a62c <CommManager_Operate+0x10c>)
 800a55a:	6863      	ldr	r3, [r4, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
			fValue = pfPointer[kCommData.u16ReadoutPointer];
 800a55e:	8962      	ldrh	r2, [r4, #10]
 800a560:	eb03 0382 	add.w	r3, r3, r2, lsl #2
			FrameAssembler_ConvertFloatToCharArray(kCommData.u8Frame, fValue);
 800a564:	ed93 0a00 	vldr	s0, [r3]
 800a568:	f104 000c 	add.w	r0, r4, #12
 800a56c:	f000 f860 	bl	800a630 <FrameAssembler_ConvertFloatToCharArray>
			kCommData.u8CurrentFrameLength = 10;
 800a570:	230a      	movs	r3, #10
 800a572:	75a3      	strb	r3, [r4, #22]
			kCommData.ePreviousState = kCommData.eState;
 800a574:	7a23      	ldrb	r3, [r4, #8]
 800a576:	7263      	strb	r3, [r4, #9]
			kCommData.eState = Comm_Transmit;
 800a578:	2305      	movs	r3, #5
 800a57a:	7223      	strb	r3, [r4, #8]
			break;
 800a57c:	e7e2      	b.n	800a544 <CommManager_Operate+0x24>
			kCommData.u8Frame[0] = dClosingByte;
 800a57e:	4a2b      	ldr	r2, [pc, #172]	; (800a62c <CommManager_Operate+0x10c>)
 800a580:	210d      	movs	r1, #13
 800a582:	7311      	strb	r1, [r2, #12]
			kCommData.u8CurrentFrameLength = 1;
 800a584:	2101      	movs	r1, #1
 800a586:	7591      	strb	r1, [r2, #22]
			kCommData.ePreviousState = kCommData.eState;
 800a588:	7253      	strb	r3, [r2, #9]
			kCommData.eState = Comm_Transmit;
 800a58a:	2305      	movs	r3, #5
 800a58c:	7213      	strb	r3, [r2, #8]
			break;
 800a58e:	e7d9      	b.n	800a544 <CommManager_Operate+0x24>
			bResult = USB_TransmitData(kCommData.u8Frame, kCommData.u8CurrentFrameLength);
 800a590:	4826      	ldr	r0, [pc, #152]	; (800a62c <CommManager_Operate+0x10c>)
 800a592:	7d81      	ldrb	r1, [r0, #22]
 800a594:	300c      	adds	r0, #12
 800a596:	f000 f867 	bl	800a668 <USB_TransmitData>
			if( !bResult )
 800a59a:	bb68      	cbnz	r0, 800a5f8 <CommManager_Operate+0xd8>
				kCommData.u8TrialsCounter = 0;
 800a59c:	4b23      	ldr	r3, [pc, #140]	; (800a62c <CommManager_Operate+0x10c>)
 800a59e:	2200      	movs	r2, #0
 800a5a0:	75da      	strb	r2, [r3, #23]
				if ( kCommData.ePreviousState == Comm_AssembleFrame )
 800a5a2:	7a5b      	ldrb	r3, [r3, #9]
 800a5a4:	2b03      	cmp	r3, #3
 800a5a6:	d009      	beq.n	800a5bc <CommManager_Operate+0x9c>
				else if( kCommData.ePreviousState == Comm_CloseTransmission)
 800a5a8:	2b04      	cmp	r3, #4
 800a5aa:	d016      	beq.n	800a5da <CommManager_Operate+0xba>
				else if ( kCommData.ePreviousState == Comm_OpenTransmission )
 800a5ac:	2b02      	cmp	r3, #2
 800a5ae:	d11b      	bne.n	800a5e8 <CommManager_Operate+0xc8>
					kCommData.u16ReadoutPointer = 0;
 800a5b0:	4b1e      	ldr	r3, [pc, #120]	; (800a62c <CommManager_Operate+0x10c>)
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	815a      	strh	r2, [r3, #10]
					kCommData.eState = Comm_AssembleFrame;
 800a5b6:	2203      	movs	r2, #3
 800a5b8:	721a      	strb	r2, [r3, #8]
 800a5ba:	e7c3      	b.n	800a544 <CommManager_Operate+0x24>
					kCommData.u16ReadoutPointer++;
 800a5bc:	4a1b      	ldr	r2, [pc, #108]	; (800a62c <CommManager_Operate+0x10c>)
 800a5be:	8953      	ldrh	r3, [r2, #10]
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	8153      	strh	r3, [r2, #10]
					kCommData.eState = Comm_AssembleFrame;
 800a5c6:	2103      	movs	r1, #3
 800a5c8:	7211      	strb	r1, [r2, #8]
					if( kCommData.u16ReadoutPointer >= dMemoryWidth)
 800a5ca:	2b0f      	cmp	r3, #15
 800a5cc:	d9ba      	bls.n	800a544 <CommManager_Operate+0x24>
						kCommData.eState = Comm_CloseTransmission;
 800a5ce:	4613      	mov	r3, r2
 800a5d0:	2204      	movs	r2, #4
 800a5d2:	721a      	strb	r2, [r3, #8]
						kCommData.u16ReadoutPointer = 0;
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	815a      	strh	r2, [r3, #10]
 800a5d8:	e7b4      	b.n	800a544 <CommManager_Operate+0x24>
					kCommData.pkMemoryPointer->eMemoryState = MemoryState_DataSent;
 800a5da:	4b14      	ldr	r3, [pc, #80]	; (800a62c <CommManager_Operate+0x10c>)
 800a5dc:	685a      	ldr	r2, [r3, #4]
 800a5de:	2102      	movs	r1, #2
 800a5e0:	7151      	strb	r1, [r2, #5]
					kCommData.eState = Comm_Idle;
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	721a      	strb	r2, [r3, #8]
 800a5e6:	e7ad      	b.n	800a544 <CommManager_Operate+0x24>
					AssertError(AppError_TransmissionLogicBroken);
 800a5e8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a5ec:	f7ff fa56 	bl	8009a9c <AssertError>
					kCommData.eState = Comm_Abort;
 800a5f0:	4b0e      	ldr	r3, [pc, #56]	; (800a62c <CommManager_Operate+0x10c>)
 800a5f2:	2207      	movs	r2, #7
 800a5f4:	721a      	strb	r2, [r3, #8]
 800a5f6:	e7a5      	b.n	800a544 <CommManager_Operate+0x24>
				kCommData.eState = kCommData.ePreviousState;
 800a5f8:	4a0c      	ldr	r2, [pc, #48]	; (800a62c <CommManager_Operate+0x10c>)
 800a5fa:	7a53      	ldrb	r3, [r2, #9]
 800a5fc:	7213      	strb	r3, [r2, #8]
				kCommData.u8TrialsCounter++;
 800a5fe:	7dd3      	ldrb	r3, [r2, #23]
 800a600:	3301      	adds	r3, #1
 800a602:	b2db      	uxtb	r3, r3
 800a604:	75d3      	strb	r3, [r2, #23]
				if(kCommData.u8TrialsCounter > dMaxTrialsCount)
 800a606:	2b03      	cmp	r3, #3
 800a608:	d99c      	bls.n	800a544 <CommManager_Operate+0x24>
					kCommData.eState = Comm_Abort;
 800a60a:	4613      	mov	r3, r2
 800a60c:	2207      	movs	r2, #7
 800a60e:	721a      	strb	r2, [r3, #8]
 800a610:	e798      	b.n	800a544 <CommManager_Operate+0x24>
			kCommData.eState = Comm_Idle;
 800a612:	4b06      	ldr	r3, [pc, #24]	; (800a62c <CommManager_Operate+0x10c>)
 800a614:	2201      	movs	r2, #1
 800a616:	721a      	strb	r2, [r3, #8]
			kCommData.pkMemoryPointer->eMemoryState = MemoryState_DataSkipped;
 800a618:	685a      	ldr	r2, [r3, #4]
 800a61a:	2103      	movs	r1, #3
 800a61c:	7151      	strb	r1, [r2, #5]
			kCommData.u16ReadoutPointer = 0;
 800a61e:	2200      	movs	r2, #0
 800a620:	815a      	strh	r2, [r3, #10]
			CommManager_FlushFrame();
 800a622:	f7ff ff65 	bl	800a4f0 <CommManager_FlushFrame>
}
 800a626:	e78d      	b.n	800a544 <CommManager_Operate+0x24>
 800a628:	4770      	bx	lr
 800a62a:	bf00      	nop
 800a62c:	20001518 	.word	0x20001518

0800a630 <FrameAssembler_ConvertFloatToCharArray>:
#include <stdio.h>
#include "FrameAssembler.h"
#include "DataFormat.h"

void FrameAssembler_ConvertFloatToCharArray(uint8_t *pResultArray, float fNumber)
{
 800a630:	b510      	push	{r4, lr}
 800a632:	4604      	mov	r4, r0
 800a634:	ee10 0a10 	vmov	r0, s0
//	sprintf((char*)pResultArray,"%+9.4f\t",fNumber);
	sprintf((char*)pResultArray, "+%" dPrintfSize "." dFractionSize "f\t", fNumber);
 800a638:	f7f5 ff8e 	bl	8000558 <__aeabi_f2d>
 800a63c:	4602      	mov	r2, r0
 800a63e:	460b      	mov	r3, r1
 800a640:	4902      	ldr	r1, [pc, #8]	; (800a64c <FrameAssembler_ConvertFloatToCharArray+0x1c>)
 800a642:	4620      	mov	r0, r4
 800a644:	f001 fece 	bl	800c3e4 <siprintf>
}
 800a648:	bd10      	pop	{r4, pc}
 800a64a:	bf00      	nop
 800a64c:	0800e9bc 	.word	0x0800e9bc

0800a650 <USB_InitalizeTransmitterLogic>:
//static uint8_t Buf[] = "Test/r/n";

void ConvertDataToBytes(float *Dataset);

void USB_InitalizeTransmitterLogic()
{
 800a650:	b508      	push	{r3, lr}
	kUSBTransmitterData.phADCHandle = HandlesAssigner_GetHandle(eHandle_ADC);
 800a652:	2005      	movs	r0, #5
 800a654:	f7ff fd7a 	bl	800a14c <HandlesAssigner_GetHandle>
 800a658:	4b02      	ldr	r3, [pc, #8]	; (800a664 <USB_InitalizeTransmitterLogic+0x14>)
 800a65a:	6098      	str	r0, [r3, #8]
	kUSBTransmitterData.bInitialized = true;
 800a65c:	2201      	movs	r2, #1
 800a65e:	701a      	strb	r2, [r3, #0]
}
 800a660:	bd08      	pop	{r3, pc}
 800a662:	bf00      	nop
 800a664:	20001534 	.word	0x20001534

0800a668 <USB_TransmitData>:

bool USB_TransmitData(uint8_t *Dataset, uint8_t u8Length)
{
 800a668:	b508      	push	{r3, lr}
	bool bResult = true;

	if(kUSBTransmitterData.bInitialized)
 800a66a:	4b05      	ldr	r3, [pc, #20]	; (800a680 <USB_TransmitData+0x18>)
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	b90b      	cbnz	r3, 800a674 <USB_TransmitData+0xc>
	bool bResult = true;
 800a670:	2001      	movs	r0, #1
	 * result = true means that a fault occurred
	 */
	bResult = CDC_Transmit_FS(Dataset,  u8Length);
	}
	return bResult;
}
 800a672:	bd08      	pop	{r3, pc}
	bResult = CDC_Transmit_FS(Dataset,  u8Length);
 800a674:	f000 fffa 	bl	800b66c <CDC_Transmit_FS>
 800a678:	3800      	subs	r0, #0
 800a67a:	bf18      	it	ne
 800a67c:	2001      	movne	r0, #1
 800a67e:	e7f8      	b.n	800a672 <USB_TransmitData+0xa>
 800a680:	20001534 	.word	0x20001534

0800a684 <USB_CheckForUSBConnection>:

void USB_CheckForUSBConnection()
{
	if( kUSBTransmitterData.bInitialized )
 800a684:	4b18      	ldr	r3, [pc, #96]	; (800a6e8 <USB_CheckForUSBConnection+0x64>)
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	b363      	cbz	r3, 800a6e4 <USB_CheckForUSBConnection+0x60>
{
 800a68a:	b510      	push	{r4, lr}
	{
		if( !kUSBTransmitterData.bCheckStarted )
 800a68c:	4b16      	ldr	r3, [pc, #88]	; (800a6e8 <USB_CheckForUSBConnection+0x64>)
 800a68e:	785b      	ldrb	r3, [r3, #1]
 800a690:	b1ab      	cbz	r3, 800a6be <USB_CheckForUSBConnection+0x3a>
		{
			HAL_ADC_Start_IT(kUSBTransmitterData.phADCHandle);
			kUSBTransmitterData.bCheckStarted = true;
		}

		if( kUSBTransmitterData.bNewMeasurement )
 800a692:	4b15      	ldr	r3, [pc, #84]	; (800a6e8 <USB_CheckForUSBConnection+0x64>)
 800a694:	789b      	ldrb	r3, [r3, #2]
 800a696:	b18b      	cbz	r3, 800a6bc <USB_CheckForUSBConnection+0x38>
		{
			kUSBTransmitterData.bNewMeasurement = false;
 800a698:	4b13      	ldr	r3, [pc, #76]	; (800a6e8 <USB_CheckForUSBConnection+0x64>)
 800a69a:	2200      	movs	r2, #0
 800a69c:	709a      	strb	r2, [r3, #2]
			if( (kUSBTransmitterData.u32MeasuredVbus < dLowThreshold) && kUSBTransmitterData.bConnected )
 800a69e:	889b      	ldrh	r3, [r3, #4]
 800a6a0:	f640 429a 	movw	r2, #3226	; 0xc9a
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d802      	bhi.n	800a6ae <USB_CheckForUSBConnection+0x2a>
 800a6a8:	4a0f      	ldr	r2, [pc, #60]	; (800a6e8 <USB_CheckForUSBConnection+0x64>)
 800a6aa:	78d2      	ldrb	r2, [r2, #3]
 800a6ac:	b972      	cbnz	r2, 800a6cc <USB_CheckForUSBConnection+0x48>
			{
				kUSBTransmitterData.bConnected = false;
				CallForUSBDisonnection();
			}
			else if ( (kUSBTransmitterData.u32MeasuredVbus > dHighThreshold) && !kUSBTransmitterData.bConnected )
 800a6ae:	f640 5217 	movw	r2, #3351	; 0xd17
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d902      	bls.n	800a6bc <USB_CheckForUSBConnection+0x38>
 800a6b6:	4b0c      	ldr	r3, [pc, #48]	; (800a6e8 <USB_CheckForUSBConnection+0x64>)
 800a6b8:	78db      	ldrb	r3, [r3, #3]
 800a6ba:	b16b      	cbz	r3, 800a6d8 <USB_CheckForUSBConnection+0x54>
				CallForUSBConnection();
			}
		}
	}

}
 800a6bc:	bd10      	pop	{r4, pc}
			HAL_ADC_Start_IT(kUSBTransmitterData.phADCHandle);
 800a6be:	4c0a      	ldr	r4, [pc, #40]	; (800a6e8 <USB_CheckForUSBConnection+0x64>)
 800a6c0:	68a0      	ldr	r0, [r4, #8]
 800a6c2:	f7f6 fe0d 	bl	80012e0 <HAL_ADC_Start_IT>
			kUSBTransmitterData.bCheckStarted = true;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	7063      	strb	r3, [r4, #1]
 800a6ca:	e7e2      	b.n	800a692 <USB_CheckForUSBConnection+0xe>
				kUSBTransmitterData.bConnected = false;
 800a6cc:	4b06      	ldr	r3, [pc, #24]	; (800a6e8 <USB_CheckForUSBConnection+0x64>)
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	70da      	strb	r2, [r3, #3]
				CallForUSBDisonnection();
 800a6d2:	f7ff fd6b 	bl	800a1ac <CallForUSBDisonnection>
 800a6d6:	e7f1      	b.n	800a6bc <USB_CheckForUSBConnection+0x38>
				kUSBTransmitterData.bConnected = true;
 800a6d8:	4b03      	ldr	r3, [pc, #12]	; (800a6e8 <USB_CheckForUSBConnection+0x64>)
 800a6da:	2201      	movs	r2, #1
 800a6dc:	70da      	strb	r2, [r3, #3]
				CallForUSBConnection();
 800a6de:	f7ff fd60 	bl	800a1a2 <CallForUSBConnection>
}
 800a6e2:	e7eb      	b.n	800a6bc <USB_CheckForUSBConnection+0x38>
 800a6e4:	4770      	bx	lr
 800a6e6:	bf00      	nop
 800a6e8:	20001534 	.word	0x20001534

0800a6ec <USB_SignalizeVBUSMeasurementReady>:

void USB_SignalizeVBUSMeasurementReady(uint32_t u32Result)
{
	kUSBTransmitterData.bNewMeasurement = true;
 800a6ec:	4b03      	ldr	r3, [pc, #12]	; (800a6fc <USB_SignalizeVBUSMeasurementReady+0x10>)
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	709a      	strb	r2, [r3, #2]
	kUSBTransmitterData.u32MeasuredVbus = u32Result;
 800a6f2:	8098      	strh	r0, [r3, #4]
	kUSBTransmitterData.bCheckStarted = false;
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	705a      	strb	r2, [r3, #1]
}
 800a6f8:	4770      	bx	lr
 800a6fa:	bf00      	nop
 800a6fc:	20001534 	.word	0x20001534

0800a700 <SignalProcessing_ResetChannels>:
	return kSignalProcessingData.fAverageRegister;
}

static void SignalProcessing_ResetChannels()
{
	for(uint8_t u8Idx = 0; u8Idx < dMaximumChannels; u8Idx++)
 800a700:	2300      	movs	r3, #0
 800a702:	2b0f      	cmp	r3, #15
 800a704:	d809      	bhi.n	800a71a <SignalProcessing_ResetChannels+0x1a>
	{
		kSignalProcessingData.kAverageChannels[u8Idx].fCurrentValue = 0;
 800a706:	4a07      	ldr	r2, [pc, #28]	; (800a724 <SignalProcessing_ResetChannels+0x24>)
 800a708:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800a70c:	2100      	movs	r1, #0
 800a70e:	6051      	str	r1, [r2, #4]
		kSignalProcessingData.kAverageChannels[u8Idx].u16SamplesCollected = 0;
 800a710:	2100      	movs	r1, #0
 800a712:	8111      	strh	r1, [r2, #8]
	for(uint8_t u8Idx = 0; u8Idx < dMaximumChannels; u8Idx++)
 800a714:	3301      	adds	r3, #1
 800a716:	b2db      	uxtb	r3, r3
 800a718:	e7f3      	b.n	800a702 <SignalProcessing_ResetChannels+0x2>
	}
	kSignalProcessingData.bAverageCalculated = false;
 800a71a:	4b02      	ldr	r3, [pc, #8]	; (800a724 <SignalProcessing_ResetChannels+0x24>)
 800a71c:	2200      	movs	r2, #0
 800a71e:	705a      	strb	r2, [r3, #1]
}
 800a720:	4770      	bx	lr
 800a722:	bf00      	nop
 800a724:	20001540 	.word	0x20001540

0800a728 <SignalProcessing_Initialize>:
	kSignalProcessingData.bEnabled = true;
 800a728:	4b02      	ldr	r3, [pc, #8]	; (800a734 <SignalProcessing_Initialize+0xc>)
 800a72a:	2201      	movs	r2, #1
 800a72c:	701a      	strb	r2, [r3, #0]
	kSignalProcessingData.u8ChannelCount = u8Channels;
 800a72e:	7098      	strb	r0, [r3, #2]
}
 800a730:	4770      	bx	lr
 800a732:	bf00      	nop
 800a734:	20001540 	.word	0x20001540

0800a738 <SignalProcessing_AddSampleToAverage>:
{
 800a738:	b508      	push	{r3, lr}
	if( u8Channel >= kSignalProcessingData.u8ChannelCount )
 800a73a:	4b0b      	ldr	r3, [pc, #44]	; (800a768 <SignalProcessing_AddSampleToAverage+0x30>)
 800a73c:	789b      	ldrb	r3, [r3, #2]
 800a73e:	4283      	cmp	r3, r0
 800a740:	d90c      	bls.n	800a75c <SignalProcessing_AddSampleToAverage+0x24>
		kSignalProcessingData.kAverageChannels[u8Channel].fCurrentValue += fNewData;
 800a742:	4b09      	ldr	r3, [pc, #36]	; (800a768 <SignalProcessing_AddSampleToAverage+0x30>)
 800a744:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800a748:	edd0 7a01 	vldr	s15, [r0, #4]
 800a74c:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a750:	ed80 0a01 	vstr	s0, [r0, #4]
		kSignalProcessingData.kAverageChannels[u8Channel].u16SamplesCollected++;
 800a754:	8903      	ldrh	r3, [r0, #8]
 800a756:	3301      	adds	r3, #1
 800a758:	8103      	strh	r3, [r0, #8]
}
 800a75a:	bd08      	pop	{r3, pc}
		AssertError(AppError_SignalProcessingError);
 800a75c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a760:	f7ff f99c 	bl	8009a9c <AssertError>
 800a764:	e7f9      	b.n	800a75a <SignalProcessing_AddSampleToAverage+0x22>
 800a766:	bf00      	nop
 800a768:	20001540 	.word	0x20001540

0800a76c <SignalProcessing_CalculateAverage>:
	for(uint8_t u8Idx = 0; u8Idx < dMaximumChannels; u8Idx++)
 800a76c:	2300      	movs	r3, #0
 800a76e:	2b0f      	cmp	r3, #15
 800a770:	d814      	bhi.n	800a79c <SignalProcessing_CalculateAverage+0x30>
		kSignalProcessingData.fAverageRegister[u8Idx] = kSignalProcessingData.kAverageChannels[u8Idx].fCurrentValue / kSignalProcessingData.kAverageChannels[u8Idx].u16SamplesCollected;
 800a772:	4a0c      	ldr	r2, [pc, #48]	; (800a7a4 <SignalProcessing_CalculateAverage+0x38>)
 800a774:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800a778:	edd1 6a01 	vldr	s13, [r1, #4]
 800a77c:	8909      	ldrh	r1, [r1, #8]
 800a77e:	ee07 1a90 	vmov	s15, r1
 800a782:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a78a:	f103 0120 	add.w	r1, r3, #32
 800a78e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800a792:	ed82 7a01 	vstr	s14, [r2, #4]
	for(uint8_t u8Idx = 0; u8Idx < dMaximumChannels; u8Idx++)
 800a796:	3301      	adds	r3, #1
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	e7e8      	b.n	800a76e <SignalProcessing_CalculateAverage+0x2>
	kSignalProcessingData.bAverageCalculated = true;
 800a79c:	4b01      	ldr	r3, [pc, #4]	; (800a7a4 <SignalProcessing_CalculateAverage+0x38>)
 800a79e:	2201      	movs	r2, #1
 800a7a0:	705a      	strb	r2, [r3, #1]
}
 800a7a2:	4770      	bx	lr
 800a7a4:	20001540 	.word	0x20001540

0800a7a8 <SignalProcessing_ReadAverage>:
{
 800a7a8:	b508      	push	{r3, lr}
	SignalProcessing_ResetChannels();
 800a7aa:	f7ff ffa9 	bl	800a700 <SignalProcessing_ResetChannels>
}
 800a7ae:	4801      	ldr	r0, [pc, #4]	; (800a7b4 <SignalProcessing_ReadAverage+0xc>)
 800a7b0:	bd08      	pop	{r3, pc}
 800a7b2:	bf00      	nop
 800a7b4:	200015c4 	.word	0x200015c4

0800a7b8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a7b8:	b508      	push	{r3, lr}
 800a7ba:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a7bc:	460a      	mov	r2, r1
 800a7be:	4601      	mov	r1, r0
 800a7c0:	4802      	ldr	r0, [pc, #8]	; (800a7cc <BSP_SD_ReadBlocks_DMA+0x14>)
 800a7c2:	f7fa fb77 	bl	8004eb4 <HAL_SD_ReadBlocks_DMA>
 800a7c6:	b100      	cbz	r0, 800a7ca <BSP_SD_ReadBlocks_DMA+0x12>
  {
    sd_state = MSD_ERROR;
 800a7c8:	2001      	movs	r0, #1
  }

  return sd_state;
}
 800a7ca:	bd08      	pop	{r3, pc}
 800a7cc:	200020a4 	.word	0x200020a4

0800a7d0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a7d0:	b508      	push	{r3, lr}
 800a7d2:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a7d4:	460a      	mov	r2, r1
 800a7d6:	4601      	mov	r1, r0
 800a7d8:	4802      	ldr	r0, [pc, #8]	; (800a7e4 <BSP_SD_WriteBlocks_DMA+0x14>)
 800a7da:	f7fa fc07 	bl	8004fec <HAL_SD_WriteBlocks_DMA>
 800a7de:	b100      	cbz	r0, 800a7e2 <BSP_SD_WriteBlocks_DMA+0x12>
  {
    sd_state = MSD_ERROR;
 800a7e0:	2001      	movs	r0, #1
  }

  return sd_state;
}
 800a7e2:	bd08      	pop	{r3, pc}
 800a7e4:	200020a4 	.word	0x200020a4

0800a7e8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a7e8:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a7ea:	4803      	ldr	r0, [pc, #12]	; (800a7f8 <BSP_SD_GetCardState+0x10>)
 800a7ec:	f7fa fefa 	bl	80055e4 <HAL_SD_GetCardState>
}
 800a7f0:	3804      	subs	r0, #4
 800a7f2:	bf18      	it	ne
 800a7f4:	2001      	movne	r0, #1
 800a7f6:	bd08      	pop	{r3, pc}
 800a7f8:	200020a4 	.word	0x200020a4

0800a7fc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a7fc:	b508      	push	{r3, lr}
 800a7fe:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a800:	4801      	ldr	r0, [pc, #4]	; (800a808 <BSP_SD_GetCardInfo+0xc>)
 800a802:	f7fa fe7c 	bl	80054fe <HAL_SD_GetCardInfo>
}
 800a806:	bd08      	pop	{r3, pc}
 800a808:	200020a4 	.word	0x200020a4

0800a80c <BSP_SD_AbortCallback>:
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{

}
 800a80c:	4770      	bx	lr

0800a80e <HAL_SD_AbortCallback>:
{
 800a80e:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 800a810:	f7ff fffc 	bl	800a80c <BSP_SD_AbortCallback>
}
 800a814:	bd08      	pop	{r3, pc}

0800a816 <HAL_SD_TxCpltCallback>:
{
 800a816:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 800a818:	f000 fbbc 	bl	800af94 <BSP_SD_WriteCpltCallback>
}
 800a81c:	bd08      	pop	{r3, pc}

0800a81e <HAL_SD_RxCpltCallback>:
{
 800a81e:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800a820:	f000 fbbe 	bl	800afa0 <BSP_SD_ReadCpltCallback>
}
 800a824:	bd08      	pop	{r3, pc}

0800a826 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a826:	b500      	push	{lr}
 800a828:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 800a82a:	2301      	movs	r3, #1
 800a82c:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a830:	f000 f834 	bl	800a89c <BSP_PlatformIsDetected>
 800a834:	b910      	cbnz	r0, 800a83c <BSP_SD_IsDetected+0x16>
  {
    status = SD_NOT_PRESENT;
 800a836:	2300      	movs	r3, #0
 800a838:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 800a83c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800a840:	b003      	add	sp, #12
 800a842:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a848 <BSP_SD_Init>:
{
 800a848:	b538      	push	{r3, r4, r5, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a84a:	f7ff ffec 	bl	800a826 <BSP_SD_IsDetected>
 800a84e:	2801      	cmp	r0, #1
 800a850:	d002      	beq.n	800a858 <BSP_SD_Init+0x10>
    return MSD_ERROR;
 800a852:	2501      	movs	r5, #1
}
 800a854:	4628      	mov	r0, r5
 800a856:	bd38      	pop	{r3, r4, r5, pc}
 800a858:	4604      	mov	r4, r0
  sd_state = HAL_SD_Init(&hsd);
 800a85a:	4807      	ldr	r0, [pc, #28]	; (800a878 <BSP_SD_Init+0x30>)
 800a85c:	f7fa fe34 	bl	80054c8 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800a860:	4605      	mov	r5, r0
 800a862:	2800      	cmp	r0, #0
 800a864:	d1f6      	bne.n	800a854 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800a866:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a86a:	4803      	ldr	r0, [pc, #12]	; (800a878 <BSP_SD_Init+0x30>)
 800a86c:	f7fa fe5a 	bl	8005524 <HAL_SD_ConfigWideBusOperation>
 800a870:	2800      	cmp	r0, #0
 800a872:	d0ef      	beq.n	800a854 <BSP_SD_Init+0xc>
      sd_state = MSD_ERROR;
 800a874:	4625      	mov	r5, r4
 800a876:	e7ed      	b.n	800a854 <BSP_SD_Init+0xc>
 800a878:	200020a4 	.word	0x200020a4

0800a87c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a87c:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a87e:	4903      	ldr	r1, [pc, #12]	; (800a88c <MX_FATFS_Init+0x10>)
 800a880:	4803      	ldr	r0, [pc, #12]	; (800a890 <MX_FATFS_Init+0x14>)
 800a882:	f7ff f87b 	bl	800997c <FATFS_LinkDriver>
 800a886:	4b03      	ldr	r3, [pc, #12]	; (800a894 <MX_FATFS_Init+0x18>)
 800a888:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a88a:	bd08      	pop	{r3, pc}
 800a88c:	200019cc 	.word	0x200019cc
 800a890:	0800e9c4 	.word	0x0800e9c4
 800a894:	200019c8 	.word	0x200019c8

0800a898 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 800a898:	2000      	movs	r0, #0
 800a89a:	4770      	bx	lr

0800a89c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a89c:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a89e:	2180      	movs	r1, #128	; 0x80
 800a8a0:	4802      	ldr	r0, [pc, #8]	; (800a8ac <BSP_PlatformIsDetected+0x10>)
 800a8a2:	f7f7 fa8f 	bl	8001dc4 <HAL_GPIO_ReadPin>
    /* user code can be inserted here */
    status = SD_PRESENT; // inserted here only because the SD_DETECT pin was not actually foreseen in the project
    //todo: add HW connection to SD detect
    /* USER CODE END 1 */
    return status;
}
 800a8a6:	2001      	movs	r0, #1
 800a8a8:	bd08      	pop	{r3, pc}
 800a8aa:	bf00      	nop
 800a8ac:	40020800 	.word	0x40020800

0800a8b0 <MX_SDIO_SD_Init>:
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800a8b0:	4b05      	ldr	r3, [pc, #20]	; (800a8c8 <MX_SDIO_SD_Init+0x18>)
 800a8b2:	4a06      	ldr	r2, [pc, #24]	; (800a8cc <MX_SDIO_SD_Init+0x1c>)
 800a8b4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800a8ba:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a8bc:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800a8be:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a8c0:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 800a8c2:	2204      	movs	r2, #4
 800a8c4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800a8c6:	4770      	bx	lr
 800a8c8:	200020a4 	.word	0x200020a4
 800a8cc:	40012c00 	.word	0x40012c00

0800a8d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8d2:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8d4:	2400      	movs	r4, #0
 800a8d6:	9405      	str	r4, [sp, #20]
 800a8d8:	9406      	str	r4, [sp, #24]
 800a8da:	9407      	str	r4, [sp, #28]
 800a8dc:	9408      	str	r4, [sp, #32]
 800a8de:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a8e0:	9401      	str	r4, [sp, #4]
 800a8e2:	4b33      	ldr	r3, [pc, #204]	; (800a9b0 <MX_GPIO_Init+0xe0>)
 800a8e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8e6:	f042 0204 	orr.w	r2, r2, #4
 800a8ea:	631a      	str	r2, [r3, #48]	; 0x30
 800a8ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8ee:	f002 0204 	and.w	r2, r2, #4
 800a8f2:	9201      	str	r2, [sp, #4]
 800a8f4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a8f6:	9402      	str	r4, [sp, #8]
 800a8f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a8fe:	631a      	str	r2, [r3, #48]	; 0x30
 800a900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a902:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800a906:	9202      	str	r2, [sp, #8]
 800a908:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a90a:	9403      	str	r4, [sp, #12]
 800a90c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a90e:	f042 0201 	orr.w	r2, r2, #1
 800a912:	631a      	str	r2, [r3, #48]	; 0x30
 800a914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a916:	f002 0201 	and.w	r2, r2, #1
 800a91a:	9203      	str	r2, [sp, #12]
 800a91c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a91e:	9404      	str	r4, [sp, #16]
 800a920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a922:	f042 0202 	orr.w	r2, r2, #2
 800a926:	631a      	str	r2, [r3, #48]	; 0x30
 800a928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a92a:	f003 0302 	and.w	r3, r3, #2
 800a92e:	9304      	str	r3, [sp, #16]
 800a930:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, I2C2_VDD_Pin|LED0_Pin|LED1_Pin|LED2_Pin
 800a932:	4e20      	ldr	r6, [pc, #128]	; (800a9b4 <MX_GPIO_Init+0xe4>)
 800a934:	4622      	mov	r2, r4
 800a936:	f243 010f 	movw	r1, #12303	; 0x300f
 800a93a:	4630      	mov	r0, r6
 800a93c:	f7f7 fa49 	bl	8001dd2 <HAL_GPIO_WritePin>
                          |LED3_Pin|I2C1_VDD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PIN_0_Pin|PIN_1_Pin|PIN_2_Pin, GPIO_PIN_RESET);
 800a940:	4d1d      	ldr	r5, [pc, #116]	; (800a9b8 <MX_GPIO_Init+0xe8>)
 800a942:	4622      	mov	r2, r4
 800a944:	2107      	movs	r1, #7
 800a946:	4628      	mov	r0, r5
 800a948:	f7f7 fa43 	bl	8001dd2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : I2C2_VDD_Pin LED0_Pin LED1_Pin LED2_Pin
                           LED3_Pin I2C1_VDD_Pin */
  GPIO_InitStruct.Pin = I2C2_VDD_Pin|LED0_Pin|LED1_Pin|LED2_Pin
 800a94c:	f243 030f 	movw	r3, #12303	; 0x300f
 800a950:	9305      	str	r3, [sp, #20]
                          |LED3_Pin|I2C1_VDD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a952:	2701      	movs	r7, #1
 800a954:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a956:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a958:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a95a:	a905      	add	r1, sp, #20
 800a95c:	4630      	mov	r0, r6
 800a95e:	f7f7 f959 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN_0_Pin PIN_1_Pin PIN_2_Pin */
  GPIO_InitStruct.Pin = PIN_0_Pin|PIN_1_Pin|PIN_2_Pin;
 800a962:	2307      	movs	r3, #7
 800a964:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a966:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a968:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a96a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a96c:	a905      	add	r1, sp, #20
 800a96e:	4628      	mov	r0, r5
 800a970:	f7f7 f950 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_DETECT_Pin */
  GPIO_InitStruct.Pin = SDIO_DETECT_Pin;
 800a974:	2380      	movs	r3, #128	; 0x80
 800a976:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a978:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a97a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(SDIO_DETECT_GPIO_Port, &GPIO_InitStruct);
 800a97c:	a905      	add	r1, sp, #20
 800a97e:	4630      	mov	r0, r6
 800a980:	f7f7 f948 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VSENSE_Pin */
  GPIO_InitStruct.Pin = USB_VSENSE_Pin;
 800a984:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a988:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800a98a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800a98e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a990:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USB_VSENSE_GPIO_Port, &GPIO_InitStruct);
 800a992:	a905      	add	r1, sp, #20
 800a994:	4628      	mov	r0, r5
 800a996:	f7f7 f93d 	bl	8001c14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800a99a:	4622      	mov	r2, r4
 800a99c:	4621      	mov	r1, r4
 800a99e:	2017      	movs	r0, #23
 800a9a0:	f7f6 febe 	bl	8001720 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a9a4:	2017      	movs	r0, #23
 800a9a6:	f7f6 feef 	bl	8001788 <HAL_NVIC_EnableIRQ>

}
 800a9aa:	b00b      	add	sp, #44	; 0x2c
 800a9ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	40023800 	.word	0x40023800
 800a9b4:	40020800 	.word	0x40020800
 800a9b8:	40020000 	.word	0x40020000

0800a9bc <MX_DMA_Init>:
{
 800a9bc:	b510      	push	{r4, lr}
 800a9be:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a9c0:	2400      	movs	r4, #0
 800a9c2:	9400      	str	r4, [sp, #0]
 800a9c4:	4b16      	ldr	r3, [pc, #88]	; (800aa20 <MX_DMA_Init+0x64>)
 800a9c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9c8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800a9cc:	631a      	str	r2, [r3, #48]	; 0x30
 800a9ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9d0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a9d4:	9200      	str	r2, [sp, #0]
 800a9d6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800a9d8:	9401      	str	r4, [sp, #4]
 800a9da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9dc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800a9e0:	631a      	str	r2, [r3, #48]	; 0x30
 800a9e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a9e8:	9301      	str	r3, [sp, #4]
 800a9ea:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800a9ec:	4622      	mov	r2, r4
 800a9ee:	4621      	mov	r1, r4
 800a9f0:	200c      	movs	r0, #12
 800a9f2:	f7f6 fe95 	bl	8001720 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800a9f6:	200c      	movs	r0, #12
 800a9f8:	f7f6 fec6 	bl	8001788 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800a9fc:	4622      	mov	r2, r4
 800a9fe:	4621      	mov	r1, r4
 800aa00:	203b      	movs	r0, #59	; 0x3b
 800aa02:	f7f6 fe8d 	bl	8001720 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800aa06:	203b      	movs	r0, #59	; 0x3b
 800aa08:	f7f6 febe 	bl	8001788 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800aa0c:	4622      	mov	r2, r4
 800aa0e:	4621      	mov	r1, r4
 800aa10:	2045      	movs	r0, #69	; 0x45
 800aa12:	f7f6 fe85 	bl	8001720 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800aa16:	2045      	movs	r0, #69	; 0x45
 800aa18:	f7f6 feb6 	bl	8001788 <HAL_NVIC_EnableIRQ>
}
 800aa1c:	b002      	add	sp, #8
 800aa1e:	bd10      	pop	{r4, pc}
 800aa20:	40023800 	.word	0x40023800

0800aa24 <AssignHandles>:

/* USER CODE BEGIN 4 */

void AssignHandles()
{
 800aa24:	b508      	push	{r3, lr}
	HandlesAssigner_ShareHandle(&hadc1, eHandle_ADC);
 800aa26:	2105      	movs	r1, #5
 800aa28:	480d      	ldr	r0, [pc, #52]	; (800aa60 <AssignHandles+0x3c>)
 800aa2a:	f7ff fb69 	bl	800a100 <HandlesAssigner_ShareHandle>
	HandlesAssigner_ShareHandle(&hi2c1, eHandle_I2C1);
 800aa2e:	2101      	movs	r1, #1
 800aa30:	480c      	ldr	r0, [pc, #48]	; (800aa64 <AssignHandles+0x40>)
 800aa32:	f7ff fb65 	bl	800a100 <HandlesAssigner_ShareHandle>
	HandlesAssigner_ShareHandle(&hi2c2, eHandle_I2C2);
 800aa36:	2102      	movs	r1, #2
 800aa38:	480b      	ldr	r0, [pc, #44]	; (800aa68 <AssignHandles+0x44>)
 800aa3a:	f7ff fb61 	bl	800a100 <HandlesAssigner_ShareHandle>
	HandlesAssigner_ShareHandle(&hrtc, eHandle_RTC);
 800aa3e:	2103      	movs	r1, #3
 800aa40:	480a      	ldr	r0, [pc, #40]	; (800aa6c <AssignHandles+0x48>)
 800aa42:	f7ff fb5d 	bl	800a100 <HandlesAssigner_ShareHandle>
	HandlesAssigner_ShareHandle(&hsd, eHandle_SD);
 800aa46:	2104      	movs	r1, #4
 800aa48:	4809      	ldr	r0, [pc, #36]	; (800aa70 <AssignHandles+0x4c>)
 800aa4a:	f7ff fb59 	bl	800a100 <HandlesAssigner_ShareHandle>
	HandlesAssigner_ShareHandle(&htim2, eHandle_TIM2);
 800aa4e:	2100      	movs	r1, #0
 800aa50:	4808      	ldr	r0, [pc, #32]	; (800aa74 <AssignHandles+0x50>)
 800aa52:	f7ff fb55 	bl	800a100 <HandlesAssigner_ShareHandle>
	HandlesAssigner_ShareHandle(&huart1, eHandle_UART1);
 800aa56:	2106      	movs	r1, #6
 800aa58:	4807      	ldr	r0, [pc, #28]	; (800aa78 <AssignHandles+0x54>)
 800aa5a:	f7ff fb51 	bl	800a100 <HandlesAssigner_ShareHandle>
}
 800aa5e:	bd08      	pop	{r3, pc}
 800aa60:	20001f98 	.word	0x20001f98
 800aa64:	20001ef0 	.word	0x20001ef0
 800aa68:	20001f44 	.word	0x20001f44
 800aa6c:	20002024 	.word	0x20002024
 800aa70:	200020a4 	.word	0x200020a4
 800aa74:	20002128 	.word	0x20002128
 800aa78:	20001fe0 	.word	0x20001fe0

0800aa7c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800aa7c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800aa7e:	e7fe      	b.n	800aa7e <Error_Handler+0x2>

0800aa80 <MX_RTC_Init>:
{
 800aa80:	b500      	push	{lr}
 800aa82:	b087      	sub	sp, #28
  RTC_TimeTypeDef sTime = {0};
 800aa84:	2300      	movs	r3, #0
 800aa86:	9301      	str	r3, [sp, #4]
 800aa88:	9302      	str	r3, [sp, #8]
 800aa8a:	9303      	str	r3, [sp, #12]
 800aa8c:	9304      	str	r3, [sp, #16]
 800aa8e:	9305      	str	r3, [sp, #20]
  RTC_DateTypeDef sDate = {0};
 800aa90:	9300      	str	r3, [sp, #0]
  hrtc.Instance = RTC;
 800aa92:	481c      	ldr	r0, [pc, #112]	; (800ab04 <MX_RTC_Init+0x84>)
 800aa94:	4a1c      	ldr	r2, [pc, #112]	; (800ab08 <MX_RTC_Init+0x88>)
 800aa96:	6002      	str	r2, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800aa98:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 800aa9a:	227f      	movs	r2, #127	; 0x7f
 800aa9c:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 800aa9e:	22ff      	movs	r2, #255	; 0xff
 800aaa0:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800aaa2:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800aaa4:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800aaa6:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800aaa8:	f7f9 fed3 	bl	8004852 <HAL_RTC_Init>
 800aaac:	bb20      	cbnz	r0, 800aaf8 <MX_RTC_Init+0x78>
  sTime.Hours = 0x0D;
 800aaae:	230d      	movs	r3, #13
 800aab0:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x24;
 800aab4:	2324      	movs	r3, #36	; 0x24
 800aab6:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x0;
 800aaba:	2300      	movs	r3, #0
 800aabc:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800aac0:	9304      	str	r3, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800aac2:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800aac4:	2201      	movs	r2, #1
 800aac6:	a901      	add	r1, sp, #4
 800aac8:	480e      	ldr	r0, [pc, #56]	; (800ab04 <MX_RTC_Init+0x84>)
 800aaca:	f7f9 ff2f 	bl	800492c <HAL_RTC_SetTime>
 800aace:	b9a8      	cbnz	r0, 800aafc <MX_RTC_Init+0x7c>
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 800aad0:	2302      	movs	r3, #2
 800aad2:	f88d 3000 	strb.w	r3, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 800aad6:	2201      	movs	r2, #1
 800aad8:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x04;
 800aadc:	2304      	movs	r3, #4
 800aade:	f88d 3002 	strb.w	r3, [sp, #2]
  sDate.Year = 0x16;
 800aae2:	2316      	movs	r3, #22
 800aae4:	f88d 3003 	strb.w	r3, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800aae8:	4669      	mov	r1, sp
 800aaea:	4806      	ldr	r0, [pc, #24]	; (800ab04 <MX_RTC_Init+0x84>)
 800aaec:	f7f9 ff9d 	bl	8004a2a <HAL_RTC_SetDate>
 800aaf0:	b930      	cbnz	r0, 800ab00 <MX_RTC_Init+0x80>
}
 800aaf2:	b007      	add	sp, #28
 800aaf4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800aaf8:	f7ff ffc0 	bl	800aa7c <Error_Handler>
    Error_Handler();
 800aafc:	f7ff ffbe 	bl	800aa7c <Error_Handler>
    Error_Handler();
 800ab00:	f7ff ffbc 	bl	800aa7c <Error_Handler>
 800ab04:	20002024 	.word	0x20002024
 800ab08:	40002800 	.word	0x40002800

0800ab0c <MX_I2C1_Init>:
{
 800ab0c:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 800ab0e:	480b      	ldr	r0, [pc, #44]	; (800ab3c <MX_I2C1_Init+0x30>)
 800ab10:	4b0b      	ldr	r3, [pc, #44]	; (800ab40 <MX_I2C1_Init+0x34>)
 800ab12:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 25000;
 800ab14:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800ab18:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800ab1e:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800ab20:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ab24:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800ab26:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800ab28:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800ab2a:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800ab2c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800ab2e:	f7f7 fc97 	bl	8002460 <HAL_I2C_Init>
 800ab32:	b900      	cbnz	r0, 800ab36 <MX_I2C1_Init+0x2a>
}
 800ab34:	bd08      	pop	{r3, pc}
    Error_Handler();
 800ab36:	f7ff ffa1 	bl	800aa7c <Error_Handler>
 800ab3a:	bf00      	nop
 800ab3c:	20001ef0 	.word	0x20001ef0
 800ab40:	40005400 	.word	0x40005400

0800ab44 <MX_I2C2_Init>:
{
 800ab44:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 800ab46:	480b      	ldr	r0, [pc, #44]	; (800ab74 <MX_I2C2_Init+0x30>)
 800ab48:	4b0b      	ldr	r3, [pc, #44]	; (800ab78 <MX_I2C2_Init+0x34>)
 800ab4a:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 25000;
 800ab4c:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800ab50:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800ab52:	2300      	movs	r3, #0
 800ab54:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800ab56:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800ab58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ab5c:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800ab5e:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800ab60:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800ab62:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800ab64:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800ab66:	f7f7 fc7b 	bl	8002460 <HAL_I2C_Init>
 800ab6a:	b900      	cbnz	r0, 800ab6e <MX_I2C2_Init+0x2a>
}
 800ab6c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800ab6e:	f7ff ff85 	bl	800aa7c <Error_Handler>
 800ab72:	bf00      	nop
 800ab74:	20001f44 	.word	0x20001f44
 800ab78:	40005800 	.word	0x40005800

0800ab7c <MX_USART1_UART_Init>:
{
 800ab7c:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 800ab7e:	480a      	ldr	r0, [pc, #40]	; (800aba8 <MX_USART1_UART_Init+0x2c>)
 800ab80:	4b0a      	ldr	r3, [pc, #40]	; (800abac <MX_USART1_UART_Init+0x30>)
 800ab82:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800ab84:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800ab88:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800ab8e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800ab90:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800ab92:	220c      	movs	r2, #12
 800ab94:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ab96:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800ab98:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800ab9a:	f7fb faad 	bl	80060f8 <HAL_UART_Init>
 800ab9e:	b900      	cbnz	r0, 800aba2 <MX_USART1_UART_Init+0x26>
}
 800aba0:	bd08      	pop	{r3, pc}
    Error_Handler();
 800aba2:	f7ff ff6b 	bl	800aa7c <Error_Handler>
 800aba6:	bf00      	nop
 800aba8:	20001fe0 	.word	0x20001fe0
 800abac:	40011000 	.word	0x40011000

0800abb0 <MX_TIM2_Init>:
{
 800abb0:	b500      	push	{lr}
 800abb2:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800abb4:	2300      	movs	r3, #0
 800abb6:	930a      	str	r3, [sp, #40]	; 0x28
 800abb8:	930b      	str	r3, [sp, #44]	; 0x2c
 800abba:	930c      	str	r3, [sp, #48]	; 0x30
 800abbc:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800abbe:	9308      	str	r3, [sp, #32]
 800abc0:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800abc2:	9301      	str	r3, [sp, #4]
 800abc4:	9302      	str	r3, [sp, #8]
 800abc6:	9303      	str	r3, [sp, #12]
 800abc8:	9304      	str	r3, [sp, #16]
 800abca:	9305      	str	r3, [sp, #20]
 800abcc:	9306      	str	r3, [sp, #24]
 800abce:	9307      	str	r3, [sp, #28]
  htim2.Instance = TIM2;
 800abd0:	481c      	ldr	r0, [pc, #112]	; (800ac44 <MX_TIM2_Init+0x94>)
 800abd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800abd6:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 72;
 800abd8:	2248      	movs	r2, #72	; 0x48
 800abda:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800abdc:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 250000;
 800abde:	4a1a      	ldr	r2, [pc, #104]	; (800ac48 <MX_TIM2_Init+0x98>)
 800abe0:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800abe2:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800abe4:	2380      	movs	r3, #128	; 0x80
 800abe6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800abe8:	f7fb f876 	bl	8005cd8 <HAL_TIM_Base_Init>
 800abec:	bb00      	cbnz	r0, 800ac30 <MX_TIM2_Init+0x80>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800abee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abf2:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800abf4:	a90a      	add	r1, sp, #40	; 0x28
 800abf6:	4813      	ldr	r0, [pc, #76]	; (800ac44 <MX_TIM2_Init+0x94>)
 800abf8:	f7fb f933 	bl	8005e62 <HAL_TIM_ConfigClockSource>
 800abfc:	b9d0      	cbnz	r0, 800ac34 <MX_TIM2_Init+0x84>
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800abfe:	4811      	ldr	r0, [pc, #68]	; (800ac44 <MX_TIM2_Init+0x94>)
 800ac00:	f7fb f896 	bl	8005d30 <HAL_TIM_OC_Init>
 800ac04:	b9c0      	cbnz	r0, 800ac38 <MX_TIM2_Init+0x88>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ac06:	2300      	movs	r3, #0
 800ac08:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ac0a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800ac0c:	a908      	add	r1, sp, #32
 800ac0e:	480d      	ldr	r0, [pc, #52]	; (800ac44 <MX_TIM2_Init+0x94>)
 800ac10:	f7fb f9a6 	bl	8005f60 <HAL_TIMEx_MasterConfigSynchronization>
 800ac14:	b990      	cbnz	r0, 800ac3c <MX_TIM2_Init+0x8c>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800ac16:	2200      	movs	r2, #0
 800ac18:	9201      	str	r2, [sp, #4]
  sConfigOC.Pulse = 0;
 800ac1a:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ac1c:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ac1e:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ac20:	a901      	add	r1, sp, #4
 800ac22:	4808      	ldr	r0, [pc, #32]	; (800ac44 <MX_TIM2_Init+0x94>)
 800ac24:	f7fb f8e2 	bl	8005dec <HAL_TIM_OC_ConfigChannel>
 800ac28:	b950      	cbnz	r0, 800ac40 <MX_TIM2_Init+0x90>
}
 800ac2a:	b00f      	add	sp, #60	; 0x3c
 800ac2c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800ac30:	f7ff ff24 	bl	800aa7c <Error_Handler>
    Error_Handler();
 800ac34:	f7ff ff22 	bl	800aa7c <Error_Handler>
    Error_Handler();
 800ac38:	f7ff ff20 	bl	800aa7c <Error_Handler>
    Error_Handler();
 800ac3c:	f7ff ff1e 	bl	800aa7c <Error_Handler>
    Error_Handler();
 800ac40:	f7ff ff1c 	bl	800aa7c <Error_Handler>
 800ac44:	20002128 	.word	0x20002128
 800ac48:	0003d090 	.word	0x0003d090

0800ac4c <MX_ADC1_Init>:
{
 800ac4c:	b500      	push	{lr}
 800ac4e:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 800ac50:	2300      	movs	r3, #0
 800ac52:	9300      	str	r3, [sp, #0]
 800ac54:	9301      	str	r3, [sp, #4]
 800ac56:	9302      	str	r3, [sp, #8]
 800ac58:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 800ac5a:	4813      	ldr	r0, [pc, #76]	; (800aca8 <MX_ADC1_Init+0x5c>)
 800ac5c:	4a13      	ldr	r2, [pc, #76]	; (800acac <MX_ADC1_Init+0x60>)
 800ac5e:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800ac60:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800ac62:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800ac64:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800ac66:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800ac68:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800ac6c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800ac6e:	4a10      	ldr	r2, [pc, #64]	; (800acb0 <MX_ADC1_Init+0x64>)
 800ac70:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ac72:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 800ac74:	2201      	movs	r2, #1
 800ac76:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800ac78:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ac7c:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800ac7e:	f7f6 fb03 	bl	8001288 <HAL_ADC_Init>
 800ac82:	b968      	cbnz	r0, 800aca0 <MX_ADC1_Init+0x54>
  sConfig.Channel = ADC_CHANNEL_8;
 800ac84:	2308      	movs	r3, #8
 800ac86:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 800ac88:	2301      	movs	r3, #1
 800ac8a:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ac90:	4669      	mov	r1, sp
 800ac92:	4805      	ldr	r0, [pc, #20]	; (800aca8 <MX_ADC1_Init+0x5c>)
 800ac94:	f7f6 fc5e 	bl	8001554 <HAL_ADC_ConfigChannel>
 800ac98:	b920      	cbnz	r0, 800aca4 <MX_ADC1_Init+0x58>
}
 800ac9a:	b005      	add	sp, #20
 800ac9c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800aca0:	f7ff feec 	bl	800aa7c <Error_Handler>
    Error_Handler();
 800aca4:	f7ff feea 	bl	800aa7c <Error_Handler>
 800aca8:	20001f98 	.word	0x20001f98
 800acac:	40012000 	.word	0x40012000
 800acb0:	0f000001 	.word	0x0f000001

0800acb4 <SystemClock_Config>:
{
 800acb4:	b500      	push	{lr}
 800acb6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800acb8:	2230      	movs	r2, #48	; 0x30
 800acba:	2100      	movs	r1, #0
 800acbc:	a808      	add	r0, sp, #32
 800acbe:	f000 ff1f 	bl	800bb00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800acc2:	2300      	movs	r3, #0
 800acc4:	9303      	str	r3, [sp, #12]
 800acc6:	9304      	str	r3, [sp, #16]
 800acc8:	9305      	str	r3, [sp, #20]
 800acca:	9306      	str	r3, [sp, #24]
 800accc:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 800acce:	9301      	str	r3, [sp, #4]
 800acd0:	4a21      	ldr	r2, [pc, #132]	; (800ad58 <SystemClock_Config+0xa4>)
 800acd2:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800acd4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800acd8:	6411      	str	r1, [r2, #64]	; 0x40
 800acda:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800acdc:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800ace0:	9201      	str	r2, [sp, #4]
 800ace2:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800ace4:	9302      	str	r3, [sp, #8]
 800ace6:	4b1d      	ldr	r3, [pc, #116]	; (800ad5c <SystemClock_Config+0xa8>)
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800acee:	601a      	str	r2, [r3, #0]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800acf6:	9302      	str	r3, [sp, #8]
 800acf8:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800acfa:	2305      	movs	r3, #5
 800acfc:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800acfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ad02:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800ad04:	2301      	movs	r3, #1
 800ad06:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ad08:	2302      	movs	r3, #2
 800ad0a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ad0c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800ad10:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800ad12:	220c      	movs	r2, #12
 800ad14:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800ad16:	2248      	movs	r2, #72	; 0x48
 800ad18:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800ad1a:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800ad1c:	2303      	movs	r3, #3
 800ad1e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ad20:	a808      	add	r0, sp, #32
 800ad22:	f7f9 f96f 	bl	8004004 <HAL_RCC_OscConfig>
 800ad26:	b990      	cbnz	r0, 800ad4e <SystemClock_Config+0x9a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ad28:	230f      	movs	r3, #15
 800ad2a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ad2c:	2102      	movs	r1, #2
 800ad2e:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ad30:	2300      	movs	r3, #0
 800ad32:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800ad34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ad38:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800ad3a:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800ad3c:	a803      	add	r0, sp, #12
 800ad3e:	f7f9 fbb1 	bl	80044a4 <HAL_RCC_ClockConfig>
 800ad42:	b930      	cbnz	r0, 800ad52 <SystemClock_Config+0x9e>
  HAL_RCC_EnableCSS();
 800ad44:	f7f9 fb58 	bl	80043f8 <HAL_RCC_EnableCSS>
}
 800ad48:	b015      	add	sp, #84	; 0x54
 800ad4a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800ad4e:	f7ff fe95 	bl	800aa7c <Error_Handler>
    Error_Handler();
 800ad52:	f7ff fe93 	bl	800aa7c <Error_Handler>
 800ad56:	bf00      	nop
 800ad58:	40023800 	.word	0x40023800
 800ad5c:	40007000 	.word	0x40007000

0800ad60 <main>:
{
 800ad60:	b508      	push	{r3, lr}
  HAL_Init();
 800ad62:	f7f6 f9b7 	bl	80010d4 <HAL_Init>
  SystemClock_Config();
 800ad66:	f7ff ffa5 	bl	800acb4 <SystemClock_Config>
  MX_GPIO_Init();
 800ad6a:	f7ff fdb1 	bl	800a8d0 <MX_GPIO_Init>
  MX_DMA_Init();
 800ad6e:	f7ff fe25 	bl	800a9bc <MX_DMA_Init>
  MX_RTC_Init();
 800ad72:	f7ff fe85 	bl	800aa80 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 800ad76:	f7ff fd9b 	bl	800a8b0 <MX_SDIO_SD_Init>
  MX_I2C1_Init();
 800ad7a:	f7ff fec7 	bl	800ab0c <MX_I2C1_Init>
  MX_I2C2_Init();
 800ad7e:	f7ff fee1 	bl	800ab44 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800ad82:	f7ff fefb 	bl	800ab7c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800ad86:	f000 fc1f 	bl	800b5c8 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 800ad8a:	f7ff ff11 	bl	800abb0 <MX_TIM2_Init>
  MX_ADC1_Init();
 800ad8e:	f7ff ff5d 	bl	800ac4c <MX_ADC1_Init>
  MX_FATFS_Init();
 800ad92:	f7ff fd73 	bl	800a87c <MX_FATFS_Init>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, SET);
 800ad96:	4c0b      	ldr	r4, [pc, #44]	; (800adc4 <main+0x64>)
 800ad98:	2201      	movs	r2, #1
 800ad9a:	4611      	mov	r1, r2
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	f7f7 f818 	bl	8001dd2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, SET);
 800ada2:	2201      	movs	r2, #1
 800ada4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ada8:	4620      	mov	r0, r4
 800adaa:	f7f7 f812 	bl	8001dd2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, SET);
 800adae:	2201      	movs	r2, #1
 800adb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800adb4:	4620      	mov	r0, r4
 800adb6:	f7f7 f80c 	bl	8001dd2 <HAL_GPIO_WritePin>
  AssignHandles();
 800adba:	f7ff fe33 	bl	800aa24 <AssignHandles>
	  ApplicationPerform();
 800adbe:	f7fe feb5 	bl	8009b2c <ApplicationPerform>
  while (1)
 800adc2:	e7fc      	b.n	800adbe <main+0x5e>
 800adc4:	40020800 	.word	0x40020800

0800adc8 <SD_CheckStatus>:

  return -1;
}

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800adc8:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 800adca:	4b07      	ldr	r3, [pc, #28]	; (800ade8 <SD_CheckStatus+0x20>)
 800adcc:	2201      	movs	r2, #1
 800adce:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800add0:	f7ff fd0a 	bl	800a7e8 <BSP_SD_GetCardState>
 800add4:	b920      	cbnz	r0, 800ade0 <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 800add6:	4a04      	ldr	r2, [pc, #16]	; (800ade8 <SD_CheckStatus+0x20>)
 800add8:	7813      	ldrb	r3, [r2, #0]
 800adda:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800adde:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 800ade0:	4b01      	ldr	r3, [pc, #4]	; (800ade8 <SD_CheckStatus+0x20>)
 800ade2:	7818      	ldrb	r0, [r3, #0]
}
 800ade4:	bd08      	pop	{r3, pc}
 800ade6:	bf00      	nop
 800ade8:	20000117 	.word	0x20000117

0800adec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800adec:	b510      	push	{r4, lr}
 800adee:	4604      	mov	r4, r0

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800adf0:	f7ff fd2a 	bl	800a848 <BSP_SD_Init>
 800adf4:	b110      	cbz	r0, 800adfc <SD_initialize+0x10>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800adf6:	4b04      	ldr	r3, [pc, #16]	; (800ae08 <SD_initialize+0x1c>)
 800adf8:	7818      	ldrb	r0, [r3, #0]
}
 800adfa:	bd10      	pop	{r4, pc}
    Stat = SD_CheckStatus(lun);
 800adfc:	4620      	mov	r0, r4
 800adfe:	f7ff ffe3 	bl	800adc8 <SD_CheckStatus>
 800ae02:	4b01      	ldr	r3, [pc, #4]	; (800ae08 <SD_initialize+0x1c>)
 800ae04:	7018      	strb	r0, [r3, #0]
 800ae06:	e7f6      	b.n	800adf6 <SD_initialize+0xa>
 800ae08:	20000117 	.word	0x20000117

0800ae0c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ae0c:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 800ae0e:	f7ff ffdb 	bl	800adc8 <SD_CheckStatus>
}
 800ae12:	bd08      	pop	{r3, pc}

0800ae14 <SD_CheckStatusWithTimeout>:
{
 800ae14:	b538      	push	{r3, r4, r5, lr}
 800ae16:	4605      	mov	r5, r0
  uint32_t timer = HAL_GetTick();
 800ae18:	f7f6 f982 	bl	8001120 <HAL_GetTick>
 800ae1c:	4604      	mov	r4, r0
  while(HAL_GetTick() - timer < timeout)
 800ae1e:	f7f6 f97f 	bl	8001120 <HAL_GetTick>
 800ae22:	1b00      	subs	r0, r0, r4
 800ae24:	42a8      	cmp	r0, r5
 800ae26:	d205      	bcs.n	800ae34 <SD_CheckStatusWithTimeout+0x20>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ae28:	f7ff fcde 	bl	800a7e8 <BSP_SD_GetCardState>
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	d1f6      	bne.n	800ae1e <SD_CheckStatusWithTimeout+0xa>
      return 0;
 800ae30:	2000      	movs	r0, #0
 800ae32:	e001      	b.n	800ae38 <SD_CheckStatusWithTimeout+0x24>
  return -1;
 800ae34:	f04f 30ff 	mov.w	r0, #4294967295
}
 800ae38:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ae3c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ae3c:	b570      	push	{r4, r5, r6, lr}
 800ae3e:	460c      	mov	r4, r1
 800ae40:	4615      	mov	r5, r2
 800ae42:	461e      	mov	r6, r3

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ae44:	f247 5030 	movw	r0, #30000	; 0x7530
 800ae48:	f7ff ffe4 	bl	800ae14 <SD_CheckStatusWithTimeout>
 800ae4c:	2800      	cmp	r0, #0
 800ae4e:	db30      	blt.n	800aeb2 <SD_read+0x76>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800ae50:	4632      	mov	r2, r6
 800ae52:	4629      	mov	r1, r5
 800ae54:	4620      	mov	r0, r4
 800ae56:	f7ff fcaf 	bl	800a7b8 <BSP_SD_ReadBlocks_DMA>
 800ae5a:	b108      	cbz	r0, 800ae60 <SD_read+0x24>
  DRESULT res = RES_ERROR;
 800ae5c:	2001      	movs	r0, #1
 800ae5e:	e029      	b.n	800aeb4 <SD_read+0x78>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800ae60:	4b15      	ldr	r3, [pc, #84]	; (800aeb8 <SD_read+0x7c>)
 800ae62:	2200      	movs	r2, #0
 800ae64:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800ae66:	f7f6 f95b 	bl	8001120 <HAL_GetTick>
 800ae6a:	4604      	mov	r4, r0
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ae6c:	4b12      	ldr	r3, [pc, #72]	; (800aeb8 <SD_read+0x7c>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	b933      	cbnz	r3, 800ae80 <SD_read+0x44>
 800ae72:	f7f6 f955 	bl	8001120 <HAL_GetTick>
 800ae76:	1b00      	subs	r0, r0, r4
 800ae78:	f247 532f 	movw	r3, #29999	; 0x752f
 800ae7c:	4298      	cmp	r0, r3
 800ae7e:	d9f5      	bls.n	800ae6c <SD_read+0x30>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800ae80:	4b0d      	ldr	r3, [pc, #52]	; (800aeb8 <SD_read+0x7c>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	b90b      	cbnz	r3, 800ae8a <SD_read+0x4e>
      {
        res = RES_ERROR;
 800ae86:	2001      	movs	r0, #1
 800ae88:	e014      	b.n	800aeb4 <SD_read+0x78>
      }
      else
      {
        ReadStatus = 0;
 800ae8a:	4b0b      	ldr	r3, [pc, #44]	; (800aeb8 <SD_read+0x7c>)
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ae90:	f7f6 f946 	bl	8001120 <HAL_GetTick>
 800ae94:	4604      	mov	r4, r0

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ae96:	f7f6 f943 	bl	8001120 <HAL_GetTick>
 800ae9a:	1b00      	subs	r0, r0, r4
 800ae9c:	f247 532f 	movw	r3, #29999	; 0x752f
 800aea0:	4298      	cmp	r0, r3
 800aea2:	d804      	bhi.n	800aeae <SD_read+0x72>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800aea4:	f7ff fca0 	bl	800a7e8 <BSP_SD_GetCardState>
 800aea8:	2800      	cmp	r0, #0
 800aeaa:	d1f4      	bne.n	800ae96 <SD_read+0x5a>
 800aeac:	e002      	b.n	800aeb4 <SD_read+0x78>
  DRESULT res = RES_ERROR;
 800aeae:	2001      	movs	r0, #1
 800aeb0:	e000      	b.n	800aeb4 <SD_read+0x78>
    return res;
 800aeb2:	2001      	movs	r0, #1
        res = RES_OK;
    }
#endif

  return res;
}
 800aeb4:	bd70      	pop	{r4, r5, r6, pc}
 800aeb6:	bf00      	nop
 800aeb8:	20001604 	.word	0x20001604

0800aebc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800aebc:	b570      	push	{r4, r5, r6, lr}
 800aebe:	460c      	mov	r4, r1
 800aec0:	4615      	mov	r5, r2
 800aec2:	461e      	mov	r6, r3
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800aec4:	4b1c      	ldr	r3, [pc, #112]	; (800af38 <SD_write+0x7c>)
 800aec6:	2200      	movs	r2, #0
 800aec8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800aeca:	f247 5030 	movw	r0, #30000	; 0x7530
 800aece:	f7ff ffa1 	bl	800ae14 <SD_CheckStatusWithTimeout>
 800aed2:	2800      	cmp	r0, #0
 800aed4:	db2d      	blt.n	800af32 <SD_write+0x76>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800aed6:	4632      	mov	r2, r6
 800aed8:	4629      	mov	r1, r5
 800aeda:	4620      	mov	r0, r4
 800aedc:	f7ff fc78 	bl	800a7d0 <BSP_SD_WriteBlocks_DMA>
 800aee0:	b108      	cbz	r0, 800aee6 <SD_write+0x2a>
  DRESULT res = RES_ERROR;
 800aee2:	2001      	movs	r0, #1
 800aee4:	e026      	b.n	800af34 <SD_write+0x78>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800aee6:	f7f6 f91b 	bl	8001120 <HAL_GetTick>
 800aeea:	4604      	mov	r4, r0
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800aeec:	4b12      	ldr	r3, [pc, #72]	; (800af38 <SD_write+0x7c>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	b933      	cbnz	r3, 800af00 <SD_write+0x44>
 800aef2:	f7f6 f915 	bl	8001120 <HAL_GetTick>
 800aef6:	1b00      	subs	r0, r0, r4
 800aef8:	f247 532f 	movw	r3, #29999	; 0x752f
 800aefc:	4298      	cmp	r0, r3
 800aefe:	d9f5      	bls.n	800aeec <SD_write+0x30>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800af00:	4b0d      	ldr	r3, [pc, #52]	; (800af38 <SD_write+0x7c>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	b90b      	cbnz	r3, 800af0a <SD_write+0x4e>
      {
        res = RES_ERROR;
 800af06:	2001      	movs	r0, #1
 800af08:	e014      	b.n	800af34 <SD_write+0x78>
      }
      else
      {
        WriteStatus = 0;
 800af0a:	4b0b      	ldr	r3, [pc, #44]	; (800af38 <SD_write+0x7c>)
 800af0c:	2200      	movs	r2, #0
 800af0e:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800af10:	f7f6 f906 	bl	8001120 <HAL_GetTick>
 800af14:	4604      	mov	r4, r0

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800af16:	f7f6 f903 	bl	8001120 <HAL_GetTick>
 800af1a:	1b00      	subs	r0, r0, r4
 800af1c:	f247 532f 	movw	r3, #29999	; 0x752f
 800af20:	4298      	cmp	r0, r3
 800af22:	d804      	bhi.n	800af2e <SD_write+0x72>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800af24:	f7ff fc60 	bl	800a7e8 <BSP_SD_GetCardState>
 800af28:	2800      	cmp	r0, #0
 800af2a:	d1f4      	bne.n	800af16 <SD_write+0x5a>
 800af2c:	e002      	b.n	800af34 <SD_write+0x78>
  DRESULT res = RES_ERROR;
 800af2e:	2001      	movs	r0, #1
 800af30:	e000      	b.n	800af34 <SD_write+0x78>
    return res;
 800af32:	2001      	movs	r0, #1
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
}
 800af34:	bd70      	pop	{r4, r5, r6, pc}
 800af36:	bf00      	nop
 800af38:	20001608 	.word	0x20001608

0800af3c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800af3c:	b530      	push	{r4, r5, lr}
 800af3e:	b089      	sub	sp, #36	; 0x24
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800af40:	4b13      	ldr	r3, [pc, #76]	; (800af90 <SD_ioctl+0x54>)
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	f013 0401 	ands.w	r4, r3, #1
 800af48:	d11d      	bne.n	800af86 <SD_ioctl+0x4a>
 800af4a:	4608      	mov	r0, r1
 800af4c:	4615      	mov	r5, r2

  switch (cmd)
 800af4e:	2903      	cmp	r1, #3
 800af50:	d81c      	bhi.n	800af8c <SD_ioctl+0x50>
 800af52:	e8df f001 	tbb	[pc, r1]
 800af56:	0219      	.short	0x0219
 800af58:	1009      	.short	0x1009
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800af5a:	4668      	mov	r0, sp
 800af5c:	f7ff fc4e 	bl	800a7fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800af60:	9b06      	ldr	r3, [sp, #24]
 800af62:	602b      	str	r3, [r5, #0]
    res = RES_OK;
 800af64:	4620      	mov	r0, r4
    break;
 800af66:	e00f      	b.n	800af88 <SD_ioctl+0x4c>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800af68:	4668      	mov	r0, sp
 800af6a:	f7ff fc47 	bl	800a7fc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800af6e:	9b07      	ldr	r3, [sp, #28]
 800af70:	802b      	strh	r3, [r5, #0]
    res = RES_OK;
 800af72:	4620      	mov	r0, r4
    break;
 800af74:	e008      	b.n	800af88 <SD_ioctl+0x4c>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800af76:	4668      	mov	r0, sp
 800af78:	f7ff fc40 	bl	800a7fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800af7c:	9b07      	ldr	r3, [sp, #28]
 800af7e:	0a5b      	lsrs	r3, r3, #9
 800af80:	602b      	str	r3, [r5, #0]
    res = RES_OK;
 800af82:	4620      	mov	r0, r4
    break;
 800af84:	e000      	b.n	800af88 <SD_ioctl+0x4c>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800af86:	2003      	movs	r0, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 800af88:	b009      	add	sp, #36	; 0x24
 800af8a:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 800af8c:	2004      	movs	r0, #4
 800af8e:	e7fb      	b.n	800af88 <SD_ioctl+0x4c>
 800af90:	20000117 	.word	0x20000117

0800af94 <BSP_SD_WriteCpltCallback>:
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{

  WriteStatus = 1;
 800af94:	4b01      	ldr	r3, [pc, #4]	; (800af9c <BSP_SD_WriteCpltCallback+0x8>)
 800af96:	2201      	movs	r2, #1
 800af98:	601a      	str	r2, [r3, #0]
}
 800af9a:	4770      	bx	lr
 800af9c:	20001608 	.word	0x20001608

0800afa0 <BSP_SD_ReadCpltCallback>:
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
  ReadStatus = 1;
 800afa0:	4b01      	ldr	r3, [pc, #4]	; (800afa8 <BSP_SD_ReadCpltCallback+0x8>)
 800afa2:	2201      	movs	r2, #1
 800afa4:	601a      	str	r2, [r3, #0]
}
 800afa6:	4770      	bx	lr
 800afa8:	20001604 	.word	0x20001604

0800afac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800afac:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800afae:	2100      	movs	r1, #0
 800afb0:	9100      	str	r1, [sp, #0]
 800afb2:	4b0b      	ldr	r3, [pc, #44]	; (800afe0 <HAL_MspInit+0x34>)
 800afb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800afb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800afba:	645a      	str	r2, [r3, #68]	; 0x44
 800afbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800afbe:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800afc2:	9200      	str	r2, [sp, #0]
 800afc4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800afc6:	9101      	str	r1, [sp, #4]
 800afc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800afca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800afce:	641a      	str	r2, [r3, #64]	; 0x40
 800afd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afd6:	9301      	str	r3, [sp, #4]
 800afd8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800afda:	b002      	add	sp, #8
 800afdc:	4770      	bx	lr
 800afde:	bf00      	nop
 800afe0:	40023800 	.word	0x40023800

0800afe4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800afe4:	b510      	push	{r4, lr}
 800afe6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800afe8:	2300      	movs	r3, #0
 800afea:	9303      	str	r3, [sp, #12]
 800afec:	9304      	str	r3, [sp, #16]
 800afee:	9305      	str	r3, [sp, #20]
 800aff0:	9306      	str	r3, [sp, #24]
 800aff2:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 800aff4:	6802      	ldr	r2, [r0, #0]
 800aff6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800affa:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 800affe:	429a      	cmp	r2, r3
 800b000:	d001      	beq.n	800b006 <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800b002:	b008      	add	sp, #32
 800b004:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 800b006:	2400      	movs	r4, #0
 800b008:	9401      	str	r4, [sp, #4]
 800b00a:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800b00e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b010:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b014:	645a      	str	r2, [r3, #68]	; 0x44
 800b016:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b018:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800b01c:	9201      	str	r2, [sp, #4]
 800b01e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b020:	9402      	str	r4, [sp, #8]
 800b022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b024:	f042 0202 	orr.w	r2, r2, #2
 800b028:	631a      	str	r2, [r3, #48]	; 0x30
 800b02a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b02c:	f003 0302 	and.w	r3, r3, #2
 800b030:	9302      	str	r3, [sp, #8]
 800b032:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800b034:	2301      	movs	r3, #1
 800b036:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b038:	2303      	movs	r3, #3
 800b03a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b03c:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b03e:	a903      	add	r1, sp, #12
 800b040:	4805      	ldr	r0, [pc, #20]	; (800b058 <HAL_ADC_MspInit+0x74>)
 800b042:	f7f6 fde7 	bl	8001c14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800b046:	4622      	mov	r2, r4
 800b048:	4621      	mov	r1, r4
 800b04a:	2012      	movs	r0, #18
 800b04c:	f7f6 fb68 	bl	8001720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800b050:	2012      	movs	r0, #18
 800b052:	f7f6 fb99 	bl	8001788 <HAL_NVIC_EnableIRQ>
}
 800b056:	e7d4      	b.n	800b002 <HAL_ADC_MspInit+0x1e>
 800b058:	40020400 	.word	0x40020400

0800b05c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800b05c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b060:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b062:	2300      	movs	r3, #0
 800b064:	9305      	str	r3, [sp, #20]
 800b066:	9306      	str	r3, [sp, #24]
 800b068:	9307      	str	r3, [sp, #28]
 800b06a:	9308      	str	r3, [sp, #32]
 800b06c:	9309      	str	r3, [sp, #36]	; 0x24
  if(hi2c->Instance==I2C1)
 800b06e:	6803      	ldr	r3, [r0, #0]
 800b070:	4a50      	ldr	r2, [pc, #320]	; (800b1b4 <HAL_I2C_MspInit+0x158>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d005      	beq.n	800b082 <HAL_I2C_MspInit+0x26>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 800b076:	4a50      	ldr	r2, [pc, #320]	; (800b1b8 <HAL_I2C_MspInit+0x15c>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d052      	beq.n	800b122 <HAL_I2C_MspInit+0xc6>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800b07c:	b00b      	add	sp, #44	; 0x2c
 800b07e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b082:	4604      	mov	r4, r0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b084:	2500      	movs	r5, #0
 800b086:	9501      	str	r5, [sp, #4]
 800b088:	4e4c      	ldr	r6, [pc, #304]	; (800b1bc <HAL_I2C_MspInit+0x160>)
 800b08a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800b08c:	f043 0302 	orr.w	r3, r3, #2
 800b090:	6333      	str	r3, [r6, #48]	; 0x30
 800b092:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800b094:	f003 0302 	and.w	r3, r3, #2
 800b098:	9301      	str	r3, [sp, #4]
 800b09a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b09c:	23c0      	movs	r3, #192	; 0xc0
 800b09e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b0a0:	2312      	movs	r3, #18
 800b0a2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b0a8:	2303      	movs	r3, #3
 800b0aa:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800b0ac:	2304      	movs	r3, #4
 800b0ae:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b0b0:	a905      	add	r1, sp, #20
 800b0b2:	4843      	ldr	r0, [pc, #268]	; (800b1c0 <HAL_I2C_MspInit+0x164>)
 800b0b4:	f7f6 fdae 	bl	8001c14 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b0b8:	9502      	str	r5, [sp, #8]
 800b0ba:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800b0bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b0c0:	6433      	str	r3, [r6, #64]	; 0x40
 800b0c2:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800b0c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b0c8:	9302      	str	r3, [sp, #8]
 800b0ca:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 800b0cc:	483d      	ldr	r0, [pc, #244]	; (800b1c4 <HAL_I2C_MspInit+0x168>)
 800b0ce:	4b3e      	ldr	r3, [pc, #248]	; (800b1c8 <HAL_I2C_MspInit+0x16c>)
 800b0d0:	6003      	str	r3, [r0, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800b0d2:	6045      	str	r5, [r0, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b0d4:	2340      	movs	r3, #64	; 0x40
 800b0d6:	6083      	str	r3, [r0, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b0d8:	60c5      	str	r5, [r0, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b0da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0de:	6103      	str	r3, [r0, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b0e0:	6145      	str	r5, [r0, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b0e2:	6185      	str	r5, [r0, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800b0e4:	61c5      	str	r5, [r0, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800b0e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b0ea:	6203      	str	r3, [r0, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b0ec:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800b0ee:	f7f6 fbef 	bl	80018d0 <HAL_DMA_Init>
 800b0f2:	b998      	cbnz	r0, 800b11c <HAL_I2C_MspInit+0xc0>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800b0f4:	4b33      	ldr	r3, [pc, #204]	; (800b1c4 <HAL_I2C_MspInit+0x168>)
 800b0f6:	6363      	str	r3, [r4, #52]	; 0x34
 800b0f8:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	4611      	mov	r1, r2
 800b0fe:	201f      	movs	r0, #31
 800b100:	f7f6 fb0e 	bl	8001720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800b104:	201f      	movs	r0, #31
 800b106:	f7f6 fb3f 	bl	8001788 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800b10a:	2200      	movs	r2, #0
 800b10c:	4611      	mov	r1, r2
 800b10e:	2020      	movs	r0, #32
 800b110:	f7f6 fb06 	bl	8001720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800b114:	2020      	movs	r0, #32
 800b116:	f7f6 fb37 	bl	8001788 <HAL_NVIC_EnableIRQ>
 800b11a:	e7af      	b.n	800b07c <HAL_I2C_MspInit+0x20>
      Error_Handler();
 800b11c:	f7ff fcae 	bl	800aa7c <Error_Handler>
 800b120:	e7e8      	b.n	800b0f4 <HAL_I2C_MspInit+0x98>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b122:	2400      	movs	r4, #0
 800b124:	9403      	str	r4, [sp, #12]
 800b126:	4d25      	ldr	r5, [pc, #148]	; (800b1bc <HAL_I2C_MspInit+0x160>)
 800b128:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b12a:	f043 0302 	orr.w	r3, r3, #2
 800b12e:	632b      	str	r3, [r5, #48]	; 0x30
 800b130:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b132:	f003 0302 	and.w	r3, r3, #2
 800b136:	9303      	str	r3, [sp, #12]
 800b138:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800b13a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b13e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b140:	f04f 0912 	mov.w	r9, #18
 800b144:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b148:	f04f 0801 	mov.w	r8, #1
 800b14c:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b150:	2703      	movs	r7, #3
 800b152:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800b154:	2304      	movs	r3, #4
 800b156:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b158:	4e19      	ldr	r6, [pc, #100]	; (800b1c0 <HAL_I2C_MspInit+0x164>)
 800b15a:	a905      	add	r1, sp, #20
 800b15c:	4630      	mov	r0, r6
 800b15e:	f7f6 fd59 	bl	8001c14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800b162:	2308      	movs	r3, #8
 800b164:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b166:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b16a:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b16e:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800b170:	2309      	movs	r3, #9
 800b172:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b174:	a905      	add	r1, sp, #20
 800b176:	4630      	mov	r0, r6
 800b178:	f7f6 fd4c 	bl	8001c14 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800b17c:	9404      	str	r4, [sp, #16]
 800b17e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800b180:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b184:	642b      	str	r3, [r5, #64]	; 0x40
 800b186:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800b188:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b18c:	9304      	str	r3, [sp, #16]
 800b18e:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800b190:	4622      	mov	r2, r4
 800b192:	4621      	mov	r1, r4
 800b194:	2021      	movs	r0, #33	; 0x21
 800b196:	f7f6 fac3 	bl	8001720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800b19a:	2021      	movs	r0, #33	; 0x21
 800b19c:	f7f6 faf4 	bl	8001788 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800b1a0:	4622      	mov	r2, r4
 800b1a2:	4621      	mov	r1, r4
 800b1a4:	2022      	movs	r0, #34	; 0x22
 800b1a6:	f7f6 fabb 	bl	8001720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800b1aa:	2022      	movs	r0, #34	; 0x22
 800b1ac:	f7f6 faec 	bl	8001788 <HAL_NVIC_EnableIRQ>
}
 800b1b0:	e764      	b.n	800b07c <HAL_I2C_MspInit+0x20>
 800b1b2:	bf00      	nop
 800b1b4:	40005400 	.word	0x40005400
 800b1b8:	40005800 	.word	0x40005800
 800b1bc:	40023800 	.word	0x40023800
 800b1c0:	40020400 	.word	0x40020400
 800b1c4:	20001e90 	.word	0x20001e90
 800b1c8:	40026028 	.word	0x40026028

0800b1cc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800b1cc:	b500      	push	{lr}
 800b1ce:	b087      	sub	sp, #28
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	9301      	str	r3, [sp, #4]
 800b1d4:	9302      	str	r3, [sp, #8]
 800b1d6:	9303      	str	r3, [sp, #12]
 800b1d8:	9305      	str	r3, [sp, #20]
  if(hrtc->Instance==RTC)
 800b1da:	6802      	ldr	r2, [r0, #0]
 800b1dc:	4b0a      	ldr	r3, [pc, #40]	; (800b208 <HAL_RTC_MspInit+0x3c>)
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d002      	beq.n	800b1e8 <HAL_RTC_MspInit+0x1c>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800b1e2:	b007      	add	sp, #28
 800b1e4:	f85d fb04 	ldr.w	pc, [sp], #4
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b1e8:	2302      	movs	r3, #2
 800b1ea:	9300      	str	r3, [sp, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800b1ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1f0:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b1f2:	4668      	mov	r0, sp
 800b1f4:	f7f9 fa40 	bl	8004678 <HAL_RCCEx_PeriphCLKConfig>
 800b1f8:	b918      	cbnz	r0, 800b202 <HAL_RTC_MspInit+0x36>
    __HAL_RCC_RTC_ENABLE();
 800b1fa:	4b04      	ldr	r3, [pc, #16]	; (800b20c <HAL_RTC_MspInit+0x40>)
 800b1fc:	2201      	movs	r2, #1
 800b1fe:	601a      	str	r2, [r3, #0]
}
 800b200:	e7ef      	b.n	800b1e2 <HAL_RTC_MspInit+0x16>
      Error_Handler();
 800b202:	f7ff fc3b 	bl	800aa7c <Error_Handler>
 800b206:	e7f8      	b.n	800b1fa <HAL_RTC_MspInit+0x2e>
 800b208:	40002800 	.word	0x40002800
 800b20c:	42470e3c 	.word	0x42470e3c

0800b210 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800b210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b214:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b216:	2300      	movs	r3, #0
 800b218:	9305      	str	r3, [sp, #20]
 800b21a:	9306      	str	r3, [sp, #24]
 800b21c:	9307      	str	r3, [sp, #28]
 800b21e:	9308      	str	r3, [sp, #32]
 800b220:	9309      	str	r3, [sp, #36]	; 0x24
  if(hsd->Instance==SDIO)
 800b222:	6802      	ldr	r2, [r0, #0]
 800b224:	4b58      	ldr	r3, [pc, #352]	; (800b388 <HAL_SD_MspInit+0x178>)
 800b226:	429a      	cmp	r2, r3
 800b228:	d002      	beq.n	800b230 <HAL_SD_MspInit+0x20>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800b22a:	b00a      	add	sp, #40	; 0x28
 800b22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b230:	4604      	mov	r4, r0
    __HAL_RCC_SDIO_CLK_ENABLE();
 800b232:	2500      	movs	r5, #0
 800b234:	9501      	str	r5, [sp, #4]
 800b236:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 800b23a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b23c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b240:	645a      	str	r2, [r3, #68]	; 0x44
 800b242:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b244:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800b248:	9201      	str	r2, [sp, #4]
 800b24a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b24c:	9502      	str	r5, [sp, #8]
 800b24e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b250:	f042 0201 	orr.w	r2, r2, #1
 800b254:	631a      	str	r2, [r3, #48]	; 0x30
 800b256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b258:	f002 0201 	and.w	r2, r2, #1
 800b25c:	9202      	str	r2, [sp, #8]
 800b25e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b260:	9503      	str	r5, [sp, #12]
 800b262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b264:	f042 0202 	orr.w	r2, r2, #2
 800b268:	631a      	str	r2, [r3, #48]	; 0x30
 800b26a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b26c:	f002 0202 	and.w	r2, r2, #2
 800b270:	9203      	str	r2, [sp, #12]
 800b272:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b274:	9504      	str	r5, [sp, #16]
 800b276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b278:	f042 0204 	orr.w	r2, r2, #4
 800b27c:	631a      	str	r2, [r3, #48]	; 0x30
 800b27e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b280:	f003 0304 	and.w	r3, r3, #4
 800b284:	9304      	str	r3, [sp, #16]
 800b286:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800b288:	2340      	movs	r3, #64	; 0x40
 800b28a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b28c:	f04f 0802 	mov.w	r8, #2
 800b290:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b294:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b296:	2603      	movs	r6, #3
 800b298:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800b29a:	270c      	movs	r7, #12
 800b29c:	9709      	str	r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b29e:	a905      	add	r1, sp, #20
 800b2a0:	483a      	ldr	r0, [pc, #232]	; (800b38c <HAL_SD_MspInit+0x17c>)
 800b2a2:	f7f6 fcb7 	bl	8001c14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800b2a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2aa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2ac:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2b0:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2b2:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800b2b4:	9709      	str	r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b2b6:	a905      	add	r1, sp, #20
 800b2b8:	4835      	ldr	r0, [pc, #212]	; (800b390 <HAL_SD_MspInit+0x180>)
 800b2ba:	f7f6 fcab 	bl	8001c14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800b2be:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800b2c2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2c4:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2c8:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2ca:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800b2cc:	9709      	str	r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b2ce:	a905      	add	r1, sp, #20
 800b2d0:	4830      	ldr	r0, [pc, #192]	; (800b394 <HAL_SD_MspInit+0x184>)
 800b2d2:	f7f6 fc9f 	bl	8001c14 <HAL_GPIO_Init>
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800b2d6:	4830      	ldr	r0, [pc, #192]	; (800b398 <HAL_SD_MspInit+0x188>)
 800b2d8:	4b30      	ldr	r3, [pc, #192]	; (800b39c <HAL_SD_MspInit+0x18c>)
 800b2da:	6003      	str	r3, [r0, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800b2dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b2e0:	6043      	str	r3, [r0, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b2e2:	6085      	str	r5, [r0, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b2e4:	60c5      	str	r5, [r0, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b2e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2ea:	6103      	str	r3, [r0, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b2ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2f0:	6143      	str	r3, [r0, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b2f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b2f6:	6183      	str	r3, [r0, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800b2f8:	2320      	movs	r3, #32
 800b2fa:	61c3      	str	r3, [r0, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b2fc:	6205      	str	r5, [r0, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b2fe:	2304      	movs	r3, #4
 800b300:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800b302:	6286      	str	r6, [r0, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800b304:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b308:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800b30a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b30e:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800b310:	f7f6 fade 	bl	80018d0 <HAL_DMA_Init>
 800b314:	2800      	cmp	r0, #0
 800b316:	d131      	bne.n	800b37c <HAL_SD_MspInit+0x16c>
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800b318:	4b1f      	ldr	r3, [pc, #124]	; (800b398 <HAL_SD_MspInit+0x188>)
 800b31a:	6423      	str	r3, [r4, #64]	; 0x40
 800b31c:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800b31e:	4820      	ldr	r0, [pc, #128]	; (800b3a0 <HAL_SD_MspInit+0x190>)
 800b320:	4b20      	ldr	r3, [pc, #128]	; (800b3a4 <HAL_SD_MspInit+0x194>)
 800b322:	6003      	str	r3, [r0, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800b324:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b328:	6043      	str	r3, [r0, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b32a:	2340      	movs	r3, #64	; 0x40
 800b32c:	6083      	str	r3, [r0, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b32e:	2300      	movs	r3, #0
 800b330:	60c3      	str	r3, [r0, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b332:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b336:	6102      	str	r2, [r0, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b338:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b33c:	6142      	str	r2, [r0, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b33e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b342:	6182      	str	r2, [r0, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800b344:	2220      	movs	r2, #32
 800b346:	61c2      	str	r2, [r0, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b348:	6203      	str	r3, [r0, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b34a:	2304      	movs	r3, #4
 800b34c:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800b34e:	2303      	movs	r3, #3
 800b350:	6283      	str	r3, [r0, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800b352:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b356:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800b358:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b35c:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800b35e:	f7f6 fab7 	bl	80018d0 <HAL_DMA_Init>
 800b362:	b970      	cbnz	r0, 800b382 <HAL_SD_MspInit+0x172>
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800b364:	4b0e      	ldr	r3, [pc, #56]	; (800b3a0 <HAL_SD_MspInit+0x190>)
 800b366:	63e3      	str	r3, [r4, #60]	; 0x3c
 800b368:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800b36a:	2200      	movs	r2, #0
 800b36c:	4611      	mov	r1, r2
 800b36e:	2031      	movs	r0, #49	; 0x31
 800b370:	f7f6 f9d6 	bl	8001720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800b374:	2031      	movs	r0, #49	; 0x31
 800b376:	f7f6 fa07 	bl	8001788 <HAL_NVIC_EnableIRQ>
}
 800b37a:	e756      	b.n	800b22a <HAL_SD_MspInit+0x1a>
      Error_Handler();
 800b37c:	f7ff fb7e 	bl	800aa7c <Error_Handler>
 800b380:	e7ca      	b.n	800b318 <HAL_SD_MspInit+0x108>
      Error_Handler();
 800b382:	f7ff fb7b 	bl	800aa7c <Error_Handler>
 800b386:	e7ed      	b.n	800b364 <HAL_SD_MspInit+0x154>
 800b388:	40012c00 	.word	0x40012c00
 800b38c:	40020000 	.word	0x40020000
 800b390:	40020400 	.word	0x40020400
 800b394:	40020800 	.word	0x40020800
 800b398:	20001e30 	.word	0x20001e30
 800b39c:	40026458 	.word	0x40026458
 800b3a0:	20002044 	.word	0x20002044
 800b3a4:	400264a0 	.word	0x400264a0

0800b3a8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 800b3a8:	6803      	ldr	r3, [r0, #0]
 800b3aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3ae:	d000      	beq.n	800b3b2 <HAL_TIM_Base_MspInit+0xa>
 800b3b0:	4770      	bx	lr
{
 800b3b2:	b500      	push	{lr}
 800b3b4:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b3b6:	2100      	movs	r1, #0
 800b3b8:	9101      	str	r1, [sp, #4]
 800b3ba:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800b3be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b3c0:	f042 0201 	orr.w	r2, r2, #1
 800b3c4:	641a      	str	r2, [r3, #64]	; 0x40
 800b3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3c8:	f003 0301 	and.w	r3, r3, #1
 800b3cc:	9301      	str	r3, [sp, #4]
 800b3ce:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800b3d0:	460a      	mov	r2, r1
 800b3d2:	201c      	movs	r0, #28
 800b3d4:	f7f6 f9a4 	bl	8001720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800b3d8:	201c      	movs	r0, #28
 800b3da:	f7f6 f9d5 	bl	8001788 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800b3de:	b003      	add	sp, #12
 800b3e0:	f85d fb04 	ldr.w	pc, [sp], #4

0800b3e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b3e4:	b500      	push	{lr}
 800b3e6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	9303      	str	r3, [sp, #12]
 800b3ec:	9304      	str	r3, [sp, #16]
 800b3ee:	9305      	str	r3, [sp, #20]
 800b3f0:	9306      	str	r3, [sp, #24]
 800b3f2:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 800b3f4:	6802      	ldr	r2, [r0, #0]
 800b3f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b3fa:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d002      	beq.n	800b408 <HAL_UART_MspInit+0x24>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800b402:	b009      	add	sp, #36	; 0x24
 800b404:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 800b408:	2200      	movs	r2, #0
 800b40a:	9201      	str	r2, [sp, #4]
 800b40c:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 800b410:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800b412:	f041 0110 	orr.w	r1, r1, #16
 800b416:	6459      	str	r1, [r3, #68]	; 0x44
 800b418:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800b41a:	f001 0110 	and.w	r1, r1, #16
 800b41e:	9101      	str	r1, [sp, #4]
 800b420:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b422:	9202      	str	r2, [sp, #8]
 800b424:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b426:	f041 0101 	orr.w	r1, r1, #1
 800b42a:	6319      	str	r1, [r3, #48]	; 0x30
 800b42c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b42e:	f003 0301 	and.w	r3, r3, #1
 800b432:	9302      	str	r3, [sp, #8]
 800b434:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800b436:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800b43a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b43c:	2302      	movs	r3, #2
 800b43e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b440:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b442:	2303      	movs	r3, #3
 800b444:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b446:	2307      	movs	r3, #7
 800b448:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b44a:	a903      	add	r1, sp, #12
 800b44c:	4801      	ldr	r0, [pc, #4]	; (800b454 <HAL_UART_MspInit+0x70>)
 800b44e:	f7f6 fbe1 	bl	8001c14 <HAL_GPIO_Init>
}
 800b452:	e7d6      	b.n	800b402 <HAL_UART_MspInit+0x1e>
 800b454:	40020000 	.word	0x40020000

0800b458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b458:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800b45a:	f7f9 f8fb 	bl	8004654 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800b45e:	e7fe      	b.n	800b45e <NMI_Handler+0x6>

0800b460 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b460:	e7fe      	b.n	800b460 <HardFault_Handler>

0800b462 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b462:	e7fe      	b.n	800b462 <MemManage_Handler>

0800b464 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b464:	e7fe      	b.n	800b464 <BusFault_Handler>

0800b466 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b466:	e7fe      	b.n	800b466 <UsageFault_Handler>

0800b468 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b468:	4770      	bx	lr

0800b46a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b46a:	4770      	bx	lr

0800b46c <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b46c:	4770      	bx	lr

0800b46e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b46e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
    AsynchronousTaskTimerUpdate();
 800b470:	f7fe fa8a 	bl	8009988 <AsynchronousTaskTimerUpdate>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b474:	f7f5 fe48 	bl	8001108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b478:	bd08      	pop	{r3, pc}
	...

0800b47c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800b47c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800b47e:	4802      	ldr	r0, [pc, #8]	; (800b488 <DMA1_Stream1_IRQHandler+0xc>)
 800b480:	f7f6 fad4 	bl	8001a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800b484:	bd08      	pop	{r3, pc}
 800b486:	bf00      	nop
 800b488:	20001e90 	.word	0x20001e90

0800b48c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800b48c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */
	uint32_t u32Result;

	u32Result = HAL_ADC_GetValue(&hadc1);
 800b48e:	4c05      	ldr	r4, [pc, #20]	; (800b4a4 <ADC_IRQHandler+0x18>)
 800b490:	4620      	mov	r0, r4
 800b492:	f7f5 ffb1 	bl	80013f8 <HAL_ADC_GetValue>

	USB_SignalizeVBUSMeasurementReady(u32Result);
 800b496:	f7ff f929 	bl	800a6ec <USB_SignalizeVBUSMeasurementReady>

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800b49a:	4620      	mov	r0, r4
 800b49c:	f7f5 ffb2 	bl	8001404 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800b4a0:	bd10      	pop	{r4, pc}
 800b4a2:	bf00      	nop
 800b4a4:	20001f98 	.word	0x20001f98

0800b4a8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800b4a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_SET)
 800b4aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b4ae:	4804      	ldr	r0, [pc, #16]	; (800b4c0 <EXTI9_5_IRQHandler+0x18>)
 800b4b0:	f7f6 fc88 	bl	8001dc4 <HAL_GPIO_ReadPin>
	else
	{
//		CommManager_SetUSBConnectionState(USB_Disconnected);
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_VSENSE_Pin);
 800b4b4:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b4b8:	f7f6 fc9c 	bl	8001df4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800b4bc:	bd08      	pop	{r3, pc}
 800b4be:	bf00      	nop
 800b4c0:	40020000 	.word	0x40020000

0800b4c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800b4c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800b4c6:	4804      	ldr	r0, [pc, #16]	; (800b4d8 <TIM2_IRQHandler+0x14>)
 800b4c8:	f7fa fafa 	bl	8005ac0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  TempCollect_ScheduleMeasurement();
 800b4cc:	f7fe ffb2 	bl	800a434 <TempCollect_ScheduleMeasurement>
  DataSaver_TickAveragingPeriod();
 800b4d0:	f7fe fda4 	bl	800a01c <DataSaver_TickAveragingPeriod>

  /* USER CODE END TIM2_IRQn 1 */
}
 800b4d4:	bd08      	pop	{r3, pc}
 800b4d6:	bf00      	nop
 800b4d8:	20002128 	.word	0x20002128

0800b4dc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800b4dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800b4de:	4802      	ldr	r0, [pc, #8]	; (800b4e8 <I2C1_EV_IRQHandler+0xc>)
 800b4e0:	f7f7 feaa 	bl	8003238 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800b4e4:	bd08      	pop	{r3, pc}
 800b4e6:	bf00      	nop
 800b4e8:	20001ef0 	.word	0x20001ef0

0800b4ec <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800b4ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */
	TempCollect_CommFaultOccured(eModule_I2CA);
 800b4ee:	2000      	movs	r0, #0
 800b4f0:	f7fe ffbe 	bl	800a470 <TempCollect_CommFaultOccured>
  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800b4f4:	4801      	ldr	r0, [pc, #4]	; (800b4fc <I2C1_ER_IRQHandler+0x10>)
 800b4f6:	f7f7 ff6f 	bl	80033d8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800b4fa:	bd08      	pop	{r3, pc}
 800b4fc:	20001ef0 	.word	0x20001ef0

0800b500 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800b500:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800b502:	4802      	ldr	r0, [pc, #8]	; (800b50c <I2C2_EV_IRQHandler+0xc>)
 800b504:	f7f7 fe98 	bl	8003238 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800b508:	bd08      	pop	{r3, pc}
 800b50a:	bf00      	nop
 800b50c:	20001f44 	.word	0x20001f44

0800b510 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800b510:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */
	TempCollect_CommFaultOccured(eModule_I2CB);
 800b512:	2001      	movs	r0, #1
 800b514:	f7fe ffac 	bl	800a470 <TempCollect_CommFaultOccured>
  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800b518:	4801      	ldr	r0, [pc, #4]	; (800b520 <I2C2_ER_IRQHandler+0x10>)
 800b51a:	f7f7 ff5d 	bl	80033d8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800b51e:	bd08      	pop	{r3, pc}
 800b520:	20001f44 	.word	0x20001f44

0800b524 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800b524:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDIO_IRQn 0 */
	u32Counter_SDIO++;
 800b526:	4a04      	ldr	r2, [pc, #16]	; (800b538 <SDIO_IRQHandler+0x14>)
 800b528:	6813      	ldr	r3, [r2, #0]
 800b52a:	3301      	adds	r3, #1
 800b52c:	6013      	str	r3, [r2, #0]

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800b52e:	4803      	ldr	r0, [pc, #12]	; (800b53c <SDIO_IRQHandler+0x18>)
 800b530:	f7fa f8e2 	bl	80056f8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800b534:	bd08      	pop	{r3, pc}
 800b536:	bf00      	nop
 800b538:	20001614 	.word	0x20001614
 800b53c:	200020a4 	.word	0x200020a4

0800b540 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800b540:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

	u32Counter_DMA2S3++;
 800b542:	4a04      	ldr	r2, [pc, #16]	; (800b554 <DMA2_Stream3_IRQHandler+0x14>)
 800b544:	6813      	ldr	r3, [r2, #0]
 800b546:	3301      	adds	r3, #1
 800b548:	6013      	str	r3, [r2, #0]

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800b54a:	4803      	ldr	r0, [pc, #12]	; (800b558 <DMA2_Stream3_IRQHandler+0x18>)
 800b54c:	f7f6 fa6e 	bl	8001a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800b550:	bd08      	pop	{r3, pc}
 800b552:	bf00      	nop
 800b554:	2000160c 	.word	0x2000160c
 800b558:	20001e30 	.word	0x20001e30

0800b55c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b55c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b55e:	4802      	ldr	r0, [pc, #8]	; (800b568 <OTG_FS_IRQHandler+0xc>)
 800b560:	f7f8 f95e 	bl	8003820 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b564:	bd08      	pop	{r3, pc}
 800b566:	bf00      	nop
 800b568:	20003440 	.word	0x20003440

0800b56c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800b56c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */
	u32Counter_DMA2S6++;
 800b56e:	4a04      	ldr	r2, [pc, #16]	; (800b580 <DMA2_Stream6_IRQHandler+0x14>)
 800b570:	6813      	ldr	r3, [r2, #0]
 800b572:	3301      	adds	r3, #1
 800b574:	6013      	str	r3, [r2, #0]

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800b576:	4803      	ldr	r0, [pc, #12]	; (800b584 <DMA2_Stream6_IRQHandler+0x18>)
 800b578:	f7f6 fa58 	bl	8001a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800b57c:	bd08      	pop	{r3, pc}
 800b57e:	bf00      	nop
 800b580:	20001610 	.word	0x20001610
 800b584:	20002044 	.word	0x20002044

0800b588 <HAL_I2C_MemRxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b588:	b508      	push	{r3, lr}
	if(hi2c == &hi2c1)
 800b58a:	4b08      	ldr	r3, [pc, #32]	; (800b5ac <HAL_I2C_MemRxCpltCallback+0x24>)
 800b58c:	4298      	cmp	r0, r3
 800b58e:	d006      	beq.n	800b59e <HAL_I2C_MemRxCpltCallback+0x16>
	{
		TempCollect_I2CA_Done();
	}
	else if ( hi2c == &hi2c2)
 800b590:	4b07      	ldr	r3, [pc, #28]	; (800b5b0 <HAL_I2C_MemRxCpltCallback+0x28>)
 800b592:	4298      	cmp	r0, r3
 800b594:	d006      	beq.n	800b5a4 <HAL_I2C_MemRxCpltCallback+0x1c>
	{
		TempCollect_I2CB_Done();
	}
	else
	{
		AssertError(AppError_UndefinedError);
 800b596:	2008      	movs	r0, #8
 800b598:	f7fe fa80 	bl	8009a9c <AssertError>
	}
}
 800b59c:	bd08      	pop	{r3, pc}
		TempCollect_I2CA_Done();
 800b59e:	f7fe ff5b 	bl	800a458 <TempCollect_I2CA_Done>
 800b5a2:	e7fb      	b.n	800b59c <HAL_I2C_MemRxCpltCallback+0x14>
		TempCollect_I2CB_Done();
 800b5a4:	f7fe ff5e 	bl	800a464 <TempCollect_I2CB_Done>
 800b5a8:	e7f8      	b.n	800b59c <HAL_I2C_MemRxCpltCallback+0x14>
 800b5aa:	bf00      	nop
 800b5ac:	20001ef0 	.word	0x20001ef0
 800b5b0:	20001f44 	.word	0x20001f44

0800b5b4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b5b4:	4a03      	ldr	r2, [pc, #12]	; (800b5c4 <SystemInit+0x10>)
 800b5b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b5ba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b5be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800b5c2:	4770      	bx	lr
 800b5c4:	e000ed00 	.word	0xe000ed00

0800b5c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b5c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	490f      	ldr	r1, [pc, #60]	; (800b60c <MX_USB_DEVICE_Init+0x44>)
 800b5ce:	4810      	ldr	r0, [pc, #64]	; (800b610 <MX_USB_DEVICE_Init+0x48>)
 800b5d0:	f7fc fa17 	bl	8007a02 <USBD_Init>
 800b5d4:	b970      	cbnz	r0, 800b5f4 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b5d6:	490f      	ldr	r1, [pc, #60]	; (800b614 <MX_USB_DEVICE_Init+0x4c>)
 800b5d8:	480d      	ldr	r0, [pc, #52]	; (800b610 <MX_USB_DEVICE_Init+0x48>)
 800b5da:	f7fc fa29 	bl	8007a30 <USBD_RegisterClass>
 800b5de:	b960      	cbnz	r0, 800b5fa <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b5e0:	490d      	ldr	r1, [pc, #52]	; (800b618 <MX_USB_DEVICE_Init+0x50>)
 800b5e2:	480b      	ldr	r0, [pc, #44]	; (800b610 <MX_USB_DEVICE_Init+0x48>)
 800b5e4:	f7fc f9bf 	bl	8007966 <USBD_CDC_RegisterInterface>
 800b5e8:	b950      	cbnz	r0, 800b600 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b5ea:	4809      	ldr	r0, [pc, #36]	; (800b610 <MX_USB_DEVICE_Init+0x48>)
 800b5ec:	f7fc fa37 	bl	8007a5e <USBD_Start>
 800b5f0:	b948      	cbnz	r0, 800b606 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b5f2:	bd08      	pop	{r3, pc}
    Error_Handler();
 800b5f4:	f7ff fa42 	bl	800aa7c <Error_Handler>
 800b5f8:	e7ed      	b.n	800b5d6 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 800b5fa:	f7ff fa3f 	bl	800aa7c <Error_Handler>
 800b5fe:	e7ef      	b.n	800b5e0 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800b600:	f7ff fa3c 	bl	800aa7c <Error_Handler>
 800b604:	e7f1      	b.n	800b5ea <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800b606:	f7ff fa39 	bl	800aa7c <Error_Handler>
}
 800b60a:	e7f2      	b.n	800b5f2 <MX_USB_DEVICE_Init+0x2a>
 800b60c:	20000130 	.word	0x20000130
 800b610:	20002170 	.word	0x20002170
 800b614:	20000008 	.word	0x20000008
 800b618:	2000011c 	.word	0x2000011c

0800b61c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800b61c:	2000      	movs	r0, #0
 800b61e:	4770      	bx	lr

0800b620 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800b620:	2000      	movs	r0, #0
 800b622:	4770      	bx	lr

0800b624 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 800b624:	2000      	movs	r0, #0
 800b626:	4770      	bx	lr

0800b628 <CDC_Receive_FS>:
{
 800b628:	b510      	push	{r4, lr}
 800b62a:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b62c:	4c04      	ldr	r4, [pc, #16]	; (800b640 <CDC_Receive_FS+0x18>)
 800b62e:	4620      	mov	r0, r4
 800b630:	f7fc f9ab 	bl	800798a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b634:	4620      	mov	r0, r4
 800b636:	f7fc f9cb 	bl	80079d0 <USBD_CDC_ReceivePacket>
}
 800b63a:	2000      	movs	r0, #0
 800b63c:	bd10      	pop	{r4, pc}
 800b63e:	bf00      	nop
 800b640:	20002170 	.word	0x20002170

0800b644 <CDC_Init_FS>:
{
 800b644:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b646:	4c06      	ldr	r4, [pc, #24]	; (800b660 <CDC_Init_FS+0x1c>)
 800b648:	2200      	movs	r2, #0
 800b64a:	4906      	ldr	r1, [pc, #24]	; (800b664 <CDC_Init_FS+0x20>)
 800b64c:	4620      	mov	r0, r4
 800b64e:	f7fc f991 	bl	8007974 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b652:	4905      	ldr	r1, [pc, #20]	; (800b668 <CDC_Init_FS+0x24>)
 800b654:	4620      	mov	r0, r4
 800b656:	f7fc f998 	bl	800798a <USBD_CDC_SetRxBuffer>
}
 800b65a:	2000      	movs	r0, #0
 800b65c:	bd10      	pop	{r4, pc}
 800b65e:	bf00      	nop
 800b660:	20002170 	.word	0x20002170
 800b664:	20002c40 	.word	0x20002c40
 800b668:	20002440 	.word	0x20002440

0800b66c <CDC_Transmit_FS>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b66c:	4b09      	ldr	r3, [pc, #36]	; (800b694 <CDC_Transmit_FS+0x28>)
 800b66e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 800b672:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b676:	b10b      	cbz	r3, 800b67c <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 800b678:	2001      	movs	r0, #1
}
 800b67a:	4770      	bx	lr
{
 800b67c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b67e:	4c05      	ldr	r4, [pc, #20]	; (800b694 <CDC_Transmit_FS+0x28>)
 800b680:	460a      	mov	r2, r1
 800b682:	4601      	mov	r1, r0
 800b684:	4620      	mov	r0, r4
 800b686:	f7fc f975 	bl	8007974 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b68a:	4620      	mov	r0, r4
 800b68c:	f7fc f986 	bl	800799c <USBD_CDC_TransmitPacket>
}
 800b690:	bd10      	pop	{r4, pc}
 800b692:	bf00      	nop
 800b694:	20002170 	.word	0x20002170

0800b698 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b698:	b530      	push	{r4, r5, lr}
 800b69a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b69c:	2300      	movs	r3, #0
 800b69e:	9303      	str	r3, [sp, #12]
 800b6a0:	9304      	str	r3, [sp, #16]
 800b6a2:	9305      	str	r3, [sp, #20]
 800b6a4:	9306      	str	r3, [sp, #24]
 800b6a6:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b6a8:	6803      	ldr	r3, [r0, #0]
 800b6aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6ae:	d001      	beq.n	800b6b4 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b6b0:	b009      	add	sp, #36	; 0x24
 800b6b2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b6b4:	2500      	movs	r5, #0
 800b6b6:	9501      	str	r5, [sp, #4]
 800b6b8:	4c17      	ldr	r4, [pc, #92]	; (800b718 <HAL_PCD_MspInit+0x80>)
 800b6ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b6bc:	f043 0301 	orr.w	r3, r3, #1
 800b6c0:	6323      	str	r3, [r4, #48]	; 0x30
 800b6c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b6c4:	f003 0301 	and.w	r3, r3, #1
 800b6c8:	9301      	str	r3, [sp, #4]
 800b6ca:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b6cc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b6d0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6d2:	2302      	movs	r3, #2
 800b6d4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6d6:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b6d8:	2303      	movs	r3, #3
 800b6da:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b6dc:	230a      	movs	r3, #10
 800b6de:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b6e0:	a903      	add	r1, sp, #12
 800b6e2:	480e      	ldr	r0, [pc, #56]	; (800b71c <HAL_PCD_MspInit+0x84>)
 800b6e4:	f7f6 fa96 	bl	8001c14 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b6e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b6ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6ee:	6363      	str	r3, [r4, #52]	; 0x34
 800b6f0:	9502      	str	r5, [sp, #8]
 800b6f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b6f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b6f8:	6463      	str	r3, [r4, #68]	; 0x44
 800b6fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b6fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b700:	9302      	str	r3, [sp, #8]
 800b702:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b704:	462a      	mov	r2, r5
 800b706:	4629      	mov	r1, r5
 800b708:	2043      	movs	r0, #67	; 0x43
 800b70a:	f7f6 f809 	bl	8001720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b70e:	2043      	movs	r0, #67	; 0x43
 800b710:	f7f6 f83a 	bl	8001788 <HAL_NVIC_EnableIRQ>
}
 800b714:	e7cc      	b.n	800b6b0 <HAL_PCD_MspInit+0x18>
 800b716:	bf00      	nop
 800b718:	40023800 	.word	0x40023800
 800b71c:	40020000 	.word	0x40020000

0800b720 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b720:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b722:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 800b726:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800b72a:	f7fc f9ad 	bl	8007a88 <USBD_LL_SetupStage>
}
 800b72e:	bd08      	pop	{r3, pc}

0800b730 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b730:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b732:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800b736:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b73a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b73e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800b742:	f7fc f9cd 	bl	8007ae0 <USBD_LL_DataOutStage>
}
 800b746:	bd08      	pop	{r3, pc}

0800b748 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b748:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b74a:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800b74e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b752:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b754:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800b758:	f7fc f9fe 	bl	8007b58 <USBD_LL_DataInStage>
}
 800b75c:	bd08      	pop	{r3, pc}

0800b75e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b75e:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b760:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800b764:	f7fc fa9e 	bl	8007ca4 <USBD_LL_SOF>
}
 800b768:	bd08      	pop	{r3, pc}

0800b76a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b76a:	b510      	push	{r4, lr}
 800b76c:	4604      	mov	r4, r0
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b76e:	68c3      	ldr	r3, [r0, #12]
 800b770:	2b02      	cmp	r3, #2
 800b772:	d109      	bne.n	800b788 <HAL_PCD_ResetCallback+0x1e>
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b774:	2101      	movs	r1, #1
 800b776:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 800b77a:	f7fc fa79 	bl	8007c70 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b77e:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 800b782:	f7fc fa48 	bl	8007c16 <USBD_LL_Reset>
}
 800b786:	bd10      	pop	{r4, pc}
    Error_Handler();
 800b788:	f7ff f978 	bl	800aa7c <Error_Handler>
 800b78c:	e7f2      	b.n	800b774 <HAL_PCD_ResetCallback+0xa>
	...

0800b790 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b790:	b510      	push	{r4, lr}
 800b792:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b794:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800b798:	f7fc fa6d 	bl	8007c76 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b79c:	6822      	ldr	r2, [r4, #0]
 800b79e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800b7a2:	f043 0301 	orr.w	r3, r3, #1
 800b7a6:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b7aa:	6a23      	ldr	r3, [r4, #32]
 800b7ac:	b123      	cbz	r3, 800b7b8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b7ae:	4a03      	ldr	r2, [pc, #12]	; (800b7bc <HAL_PCD_SuspendCallback+0x2c>)
 800b7b0:	6913      	ldr	r3, [r2, #16]
 800b7b2:	f043 0306 	orr.w	r3, r3, #6
 800b7b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b7b8:	bd10      	pop	{r4, pc}
 800b7ba:	bf00      	nop
 800b7bc:	e000ed00 	.word	0xe000ed00

0800b7c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b7c2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800b7c6:	f7fc fa60 	bl	8007c8a <USBD_LL_Resume>
}
 800b7ca:	bd08      	pop	{r3, pc}

0800b7cc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7cc:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b7ce:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800b7d2:	f7fc fa8f 	bl	8007cf4 <USBD_LL_IsoOUTIncomplete>
}
 800b7d6:	bd08      	pop	{r3, pc}

0800b7d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7d8:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b7da:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800b7de:	f7fc fa75 	bl	8007ccc <USBD_LL_IsoINIncomplete>
}
 800b7e2:	bd08      	pop	{r3, pc}

0800b7e4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7e4:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b7e6:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800b7ea:	f7fc fa97 	bl	8007d1c <USBD_LL_DevConnected>
}
 800b7ee:	bd08      	pop	{r3, pc}

0800b7f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7f0:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b7f2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800b7f6:	f7fc fa93 	bl	8007d20 <USBD_LL_DevDisconnected>
}
 800b7fa:	bd08      	pop	{r3, pc}

0800b7fc <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b7fc:	7802      	ldrb	r2, [r0, #0]
 800b7fe:	b10a      	cbz	r2, 800b804 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 800b800:	2000      	movs	r0, #0
 800b802:	4770      	bx	lr
{
 800b804:	b510      	push	{r4, lr}
 800b806:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 800b808:	4815      	ldr	r0, [pc, #84]	; (800b860 <USBD_LL_Init+0x64>)
 800b80a:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800b80e:	f8c3 02c4 	str.w	r0, [r3, #708]	; 0x2c4
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b812:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800b816:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b818:	2304      	movs	r3, #4
 800b81a:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b81c:	2202      	movs	r2, #2
 800b81e:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b820:	2300      	movs	r3, #0
 800b822:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b824:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b826:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b828:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b82a:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b82c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b82e:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b830:	f7f7 fe9d 	bl	800356e <HAL_PCD_Init>
 800b834:	b980      	cbnz	r0, 800b858 <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b836:	4c0a      	ldr	r4, [pc, #40]	; (800b860 <USBD_LL_Init+0x64>)
 800b838:	2180      	movs	r1, #128	; 0x80
 800b83a:	4620      	mov	r0, r4
 800b83c:	f7f8 fbdc 	bl	8003ff8 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b840:	2240      	movs	r2, #64	; 0x40
 800b842:	2100      	movs	r1, #0
 800b844:	4620      	mov	r0, r4
 800b846:	f7f8 fbb3 	bl	8003fb0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b84a:	2280      	movs	r2, #128	; 0x80
 800b84c:	2101      	movs	r1, #1
 800b84e:	4620      	mov	r0, r4
 800b850:	f7f8 fbae 	bl	8003fb0 <HAL_PCDEx_SetTxFiFo>
}
 800b854:	2000      	movs	r0, #0
 800b856:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800b858:	f7ff f910 	bl	800aa7c <Error_Handler>
 800b85c:	e7eb      	b.n	800b836 <USBD_LL_Init+0x3a>
 800b85e:	bf00      	nop
 800b860:	20003440 	.word	0x20003440

0800b864 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b864:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4

  if((ep_addr & 0x80) == 0x80)
 800b868:	f011 0f80 	tst.w	r1, #128	; 0x80
 800b86c:	d108      	bne.n	800b880 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b86e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800b872:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800b876:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800b87a:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
  }
}
 800b87e:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b880:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800b884:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800b888:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800b88c:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 800b890:	4770      	bx	lr

0800b892 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b892:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b894:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b898:	f7f8 fad7 	bl	8003e4a <HAL_PCD_EP_GetRxCount>
}
 800b89c:	bd08      	pop	{r3, pc}
	...

0800b8a0 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 800b8a0:	4800      	ldr	r0, [pc, #0]	; (800b8a4 <USBD_static_malloc+0x4>)
 800b8a2:	4770      	bx	lr
 800b8a4:	20001618 	.word	0x20001618

0800b8a8 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 800b8a8:	4770      	bx	lr

0800b8aa <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800b8aa:	2803      	cmp	r0, #3
 800b8ac:	d805      	bhi.n	800b8ba <USBD_Get_USB_Status+0x10>
 800b8ae:	e8df f000 	tbb	[pc, r0]
 800b8b2:	0405      	.short	0x0405
 800b8b4:	0502      	.short	0x0502
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b8b6:	2001      	movs	r0, #1
    break;
 800b8b8:	4770      	bx	lr
      usb_status = USBD_FAIL;
 800b8ba:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800b8bc:	4770      	bx	lr

0800b8be <USBD_LL_Start>:
{
 800b8be:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800b8c0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b8c4:	f7f7 fee6 	bl	8003694 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8c8:	f7ff ffef 	bl	800b8aa <USBD_Get_USB_Status>
}
 800b8cc:	bd08      	pop	{r3, pc}

0800b8ce <USBD_LL_OpenEP>:
{
 800b8ce:	b510      	push	{r4, lr}
 800b8d0:	4614      	mov	r4, r2
 800b8d2:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b8d4:	4623      	mov	r3, r4
 800b8d6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b8da:	f7f8 fa0b 	bl	8003cf4 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8de:	f7ff ffe4 	bl	800b8aa <USBD_Get_USB_Status>
}
 800b8e2:	bd10      	pop	{r4, pc}

0800b8e4 <USBD_LL_CloseEP>:
{
 800b8e4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b8e6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b8ea:	f7f8 fa46 	bl	8003d7a <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8ee:	f7ff ffdc 	bl	800b8aa <USBD_Get_USB_Status>
}
 800b8f2:	bd08      	pop	{r3, pc}

0800b8f4 <USBD_LL_StallEP>:
{
 800b8f4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b8f6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b8fa:	f7f8 fada 	bl	8003eb2 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8fe:	f7ff ffd4 	bl	800b8aa <USBD_Get_USB_Status>
}
 800b902:	bd08      	pop	{r3, pc}

0800b904 <USBD_LL_ClearStallEP>:
{
 800b904:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b906:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b90a:	f7f8 fb16 	bl	8003f3a <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b90e:	f7ff ffcc 	bl	800b8aa <USBD_Get_USB_Status>
}
 800b912:	bd08      	pop	{r3, pc}

0800b914 <USBD_LL_SetUSBAddress>:
{
 800b914:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b916:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b91a:	f7f8 f9d7 	bl	8003ccc <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b91e:	f7ff ffc4 	bl	800b8aa <USBD_Get_USB_Status>
}
 800b922:	bd08      	pop	{r3, pc}

0800b924 <USBD_LL_Transmit>:
{
 800b924:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b926:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b92a:	f7f8 fa97 	bl	8003e5c <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b92e:	f7ff ffbc 	bl	800b8aa <USBD_Get_USB_Status>
}
 800b932:	bd08      	pop	{r3, pc}

0800b934 <USBD_LL_PrepareReceive>:
{
 800b934:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b936:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b93a:	f7f8 fa57 	bl	8003dec <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b93e:	f7ff ffb4 	bl	800b8aa <USBD_Get_USB_Status>
}
 800b942:	bd08      	pop	{r3, pc}

0800b944 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b944:	2312      	movs	r3, #18
 800b946:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 800b948:	4800      	ldr	r0, [pc, #0]	; (800b94c <USBD_FS_DeviceDescriptor+0x8>)
 800b94a:	4770      	bx	lr
 800b94c:	2000014c 	.word	0x2000014c

0800b950 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b950:	2304      	movs	r3, #4
 800b952:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800b954:	4800      	ldr	r0, [pc, #0]	; (800b958 <USBD_FS_LangIDStrDescriptor+0x8>)
 800b956:	4770      	bx	lr
 800b958:	20000160 	.word	0x20000160

0800b95c <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800b95c:	2300      	movs	r3, #0
 800b95e:	4293      	cmp	r3, r2
 800b960:	d217      	bcs.n	800b992 <IntToUnicode+0x36>
{
 800b962:	b430      	push	{r4, r5}
 800b964:	e00b      	b.n	800b97e <IntToUnicode+0x22>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b966:	3437      	adds	r4, #55	; 0x37
 800b968:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 800b96c:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 800b96e:	005c      	lsls	r4, r3, #1
 800b970:	3401      	adds	r4, #1
 800b972:	2500      	movs	r5, #0
 800b974:	550d      	strb	r5, [r1, r4]
  for (idx = 0; idx < len; idx++)
 800b976:	3301      	adds	r3, #1
 800b978:	b2db      	uxtb	r3, r3
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d207      	bcs.n	800b98e <IntToUnicode+0x32>
    if (((value >> 28)) < 0xA)
 800b97e:	0f04      	lsrs	r4, r0, #28
 800b980:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 800b984:	d2ef      	bcs.n	800b966 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 800b986:	3430      	adds	r4, #48	; 0x30
 800b988:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 800b98c:	e7ee      	b.n	800b96c <IntToUnicode+0x10>
  }
}
 800b98e:	bc30      	pop	{r4, r5}
 800b990:	4770      	bx	lr
 800b992:	4770      	bx	lr

0800b994 <Get_SerialNum>:
{
 800b994:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b996:	4b0a      	ldr	r3, [pc, #40]	; (800b9c0 <Get_SerialNum+0x2c>)
 800b998:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b99a:	3304      	adds	r3, #4
 800b99c:	681c      	ldr	r4, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b99e:	3304      	adds	r3, #4
 800b9a0:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800b9a2:	18c0      	adds	r0, r0, r3
 800b9a4:	d100      	bne.n	800b9a8 <Get_SerialNum+0x14>
}
 800b9a6:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b9a8:	4d06      	ldr	r5, [pc, #24]	; (800b9c4 <Get_SerialNum+0x30>)
 800b9aa:	2208      	movs	r2, #8
 800b9ac:	1ca9      	adds	r1, r5, #2
 800b9ae:	f7ff ffd5 	bl	800b95c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b9b2:	2204      	movs	r2, #4
 800b9b4:	f105 0112 	add.w	r1, r5, #18
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	f7ff ffcf 	bl	800b95c <IntToUnicode>
}
 800b9be:	e7f2      	b.n	800b9a6 <Get_SerialNum+0x12>
 800b9c0:	1fff7a10 	.word	0x1fff7a10
 800b9c4:	20000164 	.word	0x20000164

0800b9c8 <USBD_FS_SerialStrDescriptor>:
{
 800b9c8:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800b9ca:	231a      	movs	r3, #26
 800b9cc:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 800b9ce:	f7ff ffe1 	bl	800b994 <Get_SerialNum>
}
 800b9d2:	4801      	ldr	r0, [pc, #4]	; (800b9d8 <USBD_FS_SerialStrDescriptor+0x10>)
 800b9d4:	bd08      	pop	{r3, pc}
 800b9d6:	bf00      	nop
 800b9d8:	20000164 	.word	0x20000164

0800b9dc <USBD_FS_ProductStrDescriptor>:
{
 800b9dc:	b508      	push	{r3, lr}
 800b9de:	460a      	mov	r2, r1
  if(speed == 0)
 800b9e0:	b928      	cbnz	r0, 800b9ee <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b9e2:	4905      	ldr	r1, [pc, #20]	; (800b9f8 <USBD_FS_ProductStrDescriptor+0x1c>)
 800b9e4:	4805      	ldr	r0, [pc, #20]	; (800b9fc <USBD_FS_ProductStrDescriptor+0x20>)
 800b9e6:	f7fc fcda 	bl	800839e <USBD_GetString>
}
 800b9ea:	4803      	ldr	r0, [pc, #12]	; (800b9f8 <USBD_FS_ProductStrDescriptor+0x1c>)
 800b9ec:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b9ee:	4902      	ldr	r1, [pc, #8]	; (800b9f8 <USBD_FS_ProductStrDescriptor+0x1c>)
 800b9f0:	4802      	ldr	r0, [pc, #8]	; (800b9fc <USBD_FS_ProductStrDescriptor+0x20>)
 800b9f2:	f7fc fcd4 	bl	800839e <USBD_GetString>
 800b9f6:	e7f8      	b.n	800b9ea <USBD_FS_ProductStrDescriptor+0xe>
 800b9f8:	20003848 	.word	0x20003848
 800b9fc:	0800e9f0 	.word	0x0800e9f0

0800ba00 <USBD_FS_ManufacturerStrDescriptor>:
{
 800ba00:	b510      	push	{r4, lr}
 800ba02:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ba04:	4c03      	ldr	r4, [pc, #12]	; (800ba14 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800ba06:	4621      	mov	r1, r4
 800ba08:	4803      	ldr	r0, [pc, #12]	; (800ba18 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800ba0a:	f7fc fcc8 	bl	800839e <USBD_GetString>
}
 800ba0e:	4620      	mov	r0, r4
 800ba10:	bd10      	pop	{r4, pc}
 800ba12:	bf00      	nop
 800ba14:	20003848 	.word	0x20003848
 800ba18:	0800ea08 	.word	0x0800ea08

0800ba1c <USBD_FS_ConfigStrDescriptor>:
{
 800ba1c:	b508      	push	{r3, lr}
 800ba1e:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 800ba20:	b928      	cbnz	r0, 800ba2e <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ba22:	4905      	ldr	r1, [pc, #20]	; (800ba38 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800ba24:	4805      	ldr	r0, [pc, #20]	; (800ba3c <USBD_FS_ConfigStrDescriptor+0x20>)
 800ba26:	f7fc fcba 	bl	800839e <USBD_GetString>
}
 800ba2a:	4803      	ldr	r0, [pc, #12]	; (800ba38 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800ba2c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ba2e:	4902      	ldr	r1, [pc, #8]	; (800ba38 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800ba30:	4802      	ldr	r0, [pc, #8]	; (800ba3c <USBD_FS_ConfigStrDescriptor+0x20>)
 800ba32:	f7fc fcb4 	bl	800839e <USBD_GetString>
 800ba36:	e7f8      	b.n	800ba2a <USBD_FS_ConfigStrDescriptor+0xe>
 800ba38:	20003848 	.word	0x20003848
 800ba3c:	0800ea1c 	.word	0x0800ea1c

0800ba40 <USBD_FS_InterfaceStrDescriptor>:
{
 800ba40:	b508      	push	{r3, lr}
 800ba42:	460a      	mov	r2, r1
  if(speed == 0)
 800ba44:	b928      	cbnz	r0, 800ba52 <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ba46:	4905      	ldr	r1, [pc, #20]	; (800ba5c <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800ba48:	4805      	ldr	r0, [pc, #20]	; (800ba60 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800ba4a:	f7fc fca8 	bl	800839e <USBD_GetString>
}
 800ba4e:	4803      	ldr	r0, [pc, #12]	; (800ba5c <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800ba50:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ba52:	4902      	ldr	r1, [pc, #8]	; (800ba5c <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800ba54:	4802      	ldr	r0, [pc, #8]	; (800ba60 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800ba56:	f7fc fca2 	bl	800839e <USBD_GetString>
 800ba5a:	e7f8      	b.n	800ba4e <USBD_FS_InterfaceStrDescriptor+0xe>
 800ba5c:	20003848 	.word	0x20003848
 800ba60:	0800ea28 	.word	0x0800ea28

0800ba64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800ba64:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ba9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800ba68:	480d      	ldr	r0, [pc, #52]	; (800baa0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800ba6a:	490e      	ldr	r1, [pc, #56]	; (800baa4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800ba6c:	4a0e      	ldr	r2, [pc, #56]	; (800baa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800ba6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ba70:	e002      	b.n	800ba78 <LoopCopyDataInit>

0800ba72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ba72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ba74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ba76:	3304      	adds	r3, #4

0800ba78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ba78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ba7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ba7c:	d3f9      	bcc.n	800ba72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ba7e:	4a0b      	ldr	r2, [pc, #44]	; (800baac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800ba80:	4c0b      	ldr	r4, [pc, #44]	; (800bab0 <LoopFillZerobss+0x26>)
  movs r3, #0
 800ba82:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ba84:	e001      	b.n	800ba8a <LoopFillZerobss>

0800ba86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ba86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ba88:	3204      	adds	r2, #4

0800ba8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ba8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ba8c:	d3fb      	bcc.n	800ba86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800ba8e:	f7ff fd91 	bl	800b5b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ba92:	f000 f811 	bl	800bab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ba96:	f7ff f963 	bl	800ad60 <main>
  bx  lr    
 800ba9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800ba9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800baa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800baa4:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 800baa8:	0800ee2c 	.word	0x0800ee2c
  ldr r2, =_sbss
 800baac:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 800bab0:	20003a58 	.word	0x20003a58

0800bab4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bab4:	e7fe      	b.n	800bab4 <DMA1_Stream0_IRQHandler>
	...

0800bab8 <__libc_init_array>:
 800bab8:	b570      	push	{r4, r5, r6, lr}
 800baba:	4d0d      	ldr	r5, [pc, #52]	; (800baf0 <__libc_init_array+0x38>)
 800babc:	4c0d      	ldr	r4, [pc, #52]	; (800baf4 <__libc_init_array+0x3c>)
 800babe:	1b64      	subs	r4, r4, r5
 800bac0:	10a4      	asrs	r4, r4, #2
 800bac2:	2600      	movs	r6, #0
 800bac4:	42a6      	cmp	r6, r4
 800bac6:	d109      	bne.n	800badc <__libc_init_array+0x24>
 800bac8:	4d0b      	ldr	r5, [pc, #44]	; (800baf8 <__libc_init_array+0x40>)
 800baca:	4c0c      	ldr	r4, [pc, #48]	; (800bafc <__libc_init_array+0x44>)
 800bacc:	f002 ff06 	bl	800e8dc <_init>
 800bad0:	1b64      	subs	r4, r4, r5
 800bad2:	10a4      	asrs	r4, r4, #2
 800bad4:	2600      	movs	r6, #0
 800bad6:	42a6      	cmp	r6, r4
 800bad8:	d105      	bne.n	800bae6 <__libc_init_array+0x2e>
 800bada:	bd70      	pop	{r4, r5, r6, pc}
 800badc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bae0:	4798      	blx	r3
 800bae2:	3601      	adds	r6, #1
 800bae4:	e7ee      	b.n	800bac4 <__libc_init_array+0xc>
 800bae6:	f855 3b04 	ldr.w	r3, [r5], #4
 800baea:	4798      	blx	r3
 800baec:	3601      	adds	r6, #1
 800baee:	e7f2      	b.n	800bad6 <__libc_init_array+0x1e>
 800baf0:	0800ee24 	.word	0x0800ee24
 800baf4:	0800ee24 	.word	0x0800ee24
 800baf8:	0800ee24 	.word	0x0800ee24
 800bafc:	0800ee28 	.word	0x0800ee28

0800bb00 <memset>:
 800bb00:	4402      	add	r2, r0
 800bb02:	4603      	mov	r3, r0
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d100      	bne.n	800bb0a <memset+0xa>
 800bb08:	4770      	bx	lr
 800bb0a:	f803 1b01 	strb.w	r1, [r3], #1
 800bb0e:	e7f9      	b.n	800bb04 <memset+0x4>

0800bb10 <__cvt>:
 800bb10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb14:	ec55 4b10 	vmov	r4, r5, d0
 800bb18:	2d00      	cmp	r5, #0
 800bb1a:	460e      	mov	r6, r1
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	462b      	mov	r3, r5
 800bb20:	bfbb      	ittet	lt
 800bb22:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bb26:	461d      	movlt	r5, r3
 800bb28:	2300      	movge	r3, #0
 800bb2a:	232d      	movlt	r3, #45	; 0x2d
 800bb2c:	700b      	strb	r3, [r1, #0]
 800bb2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb30:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bb34:	4691      	mov	r9, r2
 800bb36:	f023 0820 	bic.w	r8, r3, #32
 800bb3a:	bfbc      	itt	lt
 800bb3c:	4622      	movlt	r2, r4
 800bb3e:	4614      	movlt	r4, r2
 800bb40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bb44:	d005      	beq.n	800bb52 <__cvt+0x42>
 800bb46:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bb4a:	d100      	bne.n	800bb4e <__cvt+0x3e>
 800bb4c:	3601      	adds	r6, #1
 800bb4e:	2102      	movs	r1, #2
 800bb50:	e000      	b.n	800bb54 <__cvt+0x44>
 800bb52:	2103      	movs	r1, #3
 800bb54:	ab03      	add	r3, sp, #12
 800bb56:	9301      	str	r3, [sp, #4]
 800bb58:	ab02      	add	r3, sp, #8
 800bb5a:	9300      	str	r3, [sp, #0]
 800bb5c:	ec45 4b10 	vmov	d0, r4, r5
 800bb60:	4653      	mov	r3, sl
 800bb62:	4632      	mov	r2, r6
 800bb64:	f000 fcec 	bl	800c540 <_dtoa_r>
 800bb68:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bb6c:	4607      	mov	r7, r0
 800bb6e:	d102      	bne.n	800bb76 <__cvt+0x66>
 800bb70:	f019 0f01 	tst.w	r9, #1
 800bb74:	d022      	beq.n	800bbbc <__cvt+0xac>
 800bb76:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bb7a:	eb07 0906 	add.w	r9, r7, r6
 800bb7e:	d110      	bne.n	800bba2 <__cvt+0x92>
 800bb80:	783b      	ldrb	r3, [r7, #0]
 800bb82:	2b30      	cmp	r3, #48	; 0x30
 800bb84:	d10a      	bne.n	800bb9c <__cvt+0x8c>
 800bb86:	2200      	movs	r2, #0
 800bb88:	2300      	movs	r3, #0
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	4629      	mov	r1, r5
 800bb8e:	f7f4 ffa3 	bl	8000ad8 <__aeabi_dcmpeq>
 800bb92:	b918      	cbnz	r0, 800bb9c <__cvt+0x8c>
 800bb94:	f1c6 0601 	rsb	r6, r6, #1
 800bb98:	f8ca 6000 	str.w	r6, [sl]
 800bb9c:	f8da 3000 	ldr.w	r3, [sl]
 800bba0:	4499      	add	r9, r3
 800bba2:	2200      	movs	r2, #0
 800bba4:	2300      	movs	r3, #0
 800bba6:	4620      	mov	r0, r4
 800bba8:	4629      	mov	r1, r5
 800bbaa:	f7f4 ff95 	bl	8000ad8 <__aeabi_dcmpeq>
 800bbae:	b108      	cbz	r0, 800bbb4 <__cvt+0xa4>
 800bbb0:	f8cd 900c 	str.w	r9, [sp, #12]
 800bbb4:	2230      	movs	r2, #48	; 0x30
 800bbb6:	9b03      	ldr	r3, [sp, #12]
 800bbb8:	454b      	cmp	r3, r9
 800bbba:	d307      	bcc.n	800bbcc <__cvt+0xbc>
 800bbbc:	9b03      	ldr	r3, [sp, #12]
 800bbbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bbc0:	1bdb      	subs	r3, r3, r7
 800bbc2:	4638      	mov	r0, r7
 800bbc4:	6013      	str	r3, [r2, #0]
 800bbc6:	b004      	add	sp, #16
 800bbc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbcc:	1c59      	adds	r1, r3, #1
 800bbce:	9103      	str	r1, [sp, #12]
 800bbd0:	701a      	strb	r2, [r3, #0]
 800bbd2:	e7f0      	b.n	800bbb6 <__cvt+0xa6>

0800bbd4 <__exponent>:
 800bbd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	2900      	cmp	r1, #0
 800bbda:	bfb8      	it	lt
 800bbdc:	4249      	neglt	r1, r1
 800bbde:	f803 2b02 	strb.w	r2, [r3], #2
 800bbe2:	bfb4      	ite	lt
 800bbe4:	222d      	movlt	r2, #45	; 0x2d
 800bbe6:	222b      	movge	r2, #43	; 0x2b
 800bbe8:	2909      	cmp	r1, #9
 800bbea:	7042      	strb	r2, [r0, #1]
 800bbec:	dd2a      	ble.n	800bc44 <__exponent+0x70>
 800bbee:	f10d 0407 	add.w	r4, sp, #7
 800bbf2:	46a4      	mov	ip, r4
 800bbf4:	270a      	movs	r7, #10
 800bbf6:	46a6      	mov	lr, r4
 800bbf8:	460a      	mov	r2, r1
 800bbfa:	fb91 f6f7 	sdiv	r6, r1, r7
 800bbfe:	fb07 1516 	mls	r5, r7, r6, r1
 800bc02:	3530      	adds	r5, #48	; 0x30
 800bc04:	2a63      	cmp	r2, #99	; 0x63
 800bc06:	f104 34ff 	add.w	r4, r4, #4294967295
 800bc0a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bc0e:	4631      	mov	r1, r6
 800bc10:	dcf1      	bgt.n	800bbf6 <__exponent+0x22>
 800bc12:	3130      	adds	r1, #48	; 0x30
 800bc14:	f1ae 0502 	sub.w	r5, lr, #2
 800bc18:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bc1c:	1c44      	adds	r4, r0, #1
 800bc1e:	4629      	mov	r1, r5
 800bc20:	4561      	cmp	r1, ip
 800bc22:	d30a      	bcc.n	800bc3a <__exponent+0x66>
 800bc24:	f10d 0209 	add.w	r2, sp, #9
 800bc28:	eba2 020e 	sub.w	r2, r2, lr
 800bc2c:	4565      	cmp	r5, ip
 800bc2e:	bf88      	it	hi
 800bc30:	2200      	movhi	r2, #0
 800bc32:	4413      	add	r3, r2
 800bc34:	1a18      	subs	r0, r3, r0
 800bc36:	b003      	add	sp, #12
 800bc38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc3e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bc42:	e7ed      	b.n	800bc20 <__exponent+0x4c>
 800bc44:	2330      	movs	r3, #48	; 0x30
 800bc46:	3130      	adds	r1, #48	; 0x30
 800bc48:	7083      	strb	r3, [r0, #2]
 800bc4a:	70c1      	strb	r1, [r0, #3]
 800bc4c:	1d03      	adds	r3, r0, #4
 800bc4e:	e7f1      	b.n	800bc34 <__exponent+0x60>

0800bc50 <_printf_float>:
 800bc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc54:	ed2d 8b02 	vpush	{d8}
 800bc58:	b08d      	sub	sp, #52	; 0x34
 800bc5a:	460c      	mov	r4, r1
 800bc5c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bc60:	4616      	mov	r6, r2
 800bc62:	461f      	mov	r7, r3
 800bc64:	4605      	mov	r5, r0
 800bc66:	f001 fa57 	bl	800d118 <_localeconv_r>
 800bc6a:	f8d0 a000 	ldr.w	sl, [r0]
 800bc6e:	4650      	mov	r0, sl
 800bc70:	f7f4 fab6 	bl	80001e0 <strlen>
 800bc74:	2300      	movs	r3, #0
 800bc76:	930a      	str	r3, [sp, #40]	; 0x28
 800bc78:	6823      	ldr	r3, [r4, #0]
 800bc7a:	9305      	str	r3, [sp, #20]
 800bc7c:	f8d8 3000 	ldr.w	r3, [r8]
 800bc80:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bc84:	3307      	adds	r3, #7
 800bc86:	f023 0307 	bic.w	r3, r3, #7
 800bc8a:	f103 0208 	add.w	r2, r3, #8
 800bc8e:	f8c8 2000 	str.w	r2, [r8]
 800bc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc96:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bc9a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bc9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bca2:	9307      	str	r3, [sp, #28]
 800bca4:	f8cd 8018 	str.w	r8, [sp, #24]
 800bca8:	ee08 0a10 	vmov	s16, r0
 800bcac:	4b9f      	ldr	r3, [pc, #636]	; (800bf2c <_printf_float+0x2dc>)
 800bcae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bcb2:	f04f 32ff 	mov.w	r2, #4294967295
 800bcb6:	f7f4 ff41 	bl	8000b3c <__aeabi_dcmpun>
 800bcba:	bb88      	cbnz	r0, 800bd20 <_printf_float+0xd0>
 800bcbc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bcc0:	4b9a      	ldr	r3, [pc, #616]	; (800bf2c <_printf_float+0x2dc>)
 800bcc2:	f04f 32ff 	mov.w	r2, #4294967295
 800bcc6:	f7f4 ff1b 	bl	8000b00 <__aeabi_dcmple>
 800bcca:	bb48      	cbnz	r0, 800bd20 <_printf_float+0xd0>
 800bccc:	2200      	movs	r2, #0
 800bcce:	2300      	movs	r3, #0
 800bcd0:	4640      	mov	r0, r8
 800bcd2:	4649      	mov	r1, r9
 800bcd4:	f7f4 ff0a 	bl	8000aec <__aeabi_dcmplt>
 800bcd8:	b110      	cbz	r0, 800bce0 <_printf_float+0x90>
 800bcda:	232d      	movs	r3, #45	; 0x2d
 800bcdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bce0:	4b93      	ldr	r3, [pc, #588]	; (800bf30 <_printf_float+0x2e0>)
 800bce2:	4894      	ldr	r0, [pc, #592]	; (800bf34 <_printf_float+0x2e4>)
 800bce4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bce8:	bf94      	ite	ls
 800bcea:	4698      	movls	r8, r3
 800bcec:	4680      	movhi	r8, r0
 800bcee:	2303      	movs	r3, #3
 800bcf0:	6123      	str	r3, [r4, #16]
 800bcf2:	9b05      	ldr	r3, [sp, #20]
 800bcf4:	f023 0204 	bic.w	r2, r3, #4
 800bcf8:	6022      	str	r2, [r4, #0]
 800bcfa:	f04f 0900 	mov.w	r9, #0
 800bcfe:	9700      	str	r7, [sp, #0]
 800bd00:	4633      	mov	r3, r6
 800bd02:	aa0b      	add	r2, sp, #44	; 0x2c
 800bd04:	4621      	mov	r1, r4
 800bd06:	4628      	mov	r0, r5
 800bd08:	f000 f9d8 	bl	800c0bc <_printf_common>
 800bd0c:	3001      	adds	r0, #1
 800bd0e:	f040 8090 	bne.w	800be32 <_printf_float+0x1e2>
 800bd12:	f04f 30ff 	mov.w	r0, #4294967295
 800bd16:	b00d      	add	sp, #52	; 0x34
 800bd18:	ecbd 8b02 	vpop	{d8}
 800bd1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd20:	4642      	mov	r2, r8
 800bd22:	464b      	mov	r3, r9
 800bd24:	4640      	mov	r0, r8
 800bd26:	4649      	mov	r1, r9
 800bd28:	f7f4 ff08 	bl	8000b3c <__aeabi_dcmpun>
 800bd2c:	b140      	cbz	r0, 800bd40 <_printf_float+0xf0>
 800bd2e:	464b      	mov	r3, r9
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	bfbc      	itt	lt
 800bd34:	232d      	movlt	r3, #45	; 0x2d
 800bd36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bd3a:	487f      	ldr	r0, [pc, #508]	; (800bf38 <_printf_float+0x2e8>)
 800bd3c:	4b7f      	ldr	r3, [pc, #508]	; (800bf3c <_printf_float+0x2ec>)
 800bd3e:	e7d1      	b.n	800bce4 <_printf_float+0x94>
 800bd40:	6863      	ldr	r3, [r4, #4]
 800bd42:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bd46:	9206      	str	r2, [sp, #24]
 800bd48:	1c5a      	adds	r2, r3, #1
 800bd4a:	d13f      	bne.n	800bdcc <_printf_float+0x17c>
 800bd4c:	2306      	movs	r3, #6
 800bd4e:	6063      	str	r3, [r4, #4]
 800bd50:	9b05      	ldr	r3, [sp, #20]
 800bd52:	6861      	ldr	r1, [r4, #4]
 800bd54:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bd58:	2300      	movs	r3, #0
 800bd5a:	9303      	str	r3, [sp, #12]
 800bd5c:	ab0a      	add	r3, sp, #40	; 0x28
 800bd5e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bd62:	ab09      	add	r3, sp, #36	; 0x24
 800bd64:	ec49 8b10 	vmov	d0, r8, r9
 800bd68:	9300      	str	r3, [sp, #0]
 800bd6a:	6022      	str	r2, [r4, #0]
 800bd6c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bd70:	4628      	mov	r0, r5
 800bd72:	f7ff fecd 	bl	800bb10 <__cvt>
 800bd76:	9b06      	ldr	r3, [sp, #24]
 800bd78:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd7a:	2b47      	cmp	r3, #71	; 0x47
 800bd7c:	4680      	mov	r8, r0
 800bd7e:	d108      	bne.n	800bd92 <_printf_float+0x142>
 800bd80:	1cc8      	adds	r0, r1, #3
 800bd82:	db02      	blt.n	800bd8a <_printf_float+0x13a>
 800bd84:	6863      	ldr	r3, [r4, #4]
 800bd86:	4299      	cmp	r1, r3
 800bd88:	dd41      	ble.n	800be0e <_printf_float+0x1be>
 800bd8a:	f1ab 0b02 	sub.w	fp, fp, #2
 800bd8e:	fa5f fb8b 	uxtb.w	fp, fp
 800bd92:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bd96:	d820      	bhi.n	800bdda <_printf_float+0x18a>
 800bd98:	3901      	subs	r1, #1
 800bd9a:	465a      	mov	r2, fp
 800bd9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bda0:	9109      	str	r1, [sp, #36]	; 0x24
 800bda2:	f7ff ff17 	bl	800bbd4 <__exponent>
 800bda6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bda8:	1813      	adds	r3, r2, r0
 800bdaa:	2a01      	cmp	r2, #1
 800bdac:	4681      	mov	r9, r0
 800bdae:	6123      	str	r3, [r4, #16]
 800bdb0:	dc02      	bgt.n	800bdb8 <_printf_float+0x168>
 800bdb2:	6822      	ldr	r2, [r4, #0]
 800bdb4:	07d2      	lsls	r2, r2, #31
 800bdb6:	d501      	bpl.n	800bdbc <_printf_float+0x16c>
 800bdb8:	3301      	adds	r3, #1
 800bdba:	6123      	str	r3, [r4, #16]
 800bdbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d09c      	beq.n	800bcfe <_printf_float+0xae>
 800bdc4:	232d      	movs	r3, #45	; 0x2d
 800bdc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdca:	e798      	b.n	800bcfe <_printf_float+0xae>
 800bdcc:	9a06      	ldr	r2, [sp, #24]
 800bdce:	2a47      	cmp	r2, #71	; 0x47
 800bdd0:	d1be      	bne.n	800bd50 <_printf_float+0x100>
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d1bc      	bne.n	800bd50 <_printf_float+0x100>
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	e7b9      	b.n	800bd4e <_printf_float+0xfe>
 800bdda:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bdde:	d118      	bne.n	800be12 <_printf_float+0x1c2>
 800bde0:	2900      	cmp	r1, #0
 800bde2:	6863      	ldr	r3, [r4, #4]
 800bde4:	dd0b      	ble.n	800bdfe <_printf_float+0x1ae>
 800bde6:	6121      	str	r1, [r4, #16]
 800bde8:	b913      	cbnz	r3, 800bdf0 <_printf_float+0x1a0>
 800bdea:	6822      	ldr	r2, [r4, #0]
 800bdec:	07d0      	lsls	r0, r2, #31
 800bdee:	d502      	bpl.n	800bdf6 <_printf_float+0x1a6>
 800bdf0:	3301      	adds	r3, #1
 800bdf2:	440b      	add	r3, r1
 800bdf4:	6123      	str	r3, [r4, #16]
 800bdf6:	65a1      	str	r1, [r4, #88]	; 0x58
 800bdf8:	f04f 0900 	mov.w	r9, #0
 800bdfc:	e7de      	b.n	800bdbc <_printf_float+0x16c>
 800bdfe:	b913      	cbnz	r3, 800be06 <_printf_float+0x1b6>
 800be00:	6822      	ldr	r2, [r4, #0]
 800be02:	07d2      	lsls	r2, r2, #31
 800be04:	d501      	bpl.n	800be0a <_printf_float+0x1ba>
 800be06:	3302      	adds	r3, #2
 800be08:	e7f4      	b.n	800bdf4 <_printf_float+0x1a4>
 800be0a:	2301      	movs	r3, #1
 800be0c:	e7f2      	b.n	800bdf4 <_printf_float+0x1a4>
 800be0e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800be12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be14:	4299      	cmp	r1, r3
 800be16:	db05      	blt.n	800be24 <_printf_float+0x1d4>
 800be18:	6823      	ldr	r3, [r4, #0]
 800be1a:	6121      	str	r1, [r4, #16]
 800be1c:	07d8      	lsls	r0, r3, #31
 800be1e:	d5ea      	bpl.n	800bdf6 <_printf_float+0x1a6>
 800be20:	1c4b      	adds	r3, r1, #1
 800be22:	e7e7      	b.n	800bdf4 <_printf_float+0x1a4>
 800be24:	2900      	cmp	r1, #0
 800be26:	bfd4      	ite	le
 800be28:	f1c1 0202 	rsble	r2, r1, #2
 800be2c:	2201      	movgt	r2, #1
 800be2e:	4413      	add	r3, r2
 800be30:	e7e0      	b.n	800bdf4 <_printf_float+0x1a4>
 800be32:	6823      	ldr	r3, [r4, #0]
 800be34:	055a      	lsls	r2, r3, #21
 800be36:	d407      	bmi.n	800be48 <_printf_float+0x1f8>
 800be38:	6923      	ldr	r3, [r4, #16]
 800be3a:	4642      	mov	r2, r8
 800be3c:	4631      	mov	r1, r6
 800be3e:	4628      	mov	r0, r5
 800be40:	47b8      	blx	r7
 800be42:	3001      	adds	r0, #1
 800be44:	d12c      	bne.n	800bea0 <_printf_float+0x250>
 800be46:	e764      	b.n	800bd12 <_printf_float+0xc2>
 800be48:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800be4c:	f240 80e0 	bls.w	800c010 <_printf_float+0x3c0>
 800be50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800be54:	2200      	movs	r2, #0
 800be56:	2300      	movs	r3, #0
 800be58:	f7f4 fe3e 	bl	8000ad8 <__aeabi_dcmpeq>
 800be5c:	2800      	cmp	r0, #0
 800be5e:	d034      	beq.n	800beca <_printf_float+0x27a>
 800be60:	4a37      	ldr	r2, [pc, #220]	; (800bf40 <_printf_float+0x2f0>)
 800be62:	2301      	movs	r3, #1
 800be64:	4631      	mov	r1, r6
 800be66:	4628      	mov	r0, r5
 800be68:	47b8      	blx	r7
 800be6a:	3001      	adds	r0, #1
 800be6c:	f43f af51 	beq.w	800bd12 <_printf_float+0xc2>
 800be70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be74:	429a      	cmp	r2, r3
 800be76:	db02      	blt.n	800be7e <_printf_float+0x22e>
 800be78:	6823      	ldr	r3, [r4, #0]
 800be7a:	07d8      	lsls	r0, r3, #31
 800be7c:	d510      	bpl.n	800bea0 <_printf_float+0x250>
 800be7e:	ee18 3a10 	vmov	r3, s16
 800be82:	4652      	mov	r2, sl
 800be84:	4631      	mov	r1, r6
 800be86:	4628      	mov	r0, r5
 800be88:	47b8      	blx	r7
 800be8a:	3001      	adds	r0, #1
 800be8c:	f43f af41 	beq.w	800bd12 <_printf_float+0xc2>
 800be90:	f04f 0800 	mov.w	r8, #0
 800be94:	f104 091a 	add.w	r9, r4, #26
 800be98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be9a:	3b01      	subs	r3, #1
 800be9c:	4543      	cmp	r3, r8
 800be9e:	dc09      	bgt.n	800beb4 <_printf_float+0x264>
 800bea0:	6823      	ldr	r3, [r4, #0]
 800bea2:	079b      	lsls	r3, r3, #30
 800bea4:	f100 8105 	bmi.w	800c0b2 <_printf_float+0x462>
 800bea8:	68e0      	ldr	r0, [r4, #12]
 800beaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800beac:	4298      	cmp	r0, r3
 800beae:	bfb8      	it	lt
 800beb0:	4618      	movlt	r0, r3
 800beb2:	e730      	b.n	800bd16 <_printf_float+0xc6>
 800beb4:	2301      	movs	r3, #1
 800beb6:	464a      	mov	r2, r9
 800beb8:	4631      	mov	r1, r6
 800beba:	4628      	mov	r0, r5
 800bebc:	47b8      	blx	r7
 800bebe:	3001      	adds	r0, #1
 800bec0:	f43f af27 	beq.w	800bd12 <_printf_float+0xc2>
 800bec4:	f108 0801 	add.w	r8, r8, #1
 800bec8:	e7e6      	b.n	800be98 <_printf_float+0x248>
 800beca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800becc:	2b00      	cmp	r3, #0
 800bece:	dc39      	bgt.n	800bf44 <_printf_float+0x2f4>
 800bed0:	4a1b      	ldr	r2, [pc, #108]	; (800bf40 <_printf_float+0x2f0>)
 800bed2:	2301      	movs	r3, #1
 800bed4:	4631      	mov	r1, r6
 800bed6:	4628      	mov	r0, r5
 800bed8:	47b8      	blx	r7
 800beda:	3001      	adds	r0, #1
 800bedc:	f43f af19 	beq.w	800bd12 <_printf_float+0xc2>
 800bee0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bee4:	4313      	orrs	r3, r2
 800bee6:	d102      	bne.n	800beee <_printf_float+0x29e>
 800bee8:	6823      	ldr	r3, [r4, #0]
 800beea:	07d9      	lsls	r1, r3, #31
 800beec:	d5d8      	bpl.n	800bea0 <_printf_float+0x250>
 800beee:	ee18 3a10 	vmov	r3, s16
 800bef2:	4652      	mov	r2, sl
 800bef4:	4631      	mov	r1, r6
 800bef6:	4628      	mov	r0, r5
 800bef8:	47b8      	blx	r7
 800befa:	3001      	adds	r0, #1
 800befc:	f43f af09 	beq.w	800bd12 <_printf_float+0xc2>
 800bf00:	f04f 0900 	mov.w	r9, #0
 800bf04:	f104 0a1a 	add.w	sl, r4, #26
 800bf08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf0a:	425b      	negs	r3, r3
 800bf0c:	454b      	cmp	r3, r9
 800bf0e:	dc01      	bgt.n	800bf14 <_printf_float+0x2c4>
 800bf10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf12:	e792      	b.n	800be3a <_printf_float+0x1ea>
 800bf14:	2301      	movs	r3, #1
 800bf16:	4652      	mov	r2, sl
 800bf18:	4631      	mov	r1, r6
 800bf1a:	4628      	mov	r0, r5
 800bf1c:	47b8      	blx	r7
 800bf1e:	3001      	adds	r0, #1
 800bf20:	f43f aef7 	beq.w	800bd12 <_printf_float+0xc2>
 800bf24:	f109 0901 	add.w	r9, r9, #1
 800bf28:	e7ee      	b.n	800bf08 <_printf_float+0x2b8>
 800bf2a:	bf00      	nop
 800bf2c:	7fefffff 	.word	0x7fefffff
 800bf30:	0800ea3c 	.word	0x0800ea3c
 800bf34:	0800ea40 	.word	0x0800ea40
 800bf38:	0800ea48 	.word	0x0800ea48
 800bf3c:	0800ea44 	.word	0x0800ea44
 800bf40:	0800ea4c 	.word	0x0800ea4c
 800bf44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	bfa8      	it	ge
 800bf4c:	461a      	movge	r2, r3
 800bf4e:	2a00      	cmp	r2, #0
 800bf50:	4691      	mov	r9, r2
 800bf52:	dc37      	bgt.n	800bfc4 <_printf_float+0x374>
 800bf54:	f04f 0b00 	mov.w	fp, #0
 800bf58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf5c:	f104 021a 	add.w	r2, r4, #26
 800bf60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bf62:	9305      	str	r3, [sp, #20]
 800bf64:	eba3 0309 	sub.w	r3, r3, r9
 800bf68:	455b      	cmp	r3, fp
 800bf6a:	dc33      	bgt.n	800bfd4 <_printf_float+0x384>
 800bf6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf70:	429a      	cmp	r2, r3
 800bf72:	db3b      	blt.n	800bfec <_printf_float+0x39c>
 800bf74:	6823      	ldr	r3, [r4, #0]
 800bf76:	07da      	lsls	r2, r3, #31
 800bf78:	d438      	bmi.n	800bfec <_printf_float+0x39c>
 800bf7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf7c:	9b05      	ldr	r3, [sp, #20]
 800bf7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf80:	1ad3      	subs	r3, r2, r3
 800bf82:	eba2 0901 	sub.w	r9, r2, r1
 800bf86:	4599      	cmp	r9, r3
 800bf88:	bfa8      	it	ge
 800bf8a:	4699      	movge	r9, r3
 800bf8c:	f1b9 0f00 	cmp.w	r9, #0
 800bf90:	dc35      	bgt.n	800bffe <_printf_float+0x3ae>
 800bf92:	f04f 0800 	mov.w	r8, #0
 800bf96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf9a:	f104 0a1a 	add.w	sl, r4, #26
 800bf9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bfa2:	1a9b      	subs	r3, r3, r2
 800bfa4:	eba3 0309 	sub.w	r3, r3, r9
 800bfa8:	4543      	cmp	r3, r8
 800bfaa:	f77f af79 	ble.w	800bea0 <_printf_float+0x250>
 800bfae:	2301      	movs	r3, #1
 800bfb0:	4652      	mov	r2, sl
 800bfb2:	4631      	mov	r1, r6
 800bfb4:	4628      	mov	r0, r5
 800bfb6:	47b8      	blx	r7
 800bfb8:	3001      	adds	r0, #1
 800bfba:	f43f aeaa 	beq.w	800bd12 <_printf_float+0xc2>
 800bfbe:	f108 0801 	add.w	r8, r8, #1
 800bfc2:	e7ec      	b.n	800bf9e <_printf_float+0x34e>
 800bfc4:	4613      	mov	r3, r2
 800bfc6:	4631      	mov	r1, r6
 800bfc8:	4642      	mov	r2, r8
 800bfca:	4628      	mov	r0, r5
 800bfcc:	47b8      	blx	r7
 800bfce:	3001      	adds	r0, #1
 800bfd0:	d1c0      	bne.n	800bf54 <_printf_float+0x304>
 800bfd2:	e69e      	b.n	800bd12 <_printf_float+0xc2>
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	4631      	mov	r1, r6
 800bfd8:	4628      	mov	r0, r5
 800bfda:	9205      	str	r2, [sp, #20]
 800bfdc:	47b8      	blx	r7
 800bfde:	3001      	adds	r0, #1
 800bfe0:	f43f ae97 	beq.w	800bd12 <_printf_float+0xc2>
 800bfe4:	9a05      	ldr	r2, [sp, #20]
 800bfe6:	f10b 0b01 	add.w	fp, fp, #1
 800bfea:	e7b9      	b.n	800bf60 <_printf_float+0x310>
 800bfec:	ee18 3a10 	vmov	r3, s16
 800bff0:	4652      	mov	r2, sl
 800bff2:	4631      	mov	r1, r6
 800bff4:	4628      	mov	r0, r5
 800bff6:	47b8      	blx	r7
 800bff8:	3001      	adds	r0, #1
 800bffa:	d1be      	bne.n	800bf7a <_printf_float+0x32a>
 800bffc:	e689      	b.n	800bd12 <_printf_float+0xc2>
 800bffe:	9a05      	ldr	r2, [sp, #20]
 800c000:	464b      	mov	r3, r9
 800c002:	4442      	add	r2, r8
 800c004:	4631      	mov	r1, r6
 800c006:	4628      	mov	r0, r5
 800c008:	47b8      	blx	r7
 800c00a:	3001      	adds	r0, #1
 800c00c:	d1c1      	bne.n	800bf92 <_printf_float+0x342>
 800c00e:	e680      	b.n	800bd12 <_printf_float+0xc2>
 800c010:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c012:	2a01      	cmp	r2, #1
 800c014:	dc01      	bgt.n	800c01a <_printf_float+0x3ca>
 800c016:	07db      	lsls	r3, r3, #31
 800c018:	d538      	bpl.n	800c08c <_printf_float+0x43c>
 800c01a:	2301      	movs	r3, #1
 800c01c:	4642      	mov	r2, r8
 800c01e:	4631      	mov	r1, r6
 800c020:	4628      	mov	r0, r5
 800c022:	47b8      	blx	r7
 800c024:	3001      	adds	r0, #1
 800c026:	f43f ae74 	beq.w	800bd12 <_printf_float+0xc2>
 800c02a:	ee18 3a10 	vmov	r3, s16
 800c02e:	4652      	mov	r2, sl
 800c030:	4631      	mov	r1, r6
 800c032:	4628      	mov	r0, r5
 800c034:	47b8      	blx	r7
 800c036:	3001      	adds	r0, #1
 800c038:	f43f ae6b 	beq.w	800bd12 <_printf_float+0xc2>
 800c03c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c040:	2200      	movs	r2, #0
 800c042:	2300      	movs	r3, #0
 800c044:	f7f4 fd48 	bl	8000ad8 <__aeabi_dcmpeq>
 800c048:	b9d8      	cbnz	r0, 800c082 <_printf_float+0x432>
 800c04a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c04c:	f108 0201 	add.w	r2, r8, #1
 800c050:	3b01      	subs	r3, #1
 800c052:	4631      	mov	r1, r6
 800c054:	4628      	mov	r0, r5
 800c056:	47b8      	blx	r7
 800c058:	3001      	adds	r0, #1
 800c05a:	d10e      	bne.n	800c07a <_printf_float+0x42a>
 800c05c:	e659      	b.n	800bd12 <_printf_float+0xc2>
 800c05e:	2301      	movs	r3, #1
 800c060:	4652      	mov	r2, sl
 800c062:	4631      	mov	r1, r6
 800c064:	4628      	mov	r0, r5
 800c066:	47b8      	blx	r7
 800c068:	3001      	adds	r0, #1
 800c06a:	f43f ae52 	beq.w	800bd12 <_printf_float+0xc2>
 800c06e:	f108 0801 	add.w	r8, r8, #1
 800c072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c074:	3b01      	subs	r3, #1
 800c076:	4543      	cmp	r3, r8
 800c078:	dcf1      	bgt.n	800c05e <_printf_float+0x40e>
 800c07a:	464b      	mov	r3, r9
 800c07c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c080:	e6dc      	b.n	800be3c <_printf_float+0x1ec>
 800c082:	f04f 0800 	mov.w	r8, #0
 800c086:	f104 0a1a 	add.w	sl, r4, #26
 800c08a:	e7f2      	b.n	800c072 <_printf_float+0x422>
 800c08c:	2301      	movs	r3, #1
 800c08e:	4642      	mov	r2, r8
 800c090:	e7df      	b.n	800c052 <_printf_float+0x402>
 800c092:	2301      	movs	r3, #1
 800c094:	464a      	mov	r2, r9
 800c096:	4631      	mov	r1, r6
 800c098:	4628      	mov	r0, r5
 800c09a:	47b8      	blx	r7
 800c09c:	3001      	adds	r0, #1
 800c09e:	f43f ae38 	beq.w	800bd12 <_printf_float+0xc2>
 800c0a2:	f108 0801 	add.w	r8, r8, #1
 800c0a6:	68e3      	ldr	r3, [r4, #12]
 800c0a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c0aa:	1a5b      	subs	r3, r3, r1
 800c0ac:	4543      	cmp	r3, r8
 800c0ae:	dcf0      	bgt.n	800c092 <_printf_float+0x442>
 800c0b0:	e6fa      	b.n	800bea8 <_printf_float+0x258>
 800c0b2:	f04f 0800 	mov.w	r8, #0
 800c0b6:	f104 0919 	add.w	r9, r4, #25
 800c0ba:	e7f4      	b.n	800c0a6 <_printf_float+0x456>

0800c0bc <_printf_common>:
 800c0bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0c0:	4616      	mov	r6, r2
 800c0c2:	4699      	mov	r9, r3
 800c0c4:	688a      	ldr	r2, [r1, #8]
 800c0c6:	690b      	ldr	r3, [r1, #16]
 800c0c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	bfb8      	it	lt
 800c0d0:	4613      	movlt	r3, r2
 800c0d2:	6033      	str	r3, [r6, #0]
 800c0d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c0d8:	4607      	mov	r7, r0
 800c0da:	460c      	mov	r4, r1
 800c0dc:	b10a      	cbz	r2, 800c0e2 <_printf_common+0x26>
 800c0de:	3301      	adds	r3, #1
 800c0e0:	6033      	str	r3, [r6, #0]
 800c0e2:	6823      	ldr	r3, [r4, #0]
 800c0e4:	0699      	lsls	r1, r3, #26
 800c0e6:	bf42      	ittt	mi
 800c0e8:	6833      	ldrmi	r3, [r6, #0]
 800c0ea:	3302      	addmi	r3, #2
 800c0ec:	6033      	strmi	r3, [r6, #0]
 800c0ee:	6825      	ldr	r5, [r4, #0]
 800c0f0:	f015 0506 	ands.w	r5, r5, #6
 800c0f4:	d106      	bne.n	800c104 <_printf_common+0x48>
 800c0f6:	f104 0a19 	add.w	sl, r4, #25
 800c0fa:	68e3      	ldr	r3, [r4, #12]
 800c0fc:	6832      	ldr	r2, [r6, #0]
 800c0fe:	1a9b      	subs	r3, r3, r2
 800c100:	42ab      	cmp	r3, r5
 800c102:	dc26      	bgt.n	800c152 <_printf_common+0x96>
 800c104:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c108:	1e13      	subs	r3, r2, #0
 800c10a:	6822      	ldr	r2, [r4, #0]
 800c10c:	bf18      	it	ne
 800c10e:	2301      	movne	r3, #1
 800c110:	0692      	lsls	r2, r2, #26
 800c112:	d42b      	bmi.n	800c16c <_printf_common+0xb0>
 800c114:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c118:	4649      	mov	r1, r9
 800c11a:	4638      	mov	r0, r7
 800c11c:	47c0      	blx	r8
 800c11e:	3001      	adds	r0, #1
 800c120:	d01e      	beq.n	800c160 <_printf_common+0xa4>
 800c122:	6823      	ldr	r3, [r4, #0]
 800c124:	68e5      	ldr	r5, [r4, #12]
 800c126:	6832      	ldr	r2, [r6, #0]
 800c128:	f003 0306 	and.w	r3, r3, #6
 800c12c:	2b04      	cmp	r3, #4
 800c12e:	bf08      	it	eq
 800c130:	1aad      	subeq	r5, r5, r2
 800c132:	68a3      	ldr	r3, [r4, #8]
 800c134:	6922      	ldr	r2, [r4, #16]
 800c136:	bf0c      	ite	eq
 800c138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c13c:	2500      	movne	r5, #0
 800c13e:	4293      	cmp	r3, r2
 800c140:	bfc4      	itt	gt
 800c142:	1a9b      	subgt	r3, r3, r2
 800c144:	18ed      	addgt	r5, r5, r3
 800c146:	2600      	movs	r6, #0
 800c148:	341a      	adds	r4, #26
 800c14a:	42b5      	cmp	r5, r6
 800c14c:	d11a      	bne.n	800c184 <_printf_common+0xc8>
 800c14e:	2000      	movs	r0, #0
 800c150:	e008      	b.n	800c164 <_printf_common+0xa8>
 800c152:	2301      	movs	r3, #1
 800c154:	4652      	mov	r2, sl
 800c156:	4649      	mov	r1, r9
 800c158:	4638      	mov	r0, r7
 800c15a:	47c0      	blx	r8
 800c15c:	3001      	adds	r0, #1
 800c15e:	d103      	bne.n	800c168 <_printf_common+0xac>
 800c160:	f04f 30ff 	mov.w	r0, #4294967295
 800c164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c168:	3501      	adds	r5, #1
 800c16a:	e7c6      	b.n	800c0fa <_printf_common+0x3e>
 800c16c:	18e1      	adds	r1, r4, r3
 800c16e:	1c5a      	adds	r2, r3, #1
 800c170:	2030      	movs	r0, #48	; 0x30
 800c172:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c176:	4422      	add	r2, r4
 800c178:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c17c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c180:	3302      	adds	r3, #2
 800c182:	e7c7      	b.n	800c114 <_printf_common+0x58>
 800c184:	2301      	movs	r3, #1
 800c186:	4622      	mov	r2, r4
 800c188:	4649      	mov	r1, r9
 800c18a:	4638      	mov	r0, r7
 800c18c:	47c0      	blx	r8
 800c18e:	3001      	adds	r0, #1
 800c190:	d0e6      	beq.n	800c160 <_printf_common+0xa4>
 800c192:	3601      	adds	r6, #1
 800c194:	e7d9      	b.n	800c14a <_printf_common+0x8e>
	...

0800c198 <_printf_i>:
 800c198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c19c:	460c      	mov	r4, r1
 800c19e:	4691      	mov	r9, r2
 800c1a0:	7e27      	ldrb	r7, [r4, #24]
 800c1a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c1a4:	2f78      	cmp	r7, #120	; 0x78
 800c1a6:	4680      	mov	r8, r0
 800c1a8:	469a      	mov	sl, r3
 800c1aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c1ae:	d807      	bhi.n	800c1c0 <_printf_i+0x28>
 800c1b0:	2f62      	cmp	r7, #98	; 0x62
 800c1b2:	d80a      	bhi.n	800c1ca <_printf_i+0x32>
 800c1b4:	2f00      	cmp	r7, #0
 800c1b6:	f000 80d8 	beq.w	800c36a <_printf_i+0x1d2>
 800c1ba:	2f58      	cmp	r7, #88	; 0x58
 800c1bc:	f000 80a3 	beq.w	800c306 <_printf_i+0x16e>
 800c1c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c1c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c1c8:	e03a      	b.n	800c240 <_printf_i+0xa8>
 800c1ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c1ce:	2b15      	cmp	r3, #21
 800c1d0:	d8f6      	bhi.n	800c1c0 <_printf_i+0x28>
 800c1d2:	a001      	add	r0, pc, #4	; (adr r0, 800c1d8 <_printf_i+0x40>)
 800c1d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c1d8:	0800c231 	.word	0x0800c231
 800c1dc:	0800c245 	.word	0x0800c245
 800c1e0:	0800c1c1 	.word	0x0800c1c1
 800c1e4:	0800c1c1 	.word	0x0800c1c1
 800c1e8:	0800c1c1 	.word	0x0800c1c1
 800c1ec:	0800c1c1 	.word	0x0800c1c1
 800c1f0:	0800c245 	.word	0x0800c245
 800c1f4:	0800c1c1 	.word	0x0800c1c1
 800c1f8:	0800c1c1 	.word	0x0800c1c1
 800c1fc:	0800c1c1 	.word	0x0800c1c1
 800c200:	0800c1c1 	.word	0x0800c1c1
 800c204:	0800c351 	.word	0x0800c351
 800c208:	0800c275 	.word	0x0800c275
 800c20c:	0800c333 	.word	0x0800c333
 800c210:	0800c1c1 	.word	0x0800c1c1
 800c214:	0800c1c1 	.word	0x0800c1c1
 800c218:	0800c373 	.word	0x0800c373
 800c21c:	0800c1c1 	.word	0x0800c1c1
 800c220:	0800c275 	.word	0x0800c275
 800c224:	0800c1c1 	.word	0x0800c1c1
 800c228:	0800c1c1 	.word	0x0800c1c1
 800c22c:	0800c33b 	.word	0x0800c33b
 800c230:	680b      	ldr	r3, [r1, #0]
 800c232:	1d1a      	adds	r2, r3, #4
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	600a      	str	r2, [r1, #0]
 800c238:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c23c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c240:	2301      	movs	r3, #1
 800c242:	e0a3      	b.n	800c38c <_printf_i+0x1f4>
 800c244:	6825      	ldr	r5, [r4, #0]
 800c246:	6808      	ldr	r0, [r1, #0]
 800c248:	062e      	lsls	r6, r5, #24
 800c24a:	f100 0304 	add.w	r3, r0, #4
 800c24e:	d50a      	bpl.n	800c266 <_printf_i+0xce>
 800c250:	6805      	ldr	r5, [r0, #0]
 800c252:	600b      	str	r3, [r1, #0]
 800c254:	2d00      	cmp	r5, #0
 800c256:	da03      	bge.n	800c260 <_printf_i+0xc8>
 800c258:	232d      	movs	r3, #45	; 0x2d
 800c25a:	426d      	negs	r5, r5
 800c25c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c260:	485e      	ldr	r0, [pc, #376]	; (800c3dc <_printf_i+0x244>)
 800c262:	230a      	movs	r3, #10
 800c264:	e019      	b.n	800c29a <_printf_i+0x102>
 800c266:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c26a:	6805      	ldr	r5, [r0, #0]
 800c26c:	600b      	str	r3, [r1, #0]
 800c26e:	bf18      	it	ne
 800c270:	b22d      	sxthne	r5, r5
 800c272:	e7ef      	b.n	800c254 <_printf_i+0xbc>
 800c274:	680b      	ldr	r3, [r1, #0]
 800c276:	6825      	ldr	r5, [r4, #0]
 800c278:	1d18      	adds	r0, r3, #4
 800c27a:	6008      	str	r0, [r1, #0]
 800c27c:	0628      	lsls	r0, r5, #24
 800c27e:	d501      	bpl.n	800c284 <_printf_i+0xec>
 800c280:	681d      	ldr	r5, [r3, #0]
 800c282:	e002      	b.n	800c28a <_printf_i+0xf2>
 800c284:	0669      	lsls	r1, r5, #25
 800c286:	d5fb      	bpl.n	800c280 <_printf_i+0xe8>
 800c288:	881d      	ldrh	r5, [r3, #0]
 800c28a:	4854      	ldr	r0, [pc, #336]	; (800c3dc <_printf_i+0x244>)
 800c28c:	2f6f      	cmp	r7, #111	; 0x6f
 800c28e:	bf0c      	ite	eq
 800c290:	2308      	moveq	r3, #8
 800c292:	230a      	movne	r3, #10
 800c294:	2100      	movs	r1, #0
 800c296:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c29a:	6866      	ldr	r6, [r4, #4]
 800c29c:	60a6      	str	r6, [r4, #8]
 800c29e:	2e00      	cmp	r6, #0
 800c2a0:	bfa2      	ittt	ge
 800c2a2:	6821      	ldrge	r1, [r4, #0]
 800c2a4:	f021 0104 	bicge.w	r1, r1, #4
 800c2a8:	6021      	strge	r1, [r4, #0]
 800c2aa:	b90d      	cbnz	r5, 800c2b0 <_printf_i+0x118>
 800c2ac:	2e00      	cmp	r6, #0
 800c2ae:	d04d      	beq.n	800c34c <_printf_i+0x1b4>
 800c2b0:	4616      	mov	r6, r2
 800c2b2:	fbb5 f1f3 	udiv	r1, r5, r3
 800c2b6:	fb03 5711 	mls	r7, r3, r1, r5
 800c2ba:	5dc7      	ldrb	r7, [r0, r7]
 800c2bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c2c0:	462f      	mov	r7, r5
 800c2c2:	42bb      	cmp	r3, r7
 800c2c4:	460d      	mov	r5, r1
 800c2c6:	d9f4      	bls.n	800c2b2 <_printf_i+0x11a>
 800c2c8:	2b08      	cmp	r3, #8
 800c2ca:	d10b      	bne.n	800c2e4 <_printf_i+0x14c>
 800c2cc:	6823      	ldr	r3, [r4, #0]
 800c2ce:	07df      	lsls	r7, r3, #31
 800c2d0:	d508      	bpl.n	800c2e4 <_printf_i+0x14c>
 800c2d2:	6923      	ldr	r3, [r4, #16]
 800c2d4:	6861      	ldr	r1, [r4, #4]
 800c2d6:	4299      	cmp	r1, r3
 800c2d8:	bfde      	ittt	le
 800c2da:	2330      	movle	r3, #48	; 0x30
 800c2dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c2e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c2e4:	1b92      	subs	r2, r2, r6
 800c2e6:	6122      	str	r2, [r4, #16]
 800c2e8:	f8cd a000 	str.w	sl, [sp]
 800c2ec:	464b      	mov	r3, r9
 800c2ee:	aa03      	add	r2, sp, #12
 800c2f0:	4621      	mov	r1, r4
 800c2f2:	4640      	mov	r0, r8
 800c2f4:	f7ff fee2 	bl	800c0bc <_printf_common>
 800c2f8:	3001      	adds	r0, #1
 800c2fa:	d14c      	bne.n	800c396 <_printf_i+0x1fe>
 800c2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c300:	b004      	add	sp, #16
 800c302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c306:	4835      	ldr	r0, [pc, #212]	; (800c3dc <_printf_i+0x244>)
 800c308:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c30c:	6823      	ldr	r3, [r4, #0]
 800c30e:	680e      	ldr	r6, [r1, #0]
 800c310:	061f      	lsls	r7, r3, #24
 800c312:	f856 5b04 	ldr.w	r5, [r6], #4
 800c316:	600e      	str	r6, [r1, #0]
 800c318:	d514      	bpl.n	800c344 <_printf_i+0x1ac>
 800c31a:	07d9      	lsls	r1, r3, #31
 800c31c:	bf44      	itt	mi
 800c31e:	f043 0320 	orrmi.w	r3, r3, #32
 800c322:	6023      	strmi	r3, [r4, #0]
 800c324:	b91d      	cbnz	r5, 800c32e <_printf_i+0x196>
 800c326:	6823      	ldr	r3, [r4, #0]
 800c328:	f023 0320 	bic.w	r3, r3, #32
 800c32c:	6023      	str	r3, [r4, #0]
 800c32e:	2310      	movs	r3, #16
 800c330:	e7b0      	b.n	800c294 <_printf_i+0xfc>
 800c332:	6823      	ldr	r3, [r4, #0]
 800c334:	f043 0320 	orr.w	r3, r3, #32
 800c338:	6023      	str	r3, [r4, #0]
 800c33a:	2378      	movs	r3, #120	; 0x78
 800c33c:	4828      	ldr	r0, [pc, #160]	; (800c3e0 <_printf_i+0x248>)
 800c33e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c342:	e7e3      	b.n	800c30c <_printf_i+0x174>
 800c344:	065e      	lsls	r6, r3, #25
 800c346:	bf48      	it	mi
 800c348:	b2ad      	uxthmi	r5, r5
 800c34a:	e7e6      	b.n	800c31a <_printf_i+0x182>
 800c34c:	4616      	mov	r6, r2
 800c34e:	e7bb      	b.n	800c2c8 <_printf_i+0x130>
 800c350:	680b      	ldr	r3, [r1, #0]
 800c352:	6826      	ldr	r6, [r4, #0]
 800c354:	6960      	ldr	r0, [r4, #20]
 800c356:	1d1d      	adds	r5, r3, #4
 800c358:	600d      	str	r5, [r1, #0]
 800c35a:	0635      	lsls	r5, r6, #24
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	d501      	bpl.n	800c364 <_printf_i+0x1cc>
 800c360:	6018      	str	r0, [r3, #0]
 800c362:	e002      	b.n	800c36a <_printf_i+0x1d2>
 800c364:	0671      	lsls	r1, r6, #25
 800c366:	d5fb      	bpl.n	800c360 <_printf_i+0x1c8>
 800c368:	8018      	strh	r0, [r3, #0]
 800c36a:	2300      	movs	r3, #0
 800c36c:	6123      	str	r3, [r4, #16]
 800c36e:	4616      	mov	r6, r2
 800c370:	e7ba      	b.n	800c2e8 <_printf_i+0x150>
 800c372:	680b      	ldr	r3, [r1, #0]
 800c374:	1d1a      	adds	r2, r3, #4
 800c376:	600a      	str	r2, [r1, #0]
 800c378:	681e      	ldr	r6, [r3, #0]
 800c37a:	6862      	ldr	r2, [r4, #4]
 800c37c:	2100      	movs	r1, #0
 800c37e:	4630      	mov	r0, r6
 800c380:	f7f3 ff36 	bl	80001f0 <memchr>
 800c384:	b108      	cbz	r0, 800c38a <_printf_i+0x1f2>
 800c386:	1b80      	subs	r0, r0, r6
 800c388:	6060      	str	r0, [r4, #4]
 800c38a:	6863      	ldr	r3, [r4, #4]
 800c38c:	6123      	str	r3, [r4, #16]
 800c38e:	2300      	movs	r3, #0
 800c390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c394:	e7a8      	b.n	800c2e8 <_printf_i+0x150>
 800c396:	6923      	ldr	r3, [r4, #16]
 800c398:	4632      	mov	r2, r6
 800c39a:	4649      	mov	r1, r9
 800c39c:	4640      	mov	r0, r8
 800c39e:	47d0      	blx	sl
 800c3a0:	3001      	adds	r0, #1
 800c3a2:	d0ab      	beq.n	800c2fc <_printf_i+0x164>
 800c3a4:	6823      	ldr	r3, [r4, #0]
 800c3a6:	079b      	lsls	r3, r3, #30
 800c3a8:	d413      	bmi.n	800c3d2 <_printf_i+0x23a>
 800c3aa:	68e0      	ldr	r0, [r4, #12]
 800c3ac:	9b03      	ldr	r3, [sp, #12]
 800c3ae:	4298      	cmp	r0, r3
 800c3b0:	bfb8      	it	lt
 800c3b2:	4618      	movlt	r0, r3
 800c3b4:	e7a4      	b.n	800c300 <_printf_i+0x168>
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	4632      	mov	r2, r6
 800c3ba:	4649      	mov	r1, r9
 800c3bc:	4640      	mov	r0, r8
 800c3be:	47d0      	blx	sl
 800c3c0:	3001      	adds	r0, #1
 800c3c2:	d09b      	beq.n	800c2fc <_printf_i+0x164>
 800c3c4:	3501      	adds	r5, #1
 800c3c6:	68e3      	ldr	r3, [r4, #12]
 800c3c8:	9903      	ldr	r1, [sp, #12]
 800c3ca:	1a5b      	subs	r3, r3, r1
 800c3cc:	42ab      	cmp	r3, r5
 800c3ce:	dcf2      	bgt.n	800c3b6 <_printf_i+0x21e>
 800c3d0:	e7eb      	b.n	800c3aa <_printf_i+0x212>
 800c3d2:	2500      	movs	r5, #0
 800c3d4:	f104 0619 	add.w	r6, r4, #25
 800c3d8:	e7f5      	b.n	800c3c6 <_printf_i+0x22e>
 800c3da:	bf00      	nop
 800c3dc:	0800ea4e 	.word	0x0800ea4e
 800c3e0:	0800ea5f 	.word	0x0800ea5f

0800c3e4 <siprintf>:
 800c3e4:	b40e      	push	{r1, r2, r3}
 800c3e6:	b500      	push	{lr}
 800c3e8:	b09c      	sub	sp, #112	; 0x70
 800c3ea:	ab1d      	add	r3, sp, #116	; 0x74
 800c3ec:	9002      	str	r0, [sp, #8]
 800c3ee:	9006      	str	r0, [sp, #24]
 800c3f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c3f4:	4809      	ldr	r0, [pc, #36]	; (800c41c <siprintf+0x38>)
 800c3f6:	9107      	str	r1, [sp, #28]
 800c3f8:	9104      	str	r1, [sp, #16]
 800c3fa:	4909      	ldr	r1, [pc, #36]	; (800c420 <siprintf+0x3c>)
 800c3fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c400:	9105      	str	r1, [sp, #20]
 800c402:	6800      	ldr	r0, [r0, #0]
 800c404:	9301      	str	r3, [sp, #4]
 800c406:	a902      	add	r1, sp, #8
 800c408:	f001 fb34 	bl	800da74 <_svfiprintf_r>
 800c40c:	9b02      	ldr	r3, [sp, #8]
 800c40e:	2200      	movs	r2, #0
 800c410:	701a      	strb	r2, [r3, #0]
 800c412:	b01c      	add	sp, #112	; 0x70
 800c414:	f85d eb04 	ldr.w	lr, [sp], #4
 800c418:	b003      	add	sp, #12
 800c41a:	4770      	bx	lr
 800c41c:	20000180 	.word	0x20000180
 800c420:	ffff0208 	.word	0xffff0208

0800c424 <quorem>:
 800c424:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c428:	6903      	ldr	r3, [r0, #16]
 800c42a:	690c      	ldr	r4, [r1, #16]
 800c42c:	42a3      	cmp	r3, r4
 800c42e:	4607      	mov	r7, r0
 800c430:	f2c0 8081 	blt.w	800c536 <quorem+0x112>
 800c434:	3c01      	subs	r4, #1
 800c436:	f101 0814 	add.w	r8, r1, #20
 800c43a:	f100 0514 	add.w	r5, r0, #20
 800c43e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c442:	9301      	str	r3, [sp, #4]
 800c444:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c448:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c44c:	3301      	adds	r3, #1
 800c44e:	429a      	cmp	r2, r3
 800c450:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c454:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c458:	fbb2 f6f3 	udiv	r6, r2, r3
 800c45c:	d331      	bcc.n	800c4c2 <quorem+0x9e>
 800c45e:	f04f 0e00 	mov.w	lr, #0
 800c462:	4640      	mov	r0, r8
 800c464:	46ac      	mov	ip, r5
 800c466:	46f2      	mov	sl, lr
 800c468:	f850 2b04 	ldr.w	r2, [r0], #4
 800c46c:	b293      	uxth	r3, r2
 800c46e:	fb06 e303 	mla	r3, r6, r3, lr
 800c472:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c476:	b29b      	uxth	r3, r3
 800c478:	ebaa 0303 	sub.w	r3, sl, r3
 800c47c:	0c12      	lsrs	r2, r2, #16
 800c47e:	f8dc a000 	ldr.w	sl, [ip]
 800c482:	fb06 e202 	mla	r2, r6, r2, lr
 800c486:	fa13 f38a 	uxtah	r3, r3, sl
 800c48a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c48e:	fa1f fa82 	uxth.w	sl, r2
 800c492:	f8dc 2000 	ldr.w	r2, [ip]
 800c496:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c49a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c49e:	b29b      	uxth	r3, r3
 800c4a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c4a4:	4581      	cmp	r9, r0
 800c4a6:	f84c 3b04 	str.w	r3, [ip], #4
 800c4aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c4ae:	d2db      	bcs.n	800c468 <quorem+0x44>
 800c4b0:	f855 300b 	ldr.w	r3, [r5, fp]
 800c4b4:	b92b      	cbnz	r3, 800c4c2 <quorem+0x9e>
 800c4b6:	9b01      	ldr	r3, [sp, #4]
 800c4b8:	3b04      	subs	r3, #4
 800c4ba:	429d      	cmp	r5, r3
 800c4bc:	461a      	mov	r2, r3
 800c4be:	d32e      	bcc.n	800c51e <quorem+0xfa>
 800c4c0:	613c      	str	r4, [r7, #16]
 800c4c2:	4638      	mov	r0, r7
 800c4c4:	f001 f8c0 	bl	800d648 <__mcmp>
 800c4c8:	2800      	cmp	r0, #0
 800c4ca:	db24      	blt.n	800c516 <quorem+0xf2>
 800c4cc:	3601      	adds	r6, #1
 800c4ce:	4628      	mov	r0, r5
 800c4d0:	f04f 0c00 	mov.w	ip, #0
 800c4d4:	f858 2b04 	ldr.w	r2, [r8], #4
 800c4d8:	f8d0 e000 	ldr.w	lr, [r0]
 800c4dc:	b293      	uxth	r3, r2
 800c4de:	ebac 0303 	sub.w	r3, ip, r3
 800c4e2:	0c12      	lsrs	r2, r2, #16
 800c4e4:	fa13 f38e 	uxtah	r3, r3, lr
 800c4e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c4ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c4f0:	b29b      	uxth	r3, r3
 800c4f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c4f6:	45c1      	cmp	r9, r8
 800c4f8:	f840 3b04 	str.w	r3, [r0], #4
 800c4fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c500:	d2e8      	bcs.n	800c4d4 <quorem+0xb0>
 800c502:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c506:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c50a:	b922      	cbnz	r2, 800c516 <quorem+0xf2>
 800c50c:	3b04      	subs	r3, #4
 800c50e:	429d      	cmp	r5, r3
 800c510:	461a      	mov	r2, r3
 800c512:	d30a      	bcc.n	800c52a <quorem+0x106>
 800c514:	613c      	str	r4, [r7, #16]
 800c516:	4630      	mov	r0, r6
 800c518:	b003      	add	sp, #12
 800c51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c51e:	6812      	ldr	r2, [r2, #0]
 800c520:	3b04      	subs	r3, #4
 800c522:	2a00      	cmp	r2, #0
 800c524:	d1cc      	bne.n	800c4c0 <quorem+0x9c>
 800c526:	3c01      	subs	r4, #1
 800c528:	e7c7      	b.n	800c4ba <quorem+0x96>
 800c52a:	6812      	ldr	r2, [r2, #0]
 800c52c:	3b04      	subs	r3, #4
 800c52e:	2a00      	cmp	r2, #0
 800c530:	d1f0      	bne.n	800c514 <quorem+0xf0>
 800c532:	3c01      	subs	r4, #1
 800c534:	e7eb      	b.n	800c50e <quorem+0xea>
 800c536:	2000      	movs	r0, #0
 800c538:	e7ee      	b.n	800c518 <quorem+0xf4>
 800c53a:	0000      	movs	r0, r0
 800c53c:	0000      	movs	r0, r0
	...

0800c540 <_dtoa_r>:
 800c540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c544:	ed2d 8b02 	vpush	{d8}
 800c548:	ec57 6b10 	vmov	r6, r7, d0
 800c54c:	b095      	sub	sp, #84	; 0x54
 800c54e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c550:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c554:	9105      	str	r1, [sp, #20]
 800c556:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c55a:	4604      	mov	r4, r0
 800c55c:	9209      	str	r2, [sp, #36]	; 0x24
 800c55e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c560:	b975      	cbnz	r5, 800c580 <_dtoa_r+0x40>
 800c562:	2010      	movs	r0, #16
 800c564:	f000 fddc 	bl	800d120 <malloc>
 800c568:	4602      	mov	r2, r0
 800c56a:	6260      	str	r0, [r4, #36]	; 0x24
 800c56c:	b920      	cbnz	r0, 800c578 <_dtoa_r+0x38>
 800c56e:	4bb2      	ldr	r3, [pc, #712]	; (800c838 <_dtoa_r+0x2f8>)
 800c570:	21ea      	movs	r1, #234	; 0xea
 800c572:	48b2      	ldr	r0, [pc, #712]	; (800c83c <_dtoa_r+0x2fc>)
 800c574:	f001 fb8e 	bl	800dc94 <__assert_func>
 800c578:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c57c:	6005      	str	r5, [r0, #0]
 800c57e:	60c5      	str	r5, [r0, #12]
 800c580:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c582:	6819      	ldr	r1, [r3, #0]
 800c584:	b151      	cbz	r1, 800c59c <_dtoa_r+0x5c>
 800c586:	685a      	ldr	r2, [r3, #4]
 800c588:	604a      	str	r2, [r1, #4]
 800c58a:	2301      	movs	r3, #1
 800c58c:	4093      	lsls	r3, r2
 800c58e:	608b      	str	r3, [r1, #8]
 800c590:	4620      	mov	r0, r4
 800c592:	f000 fe1b 	bl	800d1cc <_Bfree>
 800c596:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c598:	2200      	movs	r2, #0
 800c59a:	601a      	str	r2, [r3, #0]
 800c59c:	1e3b      	subs	r3, r7, #0
 800c59e:	bfb9      	ittee	lt
 800c5a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c5a4:	9303      	strlt	r3, [sp, #12]
 800c5a6:	2300      	movge	r3, #0
 800c5a8:	f8c8 3000 	strge.w	r3, [r8]
 800c5ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c5b0:	4ba3      	ldr	r3, [pc, #652]	; (800c840 <_dtoa_r+0x300>)
 800c5b2:	bfbc      	itt	lt
 800c5b4:	2201      	movlt	r2, #1
 800c5b6:	f8c8 2000 	strlt.w	r2, [r8]
 800c5ba:	ea33 0309 	bics.w	r3, r3, r9
 800c5be:	d11b      	bne.n	800c5f8 <_dtoa_r+0xb8>
 800c5c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c5c2:	f242 730f 	movw	r3, #9999	; 0x270f
 800c5c6:	6013      	str	r3, [r2, #0]
 800c5c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c5cc:	4333      	orrs	r3, r6
 800c5ce:	f000 857a 	beq.w	800d0c6 <_dtoa_r+0xb86>
 800c5d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c5d4:	b963      	cbnz	r3, 800c5f0 <_dtoa_r+0xb0>
 800c5d6:	4b9b      	ldr	r3, [pc, #620]	; (800c844 <_dtoa_r+0x304>)
 800c5d8:	e024      	b.n	800c624 <_dtoa_r+0xe4>
 800c5da:	4b9b      	ldr	r3, [pc, #620]	; (800c848 <_dtoa_r+0x308>)
 800c5dc:	9300      	str	r3, [sp, #0]
 800c5de:	3308      	adds	r3, #8
 800c5e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c5e2:	6013      	str	r3, [r2, #0]
 800c5e4:	9800      	ldr	r0, [sp, #0]
 800c5e6:	b015      	add	sp, #84	; 0x54
 800c5e8:	ecbd 8b02 	vpop	{d8}
 800c5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5f0:	4b94      	ldr	r3, [pc, #592]	; (800c844 <_dtoa_r+0x304>)
 800c5f2:	9300      	str	r3, [sp, #0]
 800c5f4:	3303      	adds	r3, #3
 800c5f6:	e7f3      	b.n	800c5e0 <_dtoa_r+0xa0>
 800c5f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	ec51 0b17 	vmov	r0, r1, d7
 800c602:	2300      	movs	r3, #0
 800c604:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c608:	f7f4 fa66 	bl	8000ad8 <__aeabi_dcmpeq>
 800c60c:	4680      	mov	r8, r0
 800c60e:	b158      	cbz	r0, 800c628 <_dtoa_r+0xe8>
 800c610:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c612:	2301      	movs	r3, #1
 800c614:	6013      	str	r3, [r2, #0]
 800c616:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c618:	2b00      	cmp	r3, #0
 800c61a:	f000 8551 	beq.w	800d0c0 <_dtoa_r+0xb80>
 800c61e:	488b      	ldr	r0, [pc, #556]	; (800c84c <_dtoa_r+0x30c>)
 800c620:	6018      	str	r0, [r3, #0]
 800c622:	1e43      	subs	r3, r0, #1
 800c624:	9300      	str	r3, [sp, #0]
 800c626:	e7dd      	b.n	800c5e4 <_dtoa_r+0xa4>
 800c628:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c62c:	aa12      	add	r2, sp, #72	; 0x48
 800c62e:	a913      	add	r1, sp, #76	; 0x4c
 800c630:	4620      	mov	r0, r4
 800c632:	f001 f8ad 	bl	800d790 <__d2b>
 800c636:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c63a:	4683      	mov	fp, r0
 800c63c:	2d00      	cmp	r5, #0
 800c63e:	d07c      	beq.n	800c73a <_dtoa_r+0x1fa>
 800c640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c642:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800c646:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c64a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800c64e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c652:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c656:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c65a:	4b7d      	ldr	r3, [pc, #500]	; (800c850 <_dtoa_r+0x310>)
 800c65c:	2200      	movs	r2, #0
 800c65e:	4630      	mov	r0, r6
 800c660:	4639      	mov	r1, r7
 800c662:	f7f3 fe19 	bl	8000298 <__aeabi_dsub>
 800c666:	a36e      	add	r3, pc, #440	; (adr r3, 800c820 <_dtoa_r+0x2e0>)
 800c668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c66c:	f7f3 ffcc 	bl	8000608 <__aeabi_dmul>
 800c670:	a36d      	add	r3, pc, #436	; (adr r3, 800c828 <_dtoa_r+0x2e8>)
 800c672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c676:	f7f3 fe11 	bl	800029c <__adddf3>
 800c67a:	4606      	mov	r6, r0
 800c67c:	4628      	mov	r0, r5
 800c67e:	460f      	mov	r7, r1
 800c680:	f7f3 ff58 	bl	8000534 <__aeabi_i2d>
 800c684:	a36a      	add	r3, pc, #424	; (adr r3, 800c830 <_dtoa_r+0x2f0>)
 800c686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c68a:	f7f3 ffbd 	bl	8000608 <__aeabi_dmul>
 800c68e:	4602      	mov	r2, r0
 800c690:	460b      	mov	r3, r1
 800c692:	4630      	mov	r0, r6
 800c694:	4639      	mov	r1, r7
 800c696:	f7f3 fe01 	bl	800029c <__adddf3>
 800c69a:	4606      	mov	r6, r0
 800c69c:	460f      	mov	r7, r1
 800c69e:	f7f4 fa63 	bl	8000b68 <__aeabi_d2iz>
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	4682      	mov	sl, r0
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	4630      	mov	r0, r6
 800c6aa:	4639      	mov	r1, r7
 800c6ac:	f7f4 fa1e 	bl	8000aec <__aeabi_dcmplt>
 800c6b0:	b148      	cbz	r0, 800c6c6 <_dtoa_r+0x186>
 800c6b2:	4650      	mov	r0, sl
 800c6b4:	f7f3 ff3e 	bl	8000534 <__aeabi_i2d>
 800c6b8:	4632      	mov	r2, r6
 800c6ba:	463b      	mov	r3, r7
 800c6bc:	f7f4 fa0c 	bl	8000ad8 <__aeabi_dcmpeq>
 800c6c0:	b908      	cbnz	r0, 800c6c6 <_dtoa_r+0x186>
 800c6c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c6c6:	f1ba 0f16 	cmp.w	sl, #22
 800c6ca:	d854      	bhi.n	800c776 <_dtoa_r+0x236>
 800c6cc:	4b61      	ldr	r3, [pc, #388]	; (800c854 <_dtoa_r+0x314>)
 800c6ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c6da:	f7f4 fa07 	bl	8000aec <__aeabi_dcmplt>
 800c6de:	2800      	cmp	r0, #0
 800c6e0:	d04b      	beq.n	800c77a <_dtoa_r+0x23a>
 800c6e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	930e      	str	r3, [sp, #56]	; 0x38
 800c6ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c6ec:	1b5d      	subs	r5, r3, r5
 800c6ee:	1e6b      	subs	r3, r5, #1
 800c6f0:	9304      	str	r3, [sp, #16]
 800c6f2:	bf43      	ittte	mi
 800c6f4:	2300      	movmi	r3, #0
 800c6f6:	f1c5 0801 	rsbmi	r8, r5, #1
 800c6fa:	9304      	strmi	r3, [sp, #16]
 800c6fc:	f04f 0800 	movpl.w	r8, #0
 800c700:	f1ba 0f00 	cmp.w	sl, #0
 800c704:	db3b      	blt.n	800c77e <_dtoa_r+0x23e>
 800c706:	9b04      	ldr	r3, [sp, #16]
 800c708:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800c70c:	4453      	add	r3, sl
 800c70e:	9304      	str	r3, [sp, #16]
 800c710:	2300      	movs	r3, #0
 800c712:	9306      	str	r3, [sp, #24]
 800c714:	9b05      	ldr	r3, [sp, #20]
 800c716:	2b09      	cmp	r3, #9
 800c718:	d869      	bhi.n	800c7ee <_dtoa_r+0x2ae>
 800c71a:	2b05      	cmp	r3, #5
 800c71c:	bfc4      	itt	gt
 800c71e:	3b04      	subgt	r3, #4
 800c720:	9305      	strgt	r3, [sp, #20]
 800c722:	9b05      	ldr	r3, [sp, #20]
 800c724:	f1a3 0302 	sub.w	r3, r3, #2
 800c728:	bfcc      	ite	gt
 800c72a:	2500      	movgt	r5, #0
 800c72c:	2501      	movle	r5, #1
 800c72e:	2b03      	cmp	r3, #3
 800c730:	d869      	bhi.n	800c806 <_dtoa_r+0x2c6>
 800c732:	e8df f003 	tbb	[pc, r3]
 800c736:	4e2c      	.short	0x4e2c
 800c738:	5a4c      	.short	0x5a4c
 800c73a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c73e:	441d      	add	r5, r3
 800c740:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c744:	2b20      	cmp	r3, #32
 800c746:	bfc1      	itttt	gt
 800c748:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c74c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c750:	fa09 f303 	lslgt.w	r3, r9, r3
 800c754:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c758:	bfda      	itte	le
 800c75a:	f1c3 0320 	rsble	r3, r3, #32
 800c75e:	fa06 f003 	lslle.w	r0, r6, r3
 800c762:	4318      	orrgt	r0, r3
 800c764:	f7f3 fed6 	bl	8000514 <__aeabi_ui2d>
 800c768:	2301      	movs	r3, #1
 800c76a:	4606      	mov	r6, r0
 800c76c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c770:	3d01      	subs	r5, #1
 800c772:	9310      	str	r3, [sp, #64]	; 0x40
 800c774:	e771      	b.n	800c65a <_dtoa_r+0x11a>
 800c776:	2301      	movs	r3, #1
 800c778:	e7b6      	b.n	800c6e8 <_dtoa_r+0x1a8>
 800c77a:	900e      	str	r0, [sp, #56]	; 0x38
 800c77c:	e7b5      	b.n	800c6ea <_dtoa_r+0x1aa>
 800c77e:	f1ca 0300 	rsb	r3, sl, #0
 800c782:	9306      	str	r3, [sp, #24]
 800c784:	2300      	movs	r3, #0
 800c786:	eba8 080a 	sub.w	r8, r8, sl
 800c78a:	930d      	str	r3, [sp, #52]	; 0x34
 800c78c:	e7c2      	b.n	800c714 <_dtoa_r+0x1d4>
 800c78e:	2300      	movs	r3, #0
 800c790:	9308      	str	r3, [sp, #32]
 800c792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c794:	2b00      	cmp	r3, #0
 800c796:	dc39      	bgt.n	800c80c <_dtoa_r+0x2cc>
 800c798:	f04f 0901 	mov.w	r9, #1
 800c79c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c7a0:	464b      	mov	r3, r9
 800c7a2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c7a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	6042      	str	r2, [r0, #4]
 800c7ac:	2204      	movs	r2, #4
 800c7ae:	f102 0614 	add.w	r6, r2, #20
 800c7b2:	429e      	cmp	r6, r3
 800c7b4:	6841      	ldr	r1, [r0, #4]
 800c7b6:	d92f      	bls.n	800c818 <_dtoa_r+0x2d8>
 800c7b8:	4620      	mov	r0, r4
 800c7ba:	f000 fcc7 	bl	800d14c <_Balloc>
 800c7be:	9000      	str	r0, [sp, #0]
 800c7c0:	2800      	cmp	r0, #0
 800c7c2:	d14b      	bne.n	800c85c <_dtoa_r+0x31c>
 800c7c4:	4b24      	ldr	r3, [pc, #144]	; (800c858 <_dtoa_r+0x318>)
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c7cc:	e6d1      	b.n	800c572 <_dtoa_r+0x32>
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	e7de      	b.n	800c790 <_dtoa_r+0x250>
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	9308      	str	r3, [sp, #32]
 800c7d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7d8:	eb0a 0903 	add.w	r9, sl, r3
 800c7dc:	f109 0301 	add.w	r3, r9, #1
 800c7e0:	2b01      	cmp	r3, #1
 800c7e2:	9301      	str	r3, [sp, #4]
 800c7e4:	bfb8      	it	lt
 800c7e6:	2301      	movlt	r3, #1
 800c7e8:	e7dd      	b.n	800c7a6 <_dtoa_r+0x266>
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	e7f2      	b.n	800c7d4 <_dtoa_r+0x294>
 800c7ee:	2501      	movs	r5, #1
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	9305      	str	r3, [sp, #20]
 800c7f4:	9508      	str	r5, [sp, #32]
 800c7f6:	f04f 39ff 	mov.w	r9, #4294967295
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	f8cd 9004 	str.w	r9, [sp, #4]
 800c800:	2312      	movs	r3, #18
 800c802:	9209      	str	r2, [sp, #36]	; 0x24
 800c804:	e7cf      	b.n	800c7a6 <_dtoa_r+0x266>
 800c806:	2301      	movs	r3, #1
 800c808:	9308      	str	r3, [sp, #32]
 800c80a:	e7f4      	b.n	800c7f6 <_dtoa_r+0x2b6>
 800c80c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c810:	f8cd 9004 	str.w	r9, [sp, #4]
 800c814:	464b      	mov	r3, r9
 800c816:	e7c6      	b.n	800c7a6 <_dtoa_r+0x266>
 800c818:	3101      	adds	r1, #1
 800c81a:	6041      	str	r1, [r0, #4]
 800c81c:	0052      	lsls	r2, r2, #1
 800c81e:	e7c6      	b.n	800c7ae <_dtoa_r+0x26e>
 800c820:	636f4361 	.word	0x636f4361
 800c824:	3fd287a7 	.word	0x3fd287a7
 800c828:	8b60c8b3 	.word	0x8b60c8b3
 800c82c:	3fc68a28 	.word	0x3fc68a28
 800c830:	509f79fb 	.word	0x509f79fb
 800c834:	3fd34413 	.word	0x3fd34413
 800c838:	0800ea7d 	.word	0x0800ea7d
 800c83c:	0800ea94 	.word	0x0800ea94
 800c840:	7ff00000 	.word	0x7ff00000
 800c844:	0800ea79 	.word	0x0800ea79
 800c848:	0800ea70 	.word	0x0800ea70
 800c84c:	0800ea4d 	.word	0x0800ea4d
 800c850:	3ff80000 	.word	0x3ff80000
 800c854:	0800eb90 	.word	0x0800eb90
 800c858:	0800eaf3 	.word	0x0800eaf3
 800c85c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c85e:	9a00      	ldr	r2, [sp, #0]
 800c860:	601a      	str	r2, [r3, #0]
 800c862:	9b01      	ldr	r3, [sp, #4]
 800c864:	2b0e      	cmp	r3, #14
 800c866:	f200 80ad 	bhi.w	800c9c4 <_dtoa_r+0x484>
 800c86a:	2d00      	cmp	r5, #0
 800c86c:	f000 80aa 	beq.w	800c9c4 <_dtoa_r+0x484>
 800c870:	f1ba 0f00 	cmp.w	sl, #0
 800c874:	dd36      	ble.n	800c8e4 <_dtoa_r+0x3a4>
 800c876:	4ac3      	ldr	r2, [pc, #780]	; (800cb84 <_dtoa_r+0x644>)
 800c878:	f00a 030f 	and.w	r3, sl, #15
 800c87c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c880:	ed93 7b00 	vldr	d7, [r3]
 800c884:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c888:	ea4f 172a 	mov.w	r7, sl, asr #4
 800c88c:	eeb0 8a47 	vmov.f32	s16, s14
 800c890:	eef0 8a67 	vmov.f32	s17, s15
 800c894:	d016      	beq.n	800c8c4 <_dtoa_r+0x384>
 800c896:	4bbc      	ldr	r3, [pc, #752]	; (800cb88 <_dtoa_r+0x648>)
 800c898:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c89c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c8a0:	f7f3 ffdc 	bl	800085c <__aeabi_ddiv>
 800c8a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8a8:	f007 070f 	and.w	r7, r7, #15
 800c8ac:	2503      	movs	r5, #3
 800c8ae:	4eb6      	ldr	r6, [pc, #728]	; (800cb88 <_dtoa_r+0x648>)
 800c8b0:	b957      	cbnz	r7, 800c8c8 <_dtoa_r+0x388>
 800c8b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8b6:	ec53 2b18 	vmov	r2, r3, d8
 800c8ba:	f7f3 ffcf 	bl	800085c <__aeabi_ddiv>
 800c8be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8c2:	e029      	b.n	800c918 <_dtoa_r+0x3d8>
 800c8c4:	2502      	movs	r5, #2
 800c8c6:	e7f2      	b.n	800c8ae <_dtoa_r+0x36e>
 800c8c8:	07f9      	lsls	r1, r7, #31
 800c8ca:	d508      	bpl.n	800c8de <_dtoa_r+0x39e>
 800c8cc:	ec51 0b18 	vmov	r0, r1, d8
 800c8d0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c8d4:	f7f3 fe98 	bl	8000608 <__aeabi_dmul>
 800c8d8:	ec41 0b18 	vmov	d8, r0, r1
 800c8dc:	3501      	adds	r5, #1
 800c8de:	107f      	asrs	r7, r7, #1
 800c8e0:	3608      	adds	r6, #8
 800c8e2:	e7e5      	b.n	800c8b0 <_dtoa_r+0x370>
 800c8e4:	f000 80a6 	beq.w	800ca34 <_dtoa_r+0x4f4>
 800c8e8:	f1ca 0600 	rsb	r6, sl, #0
 800c8ec:	4ba5      	ldr	r3, [pc, #660]	; (800cb84 <_dtoa_r+0x644>)
 800c8ee:	4fa6      	ldr	r7, [pc, #664]	; (800cb88 <_dtoa_r+0x648>)
 800c8f0:	f006 020f 	and.w	r2, r6, #15
 800c8f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c900:	f7f3 fe82 	bl	8000608 <__aeabi_dmul>
 800c904:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c908:	1136      	asrs	r6, r6, #4
 800c90a:	2300      	movs	r3, #0
 800c90c:	2502      	movs	r5, #2
 800c90e:	2e00      	cmp	r6, #0
 800c910:	f040 8085 	bne.w	800ca1e <_dtoa_r+0x4de>
 800c914:	2b00      	cmp	r3, #0
 800c916:	d1d2      	bne.n	800c8be <_dtoa_r+0x37e>
 800c918:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	f000 808c 	beq.w	800ca38 <_dtoa_r+0x4f8>
 800c920:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c924:	4b99      	ldr	r3, [pc, #612]	; (800cb8c <_dtoa_r+0x64c>)
 800c926:	2200      	movs	r2, #0
 800c928:	4630      	mov	r0, r6
 800c92a:	4639      	mov	r1, r7
 800c92c:	f7f4 f8de 	bl	8000aec <__aeabi_dcmplt>
 800c930:	2800      	cmp	r0, #0
 800c932:	f000 8081 	beq.w	800ca38 <_dtoa_r+0x4f8>
 800c936:	9b01      	ldr	r3, [sp, #4]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d07d      	beq.n	800ca38 <_dtoa_r+0x4f8>
 800c93c:	f1b9 0f00 	cmp.w	r9, #0
 800c940:	dd3c      	ble.n	800c9bc <_dtoa_r+0x47c>
 800c942:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c946:	9307      	str	r3, [sp, #28]
 800c948:	2200      	movs	r2, #0
 800c94a:	4b91      	ldr	r3, [pc, #580]	; (800cb90 <_dtoa_r+0x650>)
 800c94c:	4630      	mov	r0, r6
 800c94e:	4639      	mov	r1, r7
 800c950:	f7f3 fe5a 	bl	8000608 <__aeabi_dmul>
 800c954:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c958:	3501      	adds	r5, #1
 800c95a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c95e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c962:	4628      	mov	r0, r5
 800c964:	f7f3 fde6 	bl	8000534 <__aeabi_i2d>
 800c968:	4632      	mov	r2, r6
 800c96a:	463b      	mov	r3, r7
 800c96c:	f7f3 fe4c 	bl	8000608 <__aeabi_dmul>
 800c970:	4b88      	ldr	r3, [pc, #544]	; (800cb94 <_dtoa_r+0x654>)
 800c972:	2200      	movs	r2, #0
 800c974:	f7f3 fc92 	bl	800029c <__adddf3>
 800c978:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c97c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c980:	9303      	str	r3, [sp, #12]
 800c982:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c984:	2b00      	cmp	r3, #0
 800c986:	d15c      	bne.n	800ca42 <_dtoa_r+0x502>
 800c988:	4b83      	ldr	r3, [pc, #524]	; (800cb98 <_dtoa_r+0x658>)
 800c98a:	2200      	movs	r2, #0
 800c98c:	4630      	mov	r0, r6
 800c98e:	4639      	mov	r1, r7
 800c990:	f7f3 fc82 	bl	8000298 <__aeabi_dsub>
 800c994:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c998:	4606      	mov	r6, r0
 800c99a:	460f      	mov	r7, r1
 800c99c:	f7f4 f8c4 	bl	8000b28 <__aeabi_dcmpgt>
 800c9a0:	2800      	cmp	r0, #0
 800c9a2:	f040 8296 	bne.w	800ced2 <_dtoa_r+0x992>
 800c9a6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c9aa:	4630      	mov	r0, r6
 800c9ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c9b0:	4639      	mov	r1, r7
 800c9b2:	f7f4 f89b 	bl	8000aec <__aeabi_dcmplt>
 800c9b6:	2800      	cmp	r0, #0
 800c9b8:	f040 8288 	bne.w	800cecc <_dtoa_r+0x98c>
 800c9bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c9c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c9c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	f2c0 8158 	blt.w	800cc7c <_dtoa_r+0x73c>
 800c9cc:	f1ba 0f0e 	cmp.w	sl, #14
 800c9d0:	f300 8154 	bgt.w	800cc7c <_dtoa_r+0x73c>
 800c9d4:	4b6b      	ldr	r3, [pc, #428]	; (800cb84 <_dtoa_r+0x644>)
 800c9d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c9da:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c9de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	f280 80e3 	bge.w	800cbac <_dtoa_r+0x66c>
 800c9e6:	9b01      	ldr	r3, [sp, #4]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	f300 80df 	bgt.w	800cbac <_dtoa_r+0x66c>
 800c9ee:	f040 826d 	bne.w	800cecc <_dtoa_r+0x98c>
 800c9f2:	4b69      	ldr	r3, [pc, #420]	; (800cb98 <_dtoa_r+0x658>)
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	4640      	mov	r0, r8
 800c9f8:	4649      	mov	r1, r9
 800c9fa:	f7f3 fe05 	bl	8000608 <__aeabi_dmul>
 800c9fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca02:	f7f4 f887 	bl	8000b14 <__aeabi_dcmpge>
 800ca06:	9e01      	ldr	r6, [sp, #4]
 800ca08:	4637      	mov	r7, r6
 800ca0a:	2800      	cmp	r0, #0
 800ca0c:	f040 8243 	bne.w	800ce96 <_dtoa_r+0x956>
 800ca10:	9d00      	ldr	r5, [sp, #0]
 800ca12:	2331      	movs	r3, #49	; 0x31
 800ca14:	f805 3b01 	strb.w	r3, [r5], #1
 800ca18:	f10a 0a01 	add.w	sl, sl, #1
 800ca1c:	e23f      	b.n	800ce9e <_dtoa_r+0x95e>
 800ca1e:	07f2      	lsls	r2, r6, #31
 800ca20:	d505      	bpl.n	800ca2e <_dtoa_r+0x4ee>
 800ca22:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca26:	f7f3 fdef 	bl	8000608 <__aeabi_dmul>
 800ca2a:	3501      	adds	r5, #1
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	1076      	asrs	r6, r6, #1
 800ca30:	3708      	adds	r7, #8
 800ca32:	e76c      	b.n	800c90e <_dtoa_r+0x3ce>
 800ca34:	2502      	movs	r5, #2
 800ca36:	e76f      	b.n	800c918 <_dtoa_r+0x3d8>
 800ca38:	9b01      	ldr	r3, [sp, #4]
 800ca3a:	f8cd a01c 	str.w	sl, [sp, #28]
 800ca3e:	930c      	str	r3, [sp, #48]	; 0x30
 800ca40:	e78d      	b.n	800c95e <_dtoa_r+0x41e>
 800ca42:	9900      	ldr	r1, [sp, #0]
 800ca44:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ca46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca48:	4b4e      	ldr	r3, [pc, #312]	; (800cb84 <_dtoa_r+0x644>)
 800ca4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ca4e:	4401      	add	r1, r0
 800ca50:	9102      	str	r1, [sp, #8]
 800ca52:	9908      	ldr	r1, [sp, #32]
 800ca54:	eeb0 8a47 	vmov.f32	s16, s14
 800ca58:	eef0 8a67 	vmov.f32	s17, s15
 800ca5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ca64:	2900      	cmp	r1, #0
 800ca66:	d045      	beq.n	800caf4 <_dtoa_r+0x5b4>
 800ca68:	494c      	ldr	r1, [pc, #304]	; (800cb9c <_dtoa_r+0x65c>)
 800ca6a:	2000      	movs	r0, #0
 800ca6c:	f7f3 fef6 	bl	800085c <__aeabi_ddiv>
 800ca70:	ec53 2b18 	vmov	r2, r3, d8
 800ca74:	f7f3 fc10 	bl	8000298 <__aeabi_dsub>
 800ca78:	9d00      	ldr	r5, [sp, #0]
 800ca7a:	ec41 0b18 	vmov	d8, r0, r1
 800ca7e:	4639      	mov	r1, r7
 800ca80:	4630      	mov	r0, r6
 800ca82:	f7f4 f871 	bl	8000b68 <__aeabi_d2iz>
 800ca86:	900c      	str	r0, [sp, #48]	; 0x30
 800ca88:	f7f3 fd54 	bl	8000534 <__aeabi_i2d>
 800ca8c:	4602      	mov	r2, r0
 800ca8e:	460b      	mov	r3, r1
 800ca90:	4630      	mov	r0, r6
 800ca92:	4639      	mov	r1, r7
 800ca94:	f7f3 fc00 	bl	8000298 <__aeabi_dsub>
 800ca98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca9a:	3330      	adds	r3, #48	; 0x30
 800ca9c:	f805 3b01 	strb.w	r3, [r5], #1
 800caa0:	ec53 2b18 	vmov	r2, r3, d8
 800caa4:	4606      	mov	r6, r0
 800caa6:	460f      	mov	r7, r1
 800caa8:	f7f4 f820 	bl	8000aec <__aeabi_dcmplt>
 800caac:	2800      	cmp	r0, #0
 800caae:	d165      	bne.n	800cb7c <_dtoa_r+0x63c>
 800cab0:	4632      	mov	r2, r6
 800cab2:	463b      	mov	r3, r7
 800cab4:	4935      	ldr	r1, [pc, #212]	; (800cb8c <_dtoa_r+0x64c>)
 800cab6:	2000      	movs	r0, #0
 800cab8:	f7f3 fbee 	bl	8000298 <__aeabi_dsub>
 800cabc:	ec53 2b18 	vmov	r2, r3, d8
 800cac0:	f7f4 f814 	bl	8000aec <__aeabi_dcmplt>
 800cac4:	2800      	cmp	r0, #0
 800cac6:	f040 80b9 	bne.w	800cc3c <_dtoa_r+0x6fc>
 800caca:	9b02      	ldr	r3, [sp, #8]
 800cacc:	429d      	cmp	r5, r3
 800cace:	f43f af75 	beq.w	800c9bc <_dtoa_r+0x47c>
 800cad2:	4b2f      	ldr	r3, [pc, #188]	; (800cb90 <_dtoa_r+0x650>)
 800cad4:	ec51 0b18 	vmov	r0, r1, d8
 800cad8:	2200      	movs	r2, #0
 800cada:	f7f3 fd95 	bl	8000608 <__aeabi_dmul>
 800cade:	4b2c      	ldr	r3, [pc, #176]	; (800cb90 <_dtoa_r+0x650>)
 800cae0:	ec41 0b18 	vmov	d8, r0, r1
 800cae4:	2200      	movs	r2, #0
 800cae6:	4630      	mov	r0, r6
 800cae8:	4639      	mov	r1, r7
 800caea:	f7f3 fd8d 	bl	8000608 <__aeabi_dmul>
 800caee:	4606      	mov	r6, r0
 800caf0:	460f      	mov	r7, r1
 800caf2:	e7c4      	b.n	800ca7e <_dtoa_r+0x53e>
 800caf4:	ec51 0b17 	vmov	r0, r1, d7
 800caf8:	f7f3 fd86 	bl	8000608 <__aeabi_dmul>
 800cafc:	9b02      	ldr	r3, [sp, #8]
 800cafe:	9d00      	ldr	r5, [sp, #0]
 800cb00:	930c      	str	r3, [sp, #48]	; 0x30
 800cb02:	ec41 0b18 	vmov	d8, r0, r1
 800cb06:	4639      	mov	r1, r7
 800cb08:	4630      	mov	r0, r6
 800cb0a:	f7f4 f82d 	bl	8000b68 <__aeabi_d2iz>
 800cb0e:	9011      	str	r0, [sp, #68]	; 0x44
 800cb10:	f7f3 fd10 	bl	8000534 <__aeabi_i2d>
 800cb14:	4602      	mov	r2, r0
 800cb16:	460b      	mov	r3, r1
 800cb18:	4630      	mov	r0, r6
 800cb1a:	4639      	mov	r1, r7
 800cb1c:	f7f3 fbbc 	bl	8000298 <__aeabi_dsub>
 800cb20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cb22:	3330      	adds	r3, #48	; 0x30
 800cb24:	f805 3b01 	strb.w	r3, [r5], #1
 800cb28:	9b02      	ldr	r3, [sp, #8]
 800cb2a:	429d      	cmp	r5, r3
 800cb2c:	4606      	mov	r6, r0
 800cb2e:	460f      	mov	r7, r1
 800cb30:	f04f 0200 	mov.w	r2, #0
 800cb34:	d134      	bne.n	800cba0 <_dtoa_r+0x660>
 800cb36:	4b19      	ldr	r3, [pc, #100]	; (800cb9c <_dtoa_r+0x65c>)
 800cb38:	ec51 0b18 	vmov	r0, r1, d8
 800cb3c:	f7f3 fbae 	bl	800029c <__adddf3>
 800cb40:	4602      	mov	r2, r0
 800cb42:	460b      	mov	r3, r1
 800cb44:	4630      	mov	r0, r6
 800cb46:	4639      	mov	r1, r7
 800cb48:	f7f3 ffee 	bl	8000b28 <__aeabi_dcmpgt>
 800cb4c:	2800      	cmp	r0, #0
 800cb4e:	d175      	bne.n	800cc3c <_dtoa_r+0x6fc>
 800cb50:	ec53 2b18 	vmov	r2, r3, d8
 800cb54:	4911      	ldr	r1, [pc, #68]	; (800cb9c <_dtoa_r+0x65c>)
 800cb56:	2000      	movs	r0, #0
 800cb58:	f7f3 fb9e 	bl	8000298 <__aeabi_dsub>
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	460b      	mov	r3, r1
 800cb60:	4630      	mov	r0, r6
 800cb62:	4639      	mov	r1, r7
 800cb64:	f7f3 ffc2 	bl	8000aec <__aeabi_dcmplt>
 800cb68:	2800      	cmp	r0, #0
 800cb6a:	f43f af27 	beq.w	800c9bc <_dtoa_r+0x47c>
 800cb6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cb70:	1e6b      	subs	r3, r5, #1
 800cb72:	930c      	str	r3, [sp, #48]	; 0x30
 800cb74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cb78:	2b30      	cmp	r3, #48	; 0x30
 800cb7a:	d0f8      	beq.n	800cb6e <_dtoa_r+0x62e>
 800cb7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800cb80:	e04a      	b.n	800cc18 <_dtoa_r+0x6d8>
 800cb82:	bf00      	nop
 800cb84:	0800eb90 	.word	0x0800eb90
 800cb88:	0800eb68 	.word	0x0800eb68
 800cb8c:	3ff00000 	.word	0x3ff00000
 800cb90:	40240000 	.word	0x40240000
 800cb94:	401c0000 	.word	0x401c0000
 800cb98:	40140000 	.word	0x40140000
 800cb9c:	3fe00000 	.word	0x3fe00000
 800cba0:	4baf      	ldr	r3, [pc, #700]	; (800ce60 <_dtoa_r+0x920>)
 800cba2:	f7f3 fd31 	bl	8000608 <__aeabi_dmul>
 800cba6:	4606      	mov	r6, r0
 800cba8:	460f      	mov	r7, r1
 800cbaa:	e7ac      	b.n	800cb06 <_dtoa_r+0x5c6>
 800cbac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cbb0:	9d00      	ldr	r5, [sp, #0]
 800cbb2:	4642      	mov	r2, r8
 800cbb4:	464b      	mov	r3, r9
 800cbb6:	4630      	mov	r0, r6
 800cbb8:	4639      	mov	r1, r7
 800cbba:	f7f3 fe4f 	bl	800085c <__aeabi_ddiv>
 800cbbe:	f7f3 ffd3 	bl	8000b68 <__aeabi_d2iz>
 800cbc2:	9002      	str	r0, [sp, #8]
 800cbc4:	f7f3 fcb6 	bl	8000534 <__aeabi_i2d>
 800cbc8:	4642      	mov	r2, r8
 800cbca:	464b      	mov	r3, r9
 800cbcc:	f7f3 fd1c 	bl	8000608 <__aeabi_dmul>
 800cbd0:	4602      	mov	r2, r0
 800cbd2:	460b      	mov	r3, r1
 800cbd4:	4630      	mov	r0, r6
 800cbd6:	4639      	mov	r1, r7
 800cbd8:	f7f3 fb5e 	bl	8000298 <__aeabi_dsub>
 800cbdc:	9e02      	ldr	r6, [sp, #8]
 800cbde:	9f01      	ldr	r7, [sp, #4]
 800cbe0:	3630      	adds	r6, #48	; 0x30
 800cbe2:	f805 6b01 	strb.w	r6, [r5], #1
 800cbe6:	9e00      	ldr	r6, [sp, #0]
 800cbe8:	1bae      	subs	r6, r5, r6
 800cbea:	42b7      	cmp	r7, r6
 800cbec:	4602      	mov	r2, r0
 800cbee:	460b      	mov	r3, r1
 800cbf0:	d137      	bne.n	800cc62 <_dtoa_r+0x722>
 800cbf2:	f7f3 fb53 	bl	800029c <__adddf3>
 800cbf6:	4642      	mov	r2, r8
 800cbf8:	464b      	mov	r3, r9
 800cbfa:	4606      	mov	r6, r0
 800cbfc:	460f      	mov	r7, r1
 800cbfe:	f7f3 ff93 	bl	8000b28 <__aeabi_dcmpgt>
 800cc02:	b9c8      	cbnz	r0, 800cc38 <_dtoa_r+0x6f8>
 800cc04:	4642      	mov	r2, r8
 800cc06:	464b      	mov	r3, r9
 800cc08:	4630      	mov	r0, r6
 800cc0a:	4639      	mov	r1, r7
 800cc0c:	f7f3 ff64 	bl	8000ad8 <__aeabi_dcmpeq>
 800cc10:	b110      	cbz	r0, 800cc18 <_dtoa_r+0x6d8>
 800cc12:	9b02      	ldr	r3, [sp, #8]
 800cc14:	07d9      	lsls	r1, r3, #31
 800cc16:	d40f      	bmi.n	800cc38 <_dtoa_r+0x6f8>
 800cc18:	4620      	mov	r0, r4
 800cc1a:	4659      	mov	r1, fp
 800cc1c:	f000 fad6 	bl	800d1cc <_Bfree>
 800cc20:	2300      	movs	r3, #0
 800cc22:	702b      	strb	r3, [r5, #0]
 800cc24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cc26:	f10a 0001 	add.w	r0, sl, #1
 800cc2a:	6018      	str	r0, [r3, #0]
 800cc2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	f43f acd8 	beq.w	800c5e4 <_dtoa_r+0xa4>
 800cc34:	601d      	str	r5, [r3, #0]
 800cc36:	e4d5      	b.n	800c5e4 <_dtoa_r+0xa4>
 800cc38:	f8cd a01c 	str.w	sl, [sp, #28]
 800cc3c:	462b      	mov	r3, r5
 800cc3e:	461d      	mov	r5, r3
 800cc40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc44:	2a39      	cmp	r2, #57	; 0x39
 800cc46:	d108      	bne.n	800cc5a <_dtoa_r+0x71a>
 800cc48:	9a00      	ldr	r2, [sp, #0]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d1f7      	bne.n	800cc3e <_dtoa_r+0x6fe>
 800cc4e:	9a07      	ldr	r2, [sp, #28]
 800cc50:	9900      	ldr	r1, [sp, #0]
 800cc52:	3201      	adds	r2, #1
 800cc54:	9207      	str	r2, [sp, #28]
 800cc56:	2230      	movs	r2, #48	; 0x30
 800cc58:	700a      	strb	r2, [r1, #0]
 800cc5a:	781a      	ldrb	r2, [r3, #0]
 800cc5c:	3201      	adds	r2, #1
 800cc5e:	701a      	strb	r2, [r3, #0]
 800cc60:	e78c      	b.n	800cb7c <_dtoa_r+0x63c>
 800cc62:	4b7f      	ldr	r3, [pc, #508]	; (800ce60 <_dtoa_r+0x920>)
 800cc64:	2200      	movs	r2, #0
 800cc66:	f7f3 fccf 	bl	8000608 <__aeabi_dmul>
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	4606      	mov	r6, r0
 800cc70:	460f      	mov	r7, r1
 800cc72:	f7f3 ff31 	bl	8000ad8 <__aeabi_dcmpeq>
 800cc76:	2800      	cmp	r0, #0
 800cc78:	d09b      	beq.n	800cbb2 <_dtoa_r+0x672>
 800cc7a:	e7cd      	b.n	800cc18 <_dtoa_r+0x6d8>
 800cc7c:	9a08      	ldr	r2, [sp, #32]
 800cc7e:	2a00      	cmp	r2, #0
 800cc80:	f000 80c4 	beq.w	800ce0c <_dtoa_r+0x8cc>
 800cc84:	9a05      	ldr	r2, [sp, #20]
 800cc86:	2a01      	cmp	r2, #1
 800cc88:	f300 80a8 	bgt.w	800cddc <_dtoa_r+0x89c>
 800cc8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cc8e:	2a00      	cmp	r2, #0
 800cc90:	f000 80a0 	beq.w	800cdd4 <_dtoa_r+0x894>
 800cc94:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cc98:	9e06      	ldr	r6, [sp, #24]
 800cc9a:	4645      	mov	r5, r8
 800cc9c:	9a04      	ldr	r2, [sp, #16]
 800cc9e:	2101      	movs	r1, #1
 800cca0:	441a      	add	r2, r3
 800cca2:	4620      	mov	r0, r4
 800cca4:	4498      	add	r8, r3
 800cca6:	9204      	str	r2, [sp, #16]
 800cca8:	f000 fb4c 	bl	800d344 <__i2b>
 800ccac:	4607      	mov	r7, r0
 800ccae:	2d00      	cmp	r5, #0
 800ccb0:	dd0b      	ble.n	800ccca <_dtoa_r+0x78a>
 800ccb2:	9b04      	ldr	r3, [sp, #16]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	dd08      	ble.n	800ccca <_dtoa_r+0x78a>
 800ccb8:	42ab      	cmp	r3, r5
 800ccba:	9a04      	ldr	r2, [sp, #16]
 800ccbc:	bfa8      	it	ge
 800ccbe:	462b      	movge	r3, r5
 800ccc0:	eba8 0803 	sub.w	r8, r8, r3
 800ccc4:	1aed      	subs	r5, r5, r3
 800ccc6:	1ad3      	subs	r3, r2, r3
 800ccc8:	9304      	str	r3, [sp, #16]
 800ccca:	9b06      	ldr	r3, [sp, #24]
 800cccc:	b1fb      	cbz	r3, 800cd0e <_dtoa_r+0x7ce>
 800ccce:	9b08      	ldr	r3, [sp, #32]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	f000 809f 	beq.w	800ce14 <_dtoa_r+0x8d4>
 800ccd6:	2e00      	cmp	r6, #0
 800ccd8:	dd11      	ble.n	800ccfe <_dtoa_r+0x7be>
 800ccda:	4639      	mov	r1, r7
 800ccdc:	4632      	mov	r2, r6
 800ccde:	4620      	mov	r0, r4
 800cce0:	f000 fbec 	bl	800d4bc <__pow5mult>
 800cce4:	465a      	mov	r2, fp
 800cce6:	4601      	mov	r1, r0
 800cce8:	4607      	mov	r7, r0
 800ccea:	4620      	mov	r0, r4
 800ccec:	f000 fb40 	bl	800d370 <__multiply>
 800ccf0:	4659      	mov	r1, fp
 800ccf2:	9007      	str	r0, [sp, #28]
 800ccf4:	4620      	mov	r0, r4
 800ccf6:	f000 fa69 	bl	800d1cc <_Bfree>
 800ccfa:	9b07      	ldr	r3, [sp, #28]
 800ccfc:	469b      	mov	fp, r3
 800ccfe:	9b06      	ldr	r3, [sp, #24]
 800cd00:	1b9a      	subs	r2, r3, r6
 800cd02:	d004      	beq.n	800cd0e <_dtoa_r+0x7ce>
 800cd04:	4659      	mov	r1, fp
 800cd06:	4620      	mov	r0, r4
 800cd08:	f000 fbd8 	bl	800d4bc <__pow5mult>
 800cd0c:	4683      	mov	fp, r0
 800cd0e:	2101      	movs	r1, #1
 800cd10:	4620      	mov	r0, r4
 800cd12:	f000 fb17 	bl	800d344 <__i2b>
 800cd16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	4606      	mov	r6, r0
 800cd1c:	dd7c      	ble.n	800ce18 <_dtoa_r+0x8d8>
 800cd1e:	461a      	mov	r2, r3
 800cd20:	4601      	mov	r1, r0
 800cd22:	4620      	mov	r0, r4
 800cd24:	f000 fbca 	bl	800d4bc <__pow5mult>
 800cd28:	9b05      	ldr	r3, [sp, #20]
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	4606      	mov	r6, r0
 800cd2e:	dd76      	ble.n	800ce1e <_dtoa_r+0x8de>
 800cd30:	2300      	movs	r3, #0
 800cd32:	9306      	str	r3, [sp, #24]
 800cd34:	6933      	ldr	r3, [r6, #16]
 800cd36:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cd3a:	6918      	ldr	r0, [r3, #16]
 800cd3c:	f000 fab2 	bl	800d2a4 <__hi0bits>
 800cd40:	f1c0 0020 	rsb	r0, r0, #32
 800cd44:	9b04      	ldr	r3, [sp, #16]
 800cd46:	4418      	add	r0, r3
 800cd48:	f010 001f 	ands.w	r0, r0, #31
 800cd4c:	f000 8086 	beq.w	800ce5c <_dtoa_r+0x91c>
 800cd50:	f1c0 0320 	rsb	r3, r0, #32
 800cd54:	2b04      	cmp	r3, #4
 800cd56:	dd7f      	ble.n	800ce58 <_dtoa_r+0x918>
 800cd58:	f1c0 001c 	rsb	r0, r0, #28
 800cd5c:	9b04      	ldr	r3, [sp, #16]
 800cd5e:	4403      	add	r3, r0
 800cd60:	4480      	add	r8, r0
 800cd62:	4405      	add	r5, r0
 800cd64:	9304      	str	r3, [sp, #16]
 800cd66:	f1b8 0f00 	cmp.w	r8, #0
 800cd6a:	dd05      	ble.n	800cd78 <_dtoa_r+0x838>
 800cd6c:	4659      	mov	r1, fp
 800cd6e:	4642      	mov	r2, r8
 800cd70:	4620      	mov	r0, r4
 800cd72:	f000 fbfd 	bl	800d570 <__lshift>
 800cd76:	4683      	mov	fp, r0
 800cd78:	9b04      	ldr	r3, [sp, #16]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	dd05      	ble.n	800cd8a <_dtoa_r+0x84a>
 800cd7e:	4631      	mov	r1, r6
 800cd80:	461a      	mov	r2, r3
 800cd82:	4620      	mov	r0, r4
 800cd84:	f000 fbf4 	bl	800d570 <__lshift>
 800cd88:	4606      	mov	r6, r0
 800cd8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d069      	beq.n	800ce64 <_dtoa_r+0x924>
 800cd90:	4631      	mov	r1, r6
 800cd92:	4658      	mov	r0, fp
 800cd94:	f000 fc58 	bl	800d648 <__mcmp>
 800cd98:	2800      	cmp	r0, #0
 800cd9a:	da63      	bge.n	800ce64 <_dtoa_r+0x924>
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	4659      	mov	r1, fp
 800cda0:	220a      	movs	r2, #10
 800cda2:	4620      	mov	r0, r4
 800cda4:	f000 fa34 	bl	800d210 <__multadd>
 800cda8:	9b08      	ldr	r3, [sp, #32]
 800cdaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cdae:	4683      	mov	fp, r0
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	f000 818f 	beq.w	800d0d4 <_dtoa_r+0xb94>
 800cdb6:	4639      	mov	r1, r7
 800cdb8:	2300      	movs	r3, #0
 800cdba:	220a      	movs	r2, #10
 800cdbc:	4620      	mov	r0, r4
 800cdbe:	f000 fa27 	bl	800d210 <__multadd>
 800cdc2:	f1b9 0f00 	cmp.w	r9, #0
 800cdc6:	4607      	mov	r7, r0
 800cdc8:	f300 808e 	bgt.w	800cee8 <_dtoa_r+0x9a8>
 800cdcc:	9b05      	ldr	r3, [sp, #20]
 800cdce:	2b02      	cmp	r3, #2
 800cdd0:	dc50      	bgt.n	800ce74 <_dtoa_r+0x934>
 800cdd2:	e089      	b.n	800cee8 <_dtoa_r+0x9a8>
 800cdd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cdd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cdda:	e75d      	b.n	800cc98 <_dtoa_r+0x758>
 800cddc:	9b01      	ldr	r3, [sp, #4]
 800cdde:	1e5e      	subs	r6, r3, #1
 800cde0:	9b06      	ldr	r3, [sp, #24]
 800cde2:	42b3      	cmp	r3, r6
 800cde4:	bfbf      	itttt	lt
 800cde6:	9b06      	ldrlt	r3, [sp, #24]
 800cde8:	9606      	strlt	r6, [sp, #24]
 800cdea:	1af2      	sublt	r2, r6, r3
 800cdec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800cdee:	bfb6      	itet	lt
 800cdf0:	189b      	addlt	r3, r3, r2
 800cdf2:	1b9e      	subge	r6, r3, r6
 800cdf4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800cdf6:	9b01      	ldr	r3, [sp, #4]
 800cdf8:	bfb8      	it	lt
 800cdfa:	2600      	movlt	r6, #0
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	bfb5      	itete	lt
 800ce00:	eba8 0503 	sublt.w	r5, r8, r3
 800ce04:	9b01      	ldrge	r3, [sp, #4]
 800ce06:	2300      	movlt	r3, #0
 800ce08:	4645      	movge	r5, r8
 800ce0a:	e747      	b.n	800cc9c <_dtoa_r+0x75c>
 800ce0c:	9e06      	ldr	r6, [sp, #24]
 800ce0e:	9f08      	ldr	r7, [sp, #32]
 800ce10:	4645      	mov	r5, r8
 800ce12:	e74c      	b.n	800ccae <_dtoa_r+0x76e>
 800ce14:	9a06      	ldr	r2, [sp, #24]
 800ce16:	e775      	b.n	800cd04 <_dtoa_r+0x7c4>
 800ce18:	9b05      	ldr	r3, [sp, #20]
 800ce1a:	2b01      	cmp	r3, #1
 800ce1c:	dc18      	bgt.n	800ce50 <_dtoa_r+0x910>
 800ce1e:	9b02      	ldr	r3, [sp, #8]
 800ce20:	b9b3      	cbnz	r3, 800ce50 <_dtoa_r+0x910>
 800ce22:	9b03      	ldr	r3, [sp, #12]
 800ce24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce28:	b9a3      	cbnz	r3, 800ce54 <_dtoa_r+0x914>
 800ce2a:	9b03      	ldr	r3, [sp, #12]
 800ce2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ce30:	0d1b      	lsrs	r3, r3, #20
 800ce32:	051b      	lsls	r3, r3, #20
 800ce34:	b12b      	cbz	r3, 800ce42 <_dtoa_r+0x902>
 800ce36:	9b04      	ldr	r3, [sp, #16]
 800ce38:	3301      	adds	r3, #1
 800ce3a:	9304      	str	r3, [sp, #16]
 800ce3c:	f108 0801 	add.w	r8, r8, #1
 800ce40:	2301      	movs	r3, #1
 800ce42:	9306      	str	r3, [sp, #24]
 800ce44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	f47f af74 	bne.w	800cd34 <_dtoa_r+0x7f4>
 800ce4c:	2001      	movs	r0, #1
 800ce4e:	e779      	b.n	800cd44 <_dtoa_r+0x804>
 800ce50:	2300      	movs	r3, #0
 800ce52:	e7f6      	b.n	800ce42 <_dtoa_r+0x902>
 800ce54:	9b02      	ldr	r3, [sp, #8]
 800ce56:	e7f4      	b.n	800ce42 <_dtoa_r+0x902>
 800ce58:	d085      	beq.n	800cd66 <_dtoa_r+0x826>
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	301c      	adds	r0, #28
 800ce5e:	e77d      	b.n	800cd5c <_dtoa_r+0x81c>
 800ce60:	40240000 	.word	0x40240000
 800ce64:	9b01      	ldr	r3, [sp, #4]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	dc38      	bgt.n	800cedc <_dtoa_r+0x99c>
 800ce6a:	9b05      	ldr	r3, [sp, #20]
 800ce6c:	2b02      	cmp	r3, #2
 800ce6e:	dd35      	ble.n	800cedc <_dtoa_r+0x99c>
 800ce70:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ce74:	f1b9 0f00 	cmp.w	r9, #0
 800ce78:	d10d      	bne.n	800ce96 <_dtoa_r+0x956>
 800ce7a:	4631      	mov	r1, r6
 800ce7c:	464b      	mov	r3, r9
 800ce7e:	2205      	movs	r2, #5
 800ce80:	4620      	mov	r0, r4
 800ce82:	f000 f9c5 	bl	800d210 <__multadd>
 800ce86:	4601      	mov	r1, r0
 800ce88:	4606      	mov	r6, r0
 800ce8a:	4658      	mov	r0, fp
 800ce8c:	f000 fbdc 	bl	800d648 <__mcmp>
 800ce90:	2800      	cmp	r0, #0
 800ce92:	f73f adbd 	bgt.w	800ca10 <_dtoa_r+0x4d0>
 800ce96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce98:	9d00      	ldr	r5, [sp, #0]
 800ce9a:	ea6f 0a03 	mvn.w	sl, r3
 800ce9e:	f04f 0800 	mov.w	r8, #0
 800cea2:	4631      	mov	r1, r6
 800cea4:	4620      	mov	r0, r4
 800cea6:	f000 f991 	bl	800d1cc <_Bfree>
 800ceaa:	2f00      	cmp	r7, #0
 800ceac:	f43f aeb4 	beq.w	800cc18 <_dtoa_r+0x6d8>
 800ceb0:	f1b8 0f00 	cmp.w	r8, #0
 800ceb4:	d005      	beq.n	800cec2 <_dtoa_r+0x982>
 800ceb6:	45b8      	cmp	r8, r7
 800ceb8:	d003      	beq.n	800cec2 <_dtoa_r+0x982>
 800ceba:	4641      	mov	r1, r8
 800cebc:	4620      	mov	r0, r4
 800cebe:	f000 f985 	bl	800d1cc <_Bfree>
 800cec2:	4639      	mov	r1, r7
 800cec4:	4620      	mov	r0, r4
 800cec6:	f000 f981 	bl	800d1cc <_Bfree>
 800ceca:	e6a5      	b.n	800cc18 <_dtoa_r+0x6d8>
 800cecc:	2600      	movs	r6, #0
 800cece:	4637      	mov	r7, r6
 800ced0:	e7e1      	b.n	800ce96 <_dtoa_r+0x956>
 800ced2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ced4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ced8:	4637      	mov	r7, r6
 800ceda:	e599      	b.n	800ca10 <_dtoa_r+0x4d0>
 800cedc:	9b08      	ldr	r3, [sp, #32]
 800cede:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	f000 80fd 	beq.w	800d0e2 <_dtoa_r+0xba2>
 800cee8:	2d00      	cmp	r5, #0
 800ceea:	dd05      	ble.n	800cef8 <_dtoa_r+0x9b8>
 800ceec:	4639      	mov	r1, r7
 800ceee:	462a      	mov	r2, r5
 800cef0:	4620      	mov	r0, r4
 800cef2:	f000 fb3d 	bl	800d570 <__lshift>
 800cef6:	4607      	mov	r7, r0
 800cef8:	9b06      	ldr	r3, [sp, #24]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d05c      	beq.n	800cfb8 <_dtoa_r+0xa78>
 800cefe:	6879      	ldr	r1, [r7, #4]
 800cf00:	4620      	mov	r0, r4
 800cf02:	f000 f923 	bl	800d14c <_Balloc>
 800cf06:	4605      	mov	r5, r0
 800cf08:	b928      	cbnz	r0, 800cf16 <_dtoa_r+0x9d6>
 800cf0a:	4b80      	ldr	r3, [pc, #512]	; (800d10c <_dtoa_r+0xbcc>)
 800cf0c:	4602      	mov	r2, r0
 800cf0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cf12:	f7ff bb2e 	b.w	800c572 <_dtoa_r+0x32>
 800cf16:	693a      	ldr	r2, [r7, #16]
 800cf18:	3202      	adds	r2, #2
 800cf1a:	0092      	lsls	r2, r2, #2
 800cf1c:	f107 010c 	add.w	r1, r7, #12
 800cf20:	300c      	adds	r0, #12
 800cf22:	f000 f905 	bl	800d130 <memcpy>
 800cf26:	2201      	movs	r2, #1
 800cf28:	4629      	mov	r1, r5
 800cf2a:	4620      	mov	r0, r4
 800cf2c:	f000 fb20 	bl	800d570 <__lshift>
 800cf30:	9b00      	ldr	r3, [sp, #0]
 800cf32:	3301      	adds	r3, #1
 800cf34:	9301      	str	r3, [sp, #4]
 800cf36:	9b00      	ldr	r3, [sp, #0]
 800cf38:	444b      	add	r3, r9
 800cf3a:	9307      	str	r3, [sp, #28]
 800cf3c:	9b02      	ldr	r3, [sp, #8]
 800cf3e:	f003 0301 	and.w	r3, r3, #1
 800cf42:	46b8      	mov	r8, r7
 800cf44:	9306      	str	r3, [sp, #24]
 800cf46:	4607      	mov	r7, r0
 800cf48:	9b01      	ldr	r3, [sp, #4]
 800cf4a:	4631      	mov	r1, r6
 800cf4c:	3b01      	subs	r3, #1
 800cf4e:	4658      	mov	r0, fp
 800cf50:	9302      	str	r3, [sp, #8]
 800cf52:	f7ff fa67 	bl	800c424 <quorem>
 800cf56:	4603      	mov	r3, r0
 800cf58:	3330      	adds	r3, #48	; 0x30
 800cf5a:	9004      	str	r0, [sp, #16]
 800cf5c:	4641      	mov	r1, r8
 800cf5e:	4658      	mov	r0, fp
 800cf60:	9308      	str	r3, [sp, #32]
 800cf62:	f000 fb71 	bl	800d648 <__mcmp>
 800cf66:	463a      	mov	r2, r7
 800cf68:	4681      	mov	r9, r0
 800cf6a:	4631      	mov	r1, r6
 800cf6c:	4620      	mov	r0, r4
 800cf6e:	f000 fb87 	bl	800d680 <__mdiff>
 800cf72:	68c2      	ldr	r2, [r0, #12]
 800cf74:	9b08      	ldr	r3, [sp, #32]
 800cf76:	4605      	mov	r5, r0
 800cf78:	bb02      	cbnz	r2, 800cfbc <_dtoa_r+0xa7c>
 800cf7a:	4601      	mov	r1, r0
 800cf7c:	4658      	mov	r0, fp
 800cf7e:	f000 fb63 	bl	800d648 <__mcmp>
 800cf82:	9b08      	ldr	r3, [sp, #32]
 800cf84:	4602      	mov	r2, r0
 800cf86:	4629      	mov	r1, r5
 800cf88:	4620      	mov	r0, r4
 800cf8a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800cf8e:	f000 f91d 	bl	800d1cc <_Bfree>
 800cf92:	9b05      	ldr	r3, [sp, #20]
 800cf94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf96:	9d01      	ldr	r5, [sp, #4]
 800cf98:	ea43 0102 	orr.w	r1, r3, r2
 800cf9c:	9b06      	ldr	r3, [sp, #24]
 800cf9e:	430b      	orrs	r3, r1
 800cfa0:	9b08      	ldr	r3, [sp, #32]
 800cfa2:	d10d      	bne.n	800cfc0 <_dtoa_r+0xa80>
 800cfa4:	2b39      	cmp	r3, #57	; 0x39
 800cfa6:	d029      	beq.n	800cffc <_dtoa_r+0xabc>
 800cfa8:	f1b9 0f00 	cmp.w	r9, #0
 800cfac:	dd01      	ble.n	800cfb2 <_dtoa_r+0xa72>
 800cfae:	9b04      	ldr	r3, [sp, #16]
 800cfb0:	3331      	adds	r3, #49	; 0x31
 800cfb2:	9a02      	ldr	r2, [sp, #8]
 800cfb4:	7013      	strb	r3, [r2, #0]
 800cfb6:	e774      	b.n	800cea2 <_dtoa_r+0x962>
 800cfb8:	4638      	mov	r0, r7
 800cfba:	e7b9      	b.n	800cf30 <_dtoa_r+0x9f0>
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	e7e2      	b.n	800cf86 <_dtoa_r+0xa46>
 800cfc0:	f1b9 0f00 	cmp.w	r9, #0
 800cfc4:	db06      	blt.n	800cfd4 <_dtoa_r+0xa94>
 800cfc6:	9905      	ldr	r1, [sp, #20]
 800cfc8:	ea41 0909 	orr.w	r9, r1, r9
 800cfcc:	9906      	ldr	r1, [sp, #24]
 800cfce:	ea59 0101 	orrs.w	r1, r9, r1
 800cfd2:	d120      	bne.n	800d016 <_dtoa_r+0xad6>
 800cfd4:	2a00      	cmp	r2, #0
 800cfd6:	ddec      	ble.n	800cfb2 <_dtoa_r+0xa72>
 800cfd8:	4659      	mov	r1, fp
 800cfda:	2201      	movs	r2, #1
 800cfdc:	4620      	mov	r0, r4
 800cfde:	9301      	str	r3, [sp, #4]
 800cfe0:	f000 fac6 	bl	800d570 <__lshift>
 800cfe4:	4631      	mov	r1, r6
 800cfe6:	4683      	mov	fp, r0
 800cfe8:	f000 fb2e 	bl	800d648 <__mcmp>
 800cfec:	2800      	cmp	r0, #0
 800cfee:	9b01      	ldr	r3, [sp, #4]
 800cff0:	dc02      	bgt.n	800cff8 <_dtoa_r+0xab8>
 800cff2:	d1de      	bne.n	800cfb2 <_dtoa_r+0xa72>
 800cff4:	07da      	lsls	r2, r3, #31
 800cff6:	d5dc      	bpl.n	800cfb2 <_dtoa_r+0xa72>
 800cff8:	2b39      	cmp	r3, #57	; 0x39
 800cffa:	d1d8      	bne.n	800cfae <_dtoa_r+0xa6e>
 800cffc:	9a02      	ldr	r2, [sp, #8]
 800cffe:	2339      	movs	r3, #57	; 0x39
 800d000:	7013      	strb	r3, [r2, #0]
 800d002:	462b      	mov	r3, r5
 800d004:	461d      	mov	r5, r3
 800d006:	3b01      	subs	r3, #1
 800d008:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d00c:	2a39      	cmp	r2, #57	; 0x39
 800d00e:	d050      	beq.n	800d0b2 <_dtoa_r+0xb72>
 800d010:	3201      	adds	r2, #1
 800d012:	701a      	strb	r2, [r3, #0]
 800d014:	e745      	b.n	800cea2 <_dtoa_r+0x962>
 800d016:	2a00      	cmp	r2, #0
 800d018:	dd03      	ble.n	800d022 <_dtoa_r+0xae2>
 800d01a:	2b39      	cmp	r3, #57	; 0x39
 800d01c:	d0ee      	beq.n	800cffc <_dtoa_r+0xabc>
 800d01e:	3301      	adds	r3, #1
 800d020:	e7c7      	b.n	800cfb2 <_dtoa_r+0xa72>
 800d022:	9a01      	ldr	r2, [sp, #4]
 800d024:	9907      	ldr	r1, [sp, #28]
 800d026:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d02a:	428a      	cmp	r2, r1
 800d02c:	d02a      	beq.n	800d084 <_dtoa_r+0xb44>
 800d02e:	4659      	mov	r1, fp
 800d030:	2300      	movs	r3, #0
 800d032:	220a      	movs	r2, #10
 800d034:	4620      	mov	r0, r4
 800d036:	f000 f8eb 	bl	800d210 <__multadd>
 800d03a:	45b8      	cmp	r8, r7
 800d03c:	4683      	mov	fp, r0
 800d03e:	f04f 0300 	mov.w	r3, #0
 800d042:	f04f 020a 	mov.w	r2, #10
 800d046:	4641      	mov	r1, r8
 800d048:	4620      	mov	r0, r4
 800d04a:	d107      	bne.n	800d05c <_dtoa_r+0xb1c>
 800d04c:	f000 f8e0 	bl	800d210 <__multadd>
 800d050:	4680      	mov	r8, r0
 800d052:	4607      	mov	r7, r0
 800d054:	9b01      	ldr	r3, [sp, #4]
 800d056:	3301      	adds	r3, #1
 800d058:	9301      	str	r3, [sp, #4]
 800d05a:	e775      	b.n	800cf48 <_dtoa_r+0xa08>
 800d05c:	f000 f8d8 	bl	800d210 <__multadd>
 800d060:	4639      	mov	r1, r7
 800d062:	4680      	mov	r8, r0
 800d064:	2300      	movs	r3, #0
 800d066:	220a      	movs	r2, #10
 800d068:	4620      	mov	r0, r4
 800d06a:	f000 f8d1 	bl	800d210 <__multadd>
 800d06e:	4607      	mov	r7, r0
 800d070:	e7f0      	b.n	800d054 <_dtoa_r+0xb14>
 800d072:	f1b9 0f00 	cmp.w	r9, #0
 800d076:	9a00      	ldr	r2, [sp, #0]
 800d078:	bfcc      	ite	gt
 800d07a:	464d      	movgt	r5, r9
 800d07c:	2501      	movle	r5, #1
 800d07e:	4415      	add	r5, r2
 800d080:	f04f 0800 	mov.w	r8, #0
 800d084:	4659      	mov	r1, fp
 800d086:	2201      	movs	r2, #1
 800d088:	4620      	mov	r0, r4
 800d08a:	9301      	str	r3, [sp, #4]
 800d08c:	f000 fa70 	bl	800d570 <__lshift>
 800d090:	4631      	mov	r1, r6
 800d092:	4683      	mov	fp, r0
 800d094:	f000 fad8 	bl	800d648 <__mcmp>
 800d098:	2800      	cmp	r0, #0
 800d09a:	dcb2      	bgt.n	800d002 <_dtoa_r+0xac2>
 800d09c:	d102      	bne.n	800d0a4 <_dtoa_r+0xb64>
 800d09e:	9b01      	ldr	r3, [sp, #4]
 800d0a0:	07db      	lsls	r3, r3, #31
 800d0a2:	d4ae      	bmi.n	800d002 <_dtoa_r+0xac2>
 800d0a4:	462b      	mov	r3, r5
 800d0a6:	461d      	mov	r5, r3
 800d0a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d0ac:	2a30      	cmp	r2, #48	; 0x30
 800d0ae:	d0fa      	beq.n	800d0a6 <_dtoa_r+0xb66>
 800d0b0:	e6f7      	b.n	800cea2 <_dtoa_r+0x962>
 800d0b2:	9a00      	ldr	r2, [sp, #0]
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d1a5      	bne.n	800d004 <_dtoa_r+0xac4>
 800d0b8:	f10a 0a01 	add.w	sl, sl, #1
 800d0bc:	2331      	movs	r3, #49	; 0x31
 800d0be:	e779      	b.n	800cfb4 <_dtoa_r+0xa74>
 800d0c0:	4b13      	ldr	r3, [pc, #76]	; (800d110 <_dtoa_r+0xbd0>)
 800d0c2:	f7ff baaf 	b.w	800c624 <_dtoa_r+0xe4>
 800d0c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	f47f aa86 	bne.w	800c5da <_dtoa_r+0x9a>
 800d0ce:	4b11      	ldr	r3, [pc, #68]	; (800d114 <_dtoa_r+0xbd4>)
 800d0d0:	f7ff baa8 	b.w	800c624 <_dtoa_r+0xe4>
 800d0d4:	f1b9 0f00 	cmp.w	r9, #0
 800d0d8:	dc03      	bgt.n	800d0e2 <_dtoa_r+0xba2>
 800d0da:	9b05      	ldr	r3, [sp, #20]
 800d0dc:	2b02      	cmp	r3, #2
 800d0de:	f73f aec9 	bgt.w	800ce74 <_dtoa_r+0x934>
 800d0e2:	9d00      	ldr	r5, [sp, #0]
 800d0e4:	4631      	mov	r1, r6
 800d0e6:	4658      	mov	r0, fp
 800d0e8:	f7ff f99c 	bl	800c424 <quorem>
 800d0ec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d0f0:	f805 3b01 	strb.w	r3, [r5], #1
 800d0f4:	9a00      	ldr	r2, [sp, #0]
 800d0f6:	1aaa      	subs	r2, r5, r2
 800d0f8:	4591      	cmp	r9, r2
 800d0fa:	ddba      	ble.n	800d072 <_dtoa_r+0xb32>
 800d0fc:	4659      	mov	r1, fp
 800d0fe:	2300      	movs	r3, #0
 800d100:	220a      	movs	r2, #10
 800d102:	4620      	mov	r0, r4
 800d104:	f000 f884 	bl	800d210 <__multadd>
 800d108:	4683      	mov	fp, r0
 800d10a:	e7eb      	b.n	800d0e4 <_dtoa_r+0xba4>
 800d10c:	0800eaf3 	.word	0x0800eaf3
 800d110:	0800ea4c 	.word	0x0800ea4c
 800d114:	0800ea70 	.word	0x0800ea70

0800d118 <_localeconv_r>:
 800d118:	4800      	ldr	r0, [pc, #0]	; (800d11c <_localeconv_r+0x4>)
 800d11a:	4770      	bx	lr
 800d11c:	200002d4 	.word	0x200002d4

0800d120 <malloc>:
 800d120:	4b02      	ldr	r3, [pc, #8]	; (800d12c <malloc+0xc>)
 800d122:	4601      	mov	r1, r0
 800d124:	6818      	ldr	r0, [r3, #0]
 800d126:	f000 bbef 	b.w	800d908 <_malloc_r>
 800d12a:	bf00      	nop
 800d12c:	20000180 	.word	0x20000180

0800d130 <memcpy>:
 800d130:	440a      	add	r2, r1
 800d132:	4291      	cmp	r1, r2
 800d134:	f100 33ff 	add.w	r3, r0, #4294967295
 800d138:	d100      	bne.n	800d13c <memcpy+0xc>
 800d13a:	4770      	bx	lr
 800d13c:	b510      	push	{r4, lr}
 800d13e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d142:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d146:	4291      	cmp	r1, r2
 800d148:	d1f9      	bne.n	800d13e <memcpy+0xe>
 800d14a:	bd10      	pop	{r4, pc}

0800d14c <_Balloc>:
 800d14c:	b570      	push	{r4, r5, r6, lr}
 800d14e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d150:	4604      	mov	r4, r0
 800d152:	460d      	mov	r5, r1
 800d154:	b976      	cbnz	r6, 800d174 <_Balloc+0x28>
 800d156:	2010      	movs	r0, #16
 800d158:	f7ff ffe2 	bl	800d120 <malloc>
 800d15c:	4602      	mov	r2, r0
 800d15e:	6260      	str	r0, [r4, #36]	; 0x24
 800d160:	b920      	cbnz	r0, 800d16c <_Balloc+0x20>
 800d162:	4b18      	ldr	r3, [pc, #96]	; (800d1c4 <_Balloc+0x78>)
 800d164:	4818      	ldr	r0, [pc, #96]	; (800d1c8 <_Balloc+0x7c>)
 800d166:	2166      	movs	r1, #102	; 0x66
 800d168:	f000 fd94 	bl	800dc94 <__assert_func>
 800d16c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d170:	6006      	str	r6, [r0, #0]
 800d172:	60c6      	str	r6, [r0, #12]
 800d174:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d176:	68f3      	ldr	r3, [r6, #12]
 800d178:	b183      	cbz	r3, 800d19c <_Balloc+0x50>
 800d17a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d17c:	68db      	ldr	r3, [r3, #12]
 800d17e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d182:	b9b8      	cbnz	r0, 800d1b4 <_Balloc+0x68>
 800d184:	2101      	movs	r1, #1
 800d186:	fa01 f605 	lsl.w	r6, r1, r5
 800d18a:	1d72      	adds	r2, r6, #5
 800d18c:	0092      	lsls	r2, r2, #2
 800d18e:	4620      	mov	r0, r4
 800d190:	f000 fb5a 	bl	800d848 <_calloc_r>
 800d194:	b160      	cbz	r0, 800d1b0 <_Balloc+0x64>
 800d196:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d19a:	e00e      	b.n	800d1ba <_Balloc+0x6e>
 800d19c:	2221      	movs	r2, #33	; 0x21
 800d19e:	2104      	movs	r1, #4
 800d1a0:	4620      	mov	r0, r4
 800d1a2:	f000 fb51 	bl	800d848 <_calloc_r>
 800d1a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1a8:	60f0      	str	r0, [r6, #12]
 800d1aa:	68db      	ldr	r3, [r3, #12]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d1e4      	bne.n	800d17a <_Balloc+0x2e>
 800d1b0:	2000      	movs	r0, #0
 800d1b2:	bd70      	pop	{r4, r5, r6, pc}
 800d1b4:	6802      	ldr	r2, [r0, #0]
 800d1b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d1c0:	e7f7      	b.n	800d1b2 <_Balloc+0x66>
 800d1c2:	bf00      	nop
 800d1c4:	0800ea7d 	.word	0x0800ea7d
 800d1c8:	0800eb04 	.word	0x0800eb04

0800d1cc <_Bfree>:
 800d1cc:	b570      	push	{r4, r5, r6, lr}
 800d1ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d1d0:	4605      	mov	r5, r0
 800d1d2:	460c      	mov	r4, r1
 800d1d4:	b976      	cbnz	r6, 800d1f4 <_Bfree+0x28>
 800d1d6:	2010      	movs	r0, #16
 800d1d8:	f7ff ffa2 	bl	800d120 <malloc>
 800d1dc:	4602      	mov	r2, r0
 800d1de:	6268      	str	r0, [r5, #36]	; 0x24
 800d1e0:	b920      	cbnz	r0, 800d1ec <_Bfree+0x20>
 800d1e2:	4b09      	ldr	r3, [pc, #36]	; (800d208 <_Bfree+0x3c>)
 800d1e4:	4809      	ldr	r0, [pc, #36]	; (800d20c <_Bfree+0x40>)
 800d1e6:	218a      	movs	r1, #138	; 0x8a
 800d1e8:	f000 fd54 	bl	800dc94 <__assert_func>
 800d1ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d1f0:	6006      	str	r6, [r0, #0]
 800d1f2:	60c6      	str	r6, [r0, #12]
 800d1f4:	b13c      	cbz	r4, 800d206 <_Bfree+0x3a>
 800d1f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d1f8:	6862      	ldr	r2, [r4, #4]
 800d1fa:	68db      	ldr	r3, [r3, #12]
 800d1fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d200:	6021      	str	r1, [r4, #0]
 800d202:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d206:	bd70      	pop	{r4, r5, r6, pc}
 800d208:	0800ea7d 	.word	0x0800ea7d
 800d20c:	0800eb04 	.word	0x0800eb04

0800d210 <__multadd>:
 800d210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d214:	690e      	ldr	r6, [r1, #16]
 800d216:	4607      	mov	r7, r0
 800d218:	4698      	mov	r8, r3
 800d21a:	460c      	mov	r4, r1
 800d21c:	f101 0014 	add.w	r0, r1, #20
 800d220:	2300      	movs	r3, #0
 800d222:	6805      	ldr	r5, [r0, #0]
 800d224:	b2a9      	uxth	r1, r5
 800d226:	fb02 8101 	mla	r1, r2, r1, r8
 800d22a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d22e:	0c2d      	lsrs	r5, r5, #16
 800d230:	fb02 c505 	mla	r5, r2, r5, ip
 800d234:	b289      	uxth	r1, r1
 800d236:	3301      	adds	r3, #1
 800d238:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d23c:	429e      	cmp	r6, r3
 800d23e:	f840 1b04 	str.w	r1, [r0], #4
 800d242:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d246:	dcec      	bgt.n	800d222 <__multadd+0x12>
 800d248:	f1b8 0f00 	cmp.w	r8, #0
 800d24c:	d022      	beq.n	800d294 <__multadd+0x84>
 800d24e:	68a3      	ldr	r3, [r4, #8]
 800d250:	42b3      	cmp	r3, r6
 800d252:	dc19      	bgt.n	800d288 <__multadd+0x78>
 800d254:	6861      	ldr	r1, [r4, #4]
 800d256:	4638      	mov	r0, r7
 800d258:	3101      	adds	r1, #1
 800d25a:	f7ff ff77 	bl	800d14c <_Balloc>
 800d25e:	4605      	mov	r5, r0
 800d260:	b928      	cbnz	r0, 800d26e <__multadd+0x5e>
 800d262:	4602      	mov	r2, r0
 800d264:	4b0d      	ldr	r3, [pc, #52]	; (800d29c <__multadd+0x8c>)
 800d266:	480e      	ldr	r0, [pc, #56]	; (800d2a0 <__multadd+0x90>)
 800d268:	21b5      	movs	r1, #181	; 0xb5
 800d26a:	f000 fd13 	bl	800dc94 <__assert_func>
 800d26e:	6922      	ldr	r2, [r4, #16]
 800d270:	3202      	adds	r2, #2
 800d272:	f104 010c 	add.w	r1, r4, #12
 800d276:	0092      	lsls	r2, r2, #2
 800d278:	300c      	adds	r0, #12
 800d27a:	f7ff ff59 	bl	800d130 <memcpy>
 800d27e:	4621      	mov	r1, r4
 800d280:	4638      	mov	r0, r7
 800d282:	f7ff ffa3 	bl	800d1cc <_Bfree>
 800d286:	462c      	mov	r4, r5
 800d288:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d28c:	3601      	adds	r6, #1
 800d28e:	f8c3 8014 	str.w	r8, [r3, #20]
 800d292:	6126      	str	r6, [r4, #16]
 800d294:	4620      	mov	r0, r4
 800d296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d29a:	bf00      	nop
 800d29c:	0800eaf3 	.word	0x0800eaf3
 800d2a0:	0800eb04 	.word	0x0800eb04

0800d2a4 <__hi0bits>:
 800d2a4:	0c03      	lsrs	r3, r0, #16
 800d2a6:	041b      	lsls	r3, r3, #16
 800d2a8:	b9d3      	cbnz	r3, 800d2e0 <__hi0bits+0x3c>
 800d2aa:	0400      	lsls	r0, r0, #16
 800d2ac:	2310      	movs	r3, #16
 800d2ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d2b2:	bf04      	itt	eq
 800d2b4:	0200      	lsleq	r0, r0, #8
 800d2b6:	3308      	addeq	r3, #8
 800d2b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d2bc:	bf04      	itt	eq
 800d2be:	0100      	lsleq	r0, r0, #4
 800d2c0:	3304      	addeq	r3, #4
 800d2c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d2c6:	bf04      	itt	eq
 800d2c8:	0080      	lsleq	r0, r0, #2
 800d2ca:	3302      	addeq	r3, #2
 800d2cc:	2800      	cmp	r0, #0
 800d2ce:	db05      	blt.n	800d2dc <__hi0bits+0x38>
 800d2d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d2d4:	f103 0301 	add.w	r3, r3, #1
 800d2d8:	bf08      	it	eq
 800d2da:	2320      	moveq	r3, #32
 800d2dc:	4618      	mov	r0, r3
 800d2de:	4770      	bx	lr
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	e7e4      	b.n	800d2ae <__hi0bits+0xa>

0800d2e4 <__lo0bits>:
 800d2e4:	6803      	ldr	r3, [r0, #0]
 800d2e6:	f013 0207 	ands.w	r2, r3, #7
 800d2ea:	4601      	mov	r1, r0
 800d2ec:	d00b      	beq.n	800d306 <__lo0bits+0x22>
 800d2ee:	07da      	lsls	r2, r3, #31
 800d2f0:	d424      	bmi.n	800d33c <__lo0bits+0x58>
 800d2f2:	0798      	lsls	r0, r3, #30
 800d2f4:	bf49      	itett	mi
 800d2f6:	085b      	lsrmi	r3, r3, #1
 800d2f8:	089b      	lsrpl	r3, r3, #2
 800d2fa:	2001      	movmi	r0, #1
 800d2fc:	600b      	strmi	r3, [r1, #0]
 800d2fe:	bf5c      	itt	pl
 800d300:	600b      	strpl	r3, [r1, #0]
 800d302:	2002      	movpl	r0, #2
 800d304:	4770      	bx	lr
 800d306:	b298      	uxth	r0, r3
 800d308:	b9b0      	cbnz	r0, 800d338 <__lo0bits+0x54>
 800d30a:	0c1b      	lsrs	r3, r3, #16
 800d30c:	2010      	movs	r0, #16
 800d30e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d312:	bf04      	itt	eq
 800d314:	0a1b      	lsreq	r3, r3, #8
 800d316:	3008      	addeq	r0, #8
 800d318:	071a      	lsls	r2, r3, #28
 800d31a:	bf04      	itt	eq
 800d31c:	091b      	lsreq	r3, r3, #4
 800d31e:	3004      	addeq	r0, #4
 800d320:	079a      	lsls	r2, r3, #30
 800d322:	bf04      	itt	eq
 800d324:	089b      	lsreq	r3, r3, #2
 800d326:	3002      	addeq	r0, #2
 800d328:	07da      	lsls	r2, r3, #31
 800d32a:	d403      	bmi.n	800d334 <__lo0bits+0x50>
 800d32c:	085b      	lsrs	r3, r3, #1
 800d32e:	f100 0001 	add.w	r0, r0, #1
 800d332:	d005      	beq.n	800d340 <__lo0bits+0x5c>
 800d334:	600b      	str	r3, [r1, #0]
 800d336:	4770      	bx	lr
 800d338:	4610      	mov	r0, r2
 800d33a:	e7e8      	b.n	800d30e <__lo0bits+0x2a>
 800d33c:	2000      	movs	r0, #0
 800d33e:	4770      	bx	lr
 800d340:	2020      	movs	r0, #32
 800d342:	4770      	bx	lr

0800d344 <__i2b>:
 800d344:	b510      	push	{r4, lr}
 800d346:	460c      	mov	r4, r1
 800d348:	2101      	movs	r1, #1
 800d34a:	f7ff feff 	bl	800d14c <_Balloc>
 800d34e:	4602      	mov	r2, r0
 800d350:	b928      	cbnz	r0, 800d35e <__i2b+0x1a>
 800d352:	4b05      	ldr	r3, [pc, #20]	; (800d368 <__i2b+0x24>)
 800d354:	4805      	ldr	r0, [pc, #20]	; (800d36c <__i2b+0x28>)
 800d356:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d35a:	f000 fc9b 	bl	800dc94 <__assert_func>
 800d35e:	2301      	movs	r3, #1
 800d360:	6144      	str	r4, [r0, #20]
 800d362:	6103      	str	r3, [r0, #16]
 800d364:	bd10      	pop	{r4, pc}
 800d366:	bf00      	nop
 800d368:	0800eaf3 	.word	0x0800eaf3
 800d36c:	0800eb04 	.word	0x0800eb04

0800d370 <__multiply>:
 800d370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d374:	4614      	mov	r4, r2
 800d376:	690a      	ldr	r2, [r1, #16]
 800d378:	6923      	ldr	r3, [r4, #16]
 800d37a:	429a      	cmp	r2, r3
 800d37c:	bfb8      	it	lt
 800d37e:	460b      	movlt	r3, r1
 800d380:	460d      	mov	r5, r1
 800d382:	bfbc      	itt	lt
 800d384:	4625      	movlt	r5, r4
 800d386:	461c      	movlt	r4, r3
 800d388:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d38c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d390:	68ab      	ldr	r3, [r5, #8]
 800d392:	6869      	ldr	r1, [r5, #4]
 800d394:	eb0a 0709 	add.w	r7, sl, r9
 800d398:	42bb      	cmp	r3, r7
 800d39a:	b085      	sub	sp, #20
 800d39c:	bfb8      	it	lt
 800d39e:	3101      	addlt	r1, #1
 800d3a0:	f7ff fed4 	bl	800d14c <_Balloc>
 800d3a4:	b930      	cbnz	r0, 800d3b4 <__multiply+0x44>
 800d3a6:	4602      	mov	r2, r0
 800d3a8:	4b42      	ldr	r3, [pc, #264]	; (800d4b4 <__multiply+0x144>)
 800d3aa:	4843      	ldr	r0, [pc, #268]	; (800d4b8 <__multiply+0x148>)
 800d3ac:	f240 115d 	movw	r1, #349	; 0x15d
 800d3b0:	f000 fc70 	bl	800dc94 <__assert_func>
 800d3b4:	f100 0614 	add.w	r6, r0, #20
 800d3b8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d3bc:	4633      	mov	r3, r6
 800d3be:	2200      	movs	r2, #0
 800d3c0:	4543      	cmp	r3, r8
 800d3c2:	d31e      	bcc.n	800d402 <__multiply+0x92>
 800d3c4:	f105 0c14 	add.w	ip, r5, #20
 800d3c8:	f104 0314 	add.w	r3, r4, #20
 800d3cc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d3d0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d3d4:	9202      	str	r2, [sp, #8]
 800d3d6:	ebac 0205 	sub.w	r2, ip, r5
 800d3da:	3a15      	subs	r2, #21
 800d3dc:	f022 0203 	bic.w	r2, r2, #3
 800d3e0:	3204      	adds	r2, #4
 800d3e2:	f105 0115 	add.w	r1, r5, #21
 800d3e6:	458c      	cmp	ip, r1
 800d3e8:	bf38      	it	cc
 800d3ea:	2204      	movcc	r2, #4
 800d3ec:	9201      	str	r2, [sp, #4]
 800d3ee:	9a02      	ldr	r2, [sp, #8]
 800d3f0:	9303      	str	r3, [sp, #12]
 800d3f2:	429a      	cmp	r2, r3
 800d3f4:	d808      	bhi.n	800d408 <__multiply+0x98>
 800d3f6:	2f00      	cmp	r7, #0
 800d3f8:	dc55      	bgt.n	800d4a6 <__multiply+0x136>
 800d3fa:	6107      	str	r7, [r0, #16]
 800d3fc:	b005      	add	sp, #20
 800d3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d402:	f843 2b04 	str.w	r2, [r3], #4
 800d406:	e7db      	b.n	800d3c0 <__multiply+0x50>
 800d408:	f8b3 a000 	ldrh.w	sl, [r3]
 800d40c:	f1ba 0f00 	cmp.w	sl, #0
 800d410:	d020      	beq.n	800d454 <__multiply+0xe4>
 800d412:	f105 0e14 	add.w	lr, r5, #20
 800d416:	46b1      	mov	r9, r6
 800d418:	2200      	movs	r2, #0
 800d41a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d41e:	f8d9 b000 	ldr.w	fp, [r9]
 800d422:	b2a1      	uxth	r1, r4
 800d424:	fa1f fb8b 	uxth.w	fp, fp
 800d428:	fb0a b101 	mla	r1, sl, r1, fp
 800d42c:	4411      	add	r1, r2
 800d42e:	f8d9 2000 	ldr.w	r2, [r9]
 800d432:	0c24      	lsrs	r4, r4, #16
 800d434:	0c12      	lsrs	r2, r2, #16
 800d436:	fb0a 2404 	mla	r4, sl, r4, r2
 800d43a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d43e:	b289      	uxth	r1, r1
 800d440:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d444:	45f4      	cmp	ip, lr
 800d446:	f849 1b04 	str.w	r1, [r9], #4
 800d44a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d44e:	d8e4      	bhi.n	800d41a <__multiply+0xaa>
 800d450:	9901      	ldr	r1, [sp, #4]
 800d452:	5072      	str	r2, [r6, r1]
 800d454:	9a03      	ldr	r2, [sp, #12]
 800d456:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d45a:	3304      	adds	r3, #4
 800d45c:	f1b9 0f00 	cmp.w	r9, #0
 800d460:	d01f      	beq.n	800d4a2 <__multiply+0x132>
 800d462:	6834      	ldr	r4, [r6, #0]
 800d464:	f105 0114 	add.w	r1, r5, #20
 800d468:	46b6      	mov	lr, r6
 800d46a:	f04f 0a00 	mov.w	sl, #0
 800d46e:	880a      	ldrh	r2, [r1, #0]
 800d470:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d474:	fb09 b202 	mla	r2, r9, r2, fp
 800d478:	4492      	add	sl, r2
 800d47a:	b2a4      	uxth	r4, r4
 800d47c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d480:	f84e 4b04 	str.w	r4, [lr], #4
 800d484:	f851 4b04 	ldr.w	r4, [r1], #4
 800d488:	f8be 2000 	ldrh.w	r2, [lr]
 800d48c:	0c24      	lsrs	r4, r4, #16
 800d48e:	fb09 2404 	mla	r4, r9, r4, r2
 800d492:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d496:	458c      	cmp	ip, r1
 800d498:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d49c:	d8e7      	bhi.n	800d46e <__multiply+0xfe>
 800d49e:	9a01      	ldr	r2, [sp, #4]
 800d4a0:	50b4      	str	r4, [r6, r2]
 800d4a2:	3604      	adds	r6, #4
 800d4a4:	e7a3      	b.n	800d3ee <__multiply+0x7e>
 800d4a6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d1a5      	bne.n	800d3fa <__multiply+0x8a>
 800d4ae:	3f01      	subs	r7, #1
 800d4b0:	e7a1      	b.n	800d3f6 <__multiply+0x86>
 800d4b2:	bf00      	nop
 800d4b4:	0800eaf3 	.word	0x0800eaf3
 800d4b8:	0800eb04 	.word	0x0800eb04

0800d4bc <__pow5mult>:
 800d4bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4c0:	4615      	mov	r5, r2
 800d4c2:	f012 0203 	ands.w	r2, r2, #3
 800d4c6:	4606      	mov	r6, r0
 800d4c8:	460f      	mov	r7, r1
 800d4ca:	d007      	beq.n	800d4dc <__pow5mult+0x20>
 800d4cc:	4c25      	ldr	r4, [pc, #148]	; (800d564 <__pow5mult+0xa8>)
 800d4ce:	3a01      	subs	r2, #1
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d4d6:	f7ff fe9b 	bl	800d210 <__multadd>
 800d4da:	4607      	mov	r7, r0
 800d4dc:	10ad      	asrs	r5, r5, #2
 800d4de:	d03d      	beq.n	800d55c <__pow5mult+0xa0>
 800d4e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d4e2:	b97c      	cbnz	r4, 800d504 <__pow5mult+0x48>
 800d4e4:	2010      	movs	r0, #16
 800d4e6:	f7ff fe1b 	bl	800d120 <malloc>
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	6270      	str	r0, [r6, #36]	; 0x24
 800d4ee:	b928      	cbnz	r0, 800d4fc <__pow5mult+0x40>
 800d4f0:	4b1d      	ldr	r3, [pc, #116]	; (800d568 <__pow5mult+0xac>)
 800d4f2:	481e      	ldr	r0, [pc, #120]	; (800d56c <__pow5mult+0xb0>)
 800d4f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d4f8:	f000 fbcc 	bl	800dc94 <__assert_func>
 800d4fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d500:	6004      	str	r4, [r0, #0]
 800d502:	60c4      	str	r4, [r0, #12]
 800d504:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d508:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d50c:	b94c      	cbnz	r4, 800d522 <__pow5mult+0x66>
 800d50e:	f240 2171 	movw	r1, #625	; 0x271
 800d512:	4630      	mov	r0, r6
 800d514:	f7ff ff16 	bl	800d344 <__i2b>
 800d518:	2300      	movs	r3, #0
 800d51a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d51e:	4604      	mov	r4, r0
 800d520:	6003      	str	r3, [r0, #0]
 800d522:	f04f 0900 	mov.w	r9, #0
 800d526:	07eb      	lsls	r3, r5, #31
 800d528:	d50a      	bpl.n	800d540 <__pow5mult+0x84>
 800d52a:	4639      	mov	r1, r7
 800d52c:	4622      	mov	r2, r4
 800d52e:	4630      	mov	r0, r6
 800d530:	f7ff ff1e 	bl	800d370 <__multiply>
 800d534:	4639      	mov	r1, r7
 800d536:	4680      	mov	r8, r0
 800d538:	4630      	mov	r0, r6
 800d53a:	f7ff fe47 	bl	800d1cc <_Bfree>
 800d53e:	4647      	mov	r7, r8
 800d540:	106d      	asrs	r5, r5, #1
 800d542:	d00b      	beq.n	800d55c <__pow5mult+0xa0>
 800d544:	6820      	ldr	r0, [r4, #0]
 800d546:	b938      	cbnz	r0, 800d558 <__pow5mult+0x9c>
 800d548:	4622      	mov	r2, r4
 800d54a:	4621      	mov	r1, r4
 800d54c:	4630      	mov	r0, r6
 800d54e:	f7ff ff0f 	bl	800d370 <__multiply>
 800d552:	6020      	str	r0, [r4, #0]
 800d554:	f8c0 9000 	str.w	r9, [r0]
 800d558:	4604      	mov	r4, r0
 800d55a:	e7e4      	b.n	800d526 <__pow5mult+0x6a>
 800d55c:	4638      	mov	r0, r7
 800d55e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d562:	bf00      	nop
 800d564:	0800ec58 	.word	0x0800ec58
 800d568:	0800ea7d 	.word	0x0800ea7d
 800d56c:	0800eb04 	.word	0x0800eb04

0800d570 <__lshift>:
 800d570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d574:	460c      	mov	r4, r1
 800d576:	6849      	ldr	r1, [r1, #4]
 800d578:	6923      	ldr	r3, [r4, #16]
 800d57a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d57e:	68a3      	ldr	r3, [r4, #8]
 800d580:	4607      	mov	r7, r0
 800d582:	4691      	mov	r9, r2
 800d584:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d588:	f108 0601 	add.w	r6, r8, #1
 800d58c:	42b3      	cmp	r3, r6
 800d58e:	db0b      	blt.n	800d5a8 <__lshift+0x38>
 800d590:	4638      	mov	r0, r7
 800d592:	f7ff fddb 	bl	800d14c <_Balloc>
 800d596:	4605      	mov	r5, r0
 800d598:	b948      	cbnz	r0, 800d5ae <__lshift+0x3e>
 800d59a:	4602      	mov	r2, r0
 800d59c:	4b28      	ldr	r3, [pc, #160]	; (800d640 <__lshift+0xd0>)
 800d59e:	4829      	ldr	r0, [pc, #164]	; (800d644 <__lshift+0xd4>)
 800d5a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d5a4:	f000 fb76 	bl	800dc94 <__assert_func>
 800d5a8:	3101      	adds	r1, #1
 800d5aa:	005b      	lsls	r3, r3, #1
 800d5ac:	e7ee      	b.n	800d58c <__lshift+0x1c>
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	f100 0114 	add.w	r1, r0, #20
 800d5b4:	f100 0210 	add.w	r2, r0, #16
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	4553      	cmp	r3, sl
 800d5bc:	db33      	blt.n	800d626 <__lshift+0xb6>
 800d5be:	6920      	ldr	r0, [r4, #16]
 800d5c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d5c4:	f104 0314 	add.w	r3, r4, #20
 800d5c8:	f019 091f 	ands.w	r9, r9, #31
 800d5cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d5d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d5d4:	d02b      	beq.n	800d62e <__lshift+0xbe>
 800d5d6:	f1c9 0e20 	rsb	lr, r9, #32
 800d5da:	468a      	mov	sl, r1
 800d5dc:	2200      	movs	r2, #0
 800d5de:	6818      	ldr	r0, [r3, #0]
 800d5e0:	fa00 f009 	lsl.w	r0, r0, r9
 800d5e4:	4302      	orrs	r2, r0
 800d5e6:	f84a 2b04 	str.w	r2, [sl], #4
 800d5ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5ee:	459c      	cmp	ip, r3
 800d5f0:	fa22 f20e 	lsr.w	r2, r2, lr
 800d5f4:	d8f3      	bhi.n	800d5de <__lshift+0x6e>
 800d5f6:	ebac 0304 	sub.w	r3, ip, r4
 800d5fa:	3b15      	subs	r3, #21
 800d5fc:	f023 0303 	bic.w	r3, r3, #3
 800d600:	3304      	adds	r3, #4
 800d602:	f104 0015 	add.w	r0, r4, #21
 800d606:	4584      	cmp	ip, r0
 800d608:	bf38      	it	cc
 800d60a:	2304      	movcc	r3, #4
 800d60c:	50ca      	str	r2, [r1, r3]
 800d60e:	b10a      	cbz	r2, 800d614 <__lshift+0xa4>
 800d610:	f108 0602 	add.w	r6, r8, #2
 800d614:	3e01      	subs	r6, #1
 800d616:	4638      	mov	r0, r7
 800d618:	612e      	str	r6, [r5, #16]
 800d61a:	4621      	mov	r1, r4
 800d61c:	f7ff fdd6 	bl	800d1cc <_Bfree>
 800d620:	4628      	mov	r0, r5
 800d622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d626:	f842 0f04 	str.w	r0, [r2, #4]!
 800d62a:	3301      	adds	r3, #1
 800d62c:	e7c5      	b.n	800d5ba <__lshift+0x4a>
 800d62e:	3904      	subs	r1, #4
 800d630:	f853 2b04 	ldr.w	r2, [r3], #4
 800d634:	f841 2f04 	str.w	r2, [r1, #4]!
 800d638:	459c      	cmp	ip, r3
 800d63a:	d8f9      	bhi.n	800d630 <__lshift+0xc0>
 800d63c:	e7ea      	b.n	800d614 <__lshift+0xa4>
 800d63e:	bf00      	nop
 800d640:	0800eaf3 	.word	0x0800eaf3
 800d644:	0800eb04 	.word	0x0800eb04

0800d648 <__mcmp>:
 800d648:	b530      	push	{r4, r5, lr}
 800d64a:	6902      	ldr	r2, [r0, #16]
 800d64c:	690c      	ldr	r4, [r1, #16]
 800d64e:	1b12      	subs	r2, r2, r4
 800d650:	d10e      	bne.n	800d670 <__mcmp+0x28>
 800d652:	f100 0314 	add.w	r3, r0, #20
 800d656:	3114      	adds	r1, #20
 800d658:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d65c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d660:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d664:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d668:	42a5      	cmp	r5, r4
 800d66a:	d003      	beq.n	800d674 <__mcmp+0x2c>
 800d66c:	d305      	bcc.n	800d67a <__mcmp+0x32>
 800d66e:	2201      	movs	r2, #1
 800d670:	4610      	mov	r0, r2
 800d672:	bd30      	pop	{r4, r5, pc}
 800d674:	4283      	cmp	r3, r0
 800d676:	d3f3      	bcc.n	800d660 <__mcmp+0x18>
 800d678:	e7fa      	b.n	800d670 <__mcmp+0x28>
 800d67a:	f04f 32ff 	mov.w	r2, #4294967295
 800d67e:	e7f7      	b.n	800d670 <__mcmp+0x28>

0800d680 <__mdiff>:
 800d680:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d684:	460c      	mov	r4, r1
 800d686:	4606      	mov	r6, r0
 800d688:	4611      	mov	r1, r2
 800d68a:	4620      	mov	r0, r4
 800d68c:	4617      	mov	r7, r2
 800d68e:	f7ff ffdb 	bl	800d648 <__mcmp>
 800d692:	1e05      	subs	r5, r0, #0
 800d694:	d110      	bne.n	800d6b8 <__mdiff+0x38>
 800d696:	4629      	mov	r1, r5
 800d698:	4630      	mov	r0, r6
 800d69a:	f7ff fd57 	bl	800d14c <_Balloc>
 800d69e:	b930      	cbnz	r0, 800d6ae <__mdiff+0x2e>
 800d6a0:	4b39      	ldr	r3, [pc, #228]	; (800d788 <__mdiff+0x108>)
 800d6a2:	4602      	mov	r2, r0
 800d6a4:	f240 2132 	movw	r1, #562	; 0x232
 800d6a8:	4838      	ldr	r0, [pc, #224]	; (800d78c <__mdiff+0x10c>)
 800d6aa:	f000 faf3 	bl	800dc94 <__assert_func>
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d6b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6b8:	bfa4      	itt	ge
 800d6ba:	463b      	movge	r3, r7
 800d6bc:	4627      	movge	r7, r4
 800d6be:	4630      	mov	r0, r6
 800d6c0:	6879      	ldr	r1, [r7, #4]
 800d6c2:	bfa6      	itte	ge
 800d6c4:	461c      	movge	r4, r3
 800d6c6:	2500      	movge	r5, #0
 800d6c8:	2501      	movlt	r5, #1
 800d6ca:	f7ff fd3f 	bl	800d14c <_Balloc>
 800d6ce:	b920      	cbnz	r0, 800d6da <__mdiff+0x5a>
 800d6d0:	4b2d      	ldr	r3, [pc, #180]	; (800d788 <__mdiff+0x108>)
 800d6d2:	4602      	mov	r2, r0
 800d6d4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d6d8:	e7e6      	b.n	800d6a8 <__mdiff+0x28>
 800d6da:	693e      	ldr	r6, [r7, #16]
 800d6dc:	60c5      	str	r5, [r0, #12]
 800d6de:	6925      	ldr	r5, [r4, #16]
 800d6e0:	f107 0114 	add.w	r1, r7, #20
 800d6e4:	f104 0914 	add.w	r9, r4, #20
 800d6e8:	f100 0e14 	add.w	lr, r0, #20
 800d6ec:	f107 0210 	add.w	r2, r7, #16
 800d6f0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d6f4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d6f8:	46f2      	mov	sl, lr
 800d6fa:	2700      	movs	r7, #0
 800d6fc:	f859 3b04 	ldr.w	r3, [r9], #4
 800d700:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d704:	fa1f f883 	uxth.w	r8, r3
 800d708:	fa17 f78b 	uxtah	r7, r7, fp
 800d70c:	0c1b      	lsrs	r3, r3, #16
 800d70e:	eba7 0808 	sub.w	r8, r7, r8
 800d712:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d716:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d71a:	fa1f f888 	uxth.w	r8, r8
 800d71e:	141f      	asrs	r7, r3, #16
 800d720:	454d      	cmp	r5, r9
 800d722:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d726:	f84a 3b04 	str.w	r3, [sl], #4
 800d72a:	d8e7      	bhi.n	800d6fc <__mdiff+0x7c>
 800d72c:	1b2b      	subs	r3, r5, r4
 800d72e:	3b15      	subs	r3, #21
 800d730:	f023 0303 	bic.w	r3, r3, #3
 800d734:	3304      	adds	r3, #4
 800d736:	3415      	adds	r4, #21
 800d738:	42a5      	cmp	r5, r4
 800d73a:	bf38      	it	cc
 800d73c:	2304      	movcc	r3, #4
 800d73e:	4419      	add	r1, r3
 800d740:	4473      	add	r3, lr
 800d742:	469e      	mov	lr, r3
 800d744:	460d      	mov	r5, r1
 800d746:	4565      	cmp	r5, ip
 800d748:	d30e      	bcc.n	800d768 <__mdiff+0xe8>
 800d74a:	f10c 0203 	add.w	r2, ip, #3
 800d74e:	1a52      	subs	r2, r2, r1
 800d750:	f022 0203 	bic.w	r2, r2, #3
 800d754:	3903      	subs	r1, #3
 800d756:	458c      	cmp	ip, r1
 800d758:	bf38      	it	cc
 800d75a:	2200      	movcc	r2, #0
 800d75c:	441a      	add	r2, r3
 800d75e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d762:	b17b      	cbz	r3, 800d784 <__mdiff+0x104>
 800d764:	6106      	str	r6, [r0, #16]
 800d766:	e7a5      	b.n	800d6b4 <__mdiff+0x34>
 800d768:	f855 8b04 	ldr.w	r8, [r5], #4
 800d76c:	fa17 f488 	uxtah	r4, r7, r8
 800d770:	1422      	asrs	r2, r4, #16
 800d772:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d776:	b2a4      	uxth	r4, r4
 800d778:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d77c:	f84e 4b04 	str.w	r4, [lr], #4
 800d780:	1417      	asrs	r7, r2, #16
 800d782:	e7e0      	b.n	800d746 <__mdiff+0xc6>
 800d784:	3e01      	subs	r6, #1
 800d786:	e7ea      	b.n	800d75e <__mdiff+0xde>
 800d788:	0800eaf3 	.word	0x0800eaf3
 800d78c:	0800eb04 	.word	0x0800eb04

0800d790 <__d2b>:
 800d790:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d794:	4689      	mov	r9, r1
 800d796:	2101      	movs	r1, #1
 800d798:	ec57 6b10 	vmov	r6, r7, d0
 800d79c:	4690      	mov	r8, r2
 800d79e:	f7ff fcd5 	bl	800d14c <_Balloc>
 800d7a2:	4604      	mov	r4, r0
 800d7a4:	b930      	cbnz	r0, 800d7b4 <__d2b+0x24>
 800d7a6:	4602      	mov	r2, r0
 800d7a8:	4b25      	ldr	r3, [pc, #148]	; (800d840 <__d2b+0xb0>)
 800d7aa:	4826      	ldr	r0, [pc, #152]	; (800d844 <__d2b+0xb4>)
 800d7ac:	f240 310a 	movw	r1, #778	; 0x30a
 800d7b0:	f000 fa70 	bl	800dc94 <__assert_func>
 800d7b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d7b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d7bc:	bb35      	cbnz	r5, 800d80c <__d2b+0x7c>
 800d7be:	2e00      	cmp	r6, #0
 800d7c0:	9301      	str	r3, [sp, #4]
 800d7c2:	d028      	beq.n	800d816 <__d2b+0x86>
 800d7c4:	4668      	mov	r0, sp
 800d7c6:	9600      	str	r6, [sp, #0]
 800d7c8:	f7ff fd8c 	bl	800d2e4 <__lo0bits>
 800d7cc:	9900      	ldr	r1, [sp, #0]
 800d7ce:	b300      	cbz	r0, 800d812 <__d2b+0x82>
 800d7d0:	9a01      	ldr	r2, [sp, #4]
 800d7d2:	f1c0 0320 	rsb	r3, r0, #32
 800d7d6:	fa02 f303 	lsl.w	r3, r2, r3
 800d7da:	430b      	orrs	r3, r1
 800d7dc:	40c2      	lsrs	r2, r0
 800d7de:	6163      	str	r3, [r4, #20]
 800d7e0:	9201      	str	r2, [sp, #4]
 800d7e2:	9b01      	ldr	r3, [sp, #4]
 800d7e4:	61a3      	str	r3, [r4, #24]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	bf14      	ite	ne
 800d7ea:	2202      	movne	r2, #2
 800d7ec:	2201      	moveq	r2, #1
 800d7ee:	6122      	str	r2, [r4, #16]
 800d7f0:	b1d5      	cbz	r5, 800d828 <__d2b+0x98>
 800d7f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d7f6:	4405      	add	r5, r0
 800d7f8:	f8c9 5000 	str.w	r5, [r9]
 800d7fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d800:	f8c8 0000 	str.w	r0, [r8]
 800d804:	4620      	mov	r0, r4
 800d806:	b003      	add	sp, #12
 800d808:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d80c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d810:	e7d5      	b.n	800d7be <__d2b+0x2e>
 800d812:	6161      	str	r1, [r4, #20]
 800d814:	e7e5      	b.n	800d7e2 <__d2b+0x52>
 800d816:	a801      	add	r0, sp, #4
 800d818:	f7ff fd64 	bl	800d2e4 <__lo0bits>
 800d81c:	9b01      	ldr	r3, [sp, #4]
 800d81e:	6163      	str	r3, [r4, #20]
 800d820:	2201      	movs	r2, #1
 800d822:	6122      	str	r2, [r4, #16]
 800d824:	3020      	adds	r0, #32
 800d826:	e7e3      	b.n	800d7f0 <__d2b+0x60>
 800d828:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d82c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d830:	f8c9 0000 	str.w	r0, [r9]
 800d834:	6918      	ldr	r0, [r3, #16]
 800d836:	f7ff fd35 	bl	800d2a4 <__hi0bits>
 800d83a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d83e:	e7df      	b.n	800d800 <__d2b+0x70>
 800d840:	0800eaf3 	.word	0x0800eaf3
 800d844:	0800eb04 	.word	0x0800eb04

0800d848 <_calloc_r>:
 800d848:	b513      	push	{r0, r1, r4, lr}
 800d84a:	434a      	muls	r2, r1
 800d84c:	4611      	mov	r1, r2
 800d84e:	9201      	str	r2, [sp, #4]
 800d850:	f000 f85a 	bl	800d908 <_malloc_r>
 800d854:	4604      	mov	r4, r0
 800d856:	b118      	cbz	r0, 800d860 <_calloc_r+0x18>
 800d858:	9a01      	ldr	r2, [sp, #4]
 800d85a:	2100      	movs	r1, #0
 800d85c:	f7fe f950 	bl	800bb00 <memset>
 800d860:	4620      	mov	r0, r4
 800d862:	b002      	add	sp, #8
 800d864:	bd10      	pop	{r4, pc}
	...

0800d868 <_free_r>:
 800d868:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d86a:	2900      	cmp	r1, #0
 800d86c:	d048      	beq.n	800d900 <_free_r+0x98>
 800d86e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d872:	9001      	str	r0, [sp, #4]
 800d874:	2b00      	cmp	r3, #0
 800d876:	f1a1 0404 	sub.w	r4, r1, #4
 800d87a:	bfb8      	it	lt
 800d87c:	18e4      	addlt	r4, r4, r3
 800d87e:	f000 fa65 	bl	800dd4c <__malloc_lock>
 800d882:	4a20      	ldr	r2, [pc, #128]	; (800d904 <_free_r+0x9c>)
 800d884:	9801      	ldr	r0, [sp, #4]
 800d886:	6813      	ldr	r3, [r2, #0]
 800d888:	4615      	mov	r5, r2
 800d88a:	b933      	cbnz	r3, 800d89a <_free_r+0x32>
 800d88c:	6063      	str	r3, [r4, #4]
 800d88e:	6014      	str	r4, [r2, #0]
 800d890:	b003      	add	sp, #12
 800d892:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d896:	f000 ba5f 	b.w	800dd58 <__malloc_unlock>
 800d89a:	42a3      	cmp	r3, r4
 800d89c:	d90b      	bls.n	800d8b6 <_free_r+0x4e>
 800d89e:	6821      	ldr	r1, [r4, #0]
 800d8a0:	1862      	adds	r2, r4, r1
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	bf04      	itt	eq
 800d8a6:	681a      	ldreq	r2, [r3, #0]
 800d8a8:	685b      	ldreq	r3, [r3, #4]
 800d8aa:	6063      	str	r3, [r4, #4]
 800d8ac:	bf04      	itt	eq
 800d8ae:	1852      	addeq	r2, r2, r1
 800d8b0:	6022      	streq	r2, [r4, #0]
 800d8b2:	602c      	str	r4, [r5, #0]
 800d8b4:	e7ec      	b.n	800d890 <_free_r+0x28>
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	685b      	ldr	r3, [r3, #4]
 800d8ba:	b10b      	cbz	r3, 800d8c0 <_free_r+0x58>
 800d8bc:	42a3      	cmp	r3, r4
 800d8be:	d9fa      	bls.n	800d8b6 <_free_r+0x4e>
 800d8c0:	6811      	ldr	r1, [r2, #0]
 800d8c2:	1855      	adds	r5, r2, r1
 800d8c4:	42a5      	cmp	r5, r4
 800d8c6:	d10b      	bne.n	800d8e0 <_free_r+0x78>
 800d8c8:	6824      	ldr	r4, [r4, #0]
 800d8ca:	4421      	add	r1, r4
 800d8cc:	1854      	adds	r4, r2, r1
 800d8ce:	42a3      	cmp	r3, r4
 800d8d0:	6011      	str	r1, [r2, #0]
 800d8d2:	d1dd      	bne.n	800d890 <_free_r+0x28>
 800d8d4:	681c      	ldr	r4, [r3, #0]
 800d8d6:	685b      	ldr	r3, [r3, #4]
 800d8d8:	6053      	str	r3, [r2, #4]
 800d8da:	4421      	add	r1, r4
 800d8dc:	6011      	str	r1, [r2, #0]
 800d8de:	e7d7      	b.n	800d890 <_free_r+0x28>
 800d8e0:	d902      	bls.n	800d8e8 <_free_r+0x80>
 800d8e2:	230c      	movs	r3, #12
 800d8e4:	6003      	str	r3, [r0, #0]
 800d8e6:	e7d3      	b.n	800d890 <_free_r+0x28>
 800d8e8:	6825      	ldr	r5, [r4, #0]
 800d8ea:	1961      	adds	r1, r4, r5
 800d8ec:	428b      	cmp	r3, r1
 800d8ee:	bf04      	itt	eq
 800d8f0:	6819      	ldreq	r1, [r3, #0]
 800d8f2:	685b      	ldreq	r3, [r3, #4]
 800d8f4:	6063      	str	r3, [r4, #4]
 800d8f6:	bf04      	itt	eq
 800d8f8:	1949      	addeq	r1, r1, r5
 800d8fa:	6021      	streq	r1, [r4, #0]
 800d8fc:	6054      	str	r4, [r2, #4]
 800d8fe:	e7c7      	b.n	800d890 <_free_r+0x28>
 800d900:	b003      	add	sp, #12
 800d902:	bd30      	pop	{r4, r5, pc}
 800d904:	20001838 	.word	0x20001838

0800d908 <_malloc_r>:
 800d908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d90a:	1ccd      	adds	r5, r1, #3
 800d90c:	f025 0503 	bic.w	r5, r5, #3
 800d910:	3508      	adds	r5, #8
 800d912:	2d0c      	cmp	r5, #12
 800d914:	bf38      	it	cc
 800d916:	250c      	movcc	r5, #12
 800d918:	2d00      	cmp	r5, #0
 800d91a:	4606      	mov	r6, r0
 800d91c:	db01      	blt.n	800d922 <_malloc_r+0x1a>
 800d91e:	42a9      	cmp	r1, r5
 800d920:	d903      	bls.n	800d92a <_malloc_r+0x22>
 800d922:	230c      	movs	r3, #12
 800d924:	6033      	str	r3, [r6, #0]
 800d926:	2000      	movs	r0, #0
 800d928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d92a:	f000 fa0f 	bl	800dd4c <__malloc_lock>
 800d92e:	4921      	ldr	r1, [pc, #132]	; (800d9b4 <_malloc_r+0xac>)
 800d930:	680a      	ldr	r2, [r1, #0]
 800d932:	4614      	mov	r4, r2
 800d934:	b99c      	cbnz	r4, 800d95e <_malloc_r+0x56>
 800d936:	4f20      	ldr	r7, [pc, #128]	; (800d9b8 <_malloc_r+0xb0>)
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	b923      	cbnz	r3, 800d946 <_malloc_r+0x3e>
 800d93c:	4621      	mov	r1, r4
 800d93e:	4630      	mov	r0, r6
 800d940:	f000 f998 	bl	800dc74 <_sbrk_r>
 800d944:	6038      	str	r0, [r7, #0]
 800d946:	4629      	mov	r1, r5
 800d948:	4630      	mov	r0, r6
 800d94a:	f000 f993 	bl	800dc74 <_sbrk_r>
 800d94e:	1c43      	adds	r3, r0, #1
 800d950:	d123      	bne.n	800d99a <_malloc_r+0x92>
 800d952:	230c      	movs	r3, #12
 800d954:	6033      	str	r3, [r6, #0]
 800d956:	4630      	mov	r0, r6
 800d958:	f000 f9fe 	bl	800dd58 <__malloc_unlock>
 800d95c:	e7e3      	b.n	800d926 <_malloc_r+0x1e>
 800d95e:	6823      	ldr	r3, [r4, #0]
 800d960:	1b5b      	subs	r3, r3, r5
 800d962:	d417      	bmi.n	800d994 <_malloc_r+0x8c>
 800d964:	2b0b      	cmp	r3, #11
 800d966:	d903      	bls.n	800d970 <_malloc_r+0x68>
 800d968:	6023      	str	r3, [r4, #0]
 800d96a:	441c      	add	r4, r3
 800d96c:	6025      	str	r5, [r4, #0]
 800d96e:	e004      	b.n	800d97a <_malloc_r+0x72>
 800d970:	6863      	ldr	r3, [r4, #4]
 800d972:	42a2      	cmp	r2, r4
 800d974:	bf0c      	ite	eq
 800d976:	600b      	streq	r3, [r1, #0]
 800d978:	6053      	strne	r3, [r2, #4]
 800d97a:	4630      	mov	r0, r6
 800d97c:	f000 f9ec 	bl	800dd58 <__malloc_unlock>
 800d980:	f104 000b 	add.w	r0, r4, #11
 800d984:	1d23      	adds	r3, r4, #4
 800d986:	f020 0007 	bic.w	r0, r0, #7
 800d98a:	1ac2      	subs	r2, r0, r3
 800d98c:	d0cc      	beq.n	800d928 <_malloc_r+0x20>
 800d98e:	1a1b      	subs	r3, r3, r0
 800d990:	50a3      	str	r3, [r4, r2]
 800d992:	e7c9      	b.n	800d928 <_malloc_r+0x20>
 800d994:	4622      	mov	r2, r4
 800d996:	6864      	ldr	r4, [r4, #4]
 800d998:	e7cc      	b.n	800d934 <_malloc_r+0x2c>
 800d99a:	1cc4      	adds	r4, r0, #3
 800d99c:	f024 0403 	bic.w	r4, r4, #3
 800d9a0:	42a0      	cmp	r0, r4
 800d9a2:	d0e3      	beq.n	800d96c <_malloc_r+0x64>
 800d9a4:	1a21      	subs	r1, r4, r0
 800d9a6:	4630      	mov	r0, r6
 800d9a8:	f000 f964 	bl	800dc74 <_sbrk_r>
 800d9ac:	3001      	adds	r0, #1
 800d9ae:	d1dd      	bne.n	800d96c <_malloc_r+0x64>
 800d9b0:	e7cf      	b.n	800d952 <_malloc_r+0x4a>
 800d9b2:	bf00      	nop
 800d9b4:	20001838 	.word	0x20001838
 800d9b8:	2000183c 	.word	0x2000183c

0800d9bc <__ssputs_r>:
 800d9bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9c0:	688e      	ldr	r6, [r1, #8]
 800d9c2:	429e      	cmp	r6, r3
 800d9c4:	4682      	mov	sl, r0
 800d9c6:	460c      	mov	r4, r1
 800d9c8:	4690      	mov	r8, r2
 800d9ca:	461f      	mov	r7, r3
 800d9cc:	d838      	bhi.n	800da40 <__ssputs_r+0x84>
 800d9ce:	898a      	ldrh	r2, [r1, #12]
 800d9d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d9d4:	d032      	beq.n	800da3c <__ssputs_r+0x80>
 800d9d6:	6825      	ldr	r5, [r4, #0]
 800d9d8:	6909      	ldr	r1, [r1, #16]
 800d9da:	eba5 0901 	sub.w	r9, r5, r1
 800d9de:	6965      	ldr	r5, [r4, #20]
 800d9e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d9e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d9e8:	3301      	adds	r3, #1
 800d9ea:	444b      	add	r3, r9
 800d9ec:	106d      	asrs	r5, r5, #1
 800d9ee:	429d      	cmp	r5, r3
 800d9f0:	bf38      	it	cc
 800d9f2:	461d      	movcc	r5, r3
 800d9f4:	0553      	lsls	r3, r2, #21
 800d9f6:	d531      	bpl.n	800da5c <__ssputs_r+0xa0>
 800d9f8:	4629      	mov	r1, r5
 800d9fa:	f7ff ff85 	bl	800d908 <_malloc_r>
 800d9fe:	4606      	mov	r6, r0
 800da00:	b950      	cbnz	r0, 800da18 <__ssputs_r+0x5c>
 800da02:	230c      	movs	r3, #12
 800da04:	f8ca 3000 	str.w	r3, [sl]
 800da08:	89a3      	ldrh	r3, [r4, #12]
 800da0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da0e:	81a3      	strh	r3, [r4, #12]
 800da10:	f04f 30ff 	mov.w	r0, #4294967295
 800da14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da18:	6921      	ldr	r1, [r4, #16]
 800da1a:	464a      	mov	r2, r9
 800da1c:	f7ff fb88 	bl	800d130 <memcpy>
 800da20:	89a3      	ldrh	r3, [r4, #12]
 800da22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800da26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da2a:	81a3      	strh	r3, [r4, #12]
 800da2c:	6126      	str	r6, [r4, #16]
 800da2e:	6165      	str	r5, [r4, #20]
 800da30:	444e      	add	r6, r9
 800da32:	eba5 0509 	sub.w	r5, r5, r9
 800da36:	6026      	str	r6, [r4, #0]
 800da38:	60a5      	str	r5, [r4, #8]
 800da3a:	463e      	mov	r6, r7
 800da3c:	42be      	cmp	r6, r7
 800da3e:	d900      	bls.n	800da42 <__ssputs_r+0x86>
 800da40:	463e      	mov	r6, r7
 800da42:	4632      	mov	r2, r6
 800da44:	6820      	ldr	r0, [r4, #0]
 800da46:	4641      	mov	r1, r8
 800da48:	f000 f966 	bl	800dd18 <memmove>
 800da4c:	68a3      	ldr	r3, [r4, #8]
 800da4e:	6822      	ldr	r2, [r4, #0]
 800da50:	1b9b      	subs	r3, r3, r6
 800da52:	4432      	add	r2, r6
 800da54:	60a3      	str	r3, [r4, #8]
 800da56:	6022      	str	r2, [r4, #0]
 800da58:	2000      	movs	r0, #0
 800da5a:	e7db      	b.n	800da14 <__ssputs_r+0x58>
 800da5c:	462a      	mov	r2, r5
 800da5e:	f000 f981 	bl	800dd64 <_realloc_r>
 800da62:	4606      	mov	r6, r0
 800da64:	2800      	cmp	r0, #0
 800da66:	d1e1      	bne.n	800da2c <__ssputs_r+0x70>
 800da68:	6921      	ldr	r1, [r4, #16]
 800da6a:	4650      	mov	r0, sl
 800da6c:	f7ff fefc 	bl	800d868 <_free_r>
 800da70:	e7c7      	b.n	800da02 <__ssputs_r+0x46>
	...

0800da74 <_svfiprintf_r>:
 800da74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da78:	4698      	mov	r8, r3
 800da7a:	898b      	ldrh	r3, [r1, #12]
 800da7c:	061b      	lsls	r3, r3, #24
 800da7e:	b09d      	sub	sp, #116	; 0x74
 800da80:	4607      	mov	r7, r0
 800da82:	460d      	mov	r5, r1
 800da84:	4614      	mov	r4, r2
 800da86:	d50e      	bpl.n	800daa6 <_svfiprintf_r+0x32>
 800da88:	690b      	ldr	r3, [r1, #16]
 800da8a:	b963      	cbnz	r3, 800daa6 <_svfiprintf_r+0x32>
 800da8c:	2140      	movs	r1, #64	; 0x40
 800da8e:	f7ff ff3b 	bl	800d908 <_malloc_r>
 800da92:	6028      	str	r0, [r5, #0]
 800da94:	6128      	str	r0, [r5, #16]
 800da96:	b920      	cbnz	r0, 800daa2 <_svfiprintf_r+0x2e>
 800da98:	230c      	movs	r3, #12
 800da9a:	603b      	str	r3, [r7, #0]
 800da9c:	f04f 30ff 	mov.w	r0, #4294967295
 800daa0:	e0d1      	b.n	800dc46 <_svfiprintf_r+0x1d2>
 800daa2:	2340      	movs	r3, #64	; 0x40
 800daa4:	616b      	str	r3, [r5, #20]
 800daa6:	2300      	movs	r3, #0
 800daa8:	9309      	str	r3, [sp, #36]	; 0x24
 800daaa:	2320      	movs	r3, #32
 800daac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dab0:	f8cd 800c 	str.w	r8, [sp, #12]
 800dab4:	2330      	movs	r3, #48	; 0x30
 800dab6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dc60 <_svfiprintf_r+0x1ec>
 800daba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dabe:	f04f 0901 	mov.w	r9, #1
 800dac2:	4623      	mov	r3, r4
 800dac4:	469a      	mov	sl, r3
 800dac6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800daca:	b10a      	cbz	r2, 800dad0 <_svfiprintf_r+0x5c>
 800dacc:	2a25      	cmp	r2, #37	; 0x25
 800dace:	d1f9      	bne.n	800dac4 <_svfiprintf_r+0x50>
 800dad0:	ebba 0b04 	subs.w	fp, sl, r4
 800dad4:	d00b      	beq.n	800daee <_svfiprintf_r+0x7a>
 800dad6:	465b      	mov	r3, fp
 800dad8:	4622      	mov	r2, r4
 800dada:	4629      	mov	r1, r5
 800dadc:	4638      	mov	r0, r7
 800dade:	f7ff ff6d 	bl	800d9bc <__ssputs_r>
 800dae2:	3001      	adds	r0, #1
 800dae4:	f000 80aa 	beq.w	800dc3c <_svfiprintf_r+0x1c8>
 800dae8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800daea:	445a      	add	r2, fp
 800daec:	9209      	str	r2, [sp, #36]	; 0x24
 800daee:	f89a 3000 	ldrb.w	r3, [sl]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	f000 80a2 	beq.w	800dc3c <_svfiprintf_r+0x1c8>
 800daf8:	2300      	movs	r3, #0
 800dafa:	f04f 32ff 	mov.w	r2, #4294967295
 800dafe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db02:	f10a 0a01 	add.w	sl, sl, #1
 800db06:	9304      	str	r3, [sp, #16]
 800db08:	9307      	str	r3, [sp, #28]
 800db0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db0e:	931a      	str	r3, [sp, #104]	; 0x68
 800db10:	4654      	mov	r4, sl
 800db12:	2205      	movs	r2, #5
 800db14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db18:	4851      	ldr	r0, [pc, #324]	; (800dc60 <_svfiprintf_r+0x1ec>)
 800db1a:	f7f2 fb69 	bl	80001f0 <memchr>
 800db1e:	9a04      	ldr	r2, [sp, #16]
 800db20:	b9d8      	cbnz	r0, 800db5a <_svfiprintf_r+0xe6>
 800db22:	06d0      	lsls	r0, r2, #27
 800db24:	bf44      	itt	mi
 800db26:	2320      	movmi	r3, #32
 800db28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db2c:	0711      	lsls	r1, r2, #28
 800db2e:	bf44      	itt	mi
 800db30:	232b      	movmi	r3, #43	; 0x2b
 800db32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db36:	f89a 3000 	ldrb.w	r3, [sl]
 800db3a:	2b2a      	cmp	r3, #42	; 0x2a
 800db3c:	d015      	beq.n	800db6a <_svfiprintf_r+0xf6>
 800db3e:	9a07      	ldr	r2, [sp, #28]
 800db40:	4654      	mov	r4, sl
 800db42:	2000      	movs	r0, #0
 800db44:	f04f 0c0a 	mov.w	ip, #10
 800db48:	4621      	mov	r1, r4
 800db4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db4e:	3b30      	subs	r3, #48	; 0x30
 800db50:	2b09      	cmp	r3, #9
 800db52:	d94e      	bls.n	800dbf2 <_svfiprintf_r+0x17e>
 800db54:	b1b0      	cbz	r0, 800db84 <_svfiprintf_r+0x110>
 800db56:	9207      	str	r2, [sp, #28]
 800db58:	e014      	b.n	800db84 <_svfiprintf_r+0x110>
 800db5a:	eba0 0308 	sub.w	r3, r0, r8
 800db5e:	fa09 f303 	lsl.w	r3, r9, r3
 800db62:	4313      	orrs	r3, r2
 800db64:	9304      	str	r3, [sp, #16]
 800db66:	46a2      	mov	sl, r4
 800db68:	e7d2      	b.n	800db10 <_svfiprintf_r+0x9c>
 800db6a:	9b03      	ldr	r3, [sp, #12]
 800db6c:	1d19      	adds	r1, r3, #4
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	9103      	str	r1, [sp, #12]
 800db72:	2b00      	cmp	r3, #0
 800db74:	bfbb      	ittet	lt
 800db76:	425b      	neglt	r3, r3
 800db78:	f042 0202 	orrlt.w	r2, r2, #2
 800db7c:	9307      	strge	r3, [sp, #28]
 800db7e:	9307      	strlt	r3, [sp, #28]
 800db80:	bfb8      	it	lt
 800db82:	9204      	strlt	r2, [sp, #16]
 800db84:	7823      	ldrb	r3, [r4, #0]
 800db86:	2b2e      	cmp	r3, #46	; 0x2e
 800db88:	d10c      	bne.n	800dba4 <_svfiprintf_r+0x130>
 800db8a:	7863      	ldrb	r3, [r4, #1]
 800db8c:	2b2a      	cmp	r3, #42	; 0x2a
 800db8e:	d135      	bne.n	800dbfc <_svfiprintf_r+0x188>
 800db90:	9b03      	ldr	r3, [sp, #12]
 800db92:	1d1a      	adds	r2, r3, #4
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	9203      	str	r2, [sp, #12]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	bfb8      	it	lt
 800db9c:	f04f 33ff 	movlt.w	r3, #4294967295
 800dba0:	3402      	adds	r4, #2
 800dba2:	9305      	str	r3, [sp, #20]
 800dba4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dc70 <_svfiprintf_r+0x1fc>
 800dba8:	7821      	ldrb	r1, [r4, #0]
 800dbaa:	2203      	movs	r2, #3
 800dbac:	4650      	mov	r0, sl
 800dbae:	f7f2 fb1f 	bl	80001f0 <memchr>
 800dbb2:	b140      	cbz	r0, 800dbc6 <_svfiprintf_r+0x152>
 800dbb4:	2340      	movs	r3, #64	; 0x40
 800dbb6:	eba0 000a 	sub.w	r0, r0, sl
 800dbba:	fa03 f000 	lsl.w	r0, r3, r0
 800dbbe:	9b04      	ldr	r3, [sp, #16]
 800dbc0:	4303      	orrs	r3, r0
 800dbc2:	3401      	adds	r4, #1
 800dbc4:	9304      	str	r3, [sp, #16]
 800dbc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbca:	4826      	ldr	r0, [pc, #152]	; (800dc64 <_svfiprintf_r+0x1f0>)
 800dbcc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dbd0:	2206      	movs	r2, #6
 800dbd2:	f7f2 fb0d 	bl	80001f0 <memchr>
 800dbd6:	2800      	cmp	r0, #0
 800dbd8:	d038      	beq.n	800dc4c <_svfiprintf_r+0x1d8>
 800dbda:	4b23      	ldr	r3, [pc, #140]	; (800dc68 <_svfiprintf_r+0x1f4>)
 800dbdc:	bb1b      	cbnz	r3, 800dc26 <_svfiprintf_r+0x1b2>
 800dbde:	9b03      	ldr	r3, [sp, #12]
 800dbe0:	3307      	adds	r3, #7
 800dbe2:	f023 0307 	bic.w	r3, r3, #7
 800dbe6:	3308      	adds	r3, #8
 800dbe8:	9303      	str	r3, [sp, #12]
 800dbea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbec:	4433      	add	r3, r6
 800dbee:	9309      	str	r3, [sp, #36]	; 0x24
 800dbf0:	e767      	b.n	800dac2 <_svfiprintf_r+0x4e>
 800dbf2:	fb0c 3202 	mla	r2, ip, r2, r3
 800dbf6:	460c      	mov	r4, r1
 800dbf8:	2001      	movs	r0, #1
 800dbfa:	e7a5      	b.n	800db48 <_svfiprintf_r+0xd4>
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	3401      	adds	r4, #1
 800dc00:	9305      	str	r3, [sp, #20]
 800dc02:	4619      	mov	r1, r3
 800dc04:	f04f 0c0a 	mov.w	ip, #10
 800dc08:	4620      	mov	r0, r4
 800dc0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc0e:	3a30      	subs	r2, #48	; 0x30
 800dc10:	2a09      	cmp	r2, #9
 800dc12:	d903      	bls.n	800dc1c <_svfiprintf_r+0x1a8>
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d0c5      	beq.n	800dba4 <_svfiprintf_r+0x130>
 800dc18:	9105      	str	r1, [sp, #20]
 800dc1a:	e7c3      	b.n	800dba4 <_svfiprintf_r+0x130>
 800dc1c:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc20:	4604      	mov	r4, r0
 800dc22:	2301      	movs	r3, #1
 800dc24:	e7f0      	b.n	800dc08 <_svfiprintf_r+0x194>
 800dc26:	ab03      	add	r3, sp, #12
 800dc28:	9300      	str	r3, [sp, #0]
 800dc2a:	462a      	mov	r2, r5
 800dc2c:	4b0f      	ldr	r3, [pc, #60]	; (800dc6c <_svfiprintf_r+0x1f8>)
 800dc2e:	a904      	add	r1, sp, #16
 800dc30:	4638      	mov	r0, r7
 800dc32:	f7fe f80d 	bl	800bc50 <_printf_float>
 800dc36:	1c42      	adds	r2, r0, #1
 800dc38:	4606      	mov	r6, r0
 800dc3a:	d1d6      	bne.n	800dbea <_svfiprintf_r+0x176>
 800dc3c:	89ab      	ldrh	r3, [r5, #12]
 800dc3e:	065b      	lsls	r3, r3, #25
 800dc40:	f53f af2c 	bmi.w	800da9c <_svfiprintf_r+0x28>
 800dc44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc46:	b01d      	add	sp, #116	; 0x74
 800dc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc4c:	ab03      	add	r3, sp, #12
 800dc4e:	9300      	str	r3, [sp, #0]
 800dc50:	462a      	mov	r2, r5
 800dc52:	4b06      	ldr	r3, [pc, #24]	; (800dc6c <_svfiprintf_r+0x1f8>)
 800dc54:	a904      	add	r1, sp, #16
 800dc56:	4638      	mov	r0, r7
 800dc58:	f7fe fa9e 	bl	800c198 <_printf_i>
 800dc5c:	e7eb      	b.n	800dc36 <_svfiprintf_r+0x1c2>
 800dc5e:	bf00      	nop
 800dc60:	0800ec64 	.word	0x0800ec64
 800dc64:	0800ec6e 	.word	0x0800ec6e
 800dc68:	0800bc51 	.word	0x0800bc51
 800dc6c:	0800d9bd 	.word	0x0800d9bd
 800dc70:	0800ec6a 	.word	0x0800ec6a

0800dc74 <_sbrk_r>:
 800dc74:	b538      	push	{r3, r4, r5, lr}
 800dc76:	4d06      	ldr	r5, [pc, #24]	; (800dc90 <_sbrk_r+0x1c>)
 800dc78:	2300      	movs	r3, #0
 800dc7a:	4604      	mov	r4, r0
 800dc7c:	4608      	mov	r0, r1
 800dc7e:	602b      	str	r3, [r5, #0]
 800dc80:	f000 fe14 	bl	800e8ac <_sbrk>
 800dc84:	1c43      	adds	r3, r0, #1
 800dc86:	d102      	bne.n	800dc8e <_sbrk_r+0x1a>
 800dc88:	682b      	ldr	r3, [r5, #0]
 800dc8a:	b103      	cbz	r3, 800dc8e <_sbrk_r+0x1a>
 800dc8c:	6023      	str	r3, [r4, #0]
 800dc8e:	bd38      	pop	{r3, r4, r5, pc}
 800dc90:	20003a48 	.word	0x20003a48

0800dc94 <__assert_func>:
 800dc94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc96:	4614      	mov	r4, r2
 800dc98:	461a      	mov	r2, r3
 800dc9a:	4b09      	ldr	r3, [pc, #36]	; (800dcc0 <__assert_func+0x2c>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	4605      	mov	r5, r0
 800dca0:	68d8      	ldr	r0, [r3, #12]
 800dca2:	b14c      	cbz	r4, 800dcb8 <__assert_func+0x24>
 800dca4:	4b07      	ldr	r3, [pc, #28]	; (800dcc4 <__assert_func+0x30>)
 800dca6:	9100      	str	r1, [sp, #0]
 800dca8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dcac:	4906      	ldr	r1, [pc, #24]	; (800dcc8 <__assert_func+0x34>)
 800dcae:	462b      	mov	r3, r5
 800dcb0:	f000 f80e 	bl	800dcd0 <fiprintf>
 800dcb4:	f000 faa4 	bl	800e200 <abort>
 800dcb8:	4b04      	ldr	r3, [pc, #16]	; (800dccc <__assert_func+0x38>)
 800dcba:	461c      	mov	r4, r3
 800dcbc:	e7f3      	b.n	800dca6 <__assert_func+0x12>
 800dcbe:	bf00      	nop
 800dcc0:	20000180 	.word	0x20000180
 800dcc4:	0800ec75 	.word	0x0800ec75
 800dcc8:	0800ec82 	.word	0x0800ec82
 800dccc:	0800ecb0 	.word	0x0800ecb0

0800dcd0 <fiprintf>:
 800dcd0:	b40e      	push	{r1, r2, r3}
 800dcd2:	b503      	push	{r0, r1, lr}
 800dcd4:	4601      	mov	r1, r0
 800dcd6:	ab03      	add	r3, sp, #12
 800dcd8:	4805      	ldr	r0, [pc, #20]	; (800dcf0 <fiprintf+0x20>)
 800dcda:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcde:	6800      	ldr	r0, [r0, #0]
 800dce0:	9301      	str	r3, [sp, #4]
 800dce2:	f000 f88f 	bl	800de04 <_vfiprintf_r>
 800dce6:	b002      	add	sp, #8
 800dce8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dcec:	b003      	add	sp, #12
 800dcee:	4770      	bx	lr
 800dcf0:	20000180 	.word	0x20000180

0800dcf4 <__ascii_mbtowc>:
 800dcf4:	b082      	sub	sp, #8
 800dcf6:	b901      	cbnz	r1, 800dcfa <__ascii_mbtowc+0x6>
 800dcf8:	a901      	add	r1, sp, #4
 800dcfa:	b142      	cbz	r2, 800dd0e <__ascii_mbtowc+0x1a>
 800dcfc:	b14b      	cbz	r3, 800dd12 <__ascii_mbtowc+0x1e>
 800dcfe:	7813      	ldrb	r3, [r2, #0]
 800dd00:	600b      	str	r3, [r1, #0]
 800dd02:	7812      	ldrb	r2, [r2, #0]
 800dd04:	1e10      	subs	r0, r2, #0
 800dd06:	bf18      	it	ne
 800dd08:	2001      	movne	r0, #1
 800dd0a:	b002      	add	sp, #8
 800dd0c:	4770      	bx	lr
 800dd0e:	4610      	mov	r0, r2
 800dd10:	e7fb      	b.n	800dd0a <__ascii_mbtowc+0x16>
 800dd12:	f06f 0001 	mvn.w	r0, #1
 800dd16:	e7f8      	b.n	800dd0a <__ascii_mbtowc+0x16>

0800dd18 <memmove>:
 800dd18:	4288      	cmp	r0, r1
 800dd1a:	b510      	push	{r4, lr}
 800dd1c:	eb01 0402 	add.w	r4, r1, r2
 800dd20:	d902      	bls.n	800dd28 <memmove+0x10>
 800dd22:	4284      	cmp	r4, r0
 800dd24:	4623      	mov	r3, r4
 800dd26:	d807      	bhi.n	800dd38 <memmove+0x20>
 800dd28:	1e43      	subs	r3, r0, #1
 800dd2a:	42a1      	cmp	r1, r4
 800dd2c:	d008      	beq.n	800dd40 <memmove+0x28>
 800dd2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd32:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd36:	e7f8      	b.n	800dd2a <memmove+0x12>
 800dd38:	4402      	add	r2, r0
 800dd3a:	4601      	mov	r1, r0
 800dd3c:	428a      	cmp	r2, r1
 800dd3e:	d100      	bne.n	800dd42 <memmove+0x2a>
 800dd40:	bd10      	pop	{r4, pc}
 800dd42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd4a:	e7f7      	b.n	800dd3c <memmove+0x24>

0800dd4c <__malloc_lock>:
 800dd4c:	4801      	ldr	r0, [pc, #4]	; (800dd54 <__malloc_lock+0x8>)
 800dd4e:	f000 bc17 	b.w	800e580 <__retarget_lock_acquire_recursive>
 800dd52:	bf00      	nop
 800dd54:	20003a50 	.word	0x20003a50

0800dd58 <__malloc_unlock>:
 800dd58:	4801      	ldr	r0, [pc, #4]	; (800dd60 <__malloc_unlock+0x8>)
 800dd5a:	f000 bc12 	b.w	800e582 <__retarget_lock_release_recursive>
 800dd5e:	bf00      	nop
 800dd60:	20003a50 	.word	0x20003a50

0800dd64 <_realloc_r>:
 800dd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd66:	4607      	mov	r7, r0
 800dd68:	4614      	mov	r4, r2
 800dd6a:	460e      	mov	r6, r1
 800dd6c:	b921      	cbnz	r1, 800dd78 <_realloc_r+0x14>
 800dd6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dd72:	4611      	mov	r1, r2
 800dd74:	f7ff bdc8 	b.w	800d908 <_malloc_r>
 800dd78:	b922      	cbnz	r2, 800dd84 <_realloc_r+0x20>
 800dd7a:	f7ff fd75 	bl	800d868 <_free_r>
 800dd7e:	4625      	mov	r5, r4
 800dd80:	4628      	mov	r0, r5
 800dd82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd84:	f000 fc62 	bl	800e64c <_malloc_usable_size_r>
 800dd88:	42a0      	cmp	r0, r4
 800dd8a:	d20f      	bcs.n	800ddac <_realloc_r+0x48>
 800dd8c:	4621      	mov	r1, r4
 800dd8e:	4638      	mov	r0, r7
 800dd90:	f7ff fdba 	bl	800d908 <_malloc_r>
 800dd94:	4605      	mov	r5, r0
 800dd96:	2800      	cmp	r0, #0
 800dd98:	d0f2      	beq.n	800dd80 <_realloc_r+0x1c>
 800dd9a:	4631      	mov	r1, r6
 800dd9c:	4622      	mov	r2, r4
 800dd9e:	f7ff f9c7 	bl	800d130 <memcpy>
 800dda2:	4631      	mov	r1, r6
 800dda4:	4638      	mov	r0, r7
 800dda6:	f7ff fd5f 	bl	800d868 <_free_r>
 800ddaa:	e7e9      	b.n	800dd80 <_realloc_r+0x1c>
 800ddac:	4635      	mov	r5, r6
 800ddae:	e7e7      	b.n	800dd80 <_realloc_r+0x1c>

0800ddb0 <__sfputc_r>:
 800ddb0:	6893      	ldr	r3, [r2, #8]
 800ddb2:	3b01      	subs	r3, #1
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	b410      	push	{r4}
 800ddb8:	6093      	str	r3, [r2, #8]
 800ddba:	da08      	bge.n	800ddce <__sfputc_r+0x1e>
 800ddbc:	6994      	ldr	r4, [r2, #24]
 800ddbe:	42a3      	cmp	r3, r4
 800ddc0:	db01      	blt.n	800ddc6 <__sfputc_r+0x16>
 800ddc2:	290a      	cmp	r1, #10
 800ddc4:	d103      	bne.n	800ddce <__sfputc_r+0x1e>
 800ddc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddca:	f000 b94b 	b.w	800e064 <__swbuf_r>
 800ddce:	6813      	ldr	r3, [r2, #0]
 800ddd0:	1c58      	adds	r0, r3, #1
 800ddd2:	6010      	str	r0, [r2, #0]
 800ddd4:	7019      	strb	r1, [r3, #0]
 800ddd6:	4608      	mov	r0, r1
 800ddd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dddc:	4770      	bx	lr

0800ddde <__sfputs_r>:
 800ddde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dde0:	4606      	mov	r6, r0
 800dde2:	460f      	mov	r7, r1
 800dde4:	4614      	mov	r4, r2
 800dde6:	18d5      	adds	r5, r2, r3
 800dde8:	42ac      	cmp	r4, r5
 800ddea:	d101      	bne.n	800ddf0 <__sfputs_r+0x12>
 800ddec:	2000      	movs	r0, #0
 800ddee:	e007      	b.n	800de00 <__sfputs_r+0x22>
 800ddf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddf4:	463a      	mov	r2, r7
 800ddf6:	4630      	mov	r0, r6
 800ddf8:	f7ff ffda 	bl	800ddb0 <__sfputc_r>
 800ddfc:	1c43      	adds	r3, r0, #1
 800ddfe:	d1f3      	bne.n	800dde8 <__sfputs_r+0xa>
 800de00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800de04 <_vfiprintf_r>:
 800de04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de08:	460d      	mov	r5, r1
 800de0a:	b09d      	sub	sp, #116	; 0x74
 800de0c:	4614      	mov	r4, r2
 800de0e:	4698      	mov	r8, r3
 800de10:	4606      	mov	r6, r0
 800de12:	b118      	cbz	r0, 800de1c <_vfiprintf_r+0x18>
 800de14:	6983      	ldr	r3, [r0, #24]
 800de16:	b90b      	cbnz	r3, 800de1c <_vfiprintf_r+0x18>
 800de18:	f000 fb14 	bl	800e444 <__sinit>
 800de1c:	4b89      	ldr	r3, [pc, #548]	; (800e044 <_vfiprintf_r+0x240>)
 800de1e:	429d      	cmp	r5, r3
 800de20:	d11b      	bne.n	800de5a <_vfiprintf_r+0x56>
 800de22:	6875      	ldr	r5, [r6, #4]
 800de24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de26:	07d9      	lsls	r1, r3, #31
 800de28:	d405      	bmi.n	800de36 <_vfiprintf_r+0x32>
 800de2a:	89ab      	ldrh	r3, [r5, #12]
 800de2c:	059a      	lsls	r2, r3, #22
 800de2e:	d402      	bmi.n	800de36 <_vfiprintf_r+0x32>
 800de30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de32:	f000 fba5 	bl	800e580 <__retarget_lock_acquire_recursive>
 800de36:	89ab      	ldrh	r3, [r5, #12]
 800de38:	071b      	lsls	r3, r3, #28
 800de3a:	d501      	bpl.n	800de40 <_vfiprintf_r+0x3c>
 800de3c:	692b      	ldr	r3, [r5, #16]
 800de3e:	b9eb      	cbnz	r3, 800de7c <_vfiprintf_r+0x78>
 800de40:	4629      	mov	r1, r5
 800de42:	4630      	mov	r0, r6
 800de44:	f000 f96e 	bl	800e124 <__swsetup_r>
 800de48:	b1c0      	cbz	r0, 800de7c <_vfiprintf_r+0x78>
 800de4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de4c:	07dc      	lsls	r4, r3, #31
 800de4e:	d50e      	bpl.n	800de6e <_vfiprintf_r+0x6a>
 800de50:	f04f 30ff 	mov.w	r0, #4294967295
 800de54:	b01d      	add	sp, #116	; 0x74
 800de56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de5a:	4b7b      	ldr	r3, [pc, #492]	; (800e048 <_vfiprintf_r+0x244>)
 800de5c:	429d      	cmp	r5, r3
 800de5e:	d101      	bne.n	800de64 <_vfiprintf_r+0x60>
 800de60:	68b5      	ldr	r5, [r6, #8]
 800de62:	e7df      	b.n	800de24 <_vfiprintf_r+0x20>
 800de64:	4b79      	ldr	r3, [pc, #484]	; (800e04c <_vfiprintf_r+0x248>)
 800de66:	429d      	cmp	r5, r3
 800de68:	bf08      	it	eq
 800de6a:	68f5      	ldreq	r5, [r6, #12]
 800de6c:	e7da      	b.n	800de24 <_vfiprintf_r+0x20>
 800de6e:	89ab      	ldrh	r3, [r5, #12]
 800de70:	0598      	lsls	r0, r3, #22
 800de72:	d4ed      	bmi.n	800de50 <_vfiprintf_r+0x4c>
 800de74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de76:	f000 fb84 	bl	800e582 <__retarget_lock_release_recursive>
 800de7a:	e7e9      	b.n	800de50 <_vfiprintf_r+0x4c>
 800de7c:	2300      	movs	r3, #0
 800de7e:	9309      	str	r3, [sp, #36]	; 0x24
 800de80:	2320      	movs	r3, #32
 800de82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de86:	f8cd 800c 	str.w	r8, [sp, #12]
 800de8a:	2330      	movs	r3, #48	; 0x30
 800de8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e050 <_vfiprintf_r+0x24c>
 800de90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de94:	f04f 0901 	mov.w	r9, #1
 800de98:	4623      	mov	r3, r4
 800de9a:	469a      	mov	sl, r3
 800de9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dea0:	b10a      	cbz	r2, 800dea6 <_vfiprintf_r+0xa2>
 800dea2:	2a25      	cmp	r2, #37	; 0x25
 800dea4:	d1f9      	bne.n	800de9a <_vfiprintf_r+0x96>
 800dea6:	ebba 0b04 	subs.w	fp, sl, r4
 800deaa:	d00b      	beq.n	800dec4 <_vfiprintf_r+0xc0>
 800deac:	465b      	mov	r3, fp
 800deae:	4622      	mov	r2, r4
 800deb0:	4629      	mov	r1, r5
 800deb2:	4630      	mov	r0, r6
 800deb4:	f7ff ff93 	bl	800ddde <__sfputs_r>
 800deb8:	3001      	adds	r0, #1
 800deba:	f000 80aa 	beq.w	800e012 <_vfiprintf_r+0x20e>
 800debe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dec0:	445a      	add	r2, fp
 800dec2:	9209      	str	r2, [sp, #36]	; 0x24
 800dec4:	f89a 3000 	ldrb.w	r3, [sl]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	f000 80a2 	beq.w	800e012 <_vfiprintf_r+0x20e>
 800dece:	2300      	movs	r3, #0
 800ded0:	f04f 32ff 	mov.w	r2, #4294967295
 800ded4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ded8:	f10a 0a01 	add.w	sl, sl, #1
 800dedc:	9304      	str	r3, [sp, #16]
 800dede:	9307      	str	r3, [sp, #28]
 800dee0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dee4:	931a      	str	r3, [sp, #104]	; 0x68
 800dee6:	4654      	mov	r4, sl
 800dee8:	2205      	movs	r2, #5
 800deea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800deee:	4858      	ldr	r0, [pc, #352]	; (800e050 <_vfiprintf_r+0x24c>)
 800def0:	f7f2 f97e 	bl	80001f0 <memchr>
 800def4:	9a04      	ldr	r2, [sp, #16]
 800def6:	b9d8      	cbnz	r0, 800df30 <_vfiprintf_r+0x12c>
 800def8:	06d1      	lsls	r1, r2, #27
 800defa:	bf44      	itt	mi
 800defc:	2320      	movmi	r3, #32
 800defe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df02:	0713      	lsls	r3, r2, #28
 800df04:	bf44      	itt	mi
 800df06:	232b      	movmi	r3, #43	; 0x2b
 800df08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df0c:	f89a 3000 	ldrb.w	r3, [sl]
 800df10:	2b2a      	cmp	r3, #42	; 0x2a
 800df12:	d015      	beq.n	800df40 <_vfiprintf_r+0x13c>
 800df14:	9a07      	ldr	r2, [sp, #28]
 800df16:	4654      	mov	r4, sl
 800df18:	2000      	movs	r0, #0
 800df1a:	f04f 0c0a 	mov.w	ip, #10
 800df1e:	4621      	mov	r1, r4
 800df20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df24:	3b30      	subs	r3, #48	; 0x30
 800df26:	2b09      	cmp	r3, #9
 800df28:	d94e      	bls.n	800dfc8 <_vfiprintf_r+0x1c4>
 800df2a:	b1b0      	cbz	r0, 800df5a <_vfiprintf_r+0x156>
 800df2c:	9207      	str	r2, [sp, #28]
 800df2e:	e014      	b.n	800df5a <_vfiprintf_r+0x156>
 800df30:	eba0 0308 	sub.w	r3, r0, r8
 800df34:	fa09 f303 	lsl.w	r3, r9, r3
 800df38:	4313      	orrs	r3, r2
 800df3a:	9304      	str	r3, [sp, #16]
 800df3c:	46a2      	mov	sl, r4
 800df3e:	e7d2      	b.n	800dee6 <_vfiprintf_r+0xe2>
 800df40:	9b03      	ldr	r3, [sp, #12]
 800df42:	1d19      	adds	r1, r3, #4
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	9103      	str	r1, [sp, #12]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	bfbb      	ittet	lt
 800df4c:	425b      	neglt	r3, r3
 800df4e:	f042 0202 	orrlt.w	r2, r2, #2
 800df52:	9307      	strge	r3, [sp, #28]
 800df54:	9307      	strlt	r3, [sp, #28]
 800df56:	bfb8      	it	lt
 800df58:	9204      	strlt	r2, [sp, #16]
 800df5a:	7823      	ldrb	r3, [r4, #0]
 800df5c:	2b2e      	cmp	r3, #46	; 0x2e
 800df5e:	d10c      	bne.n	800df7a <_vfiprintf_r+0x176>
 800df60:	7863      	ldrb	r3, [r4, #1]
 800df62:	2b2a      	cmp	r3, #42	; 0x2a
 800df64:	d135      	bne.n	800dfd2 <_vfiprintf_r+0x1ce>
 800df66:	9b03      	ldr	r3, [sp, #12]
 800df68:	1d1a      	adds	r2, r3, #4
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	9203      	str	r2, [sp, #12]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	bfb8      	it	lt
 800df72:	f04f 33ff 	movlt.w	r3, #4294967295
 800df76:	3402      	adds	r4, #2
 800df78:	9305      	str	r3, [sp, #20]
 800df7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e060 <_vfiprintf_r+0x25c>
 800df7e:	7821      	ldrb	r1, [r4, #0]
 800df80:	2203      	movs	r2, #3
 800df82:	4650      	mov	r0, sl
 800df84:	f7f2 f934 	bl	80001f0 <memchr>
 800df88:	b140      	cbz	r0, 800df9c <_vfiprintf_r+0x198>
 800df8a:	2340      	movs	r3, #64	; 0x40
 800df8c:	eba0 000a 	sub.w	r0, r0, sl
 800df90:	fa03 f000 	lsl.w	r0, r3, r0
 800df94:	9b04      	ldr	r3, [sp, #16]
 800df96:	4303      	orrs	r3, r0
 800df98:	3401      	adds	r4, #1
 800df9a:	9304      	str	r3, [sp, #16]
 800df9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfa0:	482c      	ldr	r0, [pc, #176]	; (800e054 <_vfiprintf_r+0x250>)
 800dfa2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dfa6:	2206      	movs	r2, #6
 800dfa8:	f7f2 f922 	bl	80001f0 <memchr>
 800dfac:	2800      	cmp	r0, #0
 800dfae:	d03f      	beq.n	800e030 <_vfiprintf_r+0x22c>
 800dfb0:	4b29      	ldr	r3, [pc, #164]	; (800e058 <_vfiprintf_r+0x254>)
 800dfb2:	bb1b      	cbnz	r3, 800dffc <_vfiprintf_r+0x1f8>
 800dfb4:	9b03      	ldr	r3, [sp, #12]
 800dfb6:	3307      	adds	r3, #7
 800dfb8:	f023 0307 	bic.w	r3, r3, #7
 800dfbc:	3308      	adds	r3, #8
 800dfbe:	9303      	str	r3, [sp, #12]
 800dfc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfc2:	443b      	add	r3, r7
 800dfc4:	9309      	str	r3, [sp, #36]	; 0x24
 800dfc6:	e767      	b.n	800de98 <_vfiprintf_r+0x94>
 800dfc8:	fb0c 3202 	mla	r2, ip, r2, r3
 800dfcc:	460c      	mov	r4, r1
 800dfce:	2001      	movs	r0, #1
 800dfd0:	e7a5      	b.n	800df1e <_vfiprintf_r+0x11a>
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	3401      	adds	r4, #1
 800dfd6:	9305      	str	r3, [sp, #20]
 800dfd8:	4619      	mov	r1, r3
 800dfda:	f04f 0c0a 	mov.w	ip, #10
 800dfde:	4620      	mov	r0, r4
 800dfe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfe4:	3a30      	subs	r2, #48	; 0x30
 800dfe6:	2a09      	cmp	r2, #9
 800dfe8:	d903      	bls.n	800dff2 <_vfiprintf_r+0x1ee>
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d0c5      	beq.n	800df7a <_vfiprintf_r+0x176>
 800dfee:	9105      	str	r1, [sp, #20]
 800dff0:	e7c3      	b.n	800df7a <_vfiprintf_r+0x176>
 800dff2:	fb0c 2101 	mla	r1, ip, r1, r2
 800dff6:	4604      	mov	r4, r0
 800dff8:	2301      	movs	r3, #1
 800dffa:	e7f0      	b.n	800dfde <_vfiprintf_r+0x1da>
 800dffc:	ab03      	add	r3, sp, #12
 800dffe:	9300      	str	r3, [sp, #0]
 800e000:	462a      	mov	r2, r5
 800e002:	4b16      	ldr	r3, [pc, #88]	; (800e05c <_vfiprintf_r+0x258>)
 800e004:	a904      	add	r1, sp, #16
 800e006:	4630      	mov	r0, r6
 800e008:	f7fd fe22 	bl	800bc50 <_printf_float>
 800e00c:	4607      	mov	r7, r0
 800e00e:	1c78      	adds	r0, r7, #1
 800e010:	d1d6      	bne.n	800dfc0 <_vfiprintf_r+0x1bc>
 800e012:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e014:	07d9      	lsls	r1, r3, #31
 800e016:	d405      	bmi.n	800e024 <_vfiprintf_r+0x220>
 800e018:	89ab      	ldrh	r3, [r5, #12]
 800e01a:	059a      	lsls	r2, r3, #22
 800e01c:	d402      	bmi.n	800e024 <_vfiprintf_r+0x220>
 800e01e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e020:	f000 faaf 	bl	800e582 <__retarget_lock_release_recursive>
 800e024:	89ab      	ldrh	r3, [r5, #12]
 800e026:	065b      	lsls	r3, r3, #25
 800e028:	f53f af12 	bmi.w	800de50 <_vfiprintf_r+0x4c>
 800e02c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e02e:	e711      	b.n	800de54 <_vfiprintf_r+0x50>
 800e030:	ab03      	add	r3, sp, #12
 800e032:	9300      	str	r3, [sp, #0]
 800e034:	462a      	mov	r2, r5
 800e036:	4b09      	ldr	r3, [pc, #36]	; (800e05c <_vfiprintf_r+0x258>)
 800e038:	a904      	add	r1, sp, #16
 800e03a:	4630      	mov	r0, r6
 800e03c:	f7fe f8ac 	bl	800c198 <_printf_i>
 800e040:	e7e4      	b.n	800e00c <_vfiprintf_r+0x208>
 800e042:	bf00      	nop
 800e044:	0800eddc 	.word	0x0800eddc
 800e048:	0800edfc 	.word	0x0800edfc
 800e04c:	0800edbc 	.word	0x0800edbc
 800e050:	0800ec64 	.word	0x0800ec64
 800e054:	0800ec6e 	.word	0x0800ec6e
 800e058:	0800bc51 	.word	0x0800bc51
 800e05c:	0800dddf 	.word	0x0800dddf
 800e060:	0800ec6a 	.word	0x0800ec6a

0800e064 <__swbuf_r>:
 800e064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e066:	460e      	mov	r6, r1
 800e068:	4614      	mov	r4, r2
 800e06a:	4605      	mov	r5, r0
 800e06c:	b118      	cbz	r0, 800e076 <__swbuf_r+0x12>
 800e06e:	6983      	ldr	r3, [r0, #24]
 800e070:	b90b      	cbnz	r3, 800e076 <__swbuf_r+0x12>
 800e072:	f000 f9e7 	bl	800e444 <__sinit>
 800e076:	4b21      	ldr	r3, [pc, #132]	; (800e0fc <__swbuf_r+0x98>)
 800e078:	429c      	cmp	r4, r3
 800e07a:	d12b      	bne.n	800e0d4 <__swbuf_r+0x70>
 800e07c:	686c      	ldr	r4, [r5, #4]
 800e07e:	69a3      	ldr	r3, [r4, #24]
 800e080:	60a3      	str	r3, [r4, #8]
 800e082:	89a3      	ldrh	r3, [r4, #12]
 800e084:	071a      	lsls	r2, r3, #28
 800e086:	d52f      	bpl.n	800e0e8 <__swbuf_r+0x84>
 800e088:	6923      	ldr	r3, [r4, #16]
 800e08a:	b36b      	cbz	r3, 800e0e8 <__swbuf_r+0x84>
 800e08c:	6923      	ldr	r3, [r4, #16]
 800e08e:	6820      	ldr	r0, [r4, #0]
 800e090:	1ac0      	subs	r0, r0, r3
 800e092:	6963      	ldr	r3, [r4, #20]
 800e094:	b2f6      	uxtb	r6, r6
 800e096:	4283      	cmp	r3, r0
 800e098:	4637      	mov	r7, r6
 800e09a:	dc04      	bgt.n	800e0a6 <__swbuf_r+0x42>
 800e09c:	4621      	mov	r1, r4
 800e09e:	4628      	mov	r0, r5
 800e0a0:	f000 f93c 	bl	800e31c <_fflush_r>
 800e0a4:	bb30      	cbnz	r0, 800e0f4 <__swbuf_r+0x90>
 800e0a6:	68a3      	ldr	r3, [r4, #8]
 800e0a8:	3b01      	subs	r3, #1
 800e0aa:	60a3      	str	r3, [r4, #8]
 800e0ac:	6823      	ldr	r3, [r4, #0]
 800e0ae:	1c5a      	adds	r2, r3, #1
 800e0b0:	6022      	str	r2, [r4, #0]
 800e0b2:	701e      	strb	r6, [r3, #0]
 800e0b4:	6963      	ldr	r3, [r4, #20]
 800e0b6:	3001      	adds	r0, #1
 800e0b8:	4283      	cmp	r3, r0
 800e0ba:	d004      	beq.n	800e0c6 <__swbuf_r+0x62>
 800e0bc:	89a3      	ldrh	r3, [r4, #12]
 800e0be:	07db      	lsls	r3, r3, #31
 800e0c0:	d506      	bpl.n	800e0d0 <__swbuf_r+0x6c>
 800e0c2:	2e0a      	cmp	r6, #10
 800e0c4:	d104      	bne.n	800e0d0 <__swbuf_r+0x6c>
 800e0c6:	4621      	mov	r1, r4
 800e0c8:	4628      	mov	r0, r5
 800e0ca:	f000 f927 	bl	800e31c <_fflush_r>
 800e0ce:	b988      	cbnz	r0, 800e0f4 <__swbuf_r+0x90>
 800e0d0:	4638      	mov	r0, r7
 800e0d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0d4:	4b0a      	ldr	r3, [pc, #40]	; (800e100 <__swbuf_r+0x9c>)
 800e0d6:	429c      	cmp	r4, r3
 800e0d8:	d101      	bne.n	800e0de <__swbuf_r+0x7a>
 800e0da:	68ac      	ldr	r4, [r5, #8]
 800e0dc:	e7cf      	b.n	800e07e <__swbuf_r+0x1a>
 800e0de:	4b09      	ldr	r3, [pc, #36]	; (800e104 <__swbuf_r+0xa0>)
 800e0e0:	429c      	cmp	r4, r3
 800e0e2:	bf08      	it	eq
 800e0e4:	68ec      	ldreq	r4, [r5, #12]
 800e0e6:	e7ca      	b.n	800e07e <__swbuf_r+0x1a>
 800e0e8:	4621      	mov	r1, r4
 800e0ea:	4628      	mov	r0, r5
 800e0ec:	f000 f81a 	bl	800e124 <__swsetup_r>
 800e0f0:	2800      	cmp	r0, #0
 800e0f2:	d0cb      	beq.n	800e08c <__swbuf_r+0x28>
 800e0f4:	f04f 37ff 	mov.w	r7, #4294967295
 800e0f8:	e7ea      	b.n	800e0d0 <__swbuf_r+0x6c>
 800e0fa:	bf00      	nop
 800e0fc:	0800eddc 	.word	0x0800eddc
 800e100:	0800edfc 	.word	0x0800edfc
 800e104:	0800edbc 	.word	0x0800edbc

0800e108 <__ascii_wctomb>:
 800e108:	b149      	cbz	r1, 800e11e <__ascii_wctomb+0x16>
 800e10a:	2aff      	cmp	r2, #255	; 0xff
 800e10c:	bf85      	ittet	hi
 800e10e:	238a      	movhi	r3, #138	; 0x8a
 800e110:	6003      	strhi	r3, [r0, #0]
 800e112:	700a      	strbls	r2, [r1, #0]
 800e114:	f04f 30ff 	movhi.w	r0, #4294967295
 800e118:	bf98      	it	ls
 800e11a:	2001      	movls	r0, #1
 800e11c:	4770      	bx	lr
 800e11e:	4608      	mov	r0, r1
 800e120:	4770      	bx	lr
	...

0800e124 <__swsetup_r>:
 800e124:	4b32      	ldr	r3, [pc, #200]	; (800e1f0 <__swsetup_r+0xcc>)
 800e126:	b570      	push	{r4, r5, r6, lr}
 800e128:	681d      	ldr	r5, [r3, #0]
 800e12a:	4606      	mov	r6, r0
 800e12c:	460c      	mov	r4, r1
 800e12e:	b125      	cbz	r5, 800e13a <__swsetup_r+0x16>
 800e130:	69ab      	ldr	r3, [r5, #24]
 800e132:	b913      	cbnz	r3, 800e13a <__swsetup_r+0x16>
 800e134:	4628      	mov	r0, r5
 800e136:	f000 f985 	bl	800e444 <__sinit>
 800e13a:	4b2e      	ldr	r3, [pc, #184]	; (800e1f4 <__swsetup_r+0xd0>)
 800e13c:	429c      	cmp	r4, r3
 800e13e:	d10f      	bne.n	800e160 <__swsetup_r+0x3c>
 800e140:	686c      	ldr	r4, [r5, #4]
 800e142:	89a3      	ldrh	r3, [r4, #12]
 800e144:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e148:	0719      	lsls	r1, r3, #28
 800e14a:	d42c      	bmi.n	800e1a6 <__swsetup_r+0x82>
 800e14c:	06dd      	lsls	r5, r3, #27
 800e14e:	d411      	bmi.n	800e174 <__swsetup_r+0x50>
 800e150:	2309      	movs	r3, #9
 800e152:	6033      	str	r3, [r6, #0]
 800e154:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e158:	81a3      	strh	r3, [r4, #12]
 800e15a:	f04f 30ff 	mov.w	r0, #4294967295
 800e15e:	e03e      	b.n	800e1de <__swsetup_r+0xba>
 800e160:	4b25      	ldr	r3, [pc, #148]	; (800e1f8 <__swsetup_r+0xd4>)
 800e162:	429c      	cmp	r4, r3
 800e164:	d101      	bne.n	800e16a <__swsetup_r+0x46>
 800e166:	68ac      	ldr	r4, [r5, #8]
 800e168:	e7eb      	b.n	800e142 <__swsetup_r+0x1e>
 800e16a:	4b24      	ldr	r3, [pc, #144]	; (800e1fc <__swsetup_r+0xd8>)
 800e16c:	429c      	cmp	r4, r3
 800e16e:	bf08      	it	eq
 800e170:	68ec      	ldreq	r4, [r5, #12]
 800e172:	e7e6      	b.n	800e142 <__swsetup_r+0x1e>
 800e174:	0758      	lsls	r0, r3, #29
 800e176:	d512      	bpl.n	800e19e <__swsetup_r+0x7a>
 800e178:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e17a:	b141      	cbz	r1, 800e18e <__swsetup_r+0x6a>
 800e17c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e180:	4299      	cmp	r1, r3
 800e182:	d002      	beq.n	800e18a <__swsetup_r+0x66>
 800e184:	4630      	mov	r0, r6
 800e186:	f7ff fb6f 	bl	800d868 <_free_r>
 800e18a:	2300      	movs	r3, #0
 800e18c:	6363      	str	r3, [r4, #52]	; 0x34
 800e18e:	89a3      	ldrh	r3, [r4, #12]
 800e190:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e194:	81a3      	strh	r3, [r4, #12]
 800e196:	2300      	movs	r3, #0
 800e198:	6063      	str	r3, [r4, #4]
 800e19a:	6923      	ldr	r3, [r4, #16]
 800e19c:	6023      	str	r3, [r4, #0]
 800e19e:	89a3      	ldrh	r3, [r4, #12]
 800e1a0:	f043 0308 	orr.w	r3, r3, #8
 800e1a4:	81a3      	strh	r3, [r4, #12]
 800e1a6:	6923      	ldr	r3, [r4, #16]
 800e1a8:	b94b      	cbnz	r3, 800e1be <__swsetup_r+0x9a>
 800e1aa:	89a3      	ldrh	r3, [r4, #12]
 800e1ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e1b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e1b4:	d003      	beq.n	800e1be <__swsetup_r+0x9a>
 800e1b6:	4621      	mov	r1, r4
 800e1b8:	4630      	mov	r0, r6
 800e1ba:	f000 fa07 	bl	800e5cc <__smakebuf_r>
 800e1be:	89a0      	ldrh	r0, [r4, #12]
 800e1c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e1c4:	f010 0301 	ands.w	r3, r0, #1
 800e1c8:	d00a      	beq.n	800e1e0 <__swsetup_r+0xbc>
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	60a3      	str	r3, [r4, #8]
 800e1ce:	6963      	ldr	r3, [r4, #20]
 800e1d0:	425b      	negs	r3, r3
 800e1d2:	61a3      	str	r3, [r4, #24]
 800e1d4:	6923      	ldr	r3, [r4, #16]
 800e1d6:	b943      	cbnz	r3, 800e1ea <__swsetup_r+0xc6>
 800e1d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e1dc:	d1ba      	bne.n	800e154 <__swsetup_r+0x30>
 800e1de:	bd70      	pop	{r4, r5, r6, pc}
 800e1e0:	0781      	lsls	r1, r0, #30
 800e1e2:	bf58      	it	pl
 800e1e4:	6963      	ldrpl	r3, [r4, #20]
 800e1e6:	60a3      	str	r3, [r4, #8]
 800e1e8:	e7f4      	b.n	800e1d4 <__swsetup_r+0xb0>
 800e1ea:	2000      	movs	r0, #0
 800e1ec:	e7f7      	b.n	800e1de <__swsetup_r+0xba>
 800e1ee:	bf00      	nop
 800e1f0:	20000180 	.word	0x20000180
 800e1f4:	0800eddc 	.word	0x0800eddc
 800e1f8:	0800edfc 	.word	0x0800edfc
 800e1fc:	0800edbc 	.word	0x0800edbc

0800e200 <abort>:
 800e200:	b508      	push	{r3, lr}
 800e202:	2006      	movs	r0, #6
 800e204:	f000 fa52 	bl	800e6ac <raise>
 800e208:	2001      	movs	r0, #1
 800e20a:	f000 fb65 	bl	800e8d8 <_exit>
	...

0800e210 <__sflush_r>:
 800e210:	898a      	ldrh	r2, [r1, #12]
 800e212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e216:	4605      	mov	r5, r0
 800e218:	0710      	lsls	r0, r2, #28
 800e21a:	460c      	mov	r4, r1
 800e21c:	d458      	bmi.n	800e2d0 <__sflush_r+0xc0>
 800e21e:	684b      	ldr	r3, [r1, #4]
 800e220:	2b00      	cmp	r3, #0
 800e222:	dc05      	bgt.n	800e230 <__sflush_r+0x20>
 800e224:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e226:	2b00      	cmp	r3, #0
 800e228:	dc02      	bgt.n	800e230 <__sflush_r+0x20>
 800e22a:	2000      	movs	r0, #0
 800e22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e230:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e232:	2e00      	cmp	r6, #0
 800e234:	d0f9      	beq.n	800e22a <__sflush_r+0x1a>
 800e236:	2300      	movs	r3, #0
 800e238:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e23c:	682f      	ldr	r7, [r5, #0]
 800e23e:	602b      	str	r3, [r5, #0]
 800e240:	d032      	beq.n	800e2a8 <__sflush_r+0x98>
 800e242:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e244:	89a3      	ldrh	r3, [r4, #12]
 800e246:	075a      	lsls	r2, r3, #29
 800e248:	d505      	bpl.n	800e256 <__sflush_r+0x46>
 800e24a:	6863      	ldr	r3, [r4, #4]
 800e24c:	1ac0      	subs	r0, r0, r3
 800e24e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e250:	b10b      	cbz	r3, 800e256 <__sflush_r+0x46>
 800e252:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e254:	1ac0      	subs	r0, r0, r3
 800e256:	2300      	movs	r3, #0
 800e258:	4602      	mov	r2, r0
 800e25a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e25c:	6a21      	ldr	r1, [r4, #32]
 800e25e:	4628      	mov	r0, r5
 800e260:	47b0      	blx	r6
 800e262:	1c43      	adds	r3, r0, #1
 800e264:	89a3      	ldrh	r3, [r4, #12]
 800e266:	d106      	bne.n	800e276 <__sflush_r+0x66>
 800e268:	6829      	ldr	r1, [r5, #0]
 800e26a:	291d      	cmp	r1, #29
 800e26c:	d82c      	bhi.n	800e2c8 <__sflush_r+0xb8>
 800e26e:	4a2a      	ldr	r2, [pc, #168]	; (800e318 <__sflush_r+0x108>)
 800e270:	40ca      	lsrs	r2, r1
 800e272:	07d6      	lsls	r6, r2, #31
 800e274:	d528      	bpl.n	800e2c8 <__sflush_r+0xb8>
 800e276:	2200      	movs	r2, #0
 800e278:	6062      	str	r2, [r4, #4]
 800e27a:	04d9      	lsls	r1, r3, #19
 800e27c:	6922      	ldr	r2, [r4, #16]
 800e27e:	6022      	str	r2, [r4, #0]
 800e280:	d504      	bpl.n	800e28c <__sflush_r+0x7c>
 800e282:	1c42      	adds	r2, r0, #1
 800e284:	d101      	bne.n	800e28a <__sflush_r+0x7a>
 800e286:	682b      	ldr	r3, [r5, #0]
 800e288:	b903      	cbnz	r3, 800e28c <__sflush_r+0x7c>
 800e28a:	6560      	str	r0, [r4, #84]	; 0x54
 800e28c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e28e:	602f      	str	r7, [r5, #0]
 800e290:	2900      	cmp	r1, #0
 800e292:	d0ca      	beq.n	800e22a <__sflush_r+0x1a>
 800e294:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e298:	4299      	cmp	r1, r3
 800e29a:	d002      	beq.n	800e2a2 <__sflush_r+0x92>
 800e29c:	4628      	mov	r0, r5
 800e29e:	f7ff fae3 	bl	800d868 <_free_r>
 800e2a2:	2000      	movs	r0, #0
 800e2a4:	6360      	str	r0, [r4, #52]	; 0x34
 800e2a6:	e7c1      	b.n	800e22c <__sflush_r+0x1c>
 800e2a8:	6a21      	ldr	r1, [r4, #32]
 800e2aa:	2301      	movs	r3, #1
 800e2ac:	4628      	mov	r0, r5
 800e2ae:	47b0      	blx	r6
 800e2b0:	1c41      	adds	r1, r0, #1
 800e2b2:	d1c7      	bne.n	800e244 <__sflush_r+0x34>
 800e2b4:	682b      	ldr	r3, [r5, #0]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d0c4      	beq.n	800e244 <__sflush_r+0x34>
 800e2ba:	2b1d      	cmp	r3, #29
 800e2bc:	d001      	beq.n	800e2c2 <__sflush_r+0xb2>
 800e2be:	2b16      	cmp	r3, #22
 800e2c0:	d101      	bne.n	800e2c6 <__sflush_r+0xb6>
 800e2c2:	602f      	str	r7, [r5, #0]
 800e2c4:	e7b1      	b.n	800e22a <__sflush_r+0x1a>
 800e2c6:	89a3      	ldrh	r3, [r4, #12]
 800e2c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2cc:	81a3      	strh	r3, [r4, #12]
 800e2ce:	e7ad      	b.n	800e22c <__sflush_r+0x1c>
 800e2d0:	690f      	ldr	r7, [r1, #16]
 800e2d2:	2f00      	cmp	r7, #0
 800e2d4:	d0a9      	beq.n	800e22a <__sflush_r+0x1a>
 800e2d6:	0793      	lsls	r3, r2, #30
 800e2d8:	680e      	ldr	r6, [r1, #0]
 800e2da:	bf08      	it	eq
 800e2dc:	694b      	ldreq	r3, [r1, #20]
 800e2de:	600f      	str	r7, [r1, #0]
 800e2e0:	bf18      	it	ne
 800e2e2:	2300      	movne	r3, #0
 800e2e4:	eba6 0807 	sub.w	r8, r6, r7
 800e2e8:	608b      	str	r3, [r1, #8]
 800e2ea:	f1b8 0f00 	cmp.w	r8, #0
 800e2ee:	dd9c      	ble.n	800e22a <__sflush_r+0x1a>
 800e2f0:	6a21      	ldr	r1, [r4, #32]
 800e2f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e2f4:	4643      	mov	r3, r8
 800e2f6:	463a      	mov	r2, r7
 800e2f8:	4628      	mov	r0, r5
 800e2fa:	47b0      	blx	r6
 800e2fc:	2800      	cmp	r0, #0
 800e2fe:	dc06      	bgt.n	800e30e <__sflush_r+0xfe>
 800e300:	89a3      	ldrh	r3, [r4, #12]
 800e302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e306:	81a3      	strh	r3, [r4, #12]
 800e308:	f04f 30ff 	mov.w	r0, #4294967295
 800e30c:	e78e      	b.n	800e22c <__sflush_r+0x1c>
 800e30e:	4407      	add	r7, r0
 800e310:	eba8 0800 	sub.w	r8, r8, r0
 800e314:	e7e9      	b.n	800e2ea <__sflush_r+0xda>
 800e316:	bf00      	nop
 800e318:	20400001 	.word	0x20400001

0800e31c <_fflush_r>:
 800e31c:	b538      	push	{r3, r4, r5, lr}
 800e31e:	690b      	ldr	r3, [r1, #16]
 800e320:	4605      	mov	r5, r0
 800e322:	460c      	mov	r4, r1
 800e324:	b913      	cbnz	r3, 800e32c <_fflush_r+0x10>
 800e326:	2500      	movs	r5, #0
 800e328:	4628      	mov	r0, r5
 800e32a:	bd38      	pop	{r3, r4, r5, pc}
 800e32c:	b118      	cbz	r0, 800e336 <_fflush_r+0x1a>
 800e32e:	6983      	ldr	r3, [r0, #24]
 800e330:	b90b      	cbnz	r3, 800e336 <_fflush_r+0x1a>
 800e332:	f000 f887 	bl	800e444 <__sinit>
 800e336:	4b14      	ldr	r3, [pc, #80]	; (800e388 <_fflush_r+0x6c>)
 800e338:	429c      	cmp	r4, r3
 800e33a:	d11b      	bne.n	800e374 <_fflush_r+0x58>
 800e33c:	686c      	ldr	r4, [r5, #4]
 800e33e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d0ef      	beq.n	800e326 <_fflush_r+0xa>
 800e346:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e348:	07d0      	lsls	r0, r2, #31
 800e34a:	d404      	bmi.n	800e356 <_fflush_r+0x3a>
 800e34c:	0599      	lsls	r1, r3, #22
 800e34e:	d402      	bmi.n	800e356 <_fflush_r+0x3a>
 800e350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e352:	f000 f915 	bl	800e580 <__retarget_lock_acquire_recursive>
 800e356:	4628      	mov	r0, r5
 800e358:	4621      	mov	r1, r4
 800e35a:	f7ff ff59 	bl	800e210 <__sflush_r>
 800e35e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e360:	07da      	lsls	r2, r3, #31
 800e362:	4605      	mov	r5, r0
 800e364:	d4e0      	bmi.n	800e328 <_fflush_r+0xc>
 800e366:	89a3      	ldrh	r3, [r4, #12]
 800e368:	059b      	lsls	r3, r3, #22
 800e36a:	d4dd      	bmi.n	800e328 <_fflush_r+0xc>
 800e36c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e36e:	f000 f908 	bl	800e582 <__retarget_lock_release_recursive>
 800e372:	e7d9      	b.n	800e328 <_fflush_r+0xc>
 800e374:	4b05      	ldr	r3, [pc, #20]	; (800e38c <_fflush_r+0x70>)
 800e376:	429c      	cmp	r4, r3
 800e378:	d101      	bne.n	800e37e <_fflush_r+0x62>
 800e37a:	68ac      	ldr	r4, [r5, #8]
 800e37c:	e7df      	b.n	800e33e <_fflush_r+0x22>
 800e37e:	4b04      	ldr	r3, [pc, #16]	; (800e390 <_fflush_r+0x74>)
 800e380:	429c      	cmp	r4, r3
 800e382:	bf08      	it	eq
 800e384:	68ec      	ldreq	r4, [r5, #12]
 800e386:	e7da      	b.n	800e33e <_fflush_r+0x22>
 800e388:	0800eddc 	.word	0x0800eddc
 800e38c:	0800edfc 	.word	0x0800edfc
 800e390:	0800edbc 	.word	0x0800edbc

0800e394 <std>:
 800e394:	2300      	movs	r3, #0
 800e396:	b510      	push	{r4, lr}
 800e398:	4604      	mov	r4, r0
 800e39a:	e9c0 3300 	strd	r3, r3, [r0]
 800e39e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e3a2:	6083      	str	r3, [r0, #8]
 800e3a4:	8181      	strh	r1, [r0, #12]
 800e3a6:	6643      	str	r3, [r0, #100]	; 0x64
 800e3a8:	81c2      	strh	r2, [r0, #14]
 800e3aa:	6183      	str	r3, [r0, #24]
 800e3ac:	4619      	mov	r1, r3
 800e3ae:	2208      	movs	r2, #8
 800e3b0:	305c      	adds	r0, #92	; 0x5c
 800e3b2:	f7fd fba5 	bl	800bb00 <memset>
 800e3b6:	4b05      	ldr	r3, [pc, #20]	; (800e3cc <std+0x38>)
 800e3b8:	6263      	str	r3, [r4, #36]	; 0x24
 800e3ba:	4b05      	ldr	r3, [pc, #20]	; (800e3d0 <std+0x3c>)
 800e3bc:	62a3      	str	r3, [r4, #40]	; 0x28
 800e3be:	4b05      	ldr	r3, [pc, #20]	; (800e3d4 <std+0x40>)
 800e3c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e3c2:	4b05      	ldr	r3, [pc, #20]	; (800e3d8 <std+0x44>)
 800e3c4:	6224      	str	r4, [r4, #32]
 800e3c6:	6323      	str	r3, [r4, #48]	; 0x30
 800e3c8:	bd10      	pop	{r4, pc}
 800e3ca:	bf00      	nop
 800e3cc:	0800e6e5 	.word	0x0800e6e5
 800e3d0:	0800e707 	.word	0x0800e707
 800e3d4:	0800e73f 	.word	0x0800e73f
 800e3d8:	0800e763 	.word	0x0800e763

0800e3dc <_cleanup_r>:
 800e3dc:	4901      	ldr	r1, [pc, #4]	; (800e3e4 <_cleanup_r+0x8>)
 800e3de:	f000 b8af 	b.w	800e540 <_fwalk_reent>
 800e3e2:	bf00      	nop
 800e3e4:	0800e31d 	.word	0x0800e31d

0800e3e8 <__sfmoreglue>:
 800e3e8:	b570      	push	{r4, r5, r6, lr}
 800e3ea:	1e4a      	subs	r2, r1, #1
 800e3ec:	2568      	movs	r5, #104	; 0x68
 800e3ee:	4355      	muls	r5, r2
 800e3f0:	460e      	mov	r6, r1
 800e3f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e3f6:	f7ff fa87 	bl	800d908 <_malloc_r>
 800e3fa:	4604      	mov	r4, r0
 800e3fc:	b140      	cbz	r0, 800e410 <__sfmoreglue+0x28>
 800e3fe:	2100      	movs	r1, #0
 800e400:	e9c0 1600 	strd	r1, r6, [r0]
 800e404:	300c      	adds	r0, #12
 800e406:	60a0      	str	r0, [r4, #8]
 800e408:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e40c:	f7fd fb78 	bl	800bb00 <memset>
 800e410:	4620      	mov	r0, r4
 800e412:	bd70      	pop	{r4, r5, r6, pc}

0800e414 <__sfp_lock_acquire>:
 800e414:	4801      	ldr	r0, [pc, #4]	; (800e41c <__sfp_lock_acquire+0x8>)
 800e416:	f000 b8b3 	b.w	800e580 <__retarget_lock_acquire_recursive>
 800e41a:	bf00      	nop
 800e41c:	20003a54 	.word	0x20003a54

0800e420 <__sfp_lock_release>:
 800e420:	4801      	ldr	r0, [pc, #4]	; (800e428 <__sfp_lock_release+0x8>)
 800e422:	f000 b8ae 	b.w	800e582 <__retarget_lock_release_recursive>
 800e426:	bf00      	nop
 800e428:	20003a54 	.word	0x20003a54

0800e42c <__sinit_lock_acquire>:
 800e42c:	4801      	ldr	r0, [pc, #4]	; (800e434 <__sinit_lock_acquire+0x8>)
 800e42e:	f000 b8a7 	b.w	800e580 <__retarget_lock_acquire_recursive>
 800e432:	bf00      	nop
 800e434:	20003a4f 	.word	0x20003a4f

0800e438 <__sinit_lock_release>:
 800e438:	4801      	ldr	r0, [pc, #4]	; (800e440 <__sinit_lock_release+0x8>)
 800e43a:	f000 b8a2 	b.w	800e582 <__retarget_lock_release_recursive>
 800e43e:	bf00      	nop
 800e440:	20003a4f 	.word	0x20003a4f

0800e444 <__sinit>:
 800e444:	b510      	push	{r4, lr}
 800e446:	4604      	mov	r4, r0
 800e448:	f7ff fff0 	bl	800e42c <__sinit_lock_acquire>
 800e44c:	69a3      	ldr	r3, [r4, #24]
 800e44e:	b11b      	cbz	r3, 800e458 <__sinit+0x14>
 800e450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e454:	f7ff bff0 	b.w	800e438 <__sinit_lock_release>
 800e458:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e45c:	6523      	str	r3, [r4, #80]	; 0x50
 800e45e:	4b13      	ldr	r3, [pc, #76]	; (800e4ac <__sinit+0x68>)
 800e460:	4a13      	ldr	r2, [pc, #76]	; (800e4b0 <__sinit+0x6c>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	62a2      	str	r2, [r4, #40]	; 0x28
 800e466:	42a3      	cmp	r3, r4
 800e468:	bf04      	itt	eq
 800e46a:	2301      	moveq	r3, #1
 800e46c:	61a3      	streq	r3, [r4, #24]
 800e46e:	4620      	mov	r0, r4
 800e470:	f000 f820 	bl	800e4b4 <__sfp>
 800e474:	6060      	str	r0, [r4, #4]
 800e476:	4620      	mov	r0, r4
 800e478:	f000 f81c 	bl	800e4b4 <__sfp>
 800e47c:	60a0      	str	r0, [r4, #8]
 800e47e:	4620      	mov	r0, r4
 800e480:	f000 f818 	bl	800e4b4 <__sfp>
 800e484:	2200      	movs	r2, #0
 800e486:	60e0      	str	r0, [r4, #12]
 800e488:	2104      	movs	r1, #4
 800e48a:	6860      	ldr	r0, [r4, #4]
 800e48c:	f7ff ff82 	bl	800e394 <std>
 800e490:	68a0      	ldr	r0, [r4, #8]
 800e492:	2201      	movs	r2, #1
 800e494:	2109      	movs	r1, #9
 800e496:	f7ff ff7d 	bl	800e394 <std>
 800e49a:	68e0      	ldr	r0, [r4, #12]
 800e49c:	2202      	movs	r2, #2
 800e49e:	2112      	movs	r1, #18
 800e4a0:	f7ff ff78 	bl	800e394 <std>
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	61a3      	str	r3, [r4, #24]
 800e4a8:	e7d2      	b.n	800e450 <__sinit+0xc>
 800e4aa:	bf00      	nop
 800e4ac:	0800ea38 	.word	0x0800ea38
 800e4b0:	0800e3dd 	.word	0x0800e3dd

0800e4b4 <__sfp>:
 800e4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4b6:	4607      	mov	r7, r0
 800e4b8:	f7ff ffac 	bl	800e414 <__sfp_lock_acquire>
 800e4bc:	4b1e      	ldr	r3, [pc, #120]	; (800e538 <__sfp+0x84>)
 800e4be:	681e      	ldr	r6, [r3, #0]
 800e4c0:	69b3      	ldr	r3, [r6, #24]
 800e4c2:	b913      	cbnz	r3, 800e4ca <__sfp+0x16>
 800e4c4:	4630      	mov	r0, r6
 800e4c6:	f7ff ffbd 	bl	800e444 <__sinit>
 800e4ca:	3648      	adds	r6, #72	; 0x48
 800e4cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e4d0:	3b01      	subs	r3, #1
 800e4d2:	d503      	bpl.n	800e4dc <__sfp+0x28>
 800e4d4:	6833      	ldr	r3, [r6, #0]
 800e4d6:	b30b      	cbz	r3, 800e51c <__sfp+0x68>
 800e4d8:	6836      	ldr	r6, [r6, #0]
 800e4da:	e7f7      	b.n	800e4cc <__sfp+0x18>
 800e4dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e4e0:	b9d5      	cbnz	r5, 800e518 <__sfp+0x64>
 800e4e2:	4b16      	ldr	r3, [pc, #88]	; (800e53c <__sfp+0x88>)
 800e4e4:	60e3      	str	r3, [r4, #12]
 800e4e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e4ea:	6665      	str	r5, [r4, #100]	; 0x64
 800e4ec:	f000 f847 	bl	800e57e <__retarget_lock_init_recursive>
 800e4f0:	f7ff ff96 	bl	800e420 <__sfp_lock_release>
 800e4f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e4f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e4fc:	6025      	str	r5, [r4, #0]
 800e4fe:	61a5      	str	r5, [r4, #24]
 800e500:	2208      	movs	r2, #8
 800e502:	4629      	mov	r1, r5
 800e504:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e508:	f7fd fafa 	bl	800bb00 <memset>
 800e50c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e510:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e514:	4620      	mov	r0, r4
 800e516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e518:	3468      	adds	r4, #104	; 0x68
 800e51a:	e7d9      	b.n	800e4d0 <__sfp+0x1c>
 800e51c:	2104      	movs	r1, #4
 800e51e:	4638      	mov	r0, r7
 800e520:	f7ff ff62 	bl	800e3e8 <__sfmoreglue>
 800e524:	4604      	mov	r4, r0
 800e526:	6030      	str	r0, [r6, #0]
 800e528:	2800      	cmp	r0, #0
 800e52a:	d1d5      	bne.n	800e4d8 <__sfp+0x24>
 800e52c:	f7ff ff78 	bl	800e420 <__sfp_lock_release>
 800e530:	230c      	movs	r3, #12
 800e532:	603b      	str	r3, [r7, #0]
 800e534:	e7ee      	b.n	800e514 <__sfp+0x60>
 800e536:	bf00      	nop
 800e538:	0800ea38 	.word	0x0800ea38
 800e53c:	ffff0001 	.word	0xffff0001

0800e540 <_fwalk_reent>:
 800e540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e544:	4606      	mov	r6, r0
 800e546:	4688      	mov	r8, r1
 800e548:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e54c:	2700      	movs	r7, #0
 800e54e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e552:	f1b9 0901 	subs.w	r9, r9, #1
 800e556:	d505      	bpl.n	800e564 <_fwalk_reent+0x24>
 800e558:	6824      	ldr	r4, [r4, #0]
 800e55a:	2c00      	cmp	r4, #0
 800e55c:	d1f7      	bne.n	800e54e <_fwalk_reent+0xe>
 800e55e:	4638      	mov	r0, r7
 800e560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e564:	89ab      	ldrh	r3, [r5, #12]
 800e566:	2b01      	cmp	r3, #1
 800e568:	d907      	bls.n	800e57a <_fwalk_reent+0x3a>
 800e56a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e56e:	3301      	adds	r3, #1
 800e570:	d003      	beq.n	800e57a <_fwalk_reent+0x3a>
 800e572:	4629      	mov	r1, r5
 800e574:	4630      	mov	r0, r6
 800e576:	47c0      	blx	r8
 800e578:	4307      	orrs	r7, r0
 800e57a:	3568      	adds	r5, #104	; 0x68
 800e57c:	e7e9      	b.n	800e552 <_fwalk_reent+0x12>

0800e57e <__retarget_lock_init_recursive>:
 800e57e:	4770      	bx	lr

0800e580 <__retarget_lock_acquire_recursive>:
 800e580:	4770      	bx	lr

0800e582 <__retarget_lock_release_recursive>:
 800e582:	4770      	bx	lr

0800e584 <__swhatbuf_r>:
 800e584:	b570      	push	{r4, r5, r6, lr}
 800e586:	460e      	mov	r6, r1
 800e588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e58c:	2900      	cmp	r1, #0
 800e58e:	b096      	sub	sp, #88	; 0x58
 800e590:	4614      	mov	r4, r2
 800e592:	461d      	mov	r5, r3
 800e594:	da07      	bge.n	800e5a6 <__swhatbuf_r+0x22>
 800e596:	2300      	movs	r3, #0
 800e598:	602b      	str	r3, [r5, #0]
 800e59a:	89b3      	ldrh	r3, [r6, #12]
 800e59c:	061a      	lsls	r2, r3, #24
 800e59e:	d410      	bmi.n	800e5c2 <__swhatbuf_r+0x3e>
 800e5a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5a4:	e00e      	b.n	800e5c4 <__swhatbuf_r+0x40>
 800e5a6:	466a      	mov	r2, sp
 800e5a8:	f000 f902 	bl	800e7b0 <_fstat_r>
 800e5ac:	2800      	cmp	r0, #0
 800e5ae:	dbf2      	blt.n	800e596 <__swhatbuf_r+0x12>
 800e5b0:	9a01      	ldr	r2, [sp, #4]
 800e5b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e5b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e5ba:	425a      	negs	r2, r3
 800e5bc:	415a      	adcs	r2, r3
 800e5be:	602a      	str	r2, [r5, #0]
 800e5c0:	e7ee      	b.n	800e5a0 <__swhatbuf_r+0x1c>
 800e5c2:	2340      	movs	r3, #64	; 0x40
 800e5c4:	2000      	movs	r0, #0
 800e5c6:	6023      	str	r3, [r4, #0]
 800e5c8:	b016      	add	sp, #88	; 0x58
 800e5ca:	bd70      	pop	{r4, r5, r6, pc}

0800e5cc <__smakebuf_r>:
 800e5cc:	898b      	ldrh	r3, [r1, #12]
 800e5ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e5d0:	079d      	lsls	r5, r3, #30
 800e5d2:	4606      	mov	r6, r0
 800e5d4:	460c      	mov	r4, r1
 800e5d6:	d507      	bpl.n	800e5e8 <__smakebuf_r+0x1c>
 800e5d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e5dc:	6023      	str	r3, [r4, #0]
 800e5de:	6123      	str	r3, [r4, #16]
 800e5e0:	2301      	movs	r3, #1
 800e5e2:	6163      	str	r3, [r4, #20]
 800e5e4:	b002      	add	sp, #8
 800e5e6:	bd70      	pop	{r4, r5, r6, pc}
 800e5e8:	ab01      	add	r3, sp, #4
 800e5ea:	466a      	mov	r2, sp
 800e5ec:	f7ff ffca 	bl	800e584 <__swhatbuf_r>
 800e5f0:	9900      	ldr	r1, [sp, #0]
 800e5f2:	4605      	mov	r5, r0
 800e5f4:	4630      	mov	r0, r6
 800e5f6:	f7ff f987 	bl	800d908 <_malloc_r>
 800e5fa:	b948      	cbnz	r0, 800e610 <__smakebuf_r+0x44>
 800e5fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e600:	059a      	lsls	r2, r3, #22
 800e602:	d4ef      	bmi.n	800e5e4 <__smakebuf_r+0x18>
 800e604:	f023 0303 	bic.w	r3, r3, #3
 800e608:	f043 0302 	orr.w	r3, r3, #2
 800e60c:	81a3      	strh	r3, [r4, #12]
 800e60e:	e7e3      	b.n	800e5d8 <__smakebuf_r+0xc>
 800e610:	4b0d      	ldr	r3, [pc, #52]	; (800e648 <__smakebuf_r+0x7c>)
 800e612:	62b3      	str	r3, [r6, #40]	; 0x28
 800e614:	89a3      	ldrh	r3, [r4, #12]
 800e616:	6020      	str	r0, [r4, #0]
 800e618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e61c:	81a3      	strh	r3, [r4, #12]
 800e61e:	9b00      	ldr	r3, [sp, #0]
 800e620:	6163      	str	r3, [r4, #20]
 800e622:	9b01      	ldr	r3, [sp, #4]
 800e624:	6120      	str	r0, [r4, #16]
 800e626:	b15b      	cbz	r3, 800e640 <__smakebuf_r+0x74>
 800e628:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e62c:	4630      	mov	r0, r6
 800e62e:	f000 f8d1 	bl	800e7d4 <_isatty_r>
 800e632:	b128      	cbz	r0, 800e640 <__smakebuf_r+0x74>
 800e634:	89a3      	ldrh	r3, [r4, #12]
 800e636:	f023 0303 	bic.w	r3, r3, #3
 800e63a:	f043 0301 	orr.w	r3, r3, #1
 800e63e:	81a3      	strh	r3, [r4, #12]
 800e640:	89a0      	ldrh	r0, [r4, #12]
 800e642:	4305      	orrs	r5, r0
 800e644:	81a5      	strh	r5, [r4, #12]
 800e646:	e7cd      	b.n	800e5e4 <__smakebuf_r+0x18>
 800e648:	0800e3dd 	.word	0x0800e3dd

0800e64c <_malloc_usable_size_r>:
 800e64c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e650:	1f18      	subs	r0, r3, #4
 800e652:	2b00      	cmp	r3, #0
 800e654:	bfbc      	itt	lt
 800e656:	580b      	ldrlt	r3, [r1, r0]
 800e658:	18c0      	addlt	r0, r0, r3
 800e65a:	4770      	bx	lr

0800e65c <_raise_r>:
 800e65c:	291f      	cmp	r1, #31
 800e65e:	b538      	push	{r3, r4, r5, lr}
 800e660:	4604      	mov	r4, r0
 800e662:	460d      	mov	r5, r1
 800e664:	d904      	bls.n	800e670 <_raise_r+0x14>
 800e666:	2316      	movs	r3, #22
 800e668:	6003      	str	r3, [r0, #0]
 800e66a:	f04f 30ff 	mov.w	r0, #4294967295
 800e66e:	bd38      	pop	{r3, r4, r5, pc}
 800e670:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e672:	b112      	cbz	r2, 800e67a <_raise_r+0x1e>
 800e674:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e678:	b94b      	cbnz	r3, 800e68e <_raise_r+0x32>
 800e67a:	4620      	mov	r0, r4
 800e67c:	f000 f830 	bl	800e6e0 <_getpid_r>
 800e680:	462a      	mov	r2, r5
 800e682:	4601      	mov	r1, r0
 800e684:	4620      	mov	r0, r4
 800e686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e68a:	f000 b817 	b.w	800e6bc <_kill_r>
 800e68e:	2b01      	cmp	r3, #1
 800e690:	d00a      	beq.n	800e6a8 <_raise_r+0x4c>
 800e692:	1c59      	adds	r1, r3, #1
 800e694:	d103      	bne.n	800e69e <_raise_r+0x42>
 800e696:	2316      	movs	r3, #22
 800e698:	6003      	str	r3, [r0, #0]
 800e69a:	2001      	movs	r0, #1
 800e69c:	e7e7      	b.n	800e66e <_raise_r+0x12>
 800e69e:	2400      	movs	r4, #0
 800e6a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e6a4:	4628      	mov	r0, r5
 800e6a6:	4798      	blx	r3
 800e6a8:	2000      	movs	r0, #0
 800e6aa:	e7e0      	b.n	800e66e <_raise_r+0x12>

0800e6ac <raise>:
 800e6ac:	4b02      	ldr	r3, [pc, #8]	; (800e6b8 <raise+0xc>)
 800e6ae:	4601      	mov	r1, r0
 800e6b0:	6818      	ldr	r0, [r3, #0]
 800e6b2:	f7ff bfd3 	b.w	800e65c <_raise_r>
 800e6b6:	bf00      	nop
 800e6b8:	20000180 	.word	0x20000180

0800e6bc <_kill_r>:
 800e6bc:	b538      	push	{r3, r4, r5, lr}
 800e6be:	4d07      	ldr	r5, [pc, #28]	; (800e6dc <_kill_r+0x20>)
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	4604      	mov	r4, r0
 800e6c4:	4608      	mov	r0, r1
 800e6c6:	4611      	mov	r1, r2
 800e6c8:	602b      	str	r3, [r5, #0]
 800e6ca:	f000 f8d7 	bl	800e87c <_kill>
 800e6ce:	1c43      	adds	r3, r0, #1
 800e6d0:	d102      	bne.n	800e6d8 <_kill_r+0x1c>
 800e6d2:	682b      	ldr	r3, [r5, #0]
 800e6d4:	b103      	cbz	r3, 800e6d8 <_kill_r+0x1c>
 800e6d6:	6023      	str	r3, [r4, #0]
 800e6d8:	bd38      	pop	{r3, r4, r5, pc}
 800e6da:	bf00      	nop
 800e6dc:	20003a48 	.word	0x20003a48

0800e6e0 <_getpid_r>:
 800e6e0:	f000 b8bc 	b.w	800e85c <_getpid>

0800e6e4 <__sread>:
 800e6e4:	b510      	push	{r4, lr}
 800e6e6:	460c      	mov	r4, r1
 800e6e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6ec:	f000 f894 	bl	800e818 <_read_r>
 800e6f0:	2800      	cmp	r0, #0
 800e6f2:	bfab      	itete	ge
 800e6f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e6f6:	89a3      	ldrhlt	r3, [r4, #12]
 800e6f8:	181b      	addge	r3, r3, r0
 800e6fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e6fe:	bfac      	ite	ge
 800e700:	6563      	strge	r3, [r4, #84]	; 0x54
 800e702:	81a3      	strhlt	r3, [r4, #12]
 800e704:	bd10      	pop	{r4, pc}

0800e706 <__swrite>:
 800e706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e70a:	461f      	mov	r7, r3
 800e70c:	898b      	ldrh	r3, [r1, #12]
 800e70e:	05db      	lsls	r3, r3, #23
 800e710:	4605      	mov	r5, r0
 800e712:	460c      	mov	r4, r1
 800e714:	4616      	mov	r6, r2
 800e716:	d505      	bpl.n	800e724 <__swrite+0x1e>
 800e718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e71c:	2302      	movs	r3, #2
 800e71e:	2200      	movs	r2, #0
 800e720:	f000 f868 	bl	800e7f4 <_lseek_r>
 800e724:	89a3      	ldrh	r3, [r4, #12]
 800e726:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e72a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e72e:	81a3      	strh	r3, [r4, #12]
 800e730:	4632      	mov	r2, r6
 800e732:	463b      	mov	r3, r7
 800e734:	4628      	mov	r0, r5
 800e736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e73a:	f000 b817 	b.w	800e76c <_write_r>

0800e73e <__sseek>:
 800e73e:	b510      	push	{r4, lr}
 800e740:	460c      	mov	r4, r1
 800e742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e746:	f000 f855 	bl	800e7f4 <_lseek_r>
 800e74a:	1c43      	adds	r3, r0, #1
 800e74c:	89a3      	ldrh	r3, [r4, #12]
 800e74e:	bf15      	itete	ne
 800e750:	6560      	strne	r0, [r4, #84]	; 0x54
 800e752:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e756:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e75a:	81a3      	strheq	r3, [r4, #12]
 800e75c:	bf18      	it	ne
 800e75e:	81a3      	strhne	r3, [r4, #12]
 800e760:	bd10      	pop	{r4, pc}

0800e762 <__sclose>:
 800e762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e766:	f000 b813 	b.w	800e790 <_close_r>
	...

0800e76c <_write_r>:
 800e76c:	b538      	push	{r3, r4, r5, lr}
 800e76e:	4d07      	ldr	r5, [pc, #28]	; (800e78c <_write_r+0x20>)
 800e770:	4604      	mov	r4, r0
 800e772:	4608      	mov	r0, r1
 800e774:	4611      	mov	r1, r2
 800e776:	2200      	movs	r2, #0
 800e778:	602a      	str	r2, [r5, #0]
 800e77a:	461a      	mov	r2, r3
 800e77c:	f000 f8a4 	bl	800e8c8 <_write>
 800e780:	1c43      	adds	r3, r0, #1
 800e782:	d102      	bne.n	800e78a <_write_r+0x1e>
 800e784:	682b      	ldr	r3, [r5, #0]
 800e786:	b103      	cbz	r3, 800e78a <_write_r+0x1e>
 800e788:	6023      	str	r3, [r4, #0]
 800e78a:	bd38      	pop	{r3, r4, r5, pc}
 800e78c:	20003a48 	.word	0x20003a48

0800e790 <_close_r>:
 800e790:	b538      	push	{r3, r4, r5, lr}
 800e792:	4d06      	ldr	r5, [pc, #24]	; (800e7ac <_close_r+0x1c>)
 800e794:	2300      	movs	r3, #0
 800e796:	4604      	mov	r4, r0
 800e798:	4608      	mov	r0, r1
 800e79a:	602b      	str	r3, [r5, #0]
 800e79c:	f000 f84e 	bl	800e83c <_close>
 800e7a0:	1c43      	adds	r3, r0, #1
 800e7a2:	d102      	bne.n	800e7aa <_close_r+0x1a>
 800e7a4:	682b      	ldr	r3, [r5, #0]
 800e7a6:	b103      	cbz	r3, 800e7aa <_close_r+0x1a>
 800e7a8:	6023      	str	r3, [r4, #0]
 800e7aa:	bd38      	pop	{r3, r4, r5, pc}
 800e7ac:	20003a48 	.word	0x20003a48

0800e7b0 <_fstat_r>:
 800e7b0:	b538      	push	{r3, r4, r5, lr}
 800e7b2:	4d07      	ldr	r5, [pc, #28]	; (800e7d0 <_fstat_r+0x20>)
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	4604      	mov	r4, r0
 800e7b8:	4608      	mov	r0, r1
 800e7ba:	4611      	mov	r1, r2
 800e7bc:	602b      	str	r3, [r5, #0]
 800e7be:	f000 f845 	bl	800e84c <_fstat>
 800e7c2:	1c43      	adds	r3, r0, #1
 800e7c4:	d102      	bne.n	800e7cc <_fstat_r+0x1c>
 800e7c6:	682b      	ldr	r3, [r5, #0]
 800e7c8:	b103      	cbz	r3, 800e7cc <_fstat_r+0x1c>
 800e7ca:	6023      	str	r3, [r4, #0]
 800e7cc:	bd38      	pop	{r3, r4, r5, pc}
 800e7ce:	bf00      	nop
 800e7d0:	20003a48 	.word	0x20003a48

0800e7d4 <_isatty_r>:
 800e7d4:	b538      	push	{r3, r4, r5, lr}
 800e7d6:	4d06      	ldr	r5, [pc, #24]	; (800e7f0 <_isatty_r+0x1c>)
 800e7d8:	2300      	movs	r3, #0
 800e7da:	4604      	mov	r4, r0
 800e7dc:	4608      	mov	r0, r1
 800e7de:	602b      	str	r3, [r5, #0]
 800e7e0:	f000 f844 	bl	800e86c <_isatty>
 800e7e4:	1c43      	adds	r3, r0, #1
 800e7e6:	d102      	bne.n	800e7ee <_isatty_r+0x1a>
 800e7e8:	682b      	ldr	r3, [r5, #0]
 800e7ea:	b103      	cbz	r3, 800e7ee <_isatty_r+0x1a>
 800e7ec:	6023      	str	r3, [r4, #0]
 800e7ee:	bd38      	pop	{r3, r4, r5, pc}
 800e7f0:	20003a48 	.word	0x20003a48

0800e7f4 <_lseek_r>:
 800e7f4:	b538      	push	{r3, r4, r5, lr}
 800e7f6:	4d07      	ldr	r5, [pc, #28]	; (800e814 <_lseek_r+0x20>)
 800e7f8:	4604      	mov	r4, r0
 800e7fa:	4608      	mov	r0, r1
 800e7fc:	4611      	mov	r1, r2
 800e7fe:	2200      	movs	r2, #0
 800e800:	602a      	str	r2, [r5, #0]
 800e802:	461a      	mov	r2, r3
 800e804:	f000 f842 	bl	800e88c <_lseek>
 800e808:	1c43      	adds	r3, r0, #1
 800e80a:	d102      	bne.n	800e812 <_lseek_r+0x1e>
 800e80c:	682b      	ldr	r3, [r5, #0]
 800e80e:	b103      	cbz	r3, 800e812 <_lseek_r+0x1e>
 800e810:	6023      	str	r3, [r4, #0]
 800e812:	bd38      	pop	{r3, r4, r5, pc}
 800e814:	20003a48 	.word	0x20003a48

0800e818 <_read_r>:
 800e818:	b538      	push	{r3, r4, r5, lr}
 800e81a:	4d07      	ldr	r5, [pc, #28]	; (800e838 <_read_r+0x20>)
 800e81c:	4604      	mov	r4, r0
 800e81e:	4608      	mov	r0, r1
 800e820:	4611      	mov	r1, r2
 800e822:	2200      	movs	r2, #0
 800e824:	602a      	str	r2, [r5, #0]
 800e826:	461a      	mov	r2, r3
 800e828:	f000 f838 	bl	800e89c <_read>
 800e82c:	1c43      	adds	r3, r0, #1
 800e82e:	d102      	bne.n	800e836 <_read_r+0x1e>
 800e830:	682b      	ldr	r3, [r5, #0]
 800e832:	b103      	cbz	r3, 800e836 <_read_r+0x1e>
 800e834:	6023      	str	r3, [r4, #0]
 800e836:	bd38      	pop	{r3, r4, r5, pc}
 800e838:	20003a48 	.word	0x20003a48

0800e83c <_close>:
 800e83c:	4b02      	ldr	r3, [pc, #8]	; (800e848 <_close+0xc>)
 800e83e:	2258      	movs	r2, #88	; 0x58
 800e840:	601a      	str	r2, [r3, #0]
 800e842:	f04f 30ff 	mov.w	r0, #4294967295
 800e846:	4770      	bx	lr
 800e848:	20003a48 	.word	0x20003a48

0800e84c <_fstat>:
 800e84c:	4b02      	ldr	r3, [pc, #8]	; (800e858 <_fstat+0xc>)
 800e84e:	2258      	movs	r2, #88	; 0x58
 800e850:	601a      	str	r2, [r3, #0]
 800e852:	f04f 30ff 	mov.w	r0, #4294967295
 800e856:	4770      	bx	lr
 800e858:	20003a48 	.word	0x20003a48

0800e85c <_getpid>:
 800e85c:	4b02      	ldr	r3, [pc, #8]	; (800e868 <_getpid+0xc>)
 800e85e:	2258      	movs	r2, #88	; 0x58
 800e860:	601a      	str	r2, [r3, #0]
 800e862:	f04f 30ff 	mov.w	r0, #4294967295
 800e866:	4770      	bx	lr
 800e868:	20003a48 	.word	0x20003a48

0800e86c <_isatty>:
 800e86c:	4b02      	ldr	r3, [pc, #8]	; (800e878 <_isatty+0xc>)
 800e86e:	2258      	movs	r2, #88	; 0x58
 800e870:	601a      	str	r2, [r3, #0]
 800e872:	2000      	movs	r0, #0
 800e874:	4770      	bx	lr
 800e876:	bf00      	nop
 800e878:	20003a48 	.word	0x20003a48

0800e87c <_kill>:
 800e87c:	4b02      	ldr	r3, [pc, #8]	; (800e888 <_kill+0xc>)
 800e87e:	2258      	movs	r2, #88	; 0x58
 800e880:	601a      	str	r2, [r3, #0]
 800e882:	f04f 30ff 	mov.w	r0, #4294967295
 800e886:	4770      	bx	lr
 800e888:	20003a48 	.word	0x20003a48

0800e88c <_lseek>:
 800e88c:	4b02      	ldr	r3, [pc, #8]	; (800e898 <_lseek+0xc>)
 800e88e:	2258      	movs	r2, #88	; 0x58
 800e890:	601a      	str	r2, [r3, #0]
 800e892:	f04f 30ff 	mov.w	r0, #4294967295
 800e896:	4770      	bx	lr
 800e898:	20003a48 	.word	0x20003a48

0800e89c <_read>:
 800e89c:	4b02      	ldr	r3, [pc, #8]	; (800e8a8 <_read+0xc>)
 800e89e:	2258      	movs	r2, #88	; 0x58
 800e8a0:	601a      	str	r2, [r3, #0]
 800e8a2:	f04f 30ff 	mov.w	r0, #4294967295
 800e8a6:	4770      	bx	lr
 800e8a8:	20003a48 	.word	0x20003a48

0800e8ac <_sbrk>:
 800e8ac:	4b04      	ldr	r3, [pc, #16]	; (800e8c0 <_sbrk+0x14>)
 800e8ae:	6819      	ldr	r1, [r3, #0]
 800e8b0:	4602      	mov	r2, r0
 800e8b2:	b909      	cbnz	r1, 800e8b8 <_sbrk+0xc>
 800e8b4:	4903      	ldr	r1, [pc, #12]	; (800e8c4 <_sbrk+0x18>)
 800e8b6:	6019      	str	r1, [r3, #0]
 800e8b8:	6818      	ldr	r0, [r3, #0]
 800e8ba:	4402      	add	r2, r0
 800e8bc:	601a      	str	r2, [r3, #0]
 800e8be:	4770      	bx	lr
 800e8c0:	20001840 	.word	0x20001840
 800e8c4:	20003a58 	.word	0x20003a58

0800e8c8 <_write>:
 800e8c8:	4b02      	ldr	r3, [pc, #8]	; (800e8d4 <_write+0xc>)
 800e8ca:	2258      	movs	r2, #88	; 0x58
 800e8cc:	601a      	str	r2, [r3, #0]
 800e8ce:	f04f 30ff 	mov.w	r0, #4294967295
 800e8d2:	4770      	bx	lr
 800e8d4:	20003a48 	.word	0x20003a48

0800e8d8 <_exit>:
 800e8d8:	e7fe      	b.n	800e8d8 <_exit>
	...

0800e8dc <_init>:
 800e8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8de:	bf00      	nop
 800e8e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8e2:	bc08      	pop	{r3}
 800e8e4:	469e      	mov	lr, r3
 800e8e6:	4770      	bx	lr

0800e8e8 <_fini>:
 800e8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8ea:	bf00      	nop
 800e8ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8ee:	bc08      	pop	{r3}
 800e8f0:	469e      	mov	lr, r3
 800e8f2:	4770      	bx	lr
