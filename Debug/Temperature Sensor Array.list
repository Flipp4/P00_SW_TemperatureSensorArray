
Temperature Sensor Array.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b074  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800b20c  0800b20c  0001b20c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b274  0800b274  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  0800b274  0800b274  0001b274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b27c  0800b27c  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b27c  0800b27c  0001b27c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b280  0800b280  0001b280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800b284  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d3c  20000180  0800b404  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ebc  0800b404  00021ebc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020195  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004089  00000000  00000000  00040345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  000443d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001398  00000000  00000000  000458c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b844  00000000  00000000  00046c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001be7c  00000000  00000000  000624a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000975dc  00000000  00000000  0007e320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001158fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057bc  00000000  00000000  00115950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000180 	.word	0x20000180
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800b1f4 	.word	0x0800b1f4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000184 	.word	0x20000184
 80001d4:	0800b1f4 	.word	0x0800b1f4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MCP9808_CommunicateTaskI2C1>:


float MCP9808_ReadTemperature(I2C_HandleTypeDef hI2C_Transciever, uint8_t u8DeviceHWAddress);

void MCP9808_CommunicateTaskI2C1()
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af04      	add	r7, sp, #16

	uint16_t u16FixedPointReadingLow = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	80fb      	strh	r3, [r7, #6]
	uint16_t u16FixedPointReadingHigh = 0;
 80004da:	2300      	movs	r3, #0
 80004dc:	80bb      	strh	r3, [r7, #4]
	uint16_t u16FixedPointReading = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	807b      	strh	r3, [r7, #2]

	switch(I2C1_Array.eState)
 80004e2:	4b25      	ldr	r3, [pc, #148]	; (8000578 <MCP9808_CommunicateTaskI2C1+0xa8>)
 80004e4:	7b9b      	ldrb	r3, [r3, #14]
 80004e6:	2b03      	cmp	r3, #3
 80004e8:	d841      	bhi.n	800056e <MCP9808_CommunicateTaskI2C1+0x9e>
 80004ea:	a201      	add	r2, pc, #4	; (adr r2, 80004f0 <MCP9808_CommunicateTaskI2C1+0x20>)
 80004ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f0:	08000501 	.word	0x08000501
 80004f4:	08000509 	.word	0x08000509
 80004f8:	08000531 	.word	0x08000531
 80004fc:	0800056f 	.word	0x0800056f
	{
	case(MCP9808_Initialized):
			I2C1_Array.eState = MCP9808_TemperatureReadRequest;
 8000500:	4b1d      	ldr	r3, [pc, #116]	; (8000578 <MCP9808_CommunicateTaskI2C1+0xa8>)
 8000502:	2201      	movs	r2, #1
 8000504:	739a      	strb	r2, [r3, #14]
			break;
 8000506:	e033      	b.n	8000570 <MCP9808_CommunicateTaskI2C1+0xa0>
	case(MCP9808_TemperatureReadRequest):
//			HAL_I2C_Master_Transmit(&hI2C_Transciever, u8DeviceAddres, &u8Buffer, 2, 1000);
			HAL_I2C_Mem_Read(I2C1_Array.hTranscieverHandle, I2C1_Array.u8DeviceAddressList[0], MCP9808_AddressAmbientTemperature, 1, &I2C1_Array.u16RawTemperature, 2, 1000);
 8000508:	4b1b      	ldr	r3, [pc, #108]	; (8000578 <MCP9808_CommunicateTaskI2C1+0xa8>)
 800050a:	6818      	ldr	r0, [r3, #0]
 800050c:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <MCP9808_CommunicateTaskI2C1+0xa8>)
 800050e:	791b      	ldrb	r3, [r3, #4]
 8000510:	b299      	uxth	r1, r3
 8000512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000516:	9302      	str	r3, [sp, #8]
 8000518:	2302      	movs	r3, #2
 800051a:	9301      	str	r3, [sp, #4]
 800051c:	4b17      	ldr	r3, [pc, #92]	; (800057c <MCP9808_CommunicateTaskI2C1+0xac>)
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	2301      	movs	r3, #1
 8000522:	2205      	movs	r2, #5
 8000524:	f001 f814 	bl	8001550 <HAL_I2C_Mem_Read>
			I2C1_Array.eState = MCP9808_TemperatureConversion;
 8000528:	4b13      	ldr	r3, [pc, #76]	; (8000578 <MCP9808_CommunicateTaskI2C1+0xa8>)
 800052a:	2202      	movs	r2, #2
 800052c:	739a      	strb	r2, [r3, #14]
			break;
 800052e:	e01f      	b.n	8000570 <MCP9808_CommunicateTaskI2C1+0xa0>
	case(MCP9808_TemperatureConversion):
			u16FixedPointReadingLow = (I2C1_Array.u16RawTemperature & 0x003F) << 8;
 8000530:	4b11      	ldr	r3, [pc, #68]	; (8000578 <MCP9808_CommunicateTaskI2C1+0xa8>)
 8000532:	8a1b      	ldrh	r3, [r3, #16]
 8000534:	021b      	lsls	r3, r3, #8
 8000536:	b29b      	uxth	r3, r3
 8000538:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800053c:	80fb      	strh	r3, [r7, #6]
			u16FixedPointReadingHigh = (I2C1_Array.u16RawTemperature & 0xFF00) >> 8;
 800053e:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <MCP9808_CommunicateTaskI2C1+0xa8>)
 8000540:	8a1b      	ldrh	r3, [r3, #16]
 8000542:	0a1b      	lsrs	r3, r3, #8
 8000544:	80bb      	strh	r3, [r7, #4]
			u16FixedPointReading = u16FixedPointReadingLow + u16FixedPointReadingHigh;
 8000546:	88fa      	ldrh	r2, [r7, #6]
 8000548:	88bb      	ldrh	r3, [r7, #4]
 800054a:	4413      	add	r3, r2
 800054c:	807b      	strh	r3, [r7, #2]
			I2C1_Array.fConvertedTemperature = (float)(u16FixedPointReading) / 16;
 800054e:	887b      	ldrh	r3, [r7, #2]
 8000550:	ee07 3a90 	vmov	s15, r3
 8000554:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000558:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800055c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <MCP9808_CommunicateTaskI2C1+0xa8>)
 8000562:	edc3 7a05 	vstr	s15, [r3, #20]
			I2C1_Array.eState = MCP9808_TemperatureReadRequest;
 8000566:	4b04      	ldr	r3, [pc, #16]	; (8000578 <MCP9808_CommunicateTaskI2C1+0xa8>)
 8000568:	2201      	movs	r2, #1
 800056a:	739a      	strb	r2, [r3, #14]
			break;
 800056c:	e000      	b.n	8000570 <MCP9808_CommunicateTaskI2C1+0xa0>
	case(MCP9808_Waiting):
			break;
	default:
	break;
 800056e:	bf00      	nop
	}

}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	200003c0 	.word	0x200003c0
 800057c:	200003d0 	.word	0x200003d0

08000580 <MCP9808_InitCommunicationI2C1>:


void MCP9808_InitCommunicationI2C1(I2C_HandleTypeDef *hI2C_Transciever, uint8_t *u8DeviceAddressList, uint8_t u8DeviceCount)
{
 8000580:	b480      	push	{r7}
 8000582:	b087      	sub	sp, #28
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	4613      	mov	r3, r2
 800058c:	71fb      	strb	r3, [r7, #7]
	I2C1_Array.hTranscieverHandle = hI2C_Transciever;
 800058e:	4a10      	ldr	r2, [pc, #64]	; (80005d0 <MCP9808_InitCommunicationI2C1+0x50>)
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	6013      	str	r3, [r2, #0]
	for( uint8_t u8AddresIndex = 0; u8AddresIndex < u8DeviceCount; u8AddresIndex++ )
 8000594:	2300      	movs	r3, #0
 8000596:	75fb      	strb	r3, [r7, #23]
 8000598:	e00d      	b.n	80005b6 <MCP9808_InitCommunicationI2C1+0x36>
	{
		I2C1_Array.u8DeviceAddressList[u8AddresIndex] = ((MCP9808_AddresLowerNibble << 4) + u8DeviceAddressList[u8AddresIndex]);
 800059a:	7dfb      	ldrb	r3, [r7, #23]
 800059c:	68ba      	ldr	r2, [r7, #8]
 800059e:	4413      	add	r3, r2
 80005a0:	781a      	ldrb	r2, [r3, #0]
 80005a2:	7dfb      	ldrb	r3, [r7, #23]
 80005a4:	3230      	adds	r2, #48	; 0x30
 80005a6:	b2d1      	uxtb	r1, r2
 80005a8:	4a09      	ldr	r2, [pc, #36]	; (80005d0 <MCP9808_InitCommunicationI2C1+0x50>)
 80005aa:	4413      	add	r3, r2
 80005ac:	460a      	mov	r2, r1
 80005ae:	711a      	strb	r2, [r3, #4]
	for( uint8_t u8AddresIndex = 0; u8AddresIndex < u8DeviceCount; u8AddresIndex++ )
 80005b0:	7dfb      	ldrb	r3, [r7, #23]
 80005b2:	3301      	adds	r3, #1
 80005b4:	75fb      	strb	r3, [r7, #23]
 80005b6:	7dfa      	ldrb	r2, [r7, #23]
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d3ed      	bcc.n	800059a <MCP9808_InitCommunicationI2C1+0x1a>
	}
	I2C1_Array.bEnabled = true;
 80005be:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <MCP9808_InitCommunicationI2C1+0x50>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	735a      	strb	r2, [r3, #13]
}
 80005c4:	bf00      	nop
 80005c6:	371c      	adds	r7, #28
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	200003c0 	.word	0x200003c0

080005d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005d8:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <HAL_Init+0x40>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a0d      	ldr	r2, [pc, #52]	; (8000614 <HAL_Init+0x40>)
 80005de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005e4:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <HAL_Init+0x40>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <HAL_Init+0x40>)
 80005ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <HAL_Init+0x40>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a07      	ldr	r2, [pc, #28]	; (8000614 <HAL_Init+0x40>)
 80005f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005fc:	2003      	movs	r0, #3
 80005fe:	f000 f94f 	bl	80008a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000602:	2000      	movs	r0, #0
 8000604:	f000 f808 	bl	8000618 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000608:	f009 fe74 	bl	800a2f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800060c:	2300      	movs	r3, #0
}
 800060e:	4618      	mov	r0, r3
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40023c00 	.word	0x40023c00

08000618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <HAL_InitTick+0x54>)
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <HAL_InitTick+0x58>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	4619      	mov	r1, r3
 800062a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000632:	fbb2 f3f3 	udiv	r3, r2, r3
 8000636:	4618      	mov	r0, r3
 8000638:	f000 f967 	bl	800090a <HAL_SYSTICK_Config>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000642:	2301      	movs	r3, #1
 8000644:	e00e      	b.n	8000664 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b0f      	cmp	r3, #15
 800064a:	d80a      	bhi.n	8000662 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800064c:	2200      	movs	r2, #0
 800064e:	6879      	ldr	r1, [r7, #4]
 8000650:	f04f 30ff 	mov.w	r0, #4294967295
 8000654:	f000 f92f 	bl	80008b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000658:	4a06      	ldr	r2, [pc, #24]	; (8000674 <HAL_InitTick+0x5c>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800065e:	2300      	movs	r3, #0
 8000660:	e000      	b.n	8000664 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000662:	2301      	movs	r3, #1
}
 8000664:	4618      	mov	r0, r3
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000118 	.word	0x20000118
 8000670:	20000004 	.word	0x20000004
 8000674:	20000000 	.word	0x20000000

08000678 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <HAL_IncTick+0x20>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	461a      	mov	r2, r3
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <HAL_IncTick+0x24>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4413      	add	r3, r2
 8000688:	4a04      	ldr	r2, [pc, #16]	; (800069c <HAL_IncTick+0x24>)
 800068a:	6013      	str	r3, [r2, #0]
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	20000004 	.word	0x20000004
 800069c:	200003f0 	.word	0x200003f0

080006a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  return uwTick;
 80006a4:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <HAL_GetTick+0x14>)
 80006a6:	681b      	ldr	r3, [r3, #0]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	200003f0 	.word	0x200003f0

080006b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006c0:	f7ff ffee 	bl	80006a0 <HAL_GetTick>
 80006c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006d0:	d005      	beq.n	80006de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006d2:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <HAL_Delay+0x44>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	461a      	mov	r2, r3
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	4413      	add	r3, r2
 80006dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006de:	bf00      	nop
 80006e0:	f7ff ffde 	bl	80006a0 <HAL_GetTick>
 80006e4:	4602      	mov	r2, r0
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	68fa      	ldr	r2, [r7, #12]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d8f7      	bhi.n	80006e0 <HAL_Delay+0x28>
  {
  }
}
 80006f0:	bf00      	nop
 80006f2:	bf00      	nop
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000004 	.word	0x20000004

08000700 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f003 0307 	and.w	r3, r3, #7
 800070e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <__NVIC_SetPriorityGrouping+0x44>)
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000716:	68ba      	ldr	r2, [r7, #8]
 8000718:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800071c:	4013      	ands	r3, r2
 800071e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000728:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800072c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000732:	4a04      	ldr	r2, [pc, #16]	; (8000744 <__NVIC_SetPriorityGrouping+0x44>)
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	60d3      	str	r3, [r2, #12]
}
 8000738:	bf00      	nop
 800073a:	3714      	adds	r7, #20
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800074c:	4b04      	ldr	r3, [pc, #16]	; (8000760 <__NVIC_GetPriorityGrouping+0x18>)
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	0a1b      	lsrs	r3, r3, #8
 8000752:	f003 0307 	and.w	r3, r3, #7
}
 8000756:	4618      	mov	r0, r3
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800076e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000772:	2b00      	cmp	r3, #0
 8000774:	db0b      	blt.n	800078e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	f003 021f 	and.w	r2, r3, #31
 800077c:	4907      	ldr	r1, [pc, #28]	; (800079c <__NVIC_EnableIRQ+0x38>)
 800077e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000782:	095b      	lsrs	r3, r3, #5
 8000784:	2001      	movs	r0, #1
 8000786:	fa00 f202 	lsl.w	r2, r0, r2
 800078a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000e100 	.word	0xe000e100

080007a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	6039      	str	r1, [r7, #0]
 80007aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	db0a      	blt.n	80007ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	490c      	ldr	r1, [pc, #48]	; (80007ec <__NVIC_SetPriority+0x4c>)
 80007ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007be:	0112      	lsls	r2, r2, #4
 80007c0:	b2d2      	uxtb	r2, r2
 80007c2:	440b      	add	r3, r1
 80007c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007c8:	e00a      	b.n	80007e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	4908      	ldr	r1, [pc, #32]	; (80007f0 <__NVIC_SetPriority+0x50>)
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	f003 030f 	and.w	r3, r3, #15
 80007d6:	3b04      	subs	r3, #4
 80007d8:	0112      	lsls	r2, r2, #4
 80007da:	b2d2      	uxtb	r2, r2
 80007dc:	440b      	add	r3, r1
 80007de:	761a      	strb	r2, [r3, #24]
}
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	e000e100 	.word	0xe000e100
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b089      	sub	sp, #36	; 0x24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	f003 0307 	and.w	r3, r3, #7
 8000806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	f1c3 0307 	rsb	r3, r3, #7
 800080e:	2b04      	cmp	r3, #4
 8000810:	bf28      	it	cs
 8000812:	2304      	movcs	r3, #4
 8000814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	3304      	adds	r3, #4
 800081a:	2b06      	cmp	r3, #6
 800081c:	d902      	bls.n	8000824 <NVIC_EncodePriority+0x30>
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	3b03      	subs	r3, #3
 8000822:	e000      	b.n	8000826 <NVIC_EncodePriority+0x32>
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000828:	f04f 32ff 	mov.w	r2, #4294967295
 800082c:	69bb      	ldr	r3, [r7, #24]
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	43da      	mvns	r2, r3
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	401a      	ands	r2, r3
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800083c:	f04f 31ff 	mov.w	r1, #4294967295
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	fa01 f303 	lsl.w	r3, r1, r3
 8000846:	43d9      	mvns	r1, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800084c:	4313      	orrs	r3, r2
         );
}
 800084e:	4618      	mov	r0, r3
 8000850:	3724      	adds	r7, #36	; 0x24
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
	...

0800085c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3b01      	subs	r3, #1
 8000868:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800086c:	d301      	bcc.n	8000872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800086e:	2301      	movs	r3, #1
 8000870:	e00f      	b.n	8000892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000872:	4a0a      	ldr	r2, [pc, #40]	; (800089c <SysTick_Config+0x40>)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3b01      	subs	r3, #1
 8000878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800087a:	210f      	movs	r1, #15
 800087c:	f04f 30ff 	mov.w	r0, #4294967295
 8000880:	f7ff ff8e 	bl	80007a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <SysTick_Config+0x40>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800088a:	4b04      	ldr	r3, [pc, #16]	; (800089c <SysTick_Config+0x40>)
 800088c:	2207      	movs	r2, #7
 800088e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	e000e010 	.word	0xe000e010

080008a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff ff29 	bl	8000700 <__NVIC_SetPriorityGrouping>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b086      	sub	sp, #24
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	4603      	mov	r3, r0
 80008be:	60b9      	str	r1, [r7, #8]
 80008c0:	607a      	str	r2, [r7, #4]
 80008c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008c8:	f7ff ff3e 	bl	8000748 <__NVIC_GetPriorityGrouping>
 80008cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	68b9      	ldr	r1, [r7, #8]
 80008d2:	6978      	ldr	r0, [r7, #20]
 80008d4:	f7ff ff8e 	bl	80007f4 <NVIC_EncodePriority>
 80008d8:	4602      	mov	r2, r0
 80008da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ff5d 	bl	80007a0 <__NVIC_SetPriority>
}
 80008e6:	bf00      	nop
 80008e8:	3718      	adds	r7, #24
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b082      	sub	sp, #8
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	4603      	mov	r3, r0
 80008f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff ff31 	bl	8000764 <__NVIC_EnableIRQ>
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b082      	sub	sp, #8
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f7ff ffa2 	bl	800085c <SysTick_Config>
 8000918:	4603      	mov	r3, r0
}
 800091a:	4618      	mov	r0, r3
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000930:	f7ff feb6 	bl	80006a0 <HAL_GetTick>
 8000934:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d101      	bne.n	8000940 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800093c:	2301      	movs	r3, #1
 800093e:	e099      	b.n	8000a74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2202      	movs	r2, #2
 8000944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2200      	movs	r2, #0
 800094c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f022 0201 	bic.w	r2, r2, #1
 800095e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000960:	e00f      	b.n	8000982 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000962:	f7ff fe9d 	bl	80006a0 <HAL_GetTick>
 8000966:	4602      	mov	r2, r0
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	1ad3      	subs	r3, r2, r3
 800096c:	2b05      	cmp	r3, #5
 800096e:	d908      	bls.n	8000982 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2220      	movs	r2, #32
 8000974:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2203      	movs	r2, #3
 800097a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800097e:	2303      	movs	r3, #3
 8000980:	e078      	b.n	8000a74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f003 0301 	and.w	r3, r3, #1
 800098c:	2b00      	cmp	r3, #0
 800098e:	d1e8      	bne.n	8000962 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000998:	697a      	ldr	r2, [r7, #20]
 800099a:	4b38      	ldr	r3, [pc, #224]	; (8000a7c <HAL_DMA_Init+0x158>)
 800099c:	4013      	ands	r3, r2
 800099e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	685a      	ldr	r2, [r3, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80009ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	691b      	ldr	r3, [r3, #16]
 80009b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6a1b      	ldr	r3, [r3, #32]
 80009cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80009ce:	697a      	ldr	r2, [r7, #20]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d8:	2b04      	cmp	r3, #4
 80009da:	d107      	bne.n	80009ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e4:	4313      	orrs	r3, r2
 80009e6:	697a      	ldr	r2, [r7, #20]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	697a      	ldr	r2, [r7, #20]
 80009f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	f023 0307 	bic.w	r3, r3, #7
 8000a02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a08:	697a      	ldr	r2, [r7, #20]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a12:	2b04      	cmp	r3, #4
 8000a14:	d117      	bne.n	8000a46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a1a:	697a      	ldr	r2, [r7, #20]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d00e      	beq.n	8000a46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f000 fa19 	bl	8000e60 <DMA_CheckFifoParam>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d008      	beq.n	8000a46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2240      	movs	r2, #64	; 0x40
 8000a38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000a42:	2301      	movs	r3, #1
 8000a44:	e016      	b.n	8000a74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	697a      	ldr	r2, [r7, #20]
 8000a4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f000 f9d0 	bl	8000df4 <DMA_CalcBaseAndBitshift>
 8000a54:	4603      	mov	r3, r0
 8000a56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a5c:	223f      	movs	r2, #63	; 0x3f
 8000a5e:	409a      	lsls	r2, r3
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000a72:	2300      	movs	r3, #0
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	f010803f 	.word	0xf010803f

08000a80 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	d004      	beq.n	8000a9e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2280      	movs	r2, #128	; 0x80
 8000a98:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e00c      	b.n	8000ab8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2205      	movs	r2, #5
 8000aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f022 0201 	bic.w	r2, r2, #1
 8000ab4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ab6:	2300      	movs	r3, #0
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000ad0:	4b92      	ldr	r3, [pc, #584]	; (8000d1c <HAL_DMA_IRQHandler+0x258>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a92      	ldr	r2, [pc, #584]	; (8000d20 <HAL_DMA_IRQHandler+0x25c>)
 8000ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ada:	0a9b      	lsrs	r3, r3, #10
 8000adc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aee:	2208      	movs	r2, #8
 8000af0:	409a      	lsls	r2, r3
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	4013      	ands	r3, r2
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d01a      	beq.n	8000b30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f003 0304 	and.w	r3, r3, #4
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d013      	beq.n	8000b30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f022 0204 	bic.w	r2, r2, #4
 8000b16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b1c:	2208      	movs	r2, #8
 8000b1e:	409a      	lsls	r2, r3
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b28:	f043 0201 	orr.w	r2, r3, #1
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b34:	2201      	movs	r2, #1
 8000b36:	409a      	lsls	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d012      	beq.n	8000b66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	695b      	ldr	r3, [r3, #20]
 8000b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d00b      	beq.n	8000b66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b52:	2201      	movs	r2, #1
 8000b54:	409a      	lsls	r2, r3
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b5e:	f043 0202 	orr.w	r2, r3, #2
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b6a:	2204      	movs	r2, #4
 8000b6c:	409a      	lsls	r2, r3
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	4013      	ands	r3, r2
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d012      	beq.n	8000b9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f003 0302 	and.w	r3, r3, #2
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d00b      	beq.n	8000b9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b88:	2204      	movs	r2, #4
 8000b8a:	409a      	lsls	r2, r3
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b94:	f043 0204 	orr.w	r2, r3, #4
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ba0:	2210      	movs	r2, #16
 8000ba2:	409a      	lsls	r2, r3
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d043      	beq.n	8000c34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f003 0308 	and.w	r3, r3, #8
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d03c      	beq.n	8000c34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bbe:	2210      	movs	r2, #16
 8000bc0:	409a      	lsls	r2, r3
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d018      	beq.n	8000c06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d108      	bne.n	8000bf4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d024      	beq.n	8000c34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	4798      	blx	r3
 8000bf2:	e01f      	b.n	8000c34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d01b      	beq.n	8000c34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	4798      	blx	r3
 8000c04:	e016      	b.n	8000c34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d107      	bne.n	8000c24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f022 0208 	bic.w	r2, r2, #8
 8000c22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d003      	beq.n	8000c34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c38:	2220      	movs	r2, #32
 8000c3a:	409a      	lsls	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	f000 808e 	beq.w	8000d62 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f003 0310 	and.w	r3, r3, #16
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	f000 8086 	beq.w	8000d62 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c5a:	2220      	movs	r2, #32
 8000c5c:	409a      	lsls	r2, r3
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	2b05      	cmp	r3, #5
 8000c6c:	d136      	bne.n	8000cdc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f022 0216 	bic.w	r2, r2, #22
 8000c7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	695a      	ldr	r2, [r3, #20]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d103      	bne.n	8000c9e <HAL_DMA_IRQHandler+0x1da>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d007      	beq.n	8000cae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f022 0208 	bic.w	r2, r2, #8
 8000cac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cb2:	223f      	movs	r2, #63	; 0x3f
 8000cb4:	409a      	lsls	r2, r3
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d07d      	beq.n	8000dce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	4798      	blx	r3
        }
        return;
 8000cda:	e078      	b.n	8000dce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d01c      	beq.n	8000d24 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d108      	bne.n	8000d0a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d030      	beq.n	8000d62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	4798      	blx	r3
 8000d08:	e02b      	b.n	8000d62 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d027      	beq.n	8000d62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	4798      	blx	r3
 8000d1a:	e022      	b.n	8000d62 <HAL_DMA_IRQHandler+0x29e>
 8000d1c:	20000118 	.word	0x20000118
 8000d20:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d10f      	bne.n	8000d52 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f022 0210 	bic.w	r2, r2, #16
 8000d40:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2201      	movs	r2, #1
 8000d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d003      	beq.n	8000d62 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d032      	beq.n	8000dd0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d022      	beq.n	8000dbc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2205      	movs	r2, #5
 8000d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f022 0201 	bic.w	r2, r2, #1
 8000d8c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	3301      	adds	r3, #1
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d307      	bcc.n	8000daa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d1f2      	bne.n	8000d8e <HAL_DMA_IRQHandler+0x2ca>
 8000da8:	e000      	b.n	8000dac <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000daa:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2201      	movs	r2, #1
 8000db0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d005      	beq.n	8000dd0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	4798      	blx	r3
 8000dcc:	e000      	b.n	8000dd0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000dce:	bf00      	nop
    }
  }
}
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop

08000dd8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000de6:	b2db      	uxtb	r3, r3
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	3b10      	subs	r3, #16
 8000e04:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <DMA_CalcBaseAndBitshift+0x64>)
 8000e06:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0a:	091b      	lsrs	r3, r3, #4
 8000e0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000e0e:	4a13      	ldr	r2, [pc, #76]	; (8000e5c <DMA_CalcBaseAndBitshift+0x68>)
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4413      	add	r3, r2
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2b03      	cmp	r3, #3
 8000e20:	d909      	bls.n	8000e36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000e2a:	f023 0303 	bic.w	r3, r3, #3
 8000e2e:	1d1a      	adds	r2, r3, #4
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	659a      	str	r2, [r3, #88]	; 0x58
 8000e34:	e007      	b.n	8000e46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000e3e:	f023 0303 	bic.w	r3, r3, #3
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	aaaaaaab 	.word	0xaaaaaaab
 8000e5c:	0800b254 	.word	0x0800b254

08000e60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	699b      	ldr	r3, [r3, #24]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d11f      	bne.n	8000eba <DMA_CheckFifoParam+0x5a>
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	d856      	bhi.n	8000f2e <DMA_CheckFifoParam+0xce>
 8000e80:	a201      	add	r2, pc, #4	; (adr r2, 8000e88 <DMA_CheckFifoParam+0x28>)
 8000e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e86:	bf00      	nop
 8000e88:	08000e99 	.word	0x08000e99
 8000e8c:	08000eab 	.word	0x08000eab
 8000e90:	08000e99 	.word	0x08000e99
 8000e94:	08000f2f 	.word	0x08000f2f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d046      	beq.n	8000f32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000ea8:	e043      	b.n	8000f32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000eb2:	d140      	bne.n	8000f36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000eb8:	e03d      	b.n	8000f36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ec2:	d121      	bne.n	8000f08 <DMA_CheckFifoParam+0xa8>
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	2b03      	cmp	r3, #3
 8000ec8:	d837      	bhi.n	8000f3a <DMA_CheckFifoParam+0xda>
 8000eca:	a201      	add	r2, pc, #4	; (adr r2, 8000ed0 <DMA_CheckFifoParam+0x70>)
 8000ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed0:	08000ee1 	.word	0x08000ee1
 8000ed4:	08000ee7 	.word	0x08000ee7
 8000ed8:	08000ee1 	.word	0x08000ee1
 8000edc:	08000ef9 	.word	0x08000ef9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8000ee4:	e030      	b.n	8000f48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d025      	beq.n	8000f3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000ef6:	e022      	b.n	8000f3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000efc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000f00:	d11f      	bne.n	8000f42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000f06:	e01c      	b.n	8000f42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d903      	bls.n	8000f16 <DMA_CheckFifoParam+0xb6>
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	d003      	beq.n	8000f1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000f14:	e018      	b.n	8000f48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	73fb      	strb	r3, [r7, #15]
      break;
 8000f1a:	e015      	b.n	8000f48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d00e      	beq.n	8000f46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8000f2c:	e00b      	b.n	8000f46 <DMA_CheckFifoParam+0xe6>
      break;
 8000f2e:	bf00      	nop
 8000f30:	e00a      	b.n	8000f48 <DMA_CheckFifoParam+0xe8>
      break;
 8000f32:	bf00      	nop
 8000f34:	e008      	b.n	8000f48 <DMA_CheckFifoParam+0xe8>
      break;
 8000f36:	bf00      	nop
 8000f38:	e006      	b.n	8000f48 <DMA_CheckFifoParam+0xe8>
      break;
 8000f3a:	bf00      	nop
 8000f3c:	e004      	b.n	8000f48 <DMA_CheckFifoParam+0xe8>
      break;
 8000f3e:	bf00      	nop
 8000f40:	e002      	b.n	8000f48 <DMA_CheckFifoParam+0xe8>
      break;   
 8000f42:	bf00      	nop
 8000f44:	e000      	b.n	8000f48 <DMA_CheckFifoParam+0xe8>
      break;
 8000f46:	bf00      	nop
    }
  } 
  
  return status; 
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	; 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
 8000f72:	e159      	b.n	8001228 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f74:	2201      	movs	r2, #1
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	f040 8148 	bne.w	8001222 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 0303 	and.w	r3, r3, #3
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d005      	beq.n	8000faa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d130      	bne.n	800100c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	68da      	ldr	r2, [r3, #12]
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	091b      	lsrs	r3, r3, #4
 8000ff6:	f003 0201 	and.w	r2, r3, #1
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b03      	cmp	r3, #3
 8001016:	d017      	beq.n	8001048 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	2203      	movs	r2, #3
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d123      	bne.n	800109c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	08da      	lsrs	r2, r3, #3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3208      	adds	r2, #8
 800105c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001060:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	f003 0307 	and.w	r3, r3, #7
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	220f      	movs	r2, #15
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	691a      	ldr	r2, [r3, #16]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	08da      	lsrs	r2, r3, #3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3208      	adds	r2, #8
 8001096:	69b9      	ldr	r1, [r7, #24]
 8001098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	2203      	movs	r2, #3
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0203 	and.w	r2, r3, #3
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f000 80a2 	beq.w	8001222 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b57      	ldr	r3, [pc, #348]	; (8001240 <HAL_GPIO_Init+0x2e8>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	4a56      	ldr	r2, [pc, #344]	; (8001240 <HAL_GPIO_Init+0x2e8>)
 80010e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ec:	6453      	str	r3, [r2, #68]	; 0x44
 80010ee:	4b54      	ldr	r3, [pc, #336]	; (8001240 <HAL_GPIO_Init+0x2e8>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010fa:	4a52      	ldr	r2, [pc, #328]	; (8001244 <HAL_GPIO_Init+0x2ec>)
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	089b      	lsrs	r3, r3, #2
 8001100:	3302      	adds	r3, #2
 8001102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	220f      	movs	r2, #15
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a49      	ldr	r2, [pc, #292]	; (8001248 <HAL_GPIO_Init+0x2f0>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d019      	beq.n	800115a <HAL_GPIO_Init+0x202>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a48      	ldr	r2, [pc, #288]	; (800124c <HAL_GPIO_Init+0x2f4>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d013      	beq.n	8001156 <HAL_GPIO_Init+0x1fe>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a47      	ldr	r2, [pc, #284]	; (8001250 <HAL_GPIO_Init+0x2f8>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d00d      	beq.n	8001152 <HAL_GPIO_Init+0x1fa>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a46      	ldr	r2, [pc, #280]	; (8001254 <HAL_GPIO_Init+0x2fc>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d007      	beq.n	800114e <HAL_GPIO_Init+0x1f6>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a45      	ldr	r2, [pc, #276]	; (8001258 <HAL_GPIO_Init+0x300>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d101      	bne.n	800114a <HAL_GPIO_Init+0x1f2>
 8001146:	2304      	movs	r3, #4
 8001148:	e008      	b.n	800115c <HAL_GPIO_Init+0x204>
 800114a:	2307      	movs	r3, #7
 800114c:	e006      	b.n	800115c <HAL_GPIO_Init+0x204>
 800114e:	2303      	movs	r3, #3
 8001150:	e004      	b.n	800115c <HAL_GPIO_Init+0x204>
 8001152:	2302      	movs	r3, #2
 8001154:	e002      	b.n	800115c <HAL_GPIO_Init+0x204>
 8001156:	2301      	movs	r3, #1
 8001158:	e000      	b.n	800115c <HAL_GPIO_Init+0x204>
 800115a:	2300      	movs	r3, #0
 800115c:	69fa      	ldr	r2, [r7, #28]
 800115e:	f002 0203 	and.w	r2, r2, #3
 8001162:	0092      	lsls	r2, r2, #2
 8001164:	4093      	lsls	r3, r2
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4313      	orrs	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800116c:	4935      	ldr	r1, [pc, #212]	; (8001244 <HAL_GPIO_Init+0x2ec>)
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	089b      	lsrs	r3, r3, #2
 8001172:	3302      	adds	r3, #2
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800117a:	4b38      	ldr	r3, [pc, #224]	; (800125c <HAL_GPIO_Init+0x304>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800119e:	4a2f      	ldr	r2, [pc, #188]	; (800125c <HAL_GPIO_Init+0x304>)
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011a4:	4b2d      	ldr	r3, [pc, #180]	; (800125c <HAL_GPIO_Init+0x304>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011c8:	4a24      	ldr	r2, [pc, #144]	; (800125c <HAL_GPIO_Init+0x304>)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ce:	4b23      	ldr	r3, [pc, #140]	; (800125c <HAL_GPIO_Init+0x304>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	43db      	mvns	r3, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4013      	ands	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011f2:	4a1a      	ldr	r2, [pc, #104]	; (800125c <HAL_GPIO_Init+0x304>)
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011f8:	4b18      	ldr	r3, [pc, #96]	; (800125c <HAL_GPIO_Init+0x304>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800121c:	4a0f      	ldr	r2, [pc, #60]	; (800125c <HAL_GPIO_Init+0x304>)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3301      	adds	r3, #1
 8001226:	61fb      	str	r3, [r7, #28]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	2b0f      	cmp	r3, #15
 800122c:	f67f aea2 	bls.w	8000f74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001230:	bf00      	nop
 8001232:	bf00      	nop
 8001234:	3724      	adds	r7, #36	; 0x24
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800
 8001244:	40013800 	.word	0x40013800
 8001248:	40020000 	.word	0x40020000
 800124c:	40020400 	.word	0x40020400
 8001250:	40020800 	.word	0x40020800
 8001254:	40020c00 	.word	0x40020c00
 8001258:	40021000 	.word	0x40021000
 800125c:	40013c00 	.word	0x40013c00

08001260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	807b      	strh	r3, [r7, #2]
 800126c:	4613      	mov	r3, r2
 800126e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001270:	787b      	ldrb	r3, [r7, #1]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001276:	887a      	ldrh	r2, [r7, #2]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800127c:	e003      	b.n	8001286 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800127e:	887b      	ldrh	r3, [r7, #2]
 8001280:	041a      	lsls	r2, r3, #16
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	619a      	str	r2, [r3, #24]
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001292:	b480      	push	{r7}
 8001294:	b085      	sub	sp, #20
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	460b      	mov	r3, r1
 800129c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012a4:	887a      	ldrh	r2, [r7, #2]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	4013      	ands	r3, r2
 80012aa:	041a      	lsls	r2, r3, #16
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	43d9      	mvns	r1, r3
 80012b0:	887b      	ldrh	r3, [r7, #2]
 80012b2:	400b      	ands	r3, r1
 80012b4:	431a      	orrs	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	619a      	str	r2, [r3, #24]
}
 80012ba:	bf00      	nop
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e12b      	b.n	8001532 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d106      	bne.n	80012f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f009 f828 	bl	800a344 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2224      	movs	r2, #36	; 0x24
 80012f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f022 0201 	bic.w	r2, r2, #1
 800130a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800131a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800132a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800132c:	f003 ff24 	bl	8005178 <HAL_RCC_GetPCLK1Freq>
 8001330:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	4a81      	ldr	r2, [pc, #516]	; (800153c <HAL_I2C_Init+0x274>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d807      	bhi.n	800134c <HAL_I2C_Init+0x84>
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	4a80      	ldr	r2, [pc, #512]	; (8001540 <HAL_I2C_Init+0x278>)
 8001340:	4293      	cmp	r3, r2
 8001342:	bf94      	ite	ls
 8001344:	2301      	movls	r3, #1
 8001346:	2300      	movhi	r3, #0
 8001348:	b2db      	uxtb	r3, r3
 800134a:	e006      	b.n	800135a <HAL_I2C_Init+0x92>
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4a7d      	ldr	r2, [pc, #500]	; (8001544 <HAL_I2C_Init+0x27c>)
 8001350:	4293      	cmp	r3, r2
 8001352:	bf94      	ite	ls
 8001354:	2301      	movls	r3, #1
 8001356:	2300      	movhi	r3, #0
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e0e7      	b.n	8001532 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4a78      	ldr	r2, [pc, #480]	; (8001548 <HAL_I2C_Init+0x280>)
 8001366:	fba2 2303 	umull	r2, r3, r2, r3
 800136a:	0c9b      	lsrs	r3, r3, #18
 800136c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	68ba      	ldr	r2, [r7, #8]
 800137e:	430a      	orrs	r2, r1
 8001380:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	4a6a      	ldr	r2, [pc, #424]	; (800153c <HAL_I2C_Init+0x274>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d802      	bhi.n	800139c <HAL_I2C_Init+0xd4>
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	3301      	adds	r3, #1
 800139a:	e009      	b.n	80013b0 <HAL_I2C_Init+0xe8>
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013a2:	fb02 f303 	mul.w	r3, r2, r3
 80013a6:	4a69      	ldr	r2, [pc, #420]	; (800154c <HAL_I2C_Init+0x284>)
 80013a8:	fba2 2303 	umull	r2, r3, r2, r3
 80013ac:	099b      	lsrs	r3, r3, #6
 80013ae:	3301      	adds	r3, #1
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	6812      	ldr	r2, [r2, #0]
 80013b4:	430b      	orrs	r3, r1
 80013b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80013c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	495c      	ldr	r1, [pc, #368]	; (800153c <HAL_I2C_Init+0x274>)
 80013cc:	428b      	cmp	r3, r1
 80013ce:	d819      	bhi.n	8001404 <HAL_I2C_Init+0x13c>
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	1e59      	subs	r1, r3, #1
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	fbb1 f3f3 	udiv	r3, r1, r3
 80013de:	1c59      	adds	r1, r3, #1
 80013e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80013e4:	400b      	ands	r3, r1
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00a      	beq.n	8001400 <HAL_I2C_Init+0x138>
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	1e59      	subs	r1, r3, #1
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80013f8:	3301      	adds	r3, #1
 80013fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013fe:	e051      	b.n	80014a4 <HAL_I2C_Init+0x1dc>
 8001400:	2304      	movs	r3, #4
 8001402:	e04f      	b.n	80014a4 <HAL_I2C_Init+0x1dc>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d111      	bne.n	8001430 <HAL_I2C_Init+0x168>
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	1e58      	subs	r0, r3, #1
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6859      	ldr	r1, [r3, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	440b      	add	r3, r1
 800141a:	fbb0 f3f3 	udiv	r3, r0, r3
 800141e:	3301      	adds	r3, #1
 8001420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001424:	2b00      	cmp	r3, #0
 8001426:	bf0c      	ite	eq
 8001428:	2301      	moveq	r3, #1
 800142a:	2300      	movne	r3, #0
 800142c:	b2db      	uxtb	r3, r3
 800142e:	e012      	b.n	8001456 <HAL_I2C_Init+0x18e>
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	1e58      	subs	r0, r3, #1
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6859      	ldr	r1, [r3, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	440b      	add	r3, r1
 800143e:	0099      	lsls	r1, r3, #2
 8001440:	440b      	add	r3, r1
 8001442:	fbb0 f3f3 	udiv	r3, r0, r3
 8001446:	3301      	adds	r3, #1
 8001448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800144c:	2b00      	cmp	r3, #0
 800144e:	bf0c      	ite	eq
 8001450:	2301      	moveq	r3, #1
 8001452:	2300      	movne	r3, #0
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <HAL_I2C_Init+0x196>
 800145a:	2301      	movs	r3, #1
 800145c:	e022      	b.n	80014a4 <HAL_I2C_Init+0x1dc>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10e      	bne.n	8001484 <HAL_I2C_Init+0x1bc>
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	1e58      	subs	r0, r3, #1
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6859      	ldr	r1, [r3, #4]
 800146e:	460b      	mov	r3, r1
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	440b      	add	r3, r1
 8001474:	fbb0 f3f3 	udiv	r3, r0, r3
 8001478:	3301      	adds	r3, #1
 800147a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800147e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001482:	e00f      	b.n	80014a4 <HAL_I2C_Init+0x1dc>
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	1e58      	subs	r0, r3, #1
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6859      	ldr	r1, [r3, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	440b      	add	r3, r1
 8001492:	0099      	lsls	r1, r3, #2
 8001494:	440b      	add	r3, r1
 8001496:	fbb0 f3f3 	udiv	r3, r0, r3
 800149a:	3301      	adds	r3, #1
 800149c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	6809      	ldr	r1, [r1, #0]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69da      	ldr	r2, [r3, #28]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	430a      	orrs	r2, r1
 80014c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80014d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	6911      	ldr	r1, [r2, #16]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68d2      	ldr	r2, [r2, #12]
 80014de:	4311      	orrs	r1, r2
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	6812      	ldr	r2, [r2, #0]
 80014e4:	430b      	orrs	r3, r1
 80014e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	695a      	ldr	r2, [r3, #20]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	431a      	orrs	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f042 0201 	orr.w	r2, r2, #1
 8001512:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2220      	movs	r2, #32
 800151e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	000186a0 	.word	0x000186a0
 8001540:	001e847f 	.word	0x001e847f
 8001544:	003d08ff 	.word	0x003d08ff
 8001548:	431bde83 	.word	0x431bde83
 800154c:	10624dd3 	.word	0x10624dd3

08001550 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08c      	sub	sp, #48	; 0x30
 8001554:	af02      	add	r7, sp, #8
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	4608      	mov	r0, r1
 800155a:	4611      	mov	r1, r2
 800155c:	461a      	mov	r2, r3
 800155e:	4603      	mov	r3, r0
 8001560:	817b      	strh	r3, [r7, #10]
 8001562:	460b      	mov	r3, r1
 8001564:	813b      	strh	r3, [r7, #8]
 8001566:	4613      	mov	r3, r2
 8001568:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800156a:	f7ff f899 	bl	80006a0 <HAL_GetTick>
 800156e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b20      	cmp	r3, #32
 800157a:	f040 8208 	bne.w	800198e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	2319      	movs	r3, #25
 8001584:	2201      	movs	r2, #1
 8001586:	497b      	ldr	r1, [pc, #492]	; (8001774 <HAL_I2C_Mem_Read+0x224>)
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f001 fe5d 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001594:	2302      	movs	r3, #2
 8001596:	e1fb      	b.n	8001990 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d101      	bne.n	80015a6 <HAL_I2C_Mem_Read+0x56>
 80015a2:	2302      	movs	r3, #2
 80015a4:	e1f4      	b.n	8001990 <HAL_I2C_Mem_Read+0x440>
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d007      	beq.n	80015cc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f042 0201 	orr.w	r2, r2, #1
 80015ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2222      	movs	r2, #34	; 0x22
 80015e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2240      	movs	r2, #64	; 0x40
 80015e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2200      	movs	r2, #0
 80015f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80015fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001602:	b29a      	uxth	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4a5b      	ldr	r2, [pc, #364]	; (8001778 <HAL_I2C_Mem_Read+0x228>)
 800160c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800160e:	88f8      	ldrh	r0, [r7, #6]
 8001610:	893a      	ldrh	r2, [r7, #8]
 8001612:	8979      	ldrh	r1, [r7, #10]
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	9301      	str	r3, [sp, #4]
 8001618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	4603      	mov	r3, r0
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f001 fc82 	bl	8002f28 <I2C_RequestMemoryRead>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e1b0      	b.n	8001990 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001632:	2b00      	cmp	r3, #0
 8001634:	d113      	bne.n	800165e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001636:	2300      	movs	r3, #0
 8001638:	623b      	str	r3, [r7, #32]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	695b      	ldr	r3, [r3, #20]
 8001640:	623b      	str	r3, [r7, #32]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	623b      	str	r3, [r7, #32]
 800164a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	e184      	b.n	8001968 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001662:	2b01      	cmp	r3, #1
 8001664:	d11b      	bne.n	800169e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001674:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	61fb      	str	r3, [r7, #28]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	61fb      	str	r3, [r7, #28]
 800168a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	e164      	b.n	8001968 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d11b      	bne.n	80016de <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016c6:	2300      	movs	r3, #0
 80016c8:	61bb      	str	r3, [r7, #24]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	695b      	ldr	r3, [r3, #20]
 80016d0:	61bb      	str	r3, [r7, #24]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	61bb      	str	r3, [r7, #24]
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	e144      	b.n	8001968 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	695b      	ldr	r3, [r3, #20]
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80016f4:	e138      	b.n	8001968 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	f200 80f1 	bhi.w	80018e2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001704:	2b01      	cmp	r3, #1
 8001706:	d123      	bne.n	8001750 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800170a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	f001 fee5 	bl	80034dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e139      	b.n	8001990 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	691a      	ldr	r2, [r3, #16]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	1c5a      	adds	r2, r3, #1
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001738:	3b01      	subs	r3, #1
 800173a:	b29a      	uxth	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001744:	b29b      	uxth	r3, r3
 8001746:	3b01      	subs	r3, #1
 8001748:	b29a      	uxth	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800174e:	e10b      	b.n	8001968 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001754:	2b02      	cmp	r3, #2
 8001756:	d14e      	bne.n	80017f6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800175e:	2200      	movs	r2, #0
 8001760:	4906      	ldr	r1, [pc, #24]	; (800177c <HAL_I2C_Mem_Read+0x22c>)
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f001 fd70 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d008      	beq.n	8001780 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e10e      	b.n	8001990 <HAL_I2C_Mem_Read+0x440>
 8001772:	bf00      	nop
 8001774:	00100002 	.word	0x00100002
 8001778:	ffff0000 	.word	0xffff0000
 800177c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800178e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	691a      	ldr	r2, [r3, #16]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ac:	3b01      	subs	r3, #1
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	3b01      	subs	r3, #1
 80017bc:	b29a      	uxth	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	691a      	ldr	r2, [r3, #16]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	1c5a      	adds	r2, r3, #1
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017de:	3b01      	subs	r3, #1
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	3b01      	subs	r3, #1
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80017f4:	e0b8      	b.n	8001968 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017fc:	2200      	movs	r2, #0
 80017fe:	4966      	ldr	r1, [pc, #408]	; (8001998 <HAL_I2C_Mem_Read+0x448>)
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f001 fd21 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e0bf      	b.n	8001990 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800181e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	691a      	ldr	r2, [r3, #16]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	1c5a      	adds	r2, r3, #1
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800183c:	3b01      	subs	r3, #1
 800183e:	b29a      	uxth	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001848:	b29b      	uxth	r3, r3
 800184a:	3b01      	subs	r3, #1
 800184c:	b29a      	uxth	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001858:	2200      	movs	r2, #0
 800185a:	494f      	ldr	r1, [pc, #316]	; (8001998 <HAL_I2C_Mem_Read+0x448>)
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f001 fcf3 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e091      	b.n	8001990 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800187a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	691a      	ldr	r2, [r3, #16]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001898:	3b01      	subs	r3, #1
 800189a:	b29a      	uxth	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	3b01      	subs	r3, #1
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	691a      	ldr	r2, [r3, #16]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	1c5a      	adds	r2, r3, #1
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ca:	3b01      	subs	r3, #1
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	3b01      	subs	r3, #1
 80018da:	b29a      	uxth	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80018e0:	e042      	b.n	8001968 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f001 fdf8 	bl	80034dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e04c      	b.n	8001990 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	691a      	ldr	r2, [r3, #16]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	b2d2      	uxtb	r2, r2
 8001902:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	1c5a      	adds	r2, r3, #1
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001912:	3b01      	subs	r3, #1
 8001914:	b29a      	uxth	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800191e:	b29b      	uxth	r3, r3
 8001920:	3b01      	subs	r3, #1
 8001922:	b29a      	uxth	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	f003 0304 	and.w	r3, r3, #4
 8001932:	2b04      	cmp	r3, #4
 8001934:	d118      	bne.n	8001968 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	691a      	ldr	r2, [r3, #16]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001948:	1c5a      	adds	r2, r3, #1
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001952:	3b01      	subs	r3, #1
 8001954:	b29a      	uxth	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800195e:	b29b      	uxth	r3, r3
 8001960:	3b01      	subs	r3, #1
 8001962:	b29a      	uxth	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800196c:	2b00      	cmp	r3, #0
 800196e:	f47f aec2 	bne.w	80016f6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2220      	movs	r2, #32
 8001976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	e000      	b.n	8001990 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800198e:	2302      	movs	r3, #2
  }
}
 8001990:	4618      	mov	r0, r3
 8001992:	3728      	adds	r7, #40	; 0x28
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	00010004 	.word	0x00010004

0800199c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80019bc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019c4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	2b10      	cmp	r3, #16
 80019ca:	d003      	beq.n	80019d4 <HAL_I2C_EV_IRQHandler+0x38>
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
 80019ce:	2b40      	cmp	r3, #64	; 0x40
 80019d0:	f040 80c1 	bne.w	8001b56 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10d      	bne.n	8001a0a <HAL_I2C_EV_IRQHandler+0x6e>
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80019f4:	d003      	beq.n	80019fe <HAL_I2C_EV_IRQHandler+0x62>
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80019fc:	d101      	bne.n	8001a02 <HAL_I2C_EV_IRQHandler+0x66>
 80019fe:	2301      	movs	r3, #1
 8001a00:	e000      	b.n	8001a04 <HAL_I2C_EV_IRQHandler+0x68>
 8001a02:	2300      	movs	r3, #0
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	f000 8132 	beq.w	8001c6e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00c      	beq.n	8001a2e <HAL_I2C_EV_IRQHandler+0x92>
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	0a5b      	lsrs	r3, r3, #9
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d006      	beq.n	8001a2e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f001 fde0 	bl	80035e6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 fcd2 	bl	80023d0 <I2C_Master_SB>
 8001a2c:	e092      	b.n	8001b54 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	08db      	lsrs	r3, r3, #3
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d009      	beq.n	8001a4e <HAL_I2C_EV_IRQHandler+0xb2>
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	0a5b      	lsrs	r3, r3, #9
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 fd48 	bl	80024dc <I2C_Master_ADD10>
 8001a4c:	e082      	b.n	8001b54 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	085b      	lsrs	r3, r3, #1
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d009      	beq.n	8001a6e <HAL_I2C_EV_IRQHandler+0xd2>
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	0a5b      	lsrs	r3, r3, #9
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 fd62 	bl	8002530 <I2C_Master_ADDR>
 8001a6c:	e072      	b.n	8001b54 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	089b      	lsrs	r3, r3, #2
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d03b      	beq.n	8001af2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a88:	f000 80f3 	beq.w	8001c72 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	09db      	lsrs	r3, r3, #7
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d00f      	beq.n	8001ab8 <HAL_I2C_EV_IRQHandler+0x11c>
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	0a9b      	lsrs	r3, r3, #10
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d009      	beq.n	8001ab8 <HAL_I2C_EV_IRQHandler+0x11c>
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	089b      	lsrs	r3, r3, #2
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d103      	bne.n	8001ab8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f94c 	bl	8001d4e <I2C_MasterTransmit_TXE>
 8001ab6:	e04d      	b.n	8001b54 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	089b      	lsrs	r3, r3, #2
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 80d6 	beq.w	8001c72 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	0a5b      	lsrs	r3, r3, #9
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 80cf 	beq.w	8001c72 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001ad4:	7bbb      	ldrb	r3, [r7, #14]
 8001ad6:	2b21      	cmp	r3, #33	; 0x21
 8001ad8:	d103      	bne.n	8001ae2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 f9d3 	bl	8001e86 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ae0:	e0c7      	b.n	8001c72 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
 8001ae4:	2b40      	cmp	r3, #64	; 0x40
 8001ae6:	f040 80c4 	bne.w	8001c72 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 fa41 	bl	8001f72 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001af0:	e0bf      	b.n	8001c72 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001afc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b00:	f000 80b7 	beq.w	8001c72 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	099b      	lsrs	r3, r3, #6
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00f      	beq.n	8001b30 <HAL_I2C_EV_IRQHandler+0x194>
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	0a9b      	lsrs	r3, r3, #10
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d009      	beq.n	8001b30 <HAL_I2C_EV_IRQHandler+0x194>
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	089b      	lsrs	r3, r3, #2
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d103      	bne.n	8001b30 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 fab6 	bl	800209a <I2C_MasterReceive_RXNE>
 8001b2e:	e011      	b.n	8001b54 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	089b      	lsrs	r3, r3, #2
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 809a 	beq.w	8001c72 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	0a5b      	lsrs	r3, r3, #9
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 8093 	beq.w	8001c72 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 fb55 	bl	80021fc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b52:	e08e      	b.n	8001c72 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001b54:	e08d      	b.n	8001c72 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d004      	beq.n	8001b68 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	61fb      	str	r3, [r7, #28]
 8001b66:	e007      	b.n	8001b78 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	085b      	lsrs	r3, r3, #1
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d012      	beq.n	8001baa <HAL_I2C_EV_IRQHandler+0x20e>
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	0a5b      	lsrs	r3, r3, #9
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00c      	beq.n	8001baa <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001ba0:	69b9      	ldr	r1, [r7, #24]
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 ff13 	bl	80029ce <I2C_Slave_ADDR>
 8001ba8:	e066      	b.n	8001c78 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	091b      	lsrs	r3, r3, #4
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d009      	beq.n	8001bca <HAL_I2C_EV_IRQHandler+0x22e>
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	0a5b      	lsrs	r3, r3, #9
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 ff4e 	bl	8002a64 <I2C_Slave_STOPF>
 8001bc8:	e056      	b.n	8001c78 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001bca:	7bbb      	ldrb	r3, [r7, #14]
 8001bcc:	2b21      	cmp	r3, #33	; 0x21
 8001bce:	d002      	beq.n	8001bd6 <HAL_I2C_EV_IRQHandler+0x23a>
 8001bd0:	7bbb      	ldrb	r3, [r7, #14]
 8001bd2:	2b29      	cmp	r3, #41	; 0x29
 8001bd4:	d125      	bne.n	8001c22 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	09db      	lsrs	r3, r3, #7
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00f      	beq.n	8001c02 <HAL_I2C_EV_IRQHandler+0x266>
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	0a9b      	lsrs	r3, r3, #10
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d009      	beq.n	8001c02 <HAL_I2C_EV_IRQHandler+0x266>
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	089b      	lsrs	r3, r3, #2
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d103      	bne.n	8001c02 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 fe29 	bl	8002852 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c00:	e039      	b.n	8001c76 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	089b      	lsrs	r3, r3, #2
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d033      	beq.n	8001c76 <HAL_I2C_EV_IRQHandler+0x2da>
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	0a5b      	lsrs	r3, r3, #9
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d02d      	beq.n	8001c76 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 fe56 	bl	80028cc <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c20:	e029      	b.n	8001c76 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	099b      	lsrs	r3, r3, #6
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00f      	beq.n	8001c4e <HAL_I2C_EV_IRQHandler+0x2b2>
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	0a9b      	lsrs	r3, r3, #10
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d009      	beq.n	8001c4e <HAL_I2C_EV_IRQHandler+0x2b2>
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	089b      	lsrs	r3, r3, #2
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d103      	bne.n	8001c4e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 fe61 	bl	800290e <I2C_SlaveReceive_RXNE>
 8001c4c:	e014      	b.n	8001c78 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	089b      	lsrs	r3, r3, #2
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00e      	beq.n	8001c78 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	0a5b      	lsrs	r3, r3, #9
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d008      	beq.n	8001c78 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 fe8f 	bl	800298a <I2C_SlaveReceive_BTF>
 8001c6c:	e004      	b.n	8001c78 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001c6e:	bf00      	nop
 8001c70:	e002      	b.n	8001c78 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c72:	bf00      	nop
 8001c74:	e000      	b.n	8001c78 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c76:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001c78:	3720      	adds	r7, #32
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	70fb      	strb	r3, [r7, #3]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b084      	sub	sp, #16
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d5c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d64:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d150      	bne.n	8001e16 <I2C_MasterTransmit_TXE+0xc8>
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
 8001d76:	2b21      	cmp	r3, #33	; 0x21
 8001d78:	d14d      	bne.n	8001e16 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d01d      	beq.n	8001dbc <I2C_MasterTransmit_TXE+0x6e>
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2b20      	cmp	r3, #32
 8001d84:	d01a      	beq.n	8001dbc <I2C_MasterTransmit_TXE+0x6e>
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d8c:	d016      	beq.n	8001dbc <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d9c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2211      	movs	r2, #17
 8001da2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2220      	movs	r2, #32
 8001db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff ff62 	bl	8001c7e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001dba:	e060      	b.n	8001e7e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001dca:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dda:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2220      	movs	r2, #32
 8001de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b40      	cmp	r3, #64	; 0x40
 8001df4:	d107      	bne.n	8001e06 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff ff7d 	bl	8001cfe <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e04:	e03b      	b.n	8001e7e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff ff35 	bl	8001c7e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e14:	e033      	b.n	8001e7e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
 8001e18:	2b21      	cmp	r3, #33	; 0x21
 8001e1a:	d005      	beq.n	8001e28 <I2C_MasterTransmit_TXE+0xda>
 8001e1c:	7bbb      	ldrb	r3, [r7, #14]
 8001e1e:	2b40      	cmp	r3, #64	; 0x40
 8001e20:	d12d      	bne.n	8001e7e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	2b22      	cmp	r3, #34	; 0x22
 8001e26:	d12a      	bne.n	8001e7e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d108      	bne.n	8001e44 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e40:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001e42:	e01c      	b.n	8001e7e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b40      	cmp	r3, #64	; 0x40
 8001e4e:	d103      	bne.n	8001e58 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f88e 	bl	8001f72 <I2C_MemoryTransmit_TXE_BTF>
}
 8001e56:	e012      	b.n	8001e7e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	781a      	ldrb	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	1c5a      	adds	r2, r3, #1
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	3b01      	subs	r3, #1
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001e7c:	e7ff      	b.n	8001e7e <I2C_MasterTransmit_TXE+0x130>
 8001e7e:	bf00      	nop
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b084      	sub	sp, #16
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e92:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b21      	cmp	r3, #33	; 0x21
 8001e9e:	d164      	bne.n	8001f6a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d012      	beq.n	8001ed0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	781a      	ldrb	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001ece:	e04c      	b.n	8001f6a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2b08      	cmp	r3, #8
 8001ed4:	d01d      	beq.n	8001f12 <I2C_MasterTransmit_BTF+0x8c>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2b20      	cmp	r3, #32
 8001eda:	d01a      	beq.n	8001f12 <I2C_MasterTransmit_BTF+0x8c>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ee2:	d016      	beq.n	8001f12 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ef2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2211      	movs	r2, #17
 8001ef8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2220      	movs	r2, #32
 8001f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff feb7 	bl	8001c7e <HAL_I2C_MasterTxCpltCallback>
}
 8001f10:	e02b      	b.n	8001f6a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f20:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f30:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b40      	cmp	r3, #64	; 0x40
 8001f4a:	d107      	bne.n	8001f5c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff fed2 	bl	8001cfe <HAL_I2C_MemTxCpltCallback>
}
 8001f5a:	e006      	b.n	8001f6a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff fe8a 	bl	8001c7e <HAL_I2C_MasterTxCpltCallback>
}
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b084      	sub	sp, #16
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f80:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d11d      	bne.n	8001fc6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d10b      	bne.n	8001faa <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fa2:	1c9a      	adds	r2, r3, #2
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001fa8:	e073      	b.n	8002092 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	121b      	asrs	r3, r3, #8
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fbe:	1c5a      	adds	r2, r3, #1
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001fc4:	e065      	b.n	8002092 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d10b      	bne.n	8001fe6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001fe4:	e055      	b.n	8002092 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d151      	bne.n	8002092 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
 8001ff0:	2b22      	cmp	r3, #34	; 0x22
 8001ff2:	d10d      	bne.n	8002010 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002002:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002008:	1c5a      	adds	r2, r3, #1
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800200e:	e040      	b.n	8002092 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002014:	b29b      	uxth	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d015      	beq.n	8002046 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	2b21      	cmp	r3, #33	; 0x21
 800201e:	d112      	bne.n	8002046 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	781a      	ldrb	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002030:	1c5a      	adds	r2, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203a:	b29b      	uxth	r3, r3
 800203c:	3b01      	subs	r3, #1
 800203e:	b29a      	uxth	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002044:	e025      	b.n	8002092 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204a:	b29b      	uxth	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d120      	bne.n	8002092 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	2b21      	cmp	r3, #33	; 0x21
 8002054:	d11d      	bne.n	8002092 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002064:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002074:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2220      	movs	r2, #32
 8002080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff fe36 	bl	8001cfe <HAL_I2C_MemTxCpltCallback>
}
 8002092:	bf00      	nop
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b084      	sub	sp, #16
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b22      	cmp	r3, #34	; 0x22
 80020ac:	f040 80a2 	bne.w	80021f4 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	d921      	bls.n	8002102 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	691a      	ldr	r2, [r3, #16]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	1c5a      	adds	r2, r3, #1
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020da:	b29b      	uxth	r3, r3
 80020dc:	3b01      	subs	r3, #1
 80020de:	b29a      	uxth	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	f040 8082 	bne.w	80021f4 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020fe:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002100:	e078      	b.n	80021f4 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002106:	2b02      	cmp	r3, #2
 8002108:	d074      	beq.n	80021f4 <I2C_MasterReceive_RXNE+0x15a>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d002      	beq.n	8002116 <I2C_MasterReceive_RXNE+0x7c>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d16e      	bne.n	80021f4 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f001 f9ae 	bl	8003478 <I2C_WaitOnSTOPRequestThroughIT>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d142      	bne.n	80021a8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002130:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002140:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215e:	b29b      	uxth	r3, r3
 8002160:	3b01      	subs	r3, #1
 8002162:	b29a      	uxth	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2220      	movs	r2, #32
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b40      	cmp	r3, #64	; 0x40
 800217a:	d10a      	bne.n	8002192 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff fdc1 	bl	8001d12 <HAL_I2C_MemRxCpltCallback>
}
 8002190:	e030      	b.n	80021f4 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2212      	movs	r2, #18
 800219e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f7ff fd76 	bl	8001c92 <HAL_I2C_MasterRxCpltCallback>
}
 80021a6:	e025      	b.n	80021f4 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021b6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	691a      	ldr	r2, [r3, #16]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	3b01      	subs	r3, #1
 80021d8:	b29a      	uxth	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2220      	movs	r2, #32
 80021e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff fd99 	bl	8001d26 <HAL_I2C_ErrorCallback>
}
 80021f4:	bf00      	nop
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002208:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220e:	b29b      	uxth	r3, r3
 8002210:	2b04      	cmp	r3, #4
 8002212:	d11b      	bne.n	800224c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002222:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	691a      	ldr	r2, [r3, #16]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	1c5a      	adds	r2, r3, #1
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002240:	b29b      	uxth	r3, r3
 8002242:	3b01      	subs	r3, #1
 8002244:	b29a      	uxth	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800224a:	e0bd      	b.n	80023c8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002250:	b29b      	uxth	r3, r3
 8002252:	2b03      	cmp	r3, #3
 8002254:	d129      	bne.n	80022aa <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002264:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2b04      	cmp	r3, #4
 800226a:	d00a      	beq.n	8002282 <I2C_MasterReceive_BTF+0x86>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d007      	beq.n	8002282 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002280:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	1c5a      	adds	r2, r3, #1
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229e:	b29b      	uxth	r3, r3
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80022a8:	e08e      	b.n	80023c8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d176      	bne.n	80023a2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d002      	beq.n	80022c0 <I2C_MasterReceive_BTF+0xc4>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2b10      	cmp	r3, #16
 80022be:	d108      	bne.n	80022d2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	e019      	b.n	8002306 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d002      	beq.n	80022de <I2C_MasterReceive_BTF+0xe2>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d108      	bne.n	80022f0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	e00a      	b.n	8002306 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2b10      	cmp	r3, #16
 80022f4:	d007      	beq.n	8002306 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002304:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	691a      	ldr	r2, [r3, #16]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	1c5a      	adds	r2, r3, #1
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002322:	b29b      	uxth	r3, r3
 8002324:	3b01      	subs	r3, #1
 8002326:	b29a      	uxth	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	691a      	ldr	r2, [r3, #16]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002348:	b29b      	uxth	r3, r3
 800234a:	3b01      	subs	r3, #1
 800234c:	b29a      	uxth	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002360:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2220      	movs	r2, #32
 8002366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b40      	cmp	r3, #64	; 0x40
 8002374:	d10a      	bne.n	800238c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff fcc4 	bl	8001d12 <HAL_I2C_MemRxCpltCallback>
}
 800238a:	e01d      	b.n	80023c8 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2212      	movs	r2, #18
 8002398:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff fc79 	bl	8001c92 <HAL_I2C_MasterRxCpltCallback>
}
 80023a0:	e012      	b.n	80023c8 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	691a      	ldr	r2, [r3, #16]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	1c5a      	adds	r2, r3, #1
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023be:	b29b      	uxth	r3, r3
 80023c0:	3b01      	subs	r3, #1
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80023c8:	bf00      	nop
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b40      	cmp	r3, #64	; 0x40
 80023e2:	d117      	bne.n	8002414 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d109      	bne.n	8002400 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	461a      	mov	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023fc:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80023fe:	e067      	b.n	80024d0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002404:	b2db      	uxtb	r3, r3
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	b2da      	uxtb	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	611a      	str	r2, [r3, #16]
}
 8002412:	e05d      	b.n	80024d0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800241c:	d133      	bne.n	8002486 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b21      	cmp	r3, #33	; 0x21
 8002428:	d109      	bne.n	800243e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	b2db      	uxtb	r3, r3
 8002430:	461a      	mov	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800243a:	611a      	str	r2, [r3, #16]
 800243c:	e008      	b.n	8002450 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	b2db      	uxtb	r3, r3
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	b2da      	uxtb	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002454:	2b00      	cmp	r3, #0
 8002456:	d004      	beq.n	8002462 <I2C_Master_SB+0x92>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800245c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245e:	2b00      	cmp	r3, #0
 8002460:	d108      	bne.n	8002474 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002466:	2b00      	cmp	r3, #0
 8002468:	d032      	beq.n	80024d0 <I2C_Master_SB+0x100>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002470:	2b00      	cmp	r3, #0
 8002472:	d02d      	beq.n	80024d0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002482:	605a      	str	r2, [r3, #4]
}
 8002484:	e024      	b.n	80024d0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10e      	bne.n	80024ac <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	b29b      	uxth	r3, r3
 8002494:	11db      	asrs	r3, r3, #7
 8002496:	b2db      	uxtb	r3, r3
 8002498:	f003 0306 	and.w	r3, r3, #6
 800249c:	b2db      	uxtb	r3, r3
 800249e:	f063 030f 	orn	r3, r3, #15
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	611a      	str	r2, [r3, #16]
}
 80024aa:	e011      	b.n	80024d0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d10d      	bne.n	80024d0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	11db      	asrs	r3, r3, #7
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	f003 0306 	and.w	r3, r3, #6
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	f063 030e 	orn	r3, r3, #14
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	611a      	str	r2, [r3, #16]
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d004      	beq.n	8002502 <I2C_Master_ADD10+0x26>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d108      	bne.n	8002514 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00c      	beq.n	8002524 <I2C_Master_ADD10+0x48>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002510:	2b00      	cmp	r3, #0
 8002512:	d007      	beq.n	8002524 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002522:	605a      	str	r2, [r3, #4]
  }
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002530:	b480      	push	{r7}
 8002532:	b091      	sub	sp, #68	; 0x44
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800253e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002546:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b22      	cmp	r3, #34	; 0x22
 8002558:	f040 8169 	bne.w	800282e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10f      	bne.n	8002584 <I2C_Master_ADDR+0x54>
 8002564:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002568:	2b40      	cmp	r3, #64	; 0x40
 800256a:	d10b      	bne.n	8002584 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800256c:	2300      	movs	r3, #0
 800256e:	633b      	str	r3, [r7, #48]	; 0x30
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	633b      	str	r3, [r7, #48]	; 0x30
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	633b      	str	r3, [r7, #48]	; 0x30
 8002580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002582:	e160      	b.n	8002846 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002588:	2b00      	cmp	r3, #0
 800258a:	d11d      	bne.n	80025c8 <I2C_Master_ADDR+0x98>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002594:	d118      	bne.n	80025c8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002596:	2300      	movs	r3, #0
 8002598:	62fb      	str	r3, [r7, #44]	; 0x2c
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ba:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c0:	1c5a      	adds	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	651a      	str	r2, [r3, #80]	; 0x50
 80025c6:	e13e      	b.n	8002846 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d113      	bne.n	80025fa <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025d2:	2300      	movs	r3, #0
 80025d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80025e6:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	e115      	b.n	8002826 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fe:	b29b      	uxth	r3, r3
 8002600:	2b01      	cmp	r3, #1
 8002602:	f040 808a 	bne.w	800271a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002608:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800260c:	d137      	bne.n	800267e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800261c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002628:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800262c:	d113      	bne.n	8002656 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800263c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800263e:	2300      	movs	r3, #0
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	e0e7      	b.n	8002826 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002656:	2300      	movs	r3, #0
 8002658:	623b      	str	r3, [r7, #32]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	623b      	str	r3, [r7, #32]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	623b      	str	r3, [r7, #32]
 800266a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	e0d3      	b.n	8002826 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800267e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002680:	2b08      	cmp	r3, #8
 8002682:	d02e      	beq.n	80026e2 <I2C_Master_ADDR+0x1b2>
 8002684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002686:	2b20      	cmp	r3, #32
 8002688:	d02b      	beq.n	80026e2 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800268a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800268c:	2b12      	cmp	r3, #18
 800268e:	d102      	bne.n	8002696 <I2C_Master_ADDR+0x166>
 8002690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002692:	2b01      	cmp	r3, #1
 8002694:	d125      	bne.n	80026e2 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002698:	2b04      	cmp	r3, #4
 800269a:	d00e      	beq.n	80026ba <I2C_Master_ADDR+0x18a>
 800269c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d00b      	beq.n	80026ba <I2C_Master_ADDR+0x18a>
 80026a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a4:	2b10      	cmp	r3, #16
 80026a6:	d008      	beq.n	80026ba <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	e007      	b.n	80026ca <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026c8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	61fb      	str	r3, [r7, #28]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	61fb      	str	r3, [r7, #28]
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	e0a1      	b.n	8002826 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026f0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f2:	2300      	movs	r3, #0
 80026f4:	61bb      	str	r3, [r7, #24]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	61bb      	str	r3, [r7, #24]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	61bb      	str	r3, [r7, #24]
 8002706:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	e085      	b.n	8002826 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271e:	b29b      	uxth	r3, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d14d      	bne.n	80027c0 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002726:	2b04      	cmp	r3, #4
 8002728:	d016      	beq.n	8002758 <I2C_Master_ADDR+0x228>
 800272a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272c:	2b02      	cmp	r3, #2
 800272e:	d013      	beq.n	8002758 <I2C_Master_ADDR+0x228>
 8002730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002732:	2b10      	cmp	r3, #16
 8002734:	d010      	beq.n	8002758 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002744:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	e007      	b.n	8002768 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002766:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002776:	d117      	bne.n	80027a8 <I2C_Master_ADDR+0x278>
 8002778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800277e:	d00b      	beq.n	8002798 <I2C_Master_ADDR+0x268>
 8002780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002782:	2b01      	cmp	r3, #1
 8002784:	d008      	beq.n	8002798 <I2C_Master_ADDR+0x268>
 8002786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002788:	2b08      	cmp	r3, #8
 800278a:	d005      	beq.n	8002798 <I2C_Master_ADDR+0x268>
 800278c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800278e:	2b10      	cmp	r3, #16
 8002790:	d002      	beq.n	8002798 <I2C_Master_ADDR+0x268>
 8002792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002794:	2b20      	cmp	r3, #32
 8002796:	d107      	bne.n	80027a8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80027a6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	617b      	str	r3, [r7, #20]
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	e032      	b.n	8002826 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027ce:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027de:	d117      	bne.n	8002810 <I2C_Master_ADDR+0x2e0>
 80027e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027e6:	d00b      	beq.n	8002800 <I2C_Master_ADDR+0x2d0>
 80027e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d008      	beq.n	8002800 <I2C_Master_ADDR+0x2d0>
 80027ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d005      	beq.n	8002800 <I2C_Master_ADDR+0x2d0>
 80027f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f6:	2b10      	cmp	r3, #16
 80027f8:	d002      	beq.n	8002800 <I2C_Master_ADDR+0x2d0>
 80027fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fc:	2b20      	cmp	r3, #32
 80027fe:	d107      	bne.n	8002810 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800280e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002810:	2300      	movs	r3, #0
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	613b      	str	r3, [r7, #16]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	613b      	str	r3, [r7, #16]
 8002824:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800282c:	e00b      	b.n	8002846 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	68fb      	ldr	r3, [r7, #12]
}
 8002844:	e7ff      	b.n	8002846 <I2C_Master_ADDR+0x316>
 8002846:	bf00      	nop
 8002848:	3744      	adds	r7, #68	; 0x44
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b084      	sub	sp, #16
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002860:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002866:	b29b      	uxth	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d02b      	beq.n	80028c4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	781a      	ldrb	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	1c5a      	adds	r2, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002886:	b29b      	uxth	r3, r3
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002894:	b29b      	uxth	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d114      	bne.n	80028c4 <I2C_SlaveTransmit_TXE+0x72>
 800289a:	7bfb      	ldrb	r3, [r7, #15]
 800289c:	2b29      	cmp	r3, #41	; 0x29
 800289e:	d111      	bne.n	80028c4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ae:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2221      	movs	r2, #33	; 0x21
 80028b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2228      	movs	r2, #40	; 0x28
 80028ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff f9f1 	bl	8001ca6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80028c4:	bf00      	nop
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d011      	beq.n	8002902 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	781a      	ldrb	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b084      	sub	sp, #16
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002922:	b29b      	uxth	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	d02c      	beq.n	8002982 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	691a      	ldr	r2, [r3, #16]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002944:	b29b      	uxth	r3, r3
 8002946:	3b01      	subs	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002952:	b29b      	uxth	r3, r3
 8002954:	2b00      	cmp	r3, #0
 8002956:	d114      	bne.n	8002982 <I2C_SlaveReceive_RXNE+0x74>
 8002958:	7bfb      	ldrb	r3, [r7, #15]
 800295a:	2b2a      	cmp	r3, #42	; 0x2a
 800295c:	d111      	bne.n	8002982 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800296c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2222      	movs	r2, #34	; 0x22
 8002972:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2228      	movs	r2, #40	; 0x28
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff f99c 	bl	8001cba <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002982:	bf00      	nop
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002996:	b29b      	uxth	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	d012      	beq.n	80029c2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691a      	ldr	r2, [r3, #16]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	3b01      	subs	r3, #1
 80029bc:	b29a      	uxth	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b084      	sub	sp, #16
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80029d8:	2300      	movs	r3, #0
 80029da:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80029e8:	2b28      	cmp	r3, #40	; 0x28
 80029ea:	d127      	bne.n	8002a3c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029fa:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	089b      	lsrs	r3, r3, #2
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	09db      	lsrs	r3, r3, #7
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d103      	bne.n	8002a20 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	81bb      	strh	r3, [r7, #12]
 8002a1e:	e002      	b.n	8002a26 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002a2e:	89ba      	ldrh	r2, [r7, #12]
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
 8002a32:	4619      	mov	r1, r3
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff f94a 	bl	8001cce <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002a3a:	e00e      	b.n	8002a5a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60bb      	str	r3, [r7, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002a5a:	bf00      	nop
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a72:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a82:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002a84:	2300      	movs	r3, #0
 8002a86:	60bb      	str	r3, [r7, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0201 	orr.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ab0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002abc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ac0:	d172      	bne.n	8002ba8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
 8002ac4:	2b22      	cmp	r3, #34	; 0x22
 8002ac6:	d002      	beq.n	8002ace <I2C_Slave_STOPF+0x6a>
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	2b2a      	cmp	r3, #42	; 0x2a
 8002acc:	d135      	bne.n	8002b3a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d005      	beq.n	8002af2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f043 0204 	orr.w	r2, r3, #4
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b00:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fe f966 	bl	8000dd8 <HAL_DMA_GetState>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d049      	beq.n	8002ba6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b16:	4a69      	ldr	r2, [pc, #420]	; (8002cbc <I2C_Slave_STOPF+0x258>)
 8002b18:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fd ffae 	bl	8000a80 <HAL_DMA_Abort_IT>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d03d      	beq.n	8002ba6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b34:	4610      	mov	r0, r2
 8002b36:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b38:	e035      	b.n	8002ba6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d005      	beq.n	8002b5e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	f043 0204 	orr.w	r2, r3, #4
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b6c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe f930 	bl	8000dd8 <HAL_DMA_GetState>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d014      	beq.n	8002ba8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b82:	4a4e      	ldr	r2, [pc, #312]	; (8002cbc <I2C_Slave_STOPF+0x258>)
 8002b84:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fd ff78 	bl	8000a80 <HAL_DMA_Abort_IT>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d008      	beq.n	8002ba8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ba0:	4610      	mov	r0, r2
 8002ba2:	4798      	blx	r3
 8002ba4:	e000      	b.n	8002ba8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ba6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d03e      	beq.n	8002c30 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b04      	cmp	r3, #4
 8002bbe:	d112      	bne.n	8002be6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691a      	ldr	r2, [r3, #16]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf0:	2b40      	cmp	r3, #64	; 0x40
 8002bf2:	d112      	bne.n	8002c1a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691a      	ldr	r2, [r3, #16]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	3b01      	subs	r3, #1
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	f043 0204 	orr.w	r2, r3, #4
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f843 	bl	8002cc4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002c3e:	e039      	b.n	8002cb4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	2b2a      	cmp	r3, #42	; 0x2a
 8002c44:	d109      	bne.n	8002c5a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2228      	movs	r2, #40	; 0x28
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff f830 	bl	8001cba <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b28      	cmp	r3, #40	; 0x28
 8002c64:	d111      	bne.n	8002c8a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a15      	ldr	r2, [pc, #84]	; (8002cc0 <I2C_Slave_STOPF+0x25c>)
 8002c6a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2220      	movs	r2, #32
 8002c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff f831 	bl	8001cea <HAL_I2C_ListenCpltCallback>
}
 8002c88:	e014      	b.n	8002cb4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	2b22      	cmp	r3, #34	; 0x22
 8002c90:	d002      	beq.n	8002c98 <I2C_Slave_STOPF+0x234>
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
 8002c94:	2b22      	cmp	r3, #34	; 0x22
 8002c96:	d10d      	bne.n	8002cb4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff f803 	bl	8001cba <HAL_I2C_SlaveRxCpltCallback>
}
 8002cb4:	bf00      	nop
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	080030f9 	.word	0x080030f9
 8002cc0:	ffff0000 	.word	0xffff0000

08002cc4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cda:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002cdc:	7bbb      	ldrb	r3, [r7, #14]
 8002cde:	2b10      	cmp	r3, #16
 8002ce0:	d002      	beq.n	8002ce8 <I2C_ITError+0x24>
 8002ce2:	7bbb      	ldrb	r3, [r7, #14]
 8002ce4:	2b40      	cmp	r3, #64	; 0x40
 8002ce6:	d10a      	bne.n	8002cfe <I2C_ITError+0x3a>
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
 8002cea:	2b22      	cmp	r3, #34	; 0x22
 8002cec:	d107      	bne.n	8002cfe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cfc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
 8002d00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d04:	2b28      	cmp	r3, #40	; 0x28
 8002d06:	d107      	bne.n	8002d18 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2228      	movs	r2, #40	; 0x28
 8002d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002d16:	e015      	b.n	8002d44 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d26:	d00a      	beq.n	8002d3e <I2C_ITError+0x7a>
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
 8002d2a:	2b60      	cmp	r3, #96	; 0x60
 8002d2c:	d007      	beq.n	8002d3e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2220      	movs	r2, #32
 8002d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d52:	d162      	bne.n	8002e1a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d62:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d020      	beq.n	8002db4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d76:	4a6a      	ldr	r2, [pc, #424]	; (8002f20 <I2C_ITError+0x25c>)
 8002d78:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fd fe7e 	bl	8000a80 <HAL_DMA_Abort_IT>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 8089 	beq.w	8002e9e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0201 	bic.w	r2, r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002dae:	4610      	mov	r0, r2
 8002db0:	4798      	blx	r3
 8002db2:	e074      	b.n	8002e9e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db8:	4a59      	ldr	r2, [pc, #356]	; (8002f20 <I2C_ITError+0x25c>)
 8002dba:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fd fe5d 	bl	8000a80 <HAL_DMA_Abort_IT>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d068      	beq.n	8002e9e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd6:	2b40      	cmp	r3, #64	; 0x40
 8002dd8:	d10b      	bne.n	8002df2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	691a      	ldr	r2, [r3, #16]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	1c5a      	adds	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0201 	bic.w	r2, r2, #1
 8002e00:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e14:	4610      	mov	r0, r2
 8002e16:	4798      	blx	r3
 8002e18:	e041      	b.n	8002e9e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b60      	cmp	r3, #96	; 0x60
 8002e24:	d125      	bne.n	8002e72 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3e:	2b40      	cmp	r3, #64	; 0x40
 8002e40:	d10b      	bne.n	8002e5a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	1c5a      	adds	r2, r3, #1
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0201 	bic.w	r2, r2, #1
 8002e68:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7fe ff65 	bl	8001d3a <HAL_I2C_AbortCpltCallback>
 8002e70:	e015      	b.n	8002e9e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7c:	2b40      	cmp	r3, #64	; 0x40
 8002e7e:	d10b      	bne.n	8002e98 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691a      	ldr	r2, [r3, #16]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	1c5a      	adds	r2, r3, #1
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f7fe ff44 	bl	8001d26 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10e      	bne.n	8002ecc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d109      	bne.n	8002ecc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d104      	bne.n	8002ecc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d007      	beq.n	8002edc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002eda:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d113      	bne.n	8002f18 <I2C_ITError+0x254>
 8002ef0:	7bfb      	ldrb	r3, [r7, #15]
 8002ef2:	2b28      	cmp	r3, #40	; 0x28
 8002ef4:	d110      	bne.n	8002f18 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a0a      	ldr	r2, [pc, #40]	; (8002f24 <I2C_ITError+0x260>)
 8002efa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2220      	movs	r2, #32
 8002f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7fe fee9 	bl	8001cea <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f18:	bf00      	nop
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	080030f9 	.word	0x080030f9
 8002f24:	ffff0000 	.word	0xffff0000

08002f28 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af02      	add	r7, sp, #8
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	4608      	mov	r0, r1
 8002f32:	4611      	mov	r1, r2
 8002f34:	461a      	mov	r2, r3
 8002f36:	4603      	mov	r3, r0
 8002f38:	817b      	strh	r3, [r7, #10]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	813b      	strh	r3, [r7, #8]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f50:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 f96a 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00d      	beq.n	8002f96 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f88:	d103      	bne.n	8002f92 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e0aa      	b.n	80030ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f96:	897b      	ldrh	r3, [r7, #10]
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fa4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	6a3a      	ldr	r2, [r7, #32]
 8002faa:	4952      	ldr	r1, [pc, #328]	; (80030f4 <I2C_RequestMemoryRead+0x1cc>)
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 f9a2 	bl	80032f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e097      	b.n	80030ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd4:	6a39      	ldr	r1, [r7, #32]
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 fa0c 	bl	80033f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00d      	beq.n	8002ffe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d107      	bne.n	8002ffa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e076      	b.n	80030ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ffe:	88fb      	ldrh	r3, [r7, #6]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d105      	bne.n	8003010 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003004:	893b      	ldrh	r3, [r7, #8]
 8003006:	b2da      	uxtb	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	611a      	str	r2, [r3, #16]
 800300e:	e021      	b.n	8003054 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003010:	893b      	ldrh	r3, [r7, #8]
 8003012:	0a1b      	lsrs	r3, r3, #8
 8003014:	b29b      	uxth	r3, r3
 8003016:	b2da      	uxtb	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800301e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003020:	6a39      	ldr	r1, [r7, #32]
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 f9e6 	bl	80033f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00d      	beq.n	800304a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	2b04      	cmp	r3, #4
 8003034:	d107      	bne.n	8003046 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003044:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e050      	b.n	80030ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800304a:	893b      	ldrh	r3, [r7, #8]
 800304c:	b2da      	uxtb	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003056:	6a39      	ldr	r1, [r7, #32]
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 f9cb 	bl	80033f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00d      	beq.n	8003080 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	2b04      	cmp	r3, #4
 800306a:	d107      	bne.n	800307c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800307a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e035      	b.n	80030ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800308e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	6a3b      	ldr	r3, [r7, #32]
 8003096:	2200      	movs	r2, #0
 8003098:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 f8d3 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00d      	beq.n	80030c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030b6:	d103      	bne.n	80030c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e013      	b.n	80030ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80030c4:	897b      	ldrh	r3, [r7, #10]
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	6a3a      	ldr	r2, [r7, #32]
 80030d8:	4906      	ldr	r1, [pc, #24]	; (80030f4 <I2C_RequestMemoryRead+0x1cc>)
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f90b 	bl	80032f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	00010002 	.word	0x00010002

080030f8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003108:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003110:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003112:	4b4b      	ldr	r3, [pc, #300]	; (8003240 <I2C_DMAAbort+0x148>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	08db      	lsrs	r3, r3, #3
 8003118:	4a4a      	ldr	r2, [pc, #296]	; (8003244 <I2C_DMAAbort+0x14c>)
 800311a:	fba2 2303 	umull	r2, r3, r2, r3
 800311e:	0a1a      	lsrs	r2, r3, #8
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	00da      	lsls	r2, r3, #3
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d106      	bne.n	8003140 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	f043 0220 	orr.w	r2, r3, #32
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800313e:	e00a      	b.n	8003156 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	3b01      	subs	r3, #1
 8003144:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003154:	d0ea      	beq.n	800312c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003162:	2200      	movs	r2, #0
 8003164:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003172:	2200      	movs	r2, #0
 8003174:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003184:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2200      	movs	r2, #0
 800318a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003198:	2200      	movs	r2, #0
 800319a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a8:	2200      	movs	r2, #0
 80031aa:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0201 	bic.w	r2, r2, #1
 80031ba:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b60      	cmp	r3, #96	; 0x60
 80031c6:	d10e      	bne.n	80031e6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	2220      	movs	r2, #32
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	2200      	movs	r2, #0
 80031dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80031de:	6978      	ldr	r0, [r7, #20]
 80031e0:	f7fe fdab 	bl	8001d3a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80031e4:	e027      	b.n	8003236 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80031e6:	7cfb      	ldrb	r3, [r7, #19]
 80031e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031ec:	2b28      	cmp	r3, #40	; 0x28
 80031ee:	d117      	bne.n	8003220 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800320e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	2200      	movs	r2, #0
 8003214:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2228      	movs	r2, #40	; 0x28
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800321e:	e007      	b.n	8003230 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003230:	6978      	ldr	r0, [r7, #20]
 8003232:	f7fe fd78 	bl	8001d26 <HAL_I2C_ErrorCallback>
}
 8003236:	bf00      	nop
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20000118 	.word	0x20000118
 8003244:	14f8b589 	.word	0x14f8b589

08003248 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	4613      	mov	r3, r2
 8003256:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003258:	e025      	b.n	80032a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003260:	d021      	beq.n	80032a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003262:	f7fd fa1d 	bl	80006a0 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d302      	bcc.n	8003278 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d116      	bne.n	80032a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2220      	movs	r2, #32
 8003282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	f043 0220 	orr.w	r2, r3, #32
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e023      	b.n	80032ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	0c1b      	lsrs	r3, r3, #16
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d10d      	bne.n	80032cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	43da      	mvns	r2, r3
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	4013      	ands	r3, r2
 80032bc:	b29b      	uxth	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	bf0c      	ite	eq
 80032c2:	2301      	moveq	r3, #1
 80032c4:	2300      	movne	r3, #0
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	461a      	mov	r2, r3
 80032ca:	e00c      	b.n	80032e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	43da      	mvns	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	4013      	ands	r3, r2
 80032d8:	b29b      	uxth	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	bf0c      	ite	eq
 80032de:	2301      	moveq	r3, #1
 80032e0:	2300      	movne	r3, #0
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	461a      	mov	r2, r3
 80032e6:	79fb      	ldrb	r3, [r7, #7]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d0b6      	beq.n	800325a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b084      	sub	sp, #16
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	60f8      	str	r0, [r7, #12]
 80032fe:	60b9      	str	r1, [r7, #8]
 8003300:	607a      	str	r2, [r7, #4]
 8003302:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003304:	e051      	b.n	80033aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003314:	d123      	bne.n	800335e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003324:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800332e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2220      	movs	r2, #32
 800333a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	f043 0204 	orr.w	r2, r3, #4
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e046      	b.n	80033ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003364:	d021      	beq.n	80033aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003366:	f7fd f99b 	bl	80006a0 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	429a      	cmp	r2, r3
 8003374:	d302      	bcc.n	800337c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d116      	bne.n	80033aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	f043 0220 	orr.w	r2, r3, #32
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e020      	b.n	80033ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	0c1b      	lsrs	r3, r3, #16
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d10c      	bne.n	80033ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	43da      	mvns	r2, r3
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	4013      	ands	r3, r2
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	bf14      	ite	ne
 80033c6:	2301      	movne	r3, #1
 80033c8:	2300      	moveq	r3, #0
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	e00b      	b.n	80033e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	43da      	mvns	r2, r3
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	4013      	ands	r3, r2
 80033da:	b29b      	uxth	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	bf14      	ite	ne
 80033e0:	2301      	movne	r3, #1
 80033e2:	2300      	moveq	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d18d      	bne.n	8003306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003400:	e02d      	b.n	800345e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 f8c0 	bl	8003588 <I2C_IsAcknowledgeFailed>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e02d      	b.n	800346e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003418:	d021      	beq.n	800345e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800341a:	f7fd f941 	bl	80006a0 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	429a      	cmp	r2, r3
 8003428:	d302      	bcc.n	8003430 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d116      	bne.n	800345e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2220      	movs	r2, #32
 800343a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	f043 0220 	orr.w	r2, r3, #32
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e007      	b.n	800346e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003468:	2b80      	cmp	r3, #128	; 0x80
 800346a:	d1ca      	bne.n	8003402 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
	...

08003478 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003484:	4b13      	ldr	r3, [pc, #76]	; (80034d4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	08db      	lsrs	r3, r3, #3
 800348a:	4a13      	ldr	r2, [pc, #76]	; (80034d8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800348c:	fba2 2303 	umull	r2, r3, r2, r3
 8003490:	0a1a      	lsrs	r2, r3, #8
 8003492:	4613      	mov	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	3b01      	subs	r3, #1
 800349e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d107      	bne.n	80034b6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	f043 0220 	orr.w	r2, r3, #32
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e008      	b.n	80034c8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034c4:	d0e9      	beq.n	800349a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	20000118 	.word	0x20000118
 80034d8:	14f8b589 	.word	0x14f8b589

080034dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034e8:	e042      	b.n	8003570 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	f003 0310 	and.w	r3, r3, #16
 80034f4:	2b10      	cmp	r3, #16
 80034f6:	d119      	bne.n	800352c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f06f 0210 	mvn.w	r2, #16
 8003500:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e029      	b.n	8003580 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800352c:	f7fd f8b8 	bl	80006a0 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	429a      	cmp	r2, r3
 800353a:	d302      	bcc.n	8003542 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d116      	bne.n	8003570 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2220      	movs	r2, #32
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	f043 0220 	orr.w	r2, r3, #32
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e007      	b.n	8003580 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357a:	2b40      	cmp	r3, #64	; 0x40
 800357c:	d1b5      	bne.n	80034ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800359e:	d11b      	bne.n	80035d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2220      	movs	r2, #32
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	f043 0204 	orr.w	r2, r3, #4
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e000      	b.n	80035da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80035f6:	d103      	bne.n	8003600 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80035fe:	e007      	b.n	8003610 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003604:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003608:	d102      	bne.n	8003610 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2208      	movs	r2, #8
 800360e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800361c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800361e:	b08f      	sub	sp, #60	; 0x3c
 8003620:	af0a      	add	r7, sp, #40	; 0x28
 8003622:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e10f      	b.n	800384e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	d106      	bne.n	800364e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f007 f955 	bl	800a8f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2203      	movs	r2, #3
 8003652:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365e:	2b00      	cmp	r3, #0
 8003660:	d102      	bne.n	8003668 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f003 fd0e 	bl	800708e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	603b      	str	r3, [r7, #0]
 8003678:	687e      	ldr	r6, [r7, #4]
 800367a:	466d      	mov	r5, sp
 800367c:	f106 0410 	add.w	r4, r6, #16
 8003680:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003682:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003686:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003688:	e894 0003 	ldmia.w	r4, {r0, r1}
 800368c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003690:	1d33      	adds	r3, r6, #4
 8003692:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003694:	6838      	ldr	r0, [r7, #0]
 8003696:	f003 fbe5 	bl	8006e64 <USB_CoreInit>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d005      	beq.n	80036ac <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e0d0      	b.n	800384e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2100      	movs	r1, #0
 80036b2:	4618      	mov	r0, r3
 80036b4:	f003 fcfc 	bl	80070b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036b8:	2300      	movs	r3, #0
 80036ba:	73fb      	strb	r3, [r7, #15]
 80036bc:	e04a      	b.n	8003754 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80036be:	7bfa      	ldrb	r2, [r7, #15]
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	1a9b      	subs	r3, r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	440b      	add	r3, r1
 80036cc:	333d      	adds	r3, #61	; 0x3d
 80036ce:	2201      	movs	r2, #1
 80036d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036d2:	7bfa      	ldrb	r2, [r7, #15]
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	4613      	mov	r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	1a9b      	subs	r3, r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	440b      	add	r3, r1
 80036e0:	333c      	adds	r3, #60	; 0x3c
 80036e2:	7bfa      	ldrb	r2, [r7, #15]
 80036e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036e6:	7bfa      	ldrb	r2, [r7, #15]
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
 80036ea:	b298      	uxth	r0, r3
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	4613      	mov	r3, r2
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	1a9b      	subs	r3, r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	440b      	add	r3, r1
 80036f8:	3342      	adds	r3, #66	; 0x42
 80036fa:	4602      	mov	r2, r0
 80036fc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036fe:	7bfa      	ldrb	r2, [r7, #15]
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	4613      	mov	r3, r2
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	1a9b      	subs	r3, r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	440b      	add	r3, r1
 800370c:	333f      	adds	r3, #63	; 0x3f
 800370e:	2200      	movs	r2, #0
 8003710:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003712:	7bfa      	ldrb	r2, [r7, #15]
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	4613      	mov	r3, r2
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	1a9b      	subs	r3, r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	3344      	adds	r3, #68	; 0x44
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003726:	7bfa      	ldrb	r2, [r7, #15]
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	4613      	mov	r3, r2
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	1a9b      	subs	r3, r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	440b      	add	r3, r1
 8003734:	3348      	adds	r3, #72	; 0x48
 8003736:	2200      	movs	r2, #0
 8003738:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800373a:	7bfa      	ldrb	r2, [r7, #15]
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	4613      	mov	r3, r2
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	1a9b      	subs	r3, r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	440b      	add	r3, r1
 8003748:	3350      	adds	r3, #80	; 0x50
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800374e:	7bfb      	ldrb	r3, [r7, #15]
 8003750:	3301      	adds	r3, #1
 8003752:	73fb      	strb	r3, [r7, #15]
 8003754:	7bfa      	ldrb	r2, [r7, #15]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	429a      	cmp	r2, r3
 800375c:	d3af      	bcc.n	80036be <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800375e:	2300      	movs	r3, #0
 8003760:	73fb      	strb	r3, [r7, #15]
 8003762:	e044      	b.n	80037ee <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003764:	7bfa      	ldrb	r2, [r7, #15]
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	4613      	mov	r3, r2
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	1a9b      	subs	r3, r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003776:	2200      	movs	r2, #0
 8003778:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800377a:	7bfa      	ldrb	r2, [r7, #15]
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	4613      	mov	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	1a9b      	subs	r3, r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800378c:	7bfa      	ldrb	r2, [r7, #15]
 800378e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003790:	7bfa      	ldrb	r2, [r7, #15]
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	4613      	mov	r3, r2
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	1a9b      	subs	r3, r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80037a2:	2200      	movs	r2, #0
 80037a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037a6:	7bfa      	ldrb	r2, [r7, #15]
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	4613      	mov	r3, r2
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	1a9b      	subs	r3, r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	440b      	add	r3, r1
 80037b4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037bc:	7bfa      	ldrb	r2, [r7, #15]
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	4613      	mov	r3, r2
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	1a9b      	subs	r3, r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037d2:	7bfa      	ldrb	r2, [r7, #15]
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	4613      	mov	r3, r2
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	1a9b      	subs	r3, r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	440b      	add	r3, r1
 80037e0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
 80037ea:	3301      	adds	r3, #1
 80037ec:	73fb      	strb	r3, [r7, #15]
 80037ee:	7bfa      	ldrb	r2, [r7, #15]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d3b5      	bcc.n	8003764 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	603b      	str	r3, [r7, #0]
 80037fe:	687e      	ldr	r6, [r7, #4]
 8003800:	466d      	mov	r5, sp
 8003802:	f106 0410 	add.w	r4, r6, #16
 8003806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003808:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800380a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800380c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800380e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003812:	e885 0003 	stmia.w	r5, {r0, r1}
 8003816:	1d33      	adds	r3, r6, #4
 8003818:	cb0e      	ldmia	r3, {r1, r2, r3}
 800381a:	6838      	ldr	r0, [r7, #0]
 800381c:	f003 fc94 	bl	8007148 <USB_DevInit>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d005      	beq.n	8003832 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2202      	movs	r2, #2
 800382a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e00d      	b.n	800384e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f004 fd10 	bl	800826c <USB_DevDisconnect>

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003856 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b084      	sub	sp, #16
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800386a:	2b01      	cmp	r3, #1
 800386c:	d101      	bne.n	8003872 <HAL_PCD_Start+0x1c>
 800386e:	2302      	movs	r3, #2
 8003870:	e020      	b.n	80038b4 <HAL_PCD_Start+0x5e>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387e:	2b01      	cmp	r3, #1
 8003880:	d109      	bne.n	8003896 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003886:	2b01      	cmp	r3, #1
 8003888:	d005      	beq.n	8003896 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f003 fbe6 	bl	800706c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f004 fcc0 	bl	800822a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80038bc:	b590      	push	{r4, r7, lr}
 80038be:	b08d      	sub	sp, #52	; 0x34
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f004 fd7e 	bl	80083d4 <USB_GetMode>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f040 839d 	bne.w	800401a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f004 fce2 	bl	80082ae <USB_ReadInterrupts>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 8393 	beq.w	8004018 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f004 fcd9 	bl	80082ae <USB_ReadInterrupts>
 80038fc:	4603      	mov	r3, r0
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b02      	cmp	r3, #2
 8003904:	d107      	bne.n	8003916 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695a      	ldr	r2, [r3, #20]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f002 0202 	and.w	r2, r2, #2
 8003914:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f004 fcc7 	bl	80082ae <USB_ReadInterrupts>
 8003920:	4603      	mov	r3, r0
 8003922:	f003 0310 	and.w	r3, r3, #16
 8003926:	2b10      	cmp	r3, #16
 8003928:	d161      	bne.n	80039ee <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	699a      	ldr	r2, [r3, #24]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0210 	bic.w	r2, r2, #16
 8003938:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	f003 020f 	and.w	r2, r3, #15
 8003946:	4613      	mov	r3, r2
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	1a9b      	subs	r3, r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	4413      	add	r3, r2
 8003956:	3304      	adds	r3, #4
 8003958:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	0c5b      	lsrs	r3, r3, #17
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	2b02      	cmp	r3, #2
 8003964:	d124      	bne.n	80039b0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800396c:	4013      	ands	r3, r2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d035      	beq.n	80039de <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	091b      	lsrs	r3, r3, #4
 800397a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800397c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003980:	b29b      	uxth	r3, r3
 8003982:	461a      	mov	r2, r3
 8003984:	6a38      	ldr	r0, [r7, #32]
 8003986:	f004 fafe 	bl	8007f86 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	091b      	lsrs	r3, r3, #4
 8003992:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003996:	441a      	add	r2, r3
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	699a      	ldr	r2, [r3, #24]
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	091b      	lsrs	r3, r3, #4
 80039a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039a8:	441a      	add	r2, r3
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	619a      	str	r2, [r3, #24]
 80039ae:	e016      	b.n	80039de <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	0c5b      	lsrs	r3, r3, #17
 80039b4:	f003 030f 	and.w	r3, r3, #15
 80039b8:	2b06      	cmp	r3, #6
 80039ba:	d110      	bne.n	80039de <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039c2:	2208      	movs	r2, #8
 80039c4:	4619      	mov	r1, r3
 80039c6:	6a38      	ldr	r0, [r7, #32]
 80039c8:	f004 fadd 	bl	8007f86 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	699a      	ldr	r2, [r3, #24]
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	091b      	lsrs	r3, r3, #4
 80039d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039d8:	441a      	add	r2, r3
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	699a      	ldr	r2, [r3, #24]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f042 0210 	orr.w	r2, r2, #16
 80039ec:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f004 fc5b 	bl	80082ae <USB_ReadInterrupts>
 80039f8:	4603      	mov	r3, r0
 80039fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039fe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a02:	d16e      	bne.n	8003ae2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f004 fc61 	bl	80082d4 <USB_ReadDevAllOutEpInterrupt>
 8003a12:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003a14:	e062      	b.n	8003adc <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d057      	beq.n	8003ad0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	4611      	mov	r1, r2
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f004 fc86 	bl	800833c <USB_ReadDevOutEPInterrupt>
 8003a30:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00c      	beq.n	8003a56 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a48:	461a      	mov	r2, r3
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003a4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 fdb1 	bl	80045b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f003 0308 	and.w	r3, r3, #8
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00c      	beq.n	8003a7a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	2308      	movs	r3, #8
 8003a70:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003a72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 feab 	bl	80047d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f003 0310 	and.w	r3, r3, #16
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d008      	beq.n	8003a96 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a90:	461a      	mov	r2, r3
 8003a92:	2310      	movs	r3, #16
 8003a94:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f003 0320 	and.w	r3, r3, #32
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d008      	beq.n	8003ab2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	015a      	lsls	r2, r3, #5
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aac:	461a      	mov	r2, r3
 8003aae:	2320      	movs	r3, #32
 8003ab0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d009      	beq.n	8003ad0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac8:	461a      	mov	r2, r3
 8003aca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ace:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad8:	085b      	lsrs	r3, r3, #1
 8003ada:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d199      	bne.n	8003a16 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f004 fbe1 	bl	80082ae <USB_ReadInterrupts>
 8003aec:	4603      	mov	r3, r0
 8003aee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003af2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003af6:	f040 80c0 	bne.w	8003c7a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f004 fc02 	bl	8008308 <USB_ReadDevAllInEpInterrupt>
 8003b04:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003b0a:	e0b2      	b.n	8003c72 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 80a7 	beq.w	8003c66 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	4611      	mov	r1, r2
 8003b22:	4618      	mov	r0, r3
 8003b24:	f004 fc28 	bl	8008378 <USB_ReadDevInEPInterrupt>
 8003b28:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d057      	beq.n	8003be4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	69f9      	ldr	r1, [r7, #28]
 8003b50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b54:	4013      	ands	r3, r2
 8003b56:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b64:	461a      	mov	r2, r3
 8003b66:	2301      	movs	r3, #1
 8003b68:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d132      	bne.n	8003bd8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003b72:	6879      	ldr	r1, [r7, #4]
 8003b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b76:	4613      	mov	r3, r2
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	1a9b      	subs	r3, r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	440b      	add	r3, r1
 8003b80:	3348      	adds	r3, #72	; 0x48
 8003b82:	6819      	ldr	r1, [r3, #0]
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b88:	4613      	mov	r3, r2
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	1a9b      	subs	r3, r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4403      	add	r3, r0
 8003b92:	3344      	adds	r3, #68	; 0x44
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4419      	add	r1, r3
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	1a9b      	subs	r3, r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4403      	add	r3, r0
 8003ba6:	3348      	adds	r3, #72	; 0x48
 8003ba8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d113      	bne.n	8003bd8 <HAL_PCD_IRQHandler+0x31c>
 8003bb0:	6879      	ldr	r1, [r7, #4]
 8003bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	1a9b      	subs	r3, r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	3350      	adds	r3, #80	; 0x50
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d108      	bne.n	8003bd8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6818      	ldr	r0, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	f004 fc30 	bl	8008438 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	4619      	mov	r1, r3
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f006 ff19 	bl	800aa16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d008      	beq.n	8003c00 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	2308      	movs	r3, #8
 8003bfe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	f003 0310 	and.w	r3, r3, #16
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d008      	beq.n	8003c1c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c16:	461a      	mov	r2, r3
 8003c18:	2310      	movs	r3, #16
 8003c1a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d008      	beq.n	8003c38 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	015a      	lsls	r2, r3, #5
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c32:	461a      	mov	r2, r3
 8003c34:	2340      	movs	r3, #64	; 0x40
 8003c36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d008      	beq.n	8003c54 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c4e:	461a      	mov	r2, r3
 8003c50:	2302      	movs	r3, #2
 8003c52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003c5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 fc1b 	bl	800449c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	3301      	adds	r3, #1
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6e:	085b      	lsrs	r3, r3, #1
 8003c70:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f47f af49 	bne.w	8003b0c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f004 fb15 	bl	80082ae <USB_ReadInterrupts>
 8003c84:	4603      	mov	r3, r0
 8003c86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c8e:	d122      	bne.n	8003cd6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	69fa      	ldr	r2, [r7, #28]
 8003c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c9e:	f023 0301 	bic.w	r3, r3, #1
 8003ca2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d108      	bne.n	8003cc0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 fe27 	bl	800490c <HAL_PCDEx_LPM_Callback>
 8003cbe:	e002      	b.n	8003cc6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f006 ff15 	bl	800aaf0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	695a      	ldr	r2, [r3, #20]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003cd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f004 fae7 	bl	80082ae <USB_ReadInterrupts>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cea:	d112      	bne.n	8003d12 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d102      	bne.n	8003d02 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f006 fed1 	bl	800aaa4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695a      	ldr	r2, [r3, #20]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003d10:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f004 fac9 	bl	80082ae <USB_ReadInterrupts>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d26:	f040 80c7 	bne.w	8003eb8 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	69fa      	ldr	r2, [r7, #28]
 8003d34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d38:	f023 0301 	bic.w	r3, r3, #1
 8003d3c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2110      	movs	r1, #16
 8003d44:	4618      	mov	r0, r3
 8003d46:	f003 fb63 	bl	8007410 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d4e:	e056      	b.n	8003dfe <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d62:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d74:	0151      	lsls	r1, r2, #5
 8003d76:	69fa      	ldr	r2, [r7, #28]
 8003d78:	440a      	add	r2, r1
 8003d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d82:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d86:	015a      	lsls	r2, r3, #5
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d94:	0151      	lsls	r1, r2, #5
 8003d96:	69fa      	ldr	r2, [r7, #28]
 8003d98:	440a      	add	r2, r1
 8003d9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003da2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db0:	461a      	mov	r2, r3
 8003db2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003db6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dc8:	0151      	lsls	r1, r2, #5
 8003dca:	69fa      	ldr	r2, [r7, #28]
 8003dcc:	440a      	add	r2, r1
 8003dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003dd6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003de8:	0151      	lsls	r1, r2, #5
 8003dea:	69fa      	ldr	r2, [r7, #28]
 8003dec:	440a      	add	r2, r1
 8003dee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003df2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003df6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d3a3      	bcc.n	8003d50 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	69fa      	ldr	r2, [r7, #28]
 8003e12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e16:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003e1a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d016      	beq.n	8003e52 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e2e:	69fa      	ldr	r2, [r7, #28]
 8003e30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e34:	f043 030b 	orr.w	r3, r3, #11
 8003e38:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e44:	69fa      	ldr	r2, [r7, #28]
 8003e46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e4a:	f043 030b 	orr.w	r3, r3, #11
 8003e4e:	6453      	str	r3, [r2, #68]	; 0x44
 8003e50:	e015      	b.n	8003e7e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	69fa      	ldr	r2, [r7, #28]
 8003e5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e64:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003e68:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	69fa      	ldr	r2, [r7, #28]
 8003e74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e78:	f043 030b 	orr.w	r3, r3, #11
 8003e7c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	69fa      	ldr	r2, [r7, #28]
 8003e88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e8c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003e90:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6818      	ldr	r0, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	f004 fac8 	bl	8008438 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695a      	ldr	r2, [r3, #20]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003eb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f004 f9f6 	bl	80082ae <USB_ReadInterrupts>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ec8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ecc:	d124      	bne.n	8003f18 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f004 fa8c 	bl	80083f0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f003 faf4 	bl	80074ca <USB_GetDevSpeed>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681c      	ldr	r4, [r3, #0]
 8003eee:	f001 f937 	bl	8005160 <HAL_RCC_GetHCLKFreq>
 8003ef2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	461a      	mov	r2, r3
 8003efc:	4620      	mov	r0, r4
 8003efe:	f003 f813 	bl	8006f28 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f006 fdaf 	bl	800aa66 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	695a      	ldr	r2, [r3, #20]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003f16:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f004 f9c6 	bl	80082ae <USB_ReadInterrupts>
 8003f22:	4603      	mov	r3, r0
 8003f24:	f003 0308 	and.w	r3, r3, #8
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d10a      	bne.n	8003f42 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f006 fd8c 	bl	800aa4a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	695a      	ldr	r2, [r3, #20]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f002 0208 	and.w	r2, r2, #8
 8003f40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f004 f9b1 	bl	80082ae <USB_ReadInterrupts>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f56:	d10f      	bne.n	8003f78 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	4619      	mov	r1, r3
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f006 fde4 	bl	800ab30 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695a      	ldr	r2, [r3, #20]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003f76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f004 f996 	bl	80082ae <USB_ReadInterrupts>
 8003f82:	4603      	mov	r3, r0
 8003f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f8c:	d10f      	bne.n	8003fae <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	4619      	mov	r1, r3
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f006 fdb7 	bl	800ab0c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695a      	ldr	r2, [r3, #20]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003fac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f004 f97b 	bl	80082ae <USB_ReadInterrupts>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc2:	d10a      	bne.n	8003fda <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f006 fdc5 	bl	800ab54 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	695a      	ldr	r2, [r3, #20]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003fd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f004 f965 	bl	80082ae <USB_ReadInterrupts>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	d115      	bne.n	800401a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f006 fdb5 	bl	800ab70 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6859      	ldr	r1, [r3, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	430a      	orrs	r2, r1
 8004014:	605a      	str	r2, [r3, #4]
 8004016:	e000      	b.n	800401a <HAL_PCD_IRQHandler+0x75e>
      return;
 8004018:	bf00      	nop
    }
  }
}
 800401a:	3734      	adds	r7, #52	; 0x34
 800401c:	46bd      	mov	sp, r7
 800401e:	bd90      	pop	{r4, r7, pc}

08004020 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	460b      	mov	r3, r1
 800402a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004032:	2b01      	cmp	r3, #1
 8004034:	d101      	bne.n	800403a <HAL_PCD_SetAddress+0x1a>
 8004036:	2302      	movs	r3, #2
 8004038:	e013      	b.n	8004062 <HAL_PCD_SetAddress+0x42>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	78fa      	ldrb	r2, [r7, #3]
 8004046:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	78fa      	ldrb	r2, [r7, #3]
 8004050:	4611      	mov	r1, r2
 8004052:	4618      	mov	r0, r3
 8004054:	f004 f8c3 	bl	80081de <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b084      	sub	sp, #16
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
 8004072:	4608      	mov	r0, r1
 8004074:	4611      	mov	r1, r2
 8004076:	461a      	mov	r2, r3
 8004078:	4603      	mov	r3, r0
 800407a:	70fb      	strb	r3, [r7, #3]
 800407c:	460b      	mov	r3, r1
 800407e:	803b      	strh	r3, [r7, #0]
 8004080:	4613      	mov	r3, r2
 8004082:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004084:	2300      	movs	r3, #0
 8004086:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004088:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800408c:	2b00      	cmp	r3, #0
 800408e:	da0f      	bge.n	80040b0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004090:	78fb      	ldrb	r3, [r7, #3]
 8004092:	f003 020f 	and.w	r2, r3, #15
 8004096:	4613      	mov	r3, r2
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	1a9b      	subs	r3, r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	3338      	adds	r3, #56	; 0x38
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	4413      	add	r3, r2
 80040a4:	3304      	adds	r3, #4
 80040a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2201      	movs	r2, #1
 80040ac:	705a      	strb	r2, [r3, #1]
 80040ae:	e00f      	b.n	80040d0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040b0:	78fb      	ldrb	r3, [r7, #3]
 80040b2:	f003 020f 	and.w	r2, r3, #15
 80040b6:	4613      	mov	r3, r2
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	1a9b      	subs	r3, r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	4413      	add	r3, r2
 80040c6:	3304      	adds	r3, #4
 80040c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80040d0:	78fb      	ldrb	r3, [r7, #3]
 80040d2:	f003 030f 	and.w	r3, r3, #15
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80040dc:	883a      	ldrh	r2, [r7, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	78ba      	ldrb	r2, [r7, #2]
 80040e6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	785b      	ldrb	r3, [r3, #1]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d004      	beq.n	80040fa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80040fa:	78bb      	ldrb	r3, [r7, #2]
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d102      	bne.n	8004106 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <HAL_PCD_EP_Open+0xaa>
 8004110:	2302      	movs	r3, #2
 8004112:	e00e      	b.n	8004132 <HAL_PCD_EP_Open+0xc8>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68f9      	ldr	r1, [r7, #12]
 8004122:	4618      	mov	r0, r3
 8004124:	f003 f9f6 	bl	8007514 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004130:	7afb      	ldrb	r3, [r7, #11]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b084      	sub	sp, #16
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
 8004142:	460b      	mov	r3, r1
 8004144:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004146:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800414a:	2b00      	cmp	r3, #0
 800414c:	da0f      	bge.n	800416e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800414e:	78fb      	ldrb	r3, [r7, #3]
 8004150:	f003 020f 	and.w	r2, r3, #15
 8004154:	4613      	mov	r3, r2
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	1a9b      	subs	r3, r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	3338      	adds	r3, #56	; 0x38
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	4413      	add	r3, r2
 8004162:	3304      	adds	r3, #4
 8004164:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2201      	movs	r2, #1
 800416a:	705a      	strb	r2, [r3, #1]
 800416c:	e00f      	b.n	800418e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800416e:	78fb      	ldrb	r3, [r7, #3]
 8004170:	f003 020f 	and.w	r2, r3, #15
 8004174:	4613      	mov	r3, r2
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	1a9b      	subs	r3, r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	4413      	add	r3, r2
 8004184:	3304      	adds	r3, #4
 8004186:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800418e:	78fb      	ldrb	r3, [r7, #3]
 8004190:	f003 030f 	and.w	r3, r3, #15
 8004194:	b2da      	uxtb	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d101      	bne.n	80041a8 <HAL_PCD_EP_Close+0x6e>
 80041a4:	2302      	movs	r3, #2
 80041a6:	e00e      	b.n	80041c6 <HAL_PCD_EP_Close+0x8c>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68f9      	ldr	r1, [r7, #12]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f003 fa34 	bl	8007624 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b086      	sub	sp, #24
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	60f8      	str	r0, [r7, #12]
 80041d6:	607a      	str	r2, [r7, #4]
 80041d8:	603b      	str	r3, [r7, #0]
 80041da:	460b      	mov	r3, r1
 80041dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041de:	7afb      	ldrb	r3, [r7, #11]
 80041e0:	f003 020f 	and.w	r2, r3, #15
 80041e4:	4613      	mov	r3, r2
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	1a9b      	subs	r3, r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	4413      	add	r3, r2
 80041f4:	3304      	adds	r3, #4
 80041f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	2200      	movs	r2, #0
 8004208:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2200      	movs	r2, #0
 800420e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004210:	7afb      	ldrb	r3, [r7, #11]
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	b2da      	uxtb	r2, r3
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d102      	bne.n	800422a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800422a:	7afb      	ldrb	r3, [r7, #11]
 800422c:	f003 030f 	and.w	r3, r3, #15
 8004230:	2b00      	cmp	r3, #0
 8004232:	d109      	bne.n	8004248 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6818      	ldr	r0, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	b2db      	uxtb	r3, r3
 800423e:	461a      	mov	r2, r3
 8004240:	6979      	ldr	r1, [r7, #20]
 8004242:	f003 fd0f 	bl	8007c64 <USB_EP0StartXfer>
 8004246:	e008      	b.n	800425a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6818      	ldr	r0, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	b2db      	uxtb	r3, r3
 8004252:	461a      	mov	r2, r3
 8004254:	6979      	ldr	r1, [r7, #20]
 8004256:	f003 fac1 	bl	80077dc <USB_EPStartXfer>
  }

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	460b      	mov	r3, r1
 800426e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004270:	78fb      	ldrb	r3, [r7, #3]
 8004272:	f003 020f 	and.w	r2, r3, #15
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	4613      	mov	r3, r2
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	1a9b      	subs	r3, r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	440b      	add	r3, r1
 8004282:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004286:	681b      	ldr	r3, [r3, #0]
}
 8004288:	4618      	mov	r0, r3
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	607a      	str	r2, [r7, #4]
 800429e:	603b      	str	r3, [r7, #0]
 80042a0:	460b      	mov	r3, r1
 80042a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042a4:	7afb      	ldrb	r3, [r7, #11]
 80042a6:	f003 020f 	and.w	r2, r3, #15
 80042aa:	4613      	mov	r3, r2
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	1a9b      	subs	r3, r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	3338      	adds	r3, #56	; 0x38
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	4413      	add	r3, r2
 80042b8:	3304      	adds	r3, #4
 80042ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	2200      	movs	r2, #0
 80042cc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	2201      	movs	r2, #1
 80042d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042d4:	7afb      	ldrb	r3, [r7, #11]
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d102      	bne.n	80042ee <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042ee:	7afb      	ldrb	r3, [r7, #11]
 80042f0:	f003 030f 	and.w	r3, r3, #15
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d109      	bne.n	800430c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6818      	ldr	r0, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	b2db      	uxtb	r3, r3
 8004302:	461a      	mov	r2, r3
 8004304:	6979      	ldr	r1, [r7, #20]
 8004306:	f003 fcad 	bl	8007c64 <USB_EP0StartXfer>
 800430a:	e008      	b.n	800431e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6818      	ldr	r0, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	b2db      	uxtb	r3, r3
 8004316:	461a      	mov	r2, r3
 8004318:	6979      	ldr	r1, [r7, #20]
 800431a:	f003 fa5f 	bl	80077dc <USB_EPStartXfer>
  }

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004334:	78fb      	ldrb	r3, [r7, #3]
 8004336:	f003 020f 	and.w	r2, r3, #15
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	429a      	cmp	r2, r3
 8004340:	d901      	bls.n	8004346 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e050      	b.n	80043e8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004346:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800434a:	2b00      	cmp	r3, #0
 800434c:	da0f      	bge.n	800436e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800434e:	78fb      	ldrb	r3, [r7, #3]
 8004350:	f003 020f 	and.w	r2, r3, #15
 8004354:	4613      	mov	r3, r2
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	1a9b      	subs	r3, r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	3338      	adds	r3, #56	; 0x38
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	4413      	add	r3, r2
 8004362:	3304      	adds	r3, #4
 8004364:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2201      	movs	r2, #1
 800436a:	705a      	strb	r2, [r3, #1]
 800436c:	e00d      	b.n	800438a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800436e:	78fa      	ldrb	r2, [r7, #3]
 8004370:	4613      	mov	r3, r2
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	1a9b      	subs	r3, r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	4413      	add	r3, r2
 8004380:	3304      	adds	r3, #4
 8004382:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2201      	movs	r2, #1
 800438e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004390:	78fb      	ldrb	r3, [r7, #3]
 8004392:	f003 030f 	and.w	r3, r3, #15
 8004396:	b2da      	uxtb	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d101      	bne.n	80043aa <HAL_PCD_EP_SetStall+0x82>
 80043a6:	2302      	movs	r3, #2
 80043a8:	e01e      	b.n	80043e8 <HAL_PCD_EP_SetStall+0xc0>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68f9      	ldr	r1, [r7, #12]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f003 fe3c 	bl	8008036 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043be:	78fb      	ldrb	r3, [r7, #3]
 80043c0:	f003 030f 	and.w	r3, r3, #15
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10a      	bne.n	80043de <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6818      	ldr	r0, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	b2d9      	uxtb	r1, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80043d8:	461a      	mov	r2, r3
 80043da:	f004 f82d 	bl	8008438 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	460b      	mov	r3, r1
 80043fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80043fc:	78fb      	ldrb	r3, [r7, #3]
 80043fe:	f003 020f 	and.w	r2, r3, #15
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	429a      	cmp	r2, r3
 8004408:	d901      	bls.n	800440e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e042      	b.n	8004494 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800440e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004412:	2b00      	cmp	r3, #0
 8004414:	da0f      	bge.n	8004436 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004416:	78fb      	ldrb	r3, [r7, #3]
 8004418:	f003 020f 	and.w	r2, r3, #15
 800441c:	4613      	mov	r3, r2
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	1a9b      	subs	r3, r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	3338      	adds	r3, #56	; 0x38
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	4413      	add	r3, r2
 800442a:	3304      	adds	r3, #4
 800442c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2201      	movs	r2, #1
 8004432:	705a      	strb	r2, [r3, #1]
 8004434:	e00f      	b.n	8004456 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004436:	78fb      	ldrb	r3, [r7, #3]
 8004438:	f003 020f 	and.w	r2, r3, #15
 800443c:	4613      	mov	r3, r2
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	1a9b      	subs	r3, r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	4413      	add	r3, r2
 800444c:	3304      	adds	r3, #4
 800444e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	b2da      	uxtb	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800446e:	2b01      	cmp	r3, #1
 8004470:	d101      	bne.n	8004476 <HAL_PCD_EP_ClrStall+0x86>
 8004472:	2302      	movs	r3, #2
 8004474:	e00e      	b.n	8004494 <HAL_PCD_EP_ClrStall+0xa4>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68f9      	ldr	r1, [r7, #12]
 8004484:	4618      	mov	r0, r3
 8004486:	f003 fe44 	bl	8008112 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b08a      	sub	sp, #40	; 0x28
 80044a0:	af02      	add	r7, sp, #8
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	4613      	mov	r3, r2
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	1a9b      	subs	r3, r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	3338      	adds	r3, #56	; 0x38
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	4413      	add	r3, r2
 80044c0:	3304      	adds	r3, #4
 80044c2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	699a      	ldr	r2, [r3, #24]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d901      	bls.n	80044d4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e06c      	b.n	80045ae <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	695a      	ldr	r2, [r3, #20]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	69fa      	ldr	r2, [r7, #28]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d902      	bls.n	80044f0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	3303      	adds	r3, #3
 80044f4:	089b      	lsrs	r3, r3, #2
 80044f6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044f8:	e02b      	b.n	8004552 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	695a      	ldr	r2, [r3, #20]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	69fa      	ldr	r2, [r7, #28]
 800450c:	429a      	cmp	r2, r3
 800450e:	d902      	bls.n	8004516 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	3303      	adds	r3, #3
 800451a:	089b      	lsrs	r3, r3, #2
 800451c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	68d9      	ldr	r1, [r3, #12]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	b2da      	uxtb	r2, r3
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800452e:	b2db      	uxtb	r3, r3
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	4603      	mov	r3, r0
 8004534:	6978      	ldr	r0, [r7, #20]
 8004536:	f003 fce8 	bl	8007f0a <USB_WritePacket>

    ep->xfer_buff  += len;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	441a      	add	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	699a      	ldr	r2, [r3, #24]
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	441a      	add	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	015a      	lsls	r2, r3, #5
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	4413      	add	r3, r2
 800455a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	b29b      	uxth	r3, r3
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	429a      	cmp	r2, r3
 8004566:	d809      	bhi.n	800457c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	699a      	ldr	r2, [r3, #24]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004570:	429a      	cmp	r2, r3
 8004572:	d203      	bcs.n	800457c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1be      	bne.n	80044fa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	695a      	ldr	r2, [r3, #20]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	429a      	cmp	r2, r3
 8004586:	d811      	bhi.n	80045ac <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	2201      	movs	r2, #1
 8004590:	fa02 f303 	lsl.w	r3, r2, r3
 8004594:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800459c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	43db      	mvns	r3, r3
 80045a2:	6939      	ldr	r1, [r7, #16]
 80045a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045a8:	4013      	ands	r3, r2
 80045aa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3720      	adds	r7, #32
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
	...

080045b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	333c      	adds	r3, #60	; 0x3c
 80045d0:	3304      	adds	r3, #4
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	015a      	lsls	r2, r3, #5
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	4413      	add	r3, r2
 80045de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	f040 80a0 	bne.w	8004730 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f003 0308 	and.w	r3, r3, #8
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d015      	beq.n	8004626 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	4a72      	ldr	r2, [pc, #456]	; (80047c8 <PCD_EP_OutXfrComplete_int+0x210>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	f240 80dd 	bls.w	80047be <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 80d7 	beq.w	80047be <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	4413      	add	r3, r2
 8004618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461c:	461a      	mov	r2, r3
 800461e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004622:	6093      	str	r3, [r2, #8]
 8004624:	e0cb      	b.n	80047be <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	2b00      	cmp	r3, #0
 800462e:	d009      	beq.n	8004644 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	4413      	add	r3, r2
 8004638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463c:	461a      	mov	r2, r3
 800463e:	2320      	movs	r3, #32
 8004640:	6093      	str	r3, [r2, #8]
 8004642:	e0bc      	b.n	80047be <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800464a:	2b00      	cmp	r3, #0
 800464c:	f040 80b7 	bne.w	80047be <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4a5d      	ldr	r2, [pc, #372]	; (80047c8 <PCD_EP_OutXfrComplete_int+0x210>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d90f      	bls.n	8004678 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00a      	beq.n	8004678 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	015a      	lsls	r2, r3, #5
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	4413      	add	r3, r2
 800466a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466e:	461a      	mov	r2, r3
 8004670:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004674:	6093      	str	r3, [r2, #8]
 8004676:	e0a2      	b.n	80047be <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004678:	6879      	ldr	r1, [r7, #4]
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	4613      	mov	r3, r2
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	1a9b      	subs	r3, r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800468a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	0159      	lsls	r1, r3, #5
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	440b      	add	r3, r1
 8004694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800469e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	4613      	mov	r3, r2
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	1a9b      	subs	r3, r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4403      	add	r3, r0
 80046ae:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80046b2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80046b4:	6879      	ldr	r1, [r7, #4]
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	4613      	mov	r3, r2
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	1a9b      	subs	r3, r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	440b      	add	r3, r1
 80046c2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80046c6:	6819      	ldr	r1, [r3, #0]
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	4613      	mov	r3, r2
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	1a9b      	subs	r3, r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4403      	add	r3, r0
 80046d6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4419      	add	r1, r3
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	4613      	mov	r3, r2
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	1a9b      	subs	r3, r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4403      	add	r3, r0
 80046ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80046f0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d114      	bne.n	8004722 <PCD_EP_OutXfrComplete_int+0x16a>
 80046f8:	6879      	ldr	r1, [r7, #4]
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	4613      	mov	r3, r2
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	1a9b      	subs	r3, r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d108      	bne.n	8004722 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6818      	ldr	r0, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800471a:	461a      	mov	r2, r3
 800471c:	2101      	movs	r1, #1
 800471e:	f003 fe8b 	bl	8008438 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	b2db      	uxtb	r3, r3
 8004726:	4619      	mov	r1, r3
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f006 f959 	bl	800a9e0 <HAL_PCD_DataOutStageCallback>
 800472e:	e046      	b.n	80047be <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4a26      	ldr	r2, [pc, #152]	; (80047cc <PCD_EP_OutXfrComplete_int+0x214>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d124      	bne.n	8004782 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00a      	beq.n	8004758 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	4413      	add	r3, r2
 800474a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474e:	461a      	mov	r2, r3
 8004750:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004754:	6093      	str	r3, [r2, #8]
 8004756:	e032      	b.n	80047be <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f003 0320 	and.w	r3, r3, #32
 800475e:	2b00      	cmp	r3, #0
 8004760:	d008      	beq.n	8004774 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	4413      	add	r3, r2
 800476a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800476e:	461a      	mov	r2, r3
 8004770:	2320      	movs	r3, #32
 8004772:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	b2db      	uxtb	r3, r3
 8004778:	4619      	mov	r1, r3
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f006 f930 	bl	800a9e0 <HAL_PCD_DataOutStageCallback>
 8004780:	e01d      	b.n	80047be <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d114      	bne.n	80047b2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004788:	6879      	ldr	r1, [r7, #4]
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	4613      	mov	r3, r2
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	1a9b      	subs	r3, r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	440b      	add	r3, r1
 8004796:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d108      	bne.n	80047b2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6818      	ldr	r0, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80047aa:	461a      	mov	r2, r3
 80047ac:	2100      	movs	r1, #0
 80047ae:	f003 fe43 	bl	8008438 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	4619      	mov	r1, r3
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f006 f911 	bl	800a9e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	4f54300a 	.word	0x4f54300a
 80047cc:	4f54310a 	.word	0x4f54310a

080047d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	333c      	adds	r3, #60	; 0x3c
 80047e8:	3304      	adds	r3, #4
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	015a      	lsls	r2, r3, #5
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	4413      	add	r3, r2
 80047f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4a15      	ldr	r2, [pc, #84]	; (8004858 <PCD_EP_OutSetupPacket_int+0x88>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d90e      	bls.n	8004824 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800480c:	2b00      	cmp	r3, #0
 800480e:	d009      	beq.n	8004824 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	4413      	add	r3, r2
 8004818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481c:	461a      	mov	r2, r3
 800481e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004822:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f006 f8c9 	bl	800a9bc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	4a0a      	ldr	r2, [pc, #40]	; (8004858 <PCD_EP_OutSetupPacket_int+0x88>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d90c      	bls.n	800484c <PCD_EP_OutSetupPacket_int+0x7c>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d108      	bne.n	800484c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004844:	461a      	mov	r2, r3
 8004846:	2101      	movs	r1, #1
 8004848:	f003 fdf6 	bl	8008438 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	4f54300a 	.word	0x4f54300a

0800485c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	460b      	mov	r3, r1
 8004866:	70fb      	strb	r3, [r7, #3]
 8004868:	4613      	mov	r3, r2
 800486a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004874:	78fb      	ldrb	r3, [r7, #3]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d107      	bne.n	800488a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800487a:	883b      	ldrh	r3, [r7, #0]
 800487c:	0419      	lsls	r1, r3, #16
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	430a      	orrs	r2, r1
 8004886:	629a      	str	r2, [r3, #40]	; 0x28
 8004888:	e028      	b.n	80048dc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004890:	0c1b      	lsrs	r3, r3, #16
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	4413      	add	r3, r2
 8004896:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004898:	2300      	movs	r3, #0
 800489a:	73fb      	strb	r3, [r7, #15]
 800489c:	e00d      	b.n	80048ba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
 80048a4:	3340      	adds	r3, #64	; 0x40
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	0c1b      	lsrs	r3, r3, #16
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	4413      	add	r3, r2
 80048b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80048b4:	7bfb      	ldrb	r3, [r7, #15]
 80048b6:	3301      	adds	r3, #1
 80048b8:	73fb      	strb	r3, [r7, #15]
 80048ba:	7bfa      	ldrb	r2, [r7, #15]
 80048bc:	78fb      	ldrb	r3, [r7, #3]
 80048be:	3b01      	subs	r3, #1
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d3ec      	bcc.n	800489e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80048c4:	883b      	ldrh	r3, [r7, #0]
 80048c6:	0418      	lsls	r0, r3, #16
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6819      	ldr	r1, [r3, #0]
 80048cc:	78fb      	ldrb	r3, [r7, #3]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	4302      	orrs	r2, r0
 80048d4:	3340      	adds	r3, #64	; 0x40
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	440b      	add	r3, r1
 80048da:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b083      	sub	sp, #12
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	460b      	mov	r3, r1
 80048f4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	887a      	ldrh	r2, [r7, #2]
 80048fc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	460b      	mov	r3, r1
 8004916:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e262      	b.n	8004dfc <HAL_RCC_OscConfig+0x4d8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d075      	beq.n	8004a2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004942:	4ba3      	ldr	r3, [pc, #652]	; (8004bd0 <HAL_RCC_OscConfig+0x2ac>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 030c 	and.w	r3, r3, #12
 800494a:	2b04      	cmp	r3, #4
 800494c:	d00c      	beq.n	8004968 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800494e:	4ba0      	ldr	r3, [pc, #640]	; (8004bd0 <HAL_RCC_OscConfig+0x2ac>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004956:	2b08      	cmp	r3, #8
 8004958:	d112      	bne.n	8004980 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800495a:	4b9d      	ldr	r3, [pc, #628]	; (8004bd0 <HAL_RCC_OscConfig+0x2ac>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004962:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004966:	d10b      	bne.n	8004980 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004968:	4b99      	ldr	r3, [pc, #612]	; (8004bd0 <HAL_RCC_OscConfig+0x2ac>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d05b      	beq.n	8004a2c <HAL_RCC_OscConfig+0x108>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d157      	bne.n	8004a2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e23d      	b.n	8004dfc <HAL_RCC_OscConfig+0x4d8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004988:	d106      	bne.n	8004998 <HAL_RCC_OscConfig+0x74>
 800498a:	4b91      	ldr	r3, [pc, #580]	; (8004bd0 <HAL_RCC_OscConfig+0x2ac>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a90      	ldr	r2, [pc, #576]	; (8004bd0 <HAL_RCC_OscConfig+0x2ac>)
 8004990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	e01d      	b.n	80049d4 <HAL_RCC_OscConfig+0xb0>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049a0:	d10c      	bne.n	80049bc <HAL_RCC_OscConfig+0x98>
 80049a2:	4b8b      	ldr	r3, [pc, #556]	; (8004bd0 <HAL_RCC_OscConfig+0x2ac>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a8a      	ldr	r2, [pc, #552]	; (8004bd0 <HAL_RCC_OscConfig+0x2ac>)
 80049a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	4b88      	ldr	r3, [pc, #544]	; (8004bd0 <HAL_RCC_OscConfig+0x2ac>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a87      	ldr	r2, [pc, #540]	; (8004bd0 <HAL_RCC_OscConfig+0x2ac>)
 80049b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	e00b      	b.n	80049d4 <HAL_RCC_OscConfig+0xb0>
 80049bc:	4b84      	ldr	r3, [pc, #528]	; (8004bd0 <HAL_RCC_OscConfig+0x2ac>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a83      	ldr	r2, [pc, #524]	; (8004bd0 <HAL_RCC_OscConfig+0x2ac>)
 80049c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049c6:	6013      	str	r3, [r2, #0]
 80049c8:	4b81      	ldr	r3, [pc, #516]	; (8004bd0 <HAL_RCC_OscConfig+0x2ac>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a80      	ldr	r2, [pc, #512]	; (8004bd0 <HAL_RCC_OscConfig+0x2ac>)
 80049ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d013      	beq.n	8004a04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049dc:	f7fb fe60 	bl	80006a0 <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049e4:	f7fb fe5c 	bl	80006a0 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b64      	cmp	r3, #100	; 0x64
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e202      	b.n	8004dfc <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049f6:	4b76      	ldr	r3, [pc, #472]	; (8004bd0 <HAL_RCC_OscConfig+0x2ac>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d0f0      	beq.n	80049e4 <HAL_RCC_OscConfig+0xc0>
 8004a02:	e014      	b.n	8004a2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a04:	f7fb fe4c 	bl	80006a0 <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a0c:	f7fb fe48 	bl	80006a0 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b64      	cmp	r3, #100	; 0x64
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e1ee      	b.n	8004dfc <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a1e:	4b6c      	ldr	r3, [pc, #432]	; (8004bd0 <HAL_RCC_OscConfig+0x2ac>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1f0      	bne.n	8004a0c <HAL_RCC_OscConfig+0xe8>
 8004a2a:	e000      	b.n	8004a2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d063      	beq.n	8004b02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a3a:	4b65      	ldr	r3, [pc, #404]	; (8004bd0 <HAL_RCC_OscConfig+0x2ac>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 030c 	and.w	r3, r3, #12
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00b      	beq.n	8004a5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a46:	4b62      	ldr	r3, [pc, #392]	; (8004bd0 <HAL_RCC_OscConfig+0x2ac>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a4e:	2b08      	cmp	r3, #8
 8004a50:	d11c      	bne.n	8004a8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a52:	4b5f      	ldr	r3, [pc, #380]	; (8004bd0 <HAL_RCC_OscConfig+0x2ac>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d116      	bne.n	8004a8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a5e:	4b5c      	ldr	r3, [pc, #368]	; (8004bd0 <HAL_RCC_OscConfig+0x2ac>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d005      	beq.n	8004a76 <HAL_RCC_OscConfig+0x152>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d001      	beq.n	8004a76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e1c2      	b.n	8004dfc <HAL_RCC_OscConfig+0x4d8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a76:	4b56      	ldr	r3, [pc, #344]	; (8004bd0 <HAL_RCC_OscConfig+0x2ac>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	4952      	ldr	r1, [pc, #328]	; (8004bd0 <HAL_RCC_OscConfig+0x2ac>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a8a:	e03a      	b.n	8004b02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d020      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a94:	4b4f      	ldr	r3, [pc, #316]	; (8004bd4 <HAL_RCC_OscConfig+0x2b0>)
 8004a96:	2201      	movs	r2, #1
 8004a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9a:	f7fb fe01 	bl	80006a0 <HAL_GetTick>
 8004a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004aa2:	f7fb fdfd 	bl	80006a0 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e1a3      	b.n	8004dfc <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab4:	4b46      	ldr	r3, [pc, #280]	; (8004bd0 <HAL_RCC_OscConfig+0x2ac>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0f0      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac0:	4b43      	ldr	r3, [pc, #268]	; (8004bd0 <HAL_RCC_OscConfig+0x2ac>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	00db      	lsls	r3, r3, #3
 8004ace:	4940      	ldr	r1, [pc, #256]	; (8004bd0 <HAL_RCC_OscConfig+0x2ac>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	600b      	str	r3, [r1, #0]
 8004ad4:	e015      	b.n	8004b02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ad6:	4b3f      	ldr	r3, [pc, #252]	; (8004bd4 <HAL_RCC_OscConfig+0x2b0>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004adc:	f7fb fde0 	bl	80006a0 <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ae4:	f7fb fddc 	bl	80006a0 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e182      	b.n	8004dfc <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004af6:	4b36      	ldr	r3, [pc, #216]	; (8004bd0 <HAL_RCC_OscConfig+0x2ac>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1f0      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0308 	and.w	r3, r3, #8
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d030      	beq.n	8004b70 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d016      	beq.n	8004b44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b16:	4b30      	ldr	r3, [pc, #192]	; (8004bd8 <HAL_RCC_OscConfig+0x2b4>)
 8004b18:	2201      	movs	r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1c:	f7fb fdc0 	bl	80006a0 <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b24:	f7fb fdbc 	bl	80006a0 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e162      	b.n	8004dfc <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b36:	4b26      	ldr	r3, [pc, #152]	; (8004bd0 <HAL_RCC_OscConfig+0x2ac>)
 8004b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d0f0      	beq.n	8004b24 <HAL_RCC_OscConfig+0x200>
 8004b42:	e015      	b.n	8004b70 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b44:	4b24      	ldr	r3, [pc, #144]	; (8004bd8 <HAL_RCC_OscConfig+0x2b4>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b4a:	f7fb fda9 	bl	80006a0 <HAL_GetTick>
 8004b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b50:	e008      	b.n	8004b64 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b52:	f7fb fda5 	bl	80006a0 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e14b      	b.n	8004dfc <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b64:	4b1a      	ldr	r3, [pc, #104]	; (8004bd0 <HAL_RCC_OscConfig+0x2ac>)
 8004b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1f0      	bne.n	8004b52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0304 	and.w	r3, r3, #4
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 809e 	beq.w	8004cba <HAL_RCC_OscConfig+0x396>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b82:	4b13      	ldr	r3, [pc, #76]	; (8004bd0 <HAL_RCC_OscConfig+0x2ac>)
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10f      	bne.n	8004bae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60bb      	str	r3, [r7, #8]
 8004b92:	4b0f      	ldr	r3, [pc, #60]	; (8004bd0 <HAL_RCC_OscConfig+0x2ac>)
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	4a0e      	ldr	r2, [pc, #56]	; (8004bd0 <HAL_RCC_OscConfig+0x2ac>)
 8004b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b9e:	4b0c      	ldr	r3, [pc, #48]	; (8004bd0 <HAL_RCC_OscConfig+0x2ac>)
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba6:	60bb      	str	r3, [r7, #8]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004baa:	2301      	movs	r3, #1
 8004bac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bae:	4b0b      	ldr	r3, [pc, #44]	; (8004bdc <HAL_RCC_OscConfig+0x2b8>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d121      	bne.n	8004bfe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bba:	4b08      	ldr	r3, [pc, #32]	; (8004bdc <HAL_RCC_OscConfig+0x2b8>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a07      	ldr	r2, [pc, #28]	; (8004bdc <HAL_RCC_OscConfig+0x2b8>)
 8004bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bc6:	f7fb fd6b 	bl	80006a0 <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bcc:	e011      	b.n	8004bf2 <HAL_RCC_OscConfig+0x2ce>
 8004bce:	bf00      	nop
 8004bd0:	40023800 	.word	0x40023800
 8004bd4:	42470000 	.word	0x42470000
 8004bd8:	42470e80 	.word	0x42470e80
 8004bdc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004be0:	f7fb fd5e 	bl	80006a0 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e104      	b.n	8004dfc <HAL_RCC_OscConfig+0x4d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bf2:	4b84      	ldr	r3, [pc, #528]	; (8004e04 <HAL_RCC_OscConfig+0x4e0>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0f0      	beq.n	8004be0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d106      	bne.n	8004c14 <HAL_RCC_OscConfig+0x2f0>
 8004c06:	4b80      	ldr	r3, [pc, #512]	; (8004e08 <HAL_RCC_OscConfig+0x4e4>)
 8004c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0a:	4a7f      	ldr	r2, [pc, #508]	; (8004e08 <HAL_RCC_OscConfig+0x4e4>)
 8004c0c:	f043 0301 	orr.w	r3, r3, #1
 8004c10:	6713      	str	r3, [r2, #112]	; 0x70
 8004c12:	e01c      	b.n	8004c4e <HAL_RCC_OscConfig+0x32a>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	2b05      	cmp	r3, #5
 8004c1a:	d10c      	bne.n	8004c36 <HAL_RCC_OscConfig+0x312>
 8004c1c:	4b7a      	ldr	r3, [pc, #488]	; (8004e08 <HAL_RCC_OscConfig+0x4e4>)
 8004c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c20:	4a79      	ldr	r2, [pc, #484]	; (8004e08 <HAL_RCC_OscConfig+0x4e4>)
 8004c22:	f043 0304 	orr.w	r3, r3, #4
 8004c26:	6713      	str	r3, [r2, #112]	; 0x70
 8004c28:	4b77      	ldr	r3, [pc, #476]	; (8004e08 <HAL_RCC_OscConfig+0x4e4>)
 8004c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2c:	4a76      	ldr	r2, [pc, #472]	; (8004e08 <HAL_RCC_OscConfig+0x4e4>)
 8004c2e:	f043 0301 	orr.w	r3, r3, #1
 8004c32:	6713      	str	r3, [r2, #112]	; 0x70
 8004c34:	e00b      	b.n	8004c4e <HAL_RCC_OscConfig+0x32a>
 8004c36:	4b74      	ldr	r3, [pc, #464]	; (8004e08 <HAL_RCC_OscConfig+0x4e4>)
 8004c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3a:	4a73      	ldr	r2, [pc, #460]	; (8004e08 <HAL_RCC_OscConfig+0x4e4>)
 8004c3c:	f023 0301 	bic.w	r3, r3, #1
 8004c40:	6713      	str	r3, [r2, #112]	; 0x70
 8004c42:	4b71      	ldr	r3, [pc, #452]	; (8004e08 <HAL_RCC_OscConfig+0x4e4>)
 8004c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c46:	4a70      	ldr	r2, [pc, #448]	; (8004e08 <HAL_RCC_OscConfig+0x4e4>)
 8004c48:	f023 0304 	bic.w	r3, r3, #4
 8004c4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d014      	beq.n	8004c80 <HAL_RCC_OscConfig+0x35c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c56:	f7fb fd23 	bl	80006a0 <HAL_GetTick>
 8004c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c5c:	e009      	b.n	8004c72 <HAL_RCC_OscConfig+0x34e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c5e:	f7fb fd1f 	bl	80006a0 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x34e>
        {
          return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e0c4      	b.n	8004dfc <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c72:	4b65      	ldr	r3, [pc, #404]	; (8004e08 <HAL_RCC_OscConfig+0x4e4>)
 8004c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0ef      	beq.n	8004c5e <HAL_RCC_OscConfig+0x33a>
 8004c7e:	e013      	b.n	8004ca8 <HAL_RCC_OscConfig+0x384>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c80:	f7fb fd0e 	bl	80006a0 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c86:	e009      	b.n	8004c9c <HAL_RCC_OscConfig+0x378>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c88:	f7fb fd0a 	bl	80006a0 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x378>
        {
          return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e0af      	b.n	8004dfc <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c9c:	4b5a      	ldr	r3, [pc, #360]	; (8004e08 <HAL_RCC_OscConfig+0x4e4>)
 8004c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1ef      	bne.n	8004c88 <HAL_RCC_OscConfig+0x364>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ca8:	7dfb      	ldrb	r3, [r7, #23]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d105      	bne.n	8004cba <HAL_RCC_OscConfig+0x396>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cae:	4b56      	ldr	r3, [pc, #344]	; (8004e08 <HAL_RCC_OscConfig+0x4e4>)
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	4a55      	ldr	r2, [pc, #340]	; (8004e08 <HAL_RCC_OscConfig+0x4e4>)
 8004cb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cb8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f000 809b 	beq.w	8004dfa <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cc4:	4b50      	ldr	r3, [pc, #320]	; (8004e08 <HAL_RCC_OscConfig+0x4e4>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f003 030c 	and.w	r3, r3, #12
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d05c      	beq.n	8004d8a <HAL_RCC_OscConfig+0x466>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d141      	bne.n	8004d5c <HAL_RCC_OscConfig+0x438>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cd8:	4b4c      	ldr	r3, [pc, #304]	; (8004e0c <HAL_RCC_OscConfig+0x4e8>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cde:	f7fb fcdf 	bl	80006a0 <HAL_GetTick>
 8004ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ce4:	e008      	b.n	8004cf8 <HAL_RCC_OscConfig+0x3d4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ce6:	f7fb fcdb 	bl	80006a0 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x3d4>
          {
            return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e081      	b.n	8004dfc <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf8:	4b43      	ldr	r3, [pc, #268]	; (8004e08 <HAL_RCC_OscConfig+0x4e4>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1f0      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x3c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	69da      	ldr	r2, [r3, #28]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	019b      	lsls	r3, r3, #6
 8004d14:	431a      	orrs	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1a:	085b      	lsrs	r3, r3, #1
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	041b      	lsls	r3, r3, #16
 8004d20:	431a      	orrs	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d26:	061b      	lsls	r3, r3, #24
 8004d28:	4937      	ldr	r1, [pc, #220]	; (8004e08 <HAL_RCC_OscConfig+0x4e4>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d2e:	4b37      	ldr	r3, [pc, #220]	; (8004e0c <HAL_RCC_OscConfig+0x4e8>)
 8004d30:	2201      	movs	r2, #1
 8004d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d34:	f7fb fcb4 	bl	80006a0 <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0x42a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d3c:	f7fb fcb0 	bl	80006a0 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e056      	b.n	8004dfc <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d4e:	4b2e      	ldr	r3, [pc, #184]	; (8004e08 <HAL_RCC_OscConfig+0x4e4>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0f0      	beq.n	8004d3c <HAL_RCC_OscConfig+0x418>
 8004d5a:	e04e      	b.n	8004dfa <HAL_RCC_OscConfig+0x4d6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d5c:	4b2b      	ldr	r3, [pc, #172]	; (8004e0c <HAL_RCC_OscConfig+0x4e8>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d62:	f7fb fc9d 	bl	80006a0 <HAL_GetTick>
 8004d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d68:	e008      	b.n	8004d7c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d6a:	f7fb fc99 	bl	80006a0 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e03f      	b.n	8004dfc <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d7c:	4b22      	ldr	r3, [pc, #136]	; (8004e08 <HAL_RCC_OscConfig+0x4e4>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1f0      	bne.n	8004d6a <HAL_RCC_OscConfig+0x446>
 8004d88:	e037      	b.n	8004dfa <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d101      	bne.n	8004d96 <HAL_RCC_OscConfig+0x472>
      {
        return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e032      	b.n	8004dfc <HAL_RCC_OscConfig+0x4d8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d96:	4b1c      	ldr	r3, [pc, #112]	; (8004e08 <HAL_RCC_OscConfig+0x4e4>)
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d028      	beq.n	8004df6 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d121      	bne.n	8004df6 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d11a      	bne.n	8004df6 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004dcc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d111      	bne.n	8004df6 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ddc:	085b      	lsrs	r3, r3, #1
 8004dde:	3b01      	subs	r3, #1
 8004de0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d107      	bne.n	8004df6 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d001      	beq.n	8004dfa <HAL_RCC_OscConfig+0x4d6>
#endif
        {
          return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e000      	b.n	8004dfc <HAL_RCC_OscConfig+0x4d8>
        }
      }
    }
  }
  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3718      	adds	r7, #24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40007000 	.word	0x40007000
 8004e08:	40023800 	.word	0x40023800
 8004e0c:	42470060 	.word	0x42470060

08004e10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d101      	bne.n	8004e24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e0cc      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e24:	4b68      	ldr	r3, [pc, #416]	; (8004fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0307 	and.w	r3, r3, #7
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d90c      	bls.n	8004e4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e32:	4b65      	ldr	r3, [pc, #404]	; (8004fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e3a:	4b63      	ldr	r3, [pc, #396]	; (8004fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d001      	beq.n	8004e4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e0b8      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d020      	beq.n	8004e9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d005      	beq.n	8004e70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e64:	4b59      	ldr	r3, [pc, #356]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	4a58      	ldr	r2, [pc, #352]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004e6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0308 	and.w	r3, r3, #8
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d005      	beq.n	8004e88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e7c:	4b53      	ldr	r3, [pc, #332]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	4a52      	ldr	r2, [pc, #328]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004e82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e88:	4b50      	ldr	r3, [pc, #320]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	494d      	ldr	r1, [pc, #308]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d044      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d107      	bne.n	8004ebe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eae:	4b47      	ldr	r3, [pc, #284]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d119      	bne.n	8004eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e07f      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d003      	beq.n	8004ece <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eca:	2b03      	cmp	r3, #3
 8004ecc:	d107      	bne.n	8004ede <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ece:	4b3f      	ldr	r3, [pc, #252]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d109      	bne.n	8004eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e06f      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ede:	4b3b      	ldr	r3, [pc, #236]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e067      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eee:	4b37      	ldr	r3, [pc, #220]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f023 0203 	bic.w	r2, r3, #3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	4934      	ldr	r1, [pc, #208]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f00:	f7fb fbce 	bl	80006a0 <HAL_GetTick>
 8004f04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f06:	e00a      	b.n	8004f1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f08:	f7fb fbca 	bl	80006a0 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e04f      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f1e:	4b2b      	ldr	r3, [pc, #172]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 020c 	and.w	r2, r3, #12
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d1eb      	bne.n	8004f08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f30:	4b25      	ldr	r3, [pc, #148]	; (8004fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d20c      	bcs.n	8004f58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f3e:	4b22      	ldr	r3, [pc, #136]	; (8004fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f46:	4b20      	ldr	r3, [pc, #128]	; (8004fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d001      	beq.n	8004f58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e032      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d008      	beq.n	8004f76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f64:	4b19      	ldr	r3, [pc, #100]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	4916      	ldr	r1, [pc, #88]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0308 	and.w	r3, r3, #8
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d009      	beq.n	8004f96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f82:	4b12      	ldr	r3, [pc, #72]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	490e      	ldr	r1, [pc, #56]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f96:	f000 f82d 	bl	8004ff4 <HAL_RCC_GetSysClockFreq>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	4b0b      	ldr	r3, [pc, #44]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	091b      	lsrs	r3, r3, #4
 8004fa2:	f003 030f 	and.w	r3, r3, #15
 8004fa6:	490a      	ldr	r1, [pc, #40]	; (8004fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8004fa8:	5ccb      	ldrb	r3, [r1, r3]
 8004faa:	fa22 f303 	lsr.w	r3, r2, r3
 8004fae:	4a09      	ldr	r2, [pc, #36]	; (8004fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004fb2:	4b09      	ldr	r3, [pc, #36]	; (8004fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fb fb2e 	bl	8000618 <HAL_InitTick>

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	40023c00 	.word	0x40023c00
 8004fcc:	40023800 	.word	0x40023800
 8004fd0:	0800b25c 	.word	0x0800b25c
 8004fd4:	20000118 	.word	0x20000118
 8004fd8:	20000000 	.word	0x20000000

08004fdc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004fe0:	4b03      	ldr	r3, [pc, #12]	; (8004ff0 <HAL_RCC_EnableCSS+0x14>)
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]
}
 8004fe6:	bf00      	nop
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	4247004c 	.word	0x4247004c

08004ff4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ff4:	b5b0      	push	{r4, r5, r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	6079      	str	r1, [r7, #4]
 8004ffe:	2100      	movs	r1, #0
 8005000:	60f9      	str	r1, [r7, #12]
 8005002:	2100      	movs	r1, #0
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005006:	2100      	movs	r1, #0
 8005008:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800500a:	4952      	ldr	r1, [pc, #328]	; (8005154 <HAL_RCC_GetSysClockFreq+0x160>)
 800500c:	6889      	ldr	r1, [r1, #8]
 800500e:	f001 010c 	and.w	r1, r1, #12
 8005012:	2908      	cmp	r1, #8
 8005014:	d00d      	beq.n	8005032 <HAL_RCC_GetSysClockFreq+0x3e>
 8005016:	2908      	cmp	r1, #8
 8005018:	f200 8094 	bhi.w	8005144 <HAL_RCC_GetSysClockFreq+0x150>
 800501c:	2900      	cmp	r1, #0
 800501e:	d002      	beq.n	8005026 <HAL_RCC_GetSysClockFreq+0x32>
 8005020:	2904      	cmp	r1, #4
 8005022:	d003      	beq.n	800502c <HAL_RCC_GetSysClockFreq+0x38>
 8005024:	e08e      	b.n	8005144 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005026:	4b4c      	ldr	r3, [pc, #304]	; (8005158 <HAL_RCC_GetSysClockFreq+0x164>)
 8005028:	60bb      	str	r3, [r7, #8]
       break;
 800502a:	e08e      	b.n	800514a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800502c:	4b4b      	ldr	r3, [pc, #300]	; (800515c <HAL_RCC_GetSysClockFreq+0x168>)
 800502e:	60bb      	str	r3, [r7, #8]
      break;
 8005030:	e08b      	b.n	800514a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005032:	4948      	ldr	r1, [pc, #288]	; (8005154 <HAL_RCC_GetSysClockFreq+0x160>)
 8005034:	6849      	ldr	r1, [r1, #4]
 8005036:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800503a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800503c:	4945      	ldr	r1, [pc, #276]	; (8005154 <HAL_RCC_GetSysClockFreq+0x160>)
 800503e:	6849      	ldr	r1, [r1, #4]
 8005040:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005044:	2900      	cmp	r1, #0
 8005046:	d024      	beq.n	8005092 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005048:	4942      	ldr	r1, [pc, #264]	; (8005154 <HAL_RCC_GetSysClockFreq+0x160>)
 800504a:	6849      	ldr	r1, [r1, #4]
 800504c:	0989      	lsrs	r1, r1, #6
 800504e:	4608      	mov	r0, r1
 8005050:	f04f 0100 	mov.w	r1, #0
 8005054:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005058:	f04f 0500 	mov.w	r5, #0
 800505c:	ea00 0204 	and.w	r2, r0, r4
 8005060:	ea01 0305 	and.w	r3, r1, r5
 8005064:	493d      	ldr	r1, [pc, #244]	; (800515c <HAL_RCC_GetSysClockFreq+0x168>)
 8005066:	fb01 f003 	mul.w	r0, r1, r3
 800506a:	2100      	movs	r1, #0
 800506c:	fb01 f102 	mul.w	r1, r1, r2
 8005070:	1844      	adds	r4, r0, r1
 8005072:	493a      	ldr	r1, [pc, #232]	; (800515c <HAL_RCC_GetSysClockFreq+0x168>)
 8005074:	fba2 0101 	umull	r0, r1, r2, r1
 8005078:	1863      	adds	r3, r4, r1
 800507a:	4619      	mov	r1, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	461a      	mov	r2, r3
 8005080:	f04f 0300 	mov.w	r3, #0
 8005084:	f7fb f8a8 	bl	80001d8 <__aeabi_uldivmod>
 8005088:	4602      	mov	r2, r0
 800508a:	460b      	mov	r3, r1
 800508c:	4613      	mov	r3, r2
 800508e:	60fb      	str	r3, [r7, #12]
 8005090:	e04a      	b.n	8005128 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005092:	4b30      	ldr	r3, [pc, #192]	; (8005154 <HAL_RCC_GetSysClockFreq+0x160>)
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	099b      	lsrs	r3, r3, #6
 8005098:	461a      	mov	r2, r3
 800509a:	f04f 0300 	mov.w	r3, #0
 800509e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80050a2:	f04f 0100 	mov.w	r1, #0
 80050a6:	ea02 0400 	and.w	r4, r2, r0
 80050aa:	ea03 0501 	and.w	r5, r3, r1
 80050ae:	4620      	mov	r0, r4
 80050b0:	4629      	mov	r1, r5
 80050b2:	f04f 0200 	mov.w	r2, #0
 80050b6:	f04f 0300 	mov.w	r3, #0
 80050ba:	014b      	lsls	r3, r1, #5
 80050bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80050c0:	0142      	lsls	r2, r0, #5
 80050c2:	4610      	mov	r0, r2
 80050c4:	4619      	mov	r1, r3
 80050c6:	1b00      	subs	r0, r0, r4
 80050c8:	eb61 0105 	sbc.w	r1, r1, r5
 80050cc:	f04f 0200 	mov.w	r2, #0
 80050d0:	f04f 0300 	mov.w	r3, #0
 80050d4:	018b      	lsls	r3, r1, #6
 80050d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80050da:	0182      	lsls	r2, r0, #6
 80050dc:	1a12      	subs	r2, r2, r0
 80050de:	eb63 0301 	sbc.w	r3, r3, r1
 80050e2:	f04f 0000 	mov.w	r0, #0
 80050e6:	f04f 0100 	mov.w	r1, #0
 80050ea:	00d9      	lsls	r1, r3, #3
 80050ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050f0:	00d0      	lsls	r0, r2, #3
 80050f2:	4602      	mov	r2, r0
 80050f4:	460b      	mov	r3, r1
 80050f6:	1912      	adds	r2, r2, r4
 80050f8:	eb45 0303 	adc.w	r3, r5, r3
 80050fc:	f04f 0000 	mov.w	r0, #0
 8005100:	f04f 0100 	mov.w	r1, #0
 8005104:	0299      	lsls	r1, r3, #10
 8005106:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800510a:	0290      	lsls	r0, r2, #10
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	4610      	mov	r0, r2
 8005112:	4619      	mov	r1, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	461a      	mov	r2, r3
 8005118:	f04f 0300 	mov.w	r3, #0
 800511c:	f7fb f85c 	bl	80001d8 <__aeabi_uldivmod>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	4613      	mov	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005128:	4b0a      	ldr	r3, [pc, #40]	; (8005154 <HAL_RCC_GetSysClockFreq+0x160>)
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	0c1b      	lsrs	r3, r3, #16
 800512e:	f003 0303 	and.w	r3, r3, #3
 8005132:	3301      	adds	r3, #1
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005140:	60bb      	str	r3, [r7, #8]
      break;
 8005142:	e002      	b.n	800514a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005144:	4b04      	ldr	r3, [pc, #16]	; (8005158 <HAL_RCC_GetSysClockFreq+0x164>)
 8005146:	60bb      	str	r3, [r7, #8]
      break;
 8005148:	bf00      	nop
    }
  }
  return sysclockfreq;
 800514a:	68bb      	ldr	r3, [r7, #8]
}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bdb0      	pop	{r4, r5, r7, pc}
 8005154:	40023800 	.word	0x40023800
 8005158:	00f42400 	.word	0x00f42400
 800515c:	016e3600 	.word	0x016e3600

08005160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005160:	b480      	push	{r7}
 8005162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005164:	4b03      	ldr	r3, [pc, #12]	; (8005174 <HAL_RCC_GetHCLKFreq+0x14>)
 8005166:	681b      	ldr	r3, [r3, #0]
}
 8005168:	4618      	mov	r0, r3
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	20000118 	.word	0x20000118

08005178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800517c:	f7ff fff0 	bl	8005160 <HAL_RCC_GetHCLKFreq>
 8005180:	4602      	mov	r2, r0
 8005182:	4b05      	ldr	r3, [pc, #20]	; (8005198 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	0a9b      	lsrs	r3, r3, #10
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	4903      	ldr	r1, [pc, #12]	; (800519c <HAL_RCC_GetPCLK1Freq+0x24>)
 800518e:	5ccb      	ldrb	r3, [r1, r3]
 8005190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005194:	4618      	mov	r0, r3
 8005196:	bd80      	pop	{r7, pc}
 8005198:	40023800 	.word	0x40023800
 800519c:	0800b26c 	.word	0x0800b26c

080051a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80051a4:	f7ff ffdc 	bl	8005160 <HAL_RCC_GetHCLKFreq>
 80051a8:	4602      	mov	r2, r0
 80051aa:	4b05      	ldr	r3, [pc, #20]	; (80051c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	0b5b      	lsrs	r3, r3, #13
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	4903      	ldr	r1, [pc, #12]	; (80051c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051b6:	5ccb      	ldrb	r3, [r1, r3]
 80051b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051bc:	4618      	mov	r0, r3
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	40023800 	.word	0x40023800
 80051c4:	0800b26c 	.word	0x0800b26c

080051c8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80051cc:	4b06      	ldr	r3, [pc, #24]	; (80051e8 <HAL_RCC_NMI_IRQHandler+0x20>)
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d4:	2b80      	cmp	r3, #128	; 0x80
 80051d6:	d104      	bne.n	80051e2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80051d8:	f000 f80a 	bl	80051f0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80051dc:	4b03      	ldr	r3, [pc, #12]	; (80051ec <HAL_RCC_NMI_IRQHandler+0x24>)
 80051de:	2280      	movs	r2, #128	; 0x80
 80051e0:	701a      	strb	r2, [r3, #0]
  }
}
 80051e2:	bf00      	nop
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	40023800 	.word	0x40023800
 80051ec:	4002380e 	.word	0x4002380e

080051f0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80051f0:	b480      	push	{r7}
 80051f2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80051f4:	bf00      	nop
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
	...

08005200 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005208:	2300      	movs	r3, #0
 800520a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800520c:	2300      	movs	r3, #0
 800520e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	2b00      	cmp	r3, #0
 800521a:	d105      	bne.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005224:	2b00      	cmp	r3, #0
 8005226:	d038      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005228:	4b68      	ldr	r3, [pc, #416]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800522a:	2200      	movs	r2, #0
 800522c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800522e:	f7fb fa37 	bl	80006a0 <HAL_GetTick>
 8005232:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005234:	e008      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005236:	f7fb fa33 	bl	80006a0 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d901      	bls.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e0bc      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005248:	4b61      	ldr	r3, [pc, #388]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1f0      	bne.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	019b      	lsls	r3, r3, #6
 800525e:	431a      	orrs	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	071b      	lsls	r3, r3, #28
 8005266:	495a      	ldr	r1, [pc, #360]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005268:	4313      	orrs	r3, r2
 800526a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800526e:	4b57      	ldr	r3, [pc, #348]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005270:	2201      	movs	r2, #1
 8005272:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005274:	f7fb fa14 	bl	80006a0 <HAL_GetTick>
 8005278:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800527a:	e008      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800527c:	f7fb fa10 	bl	80006a0 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b02      	cmp	r3, #2
 8005288:	d901      	bls.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e099      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800528e:	4b50      	ldr	r3, [pc, #320]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d0f0      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0302 	and.w	r3, r3, #2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 8082 	beq.w	80053ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80052a8:	2300      	movs	r3, #0
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	4b48      	ldr	r3, [pc, #288]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b0:	4a47      	ldr	r2, [pc, #284]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b6:	6413      	str	r3, [r2, #64]	; 0x40
 80052b8:	4b45      	ldr	r3, [pc, #276]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c0:	60fb      	str	r3, [r7, #12]
 80052c2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80052c4:	4b43      	ldr	r3, [pc, #268]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a42      	ldr	r2, [pc, #264]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80052ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ce:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80052d0:	f7fb f9e6 	bl	80006a0 <HAL_GetTick>
 80052d4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80052d6:	e008      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80052d8:	f7fb f9e2 	bl	80006a0 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d901      	bls.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e06b      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80052ea:	4b3a      	ldr	r3, [pc, #232]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0f0      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052f6:	4b36      	ldr	r3, [pc, #216]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052fe:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d02e      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	429a      	cmp	r2, r3
 8005312:	d027      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005314:	4b2e      	ldr	r3, [pc, #184]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800531c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800531e:	4b2e      	ldr	r3, [pc, #184]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005320:	2201      	movs	r2, #1
 8005322:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005324:	4b2c      	ldr	r3, [pc, #176]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005326:	2200      	movs	r2, #0
 8005328:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800532a:	4a29      	ldr	r2, [pc, #164]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005330:	4b27      	ldr	r3, [pc, #156]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005334:	f003 0301 	and.w	r3, r3, #1
 8005338:	2b01      	cmp	r3, #1
 800533a:	d113      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800533c:	f7fb f9b0 	bl	80006a0 <HAL_GetTick>
 8005340:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005342:	e009      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x158>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005344:	f7fb f9ac 	bl	80006a0 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8005352:	d901      	bls.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x158>
          {
            return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e034      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005358:	4b1d      	ldr	r3, [pc, #116]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800535a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0ef      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800536c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005370:	d10d      	bne.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8005372:	4b17      	ldr	r3, [pc, #92]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005386:	4912      	ldr	r1, [pc, #72]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005388:	4313      	orrs	r3, r2
 800538a:	608b      	str	r3, [r1, #8]
 800538c:	e005      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x19a>
 800538e:	4b10      	ldr	r3, [pc, #64]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	4a0f      	ldr	r2, [pc, #60]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005394:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005398:	6093      	str	r3, [r2, #8]
 800539a:	4b0d      	ldr	r3, [pc, #52]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800539c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053a6:	490a      	ldr	r1, [pc, #40]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0308 	and.w	r3, r3, #8
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d003      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	7d1a      	ldrb	r2, [r3, #20]
 80053bc:	4b07      	ldr	r3, [pc, #28]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80053be:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3718      	adds	r7, #24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	42470068 	.word	0x42470068
 80053d0:	40023800 	.word	0x40023800
 80053d4:	40007000 	.word	0x40007000
 80053d8:	42470e40 	.word	0x42470e40
 80053dc:	424711e0 	.word	0x424711e0

080053e0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e083      	b.n	80054fa <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	7f5b      	ldrb	r3, [r3, #29]
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d105      	bne.n	8005408 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f005 f864 	bl	800a4d0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	22ca      	movs	r2, #202	; 0xca
 8005414:	625a      	str	r2, [r3, #36]	; 0x24
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2253      	movs	r2, #83	; 0x53
 800541c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f897 	bl	8005552 <RTC_EnterInitMode>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d008      	beq.n	800543c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	22ff      	movs	r2, #255	; 0xff
 8005430:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2204      	movs	r2, #4
 8005436:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e05e      	b.n	80054fa <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	6812      	ldr	r2, [r2, #0]
 8005446:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800544a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800544e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6899      	ldr	r1, [r3, #8]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	431a      	orrs	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	431a      	orrs	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	68d2      	ldr	r2, [r2, #12]
 8005476:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6919      	ldr	r1, [r3, #16]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	041a      	lsls	r2, r3, #16
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800549a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f003 0320 	and.w	r3, r3, #32
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10e      	bne.n	80054c8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f829 	bl	8005502 <HAL_RTC_WaitForSynchro>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d008      	beq.n	80054c8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	22ff      	movs	r2, #255	; 0xff
 80054bc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2204      	movs	r2, #4
 80054c2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e018      	b.n	80054fa <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80054d6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	699a      	ldr	r2, [r3, #24]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	22ff      	movs	r2, #255	; 0xff
 80054f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80054f8:	2300      	movs	r3, #0
  }
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b084      	sub	sp, #16
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800550a:	2300      	movs	r3, #0
 800550c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68da      	ldr	r2, [r3, #12]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800551c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800551e:	f7fb f8bf 	bl	80006a0 <HAL_GetTick>
 8005522:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005524:	e009      	b.n	800553a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005526:	f7fb f8bb 	bl	80006a0 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005534:	d901      	bls.n	800553a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e007      	b.n	800554a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f003 0320 	and.w	r3, r3, #32
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0ee      	beq.n	8005526 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b084      	sub	sp, #16
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005568:	2b00      	cmp	r3, #0
 800556a:	d119      	bne.n	80055a0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f04f 32ff 	mov.w	r2, #4294967295
 8005574:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005576:	f7fb f893 	bl	80006a0 <HAL_GetTick>
 800557a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800557c:	e009      	b.n	8005592 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800557e:	f7fb f88f 	bl	80006a0 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800558c:	d901      	bls.n	8005592 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e007      	b.n	80055a2 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559c:	2b00      	cmp	r3, #0
 800559e:	d0ee      	beq.n	800557e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b082      	sub	sp, #8
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e022      	b.n	8005602 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d105      	bne.n	80055d4 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f004 ff94 	bl	800a4fc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2203      	movs	r2, #3
 80055d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f815 	bl	800560c <HAL_SD_InitCard>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e00a      	b.n	8005602 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
	...

0800560c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800560c:	b5b0      	push	{r4, r5, r7, lr}
 800560e:	b08e      	sub	sp, #56	; 0x38
 8005610:	af04      	add	r7, sp, #16
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005614:	2300      	movs	r3, #0
 8005616:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005618:	2300      	movs	r3, #0
 800561a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800561c:	2300      	movs	r3, #0
 800561e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005620:	2300      	movs	r3, #0
 8005622:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005624:	2300      	movs	r3, #0
 8005626:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005628:	2376      	movs	r3, #118	; 0x76
 800562a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681d      	ldr	r5, [r3, #0]
 8005630:	466c      	mov	r4, sp
 8005632:	f107 0314 	add.w	r3, r7, #20
 8005636:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800563a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800563e:	f107 0308 	add.w	r3, r7, #8
 8005642:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005644:	4628      	mov	r0, r5
 8005646:	f000 ff75 	bl	8006534 <SDIO_Init>
 800564a:	4603      	mov	r3, r0
 800564c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005654:	2b00      	cmp	r3, #0
 8005656:	d001      	beq.n	800565c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e04c      	b.n	80056f6 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800565c:	4b28      	ldr	r3, [pc, #160]	; (8005700 <HAL_SD_InitCard+0xf4>)
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4618      	mov	r0, r3
 8005668:	f000 ff9c 	bl	80065a4 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800566c:	4b24      	ldr	r3, [pc, #144]	; (8005700 <HAL_SD_InitCard+0xf4>)
 800566e:	2201      	movs	r2, #1
 8005670:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 fb52 	bl	8005d1c <SD_PowerON>
 8005678:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00b      	beq.n	8005698 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	431a      	orrs	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e02e      	b.n	80056f6 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 fa73 	bl	8005b84 <SD_InitCard>
 800569e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00b      	beq.n	80056be <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	431a      	orrs	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e01b      	b.n	80056f6 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 ffff 	bl	80066ca <SDMMC_CmdBlockLength>
 80056cc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00f      	beq.n	80056f4 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a0a      	ldr	r2, [pc, #40]	; (8005704 <HAL_SD_InitCard+0xf8>)
 80056da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	431a      	orrs	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e000      	b.n	80056f6 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3728      	adds	r7, #40	; 0x28
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bdb0      	pop	{r4, r5, r7, pc}
 80056fe:	bf00      	nop
 8005700:	422580a0 	.word	0x422580a0
 8005704:	004005ff 	.word	0x004005ff

08005708 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005716:	0f9b      	lsrs	r3, r3, #30
 8005718:	b2da      	uxtb	r2, r3
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005722:	0e9b      	lsrs	r3, r3, #26
 8005724:	b2db      	uxtb	r3, r3
 8005726:	f003 030f 	and.w	r3, r3, #15
 800572a:	b2da      	uxtb	r2, r3
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005734:	0e1b      	lsrs	r3, r3, #24
 8005736:	b2db      	uxtb	r3, r3
 8005738:	f003 0303 	and.w	r3, r3, #3
 800573c:	b2da      	uxtb	r2, r3
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005746:	0c1b      	lsrs	r3, r3, #16
 8005748:	b2da      	uxtb	r2, r3
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005752:	0a1b      	lsrs	r3, r3, #8
 8005754:	b2da      	uxtb	r2, r3
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800575e:	b2da      	uxtb	r2, r3
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005768:	0d1b      	lsrs	r3, r3, #20
 800576a:	b29a      	uxth	r2, r3
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005774:	0c1b      	lsrs	r3, r3, #16
 8005776:	b2db      	uxtb	r3, r3
 8005778:	f003 030f 	and.w	r3, r3, #15
 800577c:	b2da      	uxtb	r2, r3
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005786:	0bdb      	lsrs	r3, r3, #15
 8005788:	b2db      	uxtb	r3, r3
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	b2da      	uxtb	r2, r3
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005798:	0b9b      	lsrs	r3, r3, #14
 800579a:	b2db      	uxtb	r3, r3
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	b2da      	uxtb	r2, r3
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057aa:	0b5b      	lsrs	r3, r3, #13
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057bc:	0b1b      	lsrs	r3, r3, #12
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	f003 0301 	and.w	r3, r3, #1
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2200      	movs	r2, #0
 80057ce:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d163      	bne.n	80058a0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057dc:	009a      	lsls	r2, r3, #2
 80057de:	f640 73fc 	movw	r3, #4092	; 0xffc
 80057e2:	4013      	ands	r3, r2
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80057e8:	0f92      	lsrs	r2, r2, #30
 80057ea:	431a      	orrs	r2, r3
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057f4:	0edb      	lsrs	r3, r3, #27
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	f003 0307 	and.w	r3, r3, #7
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005806:	0e1b      	lsrs	r3, r3, #24
 8005808:	b2db      	uxtb	r3, r3
 800580a:	f003 0307 	and.w	r3, r3, #7
 800580e:	b2da      	uxtb	r2, r3
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005818:	0d5b      	lsrs	r3, r3, #21
 800581a:	b2db      	uxtb	r3, r3
 800581c:	f003 0307 	and.w	r3, r3, #7
 8005820:	b2da      	uxtb	r2, r3
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800582a:	0c9b      	lsrs	r3, r3, #18
 800582c:	b2db      	uxtb	r3, r3
 800582e:	f003 0307 	and.w	r3, r3, #7
 8005832:	b2da      	uxtb	r2, r3
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800583c:	0bdb      	lsrs	r3, r3, #15
 800583e:	b2db      	uxtb	r3, r3
 8005840:	f003 0307 	and.w	r3, r3, #7
 8005844:	b2da      	uxtb	r2, r3
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	1c5a      	adds	r2, r3, #1
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	7e1b      	ldrb	r3, [r3, #24]
 8005858:	b2db      	uxtb	r3, r3
 800585a:	f003 0307 	and.w	r3, r3, #7
 800585e:	3302      	adds	r3, #2
 8005860:	2201      	movs	r2, #1
 8005862:	fa02 f303 	lsl.w	r3, r2, r3
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800586a:	fb02 f203 	mul.w	r2, r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	7a1b      	ldrb	r3, [r3, #8]
 8005876:	b2db      	uxtb	r3, r3
 8005878:	f003 030f 	and.w	r3, r3, #15
 800587c:	2201      	movs	r2, #1
 800587e:	409a      	lsls	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800588c:	0a52      	lsrs	r2, r2, #9
 800588e:	fb02 f203 	mul.w	r2, r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800589c:	661a      	str	r2, [r3, #96]	; 0x60
 800589e:	e031      	b.n	8005904 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d11d      	bne.n	80058e4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058ac:	041b      	lsls	r3, r3, #16
 80058ae:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058b6:	0c1b      	lsrs	r3, r3, #16
 80058b8:	431a      	orrs	r2, r3
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	3301      	adds	r3, #1
 80058c4:	029a      	lsls	r2, r3, #10
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058d8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	661a      	str	r2, [r3, #96]	; 0x60
 80058e2:	e00f      	b.n	8005904 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a58      	ldr	r2, [pc, #352]	; (8005a4c <HAL_SD_GetCardCSD+0x344>)
 80058ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e09d      	b.n	8005a40 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005908:	0b9b      	lsrs	r3, r3, #14
 800590a:	b2db      	uxtb	r3, r3
 800590c:	f003 0301 	and.w	r3, r3, #1
 8005910:	b2da      	uxtb	r2, r3
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800591a:	09db      	lsrs	r3, r3, #7
 800591c:	b2db      	uxtb	r3, r3
 800591e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005922:	b2da      	uxtb	r2, r3
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800592c:	b2db      	uxtb	r3, r3
 800592e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005932:	b2da      	uxtb	r2, r3
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800593c:	0fdb      	lsrs	r3, r3, #31
 800593e:	b2da      	uxtb	r2, r3
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005948:	0f5b      	lsrs	r3, r3, #29
 800594a:	b2db      	uxtb	r3, r3
 800594c:	f003 0303 	and.w	r3, r3, #3
 8005950:	b2da      	uxtb	r2, r3
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595a:	0e9b      	lsrs	r3, r3, #26
 800595c:	b2db      	uxtb	r3, r3
 800595e:	f003 0307 	and.w	r3, r3, #7
 8005962:	b2da      	uxtb	r2, r3
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596c:	0d9b      	lsrs	r3, r3, #22
 800596e:	b2db      	uxtb	r3, r3
 8005970:	f003 030f 	and.w	r3, r3, #15
 8005974:	b2da      	uxtb	r2, r3
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597e:	0d5b      	lsrs	r3, r3, #21
 8005980:	b2db      	uxtb	r3, r3
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	b2da      	uxtb	r2, r3
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599a:	0c1b      	lsrs	r3, r3, #16
 800599c:	b2db      	uxtb	r3, r3
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ae:	0bdb      	lsrs	r3, r3, #15
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	b2da      	uxtb	r2, r3
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c2:	0b9b      	lsrs	r3, r3, #14
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d6:	0b5b      	lsrs	r3, r3, #13
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	b2da      	uxtb	r2, r3
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ea:	0b1b      	lsrs	r3, r3, #12
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	b2da      	uxtb	r2, r3
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059fe:	0a9b      	lsrs	r3, r3, #10
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	f003 0303 	and.w	r3, r3, #3
 8005a06:	b2da      	uxtb	r2, r3
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a12:	0a1b      	lsrs	r3, r3, #8
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	f003 0303 	and.w	r3, r3, #3
 8005a1a:	b2da      	uxtb	r2, r3
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a26:	085b      	lsrs	r3, r3, #1
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	004005ff 	.word	0x004005ff

08005a50 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005a50:	b5b0      	push	{r4, r5, r7, lr}
 8005a52:	b08e      	sub	sp, #56	; 0x38
 8005a54:	af04      	add	r7, sp, #16
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2203      	movs	r2, #3
 8005a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6c:	2b03      	cmp	r3, #3
 8005a6e:	d02e      	beq.n	8005ace <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a76:	d106      	bne.n	8005a86 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	639a      	str	r2, [r3, #56]	; 0x38
 8005a84:	e029      	b.n	8005ada <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a8c:	d10a      	bne.n	8005aa4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f9d2 	bl	8005e38 <SD_WideBus_Enable>
 8005a94:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a9a:	6a3b      	ldr	r3, [r7, #32]
 8005a9c:	431a      	orrs	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	639a      	str	r2, [r3, #56]	; 0x38
 8005aa2:	e01a      	b.n	8005ada <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10a      	bne.n	8005ac0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fa0f 	bl	8005ece <SD_WideBus_Disable>
 8005ab0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	639a      	str	r2, [r3, #56]	; 0x38
 8005abe:	e00c      	b.n	8005ada <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	639a      	str	r2, [r3, #56]	; 0x38
 8005acc:	e005      	b.n	8005ada <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00b      	beq.n	8005afa <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a26      	ldr	r2, [pc, #152]	; (8005b80 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005ae8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005af8:	e01f      	b.n	8005b3a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681d      	ldr	r5, [r3, #0]
 8005b20:	466c      	mov	r4, sp
 8005b22:	f107 0314 	add.w	r3, r7, #20
 8005b26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005b2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005b2e:	f107 0308 	add.w	r3, r7, #8
 8005b32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b34:	4628      	mov	r0, r5
 8005b36:	f000 fcfd 	bl	8006534 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fdc1 	bl	80066ca <SDMMC_CmdBlockLength>
 8005b48:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00c      	beq.n	8005b6a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a0a      	ldr	r2, [pc, #40]	; (8005b80 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005b56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005b72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3728      	adds	r7, #40	; 0x28
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bdb0      	pop	{r4, r5, r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	004005ff 	.word	0x004005ff

08005b84 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005b84:	b5b0      	push	{r4, r5, r7, lr}
 8005b86:	b094      	sub	sp, #80	; 0x50
 8005b88:	af04      	add	r7, sp, #16
 8005b8a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f000 fd14 	bl	80065c2 <SDIO_GetPowerState>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d102      	bne.n	8005ba6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005ba0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005ba4:	e0b6      	b.n	8005d14 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005baa:	2b03      	cmp	r3, #3
 8005bac:	d02f      	beq.n	8005c0e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 fe93 	bl	80068de <SDMMC_CmdSendCID>
 8005bb8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d001      	beq.n	8005bc4 <SD_InitCard+0x40>
    {
      return errorstate;
 8005bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bc2:	e0a7      	b.n	8005d14 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2100      	movs	r1, #0
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 fd3e 	bl	800664c <SDIO_GetResponse>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2104      	movs	r1, #4
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 fd35 	bl	800664c <SDIO_GetResponse>
 8005be2:	4602      	mov	r2, r0
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2108      	movs	r1, #8
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 fd2c 	bl	800664c <SDIO_GetResponse>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	210c      	movs	r1, #12
 8005c00:	4618      	mov	r0, r3
 8005c02:	f000 fd23 	bl	800664c <SDIO_GetResponse>
 8005c06:	4602      	mov	r2, r0
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c12:	2b03      	cmp	r3, #3
 8005c14:	d00d      	beq.n	8005c32 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f107 020e 	add.w	r2, r7, #14
 8005c1e:	4611      	mov	r1, r2
 8005c20:	4618      	mov	r0, r3
 8005c22:	f000 fe99 	bl	8006958 <SDMMC_CmdSetRelAdd>
 8005c26:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <SD_InitCard+0xae>
    {
      return errorstate;
 8005c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c30:	e070      	b.n	8005d14 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c36:	2b03      	cmp	r3, #3
 8005c38:	d036      	beq.n	8005ca8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005c3a:	89fb      	ldrh	r3, [r7, #14]
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c4a:	041b      	lsls	r3, r3, #16
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	4610      	mov	r0, r2
 8005c50:	f000 fe63 	bl	800691a <SDMMC_CmdSendCSD>
 8005c54:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d001      	beq.n	8005c60 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c5e:	e059      	b.n	8005d14 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2100      	movs	r1, #0
 8005c66:	4618      	mov	r0, r3
 8005c68:	f000 fcf0 	bl	800664c <SDIO_GetResponse>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2104      	movs	r1, #4
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f000 fce7 	bl	800664c <SDIO_GetResponse>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2108      	movs	r1, #8
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 fcde 	bl	800664c <SDIO_GetResponse>
 8005c90:	4602      	mov	r2, r0
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	210c      	movs	r1, #12
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 fcd5 	bl	800664c <SDIO_GetResponse>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2104      	movs	r1, #4
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f000 fccc 	bl	800664c <SDIO_GetResponse>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	0d1a      	lsrs	r2, r3, #20
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005cbc:	f107 0310 	add.w	r3, r7, #16
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7ff fd20 	bl	8005708 <HAL_SD_GetCardCSD>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d002      	beq.n	8005cd4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005cce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005cd2:	e01f      	b.n	8005d14 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6819      	ldr	r1, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cdc:	041b      	lsls	r3, r3, #16
 8005cde:	461a      	mov	r2, r3
 8005ce0:	f04f 0300 	mov.w	r3, #0
 8005ce4:	4608      	mov	r0, r1
 8005ce6:	f000 fd12 	bl	800670e <SDMMC_CmdSelDesel>
 8005cea:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <SD_InitCard+0x172>
  {
    return errorstate;
 8005cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cf4:	e00e      	b.n	8005d14 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681d      	ldr	r5, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	466c      	mov	r4, sp
 8005cfe:	f103 0210 	add.w	r2, r3, #16
 8005d02:	ca07      	ldmia	r2, {r0, r1, r2}
 8005d04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005d08:	3304      	adds	r3, #4
 8005d0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	f000 fc11 	bl	8006534 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3740      	adds	r7, #64	; 0x40
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bdb0      	pop	{r4, r5, r7, pc}

08005d1c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d24:	2300      	movs	r3, #0
 8005d26:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	617b      	str	r3, [r7, #20]
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4618      	mov	r0, r3
 8005d36:	f000 fd0d 	bl	8006754 <SDMMC_CmdGoIdleState>
 8005d3a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	e072      	b.n	8005e2c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 fd20 	bl	8006790 <SDMMC_CmdOperCond>
 8005d50:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00d      	beq.n	8005d74 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 fcf6 	bl	8006754 <SDMMC_CmdGoIdleState>
 8005d68:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d004      	beq.n	8005d7a <SD_PowerON+0x5e>
    {
      return errorstate;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	e05b      	b.n	8005e2c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d137      	bne.n	8005df2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2100      	movs	r1, #0
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 fd20 	bl	80067ce <SDMMC_CmdAppCommand>
 8005d8e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d02d      	beq.n	8005df2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005d96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005d9a:	e047      	b.n	8005e2c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2100      	movs	r1, #0
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 fd13 	bl	80067ce <SDMMC_CmdAppCommand>
 8005da8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d001      	beq.n	8005db4 <SD_PowerON+0x98>
    {
      return errorstate;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	e03b      	b.n	8005e2c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	491e      	ldr	r1, [pc, #120]	; (8005e34 <SD_PowerON+0x118>)
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 fd29 	bl	8006812 <SDMMC_CmdAppOperCommand>
 8005dc0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d002      	beq.n	8005dce <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005dc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005dcc:	e02e      	b.n	8005e2c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f000 fc39 	bl	800664c <SDIO_GetResponse>
 8005dda:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	0fdb      	lsrs	r3, r3, #31
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d101      	bne.n	8005de8 <SD_PowerON+0xcc>
 8005de4:	2301      	movs	r3, #1
 8005de6:	e000      	b.n	8005dea <SD_PowerON+0xce>
 8005de8:	2300      	movs	r3, #0
 8005dea:	613b      	str	r3, [r7, #16]

    count++;
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	3301      	adds	r3, #1
 8005df0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d802      	bhi.n	8005e02 <SD_PowerON+0xe6>
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d0cc      	beq.n	8005d9c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d902      	bls.n	8005e12 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005e0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e10:	e00c      	b.n	8005e2c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d003      	beq.n	8005e24 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	645a      	str	r2, [r3, #68]	; 0x44
 8005e22:	e002      	b.n	8005e2a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3718      	adds	r7, #24
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	c1100000 	.word	0xc1100000

08005e38 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b086      	sub	sp, #24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005e40:	2300      	movs	r3, #0
 8005e42:	60fb      	str	r3, [r7, #12]
 8005e44:	2300      	movs	r3, #0
 8005e46:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 fbfc 	bl	800664c <SDIO_GetResponse>
 8005e54:	4603      	mov	r3, r0
 8005e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e5e:	d102      	bne.n	8005e66 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005e60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e64:	e02f      	b.n	8005ec6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005e66:	f107 030c 	add.w	r3, r7, #12
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 f879 	bl	8005f64 <SD_FindSCR>
 8005e72:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d001      	beq.n	8005e7e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	e023      	b.n	8005ec6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d01c      	beq.n	8005ec2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e90:	041b      	lsls	r3, r3, #16
 8005e92:	4619      	mov	r1, r3
 8005e94:	4610      	mov	r0, r2
 8005e96:	f000 fc9a 	bl	80067ce <SDMMC_CmdAppCommand>
 8005e9a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d001      	beq.n	8005ea6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	e00f      	b.n	8005ec6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2102      	movs	r1, #2
 8005eac:	4618      	mov	r0, r3
 8005eae:	f000 fcd3 	bl	8006858 <SDMMC_CmdBusWidth>
 8005eb2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d001      	beq.n	8005ebe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	e003      	b.n	8005ec6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	e001      	b.n	8005ec6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005ec2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3718      	adds	r7, #24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b086      	sub	sp, #24
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	60fb      	str	r3, [r7, #12]
 8005eda:	2300      	movs	r3, #0
 8005edc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f000 fbb1 	bl	800664c <SDIO_GetResponse>
 8005eea:	4603      	mov	r3, r0
 8005eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ef0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ef4:	d102      	bne.n	8005efc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005ef6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005efa:	e02f      	b.n	8005f5c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005efc:	f107 030c 	add.w	r3, r7, #12
 8005f00:	4619      	mov	r1, r3
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f82e 	bl	8005f64 <SD_FindSCR>
 8005f08:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	e023      	b.n	8005f5c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d01c      	beq.n	8005f58 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f26:	041b      	lsls	r3, r3, #16
 8005f28:	4619      	mov	r1, r3
 8005f2a:	4610      	mov	r0, r2
 8005f2c:	f000 fc4f 	bl	80067ce <SDMMC_CmdAppCommand>
 8005f30:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	e00f      	b.n	8005f5c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2100      	movs	r1, #0
 8005f42:	4618      	mov	r0, r3
 8005f44:	f000 fc88 	bl	8006858 <SDMMC_CmdBusWidth>
 8005f48:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	e003      	b.n	8005f5c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005f54:	2300      	movs	r3, #0
 8005f56:	e001      	b.n	8005f5c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005f58:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3718      	adds	r7, #24
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005f64:	b590      	push	{r4, r7, lr}
 8005f66:	b08f      	sub	sp, #60	; 0x3c
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005f6e:	f7fa fb97 	bl	80006a0 <HAL_GetTick>
 8005f72:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005f74:	2300      	movs	r3, #0
 8005f76:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005f78:	2300      	movs	r3, #0
 8005f7a:	60bb      	str	r3, [r7, #8]
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2108      	movs	r1, #8
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f000 fb9d 	bl	80066ca <SDMMC_CmdBlockLength>
 8005f90:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <SD_FindSCR+0x38>
  {
    return errorstate;
 8005f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9a:	e0b2      	b.n	8006102 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa4:	041b      	lsls	r3, r3, #16
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	4610      	mov	r0, r2
 8005faa:	f000 fc10 	bl	80067ce <SDMMC_CmdAppCommand>
 8005fae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <SD_FindSCR+0x56>
  {
    return errorstate;
 8005fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb8:	e0a3      	b.n	8006102 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005fba:	f04f 33ff 	mov.w	r3, #4294967295
 8005fbe:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005fc0:	2308      	movs	r3, #8
 8005fc2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005fc4:	2330      	movs	r3, #48	; 0x30
 8005fc6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005fc8:	2302      	movs	r3, #2
 8005fca:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f107 0210 	add.w	r2, r7, #16
 8005fdc:	4611      	mov	r1, r2
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f000 fb47 	bl	8006672 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f000 fc57 	bl	800689c <SDMMC_CmdSendSCR>
 8005fee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d02a      	beq.n	800604c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8005ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff8:	e083      	b.n	8006102 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00f      	beq.n	8006028 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6819      	ldr	r1, [r3, #0]
 800600c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	f107 0208 	add.w	r2, r7, #8
 8006014:	18d4      	adds	r4, r2, r3
 8006016:	4608      	mov	r0, r1
 8006018:	f000 fab7 	bl	800658a <SDIO_ReadFIFO>
 800601c:	4603      	mov	r3, r0
 800601e:	6023      	str	r3, [r4, #0]
      index++;
 8006020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006022:	3301      	adds	r3, #1
 8006024:	637b      	str	r3, [r7, #52]	; 0x34
 8006026:	e006      	b.n	8006036 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800602e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d012      	beq.n	800605c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006036:	f7fa fb33 	bl	80006a0 <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006044:	d102      	bne.n	800604c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006046:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800604a:	e05a      	b.n	8006102 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006052:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8006056:	2b00      	cmp	r3, #0
 8006058:	d0cf      	beq.n	8005ffa <SD_FindSCR+0x96>
 800605a:	e000      	b.n	800605e <SD_FindSCR+0xfa>
      break;
 800605c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006064:	f003 0308 	and.w	r3, r3, #8
 8006068:	2b00      	cmp	r3, #0
 800606a:	d005      	beq.n	8006078 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2208      	movs	r2, #8
 8006072:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006074:	2308      	movs	r3, #8
 8006076:	e044      	b.n	8006102 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	2b00      	cmp	r3, #0
 8006084:	d005      	beq.n	8006092 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2202      	movs	r2, #2
 800608c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800608e:	2302      	movs	r3, #2
 8006090:	e037      	b.n	8006102 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006098:	f003 0320 	and.w	r3, r3, #32
 800609c:	2b00      	cmp	r3, #0
 800609e:	d005      	beq.n	80060ac <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2220      	movs	r2, #32
 80060a6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80060a8:	2320      	movs	r3, #32
 80060aa:	e02a      	b.n	8006102 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f240 523a 	movw	r2, #1338	; 0x53a
 80060b4:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	061a      	lsls	r2, r3, #24
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	021b      	lsls	r3, r3, #8
 80060be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80060c2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	0a1b      	lsrs	r3, r3, #8
 80060c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80060cc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	0e1b      	lsrs	r3, r3, #24
 80060d2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80060d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d6:	601a      	str	r2, [r3, #0]
    scr++;
 80060d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060da:	3304      	adds	r3, #4
 80060dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	061a      	lsls	r2, r3, #24
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	021b      	lsls	r3, r3, #8
 80060e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80060ea:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	0a1b      	lsrs	r3, r3, #8
 80060f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80060f4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	0e1b      	lsrs	r3, r3, #24
 80060fa:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80060fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fe:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	373c      	adds	r7, #60	; 0x3c
 8006106:	46bd      	mov	sp, r7
 8006108:	bd90      	pop	{r4, r7, pc}

0800610a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b082      	sub	sp, #8
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d101      	bne.n	800611c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e03f      	b.n	800619c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006122:	b2db      	uxtb	r3, r3
 8006124:	2b00      	cmp	r3, #0
 8006126:	d106      	bne.n	8006136 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f004 fa6d 	bl	800a610 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2224      	movs	r2, #36	; 0x24
 800613a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68da      	ldr	r2, [r3, #12]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800614c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f828 	bl	80061a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	691a      	ldr	r2, [r3, #16]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006162:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	695a      	ldr	r2, [r3, #20]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006172:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68da      	ldr	r2, [r3, #12]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006182:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2220      	movs	r2, #32
 800618e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2220      	movs	r2, #32
 8006196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3708      	adds	r7, #8
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a8:	b09f      	sub	sp, #124	; 0x7c
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80061b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061ba:	68d9      	ldr	r1, [r3, #12]
 80061bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	ea40 0301 	orr.w	r3, r0, r1
 80061c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80061c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061c8:	689a      	ldr	r2, [r3, #8]
 80061ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	431a      	orrs	r2, r3
 80061d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	431a      	orrs	r2, r3
 80061d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061d8:	69db      	ldr	r3, [r3, #28]
 80061da:	4313      	orrs	r3, r2
 80061dc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80061de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80061e8:	f021 010c 	bic.w	r1, r1, #12
 80061ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061f2:	430b      	orrs	r3, r1
 80061f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006202:	6999      	ldr	r1, [r3, #24]
 8006204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	ea40 0301 	orr.w	r3, r0, r1
 800620c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800620e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	4bc5      	ldr	r3, [pc, #788]	; (8006528 <UART_SetConfig+0x384>)
 8006214:	429a      	cmp	r2, r3
 8006216:	d004      	beq.n	8006222 <UART_SetConfig+0x7e>
 8006218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	4bc3      	ldr	r3, [pc, #780]	; (800652c <UART_SetConfig+0x388>)
 800621e:	429a      	cmp	r2, r3
 8006220:	d103      	bne.n	800622a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006222:	f7fe ffbd 	bl	80051a0 <HAL_RCC_GetPCLK2Freq>
 8006226:	6778      	str	r0, [r7, #116]	; 0x74
 8006228:	e002      	b.n	8006230 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800622a:	f7fe ffa5 	bl	8005178 <HAL_RCC_GetPCLK1Freq>
 800622e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006232:	69db      	ldr	r3, [r3, #28]
 8006234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006238:	f040 80b6 	bne.w	80063a8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800623c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800623e:	461c      	mov	r4, r3
 8006240:	f04f 0500 	mov.w	r5, #0
 8006244:	4622      	mov	r2, r4
 8006246:	462b      	mov	r3, r5
 8006248:	1891      	adds	r1, r2, r2
 800624a:	6439      	str	r1, [r7, #64]	; 0x40
 800624c:	415b      	adcs	r3, r3
 800624e:	647b      	str	r3, [r7, #68]	; 0x44
 8006250:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006254:	1912      	adds	r2, r2, r4
 8006256:	eb45 0303 	adc.w	r3, r5, r3
 800625a:	f04f 0000 	mov.w	r0, #0
 800625e:	f04f 0100 	mov.w	r1, #0
 8006262:	00d9      	lsls	r1, r3, #3
 8006264:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006268:	00d0      	lsls	r0, r2, #3
 800626a:	4602      	mov	r2, r0
 800626c:	460b      	mov	r3, r1
 800626e:	1911      	adds	r1, r2, r4
 8006270:	6639      	str	r1, [r7, #96]	; 0x60
 8006272:	416b      	adcs	r3, r5
 8006274:	667b      	str	r3, [r7, #100]	; 0x64
 8006276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	461a      	mov	r2, r3
 800627c:	f04f 0300 	mov.w	r3, #0
 8006280:	1891      	adds	r1, r2, r2
 8006282:	63b9      	str	r1, [r7, #56]	; 0x38
 8006284:	415b      	adcs	r3, r3
 8006286:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006288:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800628c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006290:	f7f9 ffa2 	bl	80001d8 <__aeabi_uldivmod>
 8006294:	4602      	mov	r2, r0
 8006296:	460b      	mov	r3, r1
 8006298:	4ba5      	ldr	r3, [pc, #660]	; (8006530 <UART_SetConfig+0x38c>)
 800629a:	fba3 2302 	umull	r2, r3, r3, r2
 800629e:	095b      	lsrs	r3, r3, #5
 80062a0:	011e      	lsls	r6, r3, #4
 80062a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062a4:	461c      	mov	r4, r3
 80062a6:	f04f 0500 	mov.w	r5, #0
 80062aa:	4622      	mov	r2, r4
 80062ac:	462b      	mov	r3, r5
 80062ae:	1891      	adds	r1, r2, r2
 80062b0:	6339      	str	r1, [r7, #48]	; 0x30
 80062b2:	415b      	adcs	r3, r3
 80062b4:	637b      	str	r3, [r7, #52]	; 0x34
 80062b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80062ba:	1912      	adds	r2, r2, r4
 80062bc:	eb45 0303 	adc.w	r3, r5, r3
 80062c0:	f04f 0000 	mov.w	r0, #0
 80062c4:	f04f 0100 	mov.w	r1, #0
 80062c8:	00d9      	lsls	r1, r3, #3
 80062ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80062ce:	00d0      	lsls	r0, r2, #3
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	1911      	adds	r1, r2, r4
 80062d6:	65b9      	str	r1, [r7, #88]	; 0x58
 80062d8:	416b      	adcs	r3, r5
 80062da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	461a      	mov	r2, r3
 80062e2:	f04f 0300 	mov.w	r3, #0
 80062e6:	1891      	adds	r1, r2, r2
 80062e8:	62b9      	str	r1, [r7, #40]	; 0x28
 80062ea:	415b      	adcs	r3, r3
 80062ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062f2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80062f6:	f7f9 ff6f 	bl	80001d8 <__aeabi_uldivmod>
 80062fa:	4602      	mov	r2, r0
 80062fc:	460b      	mov	r3, r1
 80062fe:	4b8c      	ldr	r3, [pc, #560]	; (8006530 <UART_SetConfig+0x38c>)
 8006300:	fba3 1302 	umull	r1, r3, r3, r2
 8006304:	095b      	lsrs	r3, r3, #5
 8006306:	2164      	movs	r1, #100	; 0x64
 8006308:	fb01 f303 	mul.w	r3, r1, r3
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	00db      	lsls	r3, r3, #3
 8006310:	3332      	adds	r3, #50	; 0x32
 8006312:	4a87      	ldr	r2, [pc, #540]	; (8006530 <UART_SetConfig+0x38c>)
 8006314:	fba2 2303 	umull	r2, r3, r2, r3
 8006318:	095b      	lsrs	r3, r3, #5
 800631a:	005b      	lsls	r3, r3, #1
 800631c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006320:	441e      	add	r6, r3
 8006322:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006324:	4618      	mov	r0, r3
 8006326:	f04f 0100 	mov.w	r1, #0
 800632a:	4602      	mov	r2, r0
 800632c:	460b      	mov	r3, r1
 800632e:	1894      	adds	r4, r2, r2
 8006330:	623c      	str	r4, [r7, #32]
 8006332:	415b      	adcs	r3, r3
 8006334:	627b      	str	r3, [r7, #36]	; 0x24
 8006336:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800633a:	1812      	adds	r2, r2, r0
 800633c:	eb41 0303 	adc.w	r3, r1, r3
 8006340:	f04f 0400 	mov.w	r4, #0
 8006344:	f04f 0500 	mov.w	r5, #0
 8006348:	00dd      	lsls	r5, r3, #3
 800634a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800634e:	00d4      	lsls	r4, r2, #3
 8006350:	4622      	mov	r2, r4
 8006352:	462b      	mov	r3, r5
 8006354:	1814      	adds	r4, r2, r0
 8006356:	653c      	str	r4, [r7, #80]	; 0x50
 8006358:	414b      	adcs	r3, r1
 800635a:	657b      	str	r3, [r7, #84]	; 0x54
 800635c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	461a      	mov	r2, r3
 8006362:	f04f 0300 	mov.w	r3, #0
 8006366:	1891      	adds	r1, r2, r2
 8006368:	61b9      	str	r1, [r7, #24]
 800636a:	415b      	adcs	r3, r3
 800636c:	61fb      	str	r3, [r7, #28]
 800636e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006372:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006376:	f7f9 ff2f 	bl	80001d8 <__aeabi_uldivmod>
 800637a:	4602      	mov	r2, r0
 800637c:	460b      	mov	r3, r1
 800637e:	4b6c      	ldr	r3, [pc, #432]	; (8006530 <UART_SetConfig+0x38c>)
 8006380:	fba3 1302 	umull	r1, r3, r3, r2
 8006384:	095b      	lsrs	r3, r3, #5
 8006386:	2164      	movs	r1, #100	; 0x64
 8006388:	fb01 f303 	mul.w	r3, r1, r3
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	00db      	lsls	r3, r3, #3
 8006390:	3332      	adds	r3, #50	; 0x32
 8006392:	4a67      	ldr	r2, [pc, #412]	; (8006530 <UART_SetConfig+0x38c>)
 8006394:	fba2 2303 	umull	r2, r3, r2, r3
 8006398:	095b      	lsrs	r3, r3, #5
 800639a:	f003 0207 	and.w	r2, r3, #7
 800639e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4432      	add	r2, r6
 80063a4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063a6:	e0b9      	b.n	800651c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063aa:	461c      	mov	r4, r3
 80063ac:	f04f 0500 	mov.w	r5, #0
 80063b0:	4622      	mov	r2, r4
 80063b2:	462b      	mov	r3, r5
 80063b4:	1891      	adds	r1, r2, r2
 80063b6:	6139      	str	r1, [r7, #16]
 80063b8:	415b      	adcs	r3, r3
 80063ba:	617b      	str	r3, [r7, #20]
 80063bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80063c0:	1912      	adds	r2, r2, r4
 80063c2:	eb45 0303 	adc.w	r3, r5, r3
 80063c6:	f04f 0000 	mov.w	r0, #0
 80063ca:	f04f 0100 	mov.w	r1, #0
 80063ce:	00d9      	lsls	r1, r3, #3
 80063d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80063d4:	00d0      	lsls	r0, r2, #3
 80063d6:	4602      	mov	r2, r0
 80063d8:	460b      	mov	r3, r1
 80063da:	eb12 0804 	adds.w	r8, r2, r4
 80063de:	eb43 0905 	adc.w	r9, r3, r5
 80063e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	4618      	mov	r0, r3
 80063e8:	f04f 0100 	mov.w	r1, #0
 80063ec:	f04f 0200 	mov.w	r2, #0
 80063f0:	f04f 0300 	mov.w	r3, #0
 80063f4:	008b      	lsls	r3, r1, #2
 80063f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80063fa:	0082      	lsls	r2, r0, #2
 80063fc:	4640      	mov	r0, r8
 80063fe:	4649      	mov	r1, r9
 8006400:	f7f9 feea 	bl	80001d8 <__aeabi_uldivmod>
 8006404:	4602      	mov	r2, r0
 8006406:	460b      	mov	r3, r1
 8006408:	4b49      	ldr	r3, [pc, #292]	; (8006530 <UART_SetConfig+0x38c>)
 800640a:	fba3 2302 	umull	r2, r3, r3, r2
 800640e:	095b      	lsrs	r3, r3, #5
 8006410:	011e      	lsls	r6, r3, #4
 8006412:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006414:	4618      	mov	r0, r3
 8006416:	f04f 0100 	mov.w	r1, #0
 800641a:	4602      	mov	r2, r0
 800641c:	460b      	mov	r3, r1
 800641e:	1894      	adds	r4, r2, r2
 8006420:	60bc      	str	r4, [r7, #8]
 8006422:	415b      	adcs	r3, r3
 8006424:	60fb      	str	r3, [r7, #12]
 8006426:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800642a:	1812      	adds	r2, r2, r0
 800642c:	eb41 0303 	adc.w	r3, r1, r3
 8006430:	f04f 0400 	mov.w	r4, #0
 8006434:	f04f 0500 	mov.w	r5, #0
 8006438:	00dd      	lsls	r5, r3, #3
 800643a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800643e:	00d4      	lsls	r4, r2, #3
 8006440:	4622      	mov	r2, r4
 8006442:	462b      	mov	r3, r5
 8006444:	1814      	adds	r4, r2, r0
 8006446:	64bc      	str	r4, [r7, #72]	; 0x48
 8006448:	414b      	adcs	r3, r1
 800644a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800644c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	4618      	mov	r0, r3
 8006452:	f04f 0100 	mov.w	r1, #0
 8006456:	f04f 0200 	mov.w	r2, #0
 800645a:	f04f 0300 	mov.w	r3, #0
 800645e:	008b      	lsls	r3, r1, #2
 8006460:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006464:	0082      	lsls	r2, r0, #2
 8006466:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800646a:	f7f9 feb5 	bl	80001d8 <__aeabi_uldivmod>
 800646e:	4602      	mov	r2, r0
 8006470:	460b      	mov	r3, r1
 8006472:	4b2f      	ldr	r3, [pc, #188]	; (8006530 <UART_SetConfig+0x38c>)
 8006474:	fba3 1302 	umull	r1, r3, r3, r2
 8006478:	095b      	lsrs	r3, r3, #5
 800647a:	2164      	movs	r1, #100	; 0x64
 800647c:	fb01 f303 	mul.w	r3, r1, r3
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	011b      	lsls	r3, r3, #4
 8006484:	3332      	adds	r3, #50	; 0x32
 8006486:	4a2a      	ldr	r2, [pc, #168]	; (8006530 <UART_SetConfig+0x38c>)
 8006488:	fba2 2303 	umull	r2, r3, r2, r3
 800648c:	095b      	lsrs	r3, r3, #5
 800648e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006492:	441e      	add	r6, r3
 8006494:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006496:	4618      	mov	r0, r3
 8006498:	f04f 0100 	mov.w	r1, #0
 800649c:	4602      	mov	r2, r0
 800649e:	460b      	mov	r3, r1
 80064a0:	1894      	adds	r4, r2, r2
 80064a2:	603c      	str	r4, [r7, #0]
 80064a4:	415b      	adcs	r3, r3
 80064a6:	607b      	str	r3, [r7, #4]
 80064a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064ac:	1812      	adds	r2, r2, r0
 80064ae:	eb41 0303 	adc.w	r3, r1, r3
 80064b2:	f04f 0400 	mov.w	r4, #0
 80064b6:	f04f 0500 	mov.w	r5, #0
 80064ba:	00dd      	lsls	r5, r3, #3
 80064bc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80064c0:	00d4      	lsls	r4, r2, #3
 80064c2:	4622      	mov	r2, r4
 80064c4:	462b      	mov	r3, r5
 80064c6:	eb12 0a00 	adds.w	sl, r2, r0
 80064ca:	eb43 0b01 	adc.w	fp, r3, r1
 80064ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f04f 0100 	mov.w	r1, #0
 80064d8:	f04f 0200 	mov.w	r2, #0
 80064dc:	f04f 0300 	mov.w	r3, #0
 80064e0:	008b      	lsls	r3, r1, #2
 80064e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80064e6:	0082      	lsls	r2, r0, #2
 80064e8:	4650      	mov	r0, sl
 80064ea:	4659      	mov	r1, fp
 80064ec:	f7f9 fe74 	bl	80001d8 <__aeabi_uldivmod>
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	4b0e      	ldr	r3, [pc, #56]	; (8006530 <UART_SetConfig+0x38c>)
 80064f6:	fba3 1302 	umull	r1, r3, r3, r2
 80064fa:	095b      	lsrs	r3, r3, #5
 80064fc:	2164      	movs	r1, #100	; 0x64
 80064fe:	fb01 f303 	mul.w	r3, r1, r3
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	011b      	lsls	r3, r3, #4
 8006506:	3332      	adds	r3, #50	; 0x32
 8006508:	4a09      	ldr	r2, [pc, #36]	; (8006530 <UART_SetConfig+0x38c>)
 800650a:	fba2 2303 	umull	r2, r3, r2, r3
 800650e:	095b      	lsrs	r3, r3, #5
 8006510:	f003 020f 	and.w	r2, r3, #15
 8006514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4432      	add	r2, r6
 800651a:	609a      	str	r2, [r3, #8]
}
 800651c:	bf00      	nop
 800651e:	377c      	adds	r7, #124	; 0x7c
 8006520:	46bd      	mov	sp, r7
 8006522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006526:	bf00      	nop
 8006528:	40011000 	.word	0x40011000
 800652c:	40011400 	.word	0x40011400
 8006530:	51eb851f 	.word	0x51eb851f

08006534 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006534:	b084      	sub	sp, #16
 8006536:	b480      	push	{r7}
 8006538:	b085      	sub	sp, #20
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
 800653e:	f107 001c 	add.w	r0, r7, #28
 8006542:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006546:	2300      	movs	r3, #0
 8006548:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800654a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800654c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800654e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006552:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006554:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006556:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800655a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800655c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800655e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	4313      	orrs	r3, r2
 8006564:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800656e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	431a      	orrs	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	b004      	add	sp, #16
 8006588:	4770      	bx	lr

0800658a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800658a:	b480      	push	{r7}
 800658c:	b083      	sub	sp, #12
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006598:	4618      	mov	r0, r3
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2203      	movs	r2, #3
 80065b0:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80065b2:	2002      	movs	r0, #2
 80065b4:	f7fa f880 	bl	80006b8 <HAL_Delay>
  
  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3708      	adds	r7, #8
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80065c2:	b480      	push	{r7}
 80065c4:	b083      	sub	sp, #12
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0303 	and.w	r3, r3, #3
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	370c      	adds	r7, #12
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80065de:	b480      	push	{r7}
 80065e0:	b085      	sub	sp, #20
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
 80065e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80065e8:	2300      	movs	r3, #0
 80065ea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80065fc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006602:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006608:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	4313      	orrs	r3, r2
 800660e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006618:	f023 030f 	bic.w	r3, r3, #15
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	431a      	orrs	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006632:	b480      	push	{r7}
 8006634:	b083      	sub	sp, #12
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	b2db      	uxtb	r3, r3
}
 8006640:	4618      	mov	r0, r3
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	3314      	adds	r3, #20
 800665a:	461a      	mov	r2, r3
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	4413      	add	r3, r2
 8006660:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
}  
 8006666:	4618      	mov	r0, r3
 8006668:	3714      	adds	r7, #20
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006672:	b480      	push	{r7}
 8006674:	b085      	sub	sp, #20
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800667c:	2300      	movs	r3, #0
 800667e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006698:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800669e:	431a      	orrs	r2, r3
                       Data->DPSM);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80066a4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b0:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	431a      	orrs	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80066bc:	2300      	movs	r3, #0

}
 80066be:	4618      	mov	r0, r3
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b088      	sub	sp, #32
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
 80066d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80066d8:	2310      	movs	r3, #16
 80066da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80066dc:	2340      	movs	r3, #64	; 0x40
 80066de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80066e0:	2300      	movs	r3, #0
 80066e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80066e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80066ea:	f107 0308 	add.w	r3, r7, #8
 80066ee:	4619      	mov	r1, r3
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f7ff ff74 	bl	80065de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80066f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066fa:	2110      	movs	r1, #16
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 f979 	bl	80069f4 <SDMMC_GetCmdResp1>
 8006702:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006704:	69fb      	ldr	r3, [r7, #28]
}
 8006706:	4618      	mov	r0, r3
 8006708:	3720      	adds	r7, #32
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b08a      	sub	sp, #40	; 0x28
 8006712:	af00      	add	r7, sp, #0
 8006714:	60f8      	str	r0, [r7, #12]
 8006716:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800671e:	2307      	movs	r3, #7
 8006720:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006722:	2340      	movs	r3, #64	; 0x40
 8006724:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006726:	2300      	movs	r3, #0
 8006728:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800672a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800672e:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006730:	f107 0310 	add.w	r3, r7, #16
 8006734:	4619      	mov	r1, r3
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f7ff ff51 	bl	80065de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800673c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006740:	2107      	movs	r1, #7
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f000 f956 	bl	80069f4 <SDMMC_GetCmdResp1>
 8006748:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800674a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800674c:	4618      	mov	r0, r3
 800674e:	3728      	adds	r7, #40	; 0x28
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b088      	sub	sp, #32
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800675c:	2300      	movs	r3, #0
 800675e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006760:	2300      	movs	r3, #0
 8006762:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006764:	2300      	movs	r3, #0
 8006766:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006768:	2300      	movs	r3, #0
 800676a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800676c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006770:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006772:	f107 0308 	add.w	r3, r7, #8
 8006776:	4619      	mov	r1, r3
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f7ff ff30 	bl	80065de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f90c 	bl	800699c <SDMMC_GetCmdError>
 8006784:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006786:	69fb      	ldr	r3, [r7, #28]
}
 8006788:	4618      	mov	r0, r3
 800678a:	3720      	adds	r7, #32
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b088      	sub	sp, #32
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006798:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800679c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800679e:	2308      	movs	r3, #8
 80067a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80067a2:	2340      	movs	r3, #64	; 0x40
 80067a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80067a6:	2300      	movs	r3, #0
 80067a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80067aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80067b0:	f107 0308 	add.w	r3, r7, #8
 80067b4:	4619      	mov	r1, r3
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7ff ff11 	bl	80065de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 fb03 	bl	8006dc8 <SDMMC_GetCmdResp7>
 80067c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80067c4:	69fb      	ldr	r3, [r7, #28]
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3720      	adds	r7, #32
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b088      	sub	sp, #32
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
 80067d6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80067dc:	2337      	movs	r3, #55	; 0x37
 80067de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80067e0:	2340      	movs	r3, #64	; 0x40
 80067e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80067e4:	2300      	movs	r3, #0
 80067e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80067e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80067ee:	f107 0308 	add.w	r3, r7, #8
 80067f2:	4619      	mov	r1, r3
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f7ff fef2 	bl	80065de <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80067fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80067fe:	2137      	movs	r1, #55	; 0x37
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 f8f7 	bl	80069f4 <SDMMC_GetCmdResp1>
 8006806:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006808:	69fb      	ldr	r3, [r7, #28]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3720      	adds	r7, #32
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b088      	sub	sp, #32
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
 800681a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006822:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006826:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006828:	2329      	movs	r3, #41	; 0x29
 800682a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800682c:	2340      	movs	r3, #64	; 0x40
 800682e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006830:	2300      	movs	r3, #0
 8006832:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006834:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006838:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800683a:	f107 0308 	add.w	r3, r7, #8
 800683e:	4619      	mov	r1, r3
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f7ff fecc 	bl	80065de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fa0a 	bl	8006c60 <SDMMC_GetCmdResp3>
 800684c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800684e:	69fb      	ldr	r3, [r7, #28]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3720      	adds	r7, #32
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b088      	sub	sp, #32
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006866:	2306      	movs	r3, #6
 8006868:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800686a:	2340      	movs	r3, #64	; 0x40
 800686c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800686e:	2300      	movs	r3, #0
 8006870:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006876:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006878:	f107 0308 	add.w	r3, r7, #8
 800687c:	4619      	mov	r1, r3
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f7ff fead 	bl	80065de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8006884:	f241 3288 	movw	r2, #5000	; 0x1388
 8006888:	2106      	movs	r1, #6
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f8b2 	bl	80069f4 <SDMMC_GetCmdResp1>
 8006890:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006892:	69fb      	ldr	r3, [r7, #28]
}
 8006894:	4618      	mov	r0, r3
 8006896:	3720      	adds	r7, #32
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b088      	sub	sp, #32
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80068a4:	2300      	movs	r3, #0
 80068a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80068a8:	2333      	movs	r3, #51	; 0x33
 80068aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80068ac:	2340      	movs	r3, #64	; 0x40
 80068ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80068b0:	2300      	movs	r3, #0
 80068b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80068b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80068ba:	f107 0308 	add.w	r3, r7, #8
 80068be:	4619      	mov	r1, r3
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f7ff fe8c 	bl	80065de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80068c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80068ca:	2133      	movs	r1, #51	; 0x33
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 f891 	bl	80069f4 <SDMMC_GetCmdResp1>
 80068d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068d4:	69fb      	ldr	r3, [r7, #28]
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3720      	adds	r7, #32
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b088      	sub	sp, #32
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80068e6:	2300      	movs	r3, #0
 80068e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80068ea:	2302      	movs	r3, #2
 80068ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80068ee:	23c0      	movs	r3, #192	; 0xc0
 80068f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80068f2:	2300      	movs	r3, #0
 80068f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80068f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80068fc:	f107 0308 	add.w	r3, r7, #8
 8006900:	4619      	mov	r1, r3
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f7ff fe6b 	bl	80065de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 f961 	bl	8006bd0 <SDMMC_GetCmdResp2>
 800690e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006910:	69fb      	ldr	r3, [r7, #28]
}
 8006912:	4618      	mov	r0, r3
 8006914:	3720      	adds	r7, #32
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b088      	sub	sp, #32
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
 8006922:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006928:	2309      	movs	r3, #9
 800692a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800692c:	23c0      	movs	r3, #192	; 0xc0
 800692e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006930:	2300      	movs	r3, #0
 8006932:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006938:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800693a:	f107 0308 	add.w	r3, r7, #8
 800693e:	4619      	mov	r1, r3
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f7ff fe4c 	bl	80065de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f942 	bl	8006bd0 <SDMMC_GetCmdResp2>
 800694c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800694e:	69fb      	ldr	r3, [r7, #28]
}
 8006950:	4618      	mov	r0, r3
 8006952:	3720      	adds	r7, #32
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b088      	sub	sp, #32
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006962:	2300      	movs	r3, #0
 8006964:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006966:	2303      	movs	r3, #3
 8006968:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800696a:	2340      	movs	r3, #64	; 0x40
 800696c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800696e:	2300      	movs	r3, #0
 8006970:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006976:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006978:	f107 0308 	add.w	r3, r7, #8
 800697c:	4619      	mov	r1, r3
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7ff fe2d 	bl	80065de <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006984:	683a      	ldr	r2, [r7, #0]
 8006986:	2103      	movs	r1, #3
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f9a7 	bl	8006cdc <SDMMC_GetCmdResp6>
 800698e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006990:	69fb      	ldr	r3, [r7, #28]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3720      	adds	r7, #32
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
	...

0800699c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80069a4:	4b11      	ldr	r3, [pc, #68]	; (80069ec <SDMMC_GetCmdError+0x50>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a11      	ldr	r2, [pc, #68]	; (80069f0 <SDMMC_GetCmdError+0x54>)
 80069aa:	fba2 2303 	umull	r2, r3, r2, r3
 80069ae:	0a5b      	lsrs	r3, r3, #9
 80069b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80069b4:	fb02 f303 	mul.w	r3, r2, r3
 80069b8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	1e5a      	subs	r2, r3, #1
 80069be:	60fa      	str	r2, [r7, #12]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d102      	bne.n	80069ca <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80069c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80069c8:	e009      	b.n	80069de <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d0f1      	beq.n	80069ba <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	22c5      	movs	r2, #197	; 0xc5
 80069da:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	20000118 	.word	0x20000118
 80069f0:	10624dd3 	.word	0x10624dd3

080069f4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b088      	sub	sp, #32
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	460b      	mov	r3, r1
 80069fe:	607a      	str	r2, [r7, #4]
 8006a00:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006a02:	4b70      	ldr	r3, [pc, #448]	; (8006bc4 <SDMMC_GetCmdResp1+0x1d0>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a70      	ldr	r2, [pc, #448]	; (8006bc8 <SDMMC_GetCmdResp1+0x1d4>)
 8006a08:	fba2 2303 	umull	r2, r3, r2, r3
 8006a0c:	0a5a      	lsrs	r2, r3, #9
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	fb02 f303 	mul.w	r3, r2, r3
 8006a14:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	1e5a      	subs	r2, r3, #1
 8006a1a:	61fa      	str	r2, [r7, #28]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d102      	bne.n	8006a26 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006a20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006a24:	e0c9      	b.n	8006bba <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a2a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d0ef      	beq.n	8006a16 <SDMMC_GetCmdResp1+0x22>
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1ea      	bne.n	8006a16 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a44:	f003 0304 	and.w	r3, r3, #4
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d004      	beq.n	8006a56 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2204      	movs	r2, #4
 8006a50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006a52:	2304      	movs	r3, #4
 8006a54:	e0b1      	b.n	8006bba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a5a:	f003 0301 	and.w	r3, r3, #1
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d004      	beq.n	8006a6c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2201      	movs	r2, #1
 8006a66:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e0a6      	b.n	8006bba <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	22c5      	movs	r2, #197	; 0xc5
 8006a70:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f7ff fddd 	bl	8006632 <SDIO_GetCommandResponse>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	7afb      	ldrb	r3, [r7, #11]
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d001      	beq.n	8006a86 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e099      	b.n	8006bba <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006a86:	2100      	movs	r1, #0
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f7ff fddf 	bl	800664c <SDIO_GetResponse>
 8006a8e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	4b4e      	ldr	r3, [pc, #312]	; (8006bcc <SDMMC_GetCmdResp1+0x1d8>)
 8006a94:	4013      	ands	r3, r2
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	e08d      	b.n	8006bba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	da02      	bge.n	8006aaa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006aa4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006aa8:	e087      	b.n	8006bba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d001      	beq.n	8006ab8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006ab4:	2340      	movs	r3, #64	; 0x40
 8006ab6:	e080      	b.n	8006bba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006ac2:	2380      	movs	r3, #128	; 0x80
 8006ac4:	e079      	b.n	8006bba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d002      	beq.n	8006ad6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006ad0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ad4:	e071      	b.n	8006bba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d002      	beq.n	8006ae6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006ae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ae4:	e069      	b.n	8006bba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d002      	beq.n	8006af6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006af0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006af4:	e061      	b.n	8006bba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d002      	beq.n	8006b06 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006b00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b04:	e059      	b.n	8006bba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d002      	beq.n	8006b16 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006b10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b14:	e051      	b.n	8006bba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d002      	beq.n	8006b26 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006b20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006b24:	e049      	b.n	8006bba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d002      	beq.n	8006b36 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006b30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006b34:	e041      	b.n	8006bba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d002      	beq.n	8006b46 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006b40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b44:	e039      	b.n	8006bba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d002      	beq.n	8006b56 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006b50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b54:	e031      	b.n	8006bba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d002      	beq.n	8006b66 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006b60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006b64:	e029      	b.n	8006bba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d002      	beq.n	8006b76 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006b70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006b74:	e021      	b.n	8006bba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d002      	beq.n	8006b86 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006b80:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006b84:	e019      	b.n	8006bba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d002      	beq.n	8006b96 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006b90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006b94:	e011      	b.n	8006bba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d002      	beq.n	8006ba6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006ba0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006ba4:	e009      	b.n	8006bba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f003 0308 	and.w	r3, r3, #8
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d002      	beq.n	8006bb6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006bb0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006bb4:	e001      	b.n	8006bba <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006bb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3720      	adds	r7, #32
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	20000118 	.word	0x20000118
 8006bc8:	10624dd3 	.word	0x10624dd3
 8006bcc:	fdffe008 	.word	0xfdffe008

08006bd0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006bd8:	4b1f      	ldr	r3, [pc, #124]	; (8006c58 <SDMMC_GetCmdResp2+0x88>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a1f      	ldr	r2, [pc, #124]	; (8006c5c <SDMMC_GetCmdResp2+0x8c>)
 8006bde:	fba2 2303 	umull	r2, r3, r2, r3
 8006be2:	0a5b      	lsrs	r3, r3, #9
 8006be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006be8:	fb02 f303 	mul.w	r3, r2, r3
 8006bec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	1e5a      	subs	r2, r3, #1
 8006bf2:	60fa      	str	r2, [r7, #12]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d102      	bne.n	8006bfe <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006bf8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006bfc:	e026      	b.n	8006c4c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c02:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d0ef      	beq.n	8006bee <SDMMC_GetCmdResp2+0x1e>
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1ea      	bne.n	8006bee <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c1c:	f003 0304 	and.w	r3, r3, #4
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d004      	beq.n	8006c2e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2204      	movs	r2, #4
 8006c28:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006c2a:	2304      	movs	r3, #4
 8006c2c:	e00e      	b.n	8006c4c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d004      	beq.n	8006c44 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e003      	b.n	8006c4c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	22c5      	movs	r2, #197	; 0xc5
 8006c48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3714      	adds	r7, #20
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr
 8006c58:	20000118 	.word	0x20000118
 8006c5c:	10624dd3 	.word	0x10624dd3

08006c60 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006c68:	4b1a      	ldr	r3, [pc, #104]	; (8006cd4 <SDMMC_GetCmdResp3+0x74>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a1a      	ldr	r2, [pc, #104]	; (8006cd8 <SDMMC_GetCmdResp3+0x78>)
 8006c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c72:	0a5b      	lsrs	r3, r3, #9
 8006c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c78:	fb02 f303 	mul.w	r3, r2, r3
 8006c7c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	1e5a      	subs	r2, r3, #1
 8006c82:	60fa      	str	r2, [r7, #12]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d102      	bne.n	8006c8e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006c88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006c8c:	e01b      	b.n	8006cc6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c92:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d0ef      	beq.n	8006c7e <SDMMC_GetCmdResp3+0x1e>
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1ea      	bne.n	8006c7e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cac:	f003 0304 	and.w	r3, r3, #4
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d004      	beq.n	8006cbe <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2204      	movs	r2, #4
 8006cb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006cba:	2304      	movs	r3, #4
 8006cbc:	e003      	b.n	8006cc6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	22c5      	movs	r2, #197	; 0xc5
 8006cc2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	20000118 	.word	0x20000118
 8006cd8:	10624dd3 	.word	0x10624dd3

08006cdc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b088      	sub	sp, #32
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	607a      	str	r2, [r7, #4]
 8006ce8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006cea:	4b35      	ldr	r3, [pc, #212]	; (8006dc0 <SDMMC_GetCmdResp6+0xe4>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a35      	ldr	r2, [pc, #212]	; (8006dc4 <SDMMC_GetCmdResp6+0xe8>)
 8006cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf4:	0a5b      	lsrs	r3, r3, #9
 8006cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cfa:	fb02 f303 	mul.w	r3, r2, r3
 8006cfe:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	1e5a      	subs	r2, r3, #1
 8006d04:	61fa      	str	r2, [r7, #28]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d102      	bne.n	8006d10 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006d0a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d0e:	e052      	b.n	8006db6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d14:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d0ef      	beq.n	8006d00 <SDMMC_GetCmdResp6+0x24>
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d1ea      	bne.n	8006d00 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d2e:	f003 0304 	and.w	r3, r3, #4
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d004      	beq.n	8006d40 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2204      	movs	r2, #4
 8006d3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006d3c:	2304      	movs	r3, #4
 8006d3e:	e03a      	b.n	8006db6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d44:	f003 0301 	and.w	r3, r3, #1
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d004      	beq.n	8006d56 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e02f      	b.n	8006db6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f7ff fc6b 	bl	8006632 <SDIO_GetCommandResponse>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	461a      	mov	r2, r3
 8006d60:	7afb      	ldrb	r3, [r7, #11]
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d001      	beq.n	8006d6a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e025      	b.n	8006db6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	22c5      	movs	r2, #197	; 0xc5
 8006d6e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006d70:	2100      	movs	r1, #0
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f7ff fc6a 	bl	800664c <SDIO_GetResponse>
 8006d78:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d106      	bne.n	8006d92 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	0c1b      	lsrs	r3, r3, #16
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	e011      	b.n	8006db6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d002      	beq.n	8006da2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006d9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006da0:	e009      	b.n	8006db6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006db0:	e001      	b.n	8006db6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006db2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3720      	adds	r7, #32
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	20000118 	.word	0x20000118
 8006dc4:	10624dd3 	.word	0x10624dd3

08006dc8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006dd0:	4b22      	ldr	r3, [pc, #136]	; (8006e5c <SDMMC_GetCmdResp7+0x94>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a22      	ldr	r2, [pc, #136]	; (8006e60 <SDMMC_GetCmdResp7+0x98>)
 8006dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dda:	0a5b      	lsrs	r3, r3, #9
 8006ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006de0:	fb02 f303 	mul.w	r3, r2, r3
 8006de4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	1e5a      	subs	r2, r3, #1
 8006dea:	60fa      	str	r2, [r7, #12]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d102      	bne.n	8006df6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006df0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006df4:	e02c      	b.n	8006e50 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dfa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d0ef      	beq.n	8006de6 <SDMMC_GetCmdResp7+0x1e>
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1ea      	bne.n	8006de6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e14:	f003 0304 	and.w	r3, r3, #4
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d004      	beq.n	8006e26 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2204      	movs	r2, #4
 8006e20:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006e22:	2304      	movs	r3, #4
 8006e24:	e014      	b.n	8006e50 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d004      	beq.n	8006e3c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2201      	movs	r2, #1
 8006e36:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e009      	b.n	8006e50 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d002      	beq.n	8006e4e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2240      	movs	r2, #64	; 0x40
 8006e4c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006e4e:	2300      	movs	r3, #0
  
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	20000118 	.word	0x20000118
 8006e60:	10624dd3 	.word	0x10624dd3

08006e64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e64:	b084      	sub	sp, #16
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b084      	sub	sp, #16
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
 8006e6e:	f107 001c 	add.w	r0, r7, #28
 8006e72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d122      	bne.n	8006ec2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006e90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d105      	bne.n	8006eb6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f001 fb1c 	bl	80084f4 <USB_CoreReset>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	73fb      	strb	r3, [r7, #15]
 8006ec0:	e01a      	b.n	8006ef8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f001 fb10 	bl	80084f4 <USB_CoreReset>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d106      	bne.n	8006eec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	639a      	str	r2, [r3, #56]	; 0x38
 8006eea:	e005      	b.n	8006ef8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d10b      	bne.n	8006f16 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	f043 0206 	orr.w	r2, r3, #6
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f043 0220 	orr.w	r2, r3, #32
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f22:	b004      	add	sp, #16
 8006f24:	4770      	bx	lr
	...

08006f28 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b087      	sub	sp, #28
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	4613      	mov	r3, r2
 8006f34:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006f36:	79fb      	ldrb	r3, [r7, #7]
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d165      	bne.n	8007008 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	4a41      	ldr	r2, [pc, #260]	; (8007044 <USB_SetTurnaroundTime+0x11c>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d906      	bls.n	8006f52 <USB_SetTurnaroundTime+0x2a>
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	4a40      	ldr	r2, [pc, #256]	; (8007048 <USB_SetTurnaroundTime+0x120>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d202      	bcs.n	8006f52 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006f4c:	230f      	movs	r3, #15
 8006f4e:	617b      	str	r3, [r7, #20]
 8006f50:	e062      	b.n	8007018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	4a3c      	ldr	r2, [pc, #240]	; (8007048 <USB_SetTurnaroundTime+0x120>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d306      	bcc.n	8006f68 <USB_SetTurnaroundTime+0x40>
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	4a3b      	ldr	r2, [pc, #236]	; (800704c <USB_SetTurnaroundTime+0x124>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d202      	bcs.n	8006f68 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006f62:	230e      	movs	r3, #14
 8006f64:	617b      	str	r3, [r7, #20]
 8006f66:	e057      	b.n	8007018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	4a38      	ldr	r2, [pc, #224]	; (800704c <USB_SetTurnaroundTime+0x124>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d306      	bcc.n	8006f7e <USB_SetTurnaroundTime+0x56>
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	4a37      	ldr	r2, [pc, #220]	; (8007050 <USB_SetTurnaroundTime+0x128>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d202      	bcs.n	8006f7e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006f78:	230d      	movs	r3, #13
 8006f7a:	617b      	str	r3, [r7, #20]
 8006f7c:	e04c      	b.n	8007018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	4a33      	ldr	r2, [pc, #204]	; (8007050 <USB_SetTurnaroundTime+0x128>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d306      	bcc.n	8006f94 <USB_SetTurnaroundTime+0x6c>
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	4a32      	ldr	r2, [pc, #200]	; (8007054 <USB_SetTurnaroundTime+0x12c>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d802      	bhi.n	8006f94 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006f8e:	230c      	movs	r3, #12
 8006f90:	617b      	str	r3, [r7, #20]
 8006f92:	e041      	b.n	8007018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	4a2f      	ldr	r2, [pc, #188]	; (8007054 <USB_SetTurnaroundTime+0x12c>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d906      	bls.n	8006faa <USB_SetTurnaroundTime+0x82>
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	4a2e      	ldr	r2, [pc, #184]	; (8007058 <USB_SetTurnaroundTime+0x130>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d802      	bhi.n	8006faa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006fa4:	230b      	movs	r3, #11
 8006fa6:	617b      	str	r3, [r7, #20]
 8006fa8:	e036      	b.n	8007018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	4a2a      	ldr	r2, [pc, #168]	; (8007058 <USB_SetTurnaroundTime+0x130>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d906      	bls.n	8006fc0 <USB_SetTurnaroundTime+0x98>
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	4a29      	ldr	r2, [pc, #164]	; (800705c <USB_SetTurnaroundTime+0x134>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d802      	bhi.n	8006fc0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006fba:	230a      	movs	r3, #10
 8006fbc:	617b      	str	r3, [r7, #20]
 8006fbe:	e02b      	b.n	8007018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	4a26      	ldr	r2, [pc, #152]	; (800705c <USB_SetTurnaroundTime+0x134>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d906      	bls.n	8006fd6 <USB_SetTurnaroundTime+0xae>
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	4a25      	ldr	r2, [pc, #148]	; (8007060 <USB_SetTurnaroundTime+0x138>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d202      	bcs.n	8006fd6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006fd0:	2309      	movs	r3, #9
 8006fd2:	617b      	str	r3, [r7, #20]
 8006fd4:	e020      	b.n	8007018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	4a21      	ldr	r2, [pc, #132]	; (8007060 <USB_SetTurnaroundTime+0x138>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d306      	bcc.n	8006fec <USB_SetTurnaroundTime+0xc4>
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	4a20      	ldr	r2, [pc, #128]	; (8007064 <USB_SetTurnaroundTime+0x13c>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d802      	bhi.n	8006fec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006fe6:	2308      	movs	r3, #8
 8006fe8:	617b      	str	r3, [r7, #20]
 8006fea:	e015      	b.n	8007018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	4a1d      	ldr	r2, [pc, #116]	; (8007064 <USB_SetTurnaroundTime+0x13c>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d906      	bls.n	8007002 <USB_SetTurnaroundTime+0xda>
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	4a1c      	ldr	r2, [pc, #112]	; (8007068 <USB_SetTurnaroundTime+0x140>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d202      	bcs.n	8007002 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006ffc:	2307      	movs	r3, #7
 8006ffe:	617b      	str	r3, [r7, #20]
 8007000:	e00a      	b.n	8007018 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007002:	2306      	movs	r3, #6
 8007004:	617b      	str	r3, [r7, #20]
 8007006:	e007      	b.n	8007018 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007008:	79fb      	ldrb	r3, [r7, #7]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d102      	bne.n	8007014 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800700e:	2309      	movs	r3, #9
 8007010:	617b      	str	r3, [r7, #20]
 8007012:	e001      	b.n	8007018 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007014:	2309      	movs	r3, #9
 8007016:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	68da      	ldr	r2, [r3, #12]
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	029b      	lsls	r3, r3, #10
 800702c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007030:	431a      	orrs	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	371c      	adds	r7, #28
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr
 8007044:	00d8acbf 	.word	0x00d8acbf
 8007048:	00e4e1c0 	.word	0x00e4e1c0
 800704c:	00f42400 	.word	0x00f42400
 8007050:	01067380 	.word	0x01067380
 8007054:	011a499f 	.word	0x011a499f
 8007058:	01312cff 	.word	0x01312cff
 800705c:	014ca43f 	.word	0x014ca43f
 8007060:	016e3600 	.word	0x016e3600
 8007064:	01a6ab1f 	.word	0x01a6ab1f
 8007068:	01e84800 	.word	0x01e84800

0800706c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f043 0201 	orr.w	r2, r3, #1
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	370c      	adds	r7, #12
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr

0800708e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800708e:	b480      	push	{r7}
 8007090:	b083      	sub	sp, #12
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f023 0201 	bic.w	r2, r3, #1
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	460b      	mov	r3, r1
 80070ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80070bc:	2300      	movs	r3, #0
 80070be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80070cc:	78fb      	ldrb	r3, [r7, #3]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d115      	bne.n	80070fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80070de:	2001      	movs	r0, #1
 80070e0:	f7f9 faea 	bl	80006b8 <HAL_Delay>
      ms++;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	3301      	adds	r3, #1
 80070e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f001 f972 	bl	80083d4 <USB_GetMode>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d01e      	beq.n	8007134 <USB_SetCurrentMode+0x84>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2b31      	cmp	r3, #49	; 0x31
 80070fa:	d9f0      	bls.n	80070de <USB_SetCurrentMode+0x2e>
 80070fc:	e01a      	b.n	8007134 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80070fe:	78fb      	ldrb	r3, [r7, #3]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d115      	bne.n	8007130 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007110:	2001      	movs	r0, #1
 8007112:	f7f9 fad1 	bl	80006b8 <HAL_Delay>
      ms++;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	3301      	adds	r3, #1
 800711a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f001 f959 	bl	80083d4 <USB_GetMode>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d005      	beq.n	8007134 <USB_SetCurrentMode+0x84>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2b31      	cmp	r3, #49	; 0x31
 800712c:	d9f0      	bls.n	8007110 <USB_SetCurrentMode+0x60>
 800712e:	e001      	b.n	8007134 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e005      	b.n	8007140 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2b32      	cmp	r3, #50	; 0x32
 8007138:	d101      	bne.n	800713e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e000      	b.n	8007140 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007148:	b084      	sub	sp, #16
 800714a:	b580      	push	{r7, lr}
 800714c:	b086      	sub	sp, #24
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007156:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800715a:	2300      	movs	r3, #0
 800715c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007162:	2300      	movs	r3, #0
 8007164:	613b      	str	r3, [r7, #16]
 8007166:	e009      	b.n	800717c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	3340      	adds	r3, #64	; 0x40
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	4413      	add	r3, r2
 8007172:	2200      	movs	r2, #0
 8007174:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	3301      	adds	r3, #1
 800717a:	613b      	str	r3, [r7, #16]
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	2b0e      	cmp	r3, #14
 8007180:	d9f2      	bls.n	8007168 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007184:	2b00      	cmp	r3, #0
 8007186:	d11c      	bne.n	80071c2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007196:	f043 0302 	orr.w	r3, r3, #2
 800719a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ac:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	639a      	str	r2, [r3, #56]	; 0x38
 80071c0:	e00b      	b.n	80071da <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071e0:	461a      	mov	r2, r3
 80071e2:	2300      	movs	r3, #0
 80071e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ec:	4619      	mov	r1, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071f4:	461a      	mov	r2, r3
 80071f6:	680b      	ldr	r3, [r1, #0]
 80071f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80071fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d10c      	bne.n	800721a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007202:	2b00      	cmp	r3, #0
 8007204:	d104      	bne.n	8007210 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007206:	2100      	movs	r1, #0
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 f945 	bl	8007498 <USB_SetDevSpeed>
 800720e:	e008      	b.n	8007222 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007210:	2101      	movs	r1, #1
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f940 	bl	8007498 <USB_SetDevSpeed>
 8007218:	e003      	b.n	8007222 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800721a:	2103      	movs	r1, #3
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f93b 	bl	8007498 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007222:	2110      	movs	r1, #16
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 f8f3 	bl	8007410 <USB_FlushTxFifo>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d001      	beq.n	8007234 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 f90f 	bl	8007458 <USB_FlushRxFifo>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d001      	beq.n	8007244 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800724a:	461a      	mov	r2, r3
 800724c:	2300      	movs	r3, #0
 800724e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007256:	461a      	mov	r2, r3
 8007258:	2300      	movs	r3, #0
 800725a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007262:	461a      	mov	r2, r3
 8007264:	2300      	movs	r3, #0
 8007266:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007268:	2300      	movs	r3, #0
 800726a:	613b      	str	r3, [r7, #16]
 800726c:	e043      	b.n	80072f6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	4413      	add	r3, r2
 8007276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007280:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007284:	d118      	bne.n	80072b8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d10a      	bne.n	80072a2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	015a      	lsls	r2, r3, #5
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	4413      	add	r3, r2
 8007294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007298:	461a      	mov	r2, r3
 800729a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800729e:	6013      	str	r3, [r2, #0]
 80072a0:	e013      	b.n	80072ca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	015a      	lsls	r2, r3, #5
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	4413      	add	r3, r2
 80072aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ae:	461a      	mov	r2, r3
 80072b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80072b4:	6013      	str	r3, [r2, #0]
 80072b6:	e008      	b.n	80072ca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	015a      	lsls	r2, r3, #5
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	4413      	add	r3, r2
 80072c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c4:	461a      	mov	r2, r3
 80072c6:	2300      	movs	r3, #0
 80072c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	015a      	lsls	r2, r3, #5
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	4413      	add	r3, r2
 80072d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d6:	461a      	mov	r2, r3
 80072d8:	2300      	movs	r3, #0
 80072da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	015a      	lsls	r2, r3, #5
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	4413      	add	r3, r2
 80072e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e8:	461a      	mov	r2, r3
 80072ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80072ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	3301      	adds	r3, #1
 80072f4:	613b      	str	r3, [r7, #16]
 80072f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d3b7      	bcc.n	800726e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072fe:	2300      	movs	r3, #0
 8007300:	613b      	str	r3, [r7, #16]
 8007302:	e043      	b.n	800738c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	015a      	lsls	r2, r3, #5
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	4413      	add	r3, r2
 800730c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007316:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800731a:	d118      	bne.n	800734e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10a      	bne.n	8007338 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	015a      	lsls	r2, r3, #5
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	4413      	add	r3, r2
 800732a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800732e:	461a      	mov	r2, r3
 8007330:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007334:	6013      	str	r3, [r2, #0]
 8007336:	e013      	b.n	8007360 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	015a      	lsls	r2, r3, #5
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	4413      	add	r3, r2
 8007340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007344:	461a      	mov	r2, r3
 8007346:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800734a:	6013      	str	r3, [r2, #0]
 800734c:	e008      	b.n	8007360 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	015a      	lsls	r2, r3, #5
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	4413      	add	r3, r2
 8007356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800735a:	461a      	mov	r2, r3
 800735c:	2300      	movs	r3, #0
 800735e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	015a      	lsls	r2, r3, #5
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	4413      	add	r3, r2
 8007368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800736c:	461a      	mov	r2, r3
 800736e:	2300      	movs	r3, #0
 8007370:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	015a      	lsls	r2, r3, #5
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	4413      	add	r3, r2
 800737a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800737e:	461a      	mov	r2, r3
 8007380:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007384:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	3301      	adds	r3, #1
 800738a:	613b      	str	r3, [r7, #16]
 800738c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	429a      	cmp	r2, r3
 8007392:	d3b7      	bcc.n	8007304 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80073b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80073b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d105      	bne.n	80073c8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	f043 0210 	orr.w	r2, r3, #16
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	699a      	ldr	r2, [r3, #24]
 80073cc:	4b0f      	ldr	r3, [pc, #60]	; (800740c <USB_DevInit+0x2c4>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80073d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d005      	beq.n	80073e6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	699b      	ldr	r3, [r3, #24]
 80073de:	f043 0208 	orr.w	r2, r3, #8
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80073e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d107      	bne.n	80073fc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073f4:	f043 0304 	orr.w	r3, r3, #4
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80073fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3718      	adds	r7, #24
 8007402:	46bd      	mov	sp, r7
 8007404:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007408:	b004      	add	sp, #16
 800740a:	4770      	bx	lr
 800740c:	803c3800 	.word	0x803c3800

08007410 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800741a:	2300      	movs	r3, #0
 800741c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	019b      	lsls	r3, r3, #6
 8007422:	f043 0220 	orr.w	r2, r3, #32
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	3301      	adds	r3, #1
 800742e:	60fb      	str	r3, [r7, #12]
 8007430:	4a08      	ldr	r2, [pc, #32]	; (8007454 <USB_FlushTxFifo+0x44>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d901      	bls.n	800743a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e006      	b.n	8007448 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	f003 0320 	and.w	r3, r3, #32
 8007442:	2b20      	cmp	r3, #32
 8007444:	d0f1      	beq.n	800742a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	3714      	adds	r7, #20
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr
 8007454:	00030d40 	.word	0x00030d40

08007458 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007460:	2300      	movs	r3, #0
 8007462:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2210      	movs	r2, #16
 8007468:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	3301      	adds	r3, #1
 800746e:	60fb      	str	r3, [r7, #12]
 8007470:	4a08      	ldr	r2, [pc, #32]	; (8007494 <USB_FlushRxFifo+0x3c>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d901      	bls.n	800747a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8007476:	2303      	movs	r3, #3
 8007478:	e006      	b.n	8007488 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	f003 0310 	and.w	r3, r3, #16
 8007482:	2b10      	cmp	r3, #16
 8007484:	d0f1      	beq.n	800746a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3714      	adds	r7, #20
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr
 8007494:	00030d40 	.word	0x00030d40

08007498 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	460b      	mov	r3, r1
 80074a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	78fb      	ldrb	r3, [r7, #3]
 80074b2:	68f9      	ldr	r1, [r7, #12]
 80074b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074b8:	4313      	orrs	r3, r2
 80074ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3714      	adds	r7, #20
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b087      	sub	sp, #28
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f003 0306 	and.w	r3, r3, #6
 80074e2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d102      	bne.n	80074f0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80074ea:	2300      	movs	r3, #0
 80074ec:	75fb      	strb	r3, [r7, #23]
 80074ee:	e00a      	b.n	8007506 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d002      	beq.n	80074fc <USB_GetDevSpeed+0x32>
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2b06      	cmp	r3, #6
 80074fa:	d102      	bne.n	8007502 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80074fc:	2302      	movs	r3, #2
 80074fe:	75fb      	strb	r3, [r7, #23]
 8007500:	e001      	b.n	8007506 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007502:	230f      	movs	r3, #15
 8007504:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007506:	7dfb      	ldrb	r3, [r7, #23]
}
 8007508:	4618      	mov	r0, r3
 800750a:	371c      	adds	r7, #28
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	785b      	ldrb	r3, [r3, #1]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d13a      	bne.n	80075a6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007536:	69da      	ldr	r2, [r3, #28]
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	f003 030f 	and.w	r3, r3, #15
 8007540:	2101      	movs	r1, #1
 8007542:	fa01 f303 	lsl.w	r3, r1, r3
 8007546:	b29b      	uxth	r3, r3
 8007548:	68f9      	ldr	r1, [r7, #12]
 800754a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800754e:	4313      	orrs	r3, r2
 8007550:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	015a      	lsls	r2, r3, #5
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	4413      	add	r3, r2
 800755a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007564:	2b00      	cmp	r3, #0
 8007566:	d155      	bne.n	8007614 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	015a      	lsls	r2, r3, #5
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	4413      	add	r3, r2
 8007570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	78db      	ldrb	r3, [r3, #3]
 8007582:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007584:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	059b      	lsls	r3, r3, #22
 800758a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800758c:	4313      	orrs	r3, r2
 800758e:	68ba      	ldr	r2, [r7, #8]
 8007590:	0151      	lsls	r1, r2, #5
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	440a      	add	r2, r1
 8007596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800759a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800759e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075a2:	6013      	str	r3, [r2, #0]
 80075a4:	e036      	b.n	8007614 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ac:	69da      	ldr	r2, [r3, #28]
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	f003 030f 	and.w	r3, r3, #15
 80075b6:	2101      	movs	r1, #1
 80075b8:	fa01 f303 	lsl.w	r3, r1, r3
 80075bc:	041b      	lsls	r3, r3, #16
 80075be:	68f9      	ldr	r1, [r7, #12]
 80075c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075c4:	4313      	orrs	r3, r2
 80075c6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	015a      	lsls	r2, r3, #5
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	4413      	add	r3, r2
 80075d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d11a      	bne.n	8007614 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	015a      	lsls	r2, r3, #5
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	4413      	add	r3, r2
 80075e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	78db      	ldrb	r3, [r3, #3]
 80075f8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80075fa:	430b      	orrs	r3, r1
 80075fc:	4313      	orrs	r3, r2
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	0151      	lsls	r1, r2, #5
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	440a      	add	r2, r1
 8007606:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800760a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800760e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007612:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3714      	adds	r7, #20
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
	...

08007624 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	785b      	ldrb	r3, [r3, #1]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d161      	bne.n	8007704 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	015a      	lsls	r2, r3, #5
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	4413      	add	r3, r2
 8007648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007652:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007656:	d11f      	bne.n	8007698 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	015a      	lsls	r2, r3, #5
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	4413      	add	r3, r2
 8007660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	0151      	lsls	r1, r2, #5
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	440a      	add	r2, r1
 800766e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007672:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007676:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	015a      	lsls	r2, r3, #5
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	4413      	add	r3, r2
 8007680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68ba      	ldr	r2, [r7, #8]
 8007688:	0151      	lsls	r1, r2, #5
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	440a      	add	r2, r1
 800768e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007692:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007696:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800769e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	f003 030f 	and.w	r3, r3, #15
 80076a8:	2101      	movs	r1, #1
 80076aa:	fa01 f303 	lsl.w	r3, r1, r3
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	43db      	mvns	r3, r3
 80076b2:	68f9      	ldr	r1, [r7, #12]
 80076b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076b8:	4013      	ands	r3, r2
 80076ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076c2:	69da      	ldr	r2, [r3, #28]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	f003 030f 	and.w	r3, r3, #15
 80076cc:	2101      	movs	r1, #1
 80076ce:	fa01 f303 	lsl.w	r3, r1, r3
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	43db      	mvns	r3, r3
 80076d6:	68f9      	ldr	r1, [r7, #12]
 80076d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076dc:	4013      	ands	r3, r2
 80076de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	015a      	lsls	r2, r3, #5
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	4413      	add	r3, r2
 80076e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	0159      	lsls	r1, r3, #5
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	440b      	add	r3, r1
 80076f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076fa:	4619      	mov	r1, r3
 80076fc:	4b35      	ldr	r3, [pc, #212]	; (80077d4 <USB_DeactivateEndpoint+0x1b0>)
 80076fe:	4013      	ands	r3, r2
 8007700:	600b      	str	r3, [r1, #0]
 8007702:	e060      	b.n	80077c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	015a      	lsls	r2, r3, #5
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	4413      	add	r3, r2
 800770c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007716:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800771a:	d11f      	bne.n	800775c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	015a      	lsls	r2, r3, #5
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	4413      	add	r3, r2
 8007724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	0151      	lsls	r1, r2, #5
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	440a      	add	r2, r1
 8007732:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007736:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800773a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	015a      	lsls	r2, r3, #5
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	4413      	add	r3, r2
 8007744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	0151      	lsls	r1, r2, #5
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	440a      	add	r2, r1
 8007752:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007756:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800775a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007762:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	f003 030f 	and.w	r3, r3, #15
 800776c:	2101      	movs	r1, #1
 800776e:	fa01 f303 	lsl.w	r3, r1, r3
 8007772:	041b      	lsls	r3, r3, #16
 8007774:	43db      	mvns	r3, r3
 8007776:	68f9      	ldr	r1, [r7, #12]
 8007778:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800777c:	4013      	ands	r3, r2
 800777e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007786:	69da      	ldr	r2, [r3, #28]
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	f003 030f 	and.w	r3, r3, #15
 8007790:	2101      	movs	r1, #1
 8007792:	fa01 f303 	lsl.w	r3, r1, r3
 8007796:	041b      	lsls	r3, r3, #16
 8007798:	43db      	mvns	r3, r3
 800779a:	68f9      	ldr	r1, [r7, #12]
 800779c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077a0:	4013      	ands	r3, r2
 80077a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	015a      	lsls	r2, r3, #5
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	4413      	add	r3, r2
 80077ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	0159      	lsls	r1, r3, #5
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	440b      	add	r3, r1
 80077ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077be:	4619      	mov	r1, r3
 80077c0:	4b05      	ldr	r3, [pc, #20]	; (80077d8 <USB_DeactivateEndpoint+0x1b4>)
 80077c2:	4013      	ands	r3, r2
 80077c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3714      	adds	r7, #20
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr
 80077d4:	ec337800 	.word	0xec337800
 80077d8:	eff37800 	.word	0xeff37800

080077dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b08a      	sub	sp, #40	; 0x28
 80077e0:	af02      	add	r7, sp, #8
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	4613      	mov	r3, r2
 80077e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	785b      	ldrb	r3, [r3, #1]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	f040 815c 	bne.w	8007ab6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	695b      	ldr	r3, [r3, #20]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d132      	bne.n	800786c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	015a      	lsls	r2, r3, #5
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	4413      	add	r3, r2
 800780e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	69ba      	ldr	r2, [r7, #24]
 8007816:	0151      	lsls	r1, r2, #5
 8007818:	69fa      	ldr	r2, [r7, #28]
 800781a:	440a      	add	r2, r1
 800781c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007820:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007824:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007828:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	015a      	lsls	r2, r3, #5
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	4413      	add	r3, r2
 8007832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	69ba      	ldr	r2, [r7, #24]
 800783a:	0151      	lsls	r1, r2, #5
 800783c:	69fa      	ldr	r2, [r7, #28]
 800783e:	440a      	add	r2, r1
 8007840:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007844:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007848:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	015a      	lsls	r2, r3, #5
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	4413      	add	r3, r2
 8007852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	69ba      	ldr	r2, [r7, #24]
 800785a:	0151      	lsls	r1, r2, #5
 800785c:	69fa      	ldr	r2, [r7, #28]
 800785e:	440a      	add	r2, r1
 8007860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007864:	0cdb      	lsrs	r3, r3, #19
 8007866:	04db      	lsls	r3, r3, #19
 8007868:	6113      	str	r3, [r2, #16]
 800786a:	e074      	b.n	8007956 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	015a      	lsls	r2, r3, #5
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	4413      	add	r3, r2
 8007874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	69ba      	ldr	r2, [r7, #24]
 800787c:	0151      	lsls	r1, r2, #5
 800787e:	69fa      	ldr	r2, [r7, #28]
 8007880:	440a      	add	r2, r1
 8007882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007886:	0cdb      	lsrs	r3, r3, #19
 8007888:	04db      	lsls	r3, r3, #19
 800788a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	015a      	lsls	r2, r3, #5
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	4413      	add	r3, r2
 8007894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	69ba      	ldr	r2, [r7, #24]
 800789c:	0151      	lsls	r1, r2, #5
 800789e:	69fa      	ldr	r2, [r7, #28]
 80078a0:	440a      	add	r2, r1
 80078a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80078aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80078ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	015a      	lsls	r2, r3, #5
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	4413      	add	r3, r2
 80078b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078bc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	6959      	ldr	r1, [r3, #20]
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	440b      	add	r3, r1
 80078c8:	1e59      	subs	r1, r3, #1
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80078d2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80078d4:	4b9d      	ldr	r3, [pc, #628]	; (8007b4c <USB_EPStartXfer+0x370>)
 80078d6:	400b      	ands	r3, r1
 80078d8:	69b9      	ldr	r1, [r7, #24]
 80078da:	0148      	lsls	r0, r1, #5
 80078dc:	69f9      	ldr	r1, [r7, #28]
 80078de:	4401      	add	r1, r0
 80078e0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80078e4:	4313      	orrs	r3, r2
 80078e6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	015a      	lsls	r2, r3, #5
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	4413      	add	r3, r2
 80078f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078f4:	691a      	ldr	r2, [r3, #16]
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078fe:	69b9      	ldr	r1, [r7, #24]
 8007900:	0148      	lsls	r0, r1, #5
 8007902:	69f9      	ldr	r1, [r7, #28]
 8007904:	4401      	add	r1, r0
 8007906:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800790a:	4313      	orrs	r3, r2
 800790c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	78db      	ldrb	r3, [r3, #3]
 8007912:	2b01      	cmp	r3, #1
 8007914:	d11f      	bne.n	8007956 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	015a      	lsls	r2, r3, #5
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	4413      	add	r3, r2
 800791e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	69ba      	ldr	r2, [r7, #24]
 8007926:	0151      	lsls	r1, r2, #5
 8007928:	69fa      	ldr	r2, [r7, #28]
 800792a:	440a      	add	r2, r1
 800792c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007930:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007934:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	015a      	lsls	r2, r3, #5
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	4413      	add	r3, r2
 800793e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	69ba      	ldr	r2, [r7, #24]
 8007946:	0151      	lsls	r1, r2, #5
 8007948:	69fa      	ldr	r2, [r7, #28]
 800794a:	440a      	add	r2, r1
 800794c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007950:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007954:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007956:	79fb      	ldrb	r3, [r7, #7]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d14b      	bne.n	80079f4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d009      	beq.n	8007978 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	015a      	lsls	r2, r3, #5
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	4413      	add	r3, r2
 800796c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007970:	461a      	mov	r2, r3
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	78db      	ldrb	r3, [r3, #3]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d128      	bne.n	80079d2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800798c:	2b00      	cmp	r3, #0
 800798e:	d110      	bne.n	80079b2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	015a      	lsls	r2, r3, #5
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	4413      	add	r3, r2
 8007998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	69ba      	ldr	r2, [r7, #24]
 80079a0:	0151      	lsls	r1, r2, #5
 80079a2:	69fa      	ldr	r2, [r7, #28]
 80079a4:	440a      	add	r2, r1
 80079a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80079ae:	6013      	str	r3, [r2, #0]
 80079b0:	e00f      	b.n	80079d2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	015a      	lsls	r2, r3, #5
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	4413      	add	r3, r2
 80079ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	69ba      	ldr	r2, [r7, #24]
 80079c2:	0151      	lsls	r1, r2, #5
 80079c4:	69fa      	ldr	r2, [r7, #28]
 80079c6:	440a      	add	r2, r1
 80079c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	015a      	lsls	r2, r3, #5
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	4413      	add	r3, r2
 80079da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	69ba      	ldr	r2, [r7, #24]
 80079e2:	0151      	lsls	r1, r2, #5
 80079e4:	69fa      	ldr	r2, [r7, #28]
 80079e6:	440a      	add	r2, r1
 80079e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80079f0:	6013      	str	r3, [r2, #0]
 80079f2:	e12f      	b.n	8007c54 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	015a      	lsls	r2, r3, #5
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	4413      	add	r3, r2
 80079fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	69ba      	ldr	r2, [r7, #24]
 8007a04:	0151      	lsls	r1, r2, #5
 8007a06:	69fa      	ldr	r2, [r7, #28]
 8007a08:	440a      	add	r2, r1
 8007a0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a12:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	78db      	ldrb	r3, [r3, #3]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d015      	beq.n	8007a48 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	695b      	ldr	r3, [r3, #20]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 8117 	beq.w	8007c54 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	f003 030f 	and.w	r3, r3, #15
 8007a36:	2101      	movs	r1, #1
 8007a38:	fa01 f303 	lsl.w	r3, r1, r3
 8007a3c:	69f9      	ldr	r1, [r7, #28]
 8007a3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a42:	4313      	orrs	r3, r2
 8007a44:	634b      	str	r3, [r1, #52]	; 0x34
 8007a46:	e105      	b.n	8007c54 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d110      	bne.n	8007a7a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	015a      	lsls	r2, r3, #5
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	4413      	add	r3, r2
 8007a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	69ba      	ldr	r2, [r7, #24]
 8007a68:	0151      	lsls	r1, r2, #5
 8007a6a:	69fa      	ldr	r2, [r7, #28]
 8007a6c:	440a      	add	r2, r1
 8007a6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a76:	6013      	str	r3, [r2, #0]
 8007a78:	e00f      	b.n	8007a9a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	015a      	lsls	r2, r3, #5
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	4413      	add	r3, r2
 8007a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	69ba      	ldr	r2, [r7, #24]
 8007a8a:	0151      	lsls	r1, r2, #5
 8007a8c:	69fa      	ldr	r2, [r7, #28]
 8007a8e:	440a      	add	r2, r1
 8007a90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a98:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	68d9      	ldr	r1, [r3, #12]
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	781a      	ldrb	r2, [r3, #0]
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	b298      	uxth	r0, r3
 8007aa8:	79fb      	ldrb	r3, [r7, #7]
 8007aaa:	9300      	str	r3, [sp, #0]
 8007aac:	4603      	mov	r3, r0
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f000 fa2b 	bl	8007f0a <USB_WritePacket>
 8007ab4:	e0ce      	b.n	8007c54 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	015a      	lsls	r2, r3, #5
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	4413      	add	r3, r2
 8007abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	69ba      	ldr	r2, [r7, #24]
 8007ac6:	0151      	lsls	r1, r2, #5
 8007ac8:	69fa      	ldr	r2, [r7, #28]
 8007aca:	440a      	add	r2, r1
 8007acc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ad0:	0cdb      	lsrs	r3, r3, #19
 8007ad2:	04db      	lsls	r3, r3, #19
 8007ad4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	015a      	lsls	r2, r3, #5
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	4413      	add	r3, r2
 8007ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	69ba      	ldr	r2, [r7, #24]
 8007ae6:	0151      	lsls	r1, r2, #5
 8007ae8:	69fa      	ldr	r2, [r7, #28]
 8007aea:	440a      	add	r2, r1
 8007aec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007af0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007af4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007af8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	695b      	ldr	r3, [r3, #20]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d126      	bne.n	8007b50 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	015a      	lsls	r2, r3, #5
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	4413      	add	r3, r2
 8007b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b0e:	691a      	ldr	r2, [r3, #16]
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b18:	69b9      	ldr	r1, [r7, #24]
 8007b1a:	0148      	lsls	r0, r1, #5
 8007b1c:	69f9      	ldr	r1, [r7, #28]
 8007b1e:	4401      	add	r1, r0
 8007b20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b24:	4313      	orrs	r3, r2
 8007b26:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	015a      	lsls	r2, r3, #5
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	4413      	add	r3, r2
 8007b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	69ba      	ldr	r2, [r7, #24]
 8007b38:	0151      	lsls	r1, r2, #5
 8007b3a:	69fa      	ldr	r2, [r7, #28]
 8007b3c:	440a      	add	r2, r1
 8007b3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b46:	6113      	str	r3, [r2, #16]
 8007b48:	e036      	b.n	8007bb8 <USB_EPStartXfer+0x3dc>
 8007b4a:	bf00      	nop
 8007b4c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	695a      	ldr	r2, [r3, #20]
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	4413      	add	r3, r2
 8007b5a:	1e5a      	subs	r2, r3, #1
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b64:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	015a      	lsls	r2, r3, #5
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b72:	691a      	ldr	r2, [r3, #16]
 8007b74:	8afb      	ldrh	r3, [r7, #22]
 8007b76:	04d9      	lsls	r1, r3, #19
 8007b78:	4b39      	ldr	r3, [pc, #228]	; (8007c60 <USB_EPStartXfer+0x484>)
 8007b7a:	400b      	ands	r3, r1
 8007b7c:	69b9      	ldr	r1, [r7, #24]
 8007b7e:	0148      	lsls	r0, r1, #5
 8007b80:	69f9      	ldr	r1, [r7, #28]
 8007b82:	4401      	add	r1, r0
 8007b84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	015a      	lsls	r2, r3, #5
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	4413      	add	r3, r2
 8007b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b98:	691a      	ldr	r2, [r3, #16]
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	8af9      	ldrh	r1, [r7, #22]
 8007ba0:	fb01 f303 	mul.w	r3, r1, r3
 8007ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ba8:	69b9      	ldr	r1, [r7, #24]
 8007baa:	0148      	lsls	r0, r1, #5
 8007bac:	69f9      	ldr	r1, [r7, #28]
 8007bae:	4401      	add	r1, r0
 8007bb0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007bb8:	79fb      	ldrb	r3, [r7, #7]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d10d      	bne.n	8007bda <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d009      	beq.n	8007bda <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	68d9      	ldr	r1, [r3, #12]
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	015a      	lsls	r2, r3, #5
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bd6:	460a      	mov	r2, r1
 8007bd8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	78db      	ldrb	r3, [r3, #3]
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d128      	bne.n	8007c34 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d110      	bne.n	8007c14 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	015a      	lsls	r2, r3, #5
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	69ba      	ldr	r2, [r7, #24]
 8007c02:	0151      	lsls	r1, r2, #5
 8007c04:	69fa      	ldr	r2, [r7, #28]
 8007c06:	440a      	add	r2, r1
 8007c08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c10:	6013      	str	r3, [r2, #0]
 8007c12:	e00f      	b.n	8007c34 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	015a      	lsls	r2, r3, #5
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	0151      	lsls	r1, r2, #5
 8007c26:	69fa      	ldr	r2, [r7, #28]
 8007c28:	440a      	add	r2, r1
 8007c2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c32:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	015a      	lsls	r2, r3, #5
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	69ba      	ldr	r2, [r7, #24]
 8007c44:	0151      	lsls	r1, r2, #5
 8007c46:	69fa      	ldr	r2, [r7, #28]
 8007c48:	440a      	add	r2, r1
 8007c4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3720      	adds	r7, #32
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	1ff80000 	.word	0x1ff80000

08007c64 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b087      	sub	sp, #28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	785b      	ldrb	r3, [r3, #1]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	f040 80cd 	bne.w	8007e20 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d132      	bne.n	8007cf4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	015a      	lsls	r2, r3, #5
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	4413      	add	r3, r2
 8007c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	0151      	lsls	r1, r2, #5
 8007ca0:	697a      	ldr	r2, [r7, #20]
 8007ca2:	440a      	add	r2, r1
 8007ca4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ca8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007cac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007cb0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	015a      	lsls	r2, r3, #5
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	4413      	add	r3, r2
 8007cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	693a      	ldr	r2, [r7, #16]
 8007cc2:	0151      	lsls	r1, r2, #5
 8007cc4:	697a      	ldr	r2, [r7, #20]
 8007cc6:	440a      	add	r2, r1
 8007cc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ccc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cd0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	015a      	lsls	r2, r3, #5
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	4413      	add	r3, r2
 8007cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	693a      	ldr	r2, [r7, #16]
 8007ce2:	0151      	lsls	r1, r2, #5
 8007ce4:	697a      	ldr	r2, [r7, #20]
 8007ce6:	440a      	add	r2, r1
 8007ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cec:	0cdb      	lsrs	r3, r3, #19
 8007cee:	04db      	lsls	r3, r3, #19
 8007cf0:	6113      	str	r3, [r2, #16]
 8007cf2:	e04e      	b.n	8007d92 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	015a      	lsls	r2, r3, #5
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	693a      	ldr	r2, [r7, #16]
 8007d04:	0151      	lsls	r1, r2, #5
 8007d06:	697a      	ldr	r2, [r7, #20]
 8007d08:	440a      	add	r2, r1
 8007d0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d0e:	0cdb      	lsrs	r3, r3, #19
 8007d10:	04db      	lsls	r3, r3, #19
 8007d12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	015a      	lsls	r2, r3, #5
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	0151      	lsls	r1, r2, #5
 8007d26:	697a      	ldr	r2, [r7, #20]
 8007d28:	440a      	add	r2, r1
 8007d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d2e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d32:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d36:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	695a      	ldr	r2, [r3, #20]
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d903      	bls.n	8007d4c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	689a      	ldr	r2, [r3, #8]
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	015a      	lsls	r2, r3, #5
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	4413      	add	r3, r2
 8007d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	693a      	ldr	r2, [r7, #16]
 8007d5c:	0151      	lsls	r1, r2, #5
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	440a      	add	r2, r1
 8007d62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	015a      	lsls	r2, r3, #5
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	4413      	add	r3, r2
 8007d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d78:	691a      	ldr	r2, [r3, #16]
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	695b      	ldr	r3, [r3, #20]
 8007d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d82:	6939      	ldr	r1, [r7, #16]
 8007d84:	0148      	lsls	r0, r1, #5
 8007d86:	6979      	ldr	r1, [r7, #20]
 8007d88:	4401      	add	r1, r0
 8007d8a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007d92:	79fb      	ldrb	r3, [r7, #7]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d11e      	bne.n	8007dd6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d009      	beq.n	8007db4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	015a      	lsls	r2, r3, #5
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	4413      	add	r3, r2
 8007da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dac:	461a      	mov	r2, r3
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	015a      	lsls	r2, r3, #5
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	4413      	add	r3, r2
 8007dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	0151      	lsls	r1, r2, #5
 8007dc6:	697a      	ldr	r2, [r7, #20]
 8007dc8:	440a      	add	r2, r1
 8007dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007dd2:	6013      	str	r3, [r2, #0]
 8007dd4:	e092      	b.n	8007efc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	015a      	lsls	r2, r3, #5
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	4413      	add	r3, r2
 8007dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	0151      	lsls	r1, r2, #5
 8007de8:	697a      	ldr	r2, [r7, #20]
 8007dea:	440a      	add	r2, r1
 8007dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007df0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007df4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	695b      	ldr	r3, [r3, #20]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d07e      	beq.n	8007efc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	f003 030f 	and.w	r3, r3, #15
 8007e0e:	2101      	movs	r1, #1
 8007e10:	fa01 f303 	lsl.w	r3, r1, r3
 8007e14:	6979      	ldr	r1, [r7, #20]
 8007e16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	634b      	str	r3, [r1, #52]	; 0x34
 8007e1e:	e06d      	b.n	8007efc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	015a      	lsls	r2, r3, #5
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	4413      	add	r3, r2
 8007e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	693a      	ldr	r2, [r7, #16]
 8007e30:	0151      	lsls	r1, r2, #5
 8007e32:	697a      	ldr	r2, [r7, #20]
 8007e34:	440a      	add	r2, r1
 8007e36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e3a:	0cdb      	lsrs	r3, r3, #19
 8007e3c:	04db      	lsls	r3, r3, #19
 8007e3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	015a      	lsls	r2, r3, #5
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	4413      	add	r3, r2
 8007e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	693a      	ldr	r2, [r7, #16]
 8007e50:	0151      	lsls	r1, r2, #5
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	440a      	add	r2, r1
 8007e56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e62:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	695b      	ldr	r3, [r3, #20]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d003      	beq.n	8007e74 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	689a      	ldr	r2, [r3, #8]
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	015a      	lsls	r2, r3, #5
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	693a      	ldr	r2, [r7, #16]
 8007e84:	0151      	lsls	r1, r2, #5
 8007e86:	697a      	ldr	r2, [r7, #20]
 8007e88:	440a      	add	r2, r1
 8007e8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e92:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	015a      	lsls	r2, r3, #5
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea0:	691a      	ldr	r2, [r3, #16]
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007eaa:	6939      	ldr	r1, [r7, #16]
 8007eac:	0148      	lsls	r0, r1, #5
 8007eae:	6979      	ldr	r1, [r7, #20]
 8007eb0:	4401      	add	r1, r0
 8007eb2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007eba:	79fb      	ldrb	r3, [r7, #7]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d10d      	bne.n	8007edc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d009      	beq.n	8007edc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	68d9      	ldr	r1, [r3, #12]
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	015a      	lsls	r2, r3, #5
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed8:	460a      	mov	r2, r1
 8007eda:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	015a      	lsls	r2, r3, #5
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	693a      	ldr	r2, [r7, #16]
 8007eec:	0151      	lsls	r1, r2, #5
 8007eee:	697a      	ldr	r2, [r7, #20]
 8007ef0:	440a      	add	r2, r1
 8007ef2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ef6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007efa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	371c      	adds	r7, #28
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	b089      	sub	sp, #36	; 0x24
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	60f8      	str	r0, [r7, #12]
 8007f12:	60b9      	str	r1, [r7, #8]
 8007f14:	4611      	mov	r1, r2
 8007f16:	461a      	mov	r2, r3
 8007f18:	460b      	mov	r3, r1
 8007f1a:	71fb      	strb	r3, [r7, #7]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007f28:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d123      	bne.n	8007f78 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007f30:	88bb      	ldrh	r3, [r7, #4]
 8007f32:	3303      	adds	r3, #3
 8007f34:	089b      	lsrs	r3, r3, #2
 8007f36:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007f38:	2300      	movs	r3, #0
 8007f3a:	61bb      	str	r3, [r7, #24]
 8007f3c:	e018      	b.n	8007f70 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007f3e:	79fb      	ldrb	r3, [r7, #7]
 8007f40:	031a      	lsls	r2, r3, #12
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	4413      	add	r3, r2
 8007f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	3301      	adds	r3, #1
 8007f56:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	3301      	adds	r3, #1
 8007f62:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	3301      	adds	r3, #1
 8007f68:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	61bb      	str	r3, [r7, #24]
 8007f70:	69ba      	ldr	r2, [r7, #24]
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d3e2      	bcc.n	8007f3e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3724      	adds	r7, #36	; 0x24
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr

08007f86 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007f86:	b480      	push	{r7}
 8007f88:	b08b      	sub	sp, #44	; 0x2c
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	60f8      	str	r0, [r7, #12]
 8007f8e:	60b9      	str	r1, [r7, #8]
 8007f90:	4613      	mov	r3, r2
 8007f92:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007f9c:	88fb      	ldrh	r3, [r7, #6]
 8007f9e:	089b      	lsrs	r3, r3, #2
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007fa4:	88fb      	ldrh	r3, [r7, #6]
 8007fa6:	f003 0303 	and.w	r3, r3, #3
 8007faa:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007fac:	2300      	movs	r3, #0
 8007fae:	623b      	str	r3, [r7, #32]
 8007fb0:	e014      	b.n	8007fdc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbc:	601a      	str	r2, [r3, #0]
    pDest++;
 8007fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fcc:	3301      	adds	r3, #1
 8007fce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007fd6:	6a3b      	ldr	r3, [r7, #32]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	623b      	str	r3, [r7, #32]
 8007fdc:	6a3a      	ldr	r2, [r7, #32]
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d3e6      	bcc.n	8007fb2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007fe4:	8bfb      	ldrh	r3, [r7, #30]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d01e      	beq.n	8008028 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007fea:	2300      	movs	r3, #0
 8007fec:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	f107 0310 	add.w	r3, r7, #16
 8007ffa:	6812      	ldr	r2, [r2, #0]
 8007ffc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007ffe:	693a      	ldr	r2, [r7, #16]
 8008000:	6a3b      	ldr	r3, [r7, #32]
 8008002:	b2db      	uxtb	r3, r3
 8008004:	00db      	lsls	r3, r3, #3
 8008006:	fa22 f303 	lsr.w	r3, r2, r3
 800800a:	b2da      	uxtb	r2, r3
 800800c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800e:	701a      	strb	r2, [r3, #0]
      i++;
 8008010:	6a3b      	ldr	r3, [r7, #32]
 8008012:	3301      	adds	r3, #1
 8008014:	623b      	str	r3, [r7, #32]
      pDest++;
 8008016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008018:	3301      	adds	r3, #1
 800801a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800801c:	8bfb      	ldrh	r3, [r7, #30]
 800801e:	3b01      	subs	r3, #1
 8008020:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008022:	8bfb      	ldrh	r3, [r7, #30]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1ea      	bne.n	8007ffe <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800802a:	4618      	mov	r0, r3
 800802c:	372c      	adds	r7, #44	; 0x2c
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008036:	b480      	push	{r7}
 8008038:	b085      	sub	sp, #20
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	785b      	ldrb	r3, [r3, #1]
 800804e:	2b01      	cmp	r3, #1
 8008050:	d12c      	bne.n	80080ac <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	015a      	lsls	r2, r3, #5
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	4413      	add	r3, r2
 800805a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	db12      	blt.n	800808a <USB_EPSetStall+0x54>
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00f      	beq.n	800808a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	015a      	lsls	r2, r3, #5
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	4413      	add	r3, r2
 8008072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	68ba      	ldr	r2, [r7, #8]
 800807a:	0151      	lsls	r1, r2, #5
 800807c:	68fa      	ldr	r2, [r7, #12]
 800807e:	440a      	add	r2, r1
 8008080:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008084:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008088:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	015a      	lsls	r2, r3, #5
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	4413      	add	r3, r2
 8008092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68ba      	ldr	r2, [r7, #8]
 800809a:	0151      	lsls	r1, r2, #5
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	440a      	add	r2, r1
 80080a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80080a8:	6013      	str	r3, [r2, #0]
 80080aa:	e02b      	b.n	8008104 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	015a      	lsls	r2, r3, #5
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	4413      	add	r3, r2
 80080b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	db12      	blt.n	80080e4 <USB_EPSetStall+0xae>
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d00f      	beq.n	80080e4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	015a      	lsls	r2, r3, #5
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	4413      	add	r3, r2
 80080cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68ba      	ldr	r2, [r7, #8]
 80080d4:	0151      	lsls	r1, r2, #5
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	440a      	add	r2, r1
 80080da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80080e2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	015a      	lsls	r2, r3, #5
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	4413      	add	r3, r2
 80080ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68ba      	ldr	r2, [r7, #8]
 80080f4:	0151      	lsls	r1, r2, #5
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	440a      	add	r2, r1
 80080fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008102:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3714      	adds	r7, #20
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008112:	b480      	push	{r7}
 8008114:	b085      	sub	sp, #20
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
 800811a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	785b      	ldrb	r3, [r3, #1]
 800812a:	2b01      	cmp	r3, #1
 800812c:	d128      	bne.n	8008180 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	015a      	lsls	r2, r3, #5
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	4413      	add	r3, r2
 8008136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	0151      	lsls	r1, r2, #5
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	440a      	add	r2, r1
 8008144:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008148:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800814c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	78db      	ldrb	r3, [r3, #3]
 8008152:	2b03      	cmp	r3, #3
 8008154:	d003      	beq.n	800815e <USB_EPClearStall+0x4c>
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	78db      	ldrb	r3, [r3, #3]
 800815a:	2b02      	cmp	r3, #2
 800815c:	d138      	bne.n	80081d0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	015a      	lsls	r2, r3, #5
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	4413      	add	r3, r2
 8008166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	0151      	lsls	r1, r2, #5
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	440a      	add	r2, r1
 8008174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800817c:	6013      	str	r3, [r2, #0]
 800817e:	e027      	b.n	80081d0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	015a      	lsls	r2, r3, #5
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	4413      	add	r3, r2
 8008188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68ba      	ldr	r2, [r7, #8]
 8008190:	0151      	lsls	r1, r2, #5
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	440a      	add	r2, r1
 8008196:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800819a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800819e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	78db      	ldrb	r3, [r3, #3]
 80081a4:	2b03      	cmp	r3, #3
 80081a6:	d003      	beq.n	80081b0 <USB_EPClearStall+0x9e>
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	78db      	ldrb	r3, [r3, #3]
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d10f      	bne.n	80081d0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	015a      	lsls	r2, r3, #5
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	4413      	add	r3, r2
 80081b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	68ba      	ldr	r2, [r7, #8]
 80081c0:	0151      	lsls	r1, r2, #5
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	440a      	add	r2, r1
 80081c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081ce:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3714      	adds	r7, #20
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr

080081de <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80081de:	b480      	push	{r7}
 80081e0:	b085      	sub	sp, #20
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
 80081e6:	460b      	mov	r3, r1
 80081e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081fc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008200:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	78fb      	ldrb	r3, [r7, #3]
 800820c:	011b      	lsls	r3, r3, #4
 800820e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008212:	68f9      	ldr	r1, [r7, #12]
 8008214:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008218:	4313      	orrs	r3, r2
 800821a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3714      	adds	r7, #20
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr

0800822a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800822a:	b480      	push	{r7}
 800822c:	b085      	sub	sp, #20
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68fa      	ldr	r2, [r7, #12]
 8008240:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008244:	f023 0303 	bic.w	r3, r3, #3
 8008248:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	68fa      	ldr	r2, [r7, #12]
 8008254:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008258:	f023 0302 	bic.w	r3, r3, #2
 800825c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3714      	adds	r7, #20
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008286:	f023 0303 	bic.w	r3, r3, #3
 800828a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800829a:	f043 0302 	orr.w	r3, r3, #2
 800829e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3714      	adds	r7, #20
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr

080082ae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80082ae:	b480      	push	{r7}
 80082b0:	b085      	sub	sp, #20
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	695b      	ldr	r3, [r3, #20]
 80082ba:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	4013      	ands	r3, r2
 80082c4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80082c6:	68fb      	ldr	r3, [r7, #12]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3714      	adds	r7, #20
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082f0:	69db      	ldr	r3, [r3, #28]
 80082f2:	68ba      	ldr	r2, [r7, #8]
 80082f4:	4013      	ands	r3, r2
 80082f6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	0c1b      	lsrs	r3, r3, #16
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3714      	adds	r7, #20
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800831a:	699b      	ldr	r3, [r3, #24]
 800831c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008324:	69db      	ldr	r3, [r3, #28]
 8008326:	68ba      	ldr	r2, [r7, #8]
 8008328:	4013      	ands	r3, r2
 800832a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	b29b      	uxth	r3, r3
}
 8008330:	4618      	mov	r0, r3
 8008332:	3714      	adds	r7, #20
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	460b      	mov	r3, r1
 8008346:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800834c:	78fb      	ldrb	r3, [r7, #3]
 800834e:	015a      	lsls	r2, r3, #5
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	4413      	add	r3, r2
 8008354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008362:	695b      	ldr	r3, [r3, #20]
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	4013      	ands	r3, r2
 8008368:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800836a:	68bb      	ldr	r3, [r7, #8]
}
 800836c:	4618      	mov	r0, r3
 800836e:	3714      	adds	r7, #20
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008378:	b480      	push	{r7}
 800837a:	b087      	sub	sp, #28
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	460b      	mov	r3, r1
 8008382:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800839a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800839c:	78fb      	ldrb	r3, [r7, #3]
 800839e:	f003 030f 	and.w	r3, r3, #15
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	fa22 f303 	lsr.w	r3, r2, r3
 80083a8:	01db      	lsls	r3, r3, #7
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	693a      	ldr	r2, [r7, #16]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80083b2:	78fb      	ldrb	r3, [r7, #3]
 80083b4:	015a      	lsls	r2, r3, #5
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	4413      	add	r3, r2
 80083ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	693a      	ldr	r2, [r7, #16]
 80083c2:	4013      	ands	r3, r2
 80083c4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80083c6:	68bb      	ldr	r3, [r7, #8]
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	371c      	adds	r7, #28
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	695b      	ldr	r3, [r3, #20]
 80083e0:	f003 0301 	and.w	r3, r3, #1
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800840a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800840e:	f023 0307 	bic.w	r3, r3, #7
 8008412:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008426:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3714      	adds	r7, #20
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
	...

08008438 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008438:	b480      	push	{r7}
 800843a:	b087      	sub	sp, #28
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	460b      	mov	r3, r1
 8008442:	607a      	str	r2, [r7, #4]
 8008444:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	333c      	adds	r3, #60	; 0x3c
 800844e:	3304      	adds	r3, #4
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	4a26      	ldr	r2, [pc, #152]	; (80084f0 <USB_EP0_OutStart+0xb8>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d90a      	bls.n	8008472 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008468:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800846c:	d101      	bne.n	8008472 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800846e:	2300      	movs	r3, #0
 8008470:	e037      	b.n	80084e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008478:	461a      	mov	r2, r3
 800847a:	2300      	movs	r3, #0
 800847c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	697a      	ldr	r2, [r7, #20]
 8008488:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800848c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008490:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	697a      	ldr	r2, [r7, #20]
 800849c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084a0:	f043 0318 	orr.w	r3, r3, #24
 80084a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	697a      	ldr	r2, [r7, #20]
 80084b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084b4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80084b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80084ba:	7afb      	ldrb	r3, [r7, #11]
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d10f      	bne.n	80084e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c6:	461a      	mov	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	697a      	ldr	r2, [r7, #20]
 80084d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084da:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80084de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	371c      	adds	r7, #28
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	4f54300a 	.word	0x4f54300a

080084f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b085      	sub	sp, #20
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80084fc:	2300      	movs	r3, #0
 80084fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	3301      	adds	r3, #1
 8008504:	60fb      	str	r3, [r7, #12]
 8008506:	4a13      	ldr	r2, [pc, #76]	; (8008554 <USB_CoreReset+0x60>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d901      	bls.n	8008510 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800850c:	2303      	movs	r3, #3
 800850e:	e01a      	b.n	8008546 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	2b00      	cmp	r3, #0
 8008516:	daf3      	bge.n	8008500 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008518:	2300      	movs	r3, #0
 800851a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	f043 0201 	orr.w	r2, r3, #1
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	3301      	adds	r3, #1
 800852c:	60fb      	str	r3, [r7, #12]
 800852e:	4a09      	ldr	r2, [pc, #36]	; (8008554 <USB_CoreReset+0x60>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d901      	bls.n	8008538 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008534:	2303      	movs	r3, #3
 8008536:	e006      	b.n	8008546 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	f003 0301 	and.w	r3, r3, #1
 8008540:	2b01      	cmp	r3, #1
 8008542:	d0f1      	beq.n	8008528 <USB_CoreReset+0x34>

  return HAL_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3714      	adds	r7, #20
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	00030d40 	.word	0x00030d40

08008558 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	460b      	mov	r3, r1
 8008562:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008564:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008568:	f002 fc9a 	bl	800aea0 <USBD_static_malloc>
 800856c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d105      	bne.n	8008580 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800857c:	2302      	movs	r3, #2
 800857e:	e066      	b.n	800864e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	68fa      	ldr	r2, [r7, #12]
 8008584:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	7c1b      	ldrb	r3, [r3, #16]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d119      	bne.n	80085c4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008590:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008594:	2202      	movs	r2, #2
 8008596:	2181      	movs	r1, #129	; 0x81
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f002 fb5e 	bl	800ac5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2201      	movs	r2, #1
 80085a2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80085a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085a8:	2202      	movs	r2, #2
 80085aa:	2101      	movs	r1, #1
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f002 fb54 	bl	800ac5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2210      	movs	r2, #16
 80085be:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80085c2:	e016      	b.n	80085f2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80085c4:	2340      	movs	r3, #64	; 0x40
 80085c6:	2202      	movs	r2, #2
 80085c8:	2181      	movs	r1, #129	; 0x81
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f002 fb45 	bl	800ac5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80085d6:	2340      	movs	r3, #64	; 0x40
 80085d8:	2202      	movs	r2, #2
 80085da:	2101      	movs	r1, #1
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f002 fb3c 	bl	800ac5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2201      	movs	r2, #1
 80085e6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2210      	movs	r2, #16
 80085ee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80085f2:	2308      	movs	r3, #8
 80085f4:	2203      	movs	r2, #3
 80085f6:	2182      	movs	r1, #130	; 0x82
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f002 fb2e 	bl	800ac5a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2201      	movs	r2, #1
 8008602:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2200      	movs	r2, #0
 8008614:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2200      	movs	r2, #0
 800861c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	7c1b      	ldrb	r3, [r3, #16]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d109      	bne.n	800863c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800862e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008632:	2101      	movs	r1, #1
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f002 fbff 	bl	800ae38 <USBD_LL_PrepareReceive>
 800863a:	e007      	b.n	800864c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008642:	2340      	movs	r3, #64	; 0x40
 8008644:	2101      	movs	r1, #1
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f002 fbf6 	bl	800ae38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800864c:	2300      	movs	r3, #0
}
 800864e:	4618      	mov	r0, r3
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b082      	sub	sp, #8
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
 800865e:	460b      	mov	r3, r1
 8008660:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008662:	2181      	movs	r1, #129	; 0x81
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f002 fb1e 	bl	800aca6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008670:	2101      	movs	r1, #1
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f002 fb17 	bl	800aca6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008680:	2182      	movs	r1, #130	; 0x82
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f002 fb0f 	bl	800aca6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d00e      	beq.n	80086c0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086b2:	4618      	mov	r0, r3
 80086b4:	f002 fc02 	bl	800aebc <USBD_static_free>
    pdev->pClassData = NULL;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
	...

080086cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b086      	sub	sp, #24
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086dc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80086de:	2300      	movs	r3, #0
 80086e0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80086e2:	2300      	movs	r3, #0
 80086e4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80086e6:	2300      	movs	r3, #0
 80086e8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d101      	bne.n	80086f4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80086f0:	2303      	movs	r3, #3
 80086f2:	e0af      	b.n	8008854 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d03f      	beq.n	8008780 <USBD_CDC_Setup+0xb4>
 8008700:	2b20      	cmp	r3, #32
 8008702:	f040 809f 	bne.w	8008844 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	88db      	ldrh	r3, [r3, #6]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d02e      	beq.n	800876c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	b25b      	sxtb	r3, r3
 8008714:	2b00      	cmp	r3, #0
 8008716:	da16      	bge.n	8008746 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	683a      	ldr	r2, [r7, #0]
 8008722:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008724:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008726:	683a      	ldr	r2, [r7, #0]
 8008728:	88d2      	ldrh	r2, [r2, #6]
 800872a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	88db      	ldrh	r3, [r3, #6]
 8008730:	2b07      	cmp	r3, #7
 8008732:	bf28      	it	cs
 8008734:	2307      	movcs	r3, #7
 8008736:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	89fa      	ldrh	r2, [r7, #14]
 800873c:	4619      	mov	r1, r3
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f001 fae9 	bl	8009d16 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008744:	e085      	b.n	8008852 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	785a      	ldrb	r2, [r3, #1]
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	88db      	ldrh	r3, [r3, #6]
 8008754:	b2da      	uxtb	r2, r3
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800875c:	6939      	ldr	r1, [r7, #16]
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	88db      	ldrh	r3, [r3, #6]
 8008762:	461a      	mov	r2, r3
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f001 fb02 	bl	8009d6e <USBD_CtlPrepareRx>
      break;
 800876a:	e072      	b.n	8008852 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	683a      	ldr	r2, [r7, #0]
 8008776:	7850      	ldrb	r0, [r2, #1]
 8008778:	2200      	movs	r2, #0
 800877a:	6839      	ldr	r1, [r7, #0]
 800877c:	4798      	blx	r3
      break;
 800877e:	e068      	b.n	8008852 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	785b      	ldrb	r3, [r3, #1]
 8008784:	2b0b      	cmp	r3, #11
 8008786:	d852      	bhi.n	800882e <USBD_CDC_Setup+0x162>
 8008788:	a201      	add	r2, pc, #4	; (adr r2, 8008790 <USBD_CDC_Setup+0xc4>)
 800878a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878e:	bf00      	nop
 8008790:	080087c1 	.word	0x080087c1
 8008794:	0800883d 	.word	0x0800883d
 8008798:	0800882f 	.word	0x0800882f
 800879c:	0800882f 	.word	0x0800882f
 80087a0:	0800882f 	.word	0x0800882f
 80087a4:	0800882f 	.word	0x0800882f
 80087a8:	0800882f 	.word	0x0800882f
 80087ac:	0800882f 	.word	0x0800882f
 80087b0:	0800882f 	.word	0x0800882f
 80087b4:	0800882f 	.word	0x0800882f
 80087b8:	080087eb 	.word	0x080087eb
 80087bc:	08008815 	.word	0x08008815
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	2b03      	cmp	r3, #3
 80087ca:	d107      	bne.n	80087dc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80087cc:	f107 030a 	add.w	r3, r7, #10
 80087d0:	2202      	movs	r2, #2
 80087d2:	4619      	mov	r1, r3
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f001 fa9e 	bl	8009d16 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80087da:	e032      	b.n	8008842 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80087dc:	6839      	ldr	r1, [r7, #0]
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f001 fa28 	bl	8009c34 <USBD_CtlError>
            ret = USBD_FAIL;
 80087e4:	2303      	movs	r3, #3
 80087e6:	75fb      	strb	r3, [r7, #23]
          break;
 80087e8:	e02b      	b.n	8008842 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	2b03      	cmp	r3, #3
 80087f4:	d107      	bne.n	8008806 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80087f6:	f107 030d 	add.w	r3, r7, #13
 80087fa:	2201      	movs	r2, #1
 80087fc:	4619      	mov	r1, r3
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f001 fa89 	bl	8009d16 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008804:	e01d      	b.n	8008842 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008806:	6839      	ldr	r1, [r7, #0]
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f001 fa13 	bl	8009c34 <USBD_CtlError>
            ret = USBD_FAIL;
 800880e:	2303      	movs	r3, #3
 8008810:	75fb      	strb	r3, [r7, #23]
          break;
 8008812:	e016      	b.n	8008842 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800881a:	b2db      	uxtb	r3, r3
 800881c:	2b03      	cmp	r3, #3
 800881e:	d00f      	beq.n	8008840 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008820:	6839      	ldr	r1, [r7, #0]
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f001 fa06 	bl	8009c34 <USBD_CtlError>
            ret = USBD_FAIL;
 8008828:	2303      	movs	r3, #3
 800882a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800882c:	e008      	b.n	8008840 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800882e:	6839      	ldr	r1, [r7, #0]
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f001 f9ff 	bl	8009c34 <USBD_CtlError>
          ret = USBD_FAIL;
 8008836:	2303      	movs	r3, #3
 8008838:	75fb      	strb	r3, [r7, #23]
          break;
 800883a:	e002      	b.n	8008842 <USBD_CDC_Setup+0x176>
          break;
 800883c:	bf00      	nop
 800883e:	e008      	b.n	8008852 <USBD_CDC_Setup+0x186>
          break;
 8008840:	bf00      	nop
      }
      break;
 8008842:	e006      	b.n	8008852 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008844:	6839      	ldr	r1, [r7, #0]
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f001 f9f4 	bl	8009c34 <USBD_CtlError>
      ret = USBD_FAIL;
 800884c:	2303      	movs	r3, #3
 800884e:	75fb      	strb	r3, [r7, #23]
      break;
 8008850:	bf00      	nop
  }

  return (uint8_t)ret;
 8008852:	7dfb      	ldrb	r3, [r7, #23]
}
 8008854:	4618      	mov	r0, r3
 8008856:	3718      	adds	r7, #24
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	460b      	mov	r3, r1
 8008866:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800886e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008876:	2b00      	cmp	r3, #0
 8008878:	d101      	bne.n	800887e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800887a:	2303      	movs	r3, #3
 800887c:	e04f      	b.n	800891e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008884:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008886:	78fa      	ldrb	r2, [r7, #3]
 8008888:	6879      	ldr	r1, [r7, #4]
 800888a:	4613      	mov	r3, r2
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	4413      	add	r3, r2
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	440b      	add	r3, r1
 8008894:	3318      	adds	r3, #24
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d029      	beq.n	80088f0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800889c:	78fa      	ldrb	r2, [r7, #3]
 800889e:	6879      	ldr	r1, [r7, #4]
 80088a0:	4613      	mov	r3, r2
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	4413      	add	r3, r2
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	440b      	add	r3, r1
 80088aa:	3318      	adds	r3, #24
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	78f9      	ldrb	r1, [r7, #3]
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	460b      	mov	r3, r1
 80088b4:	00db      	lsls	r3, r3, #3
 80088b6:	1a5b      	subs	r3, r3, r1
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	4403      	add	r3, r0
 80088bc:	3344      	adds	r3, #68	; 0x44
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	fbb2 f1f3 	udiv	r1, r2, r3
 80088c4:	fb03 f301 	mul.w	r3, r3, r1
 80088c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d110      	bne.n	80088f0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80088ce:	78fa      	ldrb	r2, [r7, #3]
 80088d0:	6879      	ldr	r1, [r7, #4]
 80088d2:	4613      	mov	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	4413      	add	r3, r2
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	440b      	add	r3, r1
 80088dc:	3318      	adds	r3, #24
 80088de:	2200      	movs	r2, #0
 80088e0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80088e2:	78f9      	ldrb	r1, [r7, #3]
 80088e4:	2300      	movs	r3, #0
 80088e6:	2200      	movs	r2, #0
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f002 fa84 	bl	800adf6 <USBD_LL_Transmit>
 80088ee:	e015      	b.n	800891c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d00b      	beq.n	800891c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	68ba      	ldr	r2, [r7, #8]
 800890e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008912:	68ba      	ldr	r2, [r7, #8]
 8008914:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008918:	78fa      	ldrb	r2, [r7, #3]
 800891a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800891c:	2300      	movs	r3, #0
}
 800891e:	4618      	mov	r0, r3
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}

08008926 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008926:	b580      	push	{r7, lr}
 8008928:	b084      	sub	sp, #16
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
 800892e:	460b      	mov	r3, r1
 8008930:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008938:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008940:	2b00      	cmp	r3, #0
 8008942:	d101      	bne.n	8008948 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008944:	2303      	movs	r3, #3
 8008946:	e015      	b.n	8008974 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008948:	78fb      	ldrb	r3, [r7, #3]
 800894a:	4619      	mov	r1, r3
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f002 fa94 	bl	800ae7a <USBD_LL_GetRxDataSize>
 8008952:	4602      	mov	r2, r0
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	68fa      	ldr	r2, [r7, #12]
 8008964:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008968:	68fa      	ldr	r2, [r7, #12]
 800896a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800896e:	4611      	mov	r1, r2
 8008970:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800898a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d101      	bne.n	8008996 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008992:	2303      	movs	r3, #3
 8008994:	e01b      	b.n	80089ce <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d015      	beq.n	80089cc <USBD_CDC_EP0_RxReady+0x50>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80089a6:	2bff      	cmp	r3, #255	; 0xff
 80089a8:	d010      	beq.n	80089cc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80089b8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80089ba:	68fa      	ldr	r2, [r7, #12]
 80089bc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80089c0:	b292      	uxth	r2, r2
 80089c2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	22ff      	movs	r2, #255	; 0xff
 80089c8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
	...

080089d8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2243      	movs	r2, #67	; 0x43
 80089e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80089e6:	4b03      	ldr	r3, [pc, #12]	; (80089f4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	370c      	adds	r7, #12
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr
 80089f4:	20000090 	.word	0x20000090

080089f8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2243      	movs	r2, #67	; 0x43
 8008a04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008a06:	4b03      	ldr	r3, [pc, #12]	; (8008a14 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr
 8008a14:	2000004c 	.word	0x2000004c

08008a18 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2243      	movs	r2, #67	; 0x43
 8008a24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008a26:	4b03      	ldr	r3, [pc, #12]	; (8008a34 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr
 8008a34:	200000d4 	.word	0x200000d4

08008a38 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	220a      	movs	r2, #10
 8008a44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008a46:	4b03      	ldr	r3, [pc, #12]	; (8008a54 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	370c      	adds	r7, #12
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr
 8008a54:	20000008 	.word	0x20000008

08008a58 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d101      	bne.n	8008a6c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	e004      	b.n	8008a76 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	683a      	ldr	r2, [r7, #0]
 8008a70:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	370c      	adds	r7, #12
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr

08008a82 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008a82:	b480      	push	{r7}
 8008a84:	b087      	sub	sp, #28
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	60f8      	str	r0, [r7, #12]
 8008a8a:	60b9      	str	r1, [r7, #8]
 8008a8c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a94:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d101      	bne.n	8008aa0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008a9c:	2303      	movs	r3, #3
 8008a9e:	e008      	b.n	8008ab2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	68ba      	ldr	r2, [r7, #8]
 8008aa4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	371c      	adds	r7, #28
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr

08008abe <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008abe:	b480      	push	{r7}
 8008ac0:	b085      	sub	sp, #20
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
 8008ac6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ace:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d101      	bne.n	8008ada <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	e004      	b.n	8008ae4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	683a      	ldr	r2, [r7, #0]
 8008ade:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008ae2:	2300      	movs	r3, #0
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3714      	adds	r7, #20
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008afe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d101      	bne.n	8008b0e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008b0a:	2303      	movs	r3, #3
 8008b0c:	e016      	b.n	8008b3c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	7c1b      	ldrb	r3, [r3, #16]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d109      	bne.n	8008b2a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b20:	2101      	movs	r1, #1
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f002 f988 	bl	800ae38 <USBD_LL_PrepareReceive>
 8008b28:	e007      	b.n	8008b3a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b30:	2340      	movs	r3, #64	; 0x40
 8008b32:	2101      	movs	r1, #1
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f002 f97f 	bl	800ae38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008b3a:	2300      	movs	r3, #0
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b086      	sub	sp, #24
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d101      	bne.n	8008b5c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008b58:	2303      	movs	r3, #3
 8008b5a:	e01f      	b.n	8008b9c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d003      	beq.n	8008b82 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2201      	movs	r2, #1
 8008b86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	79fa      	ldrb	r2, [r7, #7]
 8008b8e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008b90:	68f8      	ldr	r0, [r7, #12]
 8008b92:	f001 fffb 	bl	800ab8c <USBD_LL_Init>
 8008b96:	4603      	mov	r3, r0
 8008b98:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3718      	adds	r7, #24
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d101      	bne.n	8008bbc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008bb8:	2303      	movs	r3, #3
 8008bba:	e016      	b.n	8008bea <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	683a      	ldr	r2, [r7, #0]
 8008bc0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d00b      	beq.n	8008be8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd8:	f107 020e 	add.w	r2, r7, #14
 8008bdc:	4610      	mov	r0, r2
 8008bde:	4798      	blx	r3
 8008be0:	4602      	mov	r2, r0
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b082      	sub	sp, #8
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f002 f812 	bl	800ac24 <USBD_LL_Start>
 8008c00:	4603      	mov	r3, r0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3708      	adds	r7, #8
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008c0a:	b480      	push	{r7}
 8008c0c:	b083      	sub	sp, #12
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	460b      	mov	r3, r1
 8008c2a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008c2c:	2303      	movs	r3, #3
 8008c2e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d009      	beq.n	8008c4e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	78fa      	ldrb	r2, [r7, #3]
 8008c44:	4611      	mov	r1, r2
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	4798      	blx	r3
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	460b      	mov	r3, r1
 8008c62:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d007      	beq.n	8008c7e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	78fa      	ldrb	r2, [r7, #3]
 8008c78:	4611      	mov	r1, r2
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	4798      	blx	r3
  }

  return USBD_OK;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3708      	adds	r7, #8
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c98:	6839      	ldr	r1, [r7, #0]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f000 ff90 	bl	8009bc0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008cae:	461a      	mov	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008cbc:	f003 031f 	and.w	r3, r3, #31
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d01a      	beq.n	8008cfa <USBD_LL_SetupStage+0x72>
 8008cc4:	2b02      	cmp	r3, #2
 8008cc6:	d822      	bhi.n	8008d0e <USBD_LL_SetupStage+0x86>
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d002      	beq.n	8008cd2 <USBD_LL_SetupStage+0x4a>
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d00a      	beq.n	8008ce6 <USBD_LL_SetupStage+0x5e>
 8008cd0:	e01d      	b.n	8008d0e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008cd8:	4619      	mov	r1, r3
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 fa62 	bl	80091a4 <USBD_StdDevReq>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8008ce4:	e020      	b.n	8008d28 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008cec:	4619      	mov	r1, r3
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 fac6 	bl	8009280 <USBD_StdItfReq>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8008cf8:	e016      	b.n	8008d28 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d00:	4619      	mov	r1, r3
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 fb05 	bl	8009312 <USBD_StdEPReq>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8008d0c:	e00c      	b.n	8008d28 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008d14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f001 ffe1 	bl	800ace4 <USBD_LL_StallEP>
 8008d22:	4603      	mov	r3, r0
 8008d24:	73fb      	strb	r3, [r7, #15]
      break;
 8008d26:	bf00      	nop
  }

  return ret;
 8008d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b086      	sub	sp, #24
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	60f8      	str	r0, [r7, #12]
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	607a      	str	r2, [r7, #4]
 8008d3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008d40:	7afb      	ldrb	r3, [r7, #11]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d138      	bne.n	8008db8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008d4c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d54:	2b03      	cmp	r3, #3
 8008d56:	d14a      	bne.n	8008dee <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	689a      	ldr	r2, [r3, #8]
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d913      	bls.n	8008d8c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	689a      	ldr	r2, [r3, #8]
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	1ad2      	subs	r2, r2, r3
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	68da      	ldr	r2, [r3, #12]
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	bf28      	it	cs
 8008d7e:	4613      	movcs	r3, r2
 8008d80:	461a      	mov	r2, r3
 8008d82:	6879      	ldr	r1, [r7, #4]
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f001 f80f 	bl	8009da8 <USBD_CtlContinueRx>
 8008d8a:	e030      	b.n	8008dee <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	2b03      	cmp	r3, #3
 8008d96:	d10b      	bne.n	8008db0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d9e:	691b      	ldr	r3, [r3, #16]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d005      	beq.n	8008db0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008daa:	691b      	ldr	r3, [r3, #16]
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008db0:	68f8      	ldr	r0, [r7, #12]
 8008db2:	f001 f80a 	bl	8009dca <USBD_CtlSendStatus>
 8008db6:	e01a      	b.n	8008dee <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	2b03      	cmp	r3, #3
 8008dc2:	d114      	bne.n	8008dee <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dca:	699b      	ldr	r3, [r3, #24]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d00e      	beq.n	8008dee <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dd6:	699b      	ldr	r3, [r3, #24]
 8008dd8:	7afa      	ldrb	r2, [r7, #11]
 8008dda:	4611      	mov	r1, r2
 8008ddc:	68f8      	ldr	r0, [r7, #12]
 8008dde:	4798      	blx	r3
 8008de0:	4603      	mov	r3, r0
 8008de2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008de4:	7dfb      	ldrb	r3, [r7, #23]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d001      	beq.n	8008dee <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008dea:	7dfb      	ldrb	r3, [r7, #23]
 8008dec:	e000      	b.n	8008df0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3718      	adds	r7, #24
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	460b      	mov	r3, r1
 8008e02:	607a      	str	r2, [r7, #4]
 8008e04:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008e06:	7afb      	ldrb	r3, [r7, #11]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d16b      	bne.n	8008ee4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	3314      	adds	r3, #20
 8008e10:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e18:	2b02      	cmp	r3, #2
 8008e1a:	d156      	bne.n	8008eca <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	689a      	ldr	r2, [r3, #8]
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d914      	bls.n	8008e52 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	689a      	ldr	r2, [r3, #8]
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	1ad2      	subs	r2, r2, r3
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	6879      	ldr	r1, [r7, #4]
 8008e3e:	68f8      	ldr	r0, [r7, #12]
 8008e40:	f000 ff84 	bl	8009d4c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e44:	2300      	movs	r3, #0
 8008e46:	2200      	movs	r2, #0
 8008e48:	2100      	movs	r1, #0
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	f001 fff4 	bl	800ae38 <USBD_LL_PrepareReceive>
 8008e50:	e03b      	b.n	8008eca <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	68da      	ldr	r2, [r3, #12]
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d11c      	bne.n	8008e98 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	685a      	ldr	r2, [r3, #4]
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d316      	bcc.n	8008e98 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	685a      	ldr	r2, [r3, #4]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d20f      	bcs.n	8008e98 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008e78:	2200      	movs	r2, #0
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f000 ff65 	bl	8009d4c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2200      	movs	r2, #0
 8008e86:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	2100      	movs	r1, #0
 8008e90:	68f8      	ldr	r0, [r7, #12]
 8008e92:	f001 ffd1 	bl	800ae38 <USBD_LL_PrepareReceive>
 8008e96:	e018      	b.n	8008eca <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	2b03      	cmp	r3, #3
 8008ea2:	d10b      	bne.n	8008ebc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d005      	beq.n	8008ebc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ebc:	2180      	movs	r1, #128	; 0x80
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	f001 ff10 	bl	800ace4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	f000 ff93 	bl	8009df0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d122      	bne.n	8008f1a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f7ff fe98 	bl	8008c0a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008ee2:	e01a      	b.n	8008f1a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	2b03      	cmp	r3, #3
 8008eee:	d114      	bne.n	8008f1a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ef6:	695b      	ldr	r3, [r3, #20]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00e      	beq.n	8008f1a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f02:	695b      	ldr	r3, [r3, #20]
 8008f04:	7afa      	ldrb	r2, [r7, #11]
 8008f06:	4611      	mov	r1, r2
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	4798      	blx	r3
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008f10:	7dfb      	ldrb	r3, [r7, #23]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d001      	beq.n	8008f1a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008f16:	7dfb      	ldrb	r3, [r7, #23]
 8008f18:	e000      	b.n	8008f1c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3718      	adds	r7, #24
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d101      	bne.n	8008f58 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008f54:	2303      	movs	r3, #3
 8008f56:	e02f      	b.n	8008fb8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d00f      	beq.n	8008f82 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d009      	beq.n	8008f82 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	6852      	ldr	r2, [r2, #4]
 8008f7a:	b2d2      	uxtb	r2, r2
 8008f7c:	4611      	mov	r1, r2
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f82:	2340      	movs	r3, #64	; 0x40
 8008f84:	2200      	movs	r2, #0
 8008f86:	2100      	movs	r1, #0
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f001 fe66 	bl	800ac5a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2201      	movs	r2, #1
 8008f92:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2240      	movs	r2, #64	; 0x40
 8008f9a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f9e:	2340      	movs	r3, #64	; 0x40
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	2180      	movs	r1, #128	; 0x80
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f001 fe58 	bl	800ac5a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2201      	movs	r2, #1
 8008fae:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2240      	movs	r2, #64	; 0x40
 8008fb4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3708      	adds	r7, #8
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	460b      	mov	r3, r1
 8008fca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	78fa      	ldrb	r2, [r7, #3]
 8008fd0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008fd2:	2300      	movs	r3, #0
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fee:	b2da      	uxtb	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2204      	movs	r2, #4
 8008ffa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008ffe:	2300      	movs	r3, #0
}
 8009000:	4618      	mov	r0, r3
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800901a:	b2db      	uxtb	r3, r3
 800901c:	2b04      	cmp	r3, #4
 800901e:	d106      	bne.n	800902e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009026:	b2da      	uxtb	r2, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800902e:	2300      	movs	r3, #0
}
 8009030:	4618      	mov	r0, r3
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800904a:	2b00      	cmp	r3, #0
 800904c:	d101      	bne.n	8009052 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800904e:	2303      	movs	r3, #3
 8009050:	e012      	b.n	8009078 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009058:	b2db      	uxtb	r3, r3
 800905a:	2b03      	cmp	r3, #3
 800905c:	d10b      	bne.n	8009076 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009064:	69db      	ldr	r3, [r3, #28]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d005      	beq.n	8009076 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009070:	69db      	ldr	r3, [r3, #28]
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	3708      	adds	r7, #8
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	460b      	mov	r3, r1
 800908a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009092:	2b00      	cmp	r3, #0
 8009094:	d101      	bne.n	800909a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009096:	2303      	movs	r3, #3
 8009098:	e014      	b.n	80090c4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	2b03      	cmp	r3, #3
 80090a4:	d10d      	bne.n	80090c2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ac:	6a1b      	ldr	r3, [r3, #32]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d007      	beq.n	80090c2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090b8:	6a1b      	ldr	r3, [r3, #32]
 80090ba:	78fa      	ldrb	r2, [r7, #3]
 80090bc:	4611      	mov	r1, r2
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3708      	adds	r7, #8
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	460b      	mov	r3, r1
 80090d6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d101      	bne.n	80090e6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80090e2:	2303      	movs	r3, #3
 80090e4:	e014      	b.n	8009110 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	2b03      	cmp	r3, #3
 80090f0:	d10d      	bne.n	800910e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d007      	beq.n	800910e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009106:	78fa      	ldrb	r2, [r7, #3]
 8009108:	4611      	mov	r1, r2
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3708      	adds	r7, #8
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009120:	2300      	movs	r3, #0
}
 8009122:	4618      	mov	r0, r3
 8009124:	370c      	adds	r7, #12
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr

0800912e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b082      	sub	sp, #8
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2201      	movs	r2, #1
 800913a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009144:	2b00      	cmp	r3, #0
 8009146:	d009      	beq.n	800915c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	6852      	ldr	r2, [r2, #4]
 8009154:	b2d2      	uxtb	r2, r2
 8009156:	4611      	mov	r1, r2
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	4798      	blx	r3
  }

  return USBD_OK;
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	3708      	adds	r7, #8
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}

08009166 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009166:	b480      	push	{r7}
 8009168:	b087      	sub	sp, #28
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	3301      	adds	r3, #1
 800917c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009184:	8a3b      	ldrh	r3, [r7, #16]
 8009186:	021b      	lsls	r3, r3, #8
 8009188:	b21a      	sxth	r2, r3
 800918a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800918e:	4313      	orrs	r3, r2
 8009190:	b21b      	sxth	r3, r3
 8009192:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009194:	89fb      	ldrh	r3, [r7, #14]
}
 8009196:	4618      	mov	r0, r3
 8009198:	371c      	adds	r7, #28
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr
	...

080091a4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091ae:	2300      	movs	r3, #0
 80091b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091ba:	2b40      	cmp	r3, #64	; 0x40
 80091bc:	d005      	beq.n	80091ca <USBD_StdDevReq+0x26>
 80091be:	2b40      	cmp	r3, #64	; 0x40
 80091c0:	d853      	bhi.n	800926a <USBD_StdDevReq+0xc6>
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00b      	beq.n	80091de <USBD_StdDevReq+0x3a>
 80091c6:	2b20      	cmp	r3, #32
 80091c8:	d14f      	bne.n	800926a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	6839      	ldr	r1, [r7, #0]
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	4798      	blx	r3
 80091d8:	4603      	mov	r3, r0
 80091da:	73fb      	strb	r3, [r7, #15]
      break;
 80091dc:	e04a      	b.n	8009274 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	785b      	ldrb	r3, [r3, #1]
 80091e2:	2b09      	cmp	r3, #9
 80091e4:	d83b      	bhi.n	800925e <USBD_StdDevReq+0xba>
 80091e6:	a201      	add	r2, pc, #4	; (adr r2, 80091ec <USBD_StdDevReq+0x48>)
 80091e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ec:	08009241 	.word	0x08009241
 80091f0:	08009255 	.word	0x08009255
 80091f4:	0800925f 	.word	0x0800925f
 80091f8:	0800924b 	.word	0x0800924b
 80091fc:	0800925f 	.word	0x0800925f
 8009200:	0800921f 	.word	0x0800921f
 8009204:	08009215 	.word	0x08009215
 8009208:	0800925f 	.word	0x0800925f
 800920c:	08009237 	.word	0x08009237
 8009210:	08009229 	.word	0x08009229
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009214:	6839      	ldr	r1, [r7, #0]
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 f9de 	bl	80095d8 <USBD_GetDescriptor>
          break;
 800921c:	e024      	b.n	8009268 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800921e:	6839      	ldr	r1, [r7, #0]
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 fb43 	bl	80098ac <USBD_SetAddress>
          break;
 8009226:	e01f      	b.n	8009268 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009228:	6839      	ldr	r1, [r7, #0]
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fb82 	bl	8009934 <USBD_SetConfig>
 8009230:	4603      	mov	r3, r0
 8009232:	73fb      	strb	r3, [r7, #15]
          break;
 8009234:	e018      	b.n	8009268 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009236:	6839      	ldr	r1, [r7, #0]
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 fc21 	bl	8009a80 <USBD_GetConfig>
          break;
 800923e:	e013      	b.n	8009268 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009240:	6839      	ldr	r1, [r7, #0]
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 fc52 	bl	8009aec <USBD_GetStatus>
          break;
 8009248:	e00e      	b.n	8009268 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800924a:	6839      	ldr	r1, [r7, #0]
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 fc81 	bl	8009b54 <USBD_SetFeature>
          break;
 8009252:	e009      	b.n	8009268 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009254:	6839      	ldr	r1, [r7, #0]
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 fc90 	bl	8009b7c <USBD_ClrFeature>
          break;
 800925c:	e004      	b.n	8009268 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800925e:	6839      	ldr	r1, [r7, #0]
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 fce7 	bl	8009c34 <USBD_CtlError>
          break;
 8009266:	bf00      	nop
      }
      break;
 8009268:	e004      	b.n	8009274 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800926a:	6839      	ldr	r1, [r7, #0]
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 fce1 	bl	8009c34 <USBD_CtlError>
      break;
 8009272:	bf00      	nop
  }

  return ret;
 8009274:	7bfb      	ldrb	r3, [r7, #15]
}
 8009276:	4618      	mov	r0, r3
 8009278:	3710      	adds	r7, #16
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop

08009280 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800928a:	2300      	movs	r3, #0
 800928c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009296:	2b40      	cmp	r3, #64	; 0x40
 8009298:	d005      	beq.n	80092a6 <USBD_StdItfReq+0x26>
 800929a:	2b40      	cmp	r3, #64	; 0x40
 800929c:	d82f      	bhi.n	80092fe <USBD_StdItfReq+0x7e>
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d001      	beq.n	80092a6 <USBD_StdItfReq+0x26>
 80092a2:	2b20      	cmp	r3, #32
 80092a4:	d12b      	bne.n	80092fe <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	3b01      	subs	r3, #1
 80092b0:	2b02      	cmp	r3, #2
 80092b2:	d81d      	bhi.n	80092f0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	889b      	ldrh	r3, [r3, #4]
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d813      	bhi.n	80092e6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	6839      	ldr	r1, [r7, #0]
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	4798      	blx	r3
 80092cc:	4603      	mov	r3, r0
 80092ce:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	88db      	ldrh	r3, [r3, #6]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d110      	bne.n	80092fa <USBD_StdItfReq+0x7a>
 80092d8:	7bfb      	ldrb	r3, [r7, #15]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d10d      	bne.n	80092fa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 fd73 	bl	8009dca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80092e4:	e009      	b.n	80092fa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80092e6:	6839      	ldr	r1, [r7, #0]
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 fca3 	bl	8009c34 <USBD_CtlError>
          break;
 80092ee:	e004      	b.n	80092fa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80092f0:	6839      	ldr	r1, [r7, #0]
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 fc9e 	bl	8009c34 <USBD_CtlError>
          break;
 80092f8:	e000      	b.n	80092fc <USBD_StdItfReq+0x7c>
          break;
 80092fa:	bf00      	nop
      }
      break;
 80092fc:	e004      	b.n	8009308 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80092fe:	6839      	ldr	r1, [r7, #0]
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 fc97 	bl	8009c34 <USBD_CtlError>
      break;
 8009306:	bf00      	nop
  }

  return ret;
 8009308:	7bfb      	ldrb	r3, [r7, #15]
}
 800930a:	4618      	mov	r0, r3
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b084      	sub	sp, #16
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
 800931a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800931c:	2300      	movs	r3, #0
 800931e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	889b      	ldrh	r3, [r3, #4]
 8009324:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800932e:	2b40      	cmp	r3, #64	; 0x40
 8009330:	d007      	beq.n	8009342 <USBD_StdEPReq+0x30>
 8009332:	2b40      	cmp	r3, #64	; 0x40
 8009334:	f200 8145 	bhi.w	80095c2 <USBD_StdEPReq+0x2b0>
 8009338:	2b00      	cmp	r3, #0
 800933a:	d00c      	beq.n	8009356 <USBD_StdEPReq+0x44>
 800933c:	2b20      	cmp	r3, #32
 800933e:	f040 8140 	bne.w	80095c2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	4798      	blx	r3
 8009350:	4603      	mov	r3, r0
 8009352:	73fb      	strb	r3, [r7, #15]
      break;
 8009354:	e13a      	b.n	80095cc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	785b      	ldrb	r3, [r3, #1]
 800935a:	2b03      	cmp	r3, #3
 800935c:	d007      	beq.n	800936e <USBD_StdEPReq+0x5c>
 800935e:	2b03      	cmp	r3, #3
 8009360:	f300 8129 	bgt.w	80095b6 <USBD_StdEPReq+0x2a4>
 8009364:	2b00      	cmp	r3, #0
 8009366:	d07f      	beq.n	8009468 <USBD_StdEPReq+0x156>
 8009368:	2b01      	cmp	r3, #1
 800936a:	d03c      	beq.n	80093e6 <USBD_StdEPReq+0xd4>
 800936c:	e123      	b.n	80095b6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009374:	b2db      	uxtb	r3, r3
 8009376:	2b02      	cmp	r3, #2
 8009378:	d002      	beq.n	8009380 <USBD_StdEPReq+0x6e>
 800937a:	2b03      	cmp	r3, #3
 800937c:	d016      	beq.n	80093ac <USBD_StdEPReq+0x9a>
 800937e:	e02c      	b.n	80093da <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009380:	7bbb      	ldrb	r3, [r7, #14]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00d      	beq.n	80093a2 <USBD_StdEPReq+0x90>
 8009386:	7bbb      	ldrb	r3, [r7, #14]
 8009388:	2b80      	cmp	r3, #128	; 0x80
 800938a:	d00a      	beq.n	80093a2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800938c:	7bbb      	ldrb	r3, [r7, #14]
 800938e:	4619      	mov	r1, r3
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f001 fca7 	bl	800ace4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009396:	2180      	movs	r1, #128	; 0x80
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f001 fca3 	bl	800ace4 <USBD_LL_StallEP>
 800939e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80093a0:	e020      	b.n	80093e4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80093a2:	6839      	ldr	r1, [r7, #0]
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 fc45 	bl	8009c34 <USBD_CtlError>
              break;
 80093aa:	e01b      	b.n	80093e4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	885b      	ldrh	r3, [r3, #2]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d10e      	bne.n	80093d2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80093b4:	7bbb      	ldrb	r3, [r7, #14]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00b      	beq.n	80093d2 <USBD_StdEPReq+0xc0>
 80093ba:	7bbb      	ldrb	r3, [r7, #14]
 80093bc:	2b80      	cmp	r3, #128	; 0x80
 80093be:	d008      	beq.n	80093d2 <USBD_StdEPReq+0xc0>
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	88db      	ldrh	r3, [r3, #6]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d104      	bne.n	80093d2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80093c8:	7bbb      	ldrb	r3, [r7, #14]
 80093ca:	4619      	mov	r1, r3
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f001 fc89 	bl	800ace4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 fcf9 	bl	8009dca <USBD_CtlSendStatus>

              break;
 80093d8:	e004      	b.n	80093e4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80093da:	6839      	ldr	r1, [r7, #0]
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 fc29 	bl	8009c34 <USBD_CtlError>
              break;
 80093e2:	bf00      	nop
          }
          break;
 80093e4:	e0ec      	b.n	80095c0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	2b02      	cmp	r3, #2
 80093f0:	d002      	beq.n	80093f8 <USBD_StdEPReq+0xe6>
 80093f2:	2b03      	cmp	r3, #3
 80093f4:	d016      	beq.n	8009424 <USBD_StdEPReq+0x112>
 80093f6:	e030      	b.n	800945a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093f8:	7bbb      	ldrb	r3, [r7, #14]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00d      	beq.n	800941a <USBD_StdEPReq+0x108>
 80093fe:	7bbb      	ldrb	r3, [r7, #14]
 8009400:	2b80      	cmp	r3, #128	; 0x80
 8009402:	d00a      	beq.n	800941a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009404:	7bbb      	ldrb	r3, [r7, #14]
 8009406:	4619      	mov	r1, r3
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f001 fc6b 	bl	800ace4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800940e:	2180      	movs	r1, #128	; 0x80
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f001 fc67 	bl	800ace4 <USBD_LL_StallEP>
 8009416:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009418:	e025      	b.n	8009466 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800941a:	6839      	ldr	r1, [r7, #0]
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 fc09 	bl	8009c34 <USBD_CtlError>
              break;
 8009422:	e020      	b.n	8009466 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	885b      	ldrh	r3, [r3, #2]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d11b      	bne.n	8009464 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800942c:	7bbb      	ldrb	r3, [r7, #14]
 800942e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009432:	2b00      	cmp	r3, #0
 8009434:	d004      	beq.n	8009440 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009436:	7bbb      	ldrb	r3, [r7, #14]
 8009438:	4619      	mov	r1, r3
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f001 fc71 	bl	800ad22 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 fcc2 	bl	8009dca <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	6839      	ldr	r1, [r7, #0]
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	4798      	blx	r3
 8009454:	4603      	mov	r3, r0
 8009456:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009458:	e004      	b.n	8009464 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800945a:	6839      	ldr	r1, [r7, #0]
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 fbe9 	bl	8009c34 <USBD_CtlError>
              break;
 8009462:	e000      	b.n	8009466 <USBD_StdEPReq+0x154>
              break;
 8009464:	bf00      	nop
          }
          break;
 8009466:	e0ab      	b.n	80095c0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800946e:	b2db      	uxtb	r3, r3
 8009470:	2b02      	cmp	r3, #2
 8009472:	d002      	beq.n	800947a <USBD_StdEPReq+0x168>
 8009474:	2b03      	cmp	r3, #3
 8009476:	d032      	beq.n	80094de <USBD_StdEPReq+0x1cc>
 8009478:	e097      	b.n	80095aa <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800947a:	7bbb      	ldrb	r3, [r7, #14]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d007      	beq.n	8009490 <USBD_StdEPReq+0x17e>
 8009480:	7bbb      	ldrb	r3, [r7, #14]
 8009482:	2b80      	cmp	r3, #128	; 0x80
 8009484:	d004      	beq.n	8009490 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009486:	6839      	ldr	r1, [r7, #0]
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 fbd3 	bl	8009c34 <USBD_CtlError>
                break;
 800948e:	e091      	b.n	80095b4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009490:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009494:	2b00      	cmp	r3, #0
 8009496:	da0b      	bge.n	80094b0 <USBD_StdEPReq+0x19e>
 8009498:	7bbb      	ldrb	r3, [r7, #14]
 800949a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800949e:	4613      	mov	r3, r2
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	4413      	add	r3, r2
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	3310      	adds	r3, #16
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	4413      	add	r3, r2
 80094ac:	3304      	adds	r3, #4
 80094ae:	e00b      	b.n	80094c8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094b0:	7bbb      	ldrb	r3, [r7, #14]
 80094b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094b6:	4613      	mov	r3, r2
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	4413      	add	r3, r2
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	4413      	add	r3, r2
 80094c6:	3304      	adds	r3, #4
 80094c8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	2200      	movs	r2, #0
 80094ce:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	2202      	movs	r2, #2
 80094d4:	4619      	mov	r1, r3
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 fc1d 	bl	8009d16 <USBD_CtlSendData>
              break;
 80094dc:	e06a      	b.n	80095b4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80094de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	da11      	bge.n	800950a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80094e6:	7bbb      	ldrb	r3, [r7, #14]
 80094e8:	f003 020f 	and.w	r2, r3, #15
 80094ec:	6879      	ldr	r1, [r7, #4]
 80094ee:	4613      	mov	r3, r2
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	4413      	add	r3, r2
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	440b      	add	r3, r1
 80094f8:	3324      	adds	r3, #36	; 0x24
 80094fa:	881b      	ldrh	r3, [r3, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d117      	bne.n	8009530 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009500:	6839      	ldr	r1, [r7, #0]
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 fb96 	bl	8009c34 <USBD_CtlError>
                  break;
 8009508:	e054      	b.n	80095b4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800950a:	7bbb      	ldrb	r3, [r7, #14]
 800950c:	f003 020f 	and.w	r2, r3, #15
 8009510:	6879      	ldr	r1, [r7, #4]
 8009512:	4613      	mov	r3, r2
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	4413      	add	r3, r2
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	440b      	add	r3, r1
 800951c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009520:	881b      	ldrh	r3, [r3, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d104      	bne.n	8009530 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009526:	6839      	ldr	r1, [r7, #0]
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 fb83 	bl	8009c34 <USBD_CtlError>
                  break;
 800952e:	e041      	b.n	80095b4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009530:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009534:	2b00      	cmp	r3, #0
 8009536:	da0b      	bge.n	8009550 <USBD_StdEPReq+0x23e>
 8009538:	7bbb      	ldrb	r3, [r7, #14]
 800953a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800953e:	4613      	mov	r3, r2
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	4413      	add	r3, r2
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	3310      	adds	r3, #16
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	4413      	add	r3, r2
 800954c:	3304      	adds	r3, #4
 800954e:	e00b      	b.n	8009568 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009550:	7bbb      	ldrb	r3, [r7, #14]
 8009552:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009556:	4613      	mov	r3, r2
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	4413      	add	r3, r2
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	4413      	add	r3, r2
 8009566:	3304      	adds	r3, #4
 8009568:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800956a:	7bbb      	ldrb	r3, [r7, #14]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d002      	beq.n	8009576 <USBD_StdEPReq+0x264>
 8009570:	7bbb      	ldrb	r3, [r7, #14]
 8009572:	2b80      	cmp	r3, #128	; 0x80
 8009574:	d103      	bne.n	800957e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	2200      	movs	r2, #0
 800957a:	601a      	str	r2, [r3, #0]
 800957c:	e00e      	b.n	800959c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800957e:	7bbb      	ldrb	r3, [r7, #14]
 8009580:	4619      	mov	r1, r3
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f001 fbec 	bl	800ad60 <USBD_LL_IsStallEP>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	d003      	beq.n	8009596 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	2201      	movs	r2, #1
 8009592:	601a      	str	r2, [r3, #0]
 8009594:	e002      	b.n	800959c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	2200      	movs	r2, #0
 800959a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	2202      	movs	r2, #2
 80095a0:	4619      	mov	r1, r3
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 fbb7 	bl	8009d16 <USBD_CtlSendData>
              break;
 80095a8:	e004      	b.n	80095b4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80095aa:	6839      	ldr	r1, [r7, #0]
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 fb41 	bl	8009c34 <USBD_CtlError>
              break;
 80095b2:	bf00      	nop
          }
          break;
 80095b4:	e004      	b.n	80095c0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80095b6:	6839      	ldr	r1, [r7, #0]
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 fb3b 	bl	8009c34 <USBD_CtlError>
          break;
 80095be:	bf00      	nop
      }
      break;
 80095c0:	e004      	b.n	80095cc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80095c2:	6839      	ldr	r1, [r7, #0]
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 fb35 	bl	8009c34 <USBD_CtlError>
      break;
 80095ca:	bf00      	nop
  }

  return ret;
 80095cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3710      	adds	r7, #16
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
	...

080095d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80095e2:	2300      	movs	r3, #0
 80095e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80095e6:	2300      	movs	r3, #0
 80095e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80095ea:	2300      	movs	r3, #0
 80095ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	885b      	ldrh	r3, [r3, #2]
 80095f2:	0a1b      	lsrs	r3, r3, #8
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	3b01      	subs	r3, #1
 80095f8:	2b06      	cmp	r3, #6
 80095fa:	f200 8128 	bhi.w	800984e <USBD_GetDescriptor+0x276>
 80095fe:	a201      	add	r2, pc, #4	; (adr r2, 8009604 <USBD_GetDescriptor+0x2c>)
 8009600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009604:	08009621 	.word	0x08009621
 8009608:	08009639 	.word	0x08009639
 800960c:	08009679 	.word	0x08009679
 8009610:	0800984f 	.word	0x0800984f
 8009614:	0800984f 	.word	0x0800984f
 8009618:	080097ef 	.word	0x080097ef
 800961c:	0800981b 	.word	0x0800981b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	7c12      	ldrb	r2, [r2, #16]
 800962c:	f107 0108 	add.w	r1, r7, #8
 8009630:	4610      	mov	r0, r2
 8009632:	4798      	blx	r3
 8009634:	60f8      	str	r0, [r7, #12]
      break;
 8009636:	e112      	b.n	800985e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	7c1b      	ldrb	r3, [r3, #16]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d10d      	bne.n	800965c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009648:	f107 0208 	add.w	r2, r7, #8
 800964c:	4610      	mov	r0, r2
 800964e:	4798      	blx	r3
 8009650:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	3301      	adds	r3, #1
 8009656:	2202      	movs	r2, #2
 8009658:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800965a:	e100      	b.n	800985e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009664:	f107 0208 	add.w	r2, r7, #8
 8009668:	4610      	mov	r0, r2
 800966a:	4798      	blx	r3
 800966c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	3301      	adds	r3, #1
 8009672:	2202      	movs	r2, #2
 8009674:	701a      	strb	r2, [r3, #0]
      break;
 8009676:	e0f2      	b.n	800985e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	885b      	ldrh	r3, [r3, #2]
 800967c:	b2db      	uxtb	r3, r3
 800967e:	2b05      	cmp	r3, #5
 8009680:	f200 80ac 	bhi.w	80097dc <USBD_GetDescriptor+0x204>
 8009684:	a201      	add	r2, pc, #4	; (adr r2, 800968c <USBD_GetDescriptor+0xb4>)
 8009686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800968a:	bf00      	nop
 800968c:	080096a5 	.word	0x080096a5
 8009690:	080096d9 	.word	0x080096d9
 8009694:	0800970d 	.word	0x0800970d
 8009698:	08009741 	.word	0x08009741
 800969c:	08009775 	.word	0x08009775
 80096a0:	080097a9 	.word	0x080097a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d00b      	beq.n	80096c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	7c12      	ldrb	r2, [r2, #16]
 80096bc:	f107 0108 	add.w	r1, r7, #8
 80096c0:	4610      	mov	r0, r2
 80096c2:	4798      	blx	r3
 80096c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096c6:	e091      	b.n	80097ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096c8:	6839      	ldr	r1, [r7, #0]
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 fab2 	bl	8009c34 <USBD_CtlError>
            err++;
 80096d0:	7afb      	ldrb	r3, [r7, #11]
 80096d2:	3301      	adds	r3, #1
 80096d4:	72fb      	strb	r3, [r7, #11]
          break;
 80096d6:	e089      	b.n	80097ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00b      	beq.n	80096fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	7c12      	ldrb	r2, [r2, #16]
 80096f0:	f107 0108 	add.w	r1, r7, #8
 80096f4:	4610      	mov	r0, r2
 80096f6:	4798      	blx	r3
 80096f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096fa:	e077      	b.n	80097ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096fc:	6839      	ldr	r1, [r7, #0]
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 fa98 	bl	8009c34 <USBD_CtlError>
            err++;
 8009704:	7afb      	ldrb	r3, [r7, #11]
 8009706:	3301      	adds	r3, #1
 8009708:	72fb      	strb	r3, [r7, #11]
          break;
 800970a:	e06f      	b.n	80097ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00b      	beq.n	8009730 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	7c12      	ldrb	r2, [r2, #16]
 8009724:	f107 0108 	add.w	r1, r7, #8
 8009728:	4610      	mov	r0, r2
 800972a:	4798      	blx	r3
 800972c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800972e:	e05d      	b.n	80097ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009730:	6839      	ldr	r1, [r7, #0]
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 fa7e 	bl	8009c34 <USBD_CtlError>
            err++;
 8009738:	7afb      	ldrb	r3, [r7, #11]
 800973a:	3301      	adds	r3, #1
 800973c:	72fb      	strb	r3, [r7, #11]
          break;
 800973e:	e055      	b.n	80097ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009746:	691b      	ldr	r3, [r3, #16]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00b      	beq.n	8009764 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009752:	691b      	ldr	r3, [r3, #16]
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	7c12      	ldrb	r2, [r2, #16]
 8009758:	f107 0108 	add.w	r1, r7, #8
 800975c:	4610      	mov	r0, r2
 800975e:	4798      	blx	r3
 8009760:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009762:	e043      	b.n	80097ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009764:	6839      	ldr	r1, [r7, #0]
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 fa64 	bl	8009c34 <USBD_CtlError>
            err++;
 800976c:	7afb      	ldrb	r3, [r7, #11]
 800976e:	3301      	adds	r3, #1
 8009770:	72fb      	strb	r3, [r7, #11]
          break;
 8009772:	e03b      	b.n	80097ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800977a:	695b      	ldr	r3, [r3, #20]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d00b      	beq.n	8009798 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009786:	695b      	ldr	r3, [r3, #20]
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	7c12      	ldrb	r2, [r2, #16]
 800978c:	f107 0108 	add.w	r1, r7, #8
 8009790:	4610      	mov	r0, r2
 8009792:	4798      	blx	r3
 8009794:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009796:	e029      	b.n	80097ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009798:	6839      	ldr	r1, [r7, #0]
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 fa4a 	bl	8009c34 <USBD_CtlError>
            err++;
 80097a0:	7afb      	ldrb	r3, [r7, #11]
 80097a2:	3301      	adds	r3, #1
 80097a4:	72fb      	strb	r3, [r7, #11]
          break;
 80097a6:	e021      	b.n	80097ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ae:	699b      	ldr	r3, [r3, #24]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d00b      	beq.n	80097cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ba:	699b      	ldr	r3, [r3, #24]
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	7c12      	ldrb	r2, [r2, #16]
 80097c0:	f107 0108 	add.w	r1, r7, #8
 80097c4:	4610      	mov	r0, r2
 80097c6:	4798      	blx	r3
 80097c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097ca:	e00f      	b.n	80097ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097cc:	6839      	ldr	r1, [r7, #0]
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 fa30 	bl	8009c34 <USBD_CtlError>
            err++;
 80097d4:	7afb      	ldrb	r3, [r7, #11]
 80097d6:	3301      	adds	r3, #1
 80097d8:	72fb      	strb	r3, [r7, #11]
          break;
 80097da:	e007      	b.n	80097ec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80097dc:	6839      	ldr	r1, [r7, #0]
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fa28 	bl	8009c34 <USBD_CtlError>
          err++;
 80097e4:	7afb      	ldrb	r3, [r7, #11]
 80097e6:	3301      	adds	r3, #1
 80097e8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80097ea:	bf00      	nop
      }
      break;
 80097ec:	e037      	b.n	800985e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	7c1b      	ldrb	r3, [r3, #16]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d109      	bne.n	800980a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097fe:	f107 0208 	add.w	r2, r7, #8
 8009802:	4610      	mov	r0, r2
 8009804:	4798      	blx	r3
 8009806:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009808:	e029      	b.n	800985e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800980a:	6839      	ldr	r1, [r7, #0]
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 fa11 	bl	8009c34 <USBD_CtlError>
        err++;
 8009812:	7afb      	ldrb	r3, [r7, #11]
 8009814:	3301      	adds	r3, #1
 8009816:	72fb      	strb	r3, [r7, #11]
      break;
 8009818:	e021      	b.n	800985e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	7c1b      	ldrb	r3, [r3, #16]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d10d      	bne.n	800983e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800982a:	f107 0208 	add.w	r2, r7, #8
 800982e:	4610      	mov	r0, r2
 8009830:	4798      	blx	r3
 8009832:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	3301      	adds	r3, #1
 8009838:	2207      	movs	r2, #7
 800983a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800983c:	e00f      	b.n	800985e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800983e:	6839      	ldr	r1, [r7, #0]
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 f9f7 	bl	8009c34 <USBD_CtlError>
        err++;
 8009846:	7afb      	ldrb	r3, [r7, #11]
 8009848:	3301      	adds	r3, #1
 800984a:	72fb      	strb	r3, [r7, #11]
      break;
 800984c:	e007      	b.n	800985e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800984e:	6839      	ldr	r1, [r7, #0]
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 f9ef 	bl	8009c34 <USBD_CtlError>
      err++;
 8009856:	7afb      	ldrb	r3, [r7, #11]
 8009858:	3301      	adds	r3, #1
 800985a:	72fb      	strb	r3, [r7, #11]
      break;
 800985c:	bf00      	nop
  }

  if (err != 0U)
 800985e:	7afb      	ldrb	r3, [r7, #11]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d11e      	bne.n	80098a2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	88db      	ldrh	r3, [r3, #6]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d016      	beq.n	800989a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800986c:	893b      	ldrh	r3, [r7, #8]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00e      	beq.n	8009890 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	88da      	ldrh	r2, [r3, #6]
 8009876:	893b      	ldrh	r3, [r7, #8]
 8009878:	4293      	cmp	r3, r2
 800987a:	bf28      	it	cs
 800987c:	4613      	movcs	r3, r2
 800987e:	b29b      	uxth	r3, r3
 8009880:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009882:	893b      	ldrh	r3, [r7, #8]
 8009884:	461a      	mov	r2, r3
 8009886:	68f9      	ldr	r1, [r7, #12]
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 fa44 	bl	8009d16 <USBD_CtlSendData>
 800988e:	e009      	b.n	80098a4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009890:	6839      	ldr	r1, [r7, #0]
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 f9ce 	bl	8009c34 <USBD_CtlError>
 8009898:	e004      	b.n	80098a4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 fa95 	bl	8009dca <USBD_CtlSendStatus>
 80098a0:	e000      	b.n	80098a4 <USBD_GetDescriptor+0x2cc>
    return;
 80098a2:	bf00      	nop
  }
}
 80098a4:	3710      	adds	r7, #16
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop

080098ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	889b      	ldrh	r3, [r3, #4]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d131      	bne.n	8009922 <USBD_SetAddress+0x76>
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	88db      	ldrh	r3, [r3, #6]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d12d      	bne.n	8009922 <USBD_SetAddress+0x76>
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	885b      	ldrh	r3, [r3, #2]
 80098ca:	2b7f      	cmp	r3, #127	; 0x7f
 80098cc:	d829      	bhi.n	8009922 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	885b      	ldrh	r3, [r3, #2]
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	2b03      	cmp	r3, #3
 80098e4:	d104      	bne.n	80098f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80098e6:	6839      	ldr	r1, [r7, #0]
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 f9a3 	bl	8009c34 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098ee:	e01d      	b.n	800992c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	7bfa      	ldrb	r2, [r7, #15]
 80098f4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80098f8:	7bfb      	ldrb	r3, [r7, #15]
 80098fa:	4619      	mov	r1, r3
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f001 fa5b 	bl	800adb8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 fa61 	bl	8009dca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009908:	7bfb      	ldrb	r3, [r7, #15]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d004      	beq.n	8009918 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2202      	movs	r2, #2
 8009912:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009916:	e009      	b.n	800992c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2201      	movs	r2, #1
 800991c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009920:	e004      	b.n	800992c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009922:	6839      	ldr	r1, [r7, #0]
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 f985 	bl	8009c34 <USBD_CtlError>
  }
}
 800992a:	bf00      	nop
 800992c:	bf00      	nop
 800992e:	3710      	adds	r7, #16
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800993e:	2300      	movs	r3, #0
 8009940:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	885b      	ldrh	r3, [r3, #2]
 8009946:	b2da      	uxtb	r2, r3
 8009948:	4b4c      	ldr	r3, [pc, #304]	; (8009a7c <USBD_SetConfig+0x148>)
 800994a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800994c:	4b4b      	ldr	r3, [pc, #300]	; (8009a7c <USBD_SetConfig+0x148>)
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	2b01      	cmp	r3, #1
 8009952:	d905      	bls.n	8009960 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009954:	6839      	ldr	r1, [r7, #0]
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 f96c 	bl	8009c34 <USBD_CtlError>
    return USBD_FAIL;
 800995c:	2303      	movs	r3, #3
 800995e:	e088      	b.n	8009a72 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009966:	b2db      	uxtb	r3, r3
 8009968:	2b02      	cmp	r3, #2
 800996a:	d002      	beq.n	8009972 <USBD_SetConfig+0x3e>
 800996c:	2b03      	cmp	r3, #3
 800996e:	d025      	beq.n	80099bc <USBD_SetConfig+0x88>
 8009970:	e071      	b.n	8009a56 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009972:	4b42      	ldr	r3, [pc, #264]	; (8009a7c <USBD_SetConfig+0x148>)
 8009974:	781b      	ldrb	r3, [r3, #0]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d01c      	beq.n	80099b4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800997a:	4b40      	ldr	r3, [pc, #256]	; (8009a7c <USBD_SetConfig+0x148>)
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	461a      	mov	r2, r3
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009984:	4b3d      	ldr	r3, [pc, #244]	; (8009a7c <USBD_SetConfig+0x148>)
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	4619      	mov	r1, r3
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f7ff f948 	bl	8008c20 <USBD_SetClassConfig>
 8009990:	4603      	mov	r3, r0
 8009992:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009994:	7bfb      	ldrb	r3, [r7, #15]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d004      	beq.n	80099a4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800999a:	6839      	ldr	r1, [r7, #0]
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 f949 	bl	8009c34 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80099a2:	e065      	b.n	8009a70 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 fa10 	bl	8009dca <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2203      	movs	r2, #3
 80099ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80099b2:	e05d      	b.n	8009a70 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 fa08 	bl	8009dca <USBD_CtlSendStatus>
      break;
 80099ba:	e059      	b.n	8009a70 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80099bc:	4b2f      	ldr	r3, [pc, #188]	; (8009a7c <USBD_SetConfig+0x148>)
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d112      	bne.n	80099ea <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2202      	movs	r2, #2
 80099c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80099cc:	4b2b      	ldr	r3, [pc, #172]	; (8009a7c <USBD_SetConfig+0x148>)
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	461a      	mov	r2, r3
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80099d6:	4b29      	ldr	r3, [pc, #164]	; (8009a7c <USBD_SetConfig+0x148>)
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	4619      	mov	r1, r3
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f7ff f93b 	bl	8008c58 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 f9f1 	bl	8009dca <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80099e8:	e042      	b.n	8009a70 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80099ea:	4b24      	ldr	r3, [pc, #144]	; (8009a7c <USBD_SetConfig+0x148>)
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	461a      	mov	r2, r3
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d02a      	beq.n	8009a4e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	b2db      	uxtb	r3, r3
 80099fe:	4619      	mov	r1, r3
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f7ff f929 	bl	8008c58 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009a06:	4b1d      	ldr	r3, [pc, #116]	; (8009a7c <USBD_SetConfig+0x148>)
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a10:	4b1a      	ldr	r3, [pc, #104]	; (8009a7c <USBD_SetConfig+0x148>)
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	4619      	mov	r1, r3
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f7ff f902 	bl	8008c20 <USBD_SetClassConfig>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009a20:	7bfb      	ldrb	r3, [r7, #15]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00f      	beq.n	8009a46 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009a26:	6839      	ldr	r1, [r7, #0]
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 f903 	bl	8009c34 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	4619      	mov	r1, r3
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f7ff f90e 	bl	8008c58 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2202      	movs	r2, #2
 8009a40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009a44:	e014      	b.n	8009a70 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 f9bf 	bl	8009dca <USBD_CtlSendStatus>
      break;
 8009a4c:	e010      	b.n	8009a70 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 f9bb 	bl	8009dca <USBD_CtlSendStatus>
      break;
 8009a54:	e00c      	b.n	8009a70 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009a56:	6839      	ldr	r1, [r7, #0]
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 f8eb 	bl	8009c34 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a5e:	4b07      	ldr	r3, [pc, #28]	; (8009a7c <USBD_SetConfig+0x148>)
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	4619      	mov	r1, r3
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f7ff f8f7 	bl	8008c58 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009a6a:	2303      	movs	r3, #3
 8009a6c:	73fb      	strb	r3, [r7, #15]
      break;
 8009a6e:	bf00      	nop
  }

  return ret;
 8009a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3710      	adds	r7, #16
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	bf00      	nop
 8009a7c:	2000019c 	.word	0x2000019c

08009a80 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	88db      	ldrh	r3, [r3, #6]
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d004      	beq.n	8009a9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009a92:	6839      	ldr	r1, [r7, #0]
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 f8cd 	bl	8009c34 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009a9a:	e023      	b.n	8009ae4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	2b02      	cmp	r3, #2
 8009aa6:	dc02      	bgt.n	8009aae <USBD_GetConfig+0x2e>
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	dc03      	bgt.n	8009ab4 <USBD_GetConfig+0x34>
 8009aac:	e015      	b.n	8009ada <USBD_GetConfig+0x5a>
 8009aae:	2b03      	cmp	r3, #3
 8009ab0:	d00b      	beq.n	8009aca <USBD_GetConfig+0x4a>
 8009ab2:	e012      	b.n	8009ada <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	3308      	adds	r3, #8
 8009abe:	2201      	movs	r2, #1
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 f927 	bl	8009d16 <USBD_CtlSendData>
        break;
 8009ac8:	e00c      	b.n	8009ae4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	3304      	adds	r3, #4
 8009ace:	2201      	movs	r2, #1
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 f91f 	bl	8009d16 <USBD_CtlSendData>
        break;
 8009ad8:	e004      	b.n	8009ae4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009ada:	6839      	ldr	r1, [r7, #0]
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 f8a9 	bl	8009c34 <USBD_CtlError>
        break;
 8009ae2:	bf00      	nop
}
 8009ae4:	bf00      	nop
 8009ae6:	3708      	adds	r7, #8
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	3b01      	subs	r3, #1
 8009b00:	2b02      	cmp	r3, #2
 8009b02:	d81e      	bhi.n	8009b42 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	88db      	ldrh	r3, [r3, #6]
 8009b08:	2b02      	cmp	r3, #2
 8009b0a:	d004      	beq.n	8009b16 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009b0c:	6839      	ldr	r1, [r7, #0]
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 f890 	bl	8009c34 <USBD_CtlError>
        break;
 8009b14:	e01a      	b.n	8009b4c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d005      	beq.n	8009b32 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	f043 0202 	orr.w	r2, r3, #2
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	330c      	adds	r3, #12
 8009b36:	2202      	movs	r2, #2
 8009b38:	4619      	mov	r1, r3
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 f8eb 	bl	8009d16 <USBD_CtlSendData>
      break;
 8009b40:	e004      	b.n	8009b4c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009b42:	6839      	ldr	r1, [r7, #0]
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 f875 	bl	8009c34 <USBD_CtlError>
      break;
 8009b4a:	bf00      	nop
  }
}
 8009b4c:	bf00      	nop
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	885b      	ldrh	r3, [r3, #2]
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d106      	bne.n	8009b74 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 f92b 	bl	8009dca <USBD_CtlSendStatus>
  }
}
 8009b74:	bf00      	nop
 8009b76:	3708      	adds	r7, #8
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	3b01      	subs	r3, #1
 8009b90:	2b02      	cmp	r3, #2
 8009b92:	d80b      	bhi.n	8009bac <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	885b      	ldrh	r3, [r3, #2]
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d10c      	bne.n	8009bb6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 f910 	bl	8009dca <USBD_CtlSendStatus>
      }
      break;
 8009baa:	e004      	b.n	8009bb6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009bac:	6839      	ldr	r1, [r7, #0]
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 f840 	bl	8009c34 <USBD_CtlError>
      break;
 8009bb4:	e000      	b.n	8009bb8 <USBD_ClrFeature+0x3c>
      break;
 8009bb6:	bf00      	nop
  }
}
 8009bb8:	bf00      	nop
 8009bba:	3708      	adds	r7, #8
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b084      	sub	sp, #16
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	781a      	ldrb	r2, [r3, #0]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	3301      	adds	r3, #1
 8009bda:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	781a      	ldrb	r2, [r3, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	3301      	adds	r3, #1
 8009be8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009bea:	68f8      	ldr	r0, [r7, #12]
 8009bec:	f7ff fabb 	bl	8009166 <SWAPBYTE>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	3301      	adds	r3, #1
 8009c02:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009c04:	68f8      	ldr	r0, [r7, #12]
 8009c06:	f7ff faae 	bl	8009166 <SWAPBYTE>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	3301      	adds	r3, #1
 8009c16:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f7ff faa1 	bl	8009166 <SWAPBYTE>
 8009c24:	4603      	mov	r3, r0
 8009c26:	461a      	mov	r2, r3
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	80da      	strh	r2, [r3, #6]
}
 8009c2c:	bf00      	nop
 8009c2e:	3710      	adds	r7, #16
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c3e:	2180      	movs	r1, #128	; 0x80
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f001 f84f 	bl	800ace4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009c46:	2100      	movs	r1, #0
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f001 f84b 	bl	800ace4 <USBD_LL_StallEP>
}
 8009c4e:	bf00      	nop
 8009c50:	3708      	adds	r7, #8
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}

08009c56 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b086      	sub	sp, #24
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	60f8      	str	r0, [r7, #12]
 8009c5e:	60b9      	str	r1, [r7, #8]
 8009c60:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009c62:	2300      	movs	r3, #0
 8009c64:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d036      	beq.n	8009cda <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009c70:	6938      	ldr	r0, [r7, #16]
 8009c72:	f000 f836 	bl	8009ce2 <USBD_GetLen>
 8009c76:	4603      	mov	r3, r0
 8009c78:	3301      	adds	r3, #1
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	005b      	lsls	r3, r3, #1
 8009c7e:	b29a      	uxth	r2, r3
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009c84:	7dfb      	ldrb	r3, [r7, #23]
 8009c86:	68ba      	ldr	r2, [r7, #8]
 8009c88:	4413      	add	r3, r2
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	7812      	ldrb	r2, [r2, #0]
 8009c8e:	701a      	strb	r2, [r3, #0]
  idx++;
 8009c90:	7dfb      	ldrb	r3, [r7, #23]
 8009c92:	3301      	adds	r3, #1
 8009c94:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009c96:	7dfb      	ldrb	r3, [r7, #23]
 8009c98:	68ba      	ldr	r2, [r7, #8]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	2203      	movs	r2, #3
 8009c9e:	701a      	strb	r2, [r3, #0]
  idx++;
 8009ca0:	7dfb      	ldrb	r3, [r7, #23]
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009ca6:	e013      	b.n	8009cd0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009ca8:	7dfb      	ldrb	r3, [r7, #23]
 8009caa:	68ba      	ldr	r2, [r7, #8]
 8009cac:	4413      	add	r3, r2
 8009cae:	693a      	ldr	r2, [r7, #16]
 8009cb0:	7812      	ldrb	r2, [r2, #0]
 8009cb2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	613b      	str	r3, [r7, #16]
    idx++;
 8009cba:	7dfb      	ldrb	r3, [r7, #23]
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009cc0:	7dfb      	ldrb	r3, [r7, #23]
 8009cc2:	68ba      	ldr	r2, [r7, #8]
 8009cc4:	4413      	add	r3, r2
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	701a      	strb	r2, [r3, #0]
    idx++;
 8009cca:	7dfb      	ldrb	r3, [r7, #23]
 8009ccc:	3301      	adds	r3, #1
 8009cce:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d1e7      	bne.n	8009ca8 <USBD_GetString+0x52>
 8009cd8:	e000      	b.n	8009cdc <USBD_GetString+0x86>
    return;
 8009cda:	bf00      	nop
  }
}
 8009cdc:	3718      	adds	r7, #24
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}

08009ce2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009ce2:	b480      	push	{r7}
 8009ce4:	b085      	sub	sp, #20
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009cea:	2300      	movs	r3, #0
 8009cec:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009cf2:	e005      	b.n	8009d00 <USBD_GetLen+0x1e>
  {
    len++;
 8009cf4:	7bfb      	ldrb	r3, [r7, #15]
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d1f5      	bne.n	8009cf4 <USBD_GetLen+0x12>
  }

  return len;
 8009d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3714      	adds	r7, #20
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr

08009d16 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b084      	sub	sp, #16
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	60f8      	str	r0, [r7, #12]
 8009d1e:	60b9      	str	r1, [r7, #8]
 8009d20:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2202      	movs	r2, #2
 8009d26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	68ba      	ldr	r2, [r7, #8]
 8009d3a:	2100      	movs	r1, #0
 8009d3c:	68f8      	ldr	r0, [r7, #12]
 8009d3e:	f001 f85a 	bl	800adf6 <USBD_LL_Transmit>

  return USBD_OK;
 8009d42:	2300      	movs	r3, #0
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3710      	adds	r7, #16
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	68ba      	ldr	r2, [r7, #8]
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	68f8      	ldr	r0, [r7, #12]
 8009d60:	f001 f849 	bl	800adf6 <USBD_LL_Transmit>

  return USBD_OK;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b084      	sub	sp, #16
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	60f8      	str	r0, [r7, #12]
 8009d76:	60b9      	str	r1, [r7, #8]
 8009d78:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2203      	movs	r2, #3
 8009d7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	68ba      	ldr	r2, [r7, #8]
 8009d96:	2100      	movs	r1, #0
 8009d98:	68f8      	ldr	r0, [r7, #12]
 8009d9a:	f001 f84d 	bl	800ae38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d9e:	2300      	movs	r3, #0
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3710      	adds	r7, #16
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	60b9      	str	r1, [r7, #8]
 8009db2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	68ba      	ldr	r2, [r7, #8]
 8009db8:	2100      	movs	r1, #0
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f001 f83c 	bl	800ae38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009dc0:	2300      	movs	r3, #0
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b082      	sub	sp, #8
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2204      	movs	r2, #4
 8009dd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009dda:	2300      	movs	r3, #0
 8009ddc:	2200      	movs	r2, #0
 8009dde:	2100      	movs	r1, #0
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f001 f808 	bl	800adf6 <USBD_LL_Transmit>

  return USBD_OK;
 8009de6:	2300      	movs	r3, #0
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3708      	adds	r7, #8
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2205      	movs	r2, #5
 8009dfc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e00:	2300      	movs	r3, #0
 8009e02:	2200      	movs	r2, #0
 8009e04:	2100      	movs	r1, #0
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f001 f816 	bl	800ae38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3708      	adds	r7, #8
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
	...

08009e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009e18:	b5b0      	push	{r4, r5, r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009e1e:	f7f6 fbd9 	bl	80005d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009e22:	f000 f85f 	bl	8009ee4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009e26:	f000 f9dd 	bl	800a1e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8009e2a:	f000 f9bb 	bl	800a1a4 <MX_DMA_Init>
  MX_RTC_Init();
 8009e2e:	f000 f939 	bl	800a0a4 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 8009e32:	f000 f95d 	bl	800a0f0 <MX_SDIO_SD_Init>
  MX_I2C1_Init();
 8009e36:	f000 f8d9 	bl	8009fec <MX_I2C1_Init>
  MX_I2C2_Init();
 8009e3a:	f000 f905 	bl	800a048 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8009e3e:	f000 f987 	bl	800a150 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8009e42:	f000 fc89 	bl	800a758 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, SET);
 8009e46:	2201      	movs	r2, #1
 8009e48:	2101      	movs	r1, #1
 8009e4a:	4822      	ldr	r0, [pc, #136]	; (8009ed4 <main+0xbc>)
 8009e4c:	f7f7 fa08 	bl	8001260 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, SET);
 8009e50:	2201      	movs	r2, #1
 8009e52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009e56:	481f      	ldr	r0, [pc, #124]	; (8009ed4 <main+0xbc>)
 8009e58:	f7f7 fa02 	bl	8001260 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, SET);
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009e62:	481c      	ldr	r0, [pc, #112]	; (8009ed4 <main+0xbc>)
 8009e64:	f7f7 f9fc 	bl	8001260 <HAL_GPIO_WritePin>

  uint8_t u8DeviceAddressList = 0x0E;
 8009e68:	230e      	movs	r3, #14
 8009e6a:	70fb      	strb	r3, [r7, #3]

  MCP9808_InitCommunicationI2C1(&hi2c1, &u8DeviceAddressList, 1);
 8009e6c:	1cfb      	adds	r3, r7, #3
 8009e6e:	2201      	movs	r2, #1
 8009e70:	4619      	mov	r1, r3
 8009e72:	4819      	ldr	r0, [pc, #100]	; (8009ed8 <main+0xc0>)
 8009e74:	f7f6 fb84 	bl	8000580 <MCP9808_InitCommunicationI2C1>

  long long counter = 0;
 8009e78:	f04f 0200 	mov.w	r2, #0
 8009e7c:	f04f 0300 	mov.w	r3, #0
 8009e80:	e9c7 2302 	strd	r2, r3, [r7, #8]
  float output = 0.0;
 8009e84:	f04f 0300 	mov.w	r3, #0
 8009e88:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8009e8a:	2104      	movs	r1, #4
 8009e8c:	4811      	ldr	r0, [pc, #68]	; (8009ed4 <main+0xbc>)
 8009e8e:	f7f7 fa00 	bl	8001292 <HAL_GPIO_TogglePin>
	  counter++;
 8009e92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009e96:	1c54      	adds	r4, r2, #1
 8009e98:	f143 0500 	adc.w	r5, r3, #0
 8009e9c:	e9c7 4502 	strd	r4, r5, [r7, #8]
	  if(counter >= 72000)
 8009ea0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009ea4:	480d      	ldr	r0, [pc, #52]	; (8009edc <main+0xc4>)
 8009ea6:	f04f 0100 	mov.w	r1, #0
 8009eaa:	4290      	cmp	r0, r2
 8009eac:	eb71 0303 	sbcs.w	r3, r1, r3
 8009eb0:	daeb      	bge.n	8009e8a <main+0x72>
	  {
		  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8009eb2:	2102      	movs	r1, #2
 8009eb4:	4807      	ldr	r0, [pc, #28]	; (8009ed4 <main+0xbc>)
 8009eb6:	f7f7 f9ec 	bl	8001292 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8009eba:	2101      	movs	r1, #1
 8009ebc:	4808      	ldr	r0, [pc, #32]	; (8009ee0 <main+0xc8>)
 8009ebe:	f7f7 f9e8 	bl	8001292 <HAL_GPIO_TogglePin>
		  MCP9808_CommunicateTaskI2C1();
 8009ec2:	f7f6 fb05 	bl	80004d0 <MCP9808_CommunicateTaskI2C1>
		  counter = 0;
 8009ec6:	f04f 0200 	mov.w	r2, #0
 8009eca:	f04f 0300 	mov.w	r3, #0
 8009ece:	e9c7 2302 	strd	r2, r3, [r7, #8]
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8009ed2:	e7da      	b.n	8009e8a <main+0x72>
 8009ed4:	40020800 	.word	0x40020800
 8009ed8:	20000454 	.word	0x20000454
 8009edc:	0001193f 	.word	0x0001193f
 8009ee0:	40020000 	.word	0x40020000

08009ee4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b09a      	sub	sp, #104	; 0x68
 8009ee8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009eea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009eee:	2230      	movs	r2, #48	; 0x30
 8009ef0:	2100      	movs	r1, #0
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f001 f976 	bl	800b1e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009efc:	2200      	movs	r2, #0
 8009efe:	601a      	str	r2, [r3, #0]
 8009f00:	605a      	str	r2, [r3, #4]
 8009f02:	609a      	str	r2, [r3, #8]
 8009f04:	60da      	str	r2, [r3, #12]
 8009f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009f08:	f107 030c 	add.w	r3, r7, #12
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	601a      	str	r2, [r3, #0]
 8009f10:	605a      	str	r2, [r3, #4]
 8009f12:	609a      	str	r2, [r3, #8]
 8009f14:	60da      	str	r2, [r3, #12]
 8009f16:	611a      	str	r2, [r3, #16]
 8009f18:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	60bb      	str	r3, [r7, #8]
 8009f1e:	4b31      	ldr	r3, [pc, #196]	; (8009fe4 <SystemClock_Config+0x100>)
 8009f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f22:	4a30      	ldr	r2, [pc, #192]	; (8009fe4 <SystemClock_Config+0x100>)
 8009f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f28:	6413      	str	r3, [r2, #64]	; 0x40
 8009f2a:	4b2e      	ldr	r3, [pc, #184]	; (8009fe4 <SystemClock_Config+0x100>)
 8009f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f32:	60bb      	str	r3, [r7, #8]
 8009f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009f36:	2300      	movs	r3, #0
 8009f38:	607b      	str	r3, [r7, #4]
 8009f3a:	4b2b      	ldr	r3, [pc, #172]	; (8009fe8 <SystemClock_Config+0x104>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4a2a      	ldr	r2, [pc, #168]	; (8009fe8 <SystemClock_Config+0x104>)
 8009f40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f44:	6013      	str	r3, [r2, #0]
 8009f46:	4b28      	ldr	r3, [pc, #160]	; (8009fe8 <SystemClock_Config+0x104>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009f4e:	607b      	str	r3, [r7, #4]
 8009f50:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8009f52:	2305      	movs	r3, #5
 8009f54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009f56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009f60:	2302      	movs	r3, #2
 8009f62:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009f64:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009f68:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 12;
 8009f6a:	230c      	movs	r3, #12
 8009f6c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 72;
 8009f6e:	2348      	movs	r3, #72	; 0x48
 8009f70:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009f72:	2302      	movs	r3, #2
 8009f74:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8009f76:	2303      	movs	r3, #3
 8009f78:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009f7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7fa fcd0 	bl	8004924 <HAL_RCC_OscConfig>
 8009f84:	4603      	mov	r3, r0
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d001      	beq.n	8009f8e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8009f8a:	f000 f9ad 	bl	800a2e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009f8e:	230f      	movs	r3, #15
 8009f90:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009f92:	2302      	movs	r3, #2
 8009f94:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009f96:	2300      	movs	r3, #0
 8009f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8009f9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f9e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8009fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fa8:	2102      	movs	r1, #2
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7fa ff30 	bl	8004e10 <HAL_RCC_ClockConfig>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d001      	beq.n	8009fba <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8009fb6:	f000 f997 	bl	800a2e8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8009fba:	2302      	movs	r3, #2
 8009fbc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8009fbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fc2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009fc4:	f107 030c 	add.w	r3, r7, #12
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7fb f919 	bl	8005200 <HAL_RCCEx_PeriphCLKConfig>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d001      	beq.n	8009fd8 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8009fd4:	f000 f988 	bl	800a2e8 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8009fd8:	f7fb f800 	bl	8004fdc <HAL_RCC_EnableCSS>
}
 8009fdc:	bf00      	nop
 8009fde:	3768      	adds	r7, #104	; 0x68
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	40023800 	.word	0x40023800
 8009fe8:	40007000 	.word	0x40007000

08009fec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009ff0:	4b12      	ldr	r3, [pc, #72]	; (800a03c <MX_I2C1_Init+0x50>)
 8009ff2:	4a13      	ldr	r2, [pc, #76]	; (800a040 <MX_I2C1_Init+0x54>)
 8009ff4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8009ff6:	4b11      	ldr	r3, [pc, #68]	; (800a03c <MX_I2C1_Init+0x50>)
 8009ff8:	4a12      	ldr	r2, [pc, #72]	; (800a044 <MX_I2C1_Init+0x58>)
 8009ffa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009ffc:	4b0f      	ldr	r3, [pc, #60]	; (800a03c <MX_I2C1_Init+0x50>)
 8009ffe:	2200      	movs	r2, #0
 800a000:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800a002:	4b0e      	ldr	r3, [pc, #56]	; (800a03c <MX_I2C1_Init+0x50>)
 800a004:	2200      	movs	r2, #0
 800a006:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a008:	4b0c      	ldr	r3, [pc, #48]	; (800a03c <MX_I2C1_Init+0x50>)
 800a00a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a00e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a010:	4b0a      	ldr	r3, [pc, #40]	; (800a03c <MX_I2C1_Init+0x50>)
 800a012:	2200      	movs	r2, #0
 800a014:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800a016:	4b09      	ldr	r3, [pc, #36]	; (800a03c <MX_I2C1_Init+0x50>)
 800a018:	2200      	movs	r2, #0
 800a01a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a01c:	4b07      	ldr	r3, [pc, #28]	; (800a03c <MX_I2C1_Init+0x50>)
 800a01e:	2200      	movs	r2, #0
 800a020:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a022:	4b06      	ldr	r3, [pc, #24]	; (800a03c <MX_I2C1_Init+0x50>)
 800a024:	2200      	movs	r2, #0
 800a026:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a028:	4804      	ldr	r0, [pc, #16]	; (800a03c <MX_I2C1_Init+0x50>)
 800a02a:	f7f7 f94d 	bl	80012c8 <HAL_I2C_Init>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d001      	beq.n	800a038 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800a034:	f000 f958 	bl	800a2e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a038:	bf00      	nop
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	20000454 	.word	0x20000454
 800a040:	40005400 	.word	0x40005400
 800a044:	000186a0 	.word	0x000186a0

0800a048 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800a04c:	4b12      	ldr	r3, [pc, #72]	; (800a098 <MX_I2C2_Init+0x50>)
 800a04e:	4a13      	ldr	r2, [pc, #76]	; (800a09c <MX_I2C2_Init+0x54>)
 800a050:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800a052:	4b11      	ldr	r3, [pc, #68]	; (800a098 <MX_I2C2_Init+0x50>)
 800a054:	4a12      	ldr	r2, [pc, #72]	; (800a0a0 <MX_I2C2_Init+0x58>)
 800a056:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a058:	4b0f      	ldr	r3, [pc, #60]	; (800a098 <MX_I2C2_Init+0x50>)
 800a05a:	2200      	movs	r2, #0
 800a05c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800a05e:	4b0e      	ldr	r3, [pc, #56]	; (800a098 <MX_I2C2_Init+0x50>)
 800a060:	2200      	movs	r2, #0
 800a062:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a064:	4b0c      	ldr	r3, [pc, #48]	; (800a098 <MX_I2C2_Init+0x50>)
 800a066:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a06a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a06c:	4b0a      	ldr	r3, [pc, #40]	; (800a098 <MX_I2C2_Init+0x50>)
 800a06e:	2200      	movs	r2, #0
 800a070:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800a072:	4b09      	ldr	r3, [pc, #36]	; (800a098 <MX_I2C2_Init+0x50>)
 800a074:	2200      	movs	r2, #0
 800a076:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a078:	4b07      	ldr	r3, [pc, #28]	; (800a098 <MX_I2C2_Init+0x50>)
 800a07a:	2200      	movs	r2, #0
 800a07c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a07e:	4b06      	ldr	r3, [pc, #24]	; (800a098 <MX_I2C2_Init+0x50>)
 800a080:	2200      	movs	r2, #0
 800a082:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800a084:	4804      	ldr	r0, [pc, #16]	; (800a098 <MX_I2C2_Init+0x50>)
 800a086:	f7f7 f91f 	bl	80012c8 <HAL_I2C_Init>
 800a08a:	4603      	mov	r3, r0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d001      	beq.n	800a094 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800a090:	f000 f92a 	bl	800a2e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800a094:	bf00      	nop
 800a096:	bd80      	pop	{r7, pc}
 800a098:	200004a8 	.word	0x200004a8
 800a09c:	40005800 	.word	0x40005800
 800a0a0:	000186a0 	.word	0x000186a0

0800a0a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800a0a8:	4b0f      	ldr	r3, [pc, #60]	; (800a0e8 <MX_RTC_Init+0x44>)
 800a0aa:	4a10      	ldr	r2, [pc, #64]	; (800a0ec <MX_RTC_Init+0x48>)
 800a0ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800a0ae:	4b0e      	ldr	r3, [pc, #56]	; (800a0e8 <MX_RTC_Init+0x44>)
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800a0b4:	4b0c      	ldr	r3, [pc, #48]	; (800a0e8 <MX_RTC_Init+0x44>)
 800a0b6:	227f      	movs	r2, #127	; 0x7f
 800a0b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800a0ba:	4b0b      	ldr	r3, [pc, #44]	; (800a0e8 <MX_RTC_Init+0x44>)
 800a0bc:	22ff      	movs	r2, #255	; 0xff
 800a0be:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a0c0:	4b09      	ldr	r3, [pc, #36]	; (800a0e8 <MX_RTC_Init+0x44>)
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a0c6:	4b08      	ldr	r3, [pc, #32]	; (800a0e8 <MX_RTC_Init+0x44>)
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a0cc:	4b06      	ldr	r3, [pc, #24]	; (800a0e8 <MX_RTC_Init+0x44>)
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800a0d2:	4805      	ldr	r0, [pc, #20]	; (800a0e8 <MX_RTC_Init+0x44>)
 800a0d4:	f7fb f984 	bl	80053e0 <HAL_RTC_Init>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d001      	beq.n	800a0e2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800a0de:	f000 f903 	bl	800a2e8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800a0e2:	bf00      	nop
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	20000540 	.word	0x20000540
 800a0ec:	40002800 	.word	0x40002800

0800a0f0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800a0f4:	4b14      	ldr	r3, [pc, #80]	; (800a148 <MX_SDIO_SD_Init+0x58>)
 800a0f6:	4a15      	ldr	r2, [pc, #84]	; (800a14c <MX_SDIO_SD_Init+0x5c>)
 800a0f8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800a0fa:	4b13      	ldr	r3, [pc, #76]	; (800a148 <MX_SDIO_SD_Init+0x58>)
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800a100:	4b11      	ldr	r3, [pc, #68]	; (800a148 <MX_SDIO_SD_Init+0x58>)
 800a102:	2200      	movs	r2, #0
 800a104:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a106:	4b10      	ldr	r3, [pc, #64]	; (800a148 <MX_SDIO_SD_Init+0x58>)
 800a108:	2200      	movs	r2, #0
 800a10a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800a10c:	4b0e      	ldr	r3, [pc, #56]	; (800a148 <MX_SDIO_SD_Init+0x58>)
 800a10e:	2200      	movs	r2, #0
 800a110:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a112:	4b0d      	ldr	r3, [pc, #52]	; (800a148 <MX_SDIO_SD_Init+0x58>)
 800a114:	2200      	movs	r2, #0
 800a116:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800a118:	4b0b      	ldr	r3, [pc, #44]	; (800a148 <MX_SDIO_SD_Init+0x58>)
 800a11a:	2200      	movs	r2, #0
 800a11c:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 800a11e:	480a      	ldr	r0, [pc, #40]	; (800a148 <MX_SDIO_SD_Init+0x58>)
 800a120:	f7fb fa43 	bl	80055aa <HAL_SD_Init>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	d001      	beq.n	800a12e <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 800a12a:	f000 f8dd 	bl	800a2e8 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800a12e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a132:	4805      	ldr	r0, [pc, #20]	; (800a148 <MX_SDIO_SD_Init+0x58>)
 800a134:	f7fb fc8c 	bl	8005a50 <HAL_SD_ConfigWideBusOperation>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d001      	beq.n	800a142 <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 800a13e:	f000 f8d3 	bl	800a2e8 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800a142:	bf00      	nop
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	20000560 	.word	0x20000560
 800a14c:	40012c00 	.word	0x40012c00

0800a150 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a154:	4b11      	ldr	r3, [pc, #68]	; (800a19c <MX_USART1_UART_Init+0x4c>)
 800a156:	4a12      	ldr	r2, [pc, #72]	; (800a1a0 <MX_USART1_UART_Init+0x50>)
 800a158:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a15a:	4b10      	ldr	r3, [pc, #64]	; (800a19c <MX_USART1_UART_Init+0x4c>)
 800a15c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a160:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a162:	4b0e      	ldr	r3, [pc, #56]	; (800a19c <MX_USART1_UART_Init+0x4c>)
 800a164:	2200      	movs	r2, #0
 800a166:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a168:	4b0c      	ldr	r3, [pc, #48]	; (800a19c <MX_USART1_UART_Init+0x4c>)
 800a16a:	2200      	movs	r2, #0
 800a16c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a16e:	4b0b      	ldr	r3, [pc, #44]	; (800a19c <MX_USART1_UART_Init+0x4c>)
 800a170:	2200      	movs	r2, #0
 800a172:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a174:	4b09      	ldr	r3, [pc, #36]	; (800a19c <MX_USART1_UART_Init+0x4c>)
 800a176:	220c      	movs	r2, #12
 800a178:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a17a:	4b08      	ldr	r3, [pc, #32]	; (800a19c <MX_USART1_UART_Init+0x4c>)
 800a17c:	2200      	movs	r2, #0
 800a17e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a180:	4b06      	ldr	r3, [pc, #24]	; (800a19c <MX_USART1_UART_Init+0x4c>)
 800a182:	2200      	movs	r2, #0
 800a184:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a186:	4805      	ldr	r0, [pc, #20]	; (800a19c <MX_USART1_UART_Init+0x4c>)
 800a188:	f7fb ffbf 	bl	800610a <HAL_UART_Init>
 800a18c:	4603      	mov	r3, r0
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d001      	beq.n	800a196 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800a192:	f000 f8a9 	bl	800a2e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a196:	bf00      	nop
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	200004fc 	.word	0x200004fc
 800a1a0:	40011000 	.word	0x40011000

0800a1a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	607b      	str	r3, [r7, #4]
 800a1ae:	4b0c      	ldr	r3, [pc, #48]	; (800a1e0 <MX_DMA_Init+0x3c>)
 800a1b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1b2:	4a0b      	ldr	r2, [pc, #44]	; (800a1e0 <MX_DMA_Init+0x3c>)
 800a1b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a1b8:	6313      	str	r3, [r2, #48]	; 0x30
 800a1ba:	4b09      	ldr	r3, [pc, #36]	; (800a1e0 <MX_DMA_Init+0x3c>)
 800a1bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a1c2:	607b      	str	r3, [r7, #4]
 800a1c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	2100      	movs	r1, #0
 800a1ca:	200c      	movs	r0, #12
 800a1cc:	f7f6 fb73 	bl	80008b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800a1d0:	200c      	movs	r0, #12
 800a1d2:	f7f6 fb8c 	bl	80008ee <HAL_NVIC_EnableIRQ>

}
 800a1d6:	bf00      	nop
 800a1d8:	3708      	adds	r7, #8
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	40023800 	.word	0x40023800

0800a1e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b08a      	sub	sp, #40	; 0x28
 800a1e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1ea:	f107 0314 	add.w	r3, r7, #20
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	601a      	str	r2, [r3, #0]
 800a1f2:	605a      	str	r2, [r3, #4]
 800a1f4:	609a      	str	r2, [r3, #8]
 800a1f6:	60da      	str	r2, [r3, #12]
 800a1f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	613b      	str	r3, [r7, #16]
 800a1fe:	4b37      	ldr	r3, [pc, #220]	; (800a2dc <MX_GPIO_Init+0xf8>)
 800a200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a202:	4a36      	ldr	r2, [pc, #216]	; (800a2dc <MX_GPIO_Init+0xf8>)
 800a204:	f043 0304 	orr.w	r3, r3, #4
 800a208:	6313      	str	r3, [r2, #48]	; 0x30
 800a20a:	4b34      	ldr	r3, [pc, #208]	; (800a2dc <MX_GPIO_Init+0xf8>)
 800a20c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a20e:	f003 0304 	and.w	r3, r3, #4
 800a212:	613b      	str	r3, [r7, #16]
 800a214:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a216:	2300      	movs	r3, #0
 800a218:	60fb      	str	r3, [r7, #12]
 800a21a:	4b30      	ldr	r3, [pc, #192]	; (800a2dc <MX_GPIO_Init+0xf8>)
 800a21c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a21e:	4a2f      	ldr	r2, [pc, #188]	; (800a2dc <MX_GPIO_Init+0xf8>)
 800a220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a224:	6313      	str	r3, [r2, #48]	; 0x30
 800a226:	4b2d      	ldr	r3, [pc, #180]	; (800a2dc <MX_GPIO_Init+0xf8>)
 800a228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a22a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a22e:	60fb      	str	r3, [r7, #12]
 800a230:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a232:	2300      	movs	r3, #0
 800a234:	60bb      	str	r3, [r7, #8]
 800a236:	4b29      	ldr	r3, [pc, #164]	; (800a2dc <MX_GPIO_Init+0xf8>)
 800a238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a23a:	4a28      	ldr	r2, [pc, #160]	; (800a2dc <MX_GPIO_Init+0xf8>)
 800a23c:	f043 0301 	orr.w	r3, r3, #1
 800a240:	6313      	str	r3, [r2, #48]	; 0x30
 800a242:	4b26      	ldr	r3, [pc, #152]	; (800a2dc <MX_GPIO_Init+0xf8>)
 800a244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a246:	f003 0301 	and.w	r3, r3, #1
 800a24a:	60bb      	str	r3, [r7, #8]
 800a24c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a24e:	2300      	movs	r3, #0
 800a250:	607b      	str	r3, [r7, #4]
 800a252:	4b22      	ldr	r3, [pc, #136]	; (800a2dc <MX_GPIO_Init+0xf8>)
 800a254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a256:	4a21      	ldr	r2, [pc, #132]	; (800a2dc <MX_GPIO_Init+0xf8>)
 800a258:	f043 0302 	orr.w	r3, r3, #2
 800a25c:	6313      	str	r3, [r2, #48]	; 0x30
 800a25e:	4b1f      	ldr	r3, [pc, #124]	; (800a2dc <MX_GPIO_Init+0xf8>)
 800a260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a262:	f003 0302 	and.w	r3, r3, #2
 800a266:	607b      	str	r3, [r7, #4]
 800a268:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, I2C2_VDD_Pin|LED0_Pin|LED1_Pin|LED2_Pin
 800a26a:	2200      	movs	r2, #0
 800a26c:	f243 010f 	movw	r1, #12303	; 0x300f
 800a270:	481b      	ldr	r0, [pc, #108]	; (800a2e0 <MX_GPIO_Init+0xfc>)
 800a272:	f7f6 fff5 	bl	8001260 <HAL_GPIO_WritePin>
                          |LED3_Pin|I2C1_VDD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PIN_0_Pin|PIN_1_Pin|PIN_2_Pin, GPIO_PIN_RESET);
 800a276:	2200      	movs	r2, #0
 800a278:	2107      	movs	r1, #7
 800a27a:	481a      	ldr	r0, [pc, #104]	; (800a2e4 <MX_GPIO_Init+0x100>)
 800a27c:	f7f6 fff0 	bl	8001260 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : I2C2_VDD_Pin LED0_Pin LED1_Pin LED2_Pin
                           LED3_Pin I2C1_VDD_Pin */
  GPIO_InitStruct.Pin = I2C2_VDD_Pin|LED0_Pin|LED1_Pin|LED2_Pin
 800a280:	f243 030f 	movw	r3, #12303	; 0x300f
 800a284:	617b      	str	r3, [r7, #20]
                          |LED3_Pin|I2C1_VDD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a286:	2301      	movs	r3, #1
 800a288:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a28a:	2300      	movs	r3, #0
 800a28c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a28e:	2300      	movs	r3, #0
 800a290:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a292:	f107 0314 	add.w	r3, r7, #20
 800a296:	4619      	mov	r1, r3
 800a298:	4811      	ldr	r0, [pc, #68]	; (800a2e0 <MX_GPIO_Init+0xfc>)
 800a29a:	f7f6 fe5d 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN_0_Pin PIN_1_Pin PIN_2_Pin */
  GPIO_InitStruct.Pin = PIN_0_Pin|PIN_1_Pin|PIN_2_Pin;
 800a29e:	2307      	movs	r3, #7
 800a2a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a2ae:	f107 0314 	add.w	r3, r7, #20
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	480b      	ldr	r0, [pc, #44]	; (800a2e4 <MX_GPIO_Init+0x100>)
 800a2b6:	f7f6 fe4f 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VSENSE_Pin */
  GPIO_InitStruct.Pin = USB_VSENSE_Pin;
 800a2ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_VSENSE_GPIO_Port, &GPIO_InitStruct);
 800a2c8:	f107 0314 	add.w	r3, r7, #20
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	4805      	ldr	r0, [pc, #20]	; (800a2e4 <MX_GPIO_Init+0x100>)
 800a2d0:	f7f6 fe42 	bl	8000f58 <HAL_GPIO_Init>

}
 800a2d4:	bf00      	nop
 800a2d6:	3728      	adds	r7, #40	; 0x28
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}
 800a2dc:	40023800 	.word	0x40023800
 800a2e0:	40020800 	.word	0x40020800
 800a2e4:	40020000 	.word	0x40020000

0800a2e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a2ec:	b672      	cpsid	i
}
 800a2ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a2f0:	e7fe      	b.n	800a2f0 <Error_Handler+0x8>
	...

0800a2f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b083      	sub	sp, #12
 800a2f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	607b      	str	r3, [r7, #4]
 800a2fe:	4b10      	ldr	r3, [pc, #64]	; (800a340 <HAL_MspInit+0x4c>)
 800a300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a302:	4a0f      	ldr	r2, [pc, #60]	; (800a340 <HAL_MspInit+0x4c>)
 800a304:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a308:	6453      	str	r3, [r2, #68]	; 0x44
 800a30a:	4b0d      	ldr	r3, [pc, #52]	; (800a340 <HAL_MspInit+0x4c>)
 800a30c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a30e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a312:	607b      	str	r3, [r7, #4]
 800a314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a316:	2300      	movs	r3, #0
 800a318:	603b      	str	r3, [r7, #0]
 800a31a:	4b09      	ldr	r3, [pc, #36]	; (800a340 <HAL_MspInit+0x4c>)
 800a31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a31e:	4a08      	ldr	r2, [pc, #32]	; (800a340 <HAL_MspInit+0x4c>)
 800a320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a324:	6413      	str	r3, [r2, #64]	; 0x40
 800a326:	4b06      	ldr	r3, [pc, #24]	; (800a340 <HAL_MspInit+0x4c>)
 800a328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a32a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a32e:	603b      	str	r3, [r7, #0]
 800a330:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a332:	bf00      	nop
 800a334:	370c      	adds	r7, #12
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr
 800a33e:	bf00      	nop
 800a340:	40023800 	.word	0x40023800

0800a344 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b08c      	sub	sp, #48	; 0x30
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a34c:	f107 031c 	add.w	r3, r7, #28
 800a350:	2200      	movs	r2, #0
 800a352:	601a      	str	r2, [r3, #0]
 800a354:	605a      	str	r2, [r3, #4]
 800a356:	609a      	str	r2, [r3, #8]
 800a358:	60da      	str	r2, [r3, #12]
 800a35a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a55      	ldr	r2, [pc, #340]	; (800a4b8 <HAL_I2C_MspInit+0x174>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d162      	bne.n	800a42c <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a366:	2300      	movs	r3, #0
 800a368:	61bb      	str	r3, [r7, #24]
 800a36a:	4b54      	ldr	r3, [pc, #336]	; (800a4bc <HAL_I2C_MspInit+0x178>)
 800a36c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a36e:	4a53      	ldr	r2, [pc, #332]	; (800a4bc <HAL_I2C_MspInit+0x178>)
 800a370:	f043 0302 	orr.w	r3, r3, #2
 800a374:	6313      	str	r3, [r2, #48]	; 0x30
 800a376:	4b51      	ldr	r3, [pc, #324]	; (800a4bc <HAL_I2C_MspInit+0x178>)
 800a378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a37a:	f003 0302 	and.w	r3, r3, #2
 800a37e:	61bb      	str	r3, [r7, #24]
 800a380:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a382:	23c0      	movs	r3, #192	; 0xc0
 800a384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a386:	2312      	movs	r3, #18
 800a388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a38a:	2301      	movs	r3, #1
 800a38c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a38e:	2303      	movs	r3, #3
 800a390:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a392:	2304      	movs	r3, #4
 800a394:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a396:	f107 031c 	add.w	r3, r7, #28
 800a39a:	4619      	mov	r1, r3
 800a39c:	4848      	ldr	r0, [pc, #288]	; (800a4c0 <HAL_I2C_MspInit+0x17c>)
 800a39e:	f7f6 fddb 	bl	8000f58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	617b      	str	r3, [r7, #20]
 800a3a6:	4b45      	ldr	r3, [pc, #276]	; (800a4bc <HAL_I2C_MspInit+0x178>)
 800a3a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3aa:	4a44      	ldr	r2, [pc, #272]	; (800a4bc <HAL_I2C_MspInit+0x178>)
 800a3ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a3b0:	6413      	str	r3, [r2, #64]	; 0x40
 800a3b2:	4b42      	ldr	r3, [pc, #264]	; (800a4bc <HAL_I2C_MspInit+0x178>)
 800a3b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a3ba:	617b      	str	r3, [r7, #20]
 800a3bc:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 800a3be:	4b41      	ldr	r3, [pc, #260]	; (800a4c4 <HAL_I2C_MspInit+0x180>)
 800a3c0:	4a41      	ldr	r2, [pc, #260]	; (800a4c8 <HAL_I2C_MspInit+0x184>)
 800a3c2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800a3c4:	4b3f      	ldr	r3, [pc, #252]	; (800a4c4 <HAL_I2C_MspInit+0x180>)
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a3ca:	4b3e      	ldr	r3, [pc, #248]	; (800a4c4 <HAL_I2C_MspInit+0x180>)
 800a3cc:	2240      	movs	r2, #64	; 0x40
 800a3ce:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a3d0:	4b3c      	ldr	r3, [pc, #240]	; (800a4c4 <HAL_I2C_MspInit+0x180>)
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a3d6:	4b3b      	ldr	r3, [pc, #236]	; (800a4c4 <HAL_I2C_MspInit+0x180>)
 800a3d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a3dc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a3de:	4b39      	ldr	r3, [pc, #228]	; (800a4c4 <HAL_I2C_MspInit+0x180>)
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a3e4:	4b37      	ldr	r3, [pc, #220]	; (800a4c4 <HAL_I2C_MspInit+0x180>)
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800a3ea:	4b36      	ldr	r3, [pc, #216]	; (800a4c4 <HAL_I2C_MspInit+0x180>)
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800a3f0:	4b34      	ldr	r3, [pc, #208]	; (800a4c4 <HAL_I2C_MspInit+0x180>)
 800a3f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a3f6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a3f8:	4b32      	ldr	r3, [pc, #200]	; (800a4c4 <HAL_I2C_MspInit+0x180>)
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800a3fe:	4831      	ldr	r0, [pc, #196]	; (800a4c4 <HAL_I2C_MspInit+0x180>)
 800a400:	f7f6 fa90 	bl	8000924 <HAL_DMA_Init>
 800a404:	4603      	mov	r3, r0
 800a406:	2b00      	cmp	r3, #0
 800a408:	d001      	beq.n	800a40e <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 800a40a:	f7ff ff6d 	bl	800a2e8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4a2c      	ldr	r2, [pc, #176]	; (800a4c4 <HAL_I2C_MspInit+0x180>)
 800a412:	635a      	str	r2, [r3, #52]	; 0x34
 800a414:	4a2b      	ldr	r2, [pc, #172]	; (800a4c4 <HAL_I2C_MspInit+0x180>)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800a41a:	2200      	movs	r2, #0
 800a41c:	2100      	movs	r1, #0
 800a41e:	201f      	movs	r0, #31
 800a420:	f7f6 fa49 	bl	80008b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800a424:	201f      	movs	r0, #31
 800a426:	f7f6 fa62 	bl	80008ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800a42a:	e041      	b.n	800a4b0 <HAL_I2C_MspInit+0x16c>
  else if(hi2c->Instance==I2C2)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a26      	ldr	r2, [pc, #152]	; (800a4cc <HAL_I2C_MspInit+0x188>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d13c      	bne.n	800a4b0 <HAL_I2C_MspInit+0x16c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a436:	2300      	movs	r3, #0
 800a438:	613b      	str	r3, [r7, #16]
 800a43a:	4b20      	ldr	r3, [pc, #128]	; (800a4bc <HAL_I2C_MspInit+0x178>)
 800a43c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a43e:	4a1f      	ldr	r2, [pc, #124]	; (800a4bc <HAL_I2C_MspInit+0x178>)
 800a440:	f043 0302 	orr.w	r3, r3, #2
 800a444:	6313      	str	r3, [r2, #48]	; 0x30
 800a446:	4b1d      	ldr	r3, [pc, #116]	; (800a4bc <HAL_I2C_MspInit+0x178>)
 800a448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a44a:	f003 0302 	and.w	r3, r3, #2
 800a44e:	613b      	str	r3, [r7, #16]
 800a450:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800a452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a458:	2312      	movs	r3, #18
 800a45a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a45c:	2301      	movs	r3, #1
 800a45e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a460:	2303      	movs	r3, #3
 800a462:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a464:	2304      	movs	r3, #4
 800a466:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a468:	f107 031c 	add.w	r3, r7, #28
 800a46c:	4619      	mov	r1, r3
 800a46e:	4814      	ldr	r0, [pc, #80]	; (800a4c0 <HAL_I2C_MspInit+0x17c>)
 800a470:	f7f6 fd72 	bl	8000f58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800a474:	2308      	movs	r3, #8
 800a476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a478:	2312      	movs	r3, #18
 800a47a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a47c:	2301      	movs	r3, #1
 800a47e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a480:	2303      	movs	r3, #3
 800a482:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800a484:	2309      	movs	r3, #9
 800a486:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a488:	f107 031c 	add.w	r3, r7, #28
 800a48c:	4619      	mov	r1, r3
 800a48e:	480c      	ldr	r0, [pc, #48]	; (800a4c0 <HAL_I2C_MspInit+0x17c>)
 800a490:	f7f6 fd62 	bl	8000f58 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800a494:	2300      	movs	r3, #0
 800a496:	60fb      	str	r3, [r7, #12]
 800a498:	4b08      	ldr	r3, [pc, #32]	; (800a4bc <HAL_I2C_MspInit+0x178>)
 800a49a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a49c:	4a07      	ldr	r2, [pc, #28]	; (800a4bc <HAL_I2C_MspInit+0x178>)
 800a49e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a4a2:	6413      	str	r3, [r2, #64]	; 0x40
 800a4a4:	4b05      	ldr	r3, [pc, #20]	; (800a4bc <HAL_I2C_MspInit+0x178>)
 800a4a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4ac:	60fb      	str	r3, [r7, #12]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
}
 800a4b0:	bf00      	nop
 800a4b2:	3730      	adds	r7, #48	; 0x30
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}
 800a4b8:	40005400 	.word	0x40005400
 800a4bc:	40023800 	.word	0x40023800
 800a4c0:	40020400 	.word	0x40020400
 800a4c4:	200003f4 	.word	0x200003f4
 800a4c8:	40026028 	.word	0x40026028
 800a4cc:	40005800 	.word	0x40005800

0800a4d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a05      	ldr	r2, [pc, #20]	; (800a4f4 <HAL_RTC_MspInit+0x24>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d102      	bne.n	800a4e8 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800a4e2:	4b05      	ldr	r3, [pc, #20]	; (800a4f8 <HAL_RTC_MspInit+0x28>)
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800a4e8:	bf00      	nop
 800a4ea:	370c      	adds	r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr
 800a4f4:	40002800 	.word	0x40002800
 800a4f8:	42470e3c 	.word	0x42470e3c

0800a4fc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b08c      	sub	sp, #48	; 0x30
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a504:	f107 031c 	add.w	r3, r7, #28
 800a508:	2200      	movs	r2, #0
 800a50a:	601a      	str	r2, [r3, #0]
 800a50c:	605a      	str	r2, [r3, #4]
 800a50e:	609a      	str	r2, [r3, #8]
 800a510:	60da      	str	r2, [r3, #12]
 800a512:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a38      	ldr	r2, [pc, #224]	; (800a5fc <HAL_SD_MspInit+0x100>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d169      	bne.n	800a5f2 <HAL_SD_MspInit+0xf6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800a51e:	2300      	movs	r3, #0
 800a520:	61bb      	str	r3, [r7, #24]
 800a522:	4b37      	ldr	r3, [pc, #220]	; (800a600 <HAL_SD_MspInit+0x104>)
 800a524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a526:	4a36      	ldr	r2, [pc, #216]	; (800a600 <HAL_SD_MspInit+0x104>)
 800a528:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a52c:	6453      	str	r3, [r2, #68]	; 0x44
 800a52e:	4b34      	ldr	r3, [pc, #208]	; (800a600 <HAL_SD_MspInit+0x104>)
 800a530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a536:	61bb      	str	r3, [r7, #24]
 800a538:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a53a:	2300      	movs	r3, #0
 800a53c:	617b      	str	r3, [r7, #20]
 800a53e:	4b30      	ldr	r3, [pc, #192]	; (800a600 <HAL_SD_MspInit+0x104>)
 800a540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a542:	4a2f      	ldr	r2, [pc, #188]	; (800a600 <HAL_SD_MspInit+0x104>)
 800a544:	f043 0301 	orr.w	r3, r3, #1
 800a548:	6313      	str	r3, [r2, #48]	; 0x30
 800a54a:	4b2d      	ldr	r3, [pc, #180]	; (800a600 <HAL_SD_MspInit+0x104>)
 800a54c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a54e:	f003 0301 	and.w	r3, r3, #1
 800a552:	617b      	str	r3, [r7, #20]
 800a554:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a556:	2300      	movs	r3, #0
 800a558:	613b      	str	r3, [r7, #16]
 800a55a:	4b29      	ldr	r3, [pc, #164]	; (800a600 <HAL_SD_MspInit+0x104>)
 800a55c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a55e:	4a28      	ldr	r2, [pc, #160]	; (800a600 <HAL_SD_MspInit+0x104>)
 800a560:	f043 0302 	orr.w	r3, r3, #2
 800a564:	6313      	str	r3, [r2, #48]	; 0x30
 800a566:	4b26      	ldr	r3, [pc, #152]	; (800a600 <HAL_SD_MspInit+0x104>)
 800a568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a56a:	f003 0302 	and.w	r3, r3, #2
 800a56e:	613b      	str	r3, [r7, #16]
 800a570:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a572:	2300      	movs	r3, #0
 800a574:	60fb      	str	r3, [r7, #12]
 800a576:	4b22      	ldr	r3, [pc, #136]	; (800a600 <HAL_SD_MspInit+0x104>)
 800a578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a57a:	4a21      	ldr	r2, [pc, #132]	; (800a600 <HAL_SD_MspInit+0x104>)
 800a57c:	f043 0304 	orr.w	r3, r3, #4
 800a580:	6313      	str	r3, [r2, #48]	; 0x30
 800a582:	4b1f      	ldr	r3, [pc, #124]	; (800a600 <HAL_SD_MspInit+0x104>)
 800a584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a586:	f003 0304 	and.w	r3, r3, #4
 800a58a:	60fb      	str	r3, [r7, #12]
 800a58c:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800a58e:	2340      	movs	r3, #64	; 0x40
 800a590:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a592:	2302      	movs	r3, #2
 800a594:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a596:	2300      	movs	r3, #0
 800a598:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a59a:	2303      	movs	r3, #3
 800a59c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800a59e:	230c      	movs	r3, #12
 800a5a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5a2:	f107 031c 	add.w	r3, r7, #28
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	4816      	ldr	r0, [pc, #88]	; (800a604 <HAL_SD_MspInit+0x108>)
 800a5aa:	f7f6 fcd5 	bl	8000f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800a5ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5b4:	2302      	movs	r3, #2
 800a5b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5bc:	2303      	movs	r3, #3
 800a5be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800a5c0:	230c      	movs	r3, #12
 800a5c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a5c4:	f107 031c 	add.w	r3, r7, #28
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	480f      	ldr	r0, [pc, #60]	; (800a608 <HAL_SD_MspInit+0x10c>)
 800a5cc:	f7f6 fcc4 	bl	8000f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800a5d0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800a5d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5d6:	2302      	movs	r3, #2
 800a5d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5de:	2303      	movs	r3, #3
 800a5e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800a5e2:	230c      	movs	r3, #12
 800a5e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a5e6:	f107 031c 	add.w	r3, r7, #28
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	4807      	ldr	r0, [pc, #28]	; (800a60c <HAL_SD_MspInit+0x110>)
 800a5ee:	f7f6 fcb3 	bl	8000f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800a5f2:	bf00      	nop
 800a5f4:	3730      	adds	r7, #48	; 0x30
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	bf00      	nop
 800a5fc:	40012c00 	.word	0x40012c00
 800a600:	40023800 	.word	0x40023800
 800a604:	40020000 	.word	0x40020000
 800a608:	40020400 	.word	0x40020400
 800a60c:	40020800 	.word	0x40020800

0800a610 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b08a      	sub	sp, #40	; 0x28
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a618:	f107 0314 	add.w	r3, r7, #20
 800a61c:	2200      	movs	r2, #0
 800a61e:	601a      	str	r2, [r3, #0]
 800a620:	605a      	str	r2, [r3, #4]
 800a622:	609a      	str	r2, [r3, #8]
 800a624:	60da      	str	r2, [r3, #12]
 800a626:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a19      	ldr	r2, [pc, #100]	; (800a694 <HAL_UART_MspInit+0x84>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d12c      	bne.n	800a68c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a632:	2300      	movs	r3, #0
 800a634:	613b      	str	r3, [r7, #16]
 800a636:	4b18      	ldr	r3, [pc, #96]	; (800a698 <HAL_UART_MspInit+0x88>)
 800a638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a63a:	4a17      	ldr	r2, [pc, #92]	; (800a698 <HAL_UART_MspInit+0x88>)
 800a63c:	f043 0310 	orr.w	r3, r3, #16
 800a640:	6453      	str	r3, [r2, #68]	; 0x44
 800a642:	4b15      	ldr	r3, [pc, #84]	; (800a698 <HAL_UART_MspInit+0x88>)
 800a644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a646:	f003 0310 	and.w	r3, r3, #16
 800a64a:	613b      	str	r3, [r7, #16]
 800a64c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a64e:	2300      	movs	r3, #0
 800a650:	60fb      	str	r3, [r7, #12]
 800a652:	4b11      	ldr	r3, [pc, #68]	; (800a698 <HAL_UART_MspInit+0x88>)
 800a654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a656:	4a10      	ldr	r2, [pc, #64]	; (800a698 <HAL_UART_MspInit+0x88>)
 800a658:	f043 0301 	orr.w	r3, r3, #1
 800a65c:	6313      	str	r3, [r2, #48]	; 0x30
 800a65e:	4b0e      	ldr	r3, [pc, #56]	; (800a698 <HAL_UART_MspInit+0x88>)
 800a660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a662:	f003 0301 	and.w	r3, r3, #1
 800a666:	60fb      	str	r3, [r7, #12]
 800a668:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800a66a:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800a66e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a670:	2302      	movs	r3, #2
 800a672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a674:	2300      	movs	r3, #0
 800a676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a678:	2303      	movs	r3, #3
 800a67a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a67c:	2307      	movs	r3, #7
 800a67e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a680:	f107 0314 	add.w	r3, r7, #20
 800a684:	4619      	mov	r1, r3
 800a686:	4805      	ldr	r0, [pc, #20]	; (800a69c <HAL_UART_MspInit+0x8c>)
 800a688:	f7f6 fc66 	bl	8000f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800a68c:	bf00      	nop
 800a68e:	3728      	adds	r7, #40	; 0x28
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}
 800a694:	40011000 	.word	0x40011000
 800a698:	40023800 	.word	0x40023800
 800a69c:	40020000 	.word	0x40020000

0800a6a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800a6a4:	f7fa fd90 	bl	80051c8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a6a8:	e7fe      	b.n	800a6a8 <NMI_Handler+0x8>

0800a6aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a6aa:	b480      	push	{r7}
 800a6ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a6ae:	e7fe      	b.n	800a6ae <HardFault_Handler+0x4>

0800a6b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a6b4:	e7fe      	b.n	800a6b4 <MemManage_Handler+0x4>

0800a6b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a6b6:	b480      	push	{r7}
 800a6b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a6ba:	e7fe      	b.n	800a6ba <BusFault_Handler+0x4>

0800a6bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a6c0:	e7fe      	b.n	800a6c0 <UsageFault_Handler+0x4>

0800a6c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a6c2:	b480      	push	{r7}
 800a6c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a6c6:	bf00      	nop
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a6d4:	bf00      	nop
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr

0800a6de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a6de:	b480      	push	{r7}
 800a6e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a6e2:	bf00      	nop
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr

0800a6ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a6f0:	f7f5 ffc2 	bl	8000678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a6f4:	bf00      	nop
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800a6fc:	4802      	ldr	r0, [pc, #8]	; (800a708 <DMA1_Stream1_IRQHandler+0x10>)
 800a6fe:	f7f6 f9e1 	bl	8000ac4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800a702:	bf00      	nop
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	200003f4 	.word	0x200003f4

0800a70c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800a710:	4802      	ldr	r0, [pc, #8]	; (800a71c <I2C1_EV_IRQHandler+0x10>)
 800a712:	f7f7 f943 	bl	800199c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800a716:	bf00      	nop
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	20000454 	.word	0x20000454

0800a720 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800a724:	4802      	ldr	r0, [pc, #8]	; (800a730 <OTG_FS_IRQHandler+0x10>)
 800a726:	f7f9 f8c9 	bl	80038bc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800a72a:	bf00      	nop
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	200018b4 	.word	0x200018b4

0800a734 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a734:	b480      	push	{r7}
 800a736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a738:	4b06      	ldr	r3, [pc, #24]	; (800a754 <SystemInit+0x20>)
 800a73a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a73e:	4a05      	ldr	r2, [pc, #20]	; (800a754 <SystemInit+0x20>)
 800a740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a748:	bf00      	nop
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr
 800a752:	bf00      	nop
 800a754:	e000ed00 	.word	0xe000ed00

0800a758 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a75c:	2200      	movs	r2, #0
 800a75e:	4912      	ldr	r1, [pc, #72]	; (800a7a8 <MX_USB_DEVICE_Init+0x50>)
 800a760:	4812      	ldr	r0, [pc, #72]	; (800a7ac <MX_USB_DEVICE_Init+0x54>)
 800a762:	f7fe f9ef 	bl	8008b44 <USBD_Init>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d001      	beq.n	800a770 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a76c:	f7ff fdbc 	bl	800a2e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a770:	490f      	ldr	r1, [pc, #60]	; (800a7b0 <MX_USB_DEVICE_Init+0x58>)
 800a772:	480e      	ldr	r0, [pc, #56]	; (800a7ac <MX_USB_DEVICE_Init+0x54>)
 800a774:	f7fe fa16 	bl	8008ba4 <USBD_RegisterClass>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d001      	beq.n	800a782 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a77e:	f7ff fdb3 	bl	800a2e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a782:	490c      	ldr	r1, [pc, #48]	; (800a7b4 <MX_USB_DEVICE_Init+0x5c>)
 800a784:	4809      	ldr	r0, [pc, #36]	; (800a7ac <MX_USB_DEVICE_Init+0x54>)
 800a786:	f7fe f967 	bl	8008a58 <USBD_CDC_RegisterInterface>
 800a78a:	4603      	mov	r3, r0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d001      	beq.n	800a794 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a790:	f7ff fdaa 	bl	800a2e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a794:	4805      	ldr	r0, [pc, #20]	; (800a7ac <MX_USB_DEVICE_Init+0x54>)
 800a796:	f7fe fa2c 	bl	8008bf2 <USBD_Start>
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d001      	beq.n	800a7a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a7a0:	f7ff fda2 	bl	800a2e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a7a4:	bf00      	nop
 800a7a6:	bd80      	pop	{r7, pc}
 800a7a8:	20000130 	.word	0x20000130
 800a7ac:	200005e4 	.word	0x200005e4
 800a7b0:	20000014 	.word	0x20000014
 800a7b4:	2000011c 	.word	0x2000011c

0800a7b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a7bc:	2200      	movs	r2, #0
 800a7be:	4905      	ldr	r1, [pc, #20]	; (800a7d4 <CDC_Init_FS+0x1c>)
 800a7c0:	4805      	ldr	r0, [pc, #20]	; (800a7d8 <CDC_Init_FS+0x20>)
 800a7c2:	f7fe f95e 	bl	8008a82 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a7c6:	4905      	ldr	r1, [pc, #20]	; (800a7dc <CDC_Init_FS+0x24>)
 800a7c8:	4803      	ldr	r0, [pc, #12]	; (800a7d8 <CDC_Init_FS+0x20>)
 800a7ca:	f7fe f978 	bl	8008abe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a7ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	bd80      	pop	{r7, pc}
 800a7d4:	200010b4 	.word	0x200010b4
 800a7d8:	200005e4 	.word	0x200005e4
 800a7dc:	200008b4 	.word	0x200008b4

0800a7e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a7e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	6039      	str	r1, [r7, #0]
 800a7fa:	71fb      	strb	r3, [r7, #7]
 800a7fc:	4613      	mov	r3, r2
 800a7fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a800:	79fb      	ldrb	r3, [r7, #7]
 800a802:	2b23      	cmp	r3, #35	; 0x23
 800a804:	d84a      	bhi.n	800a89c <CDC_Control_FS+0xac>
 800a806:	a201      	add	r2, pc, #4	; (adr r2, 800a80c <CDC_Control_FS+0x1c>)
 800a808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a80c:	0800a89d 	.word	0x0800a89d
 800a810:	0800a89d 	.word	0x0800a89d
 800a814:	0800a89d 	.word	0x0800a89d
 800a818:	0800a89d 	.word	0x0800a89d
 800a81c:	0800a89d 	.word	0x0800a89d
 800a820:	0800a89d 	.word	0x0800a89d
 800a824:	0800a89d 	.word	0x0800a89d
 800a828:	0800a89d 	.word	0x0800a89d
 800a82c:	0800a89d 	.word	0x0800a89d
 800a830:	0800a89d 	.word	0x0800a89d
 800a834:	0800a89d 	.word	0x0800a89d
 800a838:	0800a89d 	.word	0x0800a89d
 800a83c:	0800a89d 	.word	0x0800a89d
 800a840:	0800a89d 	.word	0x0800a89d
 800a844:	0800a89d 	.word	0x0800a89d
 800a848:	0800a89d 	.word	0x0800a89d
 800a84c:	0800a89d 	.word	0x0800a89d
 800a850:	0800a89d 	.word	0x0800a89d
 800a854:	0800a89d 	.word	0x0800a89d
 800a858:	0800a89d 	.word	0x0800a89d
 800a85c:	0800a89d 	.word	0x0800a89d
 800a860:	0800a89d 	.word	0x0800a89d
 800a864:	0800a89d 	.word	0x0800a89d
 800a868:	0800a89d 	.word	0x0800a89d
 800a86c:	0800a89d 	.word	0x0800a89d
 800a870:	0800a89d 	.word	0x0800a89d
 800a874:	0800a89d 	.word	0x0800a89d
 800a878:	0800a89d 	.word	0x0800a89d
 800a87c:	0800a89d 	.word	0x0800a89d
 800a880:	0800a89d 	.word	0x0800a89d
 800a884:	0800a89d 	.word	0x0800a89d
 800a888:	0800a89d 	.word	0x0800a89d
 800a88c:	0800a89d 	.word	0x0800a89d
 800a890:	0800a89d 	.word	0x0800a89d
 800a894:	0800a89d 	.word	0x0800a89d
 800a898:	0800a89d 	.word	0x0800a89d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a89c:	bf00      	nop
  }

  return (USBD_OK);
 800a89e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	370c      	adds	r7, #12
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr

0800a8ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b082      	sub	sp, #8
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a8b6:	6879      	ldr	r1, [r7, #4]
 800a8b8:	4805      	ldr	r0, [pc, #20]	; (800a8d0 <CDC_Receive_FS+0x24>)
 800a8ba:	f7fe f900 	bl	8008abe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a8be:	4804      	ldr	r0, [pc, #16]	; (800a8d0 <CDC_Receive_FS+0x24>)
 800a8c0:	f7fe f916 	bl	8008af0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a8c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3708      	adds	r7, #8
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	200005e4 	.word	0x200005e4

0800a8d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b087      	sub	sp, #28
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	60f8      	str	r0, [r7, #12]
 800a8dc:	60b9      	str	r1, [r7, #8]
 800a8de:	4613      	mov	r3, r2
 800a8e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a8e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	371c      	adds	r7, #28
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr
	...

0800a8f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b08a      	sub	sp, #40	; 0x28
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a900:	f107 0314 	add.w	r3, r7, #20
 800a904:	2200      	movs	r2, #0
 800a906:	601a      	str	r2, [r3, #0]
 800a908:	605a      	str	r2, [r3, #4]
 800a90a:	609a      	str	r2, [r3, #8]
 800a90c:	60da      	str	r2, [r3, #12]
 800a90e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a918:	d147      	bne.n	800a9aa <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a91a:	2300      	movs	r3, #0
 800a91c:	613b      	str	r3, [r7, #16]
 800a91e:	4b25      	ldr	r3, [pc, #148]	; (800a9b4 <HAL_PCD_MspInit+0xbc>)
 800a920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a922:	4a24      	ldr	r2, [pc, #144]	; (800a9b4 <HAL_PCD_MspInit+0xbc>)
 800a924:	f043 0301 	orr.w	r3, r3, #1
 800a928:	6313      	str	r3, [r2, #48]	; 0x30
 800a92a:	4b22      	ldr	r3, [pc, #136]	; (800a9b4 <HAL_PCD_MspInit+0xbc>)
 800a92c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a92e:	f003 0301 	and.w	r3, r3, #1
 800a932:	613b      	str	r3, [r7, #16]
 800a934:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a936:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a93a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a93c:	2300      	movs	r3, #0
 800a93e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a940:	2300      	movs	r3, #0
 800a942:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a944:	f107 0314 	add.w	r3, r7, #20
 800a948:	4619      	mov	r1, r3
 800a94a:	481b      	ldr	r0, [pc, #108]	; (800a9b8 <HAL_PCD_MspInit+0xc0>)
 800a94c:	f7f6 fb04 	bl	8000f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a950:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a956:	2302      	movs	r3, #2
 800a958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a95a:	2300      	movs	r3, #0
 800a95c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a95e:	2303      	movs	r3, #3
 800a960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a962:	230a      	movs	r3, #10
 800a964:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a966:	f107 0314 	add.w	r3, r7, #20
 800a96a:	4619      	mov	r1, r3
 800a96c:	4812      	ldr	r0, [pc, #72]	; (800a9b8 <HAL_PCD_MspInit+0xc0>)
 800a96e:	f7f6 faf3 	bl	8000f58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a972:	4b10      	ldr	r3, [pc, #64]	; (800a9b4 <HAL_PCD_MspInit+0xbc>)
 800a974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a976:	4a0f      	ldr	r2, [pc, #60]	; (800a9b4 <HAL_PCD_MspInit+0xbc>)
 800a978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a97c:	6353      	str	r3, [r2, #52]	; 0x34
 800a97e:	2300      	movs	r3, #0
 800a980:	60fb      	str	r3, [r7, #12]
 800a982:	4b0c      	ldr	r3, [pc, #48]	; (800a9b4 <HAL_PCD_MspInit+0xbc>)
 800a984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a986:	4a0b      	ldr	r2, [pc, #44]	; (800a9b4 <HAL_PCD_MspInit+0xbc>)
 800a988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a98c:	6453      	str	r3, [r2, #68]	; 0x44
 800a98e:	4b09      	ldr	r3, [pc, #36]	; (800a9b4 <HAL_PCD_MspInit+0xbc>)
 800a990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a996:	60fb      	str	r3, [r7, #12]
 800a998:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a99a:	2200      	movs	r2, #0
 800a99c:	2100      	movs	r1, #0
 800a99e:	2043      	movs	r0, #67	; 0x43
 800a9a0:	f7f5 ff89 	bl	80008b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a9a4:	2043      	movs	r0, #67	; 0x43
 800a9a6:	f7f5 ffa2 	bl	80008ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a9aa:	bf00      	nop
 800a9ac:	3728      	adds	r7, #40	; 0x28
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	40023800 	.word	0x40023800
 800a9b8:	40020000 	.word	0x40020000

0800a9bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	4610      	mov	r0, r2
 800a9d4:	f7fe f958 	bl	8008c88 <USBD_LL_SetupStage>
}
 800a9d8:	bf00      	nop
 800a9da:	3708      	adds	r7, #8
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b082      	sub	sp, #8
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a9f2:	78fa      	ldrb	r2, [r7, #3]
 800a9f4:	6879      	ldr	r1, [r7, #4]
 800a9f6:	4613      	mov	r3, r2
 800a9f8:	00db      	lsls	r3, r3, #3
 800a9fa:	1a9b      	subs	r3, r3, r2
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	440b      	add	r3, r1
 800aa00:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800aa04:	681a      	ldr	r2, [r3, #0]
 800aa06:	78fb      	ldrb	r3, [r7, #3]
 800aa08:	4619      	mov	r1, r3
 800aa0a:	f7fe f992 	bl	8008d32 <USBD_LL_DataOutStage>
}
 800aa0e:	bf00      	nop
 800aa10:	3708      	adds	r7, #8
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}

0800aa16 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa16:	b580      	push	{r7, lr}
 800aa18:	b082      	sub	sp, #8
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	6078      	str	r0, [r7, #4]
 800aa1e:	460b      	mov	r3, r1
 800aa20:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800aa28:	78fa      	ldrb	r2, [r7, #3]
 800aa2a:	6879      	ldr	r1, [r7, #4]
 800aa2c:	4613      	mov	r3, r2
 800aa2e:	00db      	lsls	r3, r3, #3
 800aa30:	1a9b      	subs	r3, r3, r2
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	440b      	add	r3, r1
 800aa36:	3348      	adds	r3, #72	; 0x48
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	78fb      	ldrb	r3, [r7, #3]
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	f7fe f9db 	bl	8008df8 <USBD_LL_DataInStage>
}
 800aa42:	bf00      	nop
 800aa44:	3708      	adds	r7, #8
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}

0800aa4a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa4a:	b580      	push	{r7, lr}
 800aa4c:	b082      	sub	sp, #8
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7fe faef 	bl	800903c <USBD_LL_SOF>
}
 800aa5e:	bf00      	nop
 800aa60:	3708      	adds	r7, #8
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b084      	sub	sp, #16
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	68db      	ldr	r3, [r3, #12]
 800aa76:	2b02      	cmp	r3, #2
 800aa78:	d001      	beq.n	800aa7e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aa7a:	f7ff fc35 	bl	800a2e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aa84:	7bfa      	ldrb	r2, [r7, #15]
 800aa86:	4611      	mov	r1, r2
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f7fe fa99 	bl	8008fc0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aa94:	4618      	mov	r0, r3
 800aa96:	f7fe fa45 	bl	8008f24 <USBD_LL_Reset>
}
 800aa9a:	bf00      	nop
 800aa9c:	3710      	adds	r7, #16
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
	...

0800aaa4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7fe fa94 	bl	8008fe0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	6812      	ldr	r2, [r2, #0]
 800aac6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aaca:	f043 0301 	orr.w	r3, r3, #1
 800aace:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6a1b      	ldr	r3, [r3, #32]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d005      	beq.n	800aae4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aad8:	4b04      	ldr	r3, [pc, #16]	; (800aaec <HAL_PCD_SuspendCallback+0x48>)
 800aada:	691b      	ldr	r3, [r3, #16]
 800aadc:	4a03      	ldr	r2, [pc, #12]	; (800aaec <HAL_PCD_SuspendCallback+0x48>)
 800aade:	f043 0306 	orr.w	r3, r3, #6
 800aae2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aae4:	bf00      	nop
 800aae6:	3708      	adds	r7, #8
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}
 800aaec:	e000ed00 	.word	0xe000ed00

0800aaf0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7fe fa84 	bl	800900c <USBD_LL_Resume>
}
 800ab04:	bf00      	nop
 800ab06:	3708      	adds	r7, #8
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	460b      	mov	r3, r1
 800ab16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab1e:	78fa      	ldrb	r2, [r7, #3]
 800ab20:	4611      	mov	r1, r2
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7fe fad2 	bl	80090cc <USBD_LL_IsoOUTIncomplete>
}
 800ab28:	bf00      	nop
 800ab2a:	3708      	adds	r7, #8
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b082      	sub	sp, #8
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	460b      	mov	r3, r1
 800ab3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab42:	78fa      	ldrb	r2, [r7, #3]
 800ab44:	4611      	mov	r1, r2
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7fe fa9a 	bl	8009080 <USBD_LL_IsoINIncomplete>
}
 800ab4c:	bf00      	nop
 800ab4e:	3708      	adds	r7, #8
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}

0800ab54 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7fe fad8 	bl	8009118 <USBD_LL_DevConnected>
}
 800ab68:	bf00      	nop
 800ab6a:	3708      	adds	r7, #8
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b082      	sub	sp, #8
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f7fe fad5 	bl	800912e <USBD_LL_DevDisconnected>
}
 800ab84:	bf00      	nop
 800ab86:	3708      	adds	r7, #8
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d13c      	bne.n	800ac16 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ab9c:	4a20      	ldr	r2, [pc, #128]	; (800ac20 <USBD_LL_Init+0x94>)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	4a1e      	ldr	r2, [pc, #120]	; (800ac20 <USBD_LL_Init+0x94>)
 800aba8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800abac:	4b1c      	ldr	r3, [pc, #112]	; (800ac20 <USBD_LL_Init+0x94>)
 800abae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800abb2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800abb4:	4b1a      	ldr	r3, [pc, #104]	; (800ac20 <USBD_LL_Init+0x94>)
 800abb6:	2204      	movs	r2, #4
 800abb8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800abba:	4b19      	ldr	r3, [pc, #100]	; (800ac20 <USBD_LL_Init+0x94>)
 800abbc:	2202      	movs	r2, #2
 800abbe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800abc0:	4b17      	ldr	r3, [pc, #92]	; (800ac20 <USBD_LL_Init+0x94>)
 800abc2:	2200      	movs	r2, #0
 800abc4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800abc6:	4b16      	ldr	r3, [pc, #88]	; (800ac20 <USBD_LL_Init+0x94>)
 800abc8:	2202      	movs	r2, #2
 800abca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800abcc:	4b14      	ldr	r3, [pc, #80]	; (800ac20 <USBD_LL_Init+0x94>)
 800abce:	2200      	movs	r2, #0
 800abd0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800abd2:	4b13      	ldr	r3, [pc, #76]	; (800ac20 <USBD_LL_Init+0x94>)
 800abd4:	2200      	movs	r2, #0
 800abd6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800abd8:	4b11      	ldr	r3, [pc, #68]	; (800ac20 <USBD_LL_Init+0x94>)
 800abda:	2200      	movs	r2, #0
 800abdc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800abde:	4b10      	ldr	r3, [pc, #64]	; (800ac20 <USBD_LL_Init+0x94>)
 800abe0:	2201      	movs	r2, #1
 800abe2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800abe4:	4b0e      	ldr	r3, [pc, #56]	; (800ac20 <USBD_LL_Init+0x94>)
 800abe6:	2200      	movs	r2, #0
 800abe8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800abea:	480d      	ldr	r0, [pc, #52]	; (800ac20 <USBD_LL_Init+0x94>)
 800abec:	f7f8 fd16 	bl	800361c <HAL_PCD_Init>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d001      	beq.n	800abfa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800abf6:	f7ff fb77 	bl	800a2e8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800abfa:	2180      	movs	r1, #128	; 0x80
 800abfc:	4808      	ldr	r0, [pc, #32]	; (800ac20 <USBD_LL_Init+0x94>)
 800abfe:	f7f9 fe74 	bl	80048ea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ac02:	2240      	movs	r2, #64	; 0x40
 800ac04:	2100      	movs	r1, #0
 800ac06:	4806      	ldr	r0, [pc, #24]	; (800ac20 <USBD_LL_Init+0x94>)
 800ac08:	f7f9 fe28 	bl	800485c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ac0c:	2280      	movs	r2, #128	; 0x80
 800ac0e:	2101      	movs	r1, #1
 800ac10:	4803      	ldr	r0, [pc, #12]	; (800ac20 <USBD_LL_Init+0x94>)
 800ac12:	f7f9 fe23 	bl	800485c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ac16:	2300      	movs	r3, #0
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3708      	adds	r7, #8
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}
 800ac20:	200018b4 	.word	0x200018b4

0800ac24 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b084      	sub	sp, #16
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac30:	2300      	movs	r3, #0
 800ac32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7f8 fe0b 	bl	8003856 <HAL_PCD_Start>
 800ac40:	4603      	mov	r3, r0
 800ac42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac44:	7bfb      	ldrb	r3, [r7, #15]
 800ac46:	4618      	mov	r0, r3
 800ac48:	f000 f942 	bl	800aed0 <USBD_Get_USB_Status>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac50:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3710      	adds	r7, #16
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b084      	sub	sp, #16
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
 800ac62:	4608      	mov	r0, r1
 800ac64:	4611      	mov	r1, r2
 800ac66:	461a      	mov	r2, r3
 800ac68:	4603      	mov	r3, r0
 800ac6a:	70fb      	strb	r3, [r7, #3]
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	70bb      	strb	r3, [r7, #2]
 800ac70:	4613      	mov	r3, r2
 800ac72:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac74:	2300      	movs	r3, #0
 800ac76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ac82:	78bb      	ldrb	r3, [r7, #2]
 800ac84:	883a      	ldrh	r2, [r7, #0]
 800ac86:	78f9      	ldrb	r1, [r7, #3]
 800ac88:	f7f9 f9ef 	bl	800406a <HAL_PCD_EP_Open>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac90:	7bfb      	ldrb	r3, [r7, #15]
 800ac92:	4618      	mov	r0, r3
 800ac94:	f000 f91c 	bl	800aed0 <USBD_Get_USB_Status>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3710      	adds	r7, #16
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}

0800aca6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aca6:	b580      	push	{r7, lr}
 800aca8:	b084      	sub	sp, #16
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
 800acae:	460b      	mov	r3, r1
 800acb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acb2:	2300      	movs	r3, #0
 800acb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acb6:	2300      	movs	r3, #0
 800acb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800acc0:	78fa      	ldrb	r2, [r7, #3]
 800acc2:	4611      	mov	r1, r2
 800acc4:	4618      	mov	r0, r3
 800acc6:	f7f9 fa38 	bl	800413a <HAL_PCD_EP_Close>
 800acca:	4603      	mov	r3, r0
 800accc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acce:	7bfb      	ldrb	r3, [r7, #15]
 800acd0:	4618      	mov	r0, r3
 800acd2:	f000 f8fd 	bl	800aed0 <USBD_Get_USB_Status>
 800acd6:	4603      	mov	r3, r0
 800acd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acda:	7bbb      	ldrb	r3, [r7, #14]
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3710      	adds	r7, #16
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	460b      	mov	r3, r1
 800acee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acf0:	2300      	movs	r3, #0
 800acf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acf4:	2300      	movs	r3, #0
 800acf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800acfe:	78fa      	ldrb	r2, [r7, #3]
 800ad00:	4611      	mov	r1, r2
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7f9 fb10 	bl	8004328 <HAL_PCD_EP_SetStall>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad0c:	7bfb      	ldrb	r3, [r7, #15]
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f000 f8de 	bl	800aed0 <USBD_Get_USB_Status>
 800ad14:	4603      	mov	r3, r0
 800ad16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad18:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3710      	adds	r7, #16
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b084      	sub	sp, #16
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad32:	2300      	movs	r3, #0
 800ad34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ad3c:	78fa      	ldrb	r2, [r7, #3]
 800ad3e:	4611      	mov	r1, r2
 800ad40:	4618      	mov	r0, r3
 800ad42:	f7f9 fb55 	bl	80043f0 <HAL_PCD_EP_ClrStall>
 800ad46:	4603      	mov	r3, r0
 800ad48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad4a:	7bfb      	ldrb	r3, [r7, #15]
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f000 f8bf 	bl	800aed0 <USBD_Get_USB_Status>
 800ad52:	4603      	mov	r3, r0
 800ad54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad56:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3710      	adds	r7, #16
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b085      	sub	sp, #20
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	460b      	mov	r3, r1
 800ad6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ad72:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ad74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	da0b      	bge.n	800ad94 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ad7c:	78fb      	ldrb	r3, [r7, #3]
 800ad7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad82:	68f9      	ldr	r1, [r7, #12]
 800ad84:	4613      	mov	r3, r2
 800ad86:	00db      	lsls	r3, r3, #3
 800ad88:	1a9b      	subs	r3, r3, r2
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	440b      	add	r3, r1
 800ad8e:	333e      	adds	r3, #62	; 0x3e
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	e00b      	b.n	800adac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ad94:	78fb      	ldrb	r3, [r7, #3]
 800ad96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad9a:	68f9      	ldr	r1, [r7, #12]
 800ad9c:	4613      	mov	r3, r2
 800ad9e:	00db      	lsls	r3, r3, #3
 800ada0:	1a9b      	subs	r3, r3, r2
 800ada2:	009b      	lsls	r3, r3, #2
 800ada4:	440b      	add	r3, r1
 800ada6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800adaa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800adac:	4618      	mov	r0, r3
 800adae:	3714      	adds	r7, #20
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	460b      	mov	r3, r1
 800adc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adc4:	2300      	movs	r3, #0
 800adc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adc8:	2300      	movs	r3, #0
 800adca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800add2:	78fa      	ldrb	r2, [r7, #3]
 800add4:	4611      	mov	r1, r2
 800add6:	4618      	mov	r0, r3
 800add8:	f7f9 f922 	bl	8004020 <HAL_PCD_SetAddress>
 800addc:	4603      	mov	r3, r0
 800adde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ade0:	7bfb      	ldrb	r3, [r7, #15]
 800ade2:	4618      	mov	r0, r3
 800ade4:	f000 f874 	bl	800aed0 <USBD_Get_USB_Status>
 800ade8:	4603      	mov	r3, r0
 800adea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adec:	7bbb      	ldrb	r3, [r7, #14]
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3710      	adds	r7, #16
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800adf6:	b580      	push	{r7, lr}
 800adf8:	b086      	sub	sp, #24
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	60f8      	str	r0, [r7, #12]
 800adfe:	607a      	str	r2, [r7, #4]
 800ae00:	603b      	str	r3, [r7, #0]
 800ae02:	460b      	mov	r3, r1
 800ae04:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae06:	2300      	movs	r3, #0
 800ae08:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ae14:	7af9      	ldrb	r1, [r7, #11]
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	f7f9 fa3b 	bl	8004294 <HAL_PCD_EP_Transmit>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae22:	7dfb      	ldrb	r3, [r7, #23]
 800ae24:	4618      	mov	r0, r3
 800ae26:	f000 f853 	bl	800aed0 <USBD_Get_USB_Status>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae2e:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3718      	adds	r7, #24
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b086      	sub	sp, #24
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	60f8      	str	r0, [r7, #12]
 800ae40:	607a      	str	r2, [r7, #4]
 800ae42:	603b      	str	r3, [r7, #0]
 800ae44:	460b      	mov	r3, r1
 800ae46:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ae56:	7af9      	ldrb	r1, [r7, #11]
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	f7f9 f9b7 	bl	80041ce <HAL_PCD_EP_Receive>
 800ae60:	4603      	mov	r3, r0
 800ae62:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae64:	7dfb      	ldrb	r3, [r7, #23]
 800ae66:	4618      	mov	r0, r3
 800ae68:	f000 f832 	bl	800aed0 <USBD_Get_USB_Status>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae70:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3718      	adds	r7, #24
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b082      	sub	sp, #8
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
 800ae82:	460b      	mov	r3, r1
 800ae84:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ae8c:	78fa      	ldrb	r2, [r7, #3]
 800ae8e:	4611      	mov	r1, r2
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7f9 f9e7 	bl	8004264 <HAL_PCD_EP_GetRxCount>
 800ae96:	4603      	mov	r3, r0
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3708      	adds	r7, #8
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b083      	sub	sp, #12
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aea8:	4b03      	ldr	r3, [pc, #12]	; (800aeb8 <USBD_static_malloc+0x18>)
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	370c      	adds	r7, #12
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb4:	4770      	bx	lr
 800aeb6:	bf00      	nop
 800aeb8:	200001a0 	.word	0x200001a0

0800aebc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b083      	sub	sp, #12
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]

}
 800aec4:	bf00      	nop
 800aec6:	370c      	adds	r7, #12
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr

0800aed0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b085      	sub	sp, #20
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	4603      	mov	r3, r0
 800aed8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aeda:	2300      	movs	r3, #0
 800aedc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aede:	79fb      	ldrb	r3, [r7, #7]
 800aee0:	2b03      	cmp	r3, #3
 800aee2:	d817      	bhi.n	800af14 <USBD_Get_USB_Status+0x44>
 800aee4:	a201      	add	r2, pc, #4	; (adr r2, 800aeec <USBD_Get_USB_Status+0x1c>)
 800aee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeea:	bf00      	nop
 800aeec:	0800aefd 	.word	0x0800aefd
 800aef0:	0800af03 	.word	0x0800af03
 800aef4:	0800af09 	.word	0x0800af09
 800aef8:	0800af0f 	.word	0x0800af0f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aefc:	2300      	movs	r3, #0
 800aefe:	73fb      	strb	r3, [r7, #15]
    break;
 800af00:	e00b      	b.n	800af1a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af02:	2303      	movs	r3, #3
 800af04:	73fb      	strb	r3, [r7, #15]
    break;
 800af06:	e008      	b.n	800af1a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800af08:	2301      	movs	r3, #1
 800af0a:	73fb      	strb	r3, [r7, #15]
    break;
 800af0c:	e005      	b.n	800af1a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800af0e:	2303      	movs	r3, #3
 800af10:	73fb      	strb	r3, [r7, #15]
    break;
 800af12:	e002      	b.n	800af1a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800af14:	2303      	movs	r3, #3
 800af16:	73fb      	strb	r3, [r7, #15]
    break;
 800af18:	bf00      	nop
  }
  return usb_status;
 800af1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3714      	adds	r7, #20
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	4603      	mov	r3, r0
 800af30:	6039      	str	r1, [r7, #0]
 800af32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	2212      	movs	r2, #18
 800af38:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800af3a:	4b03      	ldr	r3, [pc, #12]	; (800af48 <USBD_FS_DeviceDescriptor+0x20>)
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	370c      	adds	r7, #12
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr
 800af48:	2000014c 	.word	0x2000014c

0800af4c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
 800af52:	4603      	mov	r3, r0
 800af54:	6039      	str	r1, [r7, #0]
 800af56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	2204      	movs	r2, #4
 800af5c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800af5e:	4b03      	ldr	r3, [pc, #12]	; (800af6c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800af60:	4618      	mov	r0, r3
 800af62:	370c      	adds	r7, #12
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr
 800af6c:	20000160 	.word	0x20000160

0800af70 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
 800af76:	4603      	mov	r3, r0
 800af78:	6039      	str	r1, [r7, #0]
 800af7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800af7c:	79fb      	ldrb	r3, [r7, #7]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d105      	bne.n	800af8e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800af82:	683a      	ldr	r2, [r7, #0]
 800af84:	4907      	ldr	r1, [pc, #28]	; (800afa4 <USBD_FS_ProductStrDescriptor+0x34>)
 800af86:	4808      	ldr	r0, [pc, #32]	; (800afa8 <USBD_FS_ProductStrDescriptor+0x38>)
 800af88:	f7fe fe65 	bl	8009c56 <USBD_GetString>
 800af8c:	e004      	b.n	800af98 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800af8e:	683a      	ldr	r2, [r7, #0]
 800af90:	4904      	ldr	r1, [pc, #16]	; (800afa4 <USBD_FS_ProductStrDescriptor+0x34>)
 800af92:	4805      	ldr	r0, [pc, #20]	; (800afa8 <USBD_FS_ProductStrDescriptor+0x38>)
 800af94:	f7fe fe5f 	bl	8009c56 <USBD_GetString>
  }
  return USBD_StrDesc;
 800af98:	4b02      	ldr	r3, [pc, #8]	; (800afa4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3708      	adds	r7, #8
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
 800afa2:	bf00      	nop
 800afa4:	20001cbc 	.word	0x20001cbc
 800afa8:	0800b20c 	.word	0x0800b20c

0800afac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b082      	sub	sp, #8
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	4603      	mov	r3, r0
 800afb4:	6039      	str	r1, [r7, #0]
 800afb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800afb8:	683a      	ldr	r2, [r7, #0]
 800afba:	4904      	ldr	r1, [pc, #16]	; (800afcc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800afbc:	4804      	ldr	r0, [pc, #16]	; (800afd0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800afbe:	f7fe fe4a 	bl	8009c56 <USBD_GetString>
  return USBD_StrDesc;
 800afc2:	4b02      	ldr	r3, [pc, #8]	; (800afcc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3708      	adds	r7, #8
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}
 800afcc:	20001cbc 	.word	0x20001cbc
 800afd0:	0800b224 	.word	0x0800b224

0800afd4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b082      	sub	sp, #8
 800afd8:	af00      	add	r7, sp, #0
 800afda:	4603      	mov	r3, r0
 800afdc:	6039      	str	r1, [r7, #0]
 800afde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	221a      	movs	r2, #26
 800afe4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800afe6:	f000 f843 	bl	800b070 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800afea:	4b02      	ldr	r3, [pc, #8]	; (800aff4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800afec:	4618      	mov	r0, r3
 800afee:	3708      	adds	r7, #8
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}
 800aff4:	20000164 	.word	0x20000164

0800aff8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
 800affe:	4603      	mov	r3, r0
 800b000:	6039      	str	r1, [r7, #0]
 800b002:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b004:	79fb      	ldrb	r3, [r7, #7]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d105      	bne.n	800b016 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b00a:	683a      	ldr	r2, [r7, #0]
 800b00c:	4907      	ldr	r1, [pc, #28]	; (800b02c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b00e:	4808      	ldr	r0, [pc, #32]	; (800b030 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b010:	f7fe fe21 	bl	8009c56 <USBD_GetString>
 800b014:	e004      	b.n	800b020 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b016:	683a      	ldr	r2, [r7, #0]
 800b018:	4904      	ldr	r1, [pc, #16]	; (800b02c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b01a:	4805      	ldr	r0, [pc, #20]	; (800b030 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b01c:	f7fe fe1b 	bl	8009c56 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b020:	4b02      	ldr	r3, [pc, #8]	; (800b02c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b022:	4618      	mov	r0, r3
 800b024:	3708      	adds	r7, #8
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	20001cbc 	.word	0x20001cbc
 800b030:	0800b238 	.word	0x0800b238

0800b034 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b082      	sub	sp, #8
 800b038:	af00      	add	r7, sp, #0
 800b03a:	4603      	mov	r3, r0
 800b03c:	6039      	str	r1, [r7, #0]
 800b03e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b040:	79fb      	ldrb	r3, [r7, #7]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d105      	bne.n	800b052 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b046:	683a      	ldr	r2, [r7, #0]
 800b048:	4907      	ldr	r1, [pc, #28]	; (800b068 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b04a:	4808      	ldr	r0, [pc, #32]	; (800b06c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b04c:	f7fe fe03 	bl	8009c56 <USBD_GetString>
 800b050:	e004      	b.n	800b05c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b052:	683a      	ldr	r2, [r7, #0]
 800b054:	4904      	ldr	r1, [pc, #16]	; (800b068 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b056:	4805      	ldr	r0, [pc, #20]	; (800b06c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b058:	f7fe fdfd 	bl	8009c56 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b05c:	4b02      	ldr	r3, [pc, #8]	; (800b068 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3708      	adds	r7, #8
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	20001cbc 	.word	0x20001cbc
 800b06c:	0800b244 	.word	0x0800b244

0800b070 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b084      	sub	sp, #16
 800b074:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b076:	4b0f      	ldr	r3, [pc, #60]	; (800b0b4 <Get_SerialNum+0x44>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b07c:	4b0e      	ldr	r3, [pc, #56]	; (800b0b8 <Get_SerialNum+0x48>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b082:	4b0e      	ldr	r3, [pc, #56]	; (800b0bc <Get_SerialNum+0x4c>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b088:	68fa      	ldr	r2, [r7, #12]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	4413      	add	r3, r2
 800b08e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d009      	beq.n	800b0aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b096:	2208      	movs	r2, #8
 800b098:	4909      	ldr	r1, [pc, #36]	; (800b0c0 <Get_SerialNum+0x50>)
 800b09a:	68f8      	ldr	r0, [r7, #12]
 800b09c:	f000 f814 	bl	800b0c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b0a0:	2204      	movs	r2, #4
 800b0a2:	4908      	ldr	r1, [pc, #32]	; (800b0c4 <Get_SerialNum+0x54>)
 800b0a4:	68b8      	ldr	r0, [r7, #8]
 800b0a6:	f000 f80f 	bl	800b0c8 <IntToUnicode>
  }
}
 800b0aa:	bf00      	nop
 800b0ac:	3710      	adds	r7, #16
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	1fff7a10 	.word	0x1fff7a10
 800b0b8:	1fff7a14 	.word	0x1fff7a14
 800b0bc:	1fff7a18 	.word	0x1fff7a18
 800b0c0:	20000166 	.word	0x20000166
 800b0c4:	20000176 	.word	0x20000176

0800b0c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b087      	sub	sp, #28
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	60f8      	str	r0, [r7, #12]
 800b0d0:	60b9      	str	r1, [r7, #8]
 800b0d2:	4613      	mov	r3, r2
 800b0d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b0da:	2300      	movs	r3, #0
 800b0dc:	75fb      	strb	r3, [r7, #23]
 800b0de:	e027      	b.n	800b130 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	0f1b      	lsrs	r3, r3, #28
 800b0e4:	2b09      	cmp	r3, #9
 800b0e6:	d80b      	bhi.n	800b100 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	0f1b      	lsrs	r3, r3, #28
 800b0ec:	b2da      	uxtb	r2, r3
 800b0ee:	7dfb      	ldrb	r3, [r7, #23]
 800b0f0:	005b      	lsls	r3, r3, #1
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	440b      	add	r3, r1
 800b0f8:	3230      	adds	r2, #48	; 0x30
 800b0fa:	b2d2      	uxtb	r2, r2
 800b0fc:	701a      	strb	r2, [r3, #0]
 800b0fe:	e00a      	b.n	800b116 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	0f1b      	lsrs	r3, r3, #28
 800b104:	b2da      	uxtb	r2, r3
 800b106:	7dfb      	ldrb	r3, [r7, #23]
 800b108:	005b      	lsls	r3, r3, #1
 800b10a:	4619      	mov	r1, r3
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	440b      	add	r3, r1
 800b110:	3237      	adds	r2, #55	; 0x37
 800b112:	b2d2      	uxtb	r2, r2
 800b114:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	011b      	lsls	r3, r3, #4
 800b11a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b11c:	7dfb      	ldrb	r3, [r7, #23]
 800b11e:	005b      	lsls	r3, r3, #1
 800b120:	3301      	adds	r3, #1
 800b122:	68ba      	ldr	r2, [r7, #8]
 800b124:	4413      	add	r3, r2
 800b126:	2200      	movs	r2, #0
 800b128:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b12a:	7dfb      	ldrb	r3, [r7, #23]
 800b12c:	3301      	adds	r3, #1
 800b12e:	75fb      	strb	r3, [r7, #23]
 800b130:	7dfa      	ldrb	r2, [r7, #23]
 800b132:	79fb      	ldrb	r3, [r7, #7]
 800b134:	429a      	cmp	r2, r3
 800b136:	d3d3      	bcc.n	800b0e0 <IntToUnicode+0x18>
  }
}
 800b138:	bf00      	nop
 800b13a:	bf00      	nop
 800b13c:	371c      	adds	r7, #28
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr
	...

0800b148 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800b148:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b180 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800b14c:	480d      	ldr	r0, [pc, #52]	; (800b184 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800b14e:	490e      	ldr	r1, [pc, #56]	; (800b188 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800b150:	4a0e      	ldr	r2, [pc, #56]	; (800b18c <LoopFillZerobss+0x1e>)
  movs r3, #0
 800b152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b154:	e002      	b.n	800b15c <LoopCopyDataInit>

0800b156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b15a:	3304      	adds	r3, #4

0800b15c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b15c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b15e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b160:	d3f9      	bcc.n	800b156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b162:	4a0b      	ldr	r2, [pc, #44]	; (800b190 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800b164:	4c0b      	ldr	r4, [pc, #44]	; (800b194 <LoopFillZerobss+0x26>)
  movs r3, #0
 800b166:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b168:	e001      	b.n	800b16e <LoopFillZerobss>

0800b16a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b16a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b16c:	3204      	adds	r2, #4

0800b16e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b16e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b170:	d3fb      	bcc.n	800b16a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b172:	f7ff fadf 	bl	800a734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b176:	f000 f811 	bl	800b19c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b17a:	f7fe fe4d 	bl	8009e18 <main>
  bx  lr    
 800b17e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800b180:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800b184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b188:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 800b18c:	0800b284 	.word	0x0800b284
  ldr r2, =_sbss
 800b190:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 800b194:	20001ebc 	.word	0x20001ebc

0800b198 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b198:	e7fe      	b.n	800b198 <ADC_IRQHandler>
	...

0800b19c <__libc_init_array>:
 800b19c:	b570      	push	{r4, r5, r6, lr}
 800b19e:	4d0d      	ldr	r5, [pc, #52]	; (800b1d4 <__libc_init_array+0x38>)
 800b1a0:	4c0d      	ldr	r4, [pc, #52]	; (800b1d8 <__libc_init_array+0x3c>)
 800b1a2:	1b64      	subs	r4, r4, r5
 800b1a4:	10a4      	asrs	r4, r4, #2
 800b1a6:	2600      	movs	r6, #0
 800b1a8:	42a6      	cmp	r6, r4
 800b1aa:	d109      	bne.n	800b1c0 <__libc_init_array+0x24>
 800b1ac:	4d0b      	ldr	r5, [pc, #44]	; (800b1dc <__libc_init_array+0x40>)
 800b1ae:	4c0c      	ldr	r4, [pc, #48]	; (800b1e0 <__libc_init_array+0x44>)
 800b1b0:	f000 f820 	bl	800b1f4 <_init>
 800b1b4:	1b64      	subs	r4, r4, r5
 800b1b6:	10a4      	asrs	r4, r4, #2
 800b1b8:	2600      	movs	r6, #0
 800b1ba:	42a6      	cmp	r6, r4
 800b1bc:	d105      	bne.n	800b1ca <__libc_init_array+0x2e>
 800b1be:	bd70      	pop	{r4, r5, r6, pc}
 800b1c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1c4:	4798      	blx	r3
 800b1c6:	3601      	adds	r6, #1
 800b1c8:	e7ee      	b.n	800b1a8 <__libc_init_array+0xc>
 800b1ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1ce:	4798      	blx	r3
 800b1d0:	3601      	adds	r6, #1
 800b1d2:	e7f2      	b.n	800b1ba <__libc_init_array+0x1e>
 800b1d4:	0800b27c 	.word	0x0800b27c
 800b1d8:	0800b27c 	.word	0x0800b27c
 800b1dc:	0800b27c 	.word	0x0800b27c
 800b1e0:	0800b280 	.word	0x0800b280

0800b1e4 <memset>:
 800b1e4:	4402      	add	r2, r0
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d100      	bne.n	800b1ee <memset+0xa>
 800b1ec:	4770      	bx	lr
 800b1ee:	f803 1b01 	strb.w	r1, [r3], #1
 800b1f2:	e7f9      	b.n	800b1e8 <memset+0x4>

0800b1f4 <_init>:
 800b1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1f6:	bf00      	nop
 800b1f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1fa:	bc08      	pop	{r3}
 800b1fc:	469e      	mov	lr, r3
 800b1fe:	4770      	bx	lr

0800b200 <_fini>:
 800b200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b202:	bf00      	nop
 800b204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b206:	bc08      	pop	{r3}
 800b208:	469e      	mov	lr, r3
 800b20a:	4770      	bx	lr
