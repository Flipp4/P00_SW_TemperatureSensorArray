
Temperature Sensor Array.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010dec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08010f90  08010f90  00020f90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080113f4  080113f4  00030350  2**0
                  CONTENTS
  4 .ARM          00000008  080113f4  080113f4  000213f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080113fc  080113fc  00030350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080113fc  080113fc  000213fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011400  08011400  00021400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  08011404  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022c0  20000350  08011754  00030350  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  20002610  08011754  00032610  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fd28  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c6f  00000000  00000000  000600a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001eb0  00000000  00000000  00065d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c70  00000000  00000000  00067bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020d01  00000000  00000000  00069838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a6bb  00000000  00000000  0008a539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000acefb  00000000  00000000  000b4bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00161aef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000091f0  00000000  00000000  00161b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0016ad34  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0016ae00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000350 	.word	0x20000350
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010f74 	.word	0x08010f74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000354 	.word	0x20000354
 80001dc:	08010f74 	.word	0x08010f74

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <OperateLED_A>:
#include "BSP.h"
#include "main.h"


void OperateLED_A (LEDState_t eState)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
	if(eState == eLED_On)
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d105      	bne.n	8000ecc <OperateLED_A+0x1c>
	{
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	4807      	ldr	r0, [pc, #28]	; (8000ee4 <OperateLED_A+0x34>)
 8000ec6:	f001 fc57 	bl	8002778 <HAL_GPIO_WritePin>
	}
	else if(eState == eLED_Off)
	{
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
	}
}
 8000eca:	e007      	b.n	8000edc <OperateLED_A+0x2c>
	else if(eState == eLED_Off)
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d104      	bne.n	8000edc <OperateLED_A+0x2c>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <OperateLED_A+0x34>)
 8000ed8:	f001 fc4e 	bl	8002778 <HAL_GPIO_WritePin>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40020800 	.word	0x40020800

08000ee8 <OperateLED_C>:
	{
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
	}
}
void OperateLED_C (LEDState_t eState)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
	if(eState == eLED_On)
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d105      	bne.n	8000f04 <OperateLED_C+0x1c>
	{
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2104      	movs	r1, #4
 8000efc:	4807      	ldr	r0, [pc, #28]	; (8000f1c <OperateLED_C+0x34>)
 8000efe:	f001 fc3b 	bl	8002778 <HAL_GPIO_WritePin>
	}
	else if(eState == eLED_Off)
	{
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
	}
}
 8000f02:	e007      	b.n	8000f14 <OperateLED_C+0x2c>
	else if(eState == eLED_Off)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d104      	bne.n	8000f14 <OperateLED_C+0x2c>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2104      	movs	r1, #4
 8000f0e:	4803      	ldr	r0, [pc, #12]	; (8000f1c <OperateLED_C+0x34>)
 8000f10:	f001 fc32 	bl	8002778 <HAL_GPIO_WritePin>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40020800 	.word	0x40020800

08000f20 <ToggleLED_B>:
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
	}
}

void ToggleLED_B()
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000f24:	2102      	movs	r1, #2
 8000f26:	4802      	ldr	r0, [pc, #8]	; (8000f30 <ToggleLED_B+0x10>)
 8000f28:	f001 fc3f 	bl	80027aa <HAL_GPIO_TogglePin>
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40020800 	.word	0x40020800

08000f34 <ToggleLED_D>:

void ToggleLED_D()
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000f38:	2108      	movs	r1, #8
 8000f3a:	4802      	ldr	r0, [pc, #8]	; (8000f44 <ToggleLED_D+0x10>)
 8000f3c:	f001 fc35 	bl	80027aa <HAL_GPIO_TogglePin>
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40020800 	.word	0x40020800

08000f48 <OperateSensorPower_A>:

void OperateSensorPower_A (SensorState_t eState)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
	if(eState == eSensor_On)
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d106      	bne.n	8000f66 <OperateSensorPower_A+0x1e>
	{
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f5e:	4808      	ldr	r0, [pc, #32]	; (8000f80 <OperateSensorPower_A+0x38>)
 8000f60:	f001 fc0a 	bl	8002778 <HAL_GPIO_WritePin>
	}
	else if(eState == eSensor_Off)
	{
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_SET);
	}
}
 8000f64:	e008      	b.n	8000f78 <OperateSensorPower_A+0x30>
	else if(eState == eSensor_Off)
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d105      	bne.n	8000f78 <OperateSensorPower_A+0x30>
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_SET);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f72:	4803      	ldr	r0, [pc, #12]	; (8000f80 <OperateSensorPower_A+0x38>)
 8000f74:	f001 fc00 	bl	8002778 <HAL_GPIO_WritePin>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40020800 	.word	0x40020800

08000f84 <OperateSensorPower_B>:
void OperateSensorPower_B (SensorState_t eState)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
	if(eState == eSensor_On)
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d106      	bne.n	8000fa2 <OperateSensorPower_B+0x1e>
	{
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f9a:	4808      	ldr	r0, [pc, #32]	; (8000fbc <OperateSensorPower_B+0x38>)
 8000f9c:	f001 fbec 	bl	8002778 <HAL_GPIO_WritePin>
	}
	else if(eState == eSensor_Off)
	{
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_SET);
	}
}
 8000fa0:	e008      	b.n	8000fb4 <OperateSensorPower_B+0x30>
	else if(eState == eSensor_Off)
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d105      	bne.n	8000fb4 <OperateSensorPower_B+0x30>
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_SET);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fae:	4803      	ldr	r0, [pc, #12]	; (8000fbc <OperateSensorPower_B+0x38>)
 8000fb0:	f001 fbe2 	bl	8002778 <HAL_GPIO_WritePin>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40020800 	.word	0x40020800

08000fc0 <TurnAllSensorOn>:

void TurnAllSensorOn()
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	OperateSensorPower_A(eSensor_On);
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f7ff ffbf 	bl	8000f48 <OperateSensorPower_A>
	OperateSensorPower_B(eSensor_On);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f7ff ffda 	bl	8000f84 <OperateSensorPower_B>
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <SensorArray_Init>:
	0x0C,
	0x0E
};

void SensorArray_Init(I2C_HandleTypeDef *hI2CA, I2C_HandleTypeDef *hI2CB)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
	for(uint8_t u8Idx = 0; u8Idx < MCP9808_I2CA_DeviceCount; u8Idx++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	73fb      	strb	r3, [r7, #15]
 8000fe2:	e024      	b.n	800102e <SensorArray_Init+0x5a>
	{
		kaSensorArrayDataA[u8Idx].hTranscieverHandle = hI2CA;
 8000fe4:	7bfa      	ldrb	r2, [r7, #15]
 8000fe6:	492c      	ldr	r1, [pc, #176]	; (8001098 <SensorArray_Init+0xc4>)
 8000fe8:	4613      	mov	r3, r2
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	4413      	add	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	3304      	adds	r3, #4
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	601a      	str	r2, [r3, #0]
		kaSensorArrayDataA[u8Idx].u8Address = ((MCP9808_AddresLowerNibble << 4) + u8DeviceAddressListA[u8Idx]);
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	4a28      	ldr	r2, [pc, #160]	; (800109c <SensorArray_Init+0xc8>)
 8000ffc:	5cd3      	ldrb	r3, [r2, r3]
 8000ffe:	7bfa      	ldrb	r2, [r7, #15]
 8001000:	3330      	adds	r3, #48	; 0x30
 8001002:	b2d8      	uxtb	r0, r3
 8001004:	4924      	ldr	r1, [pc, #144]	; (8001098 <SensorArray_Init+0xc4>)
 8001006:	4613      	mov	r3, r2
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	4413      	add	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	440b      	add	r3, r1
 8001010:	3301      	adds	r3, #1
 8001012:	4602      	mov	r2, r0
 8001014:	701a      	strb	r2, [r3, #0]
		kaSensorArrayDataA[u8Idx].bEnabled = true;
 8001016:	7bfa      	ldrb	r2, [r7, #15]
 8001018:	491f      	ldr	r1, [pc, #124]	; (8001098 <SensorArray_Init+0xc4>)
 800101a:	4613      	mov	r3, r2
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	4413      	add	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	440b      	add	r3, r1
 8001024:	2201      	movs	r2, #1
 8001026:	701a      	strb	r2, [r3, #0]
	for(uint8_t u8Idx = 0; u8Idx < MCP9808_I2CA_DeviceCount; u8Idx++)
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	3301      	adds	r3, #1
 800102c:	73fb      	strb	r3, [r7, #15]
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	2b04      	cmp	r3, #4
 8001032:	d9d7      	bls.n	8000fe4 <SensorArray_Init+0x10>
	}
	for(uint8_t u8Idx = 0; u8Idx < MCP9808_I2CB_DeviceCount; u8Idx++)
 8001034:	2300      	movs	r3, #0
 8001036:	73bb      	strb	r3, [r7, #14]
 8001038:	e024      	b.n	8001084 <SensorArray_Init+0xb0>
	{
		kaSensorArrayDataB[u8Idx].hTranscieverHandle = hI2CB;
 800103a:	7bba      	ldrb	r2, [r7, #14]
 800103c:	4918      	ldr	r1, [pc, #96]	; (80010a0 <SensorArray_Init+0xcc>)
 800103e:	4613      	mov	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4413      	add	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	440b      	add	r3, r1
 8001048:	3304      	adds	r3, #4
 800104a:	683a      	ldr	r2, [r7, #0]
 800104c:	601a      	str	r2, [r3, #0]
		kaSensorArrayDataB[u8Idx].u8Address = ((MCP9808_AddresLowerNibble << 4) + u8DeviceAddressListB[u8Idx]);
 800104e:	7bbb      	ldrb	r3, [r7, #14]
 8001050:	4a14      	ldr	r2, [pc, #80]	; (80010a4 <SensorArray_Init+0xd0>)
 8001052:	5cd3      	ldrb	r3, [r2, r3]
 8001054:	7bba      	ldrb	r2, [r7, #14]
 8001056:	3330      	adds	r3, #48	; 0x30
 8001058:	b2d8      	uxtb	r0, r3
 800105a:	4911      	ldr	r1, [pc, #68]	; (80010a0 <SensorArray_Init+0xcc>)
 800105c:	4613      	mov	r3, r2
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	4413      	add	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	440b      	add	r3, r1
 8001066:	3301      	adds	r3, #1
 8001068:	4602      	mov	r2, r0
 800106a:	701a      	strb	r2, [r3, #0]
		kaSensorArrayDataB[u8Idx].bEnabled = true;
 800106c:	7bba      	ldrb	r2, [r7, #14]
 800106e:	490c      	ldr	r1, [pc, #48]	; (80010a0 <SensorArray_Init+0xcc>)
 8001070:	4613      	mov	r3, r2
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	4413      	add	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	440b      	add	r3, r1
 800107a:	2201      	movs	r2, #1
 800107c:	701a      	strb	r2, [r3, #0]
	for(uint8_t u8Idx = 0; u8Idx < MCP9808_I2CB_DeviceCount; u8Idx++)
 800107e:	7bbb      	ldrb	r3, [r7, #14]
 8001080:	3301      	adds	r3, #1
 8001082:	73bb      	strb	r3, [r7, #14]
 8001084:	7bbb      	ldrb	r3, [r7, #14]
 8001086:	2b04      	cmp	r3, #4
 8001088:	d9d7      	bls.n	800103a <SensorArray_Init+0x66>
	}
}
 800108a:	bf00      	nop
 800108c:	bf00      	nop
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	20000a2c 	.word	0x20000a2c
 800109c:	08010fe4 	.word	0x08010fe4
 80010a0:	20000a68 	.word	0x20000a68
 80010a4:	08010fec 	.word	0x08010fec

080010a8 <MCP9808_Read>:

#include "TemperatureSensor_MCP9808.h"
#include "MCP9808_ArrayData.h"

void MCP9808_Read(MCP9808_Sensor_t *kSensor)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_IT(kSensor->hTranscieverHandle, kSensor->u8Address, MCP9808_AddressAmbientTemperature, 1, kSensor->u16RawMeasurement, 2);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6858      	ldr	r0, [r3, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	785b      	ldrb	r3, [r3, #1]
 80010b8:	b299      	uxth	r1, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3308      	adds	r3, #8
 80010be:	2202      	movs	r2, #2
 80010c0:	9201      	str	r2, [sp, #4]
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2301      	movs	r3, #1
 80010c6:	2205      	movs	r2, #5
 80010c8:	f001 fcf2 	bl	8002ab0 <HAL_I2C_Mem_Read_IT>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <MCP9808_DecodeTemperature>:


float MCP9808_DecodeTemperature(MCP9808_Sensor_t *kSensor)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b087      	sub	sp, #28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	uint16_t u16FixedPointReadingLow = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	827b      	strh	r3, [r7, #18]
	uint16_t u16FixedPointReadingHigh = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	823b      	strh	r3, [r7, #16]
	uint16_t u16FixedPointReading = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	81fb      	strh	r3, [r7, #14]
	bool bNegativeSign = false;
 80010e8:	2300      	movs	r3, #0
 80010ea:	737b      	strb	r3, [r7, #13]
	float fResult = 0.0;
 80010ec:	f04f 0300 	mov.w	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]

	u16FixedPointReadingLow = ((uint16_t)(kSensor->u16RawMeasurement[0])) << 8;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	7a1b      	ldrb	r3, [r3, #8]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	021b      	lsls	r3, r3, #8
 80010fa:	827b      	strh	r3, [r7, #18]
	bNegativeSign = ( u16FixedPointReadingLow & 0x1000) && 0x1000;
 80010fc:	8a7b      	ldrh	r3, [r7, #18]
 80010fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001102:	2b00      	cmp	r3, #0
 8001104:	bf14      	ite	ne
 8001106:	2301      	movne	r3, #1
 8001108:	2300      	moveq	r3, #0
 800110a:	737b      	strb	r3, [r7, #13]
	u16FixedPointReadingLow = u16FixedPointReadingLow & (0x0FFF); // Mask to delete threshold data and sign
 800110c:	8a7b      	ldrh	r3, [r7, #18]
 800110e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001112:	827b      	strh	r3, [r7, #18]

	u16FixedPointReadingHigh = ((uint16_t)(kSensor->u16RawMeasurement[1]));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	7a5b      	ldrb	r3, [r3, #9]
 8001118:	823b      	strh	r3, [r7, #16]
	u16FixedPointReading = u16FixedPointReadingLow + u16FixedPointReadingHigh;
 800111a:	8a7a      	ldrh	r2, [r7, #18]
 800111c:	8a3b      	ldrh	r3, [r7, #16]
 800111e:	4413      	add	r3, r2
 8001120:	81fb      	strh	r3, [r7, #14]

	if (bNegativeSign)
 8001122:	7b7b      	ldrb	r3, [r7, #13]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d00d      	beq.n	8001144 <MCP9808_DecodeTemperature+0x70>
	{
		fResult = ((float)(u16FixedPointReading) / 16) * -1;
 8001128:	89fb      	ldrh	r3, [r7, #14]
 800112a:	ee07 3a90 	vmov	s15, r3
 800112e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001132:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001136:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800113a:	eef1 7a67 	vneg.f32	s15, s15
 800113e:	edc7 7a05 	vstr	s15, [r7, #20]
 8001142:	e00a      	b.n	800115a <MCP9808_DecodeTemperature+0x86>
	}
	else
	{
		fResult = ((float)(u16FixedPointReading) / 16);
 8001144:	89fb      	ldrh	r3, [r7, #14]
 8001146:	ee07 3a90 	vmov	s15, r3
 800114a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800114e:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001152:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001156:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	return fResult;
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	ee07 3a90 	vmov	s15, r3
}
 8001160:	eeb0 0a67 	vmov.f32	s0, s15
 8001164:	371c      	adds	r7, #28
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
	...

08001170 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001174:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <HAL_Init+0x40>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a0d      	ldr	r2, [pc, #52]	; (80011b0 <HAL_Init+0x40>)
 800117a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800117e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <HAL_Init+0x40>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a0a      	ldr	r2, [pc, #40]	; (80011b0 <HAL_Init+0x40>)
 8001186:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800118a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <HAL_Init+0x40>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a07      	ldr	r2, [pc, #28]	; (80011b0 <HAL_Init+0x40>)
 8001192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001196:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001198:	2003      	movs	r0, #3
 800119a:	f000 fdf5 	bl	8001d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800119e:	2000      	movs	r0, #0
 80011a0:	f000 f808 	bl	80011b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a4:	f00b ff80 	bl	800d0a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40023c00 	.word	0x40023c00

080011b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_InitTick+0x54>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_InitTick+0x58>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	4619      	mov	r1, r3
 80011c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 fe0d 	bl	8001df2 <HAL_SYSTICK_Config>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e00e      	b.n	8001200 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b0f      	cmp	r3, #15
 80011e6:	d80a      	bhi.n	80011fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e8:	2200      	movs	r2, #0
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295
 80011f0:	f000 fdd5 	bl	8001d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f4:	4a06      	ldr	r2, [pc, #24]	; (8001210 <HAL_InitTick+0x5c>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
 80011fc:	e000      	b.n	8001200 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000118 	.word	0x20000118
 800120c:	20000004 	.word	0x20000004
 8001210:	20000000 	.word	0x20000000

08001214 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_IncTick+0x20>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_IncTick+0x24>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4413      	add	r3, r2
 8001224:	4a04      	ldr	r2, [pc, #16]	; (8001238 <HAL_IncTick+0x24>)
 8001226:	6013      	str	r3, [r2, #0]
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000004 	.word	0x20000004
 8001238:	20000aa4 	.word	0x20000aa4

0800123c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return uwTick;
 8001240:	4b03      	ldr	r3, [pc, #12]	; (8001250 <HAL_GetTick+0x14>)
 8001242:	681b      	ldr	r3, [r3, #0]
}
 8001244:	4618      	mov	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000aa4 	.word	0x20000aa4

08001254 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800125c:	f7ff ffee 	bl	800123c <HAL_GetTick>
 8001260:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800126c:	d005      	beq.n	800127a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800126e:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <HAL_Delay+0x44>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4413      	add	r3, r2
 8001278:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800127a:	bf00      	nop
 800127c:	f7ff ffde 	bl	800123c <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	429a      	cmp	r2, r3
 800128a:	d8f7      	bhi.n	800127c <HAL_Delay+0x28>
  {
  }
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000004 	.word	0x20000004

0800129c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012a4:	2300      	movs	r3, #0
 80012a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e033      	b.n	800131a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d109      	bne.n	80012ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f00b ff1c 	bl	800d0f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f003 0310 	and.w	r3, r3, #16
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d118      	bne.n	800130c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012e2:	f023 0302 	bic.w	r3, r3, #2
 80012e6:	f043 0202 	orr.w	r2, r3, #2
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 fb74 	bl	80019dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	f023 0303 	bic.w	r3, r3, #3
 8001302:	f043 0201 	orr.w	r2, r3, #1
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	641a      	str	r2, [r3, #64]	; 0x40
 800130a:	e001      	b.n	8001310 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001318:	7bfb      	ldrb	r3, [r7, #15]
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800132c:	2300      	movs	r3, #0
 800132e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001336:	2b01      	cmp	r3, #1
 8001338:	d101      	bne.n	800133e <HAL_ADC_Start_IT+0x1a>
 800133a:	2302      	movs	r3, #2
 800133c:	e0a1      	b.n	8001482 <HAL_ADC_Start_IT+0x15e>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2201      	movs	r2, #1
 8001342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	2b01      	cmp	r3, #1
 8001352:	d018      	beq.n	8001386 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f042 0201 	orr.w	r2, r2, #1
 8001362:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001364:	4b4a      	ldr	r3, [pc, #296]	; (8001490 <HAL_ADC_Start_IT+0x16c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a4a      	ldr	r2, [pc, #296]	; (8001494 <HAL_ADC_Start_IT+0x170>)
 800136a:	fba2 2303 	umull	r2, r3, r2, r3
 800136e:	0c9a      	lsrs	r2, r3, #18
 8001370:	4613      	mov	r3, r2
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	4413      	add	r3, r2
 8001376:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001378:	e002      	b.n	8001380 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	3b01      	subs	r3, #1
 800137e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1f9      	bne.n	800137a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	2b01      	cmp	r3, #1
 8001392:	d169      	bne.n	8001468 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001398:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800139c:	f023 0301 	bic.w	r3, r3, #1
 80013a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d007      	beq.n	80013c6 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013d2:	d106      	bne.n	80013e2 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d8:	f023 0206 	bic.w	r2, r3, #6
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	645a      	str	r2, [r3, #68]	; 0x44
 80013e0:	e002      	b.n	80013e8 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013f0:	4b29      	ldr	r3, [pc, #164]	; (8001498 <HAL_ADC_Start_IT+0x174>)
 80013f2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80013fc:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	6812      	ldr	r2, [r2, #0]
 8001408:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800140c:	f043 0320 	orr.w	r3, r3, #32
 8001410:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 031f 	and.w	r3, r3, #31
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10f      	bne.n	800143e <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d129      	bne.n	8001480 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	e020      	b.n	8001480 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a16      	ldr	r2, [pc, #88]	; (800149c <HAL_ADC_Start_IT+0x178>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d11b      	bne.n	8001480 <HAL_ADC_Start_IT+0x15c>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d114      	bne.n	8001480 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	e00b      	b.n	8001480 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	f043 0210 	orr.w	r2, r3, #16
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001478:	f043 0201 	orr.w	r2, r3, #1
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000118 	.word	0x20000118
 8001494:	431bde83 	.word	0x431bde83
 8001498:	40012300 	.word	0x40012300
 800149c:	40012000 	.word	0x40012000

080014a0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	2300      	movs	r3, #0
 80014ae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	bf0c      	ite	eq
 80014be:	2301      	moveq	r3, #1
 80014c0:	2300      	movne	r3, #0
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 0320 	and.w	r3, r3, #32
 80014d0:	2b20      	cmp	r3, #32
 80014d2:	bf0c      	ite	eq
 80014d4:	2301      	moveq	r3, #1
 80014d6:	2300      	movne	r3, #0
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d049      	beq.n	8001576 <HAL_ADC_IRQHandler+0xd6>
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d046      	beq.n	8001576 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	f003 0310 	and.w	r3, r3, #16
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d105      	bne.n	8001500 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d12b      	bne.n	8001566 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001512:	2b00      	cmp	r3, #0
 8001514:	d127      	bne.n	8001566 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001520:	2b00      	cmp	r3, #0
 8001522:	d006      	beq.n	8001532 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800152e:	2b00      	cmp	r3, #0
 8001530:	d119      	bne.n	8001566 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 0220 	bic.w	r2, r2, #32
 8001540:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d105      	bne.n	8001566 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f043 0201 	orr.w	r2, r3, #1
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 f8e8 	bl	800173c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f06f 0212 	mvn.w	r2, #18
 8001574:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b04      	cmp	r3, #4
 8001582:	bf0c      	ite	eq
 8001584:	2301      	moveq	r3, #1
 8001586:	2300      	movne	r3, #0
 8001588:	b2db      	uxtb	r3, r3
 800158a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001596:	2b80      	cmp	r3, #128	; 0x80
 8001598:	bf0c      	ite	eq
 800159a:	2301      	moveq	r3, #1
 800159c:	2300      	movne	r3, #0
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d057      	beq.n	8001658 <HAL_ADC_IRQHandler+0x1b8>
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d054      	beq.n	8001658 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f003 0310 	and.w	r3, r3, #16
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d105      	bne.n	80015c6 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d139      	bne.n	8001648 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015da:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d006      	beq.n	80015f0 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d12b      	bne.n	8001648 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d124      	bne.n	8001648 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001608:	2b00      	cmp	r3, #0
 800160a:	d11d      	bne.n	8001648 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001610:	2b00      	cmp	r3, #0
 8001612:	d119      	bne.n	8001648 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001622:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001628:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001638:	2b00      	cmp	r3, #0
 800163a:	d105      	bne.n	8001648 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	f043 0201 	orr.w	r2, r3, #1
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 fac3 	bl	8001bd4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f06f 020c 	mvn.w	r2, #12
 8001656:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b01      	cmp	r3, #1
 8001664:	bf0c      	ite	eq
 8001666:	2301      	moveq	r3, #1
 8001668:	2300      	movne	r3, #0
 800166a:	b2db      	uxtb	r3, r3
 800166c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001678:	2b40      	cmp	r3, #64	; 0x40
 800167a:	bf0c      	ite	eq
 800167c:	2301      	moveq	r3, #1
 800167e:	2300      	movne	r3, #0
 8001680:	b2db      	uxtb	r3, r3
 8001682:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d017      	beq.n	80016ba <HAL_ADC_IRQHandler+0x21a>
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d014      	beq.n	80016ba <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b01      	cmp	r3, #1
 800169c:	d10d      	bne.n	80016ba <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 f850 	bl	8001750 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f06f 0201 	mvn.w	r2, #1
 80016b8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0320 	and.w	r3, r3, #32
 80016c4:	2b20      	cmp	r3, #32
 80016c6:	bf0c      	ite	eq
 80016c8:	2301      	moveq	r3, #1
 80016ca:	2300      	movne	r3, #0
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80016de:	bf0c      	ite	eq
 80016e0:	2301      	moveq	r3, #1
 80016e2:	2300      	movne	r3, #0
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d015      	beq.n	800171a <HAL_ADC_IRQHandler+0x27a>
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d012      	beq.n	800171a <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f8:	f043 0202 	orr.w	r2, r3, #2
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f06f 0220 	mvn.w	r2, #32
 8001708:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 f82a 	bl	8001764 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f06f 0220 	mvn.w	r2, #32
 8001718:	601a      	str	r2, [r3, #0]
  }
}
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001782:	2300      	movs	r3, #0
 8001784:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800178c:	2b01      	cmp	r3, #1
 800178e:	d101      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x1c>
 8001790:	2302      	movs	r3, #2
 8001792:	e113      	b.n	80019bc <HAL_ADC_ConfigChannel+0x244>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b09      	cmp	r3, #9
 80017a2:	d925      	bls.n	80017f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68d9      	ldr	r1, [r3, #12]
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	461a      	mov	r2, r3
 80017b2:	4613      	mov	r3, r2
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	4413      	add	r3, r2
 80017b8:	3b1e      	subs	r3, #30
 80017ba:	2207      	movs	r2, #7
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43da      	mvns	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	400a      	ands	r2, r1
 80017c8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68d9      	ldr	r1, [r3, #12]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	4618      	mov	r0, r3
 80017dc:	4603      	mov	r3, r0
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	4403      	add	r3, r0
 80017e2:	3b1e      	subs	r3, #30
 80017e4:	409a      	lsls	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	e022      	b.n	8001836 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6919      	ldr	r1, [r3, #16]
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	461a      	mov	r2, r3
 80017fe:	4613      	mov	r3, r2
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4413      	add	r3, r2
 8001804:	2207      	movs	r2, #7
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43da      	mvns	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	400a      	ands	r2, r1
 8001812:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6919      	ldr	r1, [r3, #16]
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	b29b      	uxth	r3, r3
 8001824:	4618      	mov	r0, r3
 8001826:	4603      	mov	r3, r0
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4403      	add	r3, r0
 800182c:	409a      	lsls	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	430a      	orrs	r2, r1
 8001834:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b06      	cmp	r3, #6
 800183c:	d824      	bhi.n	8001888 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	4613      	mov	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	3b05      	subs	r3, #5
 8001850:	221f      	movs	r2, #31
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43da      	mvns	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	400a      	ands	r2, r1
 800185e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	b29b      	uxth	r3, r3
 800186c:	4618      	mov	r0, r3
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	3b05      	subs	r3, #5
 800187a:	fa00 f203 	lsl.w	r2, r0, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	635a      	str	r2, [r3, #52]	; 0x34
 8001886:	e04c      	b.n	8001922 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b0c      	cmp	r3, #12
 800188e:	d824      	bhi.n	80018da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	3b23      	subs	r3, #35	; 0x23
 80018a2:	221f      	movs	r2, #31
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43da      	mvns	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	400a      	ands	r2, r1
 80018b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	4618      	mov	r0, r3
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	3b23      	subs	r3, #35	; 0x23
 80018cc:	fa00 f203 	lsl.w	r2, r0, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	631a      	str	r2, [r3, #48]	; 0x30
 80018d8:	e023      	b.n	8001922 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	3b41      	subs	r3, #65	; 0x41
 80018ec:	221f      	movs	r2, #31
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43da      	mvns	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	400a      	ands	r2, r1
 80018fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	b29b      	uxth	r3, r3
 8001908:	4618      	mov	r0, r3
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	3b41      	subs	r3, #65	; 0x41
 8001916:	fa00 f203 	lsl.w	r2, r0, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	430a      	orrs	r2, r1
 8001920:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001922:	4b29      	ldr	r3, [pc, #164]	; (80019c8 <HAL_ADC_ConfigChannel+0x250>)
 8001924:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a28      	ldr	r2, [pc, #160]	; (80019cc <HAL_ADC_ConfigChannel+0x254>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d10f      	bne.n	8001950 <HAL_ADC_ConfigChannel+0x1d8>
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b12      	cmp	r3, #18
 8001936:	d10b      	bne.n	8001950 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a1d      	ldr	r2, [pc, #116]	; (80019cc <HAL_ADC_ConfigChannel+0x254>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d12b      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0x23a>
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a1c      	ldr	r2, [pc, #112]	; (80019d0 <HAL_ADC_ConfigChannel+0x258>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d003      	beq.n	800196c <HAL_ADC_ConfigChannel+0x1f4>
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b11      	cmp	r3, #17
 800196a:	d122      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a11      	ldr	r2, [pc, #68]	; (80019d0 <HAL_ADC_ConfigChannel+0x258>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d111      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800198e:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <HAL_ADC_ConfigChannel+0x25c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a11      	ldr	r2, [pc, #68]	; (80019d8 <HAL_ADC_ConfigChannel+0x260>)
 8001994:	fba2 2303 	umull	r2, r3, r2, r3
 8001998:	0c9a      	lsrs	r2, r3, #18
 800199a:	4613      	mov	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019a4:	e002      	b.n	80019ac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	3b01      	subs	r3, #1
 80019aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f9      	bne.n	80019a6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	40012300 	.word	0x40012300
 80019cc:	40012000 	.word	0x40012000
 80019d0:	10000012 	.word	0x10000012
 80019d4:	20000118 	.word	0x20000118
 80019d8:	431bde83 	.word	0x431bde83

080019dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019e4:	4b79      	ldr	r3, [pc, #484]	; (8001bcc <ADC_Init+0x1f0>)
 80019e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	431a      	orrs	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6859      	ldr	r1, [r3, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	021a      	lsls	r2, r3, #8
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6859      	ldr	r1, [r3, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689a      	ldr	r2, [r3, #8]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6899      	ldr	r1, [r3, #8]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6e:	4a58      	ldr	r2, [pc, #352]	; (8001bd0 <ADC_Init+0x1f4>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d022      	beq.n	8001aba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	689a      	ldr	r2, [r3, #8]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6899      	ldr	r1, [r3, #8]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001aa4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6899      	ldr	r1, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	e00f      	b.n	8001ada <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ac8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ad8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 0202 	bic.w	r2, r2, #2
 8001ae8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6899      	ldr	r1, [r3, #8]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	7e1b      	ldrb	r3, [r3, #24]
 8001af4:	005a      	lsls	r2, r3, #1
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d01b      	beq.n	8001b40 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b16:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6859      	ldr	r1, [r3, #4]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	3b01      	subs	r3, #1
 8001b34:	035a      	lsls	r2, r3, #13
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	e007      	b.n	8001b50 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	051a      	lsls	r2, r3, #20
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6899      	ldr	r1, [r3, #8]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b92:	025a      	lsls	r2, r3, #9
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001baa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6899      	ldr	r1, [r3, #8]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	029a      	lsls	r2, r3, #10
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	609a      	str	r2, [r3, #8]
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	40012300 	.word	0x40012300
 8001bd0:	0f000001 	.word	0x0f000001

08001bd4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c04:	4013      	ands	r3, r2
 8001c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1a:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	60d3      	str	r3, [r2, #12]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <__NVIC_GetPriorityGrouping+0x18>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	0a1b      	lsrs	r3, r3, #8
 8001c3a:	f003 0307 	and.w	r3, r3, #7
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	db0b      	blt.n	8001c76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	f003 021f 	and.w	r2, r3, #31
 8001c64:	4907      	ldr	r1, [pc, #28]	; (8001c84 <__NVIC_EnableIRQ+0x38>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000e100 	.word	0xe000e100

08001c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	6039      	str	r1, [r7, #0]
 8001c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	db0a      	blt.n	8001cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	490c      	ldr	r1, [pc, #48]	; (8001cd4 <__NVIC_SetPriority+0x4c>)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	0112      	lsls	r2, r2, #4
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	440b      	add	r3, r1
 8001cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb0:	e00a      	b.n	8001cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	4908      	ldr	r1, [pc, #32]	; (8001cd8 <__NVIC_SetPriority+0x50>)
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	3b04      	subs	r3, #4
 8001cc0:	0112      	lsls	r2, r2, #4
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	761a      	strb	r2, [r3, #24]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000e100 	.word	0xe000e100
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b089      	sub	sp, #36	; 0x24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f1c3 0307 	rsb	r3, r3, #7
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	bf28      	it	cs
 8001cfa:	2304      	movcs	r3, #4
 8001cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3304      	adds	r3, #4
 8001d02:	2b06      	cmp	r3, #6
 8001d04:	d902      	bls.n	8001d0c <NVIC_EncodePriority+0x30>
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3b03      	subs	r3, #3
 8001d0a:	e000      	b.n	8001d0e <NVIC_EncodePriority+0x32>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	f04f 32ff 	mov.w	r2, #4294967295
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43da      	mvns	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	401a      	ands	r2, r3
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d24:	f04f 31ff 	mov.w	r1, #4294967295
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2e:	43d9      	mvns	r1, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	4313      	orrs	r3, r2
         );
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3724      	adds	r7, #36	; 0x24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
	...

08001d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d54:	d301      	bcc.n	8001d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d56:	2301      	movs	r3, #1
 8001d58:	e00f      	b.n	8001d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <SysTick_Config+0x40>)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d62:	210f      	movs	r1, #15
 8001d64:	f04f 30ff 	mov.w	r0, #4294967295
 8001d68:	f7ff ff8e 	bl	8001c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <SysTick_Config+0x40>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d72:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <SysTick_Config+0x40>)
 8001d74:	2207      	movs	r2, #7
 8001d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	e000e010 	.word	0xe000e010

08001d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff ff29 	bl	8001be8 <__NVIC_SetPriorityGrouping>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b086      	sub	sp, #24
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
 8001daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db0:	f7ff ff3e 	bl	8001c30 <__NVIC_GetPriorityGrouping>
 8001db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	6978      	ldr	r0, [r7, #20]
 8001dbc:	f7ff ff8e 	bl	8001cdc <NVIC_EncodePriority>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff5d 	bl	8001c88 <__NVIC_SetPriority>
}
 8001dce:	bf00      	nop
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	4603      	mov	r3, r0
 8001dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff31 	bl	8001c4c <__NVIC_EnableIRQ>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ffa2 	bl	8001d44 <SysTick_Config>
 8001e00:	4603      	mov	r3, r0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e18:	f7ff fa10 	bl	800123c <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e099      	b.n	8001f5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0201 	bic.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e48:	e00f      	b.n	8001e6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e4a:	f7ff f9f7 	bl	800123c <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b05      	cmp	r3, #5
 8001e56:	d908      	bls.n	8001e6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2203      	movs	r2, #3
 8001e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e078      	b.n	8001f5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1e8      	bne.n	8001e4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	4b38      	ldr	r3, [pc, #224]	; (8001f64 <HAL_DMA_Init+0x158>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ea2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	2b04      	cmp	r3, #4
 8001ec2:	d107      	bne.n	8001ed4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f023 0307 	bic.w	r3, r3, #7
 8001eea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d117      	bne.n	8001f2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00e      	beq.n	8001f2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 fa19 	bl	8002348 <DMA_CheckFifoParam>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d008      	beq.n	8001f2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2240      	movs	r2, #64	; 0x40
 8001f20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e016      	b.n	8001f5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f9d0 	bl	80022dc <DMA_CalcBaseAndBitshift>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f44:	223f      	movs	r2, #63	; 0x3f
 8001f46:	409a      	lsls	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	f010803f 	.word	0xf010803f

08001f68 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d004      	beq.n	8001f86 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2280      	movs	r2, #128	; 0x80
 8001f80:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e00c      	b.n	8001fa0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2205      	movs	r2, #5
 8001f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0201 	bic.w	r2, r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fb8:	4b92      	ldr	r3, [pc, #584]	; (8002204 <HAL_DMA_IRQHandler+0x258>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a92      	ldr	r2, [pc, #584]	; (8002208 <HAL_DMA_IRQHandler+0x25c>)
 8001fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc2:	0a9b      	lsrs	r3, r3, #10
 8001fc4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd6:	2208      	movs	r2, #8
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d01a      	beq.n	8002018 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d013      	beq.n	8002018 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0204 	bic.w	r2, r2, #4
 8001ffe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002004:	2208      	movs	r2, #8
 8002006:	409a      	lsls	r2, r3
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002010:	f043 0201 	orr.w	r2, r3, #1
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201c:	2201      	movs	r2, #1
 800201e:	409a      	lsls	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4013      	ands	r3, r2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d012      	beq.n	800204e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00b      	beq.n	800204e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203a:	2201      	movs	r2, #1
 800203c:	409a      	lsls	r2, r3
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002046:	f043 0202 	orr.w	r2, r3, #2
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002052:	2204      	movs	r2, #4
 8002054:	409a      	lsls	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4013      	ands	r3, r2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d012      	beq.n	8002084 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00b      	beq.n	8002084 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002070:	2204      	movs	r2, #4
 8002072:	409a      	lsls	r2, r3
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207c:	f043 0204 	orr.w	r2, r3, #4
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002088:	2210      	movs	r2, #16
 800208a:	409a      	lsls	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4013      	ands	r3, r2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d043      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d03c      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a6:	2210      	movs	r2, #16
 80020a8:	409a      	lsls	r2, r3
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d018      	beq.n	80020ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d108      	bne.n	80020dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d024      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	4798      	blx	r3
 80020da:	e01f      	b.n	800211c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d01b      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	4798      	blx	r3
 80020ec:	e016      	b.n	800211c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d107      	bne.n	800210c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0208 	bic.w	r2, r2, #8
 800210a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002120:	2220      	movs	r2, #32
 8002122:	409a      	lsls	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4013      	ands	r3, r2
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 808e 	beq.w	800224a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 8086 	beq.w	800224a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002142:	2220      	movs	r2, #32
 8002144:	409a      	lsls	r2, r3
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b05      	cmp	r3, #5
 8002154:	d136      	bne.n	80021c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0216 	bic.w	r2, r2, #22
 8002164:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	695a      	ldr	r2, [r3, #20]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002174:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	2b00      	cmp	r3, #0
 800217c:	d103      	bne.n	8002186 <HAL_DMA_IRQHandler+0x1da>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002182:	2b00      	cmp	r3, #0
 8002184:	d007      	beq.n	8002196 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0208 	bic.w	r2, r2, #8
 8002194:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219a:	223f      	movs	r2, #63	; 0x3f
 800219c:	409a      	lsls	r2, r3
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d07d      	beq.n	80022b6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	4798      	blx	r3
        }
        return;
 80021c2:	e078      	b.n	80022b6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d01c      	beq.n	800220c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d108      	bne.n	80021f2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d030      	beq.n	800224a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	4798      	blx	r3
 80021f0:	e02b      	b.n	800224a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d027      	beq.n	800224a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	4798      	blx	r3
 8002202:	e022      	b.n	800224a <HAL_DMA_IRQHandler+0x29e>
 8002204:	20000118 	.word	0x20000118
 8002208:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10f      	bne.n	800223a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0210 	bic.w	r2, r2, #16
 8002228:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224e:	2b00      	cmp	r3, #0
 8002250:	d032      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d022      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2205      	movs	r2, #5
 8002262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0201 	bic.w	r2, r2, #1
 8002274:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	3301      	adds	r3, #1
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	429a      	cmp	r2, r3
 8002280:	d307      	bcc.n	8002292 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1f2      	bne.n	8002276 <HAL_DMA_IRQHandler+0x2ca>
 8002290:	e000      	b.n	8002294 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002292:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d005      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	4798      	blx	r3
 80022b4:	e000      	b.n	80022b8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80022b6:	bf00      	nop
    }
  }
}
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop

080022c0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022ce:	b2db      	uxtb	r3, r3
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	3b10      	subs	r3, #16
 80022ec:	4a14      	ldr	r2, [pc, #80]	; (8002340 <DMA_CalcBaseAndBitshift+0x64>)
 80022ee:	fba2 2303 	umull	r2, r3, r2, r3
 80022f2:	091b      	lsrs	r3, r3, #4
 80022f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022f6:	4a13      	ldr	r2, [pc, #76]	; (8002344 <DMA_CalcBaseAndBitshift+0x68>)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4413      	add	r3, r2
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b03      	cmp	r3, #3
 8002308:	d909      	bls.n	800231e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002312:	f023 0303 	bic.w	r3, r3, #3
 8002316:	1d1a      	adds	r2, r3, #4
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	659a      	str	r2, [r3, #88]	; 0x58
 800231c:	e007      	b.n	800232e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002326:	f023 0303 	bic.w	r3, r3, #3
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002332:	4618      	mov	r0, r3
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	aaaaaaab 	.word	0xaaaaaaab
 8002344:	08010ff4 	.word	0x08010ff4

08002348 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002350:	2300      	movs	r3, #0
 8002352:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002358:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d11f      	bne.n	80023a2 <DMA_CheckFifoParam+0x5a>
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b03      	cmp	r3, #3
 8002366:	d856      	bhi.n	8002416 <DMA_CheckFifoParam+0xce>
 8002368:	a201      	add	r2, pc, #4	; (adr r2, 8002370 <DMA_CheckFifoParam+0x28>)
 800236a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236e:	bf00      	nop
 8002370:	08002381 	.word	0x08002381
 8002374:	08002393 	.word	0x08002393
 8002378:	08002381 	.word	0x08002381
 800237c:	08002417 	.word	0x08002417
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002384:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d046      	beq.n	800241a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002390:	e043      	b.n	800241a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002396:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800239a:	d140      	bne.n	800241e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023a0:	e03d      	b.n	800241e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023aa:	d121      	bne.n	80023f0 <DMA_CheckFifoParam+0xa8>
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	d837      	bhi.n	8002422 <DMA_CheckFifoParam+0xda>
 80023b2:	a201      	add	r2, pc, #4	; (adr r2, 80023b8 <DMA_CheckFifoParam+0x70>)
 80023b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b8:	080023c9 	.word	0x080023c9
 80023bc:	080023cf 	.word	0x080023cf
 80023c0:	080023c9 	.word	0x080023c9
 80023c4:	080023e1 	.word	0x080023e1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	73fb      	strb	r3, [r7, #15]
      break;
 80023cc:	e030      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d025      	beq.n	8002426 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023de:	e022      	b.n	8002426 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023e8:	d11f      	bne.n	800242a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023ee:	e01c      	b.n	800242a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d903      	bls.n	80023fe <DMA_CheckFifoParam+0xb6>
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d003      	beq.n	8002404 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023fc:	e018      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	73fb      	strb	r3, [r7, #15]
      break;
 8002402:	e015      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00e      	beq.n	800242e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	73fb      	strb	r3, [r7, #15]
      break;
 8002414:	e00b      	b.n	800242e <DMA_CheckFifoParam+0xe6>
      break;
 8002416:	bf00      	nop
 8002418:	e00a      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      break;
 800241a:	bf00      	nop
 800241c:	e008      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      break;
 800241e:	bf00      	nop
 8002420:	e006      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      break;
 8002422:	bf00      	nop
 8002424:	e004      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      break;
 8002426:	bf00      	nop
 8002428:	e002      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      break;   
 800242a:	bf00      	nop
 800242c:	e000      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      break;
 800242e:	bf00      	nop
    }
  } 
  
  return status; 
 8002430:	7bfb      	ldrb	r3, [r7, #15]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop

08002440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002440:	b480      	push	{r7}
 8002442:	b089      	sub	sp, #36	; 0x24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800244e:	2300      	movs	r3, #0
 8002450:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002452:	2300      	movs	r3, #0
 8002454:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]
 800245a:	e159      	b.n	8002710 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800245c:	2201      	movs	r2, #1
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	4013      	ands	r3, r2
 800246e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	429a      	cmp	r2, r3
 8002476:	f040 8148 	bne.w	800270a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	2b01      	cmp	r3, #1
 8002484:	d005      	beq.n	8002492 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800248e:	2b02      	cmp	r3, #2
 8002490:	d130      	bne.n	80024f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	2203      	movs	r2, #3
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4013      	ands	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024c8:	2201      	movs	r2, #1
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	091b      	lsrs	r3, r3, #4
 80024de:	f003 0201 	and.w	r2, r3, #1
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d017      	beq.n	8002530 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	2203      	movs	r2, #3
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d123      	bne.n	8002584 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	08da      	lsrs	r2, r3, #3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3208      	adds	r2, #8
 8002544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002548:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	220f      	movs	r2, #15
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	691a      	ldr	r2, [r3, #16]
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	08da      	lsrs	r2, r3, #3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3208      	adds	r2, #8
 800257e:	69b9      	ldr	r1, [r7, #24]
 8002580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	2203      	movs	r2, #3
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 0203 	and.w	r2, r3, #3
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 80a2 	beq.w	800270a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	4b57      	ldr	r3, [pc, #348]	; (8002728 <HAL_GPIO_Init+0x2e8>)
 80025cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ce:	4a56      	ldr	r2, [pc, #344]	; (8002728 <HAL_GPIO_Init+0x2e8>)
 80025d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025d4:	6453      	str	r3, [r2, #68]	; 0x44
 80025d6:	4b54      	ldr	r3, [pc, #336]	; (8002728 <HAL_GPIO_Init+0x2e8>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025e2:	4a52      	ldr	r2, [pc, #328]	; (800272c <HAL_GPIO_Init+0x2ec>)
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	089b      	lsrs	r3, r3, #2
 80025e8:	3302      	adds	r3, #2
 80025ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	220f      	movs	r2, #15
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43db      	mvns	r3, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4013      	ands	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a49      	ldr	r2, [pc, #292]	; (8002730 <HAL_GPIO_Init+0x2f0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d019      	beq.n	8002642 <HAL_GPIO_Init+0x202>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a48      	ldr	r2, [pc, #288]	; (8002734 <HAL_GPIO_Init+0x2f4>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d013      	beq.n	800263e <HAL_GPIO_Init+0x1fe>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a47      	ldr	r2, [pc, #284]	; (8002738 <HAL_GPIO_Init+0x2f8>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00d      	beq.n	800263a <HAL_GPIO_Init+0x1fa>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a46      	ldr	r2, [pc, #280]	; (800273c <HAL_GPIO_Init+0x2fc>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d007      	beq.n	8002636 <HAL_GPIO_Init+0x1f6>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a45      	ldr	r2, [pc, #276]	; (8002740 <HAL_GPIO_Init+0x300>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d101      	bne.n	8002632 <HAL_GPIO_Init+0x1f2>
 800262e:	2304      	movs	r3, #4
 8002630:	e008      	b.n	8002644 <HAL_GPIO_Init+0x204>
 8002632:	2307      	movs	r3, #7
 8002634:	e006      	b.n	8002644 <HAL_GPIO_Init+0x204>
 8002636:	2303      	movs	r3, #3
 8002638:	e004      	b.n	8002644 <HAL_GPIO_Init+0x204>
 800263a:	2302      	movs	r3, #2
 800263c:	e002      	b.n	8002644 <HAL_GPIO_Init+0x204>
 800263e:	2301      	movs	r3, #1
 8002640:	e000      	b.n	8002644 <HAL_GPIO_Init+0x204>
 8002642:	2300      	movs	r3, #0
 8002644:	69fa      	ldr	r2, [r7, #28]
 8002646:	f002 0203 	and.w	r2, r2, #3
 800264a:	0092      	lsls	r2, r2, #2
 800264c:	4093      	lsls	r3, r2
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002654:	4935      	ldr	r1, [pc, #212]	; (800272c <HAL_GPIO_Init+0x2ec>)
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	089b      	lsrs	r3, r3, #2
 800265a:	3302      	adds	r3, #2
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002662:	4b38      	ldr	r3, [pc, #224]	; (8002744 <HAL_GPIO_Init+0x304>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	43db      	mvns	r3, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4013      	ands	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002686:	4a2f      	ldr	r2, [pc, #188]	; (8002744 <HAL_GPIO_Init+0x304>)
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800268c:	4b2d      	ldr	r3, [pc, #180]	; (8002744 <HAL_GPIO_Init+0x304>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026b0:	4a24      	ldr	r2, [pc, #144]	; (8002744 <HAL_GPIO_Init+0x304>)
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026b6:	4b23      	ldr	r3, [pc, #140]	; (8002744 <HAL_GPIO_Init+0x304>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	43db      	mvns	r3, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4013      	ands	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026da:	4a1a      	ldr	r2, [pc, #104]	; (8002744 <HAL_GPIO_Init+0x304>)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026e0:	4b18      	ldr	r3, [pc, #96]	; (8002744 <HAL_GPIO_Init+0x304>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002704:	4a0f      	ldr	r2, [pc, #60]	; (8002744 <HAL_GPIO_Init+0x304>)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3301      	adds	r3, #1
 800270e:	61fb      	str	r3, [r7, #28]
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	2b0f      	cmp	r3, #15
 8002714:	f67f aea2 	bls.w	800245c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002718:	bf00      	nop
 800271a:	bf00      	nop
 800271c:	3724      	adds	r7, #36	; 0x24
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	40023800 	.word	0x40023800
 800272c:	40013800 	.word	0x40013800
 8002730:	40020000 	.word	0x40020000
 8002734:	40020400 	.word	0x40020400
 8002738:	40020800 	.word	0x40020800
 800273c:	40020c00 	.word	0x40020c00
 8002740:	40021000 	.word	0x40021000
 8002744:	40013c00 	.word	0x40013c00

08002748 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691a      	ldr	r2, [r3, #16]
 8002758:	887b      	ldrh	r3, [r7, #2]
 800275a:	4013      	ands	r3, r2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002760:	2301      	movs	r3, #1
 8002762:	73fb      	strb	r3, [r7, #15]
 8002764:	e001      	b.n	800276a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002766:	2300      	movs	r3, #0
 8002768:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800276a:	7bfb      	ldrb	r3, [r7, #15]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	807b      	strh	r3, [r7, #2]
 8002784:	4613      	mov	r3, r2
 8002786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002788:	787b      	ldrb	r3, [r7, #1]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800278e:	887a      	ldrh	r2, [r7, #2]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002794:	e003      	b.n	800279e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002796:	887b      	ldrh	r3, [r7, #2]
 8002798:	041a      	lsls	r2, r3, #16
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	619a      	str	r2, [r3, #24]
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b085      	sub	sp, #20
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
 80027b2:	460b      	mov	r3, r1
 80027b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027bc:	887a      	ldrh	r2, [r7, #2]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4013      	ands	r3, r2
 80027c2:	041a      	lsls	r2, r3, #16
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	43d9      	mvns	r1, r3
 80027c8:	887b      	ldrh	r3, [r7, #2]
 80027ca:	400b      	ands	r3, r1
 80027cc:	431a      	orrs	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	619a      	str	r2, [r3, #24]
}
 80027d2:	bf00      	nop
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
	...

080027e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027ea:	4b08      	ldr	r3, [pc, #32]	; (800280c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027ec:	695a      	ldr	r2, [r3, #20]
 80027ee:	88fb      	ldrh	r3, [r7, #6]
 80027f0:	4013      	ands	r3, r2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d006      	beq.n	8002804 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027f6:	4a05      	ldr	r2, [pc, #20]	; (800280c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027f8:	88fb      	ldrh	r3, [r7, #6]
 80027fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027fc:	88fb      	ldrh	r3, [r7, #6]
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 f806 	bl	8002810 <HAL_GPIO_EXTI_Callback>
  }
}
 8002804:	bf00      	nop
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40013c00 	.word	0x40013c00

08002810 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
	...

08002828 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e12b      	b.n	8002a92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d106      	bne.n	8002854 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f00a fc9e 	bl	800d190 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2224      	movs	r2, #36	; 0x24
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0201 	bic.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800287a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800288a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800288c:	f003 fb2c 	bl	8005ee8 <HAL_RCC_GetPCLK1Freq>
 8002890:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	4a81      	ldr	r2, [pc, #516]	; (8002a9c <HAL_I2C_Init+0x274>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d807      	bhi.n	80028ac <HAL_I2C_Init+0x84>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4a80      	ldr	r2, [pc, #512]	; (8002aa0 <HAL_I2C_Init+0x278>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	bf94      	ite	ls
 80028a4:	2301      	movls	r3, #1
 80028a6:	2300      	movhi	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	e006      	b.n	80028ba <HAL_I2C_Init+0x92>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4a7d      	ldr	r2, [pc, #500]	; (8002aa4 <HAL_I2C_Init+0x27c>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	bf94      	ite	ls
 80028b4:	2301      	movls	r3, #1
 80028b6:	2300      	movhi	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e0e7      	b.n	8002a92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4a78      	ldr	r2, [pc, #480]	; (8002aa8 <HAL_I2C_Init+0x280>)
 80028c6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ca:	0c9b      	lsrs	r3, r3, #18
 80028cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	430a      	orrs	r2, r1
 80028e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	4a6a      	ldr	r2, [pc, #424]	; (8002a9c <HAL_I2C_Init+0x274>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d802      	bhi.n	80028fc <HAL_I2C_Init+0xd4>
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	3301      	adds	r3, #1
 80028fa:	e009      	b.n	8002910 <HAL_I2C_Init+0xe8>
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002902:	fb02 f303 	mul.w	r3, r2, r3
 8002906:	4a69      	ldr	r2, [pc, #420]	; (8002aac <HAL_I2C_Init+0x284>)
 8002908:	fba2 2303 	umull	r2, r3, r2, r3
 800290c:	099b      	lsrs	r3, r3, #6
 800290e:	3301      	adds	r3, #1
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	430b      	orrs	r3, r1
 8002916:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002922:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	495c      	ldr	r1, [pc, #368]	; (8002a9c <HAL_I2C_Init+0x274>)
 800292c:	428b      	cmp	r3, r1
 800292e:	d819      	bhi.n	8002964 <HAL_I2C_Init+0x13c>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	1e59      	subs	r1, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	fbb1 f3f3 	udiv	r3, r1, r3
 800293e:	1c59      	adds	r1, r3, #1
 8002940:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002944:	400b      	ands	r3, r1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00a      	beq.n	8002960 <HAL_I2C_Init+0x138>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	1e59      	subs	r1, r3, #1
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	fbb1 f3f3 	udiv	r3, r1, r3
 8002958:	3301      	adds	r3, #1
 800295a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800295e:	e051      	b.n	8002a04 <HAL_I2C_Init+0x1dc>
 8002960:	2304      	movs	r3, #4
 8002962:	e04f      	b.n	8002a04 <HAL_I2C_Init+0x1dc>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d111      	bne.n	8002990 <HAL_I2C_Init+0x168>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	1e58      	subs	r0, r3, #1
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6859      	ldr	r1, [r3, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	440b      	add	r3, r1
 800297a:	fbb0 f3f3 	udiv	r3, r0, r3
 800297e:	3301      	adds	r3, #1
 8002980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002984:	2b00      	cmp	r3, #0
 8002986:	bf0c      	ite	eq
 8002988:	2301      	moveq	r3, #1
 800298a:	2300      	movne	r3, #0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	e012      	b.n	80029b6 <HAL_I2C_Init+0x18e>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	1e58      	subs	r0, r3, #1
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6859      	ldr	r1, [r3, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	0099      	lsls	r1, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029a6:	3301      	adds	r3, #1
 80029a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	bf0c      	ite	eq
 80029b0:	2301      	moveq	r3, #1
 80029b2:	2300      	movne	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_I2C_Init+0x196>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e022      	b.n	8002a04 <HAL_I2C_Init+0x1dc>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10e      	bne.n	80029e4 <HAL_I2C_Init+0x1bc>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1e58      	subs	r0, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6859      	ldr	r1, [r3, #4]
 80029ce:	460b      	mov	r3, r1
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	440b      	add	r3, r1
 80029d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80029d8:	3301      	adds	r3, #1
 80029da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029e2:	e00f      	b.n	8002a04 <HAL_I2C_Init+0x1dc>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	1e58      	subs	r0, r3, #1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6859      	ldr	r1, [r3, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	0099      	lsls	r1, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029fa:	3301      	adds	r3, #1
 80029fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	6809      	ldr	r1, [r1, #0]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69da      	ldr	r2, [r3, #28]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6911      	ldr	r1, [r2, #16]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	68d2      	ldr	r2, [r2, #12]
 8002a3e:	4311      	orrs	r1, r2
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6812      	ldr	r2, [r2, #0]
 8002a44:	430b      	orrs	r3, r1
 8002a46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695a      	ldr	r2, [r3, #20]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0201 	orr.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	000186a0 	.word	0x000186a0
 8002aa0:	001e847f 	.word	0x001e847f
 8002aa4:	003d08ff 	.word	0x003d08ff
 8002aa8:	431bde83 	.word	0x431bde83
 8002aac:	10624dd3 	.word	0x10624dd3

08002ab0 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	4608      	mov	r0, r1
 8002aba:	4611      	mov	r1, r2
 8002abc:	461a      	mov	r2, r3
 8002abe:	4603      	mov	r3, r0
 8002ac0:	817b      	strh	r3, [r7, #10]
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	813b      	strh	r3, [r7, #8]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b20      	cmp	r3, #32
 8002ad8:	f040 809a 	bne.w	8002c10 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002adc:	4b50      	ldr	r3, [pc, #320]	; (8002c20 <HAL_I2C_Mem_Read_IT+0x170>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	08db      	lsrs	r3, r3, #3
 8002ae2:	4a50      	ldr	r2, [pc, #320]	; (8002c24 <HAL_I2C_Mem_Read_IT+0x174>)
 8002ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae8:	0a1a      	lsrs	r2, r3, #8
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	009a      	lsls	r2, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	3b01      	subs	r3, #1
 8002afa:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d116      	bne.n	8002b30 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	f043 0220 	orr.w	r2, r3, #32
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e070      	b.n	8002c12 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d0db      	beq.n	8002af6 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_I2C_Mem_Read_IT+0x9c>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e062      	b.n	8002c12 <HAL_I2C_Mem_Read_IT+0x162>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d007      	beq.n	8002b72 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f042 0201 	orr.w	r2, r2, #1
 8002b70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b80:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2222      	movs	r2, #34	; 0x22
 8002b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2240      	movs	r2, #64	; 0x40
 8002b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6a3a      	ldr	r2, [r7, #32]
 8002b9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ba2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	4a1d      	ldr	r2, [pc, #116]	; (8002c28 <HAL_I2C_Mem_Read_IT+0x178>)
 8002bb2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002bb4:	897a      	ldrh	r2, [r7, #10]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8002bba:	893a      	ldrh	r2, [r7, #8]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002bc0:	88fa      	ldrh	r2, [r7, #6]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bda:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bea:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d007      	beq.n	8002c0c <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002c0a:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	e000      	b.n	8002c12 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8002c10:	2302      	movs	r3, #2
  }
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	371c      	adds	r7, #28
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	20000118 	.word	0x20000118
 8002c24:	14f8b589 	.word	0x14f8b589
 8002c28:	ffff0000 	.word	0xffff0000

08002c2c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c44:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c4c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c54:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	2b10      	cmp	r3, #16
 8002c5a:	d003      	beq.n	8002c64 <HAL_I2C_EV_IRQHandler+0x38>
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	2b40      	cmp	r3, #64	; 0x40
 8002c60:	f040 80c1 	bne.w	8002de6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10d      	bne.n	8002c9a <HAL_I2C_EV_IRQHandler+0x6e>
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002c84:	d003      	beq.n	8002c8e <HAL_I2C_EV_IRQHandler+0x62>
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002c8c:	d101      	bne.n	8002c92 <HAL_I2C_EV_IRQHandler+0x66>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <HAL_I2C_EV_IRQHandler+0x68>
 8002c92:	2300      	movs	r3, #0
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	f000 8132 	beq.w	8002efe <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00c      	beq.n	8002cbe <HAL_I2C_EV_IRQHandler+0x92>
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	0a5b      	lsrs	r3, r3, #9
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d006      	beq.n	8002cbe <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f001 fb51 	bl	8004358 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fcc8 	bl	800364c <I2C_Master_SB>
 8002cbc:	e092      	b.n	8002de4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	08db      	lsrs	r3, r3, #3
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d009      	beq.n	8002cde <HAL_I2C_EV_IRQHandler+0xb2>
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	0a5b      	lsrs	r3, r3, #9
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 fd3e 	bl	8003758 <I2C_Master_ADD10>
 8002cdc:	e082      	b.n	8002de4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	085b      	lsrs	r3, r3, #1
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d009      	beq.n	8002cfe <HAL_I2C_EV_IRQHandler+0xd2>
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	0a5b      	lsrs	r3, r3, #9
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fd58 	bl	80037ac <I2C_Master_ADDR>
 8002cfc:	e072      	b.n	8002de4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	089b      	lsrs	r3, r3, #2
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d03b      	beq.n	8002d82 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d18:	f000 80f3 	beq.w	8002f02 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	09db      	lsrs	r3, r3, #7
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00f      	beq.n	8002d48 <HAL_I2C_EV_IRQHandler+0x11c>
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	0a9b      	lsrs	r3, r3, #10
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d009      	beq.n	8002d48 <HAL_I2C_EV_IRQHandler+0x11c>
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	089b      	lsrs	r3, r3, #2
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d103      	bne.n	8002d48 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f942 	bl	8002fca <I2C_MasterTransmit_TXE>
 8002d46:	e04d      	b.n	8002de4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	089b      	lsrs	r3, r3, #2
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 80d6 	beq.w	8002f02 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	0a5b      	lsrs	r3, r3, #9
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 80cf 	beq.w	8002f02 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002d64:	7bbb      	ldrb	r3, [r7, #14]
 8002d66:	2b21      	cmp	r3, #33	; 0x21
 8002d68:	d103      	bne.n	8002d72 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f9c9 	bl	8003102 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d70:	e0c7      	b.n	8002f02 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
 8002d74:	2b40      	cmp	r3, #64	; 0x40
 8002d76:	f040 80c4 	bne.w	8002f02 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 fa37 	bl	80031ee <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d80:	e0bf      	b.n	8002f02 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d90:	f000 80b7 	beq.w	8002f02 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	099b      	lsrs	r3, r3, #6
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00f      	beq.n	8002dc0 <HAL_I2C_EV_IRQHandler+0x194>
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	0a9b      	lsrs	r3, r3, #10
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d009      	beq.n	8002dc0 <HAL_I2C_EV_IRQHandler+0x194>
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	089b      	lsrs	r3, r3, #2
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d103      	bne.n	8002dc0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 faac 	bl	8003316 <I2C_MasterReceive_RXNE>
 8002dbe:	e011      	b.n	8002de4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	089b      	lsrs	r3, r3, #2
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 809a 	beq.w	8002f02 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	0a5b      	lsrs	r3, r3, #9
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 8093 	beq.w	8002f02 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fb4b 	bl	8003478 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002de2:	e08e      	b.n	8002f02 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002de4:	e08d      	b.n	8002f02 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d004      	beq.n	8002df8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	61fb      	str	r3, [r7, #28]
 8002df6:	e007      	b.n	8002e08 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	085b      	lsrs	r3, r3, #1
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d012      	beq.n	8002e3a <HAL_I2C_EV_IRQHandler+0x20e>
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	0a5b      	lsrs	r3, r3, #9
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00c      	beq.n	8002e3a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002e30:	69b9      	ldr	r1, [r7, #24]
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 ff09 	bl	8003c4a <I2C_Slave_ADDR>
 8002e38:	e066      	b.n	8002f08 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d009      	beq.n	8002e5a <HAL_I2C_EV_IRQHandler+0x22e>
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	0a5b      	lsrs	r3, r3, #9
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 ff44 	bl	8003ce0 <I2C_Slave_STOPF>
 8002e58:	e056      	b.n	8002f08 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e5a:	7bbb      	ldrb	r3, [r7, #14]
 8002e5c:	2b21      	cmp	r3, #33	; 0x21
 8002e5e:	d002      	beq.n	8002e66 <HAL_I2C_EV_IRQHandler+0x23a>
 8002e60:	7bbb      	ldrb	r3, [r7, #14]
 8002e62:	2b29      	cmp	r3, #41	; 0x29
 8002e64:	d125      	bne.n	8002eb2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	09db      	lsrs	r3, r3, #7
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00f      	beq.n	8002e92 <HAL_I2C_EV_IRQHandler+0x266>
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	0a9b      	lsrs	r3, r3, #10
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d009      	beq.n	8002e92 <HAL_I2C_EV_IRQHandler+0x266>
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	089b      	lsrs	r3, r3, #2
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d103      	bne.n	8002e92 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fe1f 	bl	8003ace <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e90:	e039      	b.n	8002f06 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	089b      	lsrs	r3, r3, #2
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d033      	beq.n	8002f06 <HAL_I2C_EV_IRQHandler+0x2da>
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	0a5b      	lsrs	r3, r3, #9
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d02d      	beq.n	8002f06 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 fe4c 	bl	8003b48 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002eb0:	e029      	b.n	8002f06 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	099b      	lsrs	r3, r3, #6
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00f      	beq.n	8002ede <HAL_I2C_EV_IRQHandler+0x2b2>
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	0a9b      	lsrs	r3, r3, #10
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d009      	beq.n	8002ede <HAL_I2C_EV_IRQHandler+0x2b2>
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	089b      	lsrs	r3, r3, #2
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d103      	bne.n	8002ede <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 fe57 	bl	8003b8a <I2C_SlaveReceive_RXNE>
 8002edc:	e014      	b.n	8002f08 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	089b      	lsrs	r3, r3, #2
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00e      	beq.n	8002f08 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	0a5b      	lsrs	r3, r3, #9
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d008      	beq.n	8002f08 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 fe85 	bl	8003c06 <I2C_SlaveReceive_BTF>
 8002efc:	e004      	b.n	8002f08 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002efe:	bf00      	nop
 8002f00:	e002      	b.n	8002f08 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f02:	bf00      	nop
 8002f04:	e000      	b.n	8002f08 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f06:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002f08:	3720      	adds	r7, #32
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	460b      	mov	r3, r1
 8002f68:	70fb      	strb	r3, [r7, #3]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b084      	sub	sp, #16
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fe0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d150      	bne.n	8003092 <I2C_MasterTransmit_TXE+0xc8>
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
 8002ff2:	2b21      	cmp	r3, #33	; 0x21
 8002ff4:	d14d      	bne.n	8003092 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d01d      	beq.n	8003038 <I2C_MasterTransmit_TXE+0x6e>
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2b20      	cmp	r3, #32
 8003000:	d01a      	beq.n	8003038 <I2C_MasterTransmit_TXE+0x6e>
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003008:	d016      	beq.n	8003038 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003018:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2211      	movs	r2, #17
 800301e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff ff6c 	bl	8002f0e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003036:	e060      	b.n	80030fa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003046:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003056:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2220      	movs	r2, #32
 8003062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b40      	cmp	r3, #64	; 0x40
 8003070:	d107      	bne.n	8003082 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff ff87 	bl	8002f8e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003080:	e03b      	b.n	80030fa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7ff ff3f 	bl	8002f0e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003090:	e033      	b.n	80030fa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003092:	7bfb      	ldrb	r3, [r7, #15]
 8003094:	2b21      	cmp	r3, #33	; 0x21
 8003096:	d005      	beq.n	80030a4 <I2C_MasterTransmit_TXE+0xda>
 8003098:	7bbb      	ldrb	r3, [r7, #14]
 800309a:	2b40      	cmp	r3, #64	; 0x40
 800309c:	d12d      	bne.n	80030fa <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	2b22      	cmp	r3, #34	; 0x22
 80030a2:	d12a      	bne.n	80030fa <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d108      	bne.n	80030c0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030bc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80030be:	e01c      	b.n	80030fa <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b40      	cmp	r3, #64	; 0x40
 80030ca:	d103      	bne.n	80030d4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f88e 	bl	80031ee <I2C_MemoryTransmit_TXE_BTF>
}
 80030d2:	e012      	b.n	80030fa <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	781a      	ldrb	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80030f8:	e7ff      	b.n	80030fa <I2C_MasterTransmit_TXE+0x130>
 80030fa:	bf00      	nop
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b084      	sub	sp, #16
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b21      	cmp	r3, #33	; 0x21
 800311a:	d164      	bne.n	80031e6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003120:	b29b      	uxth	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d012      	beq.n	800314c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	781a      	ldrb	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003140:	b29b      	uxth	r3, r3
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800314a:	e04c      	b.n	80031e6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2b08      	cmp	r3, #8
 8003150:	d01d      	beq.n	800318e <I2C_MasterTransmit_BTF+0x8c>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2b20      	cmp	r3, #32
 8003156:	d01a      	beq.n	800318e <I2C_MasterTransmit_BTF+0x8c>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800315e:	d016      	beq.n	800318e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800316e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2211      	movs	r2, #17
 8003174:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2220      	movs	r2, #32
 8003182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff fec1 	bl	8002f0e <HAL_I2C_MasterTxCpltCallback>
}
 800318c:	e02b      	b.n	80031e6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800319c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ac:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b40      	cmp	r3, #64	; 0x40
 80031c6:	d107      	bne.n	80031d8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f7ff fedc 	bl	8002f8e <HAL_I2C_MemTxCpltCallback>
}
 80031d6:	e006      	b.n	80031e6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7ff fe94 	bl	8002f0e <HAL_I2C_MasterTxCpltCallback>
}
 80031e6:	bf00      	nop
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b084      	sub	sp, #16
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031fc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003202:	2b00      	cmp	r3, #0
 8003204:	d11d      	bne.n	8003242 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800320a:	2b01      	cmp	r3, #1
 800320c:	d10b      	bne.n	8003226 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003212:	b2da      	uxtb	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800321e:	1c9a      	adds	r2, r3, #2
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003224:	e073      	b.n	800330e <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800322a:	b29b      	uxth	r3, r3
 800322c:	121b      	asrs	r3, r3, #8
 800322e:	b2da      	uxtb	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800323a:	1c5a      	adds	r2, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003240:	e065      	b.n	800330e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003246:	2b01      	cmp	r3, #1
 8003248:	d10b      	bne.n	8003262 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800324e:	b2da      	uxtb	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003260:	e055      	b.n	800330e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003266:	2b02      	cmp	r3, #2
 8003268:	d151      	bne.n	800330e <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800326a:	7bfb      	ldrb	r3, [r7, #15]
 800326c:	2b22      	cmp	r3, #34	; 0x22
 800326e:	d10d      	bne.n	800328c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800327e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003284:	1c5a      	adds	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	651a      	str	r2, [r3, #80]	; 0x50
}
 800328a:	e040      	b.n	800330e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003290:	b29b      	uxth	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d015      	beq.n	80032c2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	2b21      	cmp	r3, #33	; 0x21
 800329a:	d112      	bne.n	80032c2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	781a      	ldrb	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80032c0:	e025      	b.n	800330e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d120      	bne.n	800330e <I2C_MemoryTransmit_TXE_BTF+0x120>
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
 80032ce:	2b21      	cmp	r3, #33	; 0x21
 80032d0:	d11d      	bne.n	800330e <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032e0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff fe40 	bl	8002f8e <HAL_I2C_MemTxCpltCallback>
}
 800330e:	bf00      	nop
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b084      	sub	sp, #16
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b22      	cmp	r3, #34	; 0x22
 8003328:	f040 80a2 	bne.w	8003470 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003330:	b29b      	uxth	r3, r3
 8003332:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2b03      	cmp	r3, #3
 8003338:	d921      	bls.n	800337e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	1c5a      	adds	r2, r3, #1
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003356:	b29b      	uxth	r3, r3
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003364:	b29b      	uxth	r3, r3
 8003366:	2b03      	cmp	r3, #3
 8003368:	f040 8082 	bne.w	8003470 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800337a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800337c:	e078      	b.n	8003470 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003382:	2b02      	cmp	r3, #2
 8003384:	d074      	beq.n	8003470 <I2C_MasterReceive_RXNE+0x15a>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d002      	beq.n	8003392 <I2C_MasterReceive_RXNE+0x7c>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d16e      	bne.n	8003470 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 ffae 	bl	80042f4 <I2C_WaitOnSTOPRequestThroughIT>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d142      	bne.n	8003424 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ac:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033bc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	691a      	ldr	r2, [r3, #16]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b40      	cmp	r3, #64	; 0x40
 80033f6:	d10a      	bne.n	800340e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f00a f93a 	bl	800d680 <HAL_I2C_MemRxCpltCallback>
}
 800340c:	e030      	b.n	8003470 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2212      	movs	r2, #18
 800341a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7ff fd80 	bl	8002f22 <HAL_I2C_MasterRxCpltCallback>
}
 8003422:	e025      	b.n	8003470 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003432:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691a      	ldr	r2, [r3, #16]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2220      	movs	r2, #32
 800345e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7ff fd99 	bl	8002fa2 <HAL_I2C_ErrorCallback>
}
 8003470:	bf00      	nop
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003484:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348a:	b29b      	uxth	r3, r3
 800348c:	2b04      	cmp	r3, #4
 800348e:	d11b      	bne.n	80034c8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800349e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691a      	ldr	r2, [r3, #16]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	1c5a      	adds	r2, r3, #1
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80034c6:	e0bd      	b.n	8003644 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	2b03      	cmp	r3, #3
 80034d0:	d129      	bne.n	8003526 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034e0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d00a      	beq.n	80034fe <I2C_MasterReceive_BTF+0x86>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d007      	beq.n	80034fe <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034fc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	691a      	ldr	r2, [r3, #16]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351a:	b29b      	uxth	r3, r3
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003524:	e08e      	b.n	8003644 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352a:	b29b      	uxth	r3, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d176      	bne.n	800361e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d002      	beq.n	800353c <I2C_MasterReceive_BTF+0xc4>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2b10      	cmp	r3, #16
 800353a:	d108      	bne.n	800354e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	e019      	b.n	8003582 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2b04      	cmp	r3, #4
 8003552:	d002      	beq.n	800355a <I2C_MasterReceive_BTF+0xe2>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2b02      	cmp	r3, #2
 8003558:	d108      	bne.n	800356c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	e00a      	b.n	8003582 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2b10      	cmp	r3, #16
 8003570:	d007      	beq.n	8003582 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003580:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	691a      	ldr	r2, [r3, #16]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359e:	b29b      	uxth	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	691a      	ldr	r2, [r3, #16]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	3b01      	subs	r3, #1
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80035dc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2220      	movs	r2, #32
 80035e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b40      	cmp	r3, #64	; 0x40
 80035f0:	d10a      	bne.n	8003608 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f00a f83d 	bl	800d680 <HAL_I2C_MemRxCpltCallback>
}
 8003606:	e01d      	b.n	8003644 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2212      	movs	r2, #18
 8003614:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7ff fc83 	bl	8002f22 <HAL_I2C_MasterRxCpltCallback>
}
 800361c:	e012      	b.n	8003644 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363a:	b29b      	uxth	r3, r3
 800363c:	3b01      	subs	r3, #1
 800363e:	b29a      	uxth	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003644:	bf00      	nop
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b40      	cmp	r3, #64	; 0x40
 800365e:	d117      	bne.n	8003690 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003664:	2b00      	cmp	r3, #0
 8003666:	d109      	bne.n	800367c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366c:	b2db      	uxtb	r3, r3
 800366e:	461a      	mov	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003678:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800367a:	e067      	b.n	800374c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003680:	b2db      	uxtb	r3, r3
 8003682:	f043 0301 	orr.w	r3, r3, #1
 8003686:	b2da      	uxtb	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	611a      	str	r2, [r3, #16]
}
 800368e:	e05d      	b.n	800374c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003698:	d133      	bne.n	8003702 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b21      	cmp	r3, #33	; 0x21
 80036a4:	d109      	bne.n	80036ba <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	461a      	mov	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036b6:	611a      	str	r2, [r3, #16]
 80036b8:	e008      	b.n	80036cc <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	f043 0301 	orr.w	r3, r3, #1
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d004      	beq.n	80036de <I2C_Master_SB+0x92>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d108      	bne.n	80036f0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d032      	beq.n	800374c <I2C_Master_SB+0x100>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d02d      	beq.n	800374c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036fe:	605a      	str	r2, [r3, #4]
}
 8003700:	e024      	b.n	800374c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10e      	bne.n	8003728 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370e:	b29b      	uxth	r3, r3
 8003710:	11db      	asrs	r3, r3, #7
 8003712:	b2db      	uxtb	r3, r3
 8003714:	f003 0306 	and.w	r3, r3, #6
 8003718:	b2db      	uxtb	r3, r3
 800371a:	f063 030f 	orn	r3, r3, #15
 800371e:	b2da      	uxtb	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	611a      	str	r2, [r3, #16]
}
 8003726:	e011      	b.n	800374c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372c:	2b01      	cmp	r3, #1
 800372e:	d10d      	bne.n	800374c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003734:	b29b      	uxth	r3, r3
 8003736:	11db      	asrs	r3, r3, #7
 8003738:	b2db      	uxtb	r3, r3
 800373a:	f003 0306 	and.w	r3, r3, #6
 800373e:	b2db      	uxtb	r3, r3
 8003740:	f063 030e 	orn	r3, r3, #14
 8003744:	b2da      	uxtb	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	611a      	str	r2, [r3, #16]
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003764:	b2da      	uxtb	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003770:	2b00      	cmp	r3, #0
 8003772:	d004      	beq.n	800377e <I2C_Master_ADD10+0x26>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377a:	2b00      	cmp	r3, #0
 800377c:	d108      	bne.n	8003790 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00c      	beq.n	80037a0 <I2C_Master_ADD10+0x48>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378c:	2b00      	cmp	r3, #0
 800378e:	d007      	beq.n	80037a0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800379e:	605a      	str	r2, [r3, #4]
  }
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b091      	sub	sp, #68	; 0x44
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b22      	cmp	r3, #34	; 0x22
 80037d4:	f040 8169 	bne.w	8003aaa <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10f      	bne.n	8003800 <I2C_Master_ADDR+0x54>
 80037e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80037e4:	2b40      	cmp	r3, #64	; 0x40
 80037e6:	d10b      	bne.n	8003800 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037e8:	2300      	movs	r3, #0
 80037ea:	633b      	str	r3, [r7, #48]	; 0x30
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	633b      	str	r3, [r7, #48]	; 0x30
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	633b      	str	r3, [r7, #48]	; 0x30
 80037fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fe:	e160      	b.n	8003ac2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003804:	2b00      	cmp	r3, #0
 8003806:	d11d      	bne.n	8003844 <I2C_Master_ADDR+0x98>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003810:	d118      	bne.n	8003844 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003812:	2300      	movs	r3, #0
 8003814:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003826:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003836:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383c:	1c5a      	adds	r2, r3, #1
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	651a      	str	r2, [r3, #80]	; 0x50
 8003842:	e13e      	b.n	8003ac2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003848:	b29b      	uxth	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d113      	bne.n	8003876 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800384e:	2300      	movs	r3, #0
 8003850:	62bb      	str	r3, [r7, #40]	; 0x28
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	62bb      	str	r3, [r7, #40]	; 0x28
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	62bb      	str	r3, [r7, #40]	; 0x28
 8003862:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	e115      	b.n	8003aa2 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387a:	b29b      	uxth	r3, r3
 800387c:	2b01      	cmp	r3, #1
 800387e:	f040 808a 	bne.w	8003996 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003884:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003888:	d137      	bne.n	80038fa <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003898:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038a8:	d113      	bne.n	80038d2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ba:	2300      	movs	r3, #0
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	627b      	str	r3, [r7, #36]	; 0x24
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	e0e7      	b.n	8003aa2 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d2:	2300      	movs	r3, #0
 80038d4:	623b      	str	r3, [r7, #32]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	623b      	str	r3, [r7, #32]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	623b      	str	r3, [r7, #32]
 80038e6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	e0d3      	b.n	8003aa2 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80038fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d02e      	beq.n	800395e <I2C_Master_ADDR+0x1b2>
 8003900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003902:	2b20      	cmp	r3, #32
 8003904:	d02b      	beq.n	800395e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003908:	2b12      	cmp	r3, #18
 800390a:	d102      	bne.n	8003912 <I2C_Master_ADDR+0x166>
 800390c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800390e:	2b01      	cmp	r3, #1
 8003910:	d125      	bne.n	800395e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003914:	2b04      	cmp	r3, #4
 8003916:	d00e      	beq.n	8003936 <I2C_Master_ADDR+0x18a>
 8003918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391a:	2b02      	cmp	r3, #2
 800391c:	d00b      	beq.n	8003936 <I2C_Master_ADDR+0x18a>
 800391e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003920:	2b10      	cmp	r3, #16
 8003922:	d008      	beq.n	8003936 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	e007      	b.n	8003946 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003944:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003946:	2300      	movs	r3, #0
 8003948:	61fb      	str	r3, [r7, #28]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	61fb      	str	r3, [r7, #28]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	61fb      	str	r3, [r7, #28]
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	e0a1      	b.n	8003aa2 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800396c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800396e:	2300      	movs	r3, #0
 8003970:	61bb      	str	r3, [r7, #24]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	61bb      	str	r3, [r7, #24]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	61bb      	str	r3, [r7, #24]
 8003982:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	e085      	b.n	8003aa2 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399a:	b29b      	uxth	r3, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d14d      	bne.n	8003a3c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80039a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	d016      	beq.n	80039d4 <I2C_Master_ADDR+0x228>
 80039a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d013      	beq.n	80039d4 <I2C_Master_ADDR+0x228>
 80039ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ae:	2b10      	cmp	r3, #16
 80039b0:	d010      	beq.n	80039d4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039c0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	e007      	b.n	80039e4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039e2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039f2:	d117      	bne.n	8003a24 <I2C_Master_ADDR+0x278>
 80039f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039fa:	d00b      	beq.n	8003a14 <I2C_Master_ADDR+0x268>
 80039fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d008      	beq.n	8003a14 <I2C_Master_ADDR+0x268>
 8003a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d005      	beq.n	8003a14 <I2C_Master_ADDR+0x268>
 8003a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a0a:	2b10      	cmp	r3, #16
 8003a0c:	d002      	beq.n	8003a14 <I2C_Master_ADDR+0x268>
 8003a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a10:	2b20      	cmp	r3, #32
 8003a12:	d107      	bne.n	8003a24 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a22:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	e032      	b.n	8003aa2 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a4a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a5a:	d117      	bne.n	8003a8c <I2C_Master_ADDR+0x2e0>
 8003a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a62:	d00b      	beq.n	8003a7c <I2C_Master_ADDR+0x2d0>
 8003a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d008      	beq.n	8003a7c <I2C_Master_ADDR+0x2d0>
 8003a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d005      	beq.n	8003a7c <I2C_Master_ADDR+0x2d0>
 8003a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a72:	2b10      	cmp	r3, #16
 8003a74:	d002      	beq.n	8003a7c <I2C_Master_ADDR+0x2d0>
 8003a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	d107      	bne.n	8003a8c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a8a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	613b      	str	r3, [r7, #16]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	613b      	str	r3, [r7, #16]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	613b      	str	r3, [r7, #16]
 8003aa0:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003aa8:	e00b      	b.n	8003ac2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	60fb      	str	r3, [r7, #12]
 8003abe:	68fb      	ldr	r3, [r7, #12]
}
 8003ac0:	e7ff      	b.n	8003ac2 <I2C_Master_ADDR+0x316>
 8003ac2:	bf00      	nop
 8003ac4:	3744      	adds	r7, #68	; 0x44
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b084      	sub	sp, #16
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003adc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d02b      	beq.n	8003b40 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	781a      	ldrb	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	1c5a      	adds	r2, r3, #1
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d114      	bne.n	8003b40 <I2C_SlaveTransmit_TXE+0x72>
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
 8003b18:	2b29      	cmp	r3, #41	; 0x29
 8003b1a:	d111      	bne.n	8003b40 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b2a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2221      	movs	r2, #33	; 0x21
 8003b30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2228      	movs	r2, #40	; 0x28
 8003b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7ff f9fb 	bl	8002f36 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003b40:	bf00      	nop
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d011      	beq.n	8003b7e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5e:	781a      	ldrb	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b084      	sub	sp, #16
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b98:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d02c      	beq.n	8003bfe <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	691a      	ldr	r2, [r3, #16]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d114      	bne.n	8003bfe <I2C_SlaveReceive_RXNE+0x74>
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
 8003bd6:	2b2a      	cmp	r3, #42	; 0x2a
 8003bd8:	d111      	bne.n	8003bfe <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003be8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2222      	movs	r2, #34	; 0x22
 8003bee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2228      	movs	r2, #40	; 0x28
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f7ff f9a6 	bl	8002f4a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003bfe:	bf00      	nop
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b083      	sub	sp, #12
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d012      	beq.n	8003c3e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691a      	ldr	r2, [r3, #16]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	3b01      	subs	r3, #1
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
 8003c52:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003c54:	2300      	movs	r3, #0
 8003c56:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c64:	2b28      	cmp	r3, #40	; 0x28
 8003c66:	d127      	bne.n	8003cb8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c76:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	089b      	lsrs	r3, r3, #2
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003c84:	2301      	movs	r3, #1
 8003c86:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	09db      	lsrs	r3, r3, #7
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d103      	bne.n	8003c9c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	81bb      	strh	r3, [r7, #12]
 8003c9a:	e002      	b.n	8003ca2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003caa:	89ba      	ldrh	r2, [r7, #12]
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
 8003cae:	4619      	mov	r1, r3
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7ff f954 	bl	8002f5e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003cb6:	e00e      	b.n	8003cd6 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb8:	2300      	movs	r3, #0
 8003cba:	60bb      	str	r3, [r7, #8]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	60bb      	str	r3, [r7, #8]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	60bb      	str	r3, [r7, #8]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003cd6:	bf00      	nop
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
	...

08003ce0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cee:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cfe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003d00:	2300      	movs	r3, #0
 8003d02:	60bb      	str	r3, [r7, #8]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	60bb      	str	r3, [r7, #8]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0201 	orr.w	r2, r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d2c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d3c:	d172      	bne.n	8003e24 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003d3e:	7bfb      	ldrb	r3, [r7, #15]
 8003d40:	2b22      	cmp	r3, #34	; 0x22
 8003d42:	d002      	beq.n	8003d4a <I2C_Slave_STOPF+0x6a>
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
 8003d46:	2b2a      	cmp	r3, #42	; 0x2a
 8003d48:	d135      	bne.n	8003db6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d005      	beq.n	8003d6e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	f043 0204 	orr.w	r2, r3, #4
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d7c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fe fa9c 	bl	80022c0 <HAL_DMA_GetState>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d049      	beq.n	8003e22 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d92:	4a69      	ldr	r2, [pc, #420]	; (8003f38 <I2C_Slave_STOPF+0x258>)
 8003d94:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fe f8e4 	bl	8001f68 <HAL_DMA_Abort_IT>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d03d      	beq.n	8003e22 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003db0:	4610      	mov	r0, r2
 8003db2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003db4:	e035      	b.n	8003e22 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d005      	beq.n	8003dda <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	f043 0204 	orr.w	r2, r3, #4
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003de8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fe fa66 	bl	80022c0 <HAL_DMA_GetState>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d014      	beq.n	8003e24 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfe:	4a4e      	ldr	r2, [pc, #312]	; (8003f38 <I2C_Slave_STOPF+0x258>)
 8003e00:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fe f8ae 	bl	8001f68 <HAL_DMA_Abort_IT>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d008      	beq.n	8003e24 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	4798      	blx	r3
 8003e20:	e000      	b.n	8003e24 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e22:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d03e      	beq.n	8003eac <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d112      	bne.n	8003e62 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	691a      	ldr	r2, [r3, #16]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6c:	2b40      	cmp	r3, #64	; 0x40
 8003e6e:	d112      	bne.n	8003e96 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	691a      	ldr	r2, [r3, #16]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d005      	beq.n	8003eac <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea4:	f043 0204 	orr.w	r2, r3, #4
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f843 	bl	8003f40 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003eba:	e039      	b.n	8003f30 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003ebc:	7bfb      	ldrb	r3, [r7, #15]
 8003ebe:	2b2a      	cmp	r3, #42	; 0x2a
 8003ec0:	d109      	bne.n	8003ed6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2228      	movs	r2, #40	; 0x28
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f7ff f83a 	bl	8002f4a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b28      	cmp	r3, #40	; 0x28
 8003ee0:	d111      	bne.n	8003f06 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a15      	ldr	r2, [pc, #84]	; (8003f3c <I2C_Slave_STOPF+0x25c>)
 8003ee6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7ff f83b 	bl	8002f7a <HAL_I2C_ListenCpltCallback>
}
 8003f04:	e014      	b.n	8003f30 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	2b22      	cmp	r3, #34	; 0x22
 8003f0c:	d002      	beq.n	8003f14 <I2C_Slave_STOPF+0x234>
 8003f0e:	7bfb      	ldrb	r3, [r7, #15]
 8003f10:	2b22      	cmp	r3, #34	; 0x22
 8003f12:	d10d      	bne.n	8003f30 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7ff f80d 	bl	8002f4a <HAL_I2C_SlaveRxCpltCallback>
}
 8003f30:	bf00      	nop
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	080041a5 	.word	0x080041a5
 8003f3c:	ffff0000 	.word	0xffff0000

08003f40 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f4e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f56:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003f58:	7bbb      	ldrb	r3, [r7, #14]
 8003f5a:	2b10      	cmp	r3, #16
 8003f5c:	d002      	beq.n	8003f64 <I2C_ITError+0x24>
 8003f5e:	7bbb      	ldrb	r3, [r7, #14]
 8003f60:	2b40      	cmp	r3, #64	; 0x40
 8003f62:	d10a      	bne.n	8003f7a <I2C_ITError+0x3a>
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
 8003f66:	2b22      	cmp	r3, #34	; 0x22
 8003f68:	d107      	bne.n	8003f7a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f78:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f7a:	7bfb      	ldrb	r3, [r7, #15]
 8003f7c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f80:	2b28      	cmp	r3, #40	; 0x28
 8003f82:	d107      	bne.n	8003f94 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2228      	movs	r2, #40	; 0x28
 8003f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003f92:	e015      	b.n	8003fc0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fa2:	d00a      	beq.n	8003fba <I2C_ITError+0x7a>
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
 8003fa6:	2b60      	cmp	r3, #96	; 0x60
 8003fa8:	d007      	beq.n	8003fba <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2220      	movs	r2, #32
 8003fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fce:	d162      	bne.n	8004096 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fde:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d020      	beq.n	8004030 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff2:	4a6a      	ldr	r2, [pc, #424]	; (800419c <I2C_ITError+0x25c>)
 8003ff4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fd ffb4 	bl	8001f68 <HAL_DMA_Abort_IT>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 8089 	beq.w	800411a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0201 	bic.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2220      	movs	r2, #32
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800402a:	4610      	mov	r0, r2
 800402c:	4798      	blx	r3
 800402e:	e074      	b.n	800411a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004034:	4a59      	ldr	r2, [pc, #356]	; (800419c <I2C_ITError+0x25c>)
 8004036:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403c:	4618      	mov	r0, r3
 800403e:	f7fd ff93 	bl	8001f68 <HAL_DMA_Abort_IT>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d068      	beq.n	800411a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004052:	2b40      	cmp	r3, #64	; 0x40
 8004054:	d10b      	bne.n	800406e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	691a      	ldr	r2, [r3, #16]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	b2d2      	uxtb	r2, r2
 8004062:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	1c5a      	adds	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0201 	bic.w	r2, r2, #1
 800407c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2220      	movs	r2, #32
 8004082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004090:	4610      	mov	r0, r2
 8004092:	4798      	blx	r3
 8004094:	e041      	b.n	800411a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b60      	cmp	r3, #96	; 0x60
 80040a0:	d125      	bne.n	80040ee <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ba:	2b40      	cmp	r3, #64	; 0x40
 80040bc:	d10b      	bne.n	80040d6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	691a      	ldr	r2, [r3, #16]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	b2d2      	uxtb	r2, r2
 80040ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	1c5a      	adds	r2, r3, #1
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0201 	bic.w	r2, r2, #1
 80040e4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7fe ff65 	bl	8002fb6 <HAL_I2C_AbortCpltCallback>
 80040ec:	e015      	b.n	800411a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f8:	2b40      	cmp	r3, #64	; 0x40
 80040fa:	d10b      	bne.n	8004114 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691a      	ldr	r2, [r3, #16]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7fe ff44 	bl	8002fa2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10e      	bne.n	8004148 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004130:	2b00      	cmp	r3, #0
 8004132:	d109      	bne.n	8004148 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800413a:	2b00      	cmp	r3, #0
 800413c:	d104      	bne.n	8004148 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004144:	2b00      	cmp	r3, #0
 8004146:	d007      	beq.n	8004158 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004156:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800415e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b04      	cmp	r3, #4
 800416a:	d113      	bne.n	8004194 <I2C_ITError+0x254>
 800416c:	7bfb      	ldrb	r3, [r7, #15]
 800416e:	2b28      	cmp	r3, #40	; 0x28
 8004170:	d110      	bne.n	8004194 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a0a      	ldr	r2, [pc, #40]	; (80041a0 <I2C_ITError+0x260>)
 8004176:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2220      	movs	r2, #32
 8004182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7fe fef3 	bl	8002f7a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004194:	bf00      	nop
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	080041a5 	.word	0x080041a5
 80041a0:	ffff0000 	.word	0xffff0000

080041a4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041bc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80041be:	4b4b      	ldr	r3, [pc, #300]	; (80042ec <I2C_DMAAbort+0x148>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	08db      	lsrs	r3, r3, #3
 80041c4:	4a4a      	ldr	r2, [pc, #296]	; (80042f0 <I2C_DMAAbort+0x14c>)
 80041c6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ca:	0a1a      	lsrs	r2, r3, #8
 80041cc:	4613      	mov	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	00da      	lsls	r2, r3, #3
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d106      	bne.n	80041ec <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	f043 0220 	orr.w	r2, r3, #32
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80041ea:	e00a      	b.n	8004202 <I2C_DMAAbort+0x5e>
    }
    count--;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004200:	d0ea      	beq.n	80041d8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800420e:	2200      	movs	r2, #0
 8004210:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421e:	2200      	movs	r2, #0
 8004220:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004230:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	2200      	movs	r2, #0
 8004236:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800423c:	2b00      	cmp	r3, #0
 800423e:	d003      	beq.n	8004248 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004244:	2200      	movs	r2, #0
 8004246:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424c:	2b00      	cmp	r3, #0
 800424e:	d003      	beq.n	8004258 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004254:	2200      	movs	r2, #0
 8004256:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0201 	bic.w	r2, r2, #1
 8004266:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b60      	cmp	r3, #96	; 0x60
 8004272:	d10e      	bne.n	8004292 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	2200      	movs	r2, #0
 8004288:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800428a:	6978      	ldr	r0, [r7, #20]
 800428c:	f7fe fe93 	bl	8002fb6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004290:	e027      	b.n	80042e2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004292:	7cfb      	ldrb	r3, [r7, #19]
 8004294:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004298:	2b28      	cmp	r3, #40	; 0x28
 800429a:	d117      	bne.n	80042cc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0201 	orr.w	r2, r2, #1
 80042aa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042ba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2200      	movs	r2, #0
 80042c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2228      	movs	r2, #40	; 0x28
 80042c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80042ca:	e007      	b.n	80042dc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80042dc:	6978      	ldr	r0, [r7, #20]
 80042de:	f7fe fe60 	bl	8002fa2 <HAL_I2C_ErrorCallback>
}
 80042e2:	bf00      	nop
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	20000118 	.word	0x20000118
 80042f0:	14f8b589 	.word	0x14f8b589

080042f4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004300:	4b13      	ldr	r3, [pc, #76]	; (8004350 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	08db      	lsrs	r3, r3, #3
 8004306:	4a13      	ldr	r2, [pc, #76]	; (8004354 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004308:	fba2 2303 	umull	r2, r3, r2, r3
 800430c:	0a1a      	lsrs	r2, r3, #8
 800430e:	4613      	mov	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	3b01      	subs	r3, #1
 800431a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d107      	bne.n	8004332 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	f043 0220 	orr.w	r2, r3, #32
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e008      	b.n	8004344 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800433c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004340:	d0e9      	beq.n	8004316 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3714      	adds	r7, #20
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	20000118 	.word	0x20000118
 8004354:	14f8b589 	.word	0x14f8b589

08004358 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004364:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004368:	d103      	bne.n	8004372 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004370:	e007      	b.n	8004382 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004376:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800437a:	d102      	bne.n	8004382 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2208      	movs	r2, #8
 8004380:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800438e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004390:	b08f      	sub	sp, #60	; 0x3c
 8004392:	af0a      	add	r7, sp, #40	; 0x28
 8004394:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d101      	bne.n	80043a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e10f      	b.n	80045c0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d106      	bne.n	80043c0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f009 fa86 	bl	800d8cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2203      	movs	r2, #3
 80043c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d102      	bne.n	80043da <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4618      	mov	r0, r3
 80043e0:	f004 fd21 	bl	8008e26 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	603b      	str	r3, [r7, #0]
 80043ea:	687e      	ldr	r6, [r7, #4]
 80043ec:	466d      	mov	r5, sp
 80043ee:	f106 0410 	add.w	r4, r6, #16
 80043f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80043fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8004402:	1d33      	adds	r3, r6, #4
 8004404:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004406:	6838      	ldr	r0, [r7, #0]
 8004408:	f004 fbf8 	bl	8008bfc <USB_CoreInit>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d005      	beq.n	800441e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2202      	movs	r2, #2
 8004416:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e0d0      	b.n	80045c0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2100      	movs	r1, #0
 8004424:	4618      	mov	r0, r3
 8004426:	f004 fd0f 	bl	8008e48 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800442a:	2300      	movs	r3, #0
 800442c:	73fb      	strb	r3, [r7, #15]
 800442e:	e04a      	b.n	80044c6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004430:	7bfa      	ldrb	r2, [r7, #15]
 8004432:	6879      	ldr	r1, [r7, #4]
 8004434:	4613      	mov	r3, r2
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	1a9b      	subs	r3, r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	440b      	add	r3, r1
 800443e:	333d      	adds	r3, #61	; 0x3d
 8004440:	2201      	movs	r2, #1
 8004442:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004444:	7bfa      	ldrb	r2, [r7, #15]
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	1a9b      	subs	r3, r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	333c      	adds	r3, #60	; 0x3c
 8004454:	7bfa      	ldrb	r2, [r7, #15]
 8004456:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004458:	7bfa      	ldrb	r2, [r7, #15]
 800445a:	7bfb      	ldrb	r3, [r7, #15]
 800445c:	b298      	uxth	r0, r3
 800445e:	6879      	ldr	r1, [r7, #4]
 8004460:	4613      	mov	r3, r2
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	1a9b      	subs	r3, r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	3342      	adds	r3, #66	; 0x42
 800446c:	4602      	mov	r2, r0
 800446e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004470:	7bfa      	ldrb	r2, [r7, #15]
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	4613      	mov	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	1a9b      	subs	r3, r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	440b      	add	r3, r1
 800447e:	333f      	adds	r3, #63	; 0x3f
 8004480:	2200      	movs	r2, #0
 8004482:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004484:	7bfa      	ldrb	r2, [r7, #15]
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	4613      	mov	r3, r2
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	1a9b      	subs	r3, r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	440b      	add	r3, r1
 8004492:	3344      	adds	r3, #68	; 0x44
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004498:	7bfa      	ldrb	r2, [r7, #15]
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	4613      	mov	r3, r2
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	1a9b      	subs	r3, r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	440b      	add	r3, r1
 80044a6:	3348      	adds	r3, #72	; 0x48
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80044ac:	7bfa      	ldrb	r2, [r7, #15]
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	4613      	mov	r3, r2
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	1a9b      	subs	r3, r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	440b      	add	r3, r1
 80044ba:	3350      	adds	r3, #80	; 0x50
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
 80044c2:	3301      	adds	r3, #1
 80044c4:	73fb      	strb	r3, [r7, #15]
 80044c6:	7bfa      	ldrb	r2, [r7, #15]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d3af      	bcc.n	8004430 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044d0:	2300      	movs	r3, #0
 80044d2:	73fb      	strb	r3, [r7, #15]
 80044d4:	e044      	b.n	8004560 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80044d6:	7bfa      	ldrb	r2, [r7, #15]
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	4613      	mov	r3, r2
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	1a9b      	subs	r3, r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	440b      	add	r3, r1
 80044e4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80044e8:	2200      	movs	r2, #0
 80044ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80044ec:	7bfa      	ldrb	r2, [r7, #15]
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	4613      	mov	r3, r2
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	1a9b      	subs	r3, r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80044fe:	7bfa      	ldrb	r2, [r7, #15]
 8004500:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004502:	7bfa      	ldrb	r2, [r7, #15]
 8004504:	6879      	ldr	r1, [r7, #4]
 8004506:	4613      	mov	r3, r2
 8004508:	00db      	lsls	r3, r3, #3
 800450a:	1a9b      	subs	r3, r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	440b      	add	r3, r1
 8004510:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004514:	2200      	movs	r2, #0
 8004516:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004518:	7bfa      	ldrb	r2, [r7, #15]
 800451a:	6879      	ldr	r1, [r7, #4]
 800451c:	4613      	mov	r3, r2
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	1a9b      	subs	r3, r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	440b      	add	r3, r1
 8004526:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800452a:	2200      	movs	r2, #0
 800452c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800452e:	7bfa      	ldrb	r2, [r7, #15]
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	4613      	mov	r3, r2
 8004534:	00db      	lsls	r3, r3, #3
 8004536:	1a9b      	subs	r3, r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	440b      	add	r3, r1
 800453c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004540:	2200      	movs	r2, #0
 8004542:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004544:	7bfa      	ldrb	r2, [r7, #15]
 8004546:	6879      	ldr	r1, [r7, #4]
 8004548:	4613      	mov	r3, r2
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	1a9b      	subs	r3, r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	440b      	add	r3, r1
 8004552:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800455a:	7bfb      	ldrb	r3, [r7, #15]
 800455c:	3301      	adds	r3, #1
 800455e:	73fb      	strb	r3, [r7, #15]
 8004560:	7bfa      	ldrb	r2, [r7, #15]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	429a      	cmp	r2, r3
 8004568:	d3b5      	bcc.n	80044d6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	603b      	str	r3, [r7, #0]
 8004570:	687e      	ldr	r6, [r7, #4]
 8004572:	466d      	mov	r5, sp
 8004574:	f106 0410 	add.w	r4, r6, #16
 8004578:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800457a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800457c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800457e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004580:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004584:	e885 0003 	stmia.w	r5, {r0, r1}
 8004588:	1d33      	adds	r3, r6, #4
 800458a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800458c:	6838      	ldr	r0, [r7, #0]
 800458e:	f004 fca7 	bl	8008ee0 <USB_DevInit>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d005      	beq.n	80045a4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e00d      	b.n	80045c0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f005 fd23 	bl	800a004 <USB_DevDisconnect>

  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3714      	adds	r7, #20
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045c8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d101      	bne.n	80045e4 <HAL_PCD_Start+0x1c>
 80045e0:	2302      	movs	r3, #2
 80045e2:	e020      	b.n	8004626 <HAL_PCD_Start+0x5e>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d109      	bne.n	8004608 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d005      	beq.n	8004608 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004600:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4618      	mov	r0, r3
 800460e:	f004 fbf9 	bl	8008e04 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4618      	mov	r0, r3
 8004618:	f005 fcd3 	bl	8009fc2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800462e:	b590      	push	{r4, r7, lr}
 8004630:	b08d      	sub	sp, #52	; 0x34
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4618      	mov	r0, r3
 8004646:	f005 fd91 	bl	800a16c <USB_GetMode>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	f040 839d 	bne.w	8004d8c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f005 fcf5 	bl	800a046 <USB_ReadInterrupts>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 8393 	beq.w	8004d8a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4618      	mov	r0, r3
 800466a:	f005 fcec 	bl	800a046 <USB_ReadInterrupts>
 800466e:	4603      	mov	r3, r0
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b02      	cmp	r3, #2
 8004676:	d107      	bne.n	8004688 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	695a      	ldr	r2, [r3, #20]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f002 0202 	and.w	r2, r2, #2
 8004686:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4618      	mov	r0, r3
 800468e:	f005 fcda 	bl	800a046 <USB_ReadInterrupts>
 8004692:	4603      	mov	r3, r0
 8004694:	f003 0310 	and.w	r3, r3, #16
 8004698:	2b10      	cmp	r3, #16
 800469a:	d161      	bne.n	8004760 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	699a      	ldr	r2, [r3, #24]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 0210 	bic.w	r2, r2, #16
 80046aa:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80046ac:	6a3b      	ldr	r3, [r7, #32]
 80046ae:	6a1b      	ldr	r3, [r3, #32]
 80046b0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	f003 020f 	and.w	r2, r3, #15
 80046b8:	4613      	mov	r3, r2
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	1a9b      	subs	r3, r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	4413      	add	r3, r2
 80046c8:	3304      	adds	r3, #4
 80046ca:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	0c5b      	lsrs	r3, r3, #17
 80046d0:	f003 030f 	and.w	r3, r3, #15
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d124      	bne.n	8004722 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80046de:	4013      	ands	r3, r2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d035      	beq.n	8004750 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	091b      	lsrs	r3, r3, #4
 80046ec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80046ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	461a      	mov	r2, r3
 80046f6:	6a38      	ldr	r0, [r7, #32]
 80046f8:	f005 fb11 	bl	8009d1e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	68da      	ldr	r2, [r3, #12]
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	091b      	lsrs	r3, r3, #4
 8004704:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004708:	441a      	add	r2, r3
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	699a      	ldr	r2, [r3, #24]
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	091b      	lsrs	r3, r3, #4
 8004716:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800471a:	441a      	add	r2, r3
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	619a      	str	r2, [r3, #24]
 8004720:	e016      	b.n	8004750 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	0c5b      	lsrs	r3, r3, #17
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	2b06      	cmp	r3, #6
 800472c:	d110      	bne.n	8004750 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004734:	2208      	movs	r2, #8
 8004736:	4619      	mov	r1, r3
 8004738:	6a38      	ldr	r0, [r7, #32]
 800473a:	f005 faf0 	bl	8009d1e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	699a      	ldr	r2, [r3, #24]
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	091b      	lsrs	r3, r3, #4
 8004746:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800474a:	441a      	add	r2, r3
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699a      	ldr	r2, [r3, #24]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0210 	orr.w	r2, r2, #16
 800475e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4618      	mov	r0, r3
 8004766:	f005 fc6e 	bl	800a046 <USB_ReadInterrupts>
 800476a:	4603      	mov	r3, r0
 800476c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004770:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004774:	d16e      	bne.n	8004854 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004776:	2300      	movs	r3, #0
 8004778:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4618      	mov	r0, r3
 8004780:	f005 fc74 	bl	800a06c <USB_ReadDevAllOutEpInterrupt>
 8004784:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004786:	e062      	b.n	800484e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d057      	beq.n	8004842 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004798:	b2d2      	uxtb	r2, r2
 800479a:	4611      	mov	r1, r2
 800479c:	4618      	mov	r0, r3
 800479e:	f005 fc99 	bl	800a0d4 <USB_ReadDevOutEPInterrupt>
 80047a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00c      	beq.n	80047c8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	015a      	lsls	r2, r3, #5
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ba:	461a      	mov	r2, r3
 80047bc:	2301      	movs	r3, #1
 80047be:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80047c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 fdb0 	bl	8005328 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	f003 0308 	and.w	r3, r3, #8
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00c      	beq.n	80047ec <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	015a      	lsls	r2, r3, #5
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	4413      	add	r3, r2
 80047da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047de:	461a      	mov	r2, r3
 80047e0:	2308      	movs	r3, #8
 80047e2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80047e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 feaa 	bl	8005540 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	f003 0310 	and.w	r3, r3, #16
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d008      	beq.n	8004808 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004802:	461a      	mov	r2, r3
 8004804:	2310      	movs	r3, #16
 8004806:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	f003 0320 	and.w	r3, r3, #32
 800480e:	2b00      	cmp	r3, #0
 8004810:	d008      	beq.n	8004824 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	4413      	add	r3, r2
 800481a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481e:	461a      	mov	r2, r3
 8004820:	2320      	movs	r3, #32
 8004822:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d009      	beq.n	8004842 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	4413      	add	r3, r2
 8004836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483a:	461a      	mov	r2, r3
 800483c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004840:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	3301      	adds	r3, #1
 8004846:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484a:	085b      	lsrs	r3, r3, #1
 800484c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800484e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004850:	2b00      	cmp	r3, #0
 8004852:	d199      	bne.n	8004788 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4618      	mov	r0, r3
 800485a:	f005 fbf4 	bl	800a046 <USB_ReadInterrupts>
 800485e:	4603      	mov	r3, r0
 8004860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004864:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004868:	f040 80c0 	bne.w	80049ec <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4618      	mov	r0, r3
 8004872:	f005 fc15 	bl	800a0a0 <USB_ReadDevAllInEpInterrupt>
 8004876:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800487c:	e0b2      	b.n	80049e4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800487e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 80a7 	beq.w	80049d8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004890:	b2d2      	uxtb	r2, r2
 8004892:	4611      	mov	r1, r2
 8004894:	4618      	mov	r0, r3
 8004896:	f005 fc3b 	bl	800a110 <USB_ReadDevInEPInterrupt>
 800489a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d057      	beq.n	8004956 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	f003 030f 	and.w	r3, r3, #15
 80048ac:	2201      	movs	r2, #1
 80048ae:	fa02 f303 	lsl.w	r3, r2, r3
 80048b2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	43db      	mvns	r3, r3
 80048c0:	69f9      	ldr	r1, [r7, #28]
 80048c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048c6:	4013      	ands	r3, r2
 80048c8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d6:	461a      	mov	r2, r3
 80048d8:	2301      	movs	r3, #1
 80048da:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d132      	bne.n	800494a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80048e4:	6879      	ldr	r1, [r7, #4]
 80048e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048e8:	4613      	mov	r3, r2
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	1a9b      	subs	r3, r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	440b      	add	r3, r1
 80048f2:	3348      	adds	r3, #72	; 0x48
 80048f4:	6819      	ldr	r1, [r3, #0]
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048fa:	4613      	mov	r3, r2
 80048fc:	00db      	lsls	r3, r3, #3
 80048fe:	1a9b      	subs	r3, r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4403      	add	r3, r0
 8004904:	3344      	adds	r3, #68	; 0x44
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4419      	add	r1, r3
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800490e:	4613      	mov	r3, r2
 8004910:	00db      	lsls	r3, r3, #3
 8004912:	1a9b      	subs	r3, r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4403      	add	r3, r0
 8004918:	3348      	adds	r3, #72	; 0x48
 800491a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	2b00      	cmp	r3, #0
 8004920:	d113      	bne.n	800494a <HAL_PCD_IRQHandler+0x31c>
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004926:	4613      	mov	r3, r2
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	1a9b      	subs	r3, r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	440b      	add	r3, r1
 8004930:	3350      	adds	r3, #80	; 0x50
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d108      	bne.n	800494a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6818      	ldr	r0, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004942:	461a      	mov	r2, r3
 8004944:	2101      	movs	r1, #1
 8004946:	f005 fc43 	bl	800a1d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	b2db      	uxtb	r3, r3
 800494e:	4619      	mov	r1, r3
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f009 f83c 	bl	800d9ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	f003 0308 	and.w	r3, r3, #8
 800495c:	2b00      	cmp	r3, #0
 800495e:	d008      	beq.n	8004972 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496c:	461a      	mov	r2, r3
 800496e:	2308      	movs	r3, #8
 8004970:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f003 0310 	and.w	r3, r3, #16
 8004978:	2b00      	cmp	r3, #0
 800497a:	d008      	beq.n	800498e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	4413      	add	r3, r2
 8004984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004988:	461a      	mov	r2, r3
 800498a:	2310      	movs	r3, #16
 800498c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004994:	2b00      	cmp	r3, #0
 8004996:	d008      	beq.n	80049aa <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	015a      	lsls	r2, r3, #5
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a4:	461a      	mov	r2, r3
 80049a6:	2340      	movs	r3, #64	; 0x40
 80049a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d008      	beq.n	80049c6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c0:	461a      	mov	r2, r3
 80049c2:	2302      	movs	r3, #2
 80049c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d003      	beq.n	80049d8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80049d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 fc1b 	bl	800520e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	3301      	adds	r3, #1
 80049dc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80049de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e0:	085b      	lsrs	r3, r3, #1
 80049e2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80049e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f47f af49 	bne.w	800487e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f005 fb28 	bl	800a046 <USB_ReadInterrupts>
 80049f6:	4603      	mov	r3, r0
 80049f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a00:	d122      	bne.n	8004a48 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	69fa      	ldr	r2, [r7, #28]
 8004a0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a10:	f023 0301 	bic.w	r3, r3, #1
 8004a14:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d108      	bne.n	8004a32 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004a28:	2100      	movs	r1, #0
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 fe26 	bl	800567c <HAL_PCDEx_LPM_Callback>
 8004a30:	e002      	b.n	8004a38 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f009 f838 	bl	800daa8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695a      	ldr	r2, [r3, #20]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004a46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f005 fafa 	bl	800a046 <USB_ReadInterrupts>
 8004a52:	4603      	mov	r3, r0
 8004a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a5c:	d112      	bne.n	8004a84 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d102      	bne.n	8004a74 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f008 fff4 	bl	800da5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	695a      	ldr	r2, [r3, #20]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004a82:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f005 fadc 	bl	800a046 <USB_ReadInterrupts>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a98:	f040 80c7 	bne.w	8004c2a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	69fa      	ldr	r2, [r7, #28]
 8004aa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004aaa:	f023 0301 	bic.w	r3, r3, #1
 8004aae:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2110      	movs	r1, #16
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f004 fb76 	bl	80091a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004abc:	2300      	movs	r3, #0
 8004abe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ac0:	e056      	b.n	8004b70 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac4:	015a      	lsls	r2, r3, #5
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ace:	461a      	mov	r2, r3
 8004ad0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ad4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ae6:	0151      	lsls	r1, r2, #5
 8004ae8:	69fa      	ldr	r2, [r7, #28]
 8004aea:	440a      	add	r2, r1
 8004aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004af0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004af4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af8:	015a      	lsls	r2, r3, #5
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	4413      	add	r3, r2
 8004afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b06:	0151      	lsls	r1, r2, #5
 8004b08:	69fa      	ldr	r2, [r7, #28]
 8004b0a:	440a      	add	r2, r1
 8004b0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b14:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b22:	461a      	mov	r2, r3
 8004b24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b28:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2c:	015a      	lsls	r2, r3, #5
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	4413      	add	r3, r2
 8004b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b3a:	0151      	lsls	r1, r2, #5
 8004b3c:	69fa      	ldr	r2, [r7, #28]
 8004b3e:	440a      	add	r2, r1
 8004b40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b48:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4c:	015a      	lsls	r2, r3, #5
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	4413      	add	r3, r2
 8004b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b5a:	0151      	lsls	r1, r2, #5
 8004b5c:	69fa      	ldr	r2, [r7, #28]
 8004b5e:	440a      	add	r2, r1
 8004b60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b68:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d3a3      	bcc.n	8004ac2 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	69fa      	ldr	r2, [r7, #28]
 8004b84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b88:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004b8c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d016      	beq.n	8004bc4 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ba0:	69fa      	ldr	r2, [r7, #28]
 8004ba2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ba6:	f043 030b 	orr.w	r3, r3, #11
 8004baa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb6:	69fa      	ldr	r2, [r7, #28]
 8004bb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bbc:	f043 030b 	orr.w	r3, r3, #11
 8004bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8004bc2:	e015      	b.n	8004bf0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	69fa      	ldr	r2, [r7, #28]
 8004bce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bd2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004bd6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004bda:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	69fa      	ldr	r2, [r7, #28]
 8004be6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bea:	f043 030b 	orr.w	r3, r3, #11
 8004bee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	69fa      	ldr	r2, [r7, #28]
 8004bfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bfe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004c02:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6818      	ldr	r0, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004c14:	461a      	mov	r2, r3
 8004c16:	f005 fadb 	bl	800a1d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695a      	ldr	r2, [r3, #20]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004c28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f005 fa09 	bl	800a046 <USB_ReadInterrupts>
 8004c34:	4603      	mov	r3, r0
 8004c36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c3e:	d124      	bne.n	8004c8a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f005 fa9f 	bl	800a188 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f004 fb07 	bl	8009262 <USB_GetDevSpeed>
 8004c54:	4603      	mov	r3, r0
 8004c56:	461a      	mov	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681c      	ldr	r4, [r3, #0]
 8004c60:	f001 f936 	bl	8005ed0 <HAL_RCC_GetHCLKFreq>
 8004c64:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	4620      	mov	r0, r4
 8004c70:	f004 f826 	bl	8008cc0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f008 fed2 	bl	800da1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695a      	ldr	r2, [r3, #20]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004c88:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f005 f9d9 	bl	800a046 <USB_ReadInterrupts>
 8004c94:	4603      	mov	r3, r0
 8004c96:	f003 0308 	and.w	r3, r3, #8
 8004c9a:	2b08      	cmp	r3, #8
 8004c9c:	d10a      	bne.n	8004cb4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f008 feaf 	bl	800da02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	695a      	ldr	r2, [r3, #20]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f002 0208 	and.w	r2, r2, #8
 8004cb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f005 f9c4 	bl	800a046 <USB_ReadInterrupts>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cc8:	d10f      	bne.n	8004cea <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f008 ff07 	bl	800dae8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	695a      	ldr	r2, [r3, #20]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004ce8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f005 f9a9 	bl	800a046 <USB_ReadInterrupts>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cfe:	d10f      	bne.n	8004d20 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	4619      	mov	r1, r3
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f008 feda 	bl	800dac4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695a      	ldr	r2, [r3, #20]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004d1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f005 f98e 	bl	800a046 <USB_ReadInterrupts>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d34:	d10a      	bne.n	8004d4c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f008 fee8 	bl	800db0c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695a      	ldr	r2, [r3, #20]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004d4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f005 f978 	bl	800a046 <USB_ReadInterrupts>
 8004d56:	4603      	mov	r3, r0
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d115      	bne.n	8004d8c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	f003 0304 	and.w	r3, r3, #4
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d002      	beq.n	8004d78 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f008 fed8 	bl	800db28 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6859      	ldr	r1, [r3, #4]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	605a      	str	r2, [r3, #4]
 8004d88:	e000      	b.n	8004d8c <HAL_PCD_IRQHandler+0x75e>
      return;
 8004d8a:	bf00      	nop
    }
  }
}
 8004d8c:	3734      	adds	r7, #52	; 0x34
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd90      	pop	{r4, r7, pc}

08004d92 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b082      	sub	sp, #8
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d101      	bne.n	8004dac <HAL_PCD_SetAddress+0x1a>
 8004da8:	2302      	movs	r3, #2
 8004daa:	e013      	b.n	8004dd4 <HAL_PCD_SetAddress+0x42>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	78fa      	ldrb	r2, [r7, #3]
 8004db8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	78fa      	ldrb	r2, [r7, #3]
 8004dc2:	4611      	mov	r1, r2
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f005 f8d6 	bl	8009f76 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	4608      	mov	r0, r1
 8004de6:	4611      	mov	r1, r2
 8004de8:	461a      	mov	r2, r3
 8004dea:	4603      	mov	r3, r0
 8004dec:	70fb      	strb	r3, [r7, #3]
 8004dee:	460b      	mov	r3, r1
 8004df0:	803b      	strh	r3, [r7, #0]
 8004df2:	4613      	mov	r3, r2
 8004df4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004dfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	da0f      	bge.n	8004e22 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e02:	78fb      	ldrb	r3, [r7, #3]
 8004e04:	f003 020f 	and.w	r2, r3, #15
 8004e08:	4613      	mov	r3, r2
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	1a9b      	subs	r3, r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	3338      	adds	r3, #56	; 0x38
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	4413      	add	r3, r2
 8004e16:	3304      	adds	r3, #4
 8004e18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	705a      	strb	r2, [r3, #1]
 8004e20:	e00f      	b.n	8004e42 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e22:	78fb      	ldrb	r3, [r7, #3]
 8004e24:	f003 020f 	and.w	r2, r3, #15
 8004e28:	4613      	mov	r3, r2
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	1a9b      	subs	r3, r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	4413      	add	r3, r2
 8004e38:	3304      	adds	r3, #4
 8004e3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004e42:	78fb      	ldrb	r3, [r7, #3]
 8004e44:	f003 030f 	and.w	r3, r3, #15
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004e4e:	883a      	ldrh	r2, [r7, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	78ba      	ldrb	r2, [r7, #2]
 8004e58:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	785b      	ldrb	r3, [r3, #1]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d004      	beq.n	8004e6c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004e6c:	78bb      	ldrb	r3, [r7, #2]
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d102      	bne.n	8004e78 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d101      	bne.n	8004e86 <HAL_PCD_EP_Open+0xaa>
 8004e82:	2302      	movs	r3, #2
 8004e84:	e00e      	b.n	8004ea4 <HAL_PCD_EP_Open+0xc8>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68f9      	ldr	r1, [r7, #12]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f004 fa09 	bl	80092ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004ea2:	7afb      	ldrb	r3, [r7, #11]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004eb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	da0f      	bge.n	8004ee0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ec0:	78fb      	ldrb	r3, [r7, #3]
 8004ec2:	f003 020f 	and.w	r2, r3, #15
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	00db      	lsls	r3, r3, #3
 8004eca:	1a9b      	subs	r3, r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	3338      	adds	r3, #56	; 0x38
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2201      	movs	r2, #1
 8004edc:	705a      	strb	r2, [r3, #1]
 8004ede:	e00f      	b.n	8004f00 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ee0:	78fb      	ldrb	r3, [r7, #3]
 8004ee2:	f003 020f 	and.w	r2, r3, #15
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	1a9b      	subs	r3, r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004f00:	78fb      	ldrb	r3, [r7, #3]
 8004f02:	f003 030f 	and.w	r3, r3, #15
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d101      	bne.n	8004f1a <HAL_PCD_EP_Close+0x6e>
 8004f16:	2302      	movs	r3, #2
 8004f18:	e00e      	b.n	8004f38 <HAL_PCD_EP_Close+0x8c>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68f9      	ldr	r1, [r7, #12]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f004 fa47 	bl	80093bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	607a      	str	r2, [r7, #4]
 8004f4a:	603b      	str	r3, [r7, #0]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f50:	7afb      	ldrb	r3, [r7, #11]
 8004f52:	f003 020f 	and.w	r2, r3, #15
 8004f56:	4613      	mov	r3, r2
 8004f58:	00db      	lsls	r3, r3, #3
 8004f5a:	1a9b      	subs	r3, r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	4413      	add	r3, r2
 8004f66:	3304      	adds	r3, #4
 8004f68:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f82:	7afb      	ldrb	r3, [r7, #11]
 8004f84:	f003 030f 	and.w	r3, r3, #15
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d102      	bne.n	8004f9c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f9c:	7afb      	ldrb	r3, [r7, #11]
 8004f9e:	f003 030f 	and.w	r3, r3, #15
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d109      	bne.n	8004fba <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6818      	ldr	r0, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	6979      	ldr	r1, [r7, #20]
 8004fb4:	f004 fd22 	bl	80099fc <USB_EP0StartXfer>
 8004fb8:	e008      	b.n	8004fcc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6818      	ldr	r0, [r3, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	6979      	ldr	r1, [r7, #20]
 8004fc8:	f004 fad4 	bl	8009574 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3718      	adds	r7, #24
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	460b      	mov	r3, r1
 8004fe0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004fe2:	78fb      	ldrb	r3, [r7, #3]
 8004fe4:	f003 020f 	and.w	r2, r3, #15
 8004fe8:	6879      	ldr	r1, [r7, #4]
 8004fea:	4613      	mov	r3, r2
 8004fec:	00db      	lsls	r3, r3, #3
 8004fee:	1a9b      	subs	r3, r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	440b      	add	r3, r1
 8004ff4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004ff8:	681b      	ldr	r3, [r3, #0]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b086      	sub	sp, #24
 800500a:	af00      	add	r7, sp, #0
 800500c:	60f8      	str	r0, [r7, #12]
 800500e:	607a      	str	r2, [r7, #4]
 8005010:	603b      	str	r3, [r7, #0]
 8005012:	460b      	mov	r3, r1
 8005014:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005016:	7afb      	ldrb	r3, [r7, #11]
 8005018:	f003 020f 	and.w	r2, r3, #15
 800501c:	4613      	mov	r3, r2
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	1a9b      	subs	r3, r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	3338      	adds	r3, #56	; 0x38
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	4413      	add	r3, r2
 800502a:	3304      	adds	r3, #4
 800502c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	2200      	movs	r2, #0
 800503e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	2201      	movs	r2, #1
 8005044:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005046:	7afb      	ldrb	r3, [r7, #11]
 8005048:	f003 030f 	and.w	r3, r3, #15
 800504c:	b2da      	uxtb	r2, r3
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d102      	bne.n	8005060 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005060:	7afb      	ldrb	r3, [r7, #11]
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	2b00      	cmp	r3, #0
 8005068:	d109      	bne.n	800507e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6818      	ldr	r0, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	b2db      	uxtb	r3, r3
 8005074:	461a      	mov	r2, r3
 8005076:	6979      	ldr	r1, [r7, #20]
 8005078:	f004 fcc0 	bl	80099fc <USB_EP0StartXfer>
 800507c:	e008      	b.n	8005090 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6818      	ldr	r0, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	b2db      	uxtb	r3, r3
 8005088:	461a      	mov	r2, r3
 800508a:	6979      	ldr	r1, [r7, #20]
 800508c:	f004 fa72 	bl	8009574 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b084      	sub	sp, #16
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	460b      	mov	r3, r1
 80050a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80050a6:	78fb      	ldrb	r3, [r7, #3]
 80050a8:	f003 020f 	and.w	r2, r3, #15
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d901      	bls.n	80050b8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e050      	b.n	800515a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80050b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	da0f      	bge.n	80050e0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050c0:	78fb      	ldrb	r3, [r7, #3]
 80050c2:	f003 020f 	and.w	r2, r3, #15
 80050c6:	4613      	mov	r3, r2
 80050c8:	00db      	lsls	r3, r3, #3
 80050ca:	1a9b      	subs	r3, r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	3338      	adds	r3, #56	; 0x38
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	4413      	add	r3, r2
 80050d4:	3304      	adds	r3, #4
 80050d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2201      	movs	r2, #1
 80050dc:	705a      	strb	r2, [r3, #1]
 80050de:	e00d      	b.n	80050fc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80050e0:	78fa      	ldrb	r2, [r7, #3]
 80050e2:	4613      	mov	r3, r2
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	1a9b      	subs	r3, r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	4413      	add	r3, r2
 80050f2:	3304      	adds	r3, #4
 80050f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2201      	movs	r2, #1
 8005100:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005102:	78fb      	ldrb	r3, [r7, #3]
 8005104:	f003 030f 	and.w	r3, r3, #15
 8005108:	b2da      	uxtb	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005114:	2b01      	cmp	r3, #1
 8005116:	d101      	bne.n	800511c <HAL_PCD_EP_SetStall+0x82>
 8005118:	2302      	movs	r3, #2
 800511a:	e01e      	b.n	800515a <HAL_PCD_EP_SetStall+0xc0>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68f9      	ldr	r1, [r7, #12]
 800512a:	4618      	mov	r0, r3
 800512c:	f004 fe4f 	bl	8009dce <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005130:	78fb      	ldrb	r3, [r7, #3]
 8005132:	f003 030f 	and.w	r3, r3, #15
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10a      	bne.n	8005150 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6818      	ldr	r0, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	b2d9      	uxtb	r1, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800514a:	461a      	mov	r2, r3
 800514c:	f005 f840 	bl	800a1d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b084      	sub	sp, #16
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	460b      	mov	r3, r1
 800516c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800516e:	78fb      	ldrb	r3, [r7, #3]
 8005170:	f003 020f 	and.w	r2, r3, #15
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	429a      	cmp	r2, r3
 800517a:	d901      	bls.n	8005180 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e042      	b.n	8005206 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005180:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005184:	2b00      	cmp	r3, #0
 8005186:	da0f      	bge.n	80051a8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005188:	78fb      	ldrb	r3, [r7, #3]
 800518a:	f003 020f 	and.w	r2, r3, #15
 800518e:	4613      	mov	r3, r2
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	1a9b      	subs	r3, r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	3338      	adds	r3, #56	; 0x38
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	4413      	add	r3, r2
 800519c:	3304      	adds	r3, #4
 800519e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2201      	movs	r2, #1
 80051a4:	705a      	strb	r2, [r3, #1]
 80051a6:	e00f      	b.n	80051c8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051a8:	78fb      	ldrb	r3, [r7, #3]
 80051aa:	f003 020f 	and.w	r2, r3, #15
 80051ae:	4613      	mov	r3, r2
 80051b0:	00db      	lsls	r3, r3, #3
 80051b2:	1a9b      	subs	r3, r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	4413      	add	r3, r2
 80051be:	3304      	adds	r3, #4
 80051c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051ce:	78fb      	ldrb	r3, [r7, #3]
 80051d0:	f003 030f 	and.w	r3, r3, #15
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d101      	bne.n	80051e8 <HAL_PCD_EP_ClrStall+0x86>
 80051e4:	2302      	movs	r3, #2
 80051e6:	e00e      	b.n	8005206 <HAL_PCD_EP_ClrStall+0xa4>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68f9      	ldr	r1, [r7, #12]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f004 fe57 	bl	8009eaa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b08a      	sub	sp, #40	; 0x28
 8005212:	af02      	add	r7, sp, #8
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005222:	683a      	ldr	r2, [r7, #0]
 8005224:	4613      	mov	r3, r2
 8005226:	00db      	lsls	r3, r3, #3
 8005228:	1a9b      	subs	r3, r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	3338      	adds	r3, #56	; 0x38
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	4413      	add	r3, r2
 8005232:	3304      	adds	r3, #4
 8005234:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	699a      	ldr	r2, [r3, #24]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	429a      	cmp	r2, r3
 8005240:	d901      	bls.n	8005246 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e06c      	b.n	8005320 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	695a      	ldr	r2, [r3, #20]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	69fa      	ldr	r2, [r7, #28]
 8005258:	429a      	cmp	r2, r3
 800525a:	d902      	bls.n	8005262 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	3303      	adds	r3, #3
 8005266:	089b      	lsrs	r3, r3, #2
 8005268:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800526a:	e02b      	b.n	80052c4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	695a      	ldr	r2, [r3, #20]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	69fa      	ldr	r2, [r7, #28]
 800527e:	429a      	cmp	r2, r3
 8005280:	d902      	bls.n	8005288 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	3303      	adds	r3, #3
 800528c:	089b      	lsrs	r3, r3, #2
 800528e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	68d9      	ldr	r1, [r3, #12]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	b2da      	uxtb	r2, r3
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	4603      	mov	r3, r0
 80052a6:	6978      	ldr	r0, [r7, #20]
 80052a8:	f004 fcfb 	bl	8009ca2 <USB_WritePacket>

    ep->xfer_buff  += len;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	68da      	ldr	r2, [r3, #12]
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	441a      	add	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	699a      	ldr	r2, [r3, #24]
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	441a      	add	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	015a      	lsls	r2, r3, #5
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d809      	bhi.n	80052ee <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	699a      	ldr	r2, [r3, #24]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d203      	bcs.n	80052ee <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1be      	bne.n	800526c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	695a      	ldr	r2, [r3, #20]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d811      	bhi.n	800531e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	f003 030f 	and.w	r3, r3, #15
 8005300:	2201      	movs	r2, #1
 8005302:	fa02 f303 	lsl.w	r3, r2, r3
 8005306:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	43db      	mvns	r3, r3
 8005314:	6939      	ldr	r1, [r7, #16]
 8005316:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800531a:	4013      	ands	r3, r2
 800531c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3720      	adds	r7, #32
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	333c      	adds	r3, #60	; 0x3c
 8005340:	3304      	adds	r3, #4
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	4413      	add	r3, r2
 800534e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	2b01      	cmp	r3, #1
 800535c:	f040 80a0 	bne.w	80054a0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	f003 0308 	and.w	r3, r3, #8
 8005366:	2b00      	cmp	r3, #0
 8005368:	d015      	beq.n	8005396 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4a72      	ldr	r2, [pc, #456]	; (8005538 <PCD_EP_OutXfrComplete_int+0x210>)
 800536e:	4293      	cmp	r3, r2
 8005370:	f240 80dd 	bls.w	800552e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 80d7 	beq.w	800552e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	4413      	add	r3, r2
 8005388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538c:	461a      	mov	r2, r3
 800538e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005392:	6093      	str	r3, [r2, #8]
 8005394:	e0cb      	b.n	800552e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	f003 0320 	and.w	r3, r3, #32
 800539c:	2b00      	cmp	r3, #0
 800539e:	d009      	beq.n	80053b4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ac:	461a      	mov	r2, r3
 80053ae:	2320      	movs	r3, #32
 80053b0:	6093      	str	r3, [r2, #8]
 80053b2:	e0bc      	b.n	800552e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f040 80b7 	bne.w	800552e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4a5d      	ldr	r2, [pc, #372]	; (8005538 <PCD_EP_OutXfrComplete_int+0x210>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d90f      	bls.n	80053e8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00a      	beq.n	80053e8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053de:	461a      	mov	r2, r3
 80053e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053e4:	6093      	str	r3, [r2, #8]
 80053e6:	e0a2      	b.n	800552e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80053e8:	6879      	ldr	r1, [r7, #4]
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	4613      	mov	r3, r2
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	1a9b      	subs	r3, r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	440b      	add	r3, r1
 80053f6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80053fa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	0159      	lsls	r1, r3, #5
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	440b      	add	r3, r1
 8005404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800540e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	4613      	mov	r3, r2
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	1a9b      	subs	r3, r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4403      	add	r3, r0
 800541e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005422:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005424:	6879      	ldr	r1, [r7, #4]
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	4613      	mov	r3, r2
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	1a9b      	subs	r3, r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	440b      	add	r3, r1
 8005432:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005436:	6819      	ldr	r1, [r3, #0]
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	4613      	mov	r3, r2
 800543e:	00db      	lsls	r3, r3, #3
 8005440:	1a9b      	subs	r3, r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4403      	add	r3, r0
 8005446:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4419      	add	r1, r3
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	4613      	mov	r3, r2
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	1a9b      	subs	r3, r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4403      	add	r3, r0
 800545c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005460:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d114      	bne.n	8005492 <PCD_EP_OutXfrComplete_int+0x16a>
 8005468:	6879      	ldr	r1, [r7, #4]
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	4613      	mov	r3, r2
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	1a9b      	subs	r3, r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	440b      	add	r3, r1
 8005476:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d108      	bne.n	8005492 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6818      	ldr	r0, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800548a:	461a      	mov	r2, r3
 800548c:	2101      	movs	r1, #1
 800548e:	f004 fe9f 	bl	800a1d0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	b2db      	uxtb	r3, r3
 8005496:	4619      	mov	r1, r3
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f008 fa7d 	bl	800d998 <HAL_PCD_DataOutStageCallback>
 800549e:	e046      	b.n	800552e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	4a26      	ldr	r2, [pc, #152]	; (800553c <PCD_EP_OutXfrComplete_int+0x214>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d124      	bne.n	80054f2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00a      	beq.n	80054c8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054be:	461a      	mov	r2, r3
 80054c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054c4:	6093      	str	r3, [r2, #8]
 80054c6:	e032      	b.n	800552e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f003 0320 	and.w	r3, r3, #32
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d008      	beq.n	80054e4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	015a      	lsls	r2, r3, #5
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	4413      	add	r3, r2
 80054da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054de:	461a      	mov	r2, r3
 80054e0:	2320      	movs	r3, #32
 80054e2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	4619      	mov	r1, r3
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f008 fa54 	bl	800d998 <HAL_PCD_DataOutStageCallback>
 80054f0:	e01d      	b.n	800552e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d114      	bne.n	8005522 <PCD_EP_OutXfrComplete_int+0x1fa>
 80054f8:	6879      	ldr	r1, [r7, #4]
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	4613      	mov	r3, r2
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	1a9b      	subs	r3, r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	440b      	add	r3, r1
 8005506:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d108      	bne.n	8005522 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6818      	ldr	r0, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800551a:	461a      	mov	r2, r3
 800551c:	2100      	movs	r1, #0
 800551e:	f004 fe57 	bl	800a1d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	b2db      	uxtb	r3, r3
 8005526:	4619      	mov	r1, r3
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f008 fa35 	bl	800d998 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3718      	adds	r7, #24
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	4f54300a 	.word	0x4f54300a
 800553c:	4f54310a 	.word	0x4f54310a

08005540 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	333c      	adds	r3, #60	; 0x3c
 8005558:	3304      	adds	r3, #4
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	4a15      	ldr	r2, [pc, #84]	; (80055c8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d90e      	bls.n	8005594 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800557c:	2b00      	cmp	r3, #0
 800557e:	d009      	beq.n	8005594 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	4413      	add	r3, r2
 8005588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558c:	461a      	mov	r2, r3
 800558e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005592:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f008 f9ed 	bl	800d974 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	4a0a      	ldr	r2, [pc, #40]	; (80055c8 <PCD_EP_OutSetupPacket_int+0x88>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d90c      	bls.n	80055bc <PCD_EP_OutSetupPacket_int+0x7c>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d108      	bne.n	80055bc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6818      	ldr	r0, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80055b4:	461a      	mov	r2, r3
 80055b6:	2101      	movs	r1, #1
 80055b8:	f004 fe0a 	bl	800a1d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3718      	adds	r7, #24
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	4f54300a 	.word	0x4f54300a

080055cc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	460b      	mov	r3, r1
 80055d6:	70fb      	strb	r3, [r7, #3]
 80055d8:	4613      	mov	r3, r2
 80055da:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80055e4:	78fb      	ldrb	r3, [r7, #3]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d107      	bne.n	80055fa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80055ea:	883b      	ldrh	r3, [r7, #0]
 80055ec:	0419      	lsls	r1, r3, #16
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	430a      	orrs	r2, r1
 80055f6:	629a      	str	r2, [r3, #40]	; 0x28
 80055f8:	e028      	b.n	800564c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005600:	0c1b      	lsrs	r3, r3, #16
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	4413      	add	r3, r2
 8005606:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005608:	2300      	movs	r3, #0
 800560a:	73fb      	strb	r3, [r7, #15]
 800560c:	e00d      	b.n	800562a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	7bfb      	ldrb	r3, [r7, #15]
 8005614:	3340      	adds	r3, #64	; 0x40
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4413      	add	r3, r2
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	0c1b      	lsrs	r3, r3, #16
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	4413      	add	r3, r2
 8005622:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005624:	7bfb      	ldrb	r3, [r7, #15]
 8005626:	3301      	adds	r3, #1
 8005628:	73fb      	strb	r3, [r7, #15]
 800562a:	7bfa      	ldrb	r2, [r7, #15]
 800562c:	78fb      	ldrb	r3, [r7, #3]
 800562e:	3b01      	subs	r3, #1
 8005630:	429a      	cmp	r2, r3
 8005632:	d3ec      	bcc.n	800560e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005634:	883b      	ldrh	r3, [r7, #0]
 8005636:	0418      	lsls	r0, r3, #16
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6819      	ldr	r1, [r3, #0]
 800563c:	78fb      	ldrb	r3, [r7, #3]
 800563e:	3b01      	subs	r3, #1
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	4302      	orrs	r2, r0
 8005644:	3340      	adds	r3, #64	; 0x40
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	440b      	add	r3, r1
 800564a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800565a:	b480      	push	{r7}
 800565c:	b083      	sub	sp, #12
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
 8005662:	460b      	mov	r3, r1
 8005664:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	887a      	ldrh	r2, [r7, #2]
 800566c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	460b      	mov	r3, r1
 8005686:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e262      	b.n	8005b6c <HAL_RCC_OscConfig+0x4d8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d075      	beq.n	800579e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056b2:	4ba3      	ldr	r3, [pc, #652]	; (8005940 <HAL_RCC_OscConfig+0x2ac>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f003 030c 	and.w	r3, r3, #12
 80056ba:	2b04      	cmp	r3, #4
 80056bc:	d00c      	beq.n	80056d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056be:	4ba0      	ldr	r3, [pc, #640]	; (8005940 <HAL_RCC_OscConfig+0x2ac>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056c6:	2b08      	cmp	r3, #8
 80056c8:	d112      	bne.n	80056f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056ca:	4b9d      	ldr	r3, [pc, #628]	; (8005940 <HAL_RCC_OscConfig+0x2ac>)
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056d6:	d10b      	bne.n	80056f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056d8:	4b99      	ldr	r3, [pc, #612]	; (8005940 <HAL_RCC_OscConfig+0x2ac>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d05b      	beq.n	800579c <HAL_RCC_OscConfig+0x108>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d157      	bne.n	800579c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e23d      	b.n	8005b6c <HAL_RCC_OscConfig+0x4d8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056f8:	d106      	bne.n	8005708 <HAL_RCC_OscConfig+0x74>
 80056fa:	4b91      	ldr	r3, [pc, #580]	; (8005940 <HAL_RCC_OscConfig+0x2ac>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a90      	ldr	r2, [pc, #576]	; (8005940 <HAL_RCC_OscConfig+0x2ac>)
 8005700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005704:	6013      	str	r3, [r2, #0]
 8005706:	e01d      	b.n	8005744 <HAL_RCC_OscConfig+0xb0>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005710:	d10c      	bne.n	800572c <HAL_RCC_OscConfig+0x98>
 8005712:	4b8b      	ldr	r3, [pc, #556]	; (8005940 <HAL_RCC_OscConfig+0x2ac>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a8a      	ldr	r2, [pc, #552]	; (8005940 <HAL_RCC_OscConfig+0x2ac>)
 8005718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800571c:	6013      	str	r3, [r2, #0]
 800571e:	4b88      	ldr	r3, [pc, #544]	; (8005940 <HAL_RCC_OscConfig+0x2ac>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a87      	ldr	r2, [pc, #540]	; (8005940 <HAL_RCC_OscConfig+0x2ac>)
 8005724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005728:	6013      	str	r3, [r2, #0]
 800572a:	e00b      	b.n	8005744 <HAL_RCC_OscConfig+0xb0>
 800572c:	4b84      	ldr	r3, [pc, #528]	; (8005940 <HAL_RCC_OscConfig+0x2ac>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a83      	ldr	r2, [pc, #524]	; (8005940 <HAL_RCC_OscConfig+0x2ac>)
 8005732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005736:	6013      	str	r3, [r2, #0]
 8005738:	4b81      	ldr	r3, [pc, #516]	; (8005940 <HAL_RCC_OscConfig+0x2ac>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a80      	ldr	r2, [pc, #512]	; (8005940 <HAL_RCC_OscConfig+0x2ac>)
 800573e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005742:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d013      	beq.n	8005774 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800574c:	f7fb fd76 	bl	800123c <HAL_GetTick>
 8005750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005752:	e008      	b.n	8005766 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005754:	f7fb fd72 	bl	800123c <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b64      	cmp	r3, #100	; 0x64
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e202      	b.n	8005b6c <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005766:	4b76      	ldr	r3, [pc, #472]	; (8005940 <HAL_RCC_OscConfig+0x2ac>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d0f0      	beq.n	8005754 <HAL_RCC_OscConfig+0xc0>
 8005772:	e014      	b.n	800579e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005774:	f7fb fd62 	bl	800123c <HAL_GetTick>
 8005778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800577a:	e008      	b.n	800578e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800577c:	f7fb fd5e 	bl	800123c <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b64      	cmp	r3, #100	; 0x64
 8005788:	d901      	bls.n	800578e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e1ee      	b.n	8005b6c <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800578e:	4b6c      	ldr	r3, [pc, #432]	; (8005940 <HAL_RCC_OscConfig+0x2ac>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1f0      	bne.n	800577c <HAL_RCC_OscConfig+0xe8>
 800579a:	e000      	b.n	800579e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800579c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d063      	beq.n	8005872 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057aa:	4b65      	ldr	r3, [pc, #404]	; (8005940 <HAL_RCC_OscConfig+0x2ac>)
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f003 030c 	and.w	r3, r3, #12
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00b      	beq.n	80057ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057b6:	4b62      	ldr	r3, [pc, #392]	; (8005940 <HAL_RCC_OscConfig+0x2ac>)
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057be:	2b08      	cmp	r3, #8
 80057c0:	d11c      	bne.n	80057fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057c2:	4b5f      	ldr	r3, [pc, #380]	; (8005940 <HAL_RCC_OscConfig+0x2ac>)
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d116      	bne.n	80057fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057ce:	4b5c      	ldr	r3, [pc, #368]	; (8005940 <HAL_RCC_OscConfig+0x2ac>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d005      	beq.n	80057e6 <HAL_RCC_OscConfig+0x152>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d001      	beq.n	80057e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e1c2      	b.n	8005b6c <HAL_RCC_OscConfig+0x4d8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057e6:	4b56      	ldr	r3, [pc, #344]	; (8005940 <HAL_RCC_OscConfig+0x2ac>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	4952      	ldr	r1, [pc, #328]	; (8005940 <HAL_RCC_OscConfig+0x2ac>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057fa:	e03a      	b.n	8005872 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d020      	beq.n	8005846 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005804:	4b4f      	ldr	r3, [pc, #316]	; (8005944 <HAL_RCC_OscConfig+0x2b0>)
 8005806:	2201      	movs	r2, #1
 8005808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800580a:	f7fb fd17 	bl	800123c <HAL_GetTick>
 800580e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005810:	e008      	b.n	8005824 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005812:	f7fb fd13 	bl	800123c <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d901      	bls.n	8005824 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e1a3      	b.n	8005b6c <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005824:	4b46      	ldr	r3, [pc, #280]	; (8005940 <HAL_RCC_OscConfig+0x2ac>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0f0      	beq.n	8005812 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005830:	4b43      	ldr	r3, [pc, #268]	; (8005940 <HAL_RCC_OscConfig+0x2ac>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	00db      	lsls	r3, r3, #3
 800583e:	4940      	ldr	r1, [pc, #256]	; (8005940 <HAL_RCC_OscConfig+0x2ac>)
 8005840:	4313      	orrs	r3, r2
 8005842:	600b      	str	r3, [r1, #0]
 8005844:	e015      	b.n	8005872 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005846:	4b3f      	ldr	r3, [pc, #252]	; (8005944 <HAL_RCC_OscConfig+0x2b0>)
 8005848:	2200      	movs	r2, #0
 800584a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800584c:	f7fb fcf6 	bl	800123c <HAL_GetTick>
 8005850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005852:	e008      	b.n	8005866 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005854:	f7fb fcf2 	bl	800123c <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	2b02      	cmp	r3, #2
 8005860:	d901      	bls.n	8005866 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e182      	b.n	8005b6c <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005866:	4b36      	ldr	r3, [pc, #216]	; (8005940 <HAL_RCC_OscConfig+0x2ac>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1f0      	bne.n	8005854 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0308 	and.w	r3, r3, #8
 800587a:	2b00      	cmp	r3, #0
 800587c:	d030      	beq.n	80058e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d016      	beq.n	80058b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005886:	4b30      	ldr	r3, [pc, #192]	; (8005948 <HAL_RCC_OscConfig+0x2b4>)
 8005888:	2201      	movs	r2, #1
 800588a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800588c:	f7fb fcd6 	bl	800123c <HAL_GetTick>
 8005890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005892:	e008      	b.n	80058a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005894:	f7fb fcd2 	bl	800123c <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e162      	b.n	8005b6c <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058a6:	4b26      	ldr	r3, [pc, #152]	; (8005940 <HAL_RCC_OscConfig+0x2ac>)
 80058a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d0f0      	beq.n	8005894 <HAL_RCC_OscConfig+0x200>
 80058b2:	e015      	b.n	80058e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058b4:	4b24      	ldr	r3, [pc, #144]	; (8005948 <HAL_RCC_OscConfig+0x2b4>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058ba:	f7fb fcbf 	bl	800123c <HAL_GetTick>
 80058be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058c0:	e008      	b.n	80058d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058c2:	f7fb fcbb 	bl	800123c <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d901      	bls.n	80058d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e14b      	b.n	8005b6c <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058d4:	4b1a      	ldr	r3, [pc, #104]	; (8005940 <HAL_RCC_OscConfig+0x2ac>)
 80058d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1f0      	bne.n	80058c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0304 	and.w	r3, r3, #4
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 809e 	beq.w	8005a2a <HAL_RCC_OscConfig+0x396>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058ee:	2300      	movs	r3, #0
 80058f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058f2:	4b13      	ldr	r3, [pc, #76]	; (8005940 <HAL_RCC_OscConfig+0x2ac>)
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10f      	bne.n	800591e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058fe:	2300      	movs	r3, #0
 8005900:	60bb      	str	r3, [r7, #8]
 8005902:	4b0f      	ldr	r3, [pc, #60]	; (8005940 <HAL_RCC_OscConfig+0x2ac>)
 8005904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005906:	4a0e      	ldr	r2, [pc, #56]	; (8005940 <HAL_RCC_OscConfig+0x2ac>)
 8005908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800590c:	6413      	str	r3, [r2, #64]	; 0x40
 800590e:	4b0c      	ldr	r3, [pc, #48]	; (8005940 <HAL_RCC_OscConfig+0x2ac>)
 8005910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005916:	60bb      	str	r3, [r7, #8]
 8005918:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800591a:	2301      	movs	r3, #1
 800591c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800591e:	4b0b      	ldr	r3, [pc, #44]	; (800594c <HAL_RCC_OscConfig+0x2b8>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005926:	2b00      	cmp	r3, #0
 8005928:	d121      	bne.n	800596e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800592a:	4b08      	ldr	r3, [pc, #32]	; (800594c <HAL_RCC_OscConfig+0x2b8>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a07      	ldr	r2, [pc, #28]	; (800594c <HAL_RCC_OscConfig+0x2b8>)
 8005930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005934:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005936:	f7fb fc81 	bl	800123c <HAL_GetTick>
 800593a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800593c:	e011      	b.n	8005962 <HAL_RCC_OscConfig+0x2ce>
 800593e:	bf00      	nop
 8005940:	40023800 	.word	0x40023800
 8005944:	42470000 	.word	0x42470000
 8005948:	42470e80 	.word	0x42470e80
 800594c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005950:	f7fb fc74 	bl	800123c <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	2b02      	cmp	r3, #2
 800595c:	d901      	bls.n	8005962 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e104      	b.n	8005b6c <HAL_RCC_OscConfig+0x4d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005962:	4b84      	ldr	r3, [pc, #528]	; (8005b74 <HAL_RCC_OscConfig+0x4e0>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596a:	2b00      	cmp	r3, #0
 800596c:	d0f0      	beq.n	8005950 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d106      	bne.n	8005984 <HAL_RCC_OscConfig+0x2f0>
 8005976:	4b80      	ldr	r3, [pc, #512]	; (8005b78 <HAL_RCC_OscConfig+0x4e4>)
 8005978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597a:	4a7f      	ldr	r2, [pc, #508]	; (8005b78 <HAL_RCC_OscConfig+0x4e4>)
 800597c:	f043 0301 	orr.w	r3, r3, #1
 8005980:	6713      	str	r3, [r2, #112]	; 0x70
 8005982:	e01c      	b.n	80059be <HAL_RCC_OscConfig+0x32a>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	2b05      	cmp	r3, #5
 800598a:	d10c      	bne.n	80059a6 <HAL_RCC_OscConfig+0x312>
 800598c:	4b7a      	ldr	r3, [pc, #488]	; (8005b78 <HAL_RCC_OscConfig+0x4e4>)
 800598e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005990:	4a79      	ldr	r2, [pc, #484]	; (8005b78 <HAL_RCC_OscConfig+0x4e4>)
 8005992:	f043 0304 	orr.w	r3, r3, #4
 8005996:	6713      	str	r3, [r2, #112]	; 0x70
 8005998:	4b77      	ldr	r3, [pc, #476]	; (8005b78 <HAL_RCC_OscConfig+0x4e4>)
 800599a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599c:	4a76      	ldr	r2, [pc, #472]	; (8005b78 <HAL_RCC_OscConfig+0x4e4>)
 800599e:	f043 0301 	orr.w	r3, r3, #1
 80059a2:	6713      	str	r3, [r2, #112]	; 0x70
 80059a4:	e00b      	b.n	80059be <HAL_RCC_OscConfig+0x32a>
 80059a6:	4b74      	ldr	r3, [pc, #464]	; (8005b78 <HAL_RCC_OscConfig+0x4e4>)
 80059a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059aa:	4a73      	ldr	r2, [pc, #460]	; (8005b78 <HAL_RCC_OscConfig+0x4e4>)
 80059ac:	f023 0301 	bic.w	r3, r3, #1
 80059b0:	6713      	str	r3, [r2, #112]	; 0x70
 80059b2:	4b71      	ldr	r3, [pc, #452]	; (8005b78 <HAL_RCC_OscConfig+0x4e4>)
 80059b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b6:	4a70      	ldr	r2, [pc, #448]	; (8005b78 <HAL_RCC_OscConfig+0x4e4>)
 80059b8:	f023 0304 	bic.w	r3, r3, #4
 80059bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d014      	beq.n	80059f0 <HAL_RCC_OscConfig+0x35c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059c6:	f7fb fc39 	bl	800123c <HAL_GetTick>
 80059ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059cc:	e009      	b.n	80059e2 <HAL_RCC_OscConfig+0x34e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059ce:	f7fb fc35 	bl	800123c <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80059dc:	d901      	bls.n	80059e2 <HAL_RCC_OscConfig+0x34e>
        {
          return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e0c4      	b.n	8005b6c <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059e2:	4b65      	ldr	r3, [pc, #404]	; (8005b78 <HAL_RCC_OscConfig+0x4e4>)
 80059e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d0ef      	beq.n	80059ce <HAL_RCC_OscConfig+0x33a>
 80059ee:	e013      	b.n	8005a18 <HAL_RCC_OscConfig+0x384>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059f0:	f7fb fc24 	bl	800123c <HAL_GetTick>
 80059f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059f6:	e009      	b.n	8005a0c <HAL_RCC_OscConfig+0x378>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059f8:	f7fb fc20 	bl	800123c <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8005a06:	d901      	bls.n	8005a0c <HAL_RCC_OscConfig+0x378>
        {
          return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e0af      	b.n	8005b6c <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a0c:	4b5a      	ldr	r3, [pc, #360]	; (8005b78 <HAL_RCC_OscConfig+0x4e4>)
 8005a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a10:	f003 0302 	and.w	r3, r3, #2
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1ef      	bne.n	80059f8 <HAL_RCC_OscConfig+0x364>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a18:	7dfb      	ldrb	r3, [r7, #23]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d105      	bne.n	8005a2a <HAL_RCC_OscConfig+0x396>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a1e:	4b56      	ldr	r3, [pc, #344]	; (8005b78 <HAL_RCC_OscConfig+0x4e4>)
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	4a55      	ldr	r2, [pc, #340]	; (8005b78 <HAL_RCC_OscConfig+0x4e4>)
 8005a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f000 809b 	beq.w	8005b6a <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a34:	4b50      	ldr	r3, [pc, #320]	; (8005b78 <HAL_RCC_OscConfig+0x4e4>)
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f003 030c 	and.w	r3, r3, #12
 8005a3c:	2b08      	cmp	r3, #8
 8005a3e:	d05c      	beq.n	8005afa <HAL_RCC_OscConfig+0x466>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d141      	bne.n	8005acc <HAL_RCC_OscConfig+0x438>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a48:	4b4c      	ldr	r3, [pc, #304]	; (8005b7c <HAL_RCC_OscConfig+0x4e8>)
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a4e:	f7fb fbf5 	bl	800123c <HAL_GetTick>
 8005a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a54:	e008      	b.n	8005a68 <HAL_RCC_OscConfig+0x3d4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a56:	f7fb fbf1 	bl	800123c <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d901      	bls.n	8005a68 <HAL_RCC_OscConfig+0x3d4>
          {
            return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e081      	b.n	8005b6c <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a68:	4b43      	ldr	r3, [pc, #268]	; (8005b78 <HAL_RCC_OscConfig+0x4e4>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1f0      	bne.n	8005a56 <HAL_RCC_OscConfig+0x3c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	69da      	ldr	r2, [r3, #28]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	431a      	orrs	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a82:	019b      	lsls	r3, r3, #6
 8005a84:	431a      	orrs	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8a:	085b      	lsrs	r3, r3, #1
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	041b      	lsls	r3, r3, #16
 8005a90:	431a      	orrs	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a96:	061b      	lsls	r3, r3, #24
 8005a98:	4937      	ldr	r1, [pc, #220]	; (8005b78 <HAL_RCC_OscConfig+0x4e4>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a9e:	4b37      	ldr	r3, [pc, #220]	; (8005b7c <HAL_RCC_OscConfig+0x4e8>)
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aa4:	f7fb fbca 	bl	800123c <HAL_GetTick>
 8005aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aaa:	e008      	b.n	8005abe <HAL_RCC_OscConfig+0x42a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aac:	f7fb fbc6 	bl	800123c <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e056      	b.n	8005b6c <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005abe:	4b2e      	ldr	r3, [pc, #184]	; (8005b78 <HAL_RCC_OscConfig+0x4e4>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d0f0      	beq.n	8005aac <HAL_RCC_OscConfig+0x418>
 8005aca:	e04e      	b.n	8005b6a <HAL_RCC_OscConfig+0x4d6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005acc:	4b2b      	ldr	r3, [pc, #172]	; (8005b7c <HAL_RCC_OscConfig+0x4e8>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ad2:	f7fb fbb3 	bl	800123c <HAL_GetTick>
 8005ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ad8:	e008      	b.n	8005aec <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ada:	f7fb fbaf 	bl	800123c <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d901      	bls.n	8005aec <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e03f      	b.n	8005b6c <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aec:	4b22      	ldr	r3, [pc, #136]	; (8005b78 <HAL_RCC_OscConfig+0x4e4>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1f0      	bne.n	8005ada <HAL_RCC_OscConfig+0x446>
 8005af8:	e037      	b.n	8005b6a <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d101      	bne.n	8005b06 <HAL_RCC_OscConfig+0x472>
      {
        return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e032      	b.n	8005b6c <HAL_RCC_OscConfig+0x4d8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b06:	4b1c      	ldr	r3, [pc, #112]	; (8005b78 <HAL_RCC_OscConfig+0x4e4>)
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d028      	beq.n	8005b66 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d121      	bne.n	8005b66 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d11a      	bne.n	8005b66 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b36:	4013      	ands	r3, r2
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b3c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d111      	bne.n	8005b66 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4c:	085b      	lsrs	r3, r3, #1
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d107      	bne.n	8005b66 <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b60:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d001      	beq.n	8005b6a <HAL_RCC_OscConfig+0x4d6>
#endif
        {
          return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e000      	b.n	8005b6c <HAL_RCC_OscConfig+0x4d8>
        }
      }
    }
  }
  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3718      	adds	r7, #24
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	40007000 	.word	0x40007000
 8005b78:	40023800 	.word	0x40023800
 8005b7c:	42470060 	.word	0x42470060

08005b80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e0cc      	b.n	8005d2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b94:	4b68      	ldr	r3, [pc, #416]	; (8005d38 <HAL_RCC_ClockConfig+0x1b8>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0307 	and.w	r3, r3, #7
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d90c      	bls.n	8005bbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ba2:	4b65      	ldr	r3, [pc, #404]	; (8005d38 <HAL_RCC_ClockConfig+0x1b8>)
 8005ba4:	683a      	ldr	r2, [r7, #0]
 8005ba6:	b2d2      	uxtb	r2, r2
 8005ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005baa:	4b63      	ldr	r3, [pc, #396]	; (8005d38 <HAL_RCC_ClockConfig+0x1b8>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0307 	and.w	r3, r3, #7
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d001      	beq.n	8005bbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e0b8      	b.n	8005d2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0302 	and.w	r3, r3, #2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d020      	beq.n	8005c0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0304 	and.w	r3, r3, #4
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d005      	beq.n	8005be0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bd4:	4b59      	ldr	r3, [pc, #356]	; (8005d3c <HAL_RCC_ClockConfig+0x1bc>)
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	4a58      	ldr	r2, [pc, #352]	; (8005d3c <HAL_RCC_ClockConfig+0x1bc>)
 8005bda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005bde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0308 	and.w	r3, r3, #8
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d005      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bec:	4b53      	ldr	r3, [pc, #332]	; (8005d3c <HAL_RCC_ClockConfig+0x1bc>)
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	4a52      	ldr	r2, [pc, #328]	; (8005d3c <HAL_RCC_ClockConfig+0x1bc>)
 8005bf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005bf6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bf8:	4b50      	ldr	r3, [pc, #320]	; (8005d3c <HAL_RCC_ClockConfig+0x1bc>)
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	494d      	ldr	r1, [pc, #308]	; (8005d3c <HAL_RCC_ClockConfig+0x1bc>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d044      	beq.n	8005ca0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d107      	bne.n	8005c2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c1e:	4b47      	ldr	r3, [pc, #284]	; (8005d3c <HAL_RCC_ClockConfig+0x1bc>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d119      	bne.n	8005c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e07f      	b.n	8005d2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d003      	beq.n	8005c3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c3a:	2b03      	cmp	r3, #3
 8005c3c:	d107      	bne.n	8005c4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c3e:	4b3f      	ldr	r3, [pc, #252]	; (8005d3c <HAL_RCC_ClockConfig+0x1bc>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d109      	bne.n	8005c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e06f      	b.n	8005d2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c4e:	4b3b      	ldr	r3, [pc, #236]	; (8005d3c <HAL_RCC_ClockConfig+0x1bc>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e067      	b.n	8005d2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c5e:	4b37      	ldr	r3, [pc, #220]	; (8005d3c <HAL_RCC_ClockConfig+0x1bc>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f023 0203 	bic.w	r2, r3, #3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	4934      	ldr	r1, [pc, #208]	; (8005d3c <HAL_RCC_ClockConfig+0x1bc>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c70:	f7fb fae4 	bl	800123c <HAL_GetTick>
 8005c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c76:	e00a      	b.n	8005c8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c78:	f7fb fae0 	bl	800123c <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e04f      	b.n	8005d2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c8e:	4b2b      	ldr	r3, [pc, #172]	; (8005d3c <HAL_RCC_ClockConfig+0x1bc>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f003 020c 	and.w	r2, r3, #12
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d1eb      	bne.n	8005c78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ca0:	4b25      	ldr	r3, [pc, #148]	; (8005d38 <HAL_RCC_ClockConfig+0x1b8>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0307 	and.w	r3, r3, #7
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d20c      	bcs.n	8005cc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cae:	4b22      	ldr	r3, [pc, #136]	; (8005d38 <HAL_RCC_ClockConfig+0x1b8>)
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	b2d2      	uxtb	r2, r2
 8005cb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cb6:	4b20      	ldr	r3, [pc, #128]	; (8005d38 <HAL_RCC_ClockConfig+0x1b8>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0307 	and.w	r3, r3, #7
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d001      	beq.n	8005cc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e032      	b.n	8005d2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0304 	and.w	r3, r3, #4
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d008      	beq.n	8005ce6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cd4:	4b19      	ldr	r3, [pc, #100]	; (8005d3c <HAL_RCC_ClockConfig+0x1bc>)
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	4916      	ldr	r1, [pc, #88]	; (8005d3c <HAL_RCC_ClockConfig+0x1bc>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0308 	and.w	r3, r3, #8
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d009      	beq.n	8005d06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cf2:	4b12      	ldr	r3, [pc, #72]	; (8005d3c <HAL_RCC_ClockConfig+0x1bc>)
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	00db      	lsls	r3, r3, #3
 8005d00:	490e      	ldr	r1, [pc, #56]	; (8005d3c <HAL_RCC_ClockConfig+0x1bc>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d06:	f000 f82d 	bl	8005d64 <HAL_RCC_GetSysClockFreq>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	4b0b      	ldr	r3, [pc, #44]	; (8005d3c <HAL_RCC_ClockConfig+0x1bc>)
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	091b      	lsrs	r3, r3, #4
 8005d12:	f003 030f 	and.w	r3, r3, #15
 8005d16:	490a      	ldr	r1, [pc, #40]	; (8005d40 <HAL_RCC_ClockConfig+0x1c0>)
 8005d18:	5ccb      	ldrb	r3, [r1, r3]
 8005d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d1e:	4a09      	ldr	r2, [pc, #36]	; (8005d44 <HAL_RCC_ClockConfig+0x1c4>)
 8005d20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d22:	4b09      	ldr	r3, [pc, #36]	; (8005d48 <HAL_RCC_ClockConfig+0x1c8>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7fb fa44 	bl	80011b4 <HAL_InitTick>

  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	40023c00 	.word	0x40023c00
 8005d3c:	40023800 	.word	0x40023800
 8005d40:	08010ffc 	.word	0x08010ffc
 8005d44:	20000118 	.word	0x20000118
 8005d48:	20000000 	.word	0x20000000

08005d4c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005d50:	4b03      	ldr	r3, [pc, #12]	; (8005d60 <HAL_RCC_EnableCSS+0x14>)
 8005d52:	2201      	movs	r2, #1
 8005d54:	601a      	str	r2, [r3, #0]
}
 8005d56:	bf00      	nop
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	4247004c 	.word	0x4247004c

08005d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d64:	b5b0      	push	{r4, r5, r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	6079      	str	r1, [r7, #4]
 8005d6e:	2100      	movs	r1, #0
 8005d70:	60f9      	str	r1, [r7, #12]
 8005d72:	2100      	movs	r1, #0
 8005d74:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005d76:	2100      	movs	r1, #0
 8005d78:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d7a:	4952      	ldr	r1, [pc, #328]	; (8005ec4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005d7c:	6889      	ldr	r1, [r1, #8]
 8005d7e:	f001 010c 	and.w	r1, r1, #12
 8005d82:	2908      	cmp	r1, #8
 8005d84:	d00d      	beq.n	8005da2 <HAL_RCC_GetSysClockFreq+0x3e>
 8005d86:	2908      	cmp	r1, #8
 8005d88:	f200 8094 	bhi.w	8005eb4 <HAL_RCC_GetSysClockFreq+0x150>
 8005d8c:	2900      	cmp	r1, #0
 8005d8e:	d002      	beq.n	8005d96 <HAL_RCC_GetSysClockFreq+0x32>
 8005d90:	2904      	cmp	r1, #4
 8005d92:	d003      	beq.n	8005d9c <HAL_RCC_GetSysClockFreq+0x38>
 8005d94:	e08e      	b.n	8005eb4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d96:	4b4c      	ldr	r3, [pc, #304]	; (8005ec8 <HAL_RCC_GetSysClockFreq+0x164>)
 8005d98:	60bb      	str	r3, [r7, #8]
       break;
 8005d9a:	e08e      	b.n	8005eba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d9c:	4b4b      	ldr	r3, [pc, #300]	; (8005ecc <HAL_RCC_GetSysClockFreq+0x168>)
 8005d9e:	60bb      	str	r3, [r7, #8]
      break;
 8005da0:	e08b      	b.n	8005eba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005da2:	4948      	ldr	r1, [pc, #288]	; (8005ec4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005da4:	6849      	ldr	r1, [r1, #4]
 8005da6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005daa:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005dac:	4945      	ldr	r1, [pc, #276]	; (8005ec4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005dae:	6849      	ldr	r1, [r1, #4]
 8005db0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005db4:	2900      	cmp	r1, #0
 8005db6:	d024      	beq.n	8005e02 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005db8:	4942      	ldr	r1, [pc, #264]	; (8005ec4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005dba:	6849      	ldr	r1, [r1, #4]
 8005dbc:	0989      	lsrs	r1, r1, #6
 8005dbe:	4608      	mov	r0, r1
 8005dc0:	f04f 0100 	mov.w	r1, #0
 8005dc4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005dc8:	f04f 0500 	mov.w	r5, #0
 8005dcc:	ea00 0204 	and.w	r2, r0, r4
 8005dd0:	ea01 0305 	and.w	r3, r1, r5
 8005dd4:	493d      	ldr	r1, [pc, #244]	; (8005ecc <HAL_RCC_GetSysClockFreq+0x168>)
 8005dd6:	fb01 f003 	mul.w	r0, r1, r3
 8005dda:	2100      	movs	r1, #0
 8005ddc:	fb01 f102 	mul.w	r1, r1, r2
 8005de0:	1844      	adds	r4, r0, r1
 8005de2:	493a      	ldr	r1, [pc, #232]	; (8005ecc <HAL_RCC_GetSysClockFreq+0x168>)
 8005de4:	fba2 0101 	umull	r0, r1, r2, r1
 8005de8:	1863      	adds	r3, r4, r1
 8005dea:	4619      	mov	r1, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	461a      	mov	r2, r3
 8005df0:	f04f 0300 	mov.w	r3, #0
 8005df4:	f7fa fee0 	bl	8000bb8 <__aeabi_uldivmod>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	e04a      	b.n	8005e98 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e02:	4b30      	ldr	r3, [pc, #192]	; (8005ec4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	099b      	lsrs	r3, r3, #6
 8005e08:	461a      	mov	r2, r3
 8005e0a:	f04f 0300 	mov.w	r3, #0
 8005e0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005e12:	f04f 0100 	mov.w	r1, #0
 8005e16:	ea02 0400 	and.w	r4, r2, r0
 8005e1a:	ea03 0501 	and.w	r5, r3, r1
 8005e1e:	4620      	mov	r0, r4
 8005e20:	4629      	mov	r1, r5
 8005e22:	f04f 0200 	mov.w	r2, #0
 8005e26:	f04f 0300 	mov.w	r3, #0
 8005e2a:	014b      	lsls	r3, r1, #5
 8005e2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005e30:	0142      	lsls	r2, r0, #5
 8005e32:	4610      	mov	r0, r2
 8005e34:	4619      	mov	r1, r3
 8005e36:	1b00      	subs	r0, r0, r4
 8005e38:	eb61 0105 	sbc.w	r1, r1, r5
 8005e3c:	f04f 0200 	mov.w	r2, #0
 8005e40:	f04f 0300 	mov.w	r3, #0
 8005e44:	018b      	lsls	r3, r1, #6
 8005e46:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005e4a:	0182      	lsls	r2, r0, #6
 8005e4c:	1a12      	subs	r2, r2, r0
 8005e4e:	eb63 0301 	sbc.w	r3, r3, r1
 8005e52:	f04f 0000 	mov.w	r0, #0
 8005e56:	f04f 0100 	mov.w	r1, #0
 8005e5a:	00d9      	lsls	r1, r3, #3
 8005e5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e60:	00d0      	lsls	r0, r2, #3
 8005e62:	4602      	mov	r2, r0
 8005e64:	460b      	mov	r3, r1
 8005e66:	1912      	adds	r2, r2, r4
 8005e68:	eb45 0303 	adc.w	r3, r5, r3
 8005e6c:	f04f 0000 	mov.w	r0, #0
 8005e70:	f04f 0100 	mov.w	r1, #0
 8005e74:	0299      	lsls	r1, r3, #10
 8005e76:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005e7a:	0290      	lsls	r0, r2, #10
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	460b      	mov	r3, r1
 8005e80:	4610      	mov	r0, r2
 8005e82:	4619      	mov	r1, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	461a      	mov	r2, r3
 8005e88:	f04f 0300 	mov.w	r3, #0
 8005e8c:	f7fa fe94 	bl	8000bb8 <__aeabi_uldivmod>
 8005e90:	4602      	mov	r2, r0
 8005e92:	460b      	mov	r3, r1
 8005e94:	4613      	mov	r3, r2
 8005e96:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005e98:	4b0a      	ldr	r3, [pc, #40]	; (8005ec4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	0c1b      	lsrs	r3, r3, #16
 8005e9e:	f003 0303 	and.w	r3, r3, #3
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	005b      	lsls	r3, r3, #1
 8005ea6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb0:	60bb      	str	r3, [r7, #8]
      break;
 8005eb2:	e002      	b.n	8005eba <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005eb4:	4b04      	ldr	r3, [pc, #16]	; (8005ec8 <HAL_RCC_GetSysClockFreq+0x164>)
 8005eb6:	60bb      	str	r3, [r7, #8]
      break;
 8005eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005eba:	68bb      	ldr	r3, [r7, #8]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bdb0      	pop	{r4, r5, r7, pc}
 8005ec4:	40023800 	.word	0x40023800
 8005ec8:	00f42400 	.word	0x00f42400
 8005ecc:	016e3600 	.word	0x016e3600

08005ed0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ed4:	4b03      	ldr	r3, [pc, #12]	; (8005ee4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	20000118 	.word	0x20000118

08005ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005eec:	f7ff fff0 	bl	8005ed0 <HAL_RCC_GetHCLKFreq>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	4b05      	ldr	r3, [pc, #20]	; (8005f08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	0a9b      	lsrs	r3, r3, #10
 8005ef8:	f003 0307 	and.w	r3, r3, #7
 8005efc:	4903      	ldr	r1, [pc, #12]	; (8005f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005efe:	5ccb      	ldrb	r3, [r1, r3]
 8005f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	40023800 	.word	0x40023800
 8005f0c:	0801100c 	.word	0x0801100c

08005f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f14:	f7ff ffdc 	bl	8005ed0 <HAL_RCC_GetHCLKFreq>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	4b05      	ldr	r3, [pc, #20]	; (8005f30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	0b5b      	lsrs	r3, r3, #13
 8005f20:	f003 0307 	and.w	r3, r3, #7
 8005f24:	4903      	ldr	r1, [pc, #12]	; (8005f34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f26:	5ccb      	ldrb	r3, [r1, r3]
 8005f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	40023800 	.word	0x40023800
 8005f34:	0801100c 	.word	0x0801100c

08005f38 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005f3c:	4b06      	ldr	r3, [pc, #24]	; (8005f58 <HAL_RCC_NMI_IRQHandler+0x20>)
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f44:	2b80      	cmp	r3, #128	; 0x80
 8005f46:	d104      	bne.n	8005f52 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005f48:	f000 f80a 	bl	8005f60 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005f4c:	4b03      	ldr	r3, [pc, #12]	; (8005f5c <HAL_RCC_NMI_IRQHandler+0x24>)
 8005f4e:	2280      	movs	r2, #128	; 0x80
 8005f50:	701a      	strb	r2, [r3, #0]
  }
}
 8005f52:	bf00      	nop
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	40023800 	.word	0x40023800
 8005f5c:	4002380e 	.word	0x4002380e

08005f60 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005f60:	b480      	push	{r7}
 8005f62:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8005f64:	bf00      	nop
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
	...

08005f70 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d105      	bne.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d038      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005f98:	4b68      	ldr	r3, [pc, #416]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f9e:	f7fb f94d 	bl	800123c <HAL_GetTick>
 8005fa2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005fa4:	e008      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005fa6:	f7fb f949 	bl	800123c <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d901      	bls.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e0bc      	b.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005fb8:	4b61      	ldr	r3, [pc, #388]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1f0      	bne.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	019b      	lsls	r3, r3, #6
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	071b      	lsls	r3, r3, #28
 8005fd6:	495a      	ldr	r1, [pc, #360]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005fde:	4b57      	ldr	r3, [pc, #348]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005fe4:	f7fb f92a 	bl	800123c <HAL_GetTick>
 8005fe8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005fea:	e008      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005fec:	f7fb f926 	bl	800123c <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d901      	bls.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e099      	b.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ffe:	4b50      	ldr	r3, [pc, #320]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d0f0      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	2b00      	cmp	r3, #0
 8006014:	f000 8082 	beq.w	800611c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006018:	2300      	movs	r3, #0
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	4b48      	ldr	r3, [pc, #288]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800601e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006020:	4a47      	ldr	r2, [pc, #284]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006026:	6413      	str	r3, [r2, #64]	; 0x40
 8006028:	4b45      	ldr	r3, [pc, #276]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800602a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006030:	60fb      	str	r3, [r7, #12]
 8006032:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006034:	4b43      	ldr	r3, [pc, #268]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a42      	ldr	r2, [pc, #264]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800603a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800603e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006040:	f7fb f8fc 	bl	800123c <HAL_GetTick>
 8006044:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006046:	e008      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006048:	f7fb f8f8 	bl	800123c <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	2b02      	cmp	r3, #2
 8006054:	d901      	bls.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e06b      	b.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800605a:	4b3a      	ldr	r3, [pc, #232]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006062:	2b00      	cmp	r3, #0
 8006064:	d0f0      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006066:	4b36      	ldr	r3, [pc, #216]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800606a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800606e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d02e      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	429a      	cmp	r2, r3
 8006082:	d027      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006084:	4b2e      	ldr	r3, [pc, #184]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800608c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800608e:	4b2e      	ldr	r3, [pc, #184]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006090:	2201      	movs	r2, #1
 8006092:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006094:	4b2c      	ldr	r3, [pc, #176]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006096:	2200      	movs	r2, #0
 8006098:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800609a:	4a29      	ldr	r2, [pc, #164]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80060a0:	4b27      	ldr	r3, [pc, #156]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a4:	f003 0301 	and.w	r3, r3, #1
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d113      	bne.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80060ac:	f7fb f8c6 	bl	800123c <HAL_GetTick>
 80060b0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060b2:	e009      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060b4:	f7fb f8c2 	bl	800123c <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80060c2:	d901      	bls.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
          {
            return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e034      	b.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060c8:	4b1d      	ldr	r3, [pc, #116]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060cc:	f003 0302 	and.w	r3, r3, #2
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d0ef      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060e0:	d10d      	bne.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x18e>
 80060e2:	4b17      	ldr	r3, [pc, #92]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80060f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060f6:	4912      	ldr	r1, [pc, #72]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060f8:	4313      	orrs	r3, r2
 80060fa:	608b      	str	r3, [r1, #8]
 80060fc:	e005      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x19a>
 80060fe:	4b10      	ldr	r3, [pc, #64]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	4a0f      	ldr	r2, [pc, #60]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006104:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006108:	6093      	str	r3, [r2, #8]
 800610a:	4b0d      	ldr	r3, [pc, #52]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800610c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006116:	490a      	ldr	r1, [pc, #40]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006118:	4313      	orrs	r3, r2
 800611a:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0308 	and.w	r3, r3, #8
 8006124:	2b00      	cmp	r3, #0
 8006126:	d003      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	7d1a      	ldrb	r2, [r3, #20]
 800612c:	4b07      	ldr	r3, [pc, #28]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800612e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3718      	adds	r7, #24
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	42470068 	.word	0x42470068
 8006140:	40023800 	.word	0x40023800
 8006144:	40007000 	.word	0x40007000
 8006148:	42470e40 	.word	0x42470e40
 800614c:	424711e0 	.word	0x424711e0

08006150 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e083      	b.n	800626a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	7f5b      	ldrb	r3, [r3, #29]
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b00      	cmp	r3, #0
 800616a:	d105      	bne.n	8006178 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f007 f8da 	bl	800d32c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2202      	movs	r2, #2
 800617c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	22ca      	movs	r2, #202	; 0xca
 8006184:	625a      	str	r2, [r3, #36]	; 0x24
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2253      	movs	r2, #83	; 0x53
 800618c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f9fb 	bl	800658a <RTC_EnterInitMode>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d008      	beq.n	80061ac <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	22ff      	movs	r2, #255	; 0xff
 80061a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2204      	movs	r2, #4
 80061a6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e05e      	b.n	800626a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	6812      	ldr	r2, [r2, #0]
 80061b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80061ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061be:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6899      	ldr	r1, [r3, #8]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685a      	ldr	r2, [r3, #4]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	431a      	orrs	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	431a      	orrs	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	430a      	orrs	r2, r1
 80061dc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	68d2      	ldr	r2, [r2, #12]
 80061e6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6919      	ldr	r1, [r3, #16]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	041a      	lsls	r2, r3, #16
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68da      	ldr	r2, [r3, #12]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800620a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f003 0320 	and.w	r3, r3, #32
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10e      	bne.n	8006238 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f98d 	bl	800653a <HAL_RTC_WaitForSynchro>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d008      	beq.n	8006238 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	22ff      	movs	r2, #255	; 0xff
 800622c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2204      	movs	r2, #4
 8006232:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e018      	b.n	800626a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006246:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	699a      	ldr	r2, [r3, #24]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	22ff      	movs	r2, #255	; 0xff
 8006260:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006268:	2300      	movs	r3, #0
  }
}
 800626a:	4618      	mov	r0, r3
 800626c:	3708      	adds	r7, #8
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006272:	b590      	push	{r4, r7, lr}
 8006274:	b087      	sub	sp, #28
 8006276:	af00      	add	r7, sp, #0
 8006278:	60f8      	str	r0, [r7, #12]
 800627a:	60b9      	str	r1, [r7, #8]
 800627c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800627e:	2300      	movs	r3, #0
 8006280:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	7f1b      	ldrb	r3, [r3, #28]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d101      	bne.n	800628e <HAL_RTC_SetTime+0x1c>
 800628a:	2302      	movs	r3, #2
 800628c:	e0aa      	b.n	80063e4 <HAL_RTC_SetTime+0x172>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2201      	movs	r2, #1
 8006292:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2202      	movs	r2, #2
 8006298:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d126      	bne.n	80062ee <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d102      	bne.n	80062b4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2200      	movs	r2, #0
 80062b2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 f992 	bl	80065e2 <RTC_ByteToBcd2>
 80062be:	4603      	mov	r3, r0
 80062c0:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	785b      	ldrb	r3, [r3, #1]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f000 f98b 	bl	80065e2 <RTC_ByteToBcd2>
 80062cc:	4603      	mov	r3, r0
 80062ce:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80062d0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	789b      	ldrb	r3, [r3, #2]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f000 f983 	bl	80065e2 <RTC_ByteToBcd2>
 80062dc:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80062de:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	78db      	ldrb	r3, [r3, #3]
 80062e6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80062e8:	4313      	orrs	r3, r2
 80062ea:	617b      	str	r3, [r7, #20]
 80062ec:	e018      	b.n	8006320 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d102      	bne.n	8006302 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	2200      	movs	r2, #0
 8006300:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	785b      	ldrb	r3, [r3, #1]
 800630c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800630e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006314:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	78db      	ldrb	r3, [r3, #3]
 800631a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800631c:	4313      	orrs	r3, r2
 800631e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	22ca      	movs	r2, #202	; 0xca
 8006326:	625a      	str	r2, [r3, #36]	; 0x24
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2253      	movs	r2, #83	; 0x53
 800632e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f000 f92a 	bl	800658a <RTC_EnterInitMode>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00b      	beq.n	8006354 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	22ff      	movs	r2, #255	; 0xff
 8006342:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2204      	movs	r2, #4
 8006348:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e047      	b.n	80063e4 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800635e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006362:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	689a      	ldr	r2, [r3, #8]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006372:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6899      	ldr	r1, [r3, #8]
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	68da      	ldr	r2, [r3, #12]
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	431a      	orrs	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	430a      	orrs	r2, r1
 800638a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68da      	ldr	r2, [r3, #12]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800639a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f003 0320 	and.w	r3, r3, #32
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d111      	bne.n	80063ce <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f000 f8c5 	bl	800653a <HAL_RTC_WaitForSynchro>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00b      	beq.n	80063ce <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	22ff      	movs	r2, #255	; 0xff
 80063bc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2204      	movs	r2, #4
 80063c2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e00a      	b.n	80063e4 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	22ff      	movs	r2, #255	; 0xff
 80063d4:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2201      	movs	r2, #1
 80063da:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80063e2:	2300      	movs	r3, #0
  }
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	371c      	adds	r7, #28
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd90      	pop	{r4, r7, pc}

080063ec <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80063ec:	b590      	push	{r4, r7, lr}
 80063ee:	b087      	sub	sp, #28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80063f8:	2300      	movs	r3, #0
 80063fa:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	7f1b      	ldrb	r3, [r3, #28]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d101      	bne.n	8006408 <HAL_RTC_SetDate+0x1c>
 8006404:	2302      	movs	r3, #2
 8006406:	e094      	b.n	8006532 <HAL_RTC_SetDate+0x146>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2201      	movs	r2, #1
 800640c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2202      	movs	r2, #2
 8006412:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10e      	bne.n	8006438 <HAL_RTC_SetDate+0x4c>
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	785b      	ldrb	r3, [r3, #1]
 800641e:	f003 0310 	and.w	r3, r3, #16
 8006422:	2b00      	cmp	r3, #0
 8006424:	d008      	beq.n	8006438 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	785b      	ldrb	r3, [r3, #1]
 800642a:	f023 0310 	bic.w	r3, r3, #16
 800642e:	b2db      	uxtb	r3, r3
 8006430:	330a      	adds	r3, #10
 8006432:	b2da      	uxtb	r2, r3
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d11c      	bne.n	8006478 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	78db      	ldrb	r3, [r3, #3]
 8006442:	4618      	mov	r0, r3
 8006444:	f000 f8cd 	bl	80065e2 <RTC_ByteToBcd2>
 8006448:	4603      	mov	r3, r0
 800644a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	785b      	ldrb	r3, [r3, #1]
 8006450:	4618      	mov	r0, r3
 8006452:	f000 f8c6 	bl	80065e2 <RTC_ByteToBcd2>
 8006456:	4603      	mov	r3, r0
 8006458:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800645a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	789b      	ldrb	r3, [r3, #2]
 8006460:	4618      	mov	r0, r3
 8006462:	f000 f8be 	bl	80065e2 <RTC_ByteToBcd2>
 8006466:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006468:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006472:	4313      	orrs	r3, r2
 8006474:	617b      	str	r3, [r7, #20]
 8006476:	e00e      	b.n	8006496 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	78db      	ldrb	r3, [r3, #3]
 800647c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	785b      	ldrb	r3, [r3, #1]
 8006482:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006484:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800648a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006492:	4313      	orrs	r3, r2
 8006494:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	22ca      	movs	r2, #202	; 0xca
 800649c:	625a      	str	r2, [r3, #36]	; 0x24
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2253      	movs	r2, #83	; 0x53
 80064a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f000 f86f 	bl	800658a <RTC_EnterInitMode>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00b      	beq.n	80064ca <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	22ff      	movs	r2, #255	; 0xff
 80064b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2204      	movs	r2, #4
 80064be:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e033      	b.n	8006532 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80064d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80064d8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68da      	ldr	r2, [r3, #12]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064e8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	f003 0320 	and.w	r3, r3, #32
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d111      	bne.n	800651c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f000 f81e 	bl	800653a <HAL_RTC_WaitForSynchro>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00b      	beq.n	800651c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	22ff      	movs	r2, #255	; 0xff
 800650a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2204      	movs	r2, #4
 8006510:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e00a      	b.n	8006532 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	22ff      	movs	r2, #255	; 0xff
 8006522:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2201      	movs	r2, #1
 8006528:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006530:	2300      	movs	r3, #0
  }
}
 8006532:	4618      	mov	r0, r3
 8006534:	371c      	adds	r7, #28
 8006536:	46bd      	mov	sp, r7
 8006538:	bd90      	pop	{r4, r7, pc}

0800653a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b084      	sub	sp, #16
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006542:	2300      	movs	r3, #0
 8006544:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68da      	ldr	r2, [r3, #12]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006554:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006556:	f7fa fe71 	bl	800123c <HAL_GetTick>
 800655a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800655c:	e009      	b.n	8006572 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800655e:	f7fa fe6d 	bl	800123c <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800656c:	d901      	bls.n	8006572 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e007      	b.n	8006582 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	f003 0320 	and.w	r3, r3, #32
 800657c:	2b00      	cmp	r3, #0
 800657e:	d0ee      	beq.n	800655e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b084      	sub	sp, #16
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006592:	2300      	movs	r3, #0
 8006594:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d119      	bne.n	80065d8 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f04f 32ff 	mov.w	r2, #4294967295
 80065ac:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80065ae:	f7fa fe45 	bl	800123c <HAL_GetTick>
 80065b2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80065b4:	e009      	b.n	80065ca <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80065b6:	f7fa fe41 	bl	800123c <HAL_GetTick>
 80065ba:	4602      	mov	r2, r0
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065c4:	d901      	bls.n	80065ca <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e007      	b.n	80065da <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d0ee      	beq.n	80065b6 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b085      	sub	sp, #20
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	4603      	mov	r3, r0
 80065ea:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80065ec:	2300      	movs	r3, #0
 80065ee:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80065f0:	e005      	b.n	80065fe <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	3301      	adds	r3, #1
 80065f6:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80065f8:	79fb      	ldrb	r3, [r7, #7]
 80065fa:	3b0a      	subs	r3, #10
 80065fc:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80065fe:	79fb      	ldrb	r3, [r7, #7]
 8006600:	2b09      	cmp	r3, #9
 8006602:	d8f6      	bhi.n	80065f2 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	b2db      	uxtb	r3, r3
 8006608:	011b      	lsls	r3, r3, #4
 800660a:	b2da      	uxtb	r2, r3
 800660c:	79fb      	ldrb	r3, [r7, #7]
 800660e:	4313      	orrs	r3, r2
 8006610:	b2db      	uxtb	r3, r3
}
 8006612:	4618      	mov	r0, r3
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b082      	sub	sp, #8
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d101      	bne.n	8006630 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e022      	b.n	8006676 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b00      	cmp	r3, #0
 800663a:	d105      	bne.n	8006648 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f006 fe9e 	bl	800d384 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2203      	movs	r2, #3
 800664c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f815 	bl	8006680 <HAL_SD_InitCard>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e00a      	b.n	8006676 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
	...

08006680 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006680:	b5b0      	push	{r4, r5, r7, lr}
 8006682:	b08e      	sub	sp, #56	; 0x38
 8006684:	af04      	add	r7, sp, #16
 8006686:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006688:	2300      	movs	r3, #0
 800668a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800668c:	2300      	movs	r3, #0
 800668e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006690:	2300      	movs	r3, #0
 8006692:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006694:	2300      	movs	r3, #0
 8006696:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006698:	2300      	movs	r3, #0
 800669a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800669c:	2376      	movs	r3, #118	; 0x76
 800669e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681d      	ldr	r5, [r3, #0]
 80066a4:	466c      	mov	r4, sp
 80066a6:	f107 0314 	add.w	r3, r7, #20
 80066aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80066ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80066b2:	f107 0308 	add.w	r3, r7, #8
 80066b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80066b8:	4628      	mov	r0, r5
 80066ba:	f001 fe07 	bl	80082cc <SDIO_Init>
 80066be:	4603      	mov	r3, r0
 80066c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80066c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d001      	beq.n	80066d0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e04c      	b.n	800676a <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80066d0:	4b28      	ldr	r3, [pc, #160]	; (8006774 <HAL_SD_InitCard+0xf4>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4618      	mov	r0, r3
 80066dc:	f001 fe2e 	bl	800833c <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80066e0:	4b24      	ldr	r3, [pc, #144]	; (8006774 <HAL_SD_InitCard+0xf4>)
 80066e2:	2201      	movs	r2, #1
 80066e4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fb52 	bl	8006d90 <SD_PowerON>
 80066ec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80066ee:	6a3b      	ldr	r3, [r7, #32]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00b      	beq.n	800670c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006700:	6a3b      	ldr	r3, [r7, #32]
 8006702:	431a      	orrs	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e02e      	b.n	800676a <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 fa73 	bl	8006bf8 <SD_InitCard>
 8006712:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006714:	6a3b      	ldr	r3, [r7, #32]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00b      	beq.n	8006732 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006726:	6a3b      	ldr	r3, [r7, #32]
 8006728:	431a      	orrs	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e01b      	b.n	800676a <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f44f 7100 	mov.w	r1, #512	; 0x200
 800673a:	4618      	mov	r0, r3
 800673c:	f001 fe91 	bl	8008462 <SDMMC_CmdBlockLength>
 8006740:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006742:	6a3b      	ldr	r3, [r7, #32]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00f      	beq.n	8006768 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a0a      	ldr	r2, [pc, #40]	; (8006778 <HAL_SD_InitCard+0xf8>)
 800674e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	431a      	orrs	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e000      	b.n	800676a <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3728      	adds	r7, #40	; 0x28
 800676e:	46bd      	mov	sp, r7
 8006770:	bdb0      	pop	{r4, r5, r7, pc}
 8006772:	bf00      	nop
 8006774:	422580a0 	.word	0x422580a0
 8006778:	004005ff 	.word	0x004005ff

0800677c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800678a:	0f9b      	lsrs	r3, r3, #30
 800678c:	b2da      	uxtb	r2, r3
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006796:	0e9b      	lsrs	r3, r3, #26
 8006798:	b2db      	uxtb	r3, r3
 800679a:	f003 030f 	and.w	r3, r3, #15
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067a8:	0e1b      	lsrs	r3, r3, #24
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	f003 0303 	and.w	r3, r3, #3
 80067b0:	b2da      	uxtb	r2, r3
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067ba:	0c1b      	lsrs	r3, r3, #16
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067c6:	0a1b      	lsrs	r3, r3, #8
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067d2:	b2da      	uxtb	r2, r3
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067dc:	0d1b      	lsrs	r3, r3, #20
 80067de:	b29a      	uxth	r2, r3
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067e8:	0c1b      	lsrs	r3, r3, #16
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	f003 030f 	and.w	r3, r3, #15
 80067f0:	b2da      	uxtb	r2, r3
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067fa:	0bdb      	lsrs	r3, r3, #15
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	b2da      	uxtb	r2, r3
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800680c:	0b9b      	lsrs	r3, r3, #14
 800680e:	b2db      	uxtb	r3, r3
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	b2da      	uxtb	r2, r3
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800681e:	0b5b      	lsrs	r3, r3, #13
 8006820:	b2db      	uxtb	r3, r3
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	b2da      	uxtb	r2, r3
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006830:	0b1b      	lsrs	r3, r3, #12
 8006832:	b2db      	uxtb	r3, r3
 8006834:	f003 0301 	and.w	r3, r3, #1
 8006838:	b2da      	uxtb	r2, r3
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	2200      	movs	r2, #0
 8006842:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006848:	2b00      	cmp	r3, #0
 800684a:	d163      	bne.n	8006914 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006850:	009a      	lsls	r2, r3, #2
 8006852:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006856:	4013      	ands	r3, r2
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800685c:	0f92      	lsrs	r2, r2, #30
 800685e:	431a      	orrs	r2, r3
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006868:	0edb      	lsrs	r3, r3, #27
 800686a:	b2db      	uxtb	r3, r3
 800686c:	f003 0307 	and.w	r3, r3, #7
 8006870:	b2da      	uxtb	r2, r3
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800687a:	0e1b      	lsrs	r3, r3, #24
 800687c:	b2db      	uxtb	r3, r3
 800687e:	f003 0307 	and.w	r3, r3, #7
 8006882:	b2da      	uxtb	r2, r3
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800688c:	0d5b      	lsrs	r3, r3, #21
 800688e:	b2db      	uxtb	r3, r3
 8006890:	f003 0307 	and.w	r3, r3, #7
 8006894:	b2da      	uxtb	r2, r3
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800689e:	0c9b      	lsrs	r3, r3, #18
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	f003 0307 	and.w	r3, r3, #7
 80068a6:	b2da      	uxtb	r2, r3
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068b0:	0bdb      	lsrs	r3, r3, #15
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	f003 0307 	and.w	r3, r3, #7
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	1c5a      	adds	r2, r3, #1
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	7e1b      	ldrb	r3, [r3, #24]
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	f003 0307 	and.w	r3, r3, #7
 80068d2:	3302      	adds	r3, #2
 80068d4:	2201      	movs	r2, #1
 80068d6:	fa02 f303 	lsl.w	r3, r2, r3
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80068de:	fb02 f203 	mul.w	r2, r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	7a1b      	ldrb	r3, [r3, #8]
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	f003 030f 	and.w	r3, r3, #15
 80068f0:	2201      	movs	r2, #1
 80068f2:	409a      	lsls	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006900:	0a52      	lsrs	r2, r2, #9
 8006902:	fb02 f203 	mul.w	r2, r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006910:	661a      	str	r2, [r3, #96]	; 0x60
 8006912:	e031      	b.n	8006978 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006918:	2b01      	cmp	r3, #1
 800691a:	d11d      	bne.n	8006958 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006920:	041b      	lsls	r3, r3, #16
 8006922:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800692a:	0c1b      	lsrs	r3, r3, #16
 800692c:	431a      	orrs	r2, r3
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	3301      	adds	r3, #1
 8006938:	029a      	lsls	r2, r3, #10
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f44f 7200 	mov.w	r2, #512	; 0x200
 800694c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	661a      	str	r2, [r3, #96]	; 0x60
 8006956:	e00f      	b.n	8006978 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a58      	ldr	r2, [pc, #352]	; (8006ac0 <HAL_SD_GetCardCSD+0x344>)
 800695e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006964:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e09d      	b.n	8006ab4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800697c:	0b9b      	lsrs	r3, r3, #14
 800697e:	b2db      	uxtb	r3, r3
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	b2da      	uxtb	r2, r3
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800698e:	09db      	lsrs	r3, r3, #7
 8006990:	b2db      	uxtb	r3, r3
 8006992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006996:	b2da      	uxtb	r2, r3
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b0:	0fdb      	lsrs	r3, r3, #31
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069bc:	0f5b      	lsrs	r3, r3, #29
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	f003 0303 	and.w	r3, r3, #3
 80069c4:	b2da      	uxtb	r2, r3
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ce:	0e9b      	lsrs	r3, r3, #26
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	f003 0307 	and.w	r3, r3, #7
 80069d6:	b2da      	uxtb	r2, r3
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e0:	0d9b      	lsrs	r3, r3, #22
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	f003 030f 	and.w	r3, r3, #15
 80069e8:	b2da      	uxtb	r2, r3
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f2:	0d5b      	lsrs	r3, r3, #21
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	b2da      	uxtb	r2, r3
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a0e:	0c1b      	lsrs	r3, r3, #16
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	b2da      	uxtb	r2, r3
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a22:	0bdb      	lsrs	r3, r3, #15
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	b2da      	uxtb	r2, r3
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a36:	0b9b      	lsrs	r3, r3, #14
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	b2da      	uxtb	r2, r3
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a4a:	0b5b      	lsrs	r3, r3, #13
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a5e:	0b1b      	lsrs	r3, r3, #12
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	f003 0301 	and.w	r3, r3, #1
 8006a66:	b2da      	uxtb	r2, r3
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a72:	0a9b      	lsrs	r3, r3, #10
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	f003 0303 	and.w	r3, r3, #3
 8006a7a:	b2da      	uxtb	r2, r3
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a86:	0a1b      	lsrs	r3, r3, #8
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	f003 0303 	and.w	r3, r3, #3
 8006a8e:	b2da      	uxtb	r2, r3
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a9a:	085b      	lsrs	r3, r3, #1
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aa2:	b2da      	uxtb	r2, r3
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	004005ff 	.word	0x004005ff

08006ac4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006ac4:	b5b0      	push	{r4, r5, r7, lr}
 8006ac6:	b08e      	sub	sp, #56	; 0x38
 8006ac8:	af04      	add	r7, sp, #16
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2203      	movs	r2, #3
 8006ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae0:	2b03      	cmp	r3, #3
 8006ae2:	d02e      	beq.n	8006b42 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aea:	d106      	bne.n	8006afa <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	639a      	str	r2, [r3, #56]	; 0x38
 8006af8:	e029      	b.n	8006b4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b00:	d10a      	bne.n	8006b18 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f9d2 	bl	8006eac <SD_WideBus_Enable>
 8006b08:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b0e:	6a3b      	ldr	r3, [r7, #32]
 8006b10:	431a      	orrs	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	639a      	str	r2, [r3, #56]	; 0x38
 8006b16:	e01a      	b.n	8006b4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10a      	bne.n	8006b34 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fa0f 	bl	8006f42 <SD_WideBus_Disable>
 8006b24:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b2a:	6a3b      	ldr	r3, [r7, #32]
 8006b2c:	431a      	orrs	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	639a      	str	r2, [r3, #56]	; 0x38
 8006b32:	e00c      	b.n	8006b4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b38:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	639a      	str	r2, [r3, #56]	; 0x38
 8006b40:	e005      	b.n	8006b4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b46:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00b      	beq.n	8006b6e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a26      	ldr	r2, [pc, #152]	; (8006bf4 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006b5c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006b6c:	e01f      	b.n	8006bae <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	695b      	ldr	r3, [r3, #20]
 8006b88:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681d      	ldr	r5, [r3, #0]
 8006b94:	466c      	mov	r4, sp
 8006b96:	f107 0314 	add.w	r3, r7, #20
 8006b9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006b9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006ba2:	f107 0308 	add.w	r3, r7, #8
 8006ba6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ba8:	4628      	mov	r0, r5
 8006baa:	f001 fb8f 	bl	80082cc <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f001 fc53 	bl	8008462 <SDMMC_CmdBlockLength>
 8006bbc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006bbe:	6a3b      	ldr	r3, [r7, #32]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00c      	beq.n	8006bde <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a0a      	ldr	r2, [pc, #40]	; (8006bf4 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006bca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bd0:	6a3b      	ldr	r3, [r7, #32]
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006be6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3728      	adds	r7, #40	; 0x28
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bdb0      	pop	{r4, r5, r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	004005ff 	.word	0x004005ff

08006bf8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006bf8:	b5b0      	push	{r4, r5, r7, lr}
 8006bfa:	b094      	sub	sp, #80	; 0x50
 8006bfc:	af04      	add	r7, sp, #16
 8006bfe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006c00:	2301      	movs	r3, #1
 8006c02:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f001 fba6 	bl	800835a <SDIO_GetPowerState>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d102      	bne.n	8006c1a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006c14:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006c18:	e0b6      	b.n	8006d88 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c1e:	2b03      	cmp	r3, #3
 8006c20:	d02f      	beq.n	8006c82 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4618      	mov	r0, r3
 8006c28:	f001 fd25 	bl	8008676 <SDMMC_CmdSendCID>
 8006c2c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d001      	beq.n	8006c38 <SD_InitCard+0x40>
    {
      return errorstate;
 8006c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c36:	e0a7      	b.n	8006d88 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f001 fbd0 	bl	80083e4 <SDIO_GetResponse>
 8006c44:	4602      	mov	r2, r0
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2104      	movs	r1, #4
 8006c50:	4618      	mov	r0, r3
 8006c52:	f001 fbc7 	bl	80083e4 <SDIO_GetResponse>
 8006c56:	4602      	mov	r2, r0
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2108      	movs	r1, #8
 8006c62:	4618      	mov	r0, r3
 8006c64:	f001 fbbe 	bl	80083e4 <SDIO_GetResponse>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	210c      	movs	r1, #12
 8006c74:	4618      	mov	r0, r3
 8006c76:	f001 fbb5 	bl	80083e4 <SDIO_GetResponse>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c86:	2b03      	cmp	r3, #3
 8006c88:	d00d      	beq.n	8006ca6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f107 020e 	add.w	r2, r7, #14
 8006c92:	4611      	mov	r1, r2
 8006c94:	4618      	mov	r0, r3
 8006c96:	f001 fd2b 	bl	80086f0 <SDMMC_CmdSetRelAdd>
 8006c9a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d001      	beq.n	8006ca6 <SD_InitCard+0xae>
    {
      return errorstate;
 8006ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ca4:	e070      	b.n	8006d88 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006caa:	2b03      	cmp	r3, #3
 8006cac:	d036      	beq.n	8006d1c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006cae:	89fb      	ldrh	r3, [r7, #14]
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cbe:	041b      	lsls	r3, r3, #16
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	4610      	mov	r0, r2
 8006cc4:	f001 fcf5 	bl	80086b2 <SDMMC_CmdSendCSD>
 8006cc8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d001      	beq.n	8006cd4 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cd2:	e059      	b.n	8006d88 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2100      	movs	r1, #0
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f001 fb82 	bl	80083e4 <SDIO_GetResponse>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2104      	movs	r1, #4
 8006cec:	4618      	mov	r0, r3
 8006cee:	f001 fb79 	bl	80083e4 <SDIO_GetResponse>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2108      	movs	r1, #8
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f001 fb70 	bl	80083e4 <SDIO_GetResponse>
 8006d04:	4602      	mov	r2, r0
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	210c      	movs	r1, #12
 8006d10:	4618      	mov	r0, r3
 8006d12:	f001 fb67 	bl	80083e4 <SDIO_GetResponse>
 8006d16:	4602      	mov	r2, r0
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2104      	movs	r1, #4
 8006d22:	4618      	mov	r0, r3
 8006d24:	f001 fb5e 	bl	80083e4 <SDIO_GetResponse>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	0d1a      	lsrs	r2, r3, #20
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006d30:	f107 0310 	add.w	r3, r7, #16
 8006d34:	4619      	mov	r1, r3
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7ff fd20 	bl	800677c <HAL_SD_GetCardCSD>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d002      	beq.n	8006d48 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006d46:	e01f      	b.n	8006d88 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6819      	ldr	r1, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d50:	041b      	lsls	r3, r3, #16
 8006d52:	461a      	mov	r2, r3
 8006d54:	f04f 0300 	mov.w	r3, #0
 8006d58:	4608      	mov	r0, r1
 8006d5a:	f001 fba4 	bl	80084a6 <SDMMC_CmdSelDesel>
 8006d5e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d001      	beq.n	8006d6a <SD_InitCard+0x172>
  {
    return errorstate;
 8006d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d68:	e00e      	b.n	8006d88 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681d      	ldr	r5, [r3, #0]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	466c      	mov	r4, sp
 8006d72:	f103 0210 	add.w	r2, r3, #16
 8006d76:	ca07      	ldmia	r2, {r0, r1, r2}
 8006d78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006d7c:	3304      	adds	r3, #4
 8006d7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d80:	4628      	mov	r0, r5
 8006d82:	f001 faa3 	bl	80082cc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3740      	adds	r7, #64	; 0x40
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bdb0      	pop	{r4, r5, r7, pc}

08006d90 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	617b      	str	r3, [r7, #20]
 8006da0:	2300      	movs	r3, #0
 8006da2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4618      	mov	r0, r3
 8006daa:	f001 fb9f 	bl	80084ec <SDMMC_CmdGoIdleState>
 8006dae:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d001      	beq.n	8006dba <SD_PowerON+0x2a>
  {
    return errorstate;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	e072      	b.n	8006ea0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f001 fbb2 	bl	8008528 <SDMMC_CmdOperCond>
 8006dc4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00d      	beq.n	8006de8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f001 fb88 	bl	80084ec <SDMMC_CmdGoIdleState>
 8006ddc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d004      	beq.n	8006dee <SD_PowerON+0x5e>
    {
      return errorstate;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	e05b      	b.n	8006ea0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d137      	bne.n	8006e66 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f001 fbb2 	bl	8008566 <SDMMC_CmdAppCommand>
 8006e02:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d02d      	beq.n	8006e66 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e0e:	e047      	b.n	8006ea0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2100      	movs	r1, #0
 8006e16:	4618      	mov	r0, r3
 8006e18:	f001 fba5 	bl	8008566 <SDMMC_CmdAppCommand>
 8006e1c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d001      	beq.n	8006e28 <SD_PowerON+0x98>
    {
      return errorstate;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	e03b      	b.n	8006ea0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	491e      	ldr	r1, [pc, #120]	; (8006ea8 <SD_PowerON+0x118>)
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f001 fbbb 	bl	80085aa <SDMMC_CmdAppOperCommand>
 8006e34:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d002      	beq.n	8006e42 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e40:	e02e      	b.n	8006ea0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2100      	movs	r1, #0
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f001 facb 	bl	80083e4 <SDIO_GetResponse>
 8006e4e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	0fdb      	lsrs	r3, r3, #31
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d101      	bne.n	8006e5c <SD_PowerON+0xcc>
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e000      	b.n	8006e5e <SD_PowerON+0xce>
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	613b      	str	r3, [r7, #16]

    count++;
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	3301      	adds	r3, #1
 8006e64:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d802      	bhi.n	8006e76 <SD_PowerON+0xe6>
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d0cc      	beq.n	8006e10 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d902      	bls.n	8006e86 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006e80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e84:	e00c      	b.n	8006ea0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d003      	beq.n	8006e98 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	645a      	str	r2, [r3, #68]	; 0x44
 8006e96:	e002      	b.n	8006e9e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3718      	adds	r7, #24
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	c1100000 	.word	0xc1100000

08006eac <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b086      	sub	sp, #24
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	60fb      	str	r3, [r7, #12]
 8006eb8:	2300      	movs	r3, #0
 8006eba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f001 fa8e 	bl	80083e4 <SDIO_GetResponse>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ece:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ed2:	d102      	bne.n	8006eda <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006ed4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ed8:	e02f      	b.n	8006f3a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006eda:	f107 030c 	add.w	r3, r7, #12
 8006ede:	4619      	mov	r1, r3
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 f879 	bl	8006fd8 <SD_FindSCR>
 8006ee6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d001      	beq.n	8006ef2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	e023      	b.n	8006f3a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d01c      	beq.n	8006f36 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f04:	041b      	lsls	r3, r3, #16
 8006f06:	4619      	mov	r1, r3
 8006f08:	4610      	mov	r0, r2
 8006f0a:	f001 fb2c 	bl	8008566 <SDMMC_CmdAppCommand>
 8006f0e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	e00f      	b.n	8006f3a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2102      	movs	r1, #2
 8006f20:	4618      	mov	r0, r3
 8006f22:	f001 fb65 	bl	80085f0 <SDMMC_CmdBusWidth>
 8006f26:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d001      	beq.n	8006f32 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	e003      	b.n	8006f3a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006f32:	2300      	movs	r3, #0
 8006f34:	e001      	b.n	8006f3a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006f36:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3718      	adds	r7, #24
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b086      	sub	sp, #24
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	60fb      	str	r3, [r7, #12]
 8006f4e:	2300      	movs	r3, #0
 8006f50:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2100      	movs	r1, #0
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f001 fa43 	bl	80083e4 <SDIO_GetResponse>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f68:	d102      	bne.n	8006f70 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006f6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f6e:	e02f      	b.n	8006fd0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006f70:	f107 030c 	add.w	r3, r7, #12
 8006f74:	4619      	mov	r1, r3
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f82e 	bl	8006fd8 <SD_FindSCR>
 8006f7c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d001      	beq.n	8006f88 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	e023      	b.n	8006fd0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d01c      	beq.n	8006fcc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f9a:	041b      	lsls	r3, r3, #16
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	4610      	mov	r0, r2
 8006fa0:	f001 fae1 	bl	8008566 <SDMMC_CmdAppCommand>
 8006fa4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d001      	beq.n	8006fb0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	e00f      	b.n	8006fd0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f001 fb1a 	bl	80085f0 <SDMMC_CmdBusWidth>
 8006fbc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d001      	beq.n	8006fc8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	e003      	b.n	8006fd0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	e001      	b.n	8006fd0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006fcc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3718      	adds	r7, #24
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006fd8:	b590      	push	{r4, r7, lr}
 8006fda:	b08f      	sub	sp, #60	; 0x3c
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006fe2:	f7fa f92b 	bl	800123c <HAL_GetTick>
 8006fe6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006fec:	2300      	movs	r3, #0
 8006fee:	60bb      	str	r3, [r7, #8]
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2108      	movs	r1, #8
 8006ffe:	4618      	mov	r0, r3
 8007000:	f001 fa2f 	bl	8008462 <SDMMC_CmdBlockLength>
 8007004:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <SD_FindSCR+0x38>
  {
    return errorstate;
 800700c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700e:	e0b2      	b.n	8007176 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007018:	041b      	lsls	r3, r3, #16
 800701a:	4619      	mov	r1, r3
 800701c:	4610      	mov	r0, r2
 800701e:	f001 faa2 	bl	8008566 <SDMMC_CmdAppCommand>
 8007022:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007026:	2b00      	cmp	r3, #0
 8007028:	d001      	beq.n	800702e <SD_FindSCR+0x56>
  {
    return errorstate;
 800702a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702c:	e0a3      	b.n	8007176 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800702e:	f04f 33ff 	mov.w	r3, #4294967295
 8007032:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007034:	2308      	movs	r3, #8
 8007036:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007038:	2330      	movs	r3, #48	; 0x30
 800703a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800703c:	2302      	movs	r3, #2
 800703e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007040:	2300      	movs	r3, #0
 8007042:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007044:	2301      	movs	r3, #1
 8007046:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f107 0210 	add.w	r2, r7, #16
 8007050:	4611      	mov	r1, r2
 8007052:	4618      	mov	r0, r3
 8007054:	f001 f9d9 	bl	800840a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4618      	mov	r0, r3
 800705e:	f001 fae9 	bl	8008634 <SDMMC_CmdSendSCR>
 8007062:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007066:	2b00      	cmp	r3, #0
 8007068:	d02a      	beq.n	80070c0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800706a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706c:	e083      	b.n	8007176 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00f      	beq.n	800709c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6819      	ldr	r1, [r3, #0]
 8007080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	f107 0208 	add.w	r2, r7, #8
 8007088:	18d4      	adds	r4, r2, r3
 800708a:	4608      	mov	r0, r1
 800708c:	f001 f949 	bl	8008322 <SDIO_ReadFIFO>
 8007090:	4603      	mov	r3, r0
 8007092:	6023      	str	r3, [r4, #0]
      index++;
 8007094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007096:	3301      	adds	r3, #1
 8007098:	637b      	str	r3, [r7, #52]	; 0x34
 800709a:	e006      	b.n	80070aa <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d012      	beq.n	80070d0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80070aa:	f7fa f8c7 	bl	800123c <HAL_GetTick>
 80070ae:	4602      	mov	r2, r0
 80070b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b8:	d102      	bne.n	80070c0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80070ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80070be:	e05a      	b.n	8007176 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070c6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d0cf      	beq.n	800706e <SD_FindSCR+0x96>
 80070ce:	e000      	b.n	80070d2 <SD_FindSCR+0xfa>
      break;
 80070d0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070d8:	f003 0308 	and.w	r3, r3, #8
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d005      	beq.n	80070ec <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2208      	movs	r2, #8
 80070e6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80070e8:	2308      	movs	r3, #8
 80070ea:	e044      	b.n	8007176 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f2:	f003 0302 	and.w	r3, r3, #2
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d005      	beq.n	8007106 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2202      	movs	r2, #2
 8007100:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007102:	2302      	movs	r3, #2
 8007104:	e037      	b.n	8007176 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800710c:	f003 0320 	and.w	r3, r3, #32
 8007110:	2b00      	cmp	r3, #0
 8007112:	d005      	beq.n	8007120 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2220      	movs	r2, #32
 800711a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800711c:	2320      	movs	r3, #32
 800711e:	e02a      	b.n	8007176 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f240 523a 	movw	r2, #1338	; 0x53a
 8007128:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	061a      	lsls	r2, r3, #24
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	021b      	lsls	r3, r3, #8
 8007132:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007136:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	0a1b      	lsrs	r3, r3, #8
 800713c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007140:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	0e1b      	lsrs	r3, r3, #24
 8007146:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800714a:	601a      	str	r2, [r3, #0]
    scr++;
 800714c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800714e:	3304      	adds	r3, #4
 8007150:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	061a      	lsls	r2, r3, #24
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	021b      	lsls	r3, r3, #8
 800715a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800715e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	0a1b      	lsrs	r3, r3, #8
 8007164:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007168:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	0e1b      	lsrs	r3, r3, #24
 800716e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007172:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	373c      	adds	r7, #60	; 0x3c
 800717a:	46bd      	mov	sp, r7
 800717c:	bd90      	pop	{r4, r7, pc}

0800717e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b082      	sub	sp, #8
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d101      	bne.n	8007190 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e041      	b.n	8007214 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b00      	cmp	r3, #0
 800719a:	d106      	bne.n	80071aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f006 f977 	bl	800d498 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2202      	movs	r2, #2
 80071ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	3304      	adds	r3, #4
 80071ba:	4619      	mov	r1, r3
 80071bc:	4610      	mov	r0, r2
 80071be:	f000 fb47 	bl	8007850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800722a:	b2db      	uxtb	r3, r3
 800722c:	2b01      	cmp	r3, #1
 800722e:	d001      	beq.n	8007234 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e044      	b.n	80072be <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2202      	movs	r2, #2
 8007238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68da      	ldr	r2, [r3, #12]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f042 0201 	orr.w	r2, r2, #1
 800724a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a1e      	ldr	r2, [pc, #120]	; (80072cc <HAL_TIM_Base_Start_IT+0xb0>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d018      	beq.n	8007288 <HAL_TIM_Base_Start_IT+0x6c>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800725e:	d013      	beq.n	8007288 <HAL_TIM_Base_Start_IT+0x6c>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a1a      	ldr	r2, [pc, #104]	; (80072d0 <HAL_TIM_Base_Start_IT+0xb4>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d00e      	beq.n	8007288 <HAL_TIM_Base_Start_IT+0x6c>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a19      	ldr	r2, [pc, #100]	; (80072d4 <HAL_TIM_Base_Start_IT+0xb8>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d009      	beq.n	8007288 <HAL_TIM_Base_Start_IT+0x6c>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a17      	ldr	r2, [pc, #92]	; (80072d8 <HAL_TIM_Base_Start_IT+0xbc>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d004      	beq.n	8007288 <HAL_TIM_Base_Start_IT+0x6c>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a16      	ldr	r2, [pc, #88]	; (80072dc <HAL_TIM_Base_Start_IT+0xc0>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d111      	bne.n	80072ac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f003 0307 	and.w	r3, r3, #7
 8007292:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2b06      	cmp	r3, #6
 8007298:	d010      	beq.n	80072bc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f042 0201 	orr.w	r2, r2, #1
 80072a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072aa:	e007      	b.n	80072bc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f042 0201 	orr.w	r2, r2, #1
 80072ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	40010000 	.word	0x40010000
 80072d0:	40000400 	.word	0x40000400
 80072d4:	40000800 	.word	0x40000800
 80072d8:	40000c00 	.word	0x40000c00
 80072dc:	40014000 	.word	0x40014000

080072e0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d101      	bne.n	80072f2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e041      	b.n	8007376 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d106      	bne.n	800730c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f839 	bl	800737e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2202      	movs	r2, #2
 8007310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	3304      	adds	r3, #4
 800731c:	4619      	mov	r1, r3
 800731e:	4610      	mov	r0, r2
 8007320:	f000 fa96 	bl	8007850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3708      	adds	r7, #8
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800737e:	b480      	push	{r7}
 8007380:	b083      	sub	sp, #12
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007386:	bf00      	nop
 8007388:	370c      	adds	r7, #12
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b082      	sub	sp, #8
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	f003 0302 	and.w	r3, r3, #2
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d122      	bne.n	80073ee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	f003 0302 	and.w	r3, r3, #2
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d11b      	bne.n	80073ee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f06f 0202 	mvn.w	r2, #2
 80073be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	f003 0303 	and.w	r3, r3, #3
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d003      	beq.n	80073dc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fa1c 	bl	8007812 <HAL_TIM_IC_CaptureCallback>
 80073da:	e005      	b.n	80073e8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fa0e 	bl	80077fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fa1f 	bl	8007826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	f003 0304 	and.w	r3, r3, #4
 80073f8:	2b04      	cmp	r3, #4
 80073fa:	d122      	bne.n	8007442 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	f003 0304 	and.w	r3, r3, #4
 8007406:	2b04      	cmp	r3, #4
 8007408:	d11b      	bne.n	8007442 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f06f 0204 	mvn.w	r2, #4
 8007412:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2202      	movs	r2, #2
 8007418:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007424:	2b00      	cmp	r3, #0
 8007426:	d003      	beq.n	8007430 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 f9f2 	bl	8007812 <HAL_TIM_IC_CaptureCallback>
 800742e:	e005      	b.n	800743c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f9e4 	bl	80077fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f9f5 	bl	8007826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	f003 0308 	and.w	r3, r3, #8
 800744c:	2b08      	cmp	r3, #8
 800744e:	d122      	bne.n	8007496 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	f003 0308 	and.w	r3, r3, #8
 800745a:	2b08      	cmp	r3, #8
 800745c:	d11b      	bne.n	8007496 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f06f 0208 	mvn.w	r2, #8
 8007466:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2204      	movs	r2, #4
 800746c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	69db      	ldr	r3, [r3, #28]
 8007474:	f003 0303 	and.w	r3, r3, #3
 8007478:	2b00      	cmp	r3, #0
 800747a:	d003      	beq.n	8007484 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f9c8 	bl	8007812 <HAL_TIM_IC_CaptureCallback>
 8007482:	e005      	b.n	8007490 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 f9ba 	bl	80077fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 f9cb 	bl	8007826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	f003 0310 	and.w	r3, r3, #16
 80074a0:	2b10      	cmp	r3, #16
 80074a2:	d122      	bne.n	80074ea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	f003 0310 	and.w	r3, r3, #16
 80074ae:	2b10      	cmp	r3, #16
 80074b0:	d11b      	bne.n	80074ea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f06f 0210 	mvn.w	r2, #16
 80074ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2208      	movs	r2, #8
 80074c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	69db      	ldr	r3, [r3, #28]
 80074c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d003      	beq.n	80074d8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f99e 	bl	8007812 <HAL_TIM_IC_CaptureCallback>
 80074d6:	e005      	b.n	80074e4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 f990 	bl	80077fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f9a1 	bl	8007826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	f003 0301 	and.w	r3, r3, #1
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d10e      	bne.n	8007516 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	f003 0301 	and.w	r3, r3, #1
 8007502:	2b01      	cmp	r3, #1
 8007504:	d107      	bne.n	8007516 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f06f 0201 	mvn.w	r2, #1
 800750e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 f96a 	bl	80077ea <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007520:	2b80      	cmp	r3, #128	; 0x80
 8007522:	d10e      	bne.n	8007542 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800752e:	2b80      	cmp	r3, #128	; 0x80
 8007530:	d107      	bne.n	8007542 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800753a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 fca5 	bl	8007e8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800754c:	2b40      	cmp	r3, #64	; 0x40
 800754e:	d10e      	bne.n	800756e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800755a:	2b40      	cmp	r3, #64	; 0x40
 800755c:	d107      	bne.n	800756e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f966 	bl	800783a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	f003 0320 	and.w	r3, r3, #32
 8007578:	2b20      	cmp	r3, #32
 800757a:	d10e      	bne.n	800759a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	f003 0320 	and.w	r3, r3, #32
 8007586:	2b20      	cmp	r3, #32
 8007588:	d107      	bne.n	800759a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f06f 0220 	mvn.w	r2, #32
 8007592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 fc6f 	bl	8007e78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800759a:	bf00      	nop
 800759c:	3708      	adds	r7, #8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
	...

080075a4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075b0:	2300      	movs	r3, #0
 80075b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d101      	bne.n	80075c2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80075be:	2302      	movs	r3, #2
 80075c0:	e048      	b.n	8007654 <HAL_TIM_OC_ConfigChannel+0xb0>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2201      	movs	r2, #1
 80075c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2b0c      	cmp	r3, #12
 80075ce:	d839      	bhi.n	8007644 <HAL_TIM_OC_ConfigChannel+0xa0>
 80075d0:	a201      	add	r2, pc, #4	; (adr r2, 80075d8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80075d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d6:	bf00      	nop
 80075d8:	0800760d 	.word	0x0800760d
 80075dc:	08007645 	.word	0x08007645
 80075e0:	08007645 	.word	0x08007645
 80075e4:	08007645 	.word	0x08007645
 80075e8:	0800761b 	.word	0x0800761b
 80075ec:	08007645 	.word	0x08007645
 80075f0:	08007645 	.word	0x08007645
 80075f4:	08007645 	.word	0x08007645
 80075f8:	08007629 	.word	0x08007629
 80075fc:	08007645 	.word	0x08007645
 8007600:	08007645 	.word	0x08007645
 8007604:	08007645 	.word	0x08007645
 8007608:	08007637 	.word	0x08007637
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68b9      	ldr	r1, [r7, #8]
 8007612:	4618      	mov	r0, r3
 8007614:	f000 f99c 	bl	8007950 <TIM_OC1_SetConfig>
      break;
 8007618:	e017      	b.n	800764a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68b9      	ldr	r1, [r7, #8]
 8007620:	4618      	mov	r0, r3
 8007622:	f000 f9fb 	bl	8007a1c <TIM_OC2_SetConfig>
      break;
 8007626:	e010      	b.n	800764a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68b9      	ldr	r1, [r7, #8]
 800762e:	4618      	mov	r0, r3
 8007630:	f000 fa60 	bl	8007af4 <TIM_OC3_SetConfig>
      break;
 8007634:	e009      	b.n	800764a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	68b9      	ldr	r1, [r7, #8]
 800763c:	4618      	mov	r0, r3
 800763e:	f000 fac3 	bl	8007bc8 <TIM_OC4_SetConfig>
      break;
 8007642:	e002      	b.n	800764a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	75fb      	strb	r3, [r7, #23]
      break;
 8007648:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007652:	7dfb      	ldrb	r3, [r7, #23]
}
 8007654:	4618      	mov	r0, r3
 8007656:	3718      	adds	r7, #24
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007666:	2300      	movs	r3, #0
 8007668:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007670:	2b01      	cmp	r3, #1
 8007672:	d101      	bne.n	8007678 <HAL_TIM_ConfigClockSource+0x1c>
 8007674:	2302      	movs	r3, #2
 8007676:	e0b4      	b.n	80077e2 <HAL_TIM_ConfigClockSource+0x186>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2202      	movs	r2, #2
 8007684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007696:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800769e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68ba      	ldr	r2, [r7, #8]
 80076a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076b0:	d03e      	beq.n	8007730 <HAL_TIM_ConfigClockSource+0xd4>
 80076b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076b6:	f200 8087 	bhi.w	80077c8 <HAL_TIM_ConfigClockSource+0x16c>
 80076ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076be:	f000 8086 	beq.w	80077ce <HAL_TIM_ConfigClockSource+0x172>
 80076c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076c6:	d87f      	bhi.n	80077c8 <HAL_TIM_ConfigClockSource+0x16c>
 80076c8:	2b70      	cmp	r3, #112	; 0x70
 80076ca:	d01a      	beq.n	8007702 <HAL_TIM_ConfigClockSource+0xa6>
 80076cc:	2b70      	cmp	r3, #112	; 0x70
 80076ce:	d87b      	bhi.n	80077c8 <HAL_TIM_ConfigClockSource+0x16c>
 80076d0:	2b60      	cmp	r3, #96	; 0x60
 80076d2:	d050      	beq.n	8007776 <HAL_TIM_ConfigClockSource+0x11a>
 80076d4:	2b60      	cmp	r3, #96	; 0x60
 80076d6:	d877      	bhi.n	80077c8 <HAL_TIM_ConfigClockSource+0x16c>
 80076d8:	2b50      	cmp	r3, #80	; 0x50
 80076da:	d03c      	beq.n	8007756 <HAL_TIM_ConfigClockSource+0xfa>
 80076dc:	2b50      	cmp	r3, #80	; 0x50
 80076de:	d873      	bhi.n	80077c8 <HAL_TIM_ConfigClockSource+0x16c>
 80076e0:	2b40      	cmp	r3, #64	; 0x40
 80076e2:	d058      	beq.n	8007796 <HAL_TIM_ConfigClockSource+0x13a>
 80076e4:	2b40      	cmp	r3, #64	; 0x40
 80076e6:	d86f      	bhi.n	80077c8 <HAL_TIM_ConfigClockSource+0x16c>
 80076e8:	2b30      	cmp	r3, #48	; 0x30
 80076ea:	d064      	beq.n	80077b6 <HAL_TIM_ConfigClockSource+0x15a>
 80076ec:	2b30      	cmp	r3, #48	; 0x30
 80076ee:	d86b      	bhi.n	80077c8 <HAL_TIM_ConfigClockSource+0x16c>
 80076f0:	2b20      	cmp	r3, #32
 80076f2:	d060      	beq.n	80077b6 <HAL_TIM_ConfigClockSource+0x15a>
 80076f4:	2b20      	cmp	r3, #32
 80076f6:	d867      	bhi.n	80077c8 <HAL_TIM_ConfigClockSource+0x16c>
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d05c      	beq.n	80077b6 <HAL_TIM_ConfigClockSource+0x15a>
 80076fc:	2b10      	cmp	r3, #16
 80076fe:	d05a      	beq.n	80077b6 <HAL_TIM_ConfigClockSource+0x15a>
 8007700:	e062      	b.n	80077c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6818      	ldr	r0, [r3, #0]
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	6899      	ldr	r1, [r3, #8]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	f000 fb23 	bl	8007d5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007724:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	609a      	str	r2, [r3, #8]
      break;
 800772e:	e04f      	b.n	80077d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6818      	ldr	r0, [r3, #0]
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	6899      	ldr	r1, [r3, #8]
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	685a      	ldr	r2, [r3, #4]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	f000 fb0c 	bl	8007d5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	689a      	ldr	r2, [r3, #8]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007752:	609a      	str	r2, [r3, #8]
      break;
 8007754:	e03c      	b.n	80077d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6818      	ldr	r0, [r3, #0]
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	6859      	ldr	r1, [r3, #4]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	461a      	mov	r2, r3
 8007764:	f000 fa80 	bl	8007c68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2150      	movs	r1, #80	; 0x50
 800776e:	4618      	mov	r0, r3
 8007770:	f000 fad9 	bl	8007d26 <TIM_ITRx_SetConfig>
      break;
 8007774:	e02c      	b.n	80077d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6818      	ldr	r0, [r3, #0]
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	6859      	ldr	r1, [r3, #4]
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	461a      	mov	r2, r3
 8007784:	f000 fa9f 	bl	8007cc6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2160      	movs	r1, #96	; 0x60
 800778e:	4618      	mov	r0, r3
 8007790:	f000 fac9 	bl	8007d26 <TIM_ITRx_SetConfig>
      break;
 8007794:	e01c      	b.n	80077d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6818      	ldr	r0, [r3, #0]
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	6859      	ldr	r1, [r3, #4]
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	461a      	mov	r2, r3
 80077a4:	f000 fa60 	bl	8007c68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2140      	movs	r1, #64	; 0x40
 80077ae:	4618      	mov	r0, r3
 80077b0:	f000 fab9 	bl	8007d26 <TIM_ITRx_SetConfig>
      break;
 80077b4:	e00c      	b.n	80077d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4619      	mov	r1, r3
 80077c0:	4610      	mov	r0, r2
 80077c2:	f000 fab0 	bl	8007d26 <TIM_ITRx_SetConfig>
      break;
 80077c6:	e003      	b.n	80077d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	73fb      	strb	r3, [r7, #15]
      break;
 80077cc:	e000      	b.n	80077d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80077ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077ea:	b480      	push	{r7}
 80077ec:	b083      	sub	sp, #12
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80077f2:	bf00      	nop
 80077f4:	370c      	adds	r7, #12
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr

080077fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077fe:	b480      	push	{r7}
 8007800:	b083      	sub	sp, #12
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007806:	bf00      	nop
 8007808:	370c      	adds	r7, #12
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr

08007812 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007812:	b480      	push	{r7}
 8007814:	b083      	sub	sp, #12
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800781a:	bf00      	nop
 800781c:	370c      	adds	r7, #12
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr

08007826 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007826:	b480      	push	{r7}
 8007828:	b083      	sub	sp, #12
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800782e:	bf00      	nop
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr

0800783a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800783a:	b480      	push	{r7}
 800783c:	b083      	sub	sp, #12
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007842:	bf00      	nop
 8007844:	370c      	adds	r7, #12
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr
	...

08007850 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4a34      	ldr	r2, [pc, #208]	; (8007934 <TIM_Base_SetConfig+0xe4>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d00f      	beq.n	8007888 <TIM_Base_SetConfig+0x38>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800786e:	d00b      	beq.n	8007888 <TIM_Base_SetConfig+0x38>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a31      	ldr	r2, [pc, #196]	; (8007938 <TIM_Base_SetConfig+0xe8>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d007      	beq.n	8007888 <TIM_Base_SetConfig+0x38>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a30      	ldr	r2, [pc, #192]	; (800793c <TIM_Base_SetConfig+0xec>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d003      	beq.n	8007888 <TIM_Base_SetConfig+0x38>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a2f      	ldr	r2, [pc, #188]	; (8007940 <TIM_Base_SetConfig+0xf0>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d108      	bne.n	800789a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800788e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	4313      	orrs	r3, r2
 8007898:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a25      	ldr	r2, [pc, #148]	; (8007934 <TIM_Base_SetConfig+0xe4>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d01b      	beq.n	80078da <TIM_Base_SetConfig+0x8a>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078a8:	d017      	beq.n	80078da <TIM_Base_SetConfig+0x8a>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a22      	ldr	r2, [pc, #136]	; (8007938 <TIM_Base_SetConfig+0xe8>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d013      	beq.n	80078da <TIM_Base_SetConfig+0x8a>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a21      	ldr	r2, [pc, #132]	; (800793c <TIM_Base_SetConfig+0xec>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d00f      	beq.n	80078da <TIM_Base_SetConfig+0x8a>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a20      	ldr	r2, [pc, #128]	; (8007940 <TIM_Base_SetConfig+0xf0>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d00b      	beq.n	80078da <TIM_Base_SetConfig+0x8a>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a1f      	ldr	r2, [pc, #124]	; (8007944 <TIM_Base_SetConfig+0xf4>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d007      	beq.n	80078da <TIM_Base_SetConfig+0x8a>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a1e      	ldr	r2, [pc, #120]	; (8007948 <TIM_Base_SetConfig+0xf8>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d003      	beq.n	80078da <TIM_Base_SetConfig+0x8a>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a1d      	ldr	r2, [pc, #116]	; (800794c <TIM_Base_SetConfig+0xfc>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d108      	bne.n	80078ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	689a      	ldr	r2, [r3, #8]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a08      	ldr	r2, [pc, #32]	; (8007934 <TIM_Base_SetConfig+0xe4>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d103      	bne.n	8007920 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	691a      	ldr	r2, [r3, #16]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	615a      	str	r2, [r3, #20]
}
 8007926:	bf00      	nop
 8007928:	3714      	adds	r7, #20
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	40010000 	.word	0x40010000
 8007938:	40000400 	.word	0x40000400
 800793c:	40000800 	.word	0x40000800
 8007940:	40000c00 	.word	0x40000c00
 8007944:	40014000 	.word	0x40014000
 8007948:	40014400 	.word	0x40014400
 800794c:	40014800 	.word	0x40014800

08007950 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007950:	b480      	push	{r7}
 8007952:	b087      	sub	sp, #28
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a1b      	ldr	r3, [r3, #32]
 800795e:	f023 0201 	bic.w	r2, r3, #1
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800797e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f023 0303 	bic.w	r3, r3, #3
 8007986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	4313      	orrs	r3, r2
 8007990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	f023 0302 	bic.w	r3, r3, #2
 8007998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	697a      	ldr	r2, [r7, #20]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a1c      	ldr	r2, [pc, #112]	; (8007a18 <TIM_OC1_SetConfig+0xc8>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d10c      	bne.n	80079c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	f023 0308 	bic.w	r3, r3, #8
 80079b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	697a      	ldr	r2, [r7, #20]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	f023 0304 	bic.w	r3, r3, #4
 80079c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a13      	ldr	r2, [pc, #76]	; (8007a18 <TIM_OC1_SetConfig+0xc8>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d111      	bne.n	80079f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	695b      	ldr	r3, [r3, #20]
 80079e2:	693a      	ldr	r2, [r7, #16]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	693a      	ldr	r2, [r7, #16]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	693a      	ldr	r2, [r7, #16]
 80079f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	685a      	ldr	r2, [r3, #4]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	697a      	ldr	r2, [r7, #20]
 8007a0a:	621a      	str	r2, [r3, #32]
}
 8007a0c:	bf00      	nop
 8007a0e:	371c      	adds	r7, #28
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr
 8007a18:	40010000 	.word	0x40010000

08007a1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b087      	sub	sp, #28
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a1b      	ldr	r3, [r3, #32]
 8007a2a:	f023 0210 	bic.w	r2, r3, #16
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	021b      	lsls	r3, r3, #8
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	f023 0320 	bic.w	r3, r3, #32
 8007a66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	011b      	lsls	r3, r3, #4
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a1e      	ldr	r2, [pc, #120]	; (8007af0 <TIM_OC2_SetConfig+0xd4>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d10d      	bne.n	8007a98 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	011b      	lsls	r3, r3, #4
 8007a8a:	697a      	ldr	r2, [r7, #20]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a15      	ldr	r2, [pc, #84]	; (8007af0 <TIM_OC2_SetConfig+0xd4>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d113      	bne.n	8007ac8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007aa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007aae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	695b      	ldr	r3, [r3, #20]
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	693a      	ldr	r2, [r7, #16]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	699b      	ldr	r3, [r3, #24]
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	693a      	ldr	r2, [r7, #16]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	693a      	ldr	r2, [r7, #16]
 8007acc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	685a      	ldr	r2, [r3, #4]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	621a      	str	r2, [r3, #32]
}
 8007ae2:	bf00      	nop
 8007ae4:	371c      	adds	r7, #28
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	40010000 	.word	0x40010000

08007af4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b087      	sub	sp, #28
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a1b      	ldr	r3, [r3, #32]
 8007b02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	69db      	ldr	r3, [r3, #28]
 8007b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f023 0303 	bic.w	r3, r3, #3
 8007b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	021b      	lsls	r3, r3, #8
 8007b44:	697a      	ldr	r2, [r7, #20]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a1d      	ldr	r2, [pc, #116]	; (8007bc4 <TIM_OC3_SetConfig+0xd0>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d10d      	bne.n	8007b6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	021b      	lsls	r3, r3, #8
 8007b60:	697a      	ldr	r2, [r7, #20]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a14      	ldr	r2, [pc, #80]	; (8007bc4 <TIM_OC3_SetConfig+0xd0>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d113      	bne.n	8007b9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	695b      	ldr	r3, [r3, #20]
 8007b8a:	011b      	lsls	r3, r3, #4
 8007b8c:	693a      	ldr	r2, [r7, #16]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	699b      	ldr	r3, [r3, #24]
 8007b96:	011b      	lsls	r3, r3, #4
 8007b98:	693a      	ldr	r2, [r7, #16]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	693a      	ldr	r2, [r7, #16]
 8007ba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	685a      	ldr	r2, [r3, #4]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	697a      	ldr	r2, [r7, #20]
 8007bb6:	621a      	str	r2, [r3, #32]
}
 8007bb8:	bf00      	nop
 8007bba:	371c      	adds	r7, #28
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr
 8007bc4:	40010000 	.word	0x40010000

08007bc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b087      	sub	sp, #28
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a1b      	ldr	r3, [r3, #32]
 8007bd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	69db      	ldr	r3, [r3, #28]
 8007bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	021b      	lsls	r3, r3, #8
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	031b      	lsls	r3, r3, #12
 8007c1a:	693a      	ldr	r2, [r7, #16]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4a10      	ldr	r2, [pc, #64]	; (8007c64 <TIM_OC4_SetConfig+0x9c>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d109      	bne.n	8007c3c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	695b      	ldr	r3, [r3, #20]
 8007c34:	019b      	lsls	r3, r3, #6
 8007c36:	697a      	ldr	r2, [r7, #20]
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	697a      	ldr	r2, [r7, #20]
 8007c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	693a      	ldr	r2, [r7, #16]
 8007c54:	621a      	str	r2, [r3, #32]
}
 8007c56:	bf00      	nop
 8007c58:	371c      	adds	r7, #28
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	40010000 	.word	0x40010000

08007c68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b087      	sub	sp, #28
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6a1b      	ldr	r3, [r3, #32]
 8007c78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	f023 0201 	bic.w	r2, r3, #1
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	011b      	lsls	r3, r3, #4
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	f023 030a 	bic.w	r3, r3, #10
 8007ca4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	697a      	ldr	r2, [r7, #20]
 8007cb8:	621a      	str	r2, [r3, #32]
}
 8007cba:	bf00      	nop
 8007cbc:	371c      	adds	r7, #28
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr

08007cc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	b087      	sub	sp, #28
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	60f8      	str	r0, [r7, #12]
 8007cce:	60b9      	str	r1, [r7, #8]
 8007cd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6a1b      	ldr	r3, [r3, #32]
 8007cd6:	f023 0210 	bic.w	r2, r3, #16
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6a1b      	ldr	r3, [r3, #32]
 8007ce8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007cf0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	031b      	lsls	r3, r3, #12
 8007cf6:	697a      	ldr	r2, [r7, #20]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	011b      	lsls	r3, r3, #4
 8007d08:	693a      	ldr	r2, [r7, #16]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	697a      	ldr	r2, [r7, #20]
 8007d12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	693a      	ldr	r2, [r7, #16]
 8007d18:	621a      	str	r2, [r3, #32]
}
 8007d1a:	bf00      	nop
 8007d1c:	371c      	adds	r7, #28
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d26:	b480      	push	{r7}
 8007d28:	b085      	sub	sp, #20
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d3e:	683a      	ldr	r2, [r7, #0]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	f043 0307 	orr.w	r3, r3, #7
 8007d48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	609a      	str	r2, [r3, #8]
}
 8007d50:	bf00      	nop
 8007d52:	3714      	adds	r7, #20
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
 8007d68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	021a      	lsls	r2, r3, #8
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	431a      	orrs	r2, r3
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	697a      	ldr	r2, [r7, #20]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	609a      	str	r2, [r3, #8]
}
 8007d90:	bf00      	nop
 8007d92:	371c      	adds	r7, #28
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b085      	sub	sp, #20
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d101      	bne.n	8007db4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007db0:	2302      	movs	r3, #2
 8007db2:	e050      	b.n	8007e56 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2202      	movs	r2, #2
 8007dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a1c      	ldr	r2, [pc, #112]	; (8007e64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d018      	beq.n	8007e2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e00:	d013      	beq.n	8007e2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a18      	ldr	r2, [pc, #96]	; (8007e68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d00e      	beq.n	8007e2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a16      	ldr	r2, [pc, #88]	; (8007e6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d009      	beq.n	8007e2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a15      	ldr	r2, [pc, #84]	; (8007e70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d004      	beq.n	8007e2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a13      	ldr	r2, [pc, #76]	; (8007e74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d10c      	bne.n	8007e44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	68ba      	ldr	r2, [r7, #8]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68ba      	ldr	r2, [r7, #8]
 8007e42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3714      	adds	r7, #20
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	40010000 	.word	0x40010000
 8007e68:	40000400 	.word	0x40000400
 8007e6c:	40000800 	.word	0x40000800
 8007e70:	40000c00 	.word	0x40000c00
 8007e74:	40014000 	.word	0x40014000

08007e78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d101      	bne.n	8007eb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e03f      	b.n	8007f32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d106      	bne.n	8007ecc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f005 fb0c 	bl	800d4e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2224      	movs	r2, #36	; 0x24
 8007ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	68da      	ldr	r2, [r3, #12]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ee2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f829 	bl	8007f3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	691a      	ldr	r2, [r3, #16]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ef8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	695a      	ldr	r2, [r3, #20]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	68da      	ldr	r2, [r3, #12]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2220      	movs	r2, #32
 8007f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2220      	movs	r2, #32
 8007f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3708      	adds	r7, #8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
	...

08007f3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f40:	b09f      	sub	sp, #124	; 0x7c
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f52:	68d9      	ldr	r1, [r3, #12]
 8007f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	ea40 0301 	orr.w	r3, r0, r1
 8007f5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f60:	689a      	ldr	r2, [r3, #8]
 8007f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	431a      	orrs	r2, r3
 8007f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	431a      	orrs	r2, r3
 8007f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f70:	69db      	ldr	r3, [r3, #28]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007f80:	f021 010c 	bic.w	r1, r1, #12
 8007f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f8a:	430b      	orrs	r3, r1
 8007f8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	695b      	ldr	r3, [r3, #20]
 8007f94:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f9a:	6999      	ldr	r1, [r3, #24]
 8007f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	ea40 0301 	orr.w	r3, r0, r1
 8007fa4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	4bc5      	ldr	r3, [pc, #788]	; (80082c0 <UART_SetConfig+0x384>)
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d004      	beq.n	8007fba <UART_SetConfig+0x7e>
 8007fb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	4bc3      	ldr	r3, [pc, #780]	; (80082c4 <UART_SetConfig+0x388>)
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d103      	bne.n	8007fc2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007fba:	f7fd ffa9 	bl	8005f10 <HAL_RCC_GetPCLK2Freq>
 8007fbe:	6778      	str	r0, [r7, #116]	; 0x74
 8007fc0:	e002      	b.n	8007fc8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007fc2:	f7fd ff91 	bl	8005ee8 <HAL_RCC_GetPCLK1Freq>
 8007fc6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fca:	69db      	ldr	r3, [r3, #28]
 8007fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fd0:	f040 80b6 	bne.w	8008140 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007fd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fd6:	461c      	mov	r4, r3
 8007fd8:	f04f 0500 	mov.w	r5, #0
 8007fdc:	4622      	mov	r2, r4
 8007fde:	462b      	mov	r3, r5
 8007fe0:	1891      	adds	r1, r2, r2
 8007fe2:	6439      	str	r1, [r7, #64]	; 0x40
 8007fe4:	415b      	adcs	r3, r3
 8007fe6:	647b      	str	r3, [r7, #68]	; 0x44
 8007fe8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007fec:	1912      	adds	r2, r2, r4
 8007fee:	eb45 0303 	adc.w	r3, r5, r3
 8007ff2:	f04f 0000 	mov.w	r0, #0
 8007ff6:	f04f 0100 	mov.w	r1, #0
 8007ffa:	00d9      	lsls	r1, r3, #3
 8007ffc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008000:	00d0      	lsls	r0, r2, #3
 8008002:	4602      	mov	r2, r0
 8008004:	460b      	mov	r3, r1
 8008006:	1911      	adds	r1, r2, r4
 8008008:	6639      	str	r1, [r7, #96]	; 0x60
 800800a:	416b      	adcs	r3, r5
 800800c:	667b      	str	r3, [r7, #100]	; 0x64
 800800e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	461a      	mov	r2, r3
 8008014:	f04f 0300 	mov.w	r3, #0
 8008018:	1891      	adds	r1, r2, r2
 800801a:	63b9      	str	r1, [r7, #56]	; 0x38
 800801c:	415b      	adcs	r3, r3
 800801e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008020:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008024:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008028:	f7f8 fdc6 	bl	8000bb8 <__aeabi_uldivmod>
 800802c:	4602      	mov	r2, r0
 800802e:	460b      	mov	r3, r1
 8008030:	4ba5      	ldr	r3, [pc, #660]	; (80082c8 <UART_SetConfig+0x38c>)
 8008032:	fba3 2302 	umull	r2, r3, r3, r2
 8008036:	095b      	lsrs	r3, r3, #5
 8008038:	011e      	lsls	r6, r3, #4
 800803a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800803c:	461c      	mov	r4, r3
 800803e:	f04f 0500 	mov.w	r5, #0
 8008042:	4622      	mov	r2, r4
 8008044:	462b      	mov	r3, r5
 8008046:	1891      	adds	r1, r2, r2
 8008048:	6339      	str	r1, [r7, #48]	; 0x30
 800804a:	415b      	adcs	r3, r3
 800804c:	637b      	str	r3, [r7, #52]	; 0x34
 800804e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008052:	1912      	adds	r2, r2, r4
 8008054:	eb45 0303 	adc.w	r3, r5, r3
 8008058:	f04f 0000 	mov.w	r0, #0
 800805c:	f04f 0100 	mov.w	r1, #0
 8008060:	00d9      	lsls	r1, r3, #3
 8008062:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008066:	00d0      	lsls	r0, r2, #3
 8008068:	4602      	mov	r2, r0
 800806a:	460b      	mov	r3, r1
 800806c:	1911      	adds	r1, r2, r4
 800806e:	65b9      	str	r1, [r7, #88]	; 0x58
 8008070:	416b      	adcs	r3, r5
 8008072:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	461a      	mov	r2, r3
 800807a:	f04f 0300 	mov.w	r3, #0
 800807e:	1891      	adds	r1, r2, r2
 8008080:	62b9      	str	r1, [r7, #40]	; 0x28
 8008082:	415b      	adcs	r3, r3
 8008084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008086:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800808a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800808e:	f7f8 fd93 	bl	8000bb8 <__aeabi_uldivmod>
 8008092:	4602      	mov	r2, r0
 8008094:	460b      	mov	r3, r1
 8008096:	4b8c      	ldr	r3, [pc, #560]	; (80082c8 <UART_SetConfig+0x38c>)
 8008098:	fba3 1302 	umull	r1, r3, r3, r2
 800809c:	095b      	lsrs	r3, r3, #5
 800809e:	2164      	movs	r1, #100	; 0x64
 80080a0:	fb01 f303 	mul.w	r3, r1, r3
 80080a4:	1ad3      	subs	r3, r2, r3
 80080a6:	00db      	lsls	r3, r3, #3
 80080a8:	3332      	adds	r3, #50	; 0x32
 80080aa:	4a87      	ldr	r2, [pc, #540]	; (80082c8 <UART_SetConfig+0x38c>)
 80080ac:	fba2 2303 	umull	r2, r3, r2, r3
 80080b0:	095b      	lsrs	r3, r3, #5
 80080b2:	005b      	lsls	r3, r3, #1
 80080b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80080b8:	441e      	add	r6, r3
 80080ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080bc:	4618      	mov	r0, r3
 80080be:	f04f 0100 	mov.w	r1, #0
 80080c2:	4602      	mov	r2, r0
 80080c4:	460b      	mov	r3, r1
 80080c6:	1894      	adds	r4, r2, r2
 80080c8:	623c      	str	r4, [r7, #32]
 80080ca:	415b      	adcs	r3, r3
 80080cc:	627b      	str	r3, [r7, #36]	; 0x24
 80080ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80080d2:	1812      	adds	r2, r2, r0
 80080d4:	eb41 0303 	adc.w	r3, r1, r3
 80080d8:	f04f 0400 	mov.w	r4, #0
 80080dc:	f04f 0500 	mov.w	r5, #0
 80080e0:	00dd      	lsls	r5, r3, #3
 80080e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80080e6:	00d4      	lsls	r4, r2, #3
 80080e8:	4622      	mov	r2, r4
 80080ea:	462b      	mov	r3, r5
 80080ec:	1814      	adds	r4, r2, r0
 80080ee:	653c      	str	r4, [r7, #80]	; 0x50
 80080f0:	414b      	adcs	r3, r1
 80080f2:	657b      	str	r3, [r7, #84]	; 0x54
 80080f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	461a      	mov	r2, r3
 80080fa:	f04f 0300 	mov.w	r3, #0
 80080fe:	1891      	adds	r1, r2, r2
 8008100:	61b9      	str	r1, [r7, #24]
 8008102:	415b      	adcs	r3, r3
 8008104:	61fb      	str	r3, [r7, #28]
 8008106:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800810a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800810e:	f7f8 fd53 	bl	8000bb8 <__aeabi_uldivmod>
 8008112:	4602      	mov	r2, r0
 8008114:	460b      	mov	r3, r1
 8008116:	4b6c      	ldr	r3, [pc, #432]	; (80082c8 <UART_SetConfig+0x38c>)
 8008118:	fba3 1302 	umull	r1, r3, r3, r2
 800811c:	095b      	lsrs	r3, r3, #5
 800811e:	2164      	movs	r1, #100	; 0x64
 8008120:	fb01 f303 	mul.w	r3, r1, r3
 8008124:	1ad3      	subs	r3, r2, r3
 8008126:	00db      	lsls	r3, r3, #3
 8008128:	3332      	adds	r3, #50	; 0x32
 800812a:	4a67      	ldr	r2, [pc, #412]	; (80082c8 <UART_SetConfig+0x38c>)
 800812c:	fba2 2303 	umull	r2, r3, r2, r3
 8008130:	095b      	lsrs	r3, r3, #5
 8008132:	f003 0207 	and.w	r2, r3, #7
 8008136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4432      	add	r2, r6
 800813c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800813e:	e0b9      	b.n	80082b4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008140:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008142:	461c      	mov	r4, r3
 8008144:	f04f 0500 	mov.w	r5, #0
 8008148:	4622      	mov	r2, r4
 800814a:	462b      	mov	r3, r5
 800814c:	1891      	adds	r1, r2, r2
 800814e:	6139      	str	r1, [r7, #16]
 8008150:	415b      	adcs	r3, r3
 8008152:	617b      	str	r3, [r7, #20]
 8008154:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008158:	1912      	adds	r2, r2, r4
 800815a:	eb45 0303 	adc.w	r3, r5, r3
 800815e:	f04f 0000 	mov.w	r0, #0
 8008162:	f04f 0100 	mov.w	r1, #0
 8008166:	00d9      	lsls	r1, r3, #3
 8008168:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800816c:	00d0      	lsls	r0, r2, #3
 800816e:	4602      	mov	r2, r0
 8008170:	460b      	mov	r3, r1
 8008172:	eb12 0804 	adds.w	r8, r2, r4
 8008176:	eb43 0905 	adc.w	r9, r3, r5
 800817a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	4618      	mov	r0, r3
 8008180:	f04f 0100 	mov.w	r1, #0
 8008184:	f04f 0200 	mov.w	r2, #0
 8008188:	f04f 0300 	mov.w	r3, #0
 800818c:	008b      	lsls	r3, r1, #2
 800818e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008192:	0082      	lsls	r2, r0, #2
 8008194:	4640      	mov	r0, r8
 8008196:	4649      	mov	r1, r9
 8008198:	f7f8 fd0e 	bl	8000bb8 <__aeabi_uldivmod>
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	4b49      	ldr	r3, [pc, #292]	; (80082c8 <UART_SetConfig+0x38c>)
 80081a2:	fba3 2302 	umull	r2, r3, r3, r2
 80081a6:	095b      	lsrs	r3, r3, #5
 80081a8:	011e      	lsls	r6, r3, #4
 80081aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081ac:	4618      	mov	r0, r3
 80081ae:	f04f 0100 	mov.w	r1, #0
 80081b2:	4602      	mov	r2, r0
 80081b4:	460b      	mov	r3, r1
 80081b6:	1894      	adds	r4, r2, r2
 80081b8:	60bc      	str	r4, [r7, #8]
 80081ba:	415b      	adcs	r3, r3
 80081bc:	60fb      	str	r3, [r7, #12]
 80081be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80081c2:	1812      	adds	r2, r2, r0
 80081c4:	eb41 0303 	adc.w	r3, r1, r3
 80081c8:	f04f 0400 	mov.w	r4, #0
 80081cc:	f04f 0500 	mov.w	r5, #0
 80081d0:	00dd      	lsls	r5, r3, #3
 80081d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80081d6:	00d4      	lsls	r4, r2, #3
 80081d8:	4622      	mov	r2, r4
 80081da:	462b      	mov	r3, r5
 80081dc:	1814      	adds	r4, r2, r0
 80081de:	64bc      	str	r4, [r7, #72]	; 0x48
 80081e0:	414b      	adcs	r3, r1
 80081e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	4618      	mov	r0, r3
 80081ea:	f04f 0100 	mov.w	r1, #0
 80081ee:	f04f 0200 	mov.w	r2, #0
 80081f2:	f04f 0300 	mov.w	r3, #0
 80081f6:	008b      	lsls	r3, r1, #2
 80081f8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80081fc:	0082      	lsls	r2, r0, #2
 80081fe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008202:	f7f8 fcd9 	bl	8000bb8 <__aeabi_uldivmod>
 8008206:	4602      	mov	r2, r0
 8008208:	460b      	mov	r3, r1
 800820a:	4b2f      	ldr	r3, [pc, #188]	; (80082c8 <UART_SetConfig+0x38c>)
 800820c:	fba3 1302 	umull	r1, r3, r3, r2
 8008210:	095b      	lsrs	r3, r3, #5
 8008212:	2164      	movs	r1, #100	; 0x64
 8008214:	fb01 f303 	mul.w	r3, r1, r3
 8008218:	1ad3      	subs	r3, r2, r3
 800821a:	011b      	lsls	r3, r3, #4
 800821c:	3332      	adds	r3, #50	; 0x32
 800821e:	4a2a      	ldr	r2, [pc, #168]	; (80082c8 <UART_SetConfig+0x38c>)
 8008220:	fba2 2303 	umull	r2, r3, r2, r3
 8008224:	095b      	lsrs	r3, r3, #5
 8008226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800822a:	441e      	add	r6, r3
 800822c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800822e:	4618      	mov	r0, r3
 8008230:	f04f 0100 	mov.w	r1, #0
 8008234:	4602      	mov	r2, r0
 8008236:	460b      	mov	r3, r1
 8008238:	1894      	adds	r4, r2, r2
 800823a:	603c      	str	r4, [r7, #0]
 800823c:	415b      	adcs	r3, r3
 800823e:	607b      	str	r3, [r7, #4]
 8008240:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008244:	1812      	adds	r2, r2, r0
 8008246:	eb41 0303 	adc.w	r3, r1, r3
 800824a:	f04f 0400 	mov.w	r4, #0
 800824e:	f04f 0500 	mov.w	r5, #0
 8008252:	00dd      	lsls	r5, r3, #3
 8008254:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008258:	00d4      	lsls	r4, r2, #3
 800825a:	4622      	mov	r2, r4
 800825c:	462b      	mov	r3, r5
 800825e:	eb12 0a00 	adds.w	sl, r2, r0
 8008262:	eb43 0b01 	adc.w	fp, r3, r1
 8008266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	4618      	mov	r0, r3
 800826c:	f04f 0100 	mov.w	r1, #0
 8008270:	f04f 0200 	mov.w	r2, #0
 8008274:	f04f 0300 	mov.w	r3, #0
 8008278:	008b      	lsls	r3, r1, #2
 800827a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800827e:	0082      	lsls	r2, r0, #2
 8008280:	4650      	mov	r0, sl
 8008282:	4659      	mov	r1, fp
 8008284:	f7f8 fc98 	bl	8000bb8 <__aeabi_uldivmod>
 8008288:	4602      	mov	r2, r0
 800828a:	460b      	mov	r3, r1
 800828c:	4b0e      	ldr	r3, [pc, #56]	; (80082c8 <UART_SetConfig+0x38c>)
 800828e:	fba3 1302 	umull	r1, r3, r3, r2
 8008292:	095b      	lsrs	r3, r3, #5
 8008294:	2164      	movs	r1, #100	; 0x64
 8008296:	fb01 f303 	mul.w	r3, r1, r3
 800829a:	1ad3      	subs	r3, r2, r3
 800829c:	011b      	lsls	r3, r3, #4
 800829e:	3332      	adds	r3, #50	; 0x32
 80082a0:	4a09      	ldr	r2, [pc, #36]	; (80082c8 <UART_SetConfig+0x38c>)
 80082a2:	fba2 2303 	umull	r2, r3, r2, r3
 80082a6:	095b      	lsrs	r3, r3, #5
 80082a8:	f003 020f 	and.w	r2, r3, #15
 80082ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4432      	add	r2, r6
 80082b2:	609a      	str	r2, [r3, #8]
}
 80082b4:	bf00      	nop
 80082b6:	377c      	adds	r7, #124	; 0x7c
 80082b8:	46bd      	mov	sp, r7
 80082ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082be:	bf00      	nop
 80082c0:	40011000 	.word	0x40011000
 80082c4:	40011400 	.word	0x40011400
 80082c8:	51eb851f 	.word	0x51eb851f

080082cc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80082cc:	b084      	sub	sp, #16
 80082ce:	b480      	push	{r7}
 80082d0:	b085      	sub	sp, #20
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
 80082d6:	f107 001c 	add.w	r0, r7, #28
 80082da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80082de:	2300      	movs	r3, #0
 80082e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80082e2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80082e4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80082e6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80082e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80082ea:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80082ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80082ee:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80082f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80082f2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80082f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80082f6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80082f8:	68fa      	ldr	r2, [r7, #12]
 80082fa:	4313      	orrs	r3, r2
 80082fc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008306:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	431a      	orrs	r2, r3
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3714      	adds	r7, #20
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	b004      	add	sp, #16
 8008320:	4770      	bx	lr

08008322 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008322:	b480      	push	{r7}
 8008324:	b083      	sub	sp, #12
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008330:	4618      	mov	r0, r3
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2203      	movs	r2, #3
 8008348:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800834a:	2002      	movs	r0, #2
 800834c:	f7f8 ff82 	bl	8001254 <HAL_Delay>
  
  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3708      	adds	r7, #8
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800835a:	b480      	push	{r7}
 800835c:	b083      	sub	sp, #12
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f003 0303 	and.w	r3, r3, #3
}
 800836a:	4618      	mov	r0, r3
 800836c:	370c      	adds	r7, #12
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr

08008376 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008376:	b480      	push	{r7}
 8008378:	b085      	sub	sp, #20
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
 800837e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008380:	2300      	movs	r3, #0
 8008382:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008394:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800839a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80083a0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80083b0:	f023 030f 	bic.w	r3, r3, #15
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	431a      	orrs	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3714      	adds	r7, #20
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr

080083ca <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80083ca:	b480      	push	{r7}
 80083cc:	b083      	sub	sp, #12
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	b2db      	uxtb	r3, r3
}
 80083d8:	4618      	mov	r0, r3
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	3314      	adds	r3, #20
 80083f2:	461a      	mov	r2, r3
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	4413      	add	r3, r2
 80083f8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
}  
 80083fe:	4618      	mov	r0, r3
 8008400:	3714      	adds	r7, #20
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr

0800840a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800840a:	b480      	push	{r7}
 800840c:	b085      	sub	sp, #20
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
 8008412:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008414:	2300      	movs	r3, #0
 8008416:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	685a      	ldr	r2, [r3, #4]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008430:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008436:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800843c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	4313      	orrs	r3, r2
 8008442:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008448:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	431a      	orrs	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008454:	2300      	movs	r3, #0

}
 8008456:	4618      	mov	r0, r3
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008462:	b580      	push	{r7, lr}
 8008464:	b088      	sub	sp, #32
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
 800846a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008470:	2310      	movs	r3, #16
 8008472:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008474:	2340      	movs	r3, #64	; 0x40
 8008476:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008478:	2300      	movs	r3, #0
 800847a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800847c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008480:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008482:	f107 0308 	add.w	r3, r7, #8
 8008486:	4619      	mov	r1, r3
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f7ff ff74 	bl	8008376 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800848e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008492:	2110      	movs	r1, #16
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 f979 	bl	800878c <SDMMC_GetCmdResp1>
 800849a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800849c:	69fb      	ldr	r3, [r7, #28]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3720      	adds	r7, #32
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b08a      	sub	sp, #40	; 0x28
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	60f8      	str	r0, [r7, #12]
 80084ae:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80084b6:	2307      	movs	r3, #7
 80084b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80084ba:	2340      	movs	r3, #64	; 0x40
 80084bc:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80084be:	2300      	movs	r3, #0
 80084c0:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80084c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084c6:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80084c8:	f107 0310 	add.w	r3, r7, #16
 80084cc:	4619      	mov	r1, r3
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f7ff ff51 	bl	8008376 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80084d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80084d8:	2107      	movs	r1, #7
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f000 f956 	bl	800878c <SDMMC_GetCmdResp1>
 80084e0:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80084e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3728      	adds	r7, #40	; 0x28
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b088      	sub	sp, #32
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80084f4:	2300      	movs	r3, #0
 80084f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80084f8:	2300      	movs	r3, #0
 80084fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80084fc:	2300      	movs	r3, #0
 80084fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008500:	2300      	movs	r3, #0
 8008502:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008504:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008508:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800850a:	f107 0308 	add.w	r3, r7, #8
 800850e:	4619      	mov	r1, r3
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f7ff ff30 	bl	8008376 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 f90c 	bl	8008734 <SDMMC_GetCmdError>
 800851c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800851e:	69fb      	ldr	r3, [r7, #28]
}
 8008520:	4618      	mov	r0, r3
 8008522:	3720      	adds	r7, #32
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b088      	sub	sp, #32
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008530:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008534:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008536:	2308      	movs	r3, #8
 8008538:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800853a:	2340      	movs	r3, #64	; 0x40
 800853c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800853e:	2300      	movs	r3, #0
 8008540:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008546:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008548:	f107 0308 	add.w	r3, r7, #8
 800854c:	4619      	mov	r1, r3
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f7ff ff11 	bl	8008376 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 fb03 	bl	8008b60 <SDMMC_GetCmdResp7>
 800855a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800855c:	69fb      	ldr	r3, [r7, #28]
}
 800855e:	4618      	mov	r0, r3
 8008560:	3720      	adds	r7, #32
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b088      	sub	sp, #32
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
 800856e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008574:	2337      	movs	r3, #55	; 0x37
 8008576:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008578:	2340      	movs	r3, #64	; 0x40
 800857a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800857c:	2300      	movs	r3, #0
 800857e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008584:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008586:	f107 0308 	add.w	r3, r7, #8
 800858a:	4619      	mov	r1, r3
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f7ff fef2 	bl	8008376 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008592:	f241 3288 	movw	r2, #5000	; 0x1388
 8008596:	2137      	movs	r1, #55	; 0x37
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 f8f7 	bl	800878c <SDMMC_GetCmdResp1>
 800859e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085a0:	69fb      	ldr	r3, [r7, #28]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3720      	adds	r7, #32
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b088      	sub	sp, #32
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
 80085b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80085c0:	2329      	movs	r3, #41	; 0x29
 80085c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80085c4:	2340      	movs	r3, #64	; 0x40
 80085c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80085c8:	2300      	movs	r3, #0
 80085ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80085cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80085d2:	f107 0308 	add.w	r3, r7, #8
 80085d6:	4619      	mov	r1, r3
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f7ff fecc 	bl	8008376 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fa0a 	bl	80089f8 <SDMMC_GetCmdResp3>
 80085e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085e6:	69fb      	ldr	r3, [r7, #28]
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3720      	adds	r7, #32
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b088      	sub	sp, #32
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80085fe:	2306      	movs	r3, #6
 8008600:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008602:	2340      	movs	r3, #64	; 0x40
 8008604:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008606:	2300      	movs	r3, #0
 8008608:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800860a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800860e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008610:	f107 0308 	add.w	r3, r7, #8
 8008614:	4619      	mov	r1, r3
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f7ff fead 	bl	8008376 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800861c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008620:	2106      	movs	r1, #6
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f8b2 	bl	800878c <SDMMC_GetCmdResp1>
 8008628:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800862a:	69fb      	ldr	r3, [r7, #28]
}
 800862c:	4618      	mov	r0, r3
 800862e:	3720      	adds	r7, #32
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b088      	sub	sp, #32
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800863c:	2300      	movs	r3, #0
 800863e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008640:	2333      	movs	r3, #51	; 0x33
 8008642:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008644:	2340      	movs	r3, #64	; 0x40
 8008646:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008648:	2300      	movs	r3, #0
 800864a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800864c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008650:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008652:	f107 0308 	add.w	r3, r7, #8
 8008656:	4619      	mov	r1, r3
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f7ff fe8c 	bl	8008376 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800865e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008662:	2133      	movs	r1, #51	; 0x33
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 f891 	bl	800878c <SDMMC_GetCmdResp1>
 800866a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800866c:	69fb      	ldr	r3, [r7, #28]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3720      	adds	r7, #32
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b088      	sub	sp, #32
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800867e:	2300      	movs	r3, #0
 8008680:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008682:	2302      	movs	r3, #2
 8008684:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008686:	23c0      	movs	r3, #192	; 0xc0
 8008688:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800868a:	2300      	movs	r3, #0
 800868c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800868e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008692:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008694:	f107 0308 	add.w	r3, r7, #8
 8008698:	4619      	mov	r1, r3
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f7ff fe6b 	bl	8008376 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 f961 	bl	8008968 <SDMMC_GetCmdResp2>
 80086a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086a8:	69fb      	ldr	r3, [r7, #28]
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3720      	adds	r7, #32
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}

080086b2 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80086b2:	b580      	push	{r7, lr}
 80086b4:	b088      	sub	sp, #32
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
 80086ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80086c0:	2309      	movs	r3, #9
 80086c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80086c4:	23c0      	movs	r3, #192	; 0xc0
 80086c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80086c8:	2300      	movs	r3, #0
 80086ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80086cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80086d2:	f107 0308 	add.w	r3, r7, #8
 80086d6:	4619      	mov	r1, r3
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f7ff fe4c 	bl	8008376 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 f942 	bl	8008968 <SDMMC_GetCmdResp2>
 80086e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086e6:	69fb      	ldr	r3, [r7, #28]
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3720      	adds	r7, #32
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b088      	sub	sp, #32
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80086fa:	2300      	movs	r3, #0
 80086fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80086fe:	2303      	movs	r3, #3
 8008700:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008702:	2340      	movs	r3, #64	; 0x40
 8008704:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008706:	2300      	movs	r3, #0
 8008708:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800870a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800870e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008710:	f107 0308 	add.w	r3, r7, #8
 8008714:	4619      	mov	r1, r3
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f7ff fe2d 	bl	8008376 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800871c:	683a      	ldr	r2, [r7, #0]
 800871e:	2103      	movs	r1, #3
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 f9a7 	bl	8008a74 <SDMMC_GetCmdResp6>
 8008726:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008728:	69fb      	ldr	r3, [r7, #28]
}
 800872a:	4618      	mov	r0, r3
 800872c:	3720      	adds	r7, #32
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
	...

08008734 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800873c:	4b11      	ldr	r3, [pc, #68]	; (8008784 <SDMMC_GetCmdError+0x50>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a11      	ldr	r2, [pc, #68]	; (8008788 <SDMMC_GetCmdError+0x54>)
 8008742:	fba2 2303 	umull	r2, r3, r2, r3
 8008746:	0a5b      	lsrs	r3, r3, #9
 8008748:	f241 3288 	movw	r2, #5000	; 0x1388
 800874c:	fb02 f303 	mul.w	r3, r2, r3
 8008750:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	1e5a      	subs	r2, r3, #1
 8008756:	60fa      	str	r2, [r7, #12]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d102      	bne.n	8008762 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800875c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008760:	e009      	b.n	8008776 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800876a:	2b00      	cmp	r3, #0
 800876c:	d0f1      	beq.n	8008752 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	22c5      	movs	r2, #197	; 0xc5
 8008772:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3714      	adds	r7, #20
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	20000118 	.word	0x20000118
 8008788:	10624dd3 	.word	0x10624dd3

0800878c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b088      	sub	sp, #32
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	460b      	mov	r3, r1
 8008796:	607a      	str	r2, [r7, #4]
 8008798:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800879a:	4b70      	ldr	r3, [pc, #448]	; (800895c <SDMMC_GetCmdResp1+0x1d0>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a70      	ldr	r2, [pc, #448]	; (8008960 <SDMMC_GetCmdResp1+0x1d4>)
 80087a0:	fba2 2303 	umull	r2, r3, r2, r3
 80087a4:	0a5a      	lsrs	r2, r3, #9
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	fb02 f303 	mul.w	r3, r2, r3
 80087ac:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	1e5a      	subs	r2, r3, #1
 80087b2:	61fa      	str	r2, [r7, #28]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d102      	bne.n	80087be <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80087b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80087bc:	e0c9      	b.n	8008952 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087c2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d0ef      	beq.n	80087ae <SDMMC_GetCmdResp1+0x22>
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1ea      	bne.n	80087ae <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087dc:	f003 0304 	and.w	r3, r3, #4
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d004      	beq.n	80087ee <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2204      	movs	r2, #4
 80087e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80087ea:	2304      	movs	r3, #4
 80087ec:	e0b1      	b.n	8008952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087f2:	f003 0301 	and.w	r3, r3, #1
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d004      	beq.n	8008804 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2201      	movs	r2, #1
 80087fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008800:	2301      	movs	r3, #1
 8008802:	e0a6      	b.n	8008952 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	22c5      	movs	r2, #197	; 0xc5
 8008808:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f7ff fddd 	bl	80083ca <SDIO_GetCommandResponse>
 8008810:	4603      	mov	r3, r0
 8008812:	461a      	mov	r2, r3
 8008814:	7afb      	ldrb	r3, [r7, #11]
 8008816:	4293      	cmp	r3, r2
 8008818:	d001      	beq.n	800881e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800881a:	2301      	movs	r3, #1
 800881c:	e099      	b.n	8008952 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800881e:	2100      	movs	r1, #0
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f7ff fddf 	bl	80083e4 <SDIO_GetResponse>
 8008826:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008828:	697a      	ldr	r2, [r7, #20]
 800882a:	4b4e      	ldr	r3, [pc, #312]	; (8008964 <SDMMC_GetCmdResp1+0x1d8>)
 800882c:	4013      	ands	r3, r2
 800882e:	2b00      	cmp	r3, #0
 8008830:	d101      	bne.n	8008836 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008832:	2300      	movs	r3, #0
 8008834:	e08d      	b.n	8008952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	2b00      	cmp	r3, #0
 800883a:	da02      	bge.n	8008842 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800883c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008840:	e087      	b.n	8008952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008848:	2b00      	cmp	r3, #0
 800884a:	d001      	beq.n	8008850 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800884c:	2340      	movs	r3, #64	; 0x40
 800884e:	e080      	b.n	8008952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008856:	2b00      	cmp	r3, #0
 8008858:	d001      	beq.n	800885e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800885a:	2380      	movs	r3, #128	; 0x80
 800885c:	e079      	b.n	8008952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d002      	beq.n	800886e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008868:	f44f 7380 	mov.w	r3, #256	; 0x100
 800886c:	e071      	b.n	8008952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008874:	2b00      	cmp	r3, #0
 8008876:	d002      	beq.n	800887e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800887c:	e069      	b.n	8008952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008884:	2b00      	cmp	r3, #0
 8008886:	d002      	beq.n	800888e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008888:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800888c:	e061      	b.n	8008952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008894:	2b00      	cmp	r3, #0
 8008896:	d002      	beq.n	800889e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008898:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800889c:	e059      	b.n	8008952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d002      	beq.n	80088ae <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80088a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088ac:	e051      	b.n	8008952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d002      	beq.n	80088be <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80088b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80088bc:	e049      	b.n	8008952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d002      	beq.n	80088ce <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80088c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80088cc:	e041      	b.n	8008952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d002      	beq.n	80088de <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80088d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088dc:	e039      	b.n	8008952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d002      	beq.n	80088ee <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80088e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80088ec:	e031      	b.n	8008952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d002      	beq.n	80088fe <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80088f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80088fc:	e029      	b.n	8008952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008904:	2b00      	cmp	r3, #0
 8008906:	d002      	beq.n	800890e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008908:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800890c:	e021      	b.n	8008952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008914:	2b00      	cmp	r3, #0
 8008916:	d002      	beq.n	800891e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008918:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800891c:	e019      	b.n	8008952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008924:	2b00      	cmp	r3, #0
 8008926:	d002      	beq.n	800892e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008928:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800892c:	e011      	b.n	8008952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008934:	2b00      	cmp	r3, #0
 8008936:	d002      	beq.n	800893e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008938:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800893c:	e009      	b.n	8008952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	f003 0308 	and.w	r3, r3, #8
 8008944:	2b00      	cmp	r3, #0
 8008946:	d002      	beq.n	800894e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008948:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800894c:	e001      	b.n	8008952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800894e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008952:	4618      	mov	r0, r3
 8008954:	3720      	adds	r7, #32
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
 800895a:	bf00      	nop
 800895c:	20000118 	.word	0x20000118
 8008960:	10624dd3 	.word	0x10624dd3
 8008964:	fdffe008 	.word	0xfdffe008

08008968 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008970:	4b1f      	ldr	r3, [pc, #124]	; (80089f0 <SDMMC_GetCmdResp2+0x88>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a1f      	ldr	r2, [pc, #124]	; (80089f4 <SDMMC_GetCmdResp2+0x8c>)
 8008976:	fba2 2303 	umull	r2, r3, r2, r3
 800897a:	0a5b      	lsrs	r3, r3, #9
 800897c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008980:	fb02 f303 	mul.w	r3, r2, r3
 8008984:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	1e5a      	subs	r2, r3, #1
 800898a:	60fa      	str	r2, [r7, #12]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d102      	bne.n	8008996 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008990:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008994:	e026      	b.n	80089e4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800899a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d0ef      	beq.n	8008986 <SDMMC_GetCmdResp2+0x1e>
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1ea      	bne.n	8008986 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089b4:	f003 0304 	and.w	r3, r3, #4
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d004      	beq.n	80089c6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2204      	movs	r2, #4
 80089c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80089c2:	2304      	movs	r3, #4
 80089c4:	e00e      	b.n	80089e4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ca:	f003 0301 	and.w	r3, r3, #1
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d004      	beq.n	80089dc <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2201      	movs	r2, #1
 80089d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80089d8:	2301      	movs	r3, #1
 80089da:	e003      	b.n	80089e4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	22c5      	movs	r2, #197	; 0xc5
 80089e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3714      	adds	r7, #20
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr
 80089f0:	20000118 	.word	0x20000118
 80089f4:	10624dd3 	.word	0x10624dd3

080089f8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008a00:	4b1a      	ldr	r3, [pc, #104]	; (8008a6c <SDMMC_GetCmdResp3+0x74>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a1a      	ldr	r2, [pc, #104]	; (8008a70 <SDMMC_GetCmdResp3+0x78>)
 8008a06:	fba2 2303 	umull	r2, r3, r2, r3
 8008a0a:	0a5b      	lsrs	r3, r3, #9
 8008a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a10:	fb02 f303 	mul.w	r3, r2, r3
 8008a14:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	1e5a      	subs	r2, r3, #1
 8008a1a:	60fa      	str	r2, [r7, #12]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d102      	bne.n	8008a26 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008a20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a24:	e01b      	b.n	8008a5e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a2a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d0ef      	beq.n	8008a16 <SDMMC_GetCmdResp3+0x1e>
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1ea      	bne.n	8008a16 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a44:	f003 0304 	and.w	r3, r3, #4
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d004      	beq.n	8008a56 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2204      	movs	r2, #4
 8008a50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008a52:	2304      	movs	r3, #4
 8008a54:	e003      	b.n	8008a5e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	22c5      	movs	r2, #197	; 0xc5
 8008a5a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3714      	adds	r7, #20
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	20000118 	.word	0x20000118
 8008a70:	10624dd3 	.word	0x10624dd3

08008a74 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b088      	sub	sp, #32
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	607a      	str	r2, [r7, #4]
 8008a80:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008a82:	4b35      	ldr	r3, [pc, #212]	; (8008b58 <SDMMC_GetCmdResp6+0xe4>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a35      	ldr	r2, [pc, #212]	; (8008b5c <SDMMC_GetCmdResp6+0xe8>)
 8008a88:	fba2 2303 	umull	r2, r3, r2, r3
 8008a8c:	0a5b      	lsrs	r3, r3, #9
 8008a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a92:	fb02 f303 	mul.w	r3, r2, r3
 8008a96:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	1e5a      	subs	r2, r3, #1
 8008a9c:	61fa      	str	r2, [r7, #28]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d102      	bne.n	8008aa8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008aa2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008aa6:	e052      	b.n	8008b4e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aac:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d0ef      	beq.n	8008a98 <SDMMC_GetCmdResp6+0x24>
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1ea      	bne.n	8008a98 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ac6:	f003 0304 	and.w	r3, r3, #4
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d004      	beq.n	8008ad8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2204      	movs	r2, #4
 8008ad2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008ad4:	2304      	movs	r3, #4
 8008ad6:	e03a      	b.n	8008b4e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008adc:	f003 0301 	and.w	r3, r3, #1
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d004      	beq.n	8008aee <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008aea:	2301      	movs	r3, #1
 8008aec:	e02f      	b.n	8008b4e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f7ff fc6b 	bl	80083ca <SDIO_GetCommandResponse>
 8008af4:	4603      	mov	r3, r0
 8008af6:	461a      	mov	r2, r3
 8008af8:	7afb      	ldrb	r3, [r7, #11]
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d001      	beq.n	8008b02 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e025      	b.n	8008b4e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	22c5      	movs	r2, #197	; 0xc5
 8008b06:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008b08:	2100      	movs	r1, #0
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	f7ff fc6a 	bl	80083e4 <SDIO_GetResponse>
 8008b10:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d106      	bne.n	8008b2a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	0c1b      	lsrs	r3, r3, #16
 8008b20:	b29a      	uxth	r2, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008b26:	2300      	movs	r3, #0
 8008b28:	e011      	b.n	8008b4e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d002      	beq.n	8008b3a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008b34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b38:	e009      	b.n	8008b4e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d002      	beq.n	8008b4a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008b44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b48:	e001      	b.n	8008b4e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008b4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3720      	adds	r7, #32
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	20000118 	.word	0x20000118
 8008b5c:	10624dd3 	.word	0x10624dd3

08008b60 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008b68:	4b22      	ldr	r3, [pc, #136]	; (8008bf4 <SDMMC_GetCmdResp7+0x94>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a22      	ldr	r2, [pc, #136]	; (8008bf8 <SDMMC_GetCmdResp7+0x98>)
 8008b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b72:	0a5b      	lsrs	r3, r3, #9
 8008b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b78:	fb02 f303 	mul.w	r3, r2, r3
 8008b7c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	1e5a      	subs	r2, r3, #1
 8008b82:	60fa      	str	r2, [r7, #12]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d102      	bne.n	8008b8e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008b88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b8c:	e02c      	b.n	8008be8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b92:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d0ef      	beq.n	8008b7e <SDMMC_GetCmdResp7+0x1e>
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d1ea      	bne.n	8008b7e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bac:	f003 0304 	and.w	r3, r3, #4
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d004      	beq.n	8008bbe <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2204      	movs	r2, #4
 8008bb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008bba:	2304      	movs	r3, #4
 8008bbc:	e014      	b.n	8008be8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bc2:	f003 0301 	and.w	r3, r3, #1
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d004      	beq.n	8008bd4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e009      	b.n	8008be8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d002      	beq.n	8008be6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2240      	movs	r2, #64	; 0x40
 8008be4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008be6:	2300      	movs	r3, #0
  
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3714      	adds	r7, #20
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr
 8008bf4:	20000118 	.word	0x20000118
 8008bf8:	10624dd3 	.word	0x10624dd3

08008bfc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008bfc:	b084      	sub	sp, #16
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b084      	sub	sp, #16
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
 8008c06:	f107 001c 	add.w	r0, r7, #28
 8008c0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d122      	bne.n	8008c5a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008c28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d105      	bne.n	8008c4e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f001 fb1c 	bl	800a28c <USB_CoreReset>
 8008c54:	4603      	mov	r3, r0
 8008c56:	73fb      	strb	r3, [r7, #15]
 8008c58:	e01a      	b.n	8008c90 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f001 fb10 	bl	800a28c <USB_CoreReset>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d106      	bne.n	8008c84 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	639a      	str	r2, [r3, #56]	; 0x38
 8008c82:	e005      	b.n	8008c90 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d10b      	bne.n	8008cae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	f043 0206 	orr.w	r2, r3, #6
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	f043 0220 	orr.w	r2, r3, #32
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3710      	adds	r7, #16
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008cba:	b004      	add	sp, #16
 8008cbc:	4770      	bx	lr
	...

08008cc0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b087      	sub	sp, #28
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	4613      	mov	r3, r2
 8008ccc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008cce:	79fb      	ldrb	r3, [r7, #7]
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d165      	bne.n	8008da0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	4a41      	ldr	r2, [pc, #260]	; (8008ddc <USB_SetTurnaroundTime+0x11c>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d906      	bls.n	8008cea <USB_SetTurnaroundTime+0x2a>
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	4a40      	ldr	r2, [pc, #256]	; (8008de0 <USB_SetTurnaroundTime+0x120>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d202      	bcs.n	8008cea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008ce4:	230f      	movs	r3, #15
 8008ce6:	617b      	str	r3, [r7, #20]
 8008ce8:	e062      	b.n	8008db0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	4a3c      	ldr	r2, [pc, #240]	; (8008de0 <USB_SetTurnaroundTime+0x120>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d306      	bcc.n	8008d00 <USB_SetTurnaroundTime+0x40>
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	4a3b      	ldr	r2, [pc, #236]	; (8008de4 <USB_SetTurnaroundTime+0x124>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d202      	bcs.n	8008d00 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008cfa:	230e      	movs	r3, #14
 8008cfc:	617b      	str	r3, [r7, #20]
 8008cfe:	e057      	b.n	8008db0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	4a38      	ldr	r2, [pc, #224]	; (8008de4 <USB_SetTurnaroundTime+0x124>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d306      	bcc.n	8008d16 <USB_SetTurnaroundTime+0x56>
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	4a37      	ldr	r2, [pc, #220]	; (8008de8 <USB_SetTurnaroundTime+0x128>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d202      	bcs.n	8008d16 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008d10:	230d      	movs	r3, #13
 8008d12:	617b      	str	r3, [r7, #20]
 8008d14:	e04c      	b.n	8008db0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	4a33      	ldr	r2, [pc, #204]	; (8008de8 <USB_SetTurnaroundTime+0x128>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d306      	bcc.n	8008d2c <USB_SetTurnaroundTime+0x6c>
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	4a32      	ldr	r2, [pc, #200]	; (8008dec <USB_SetTurnaroundTime+0x12c>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d802      	bhi.n	8008d2c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008d26:	230c      	movs	r3, #12
 8008d28:	617b      	str	r3, [r7, #20]
 8008d2a:	e041      	b.n	8008db0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	4a2f      	ldr	r2, [pc, #188]	; (8008dec <USB_SetTurnaroundTime+0x12c>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d906      	bls.n	8008d42 <USB_SetTurnaroundTime+0x82>
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	4a2e      	ldr	r2, [pc, #184]	; (8008df0 <USB_SetTurnaroundTime+0x130>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d802      	bhi.n	8008d42 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008d3c:	230b      	movs	r3, #11
 8008d3e:	617b      	str	r3, [r7, #20]
 8008d40:	e036      	b.n	8008db0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	4a2a      	ldr	r2, [pc, #168]	; (8008df0 <USB_SetTurnaroundTime+0x130>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d906      	bls.n	8008d58 <USB_SetTurnaroundTime+0x98>
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	4a29      	ldr	r2, [pc, #164]	; (8008df4 <USB_SetTurnaroundTime+0x134>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d802      	bhi.n	8008d58 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008d52:	230a      	movs	r3, #10
 8008d54:	617b      	str	r3, [r7, #20]
 8008d56:	e02b      	b.n	8008db0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	4a26      	ldr	r2, [pc, #152]	; (8008df4 <USB_SetTurnaroundTime+0x134>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d906      	bls.n	8008d6e <USB_SetTurnaroundTime+0xae>
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	4a25      	ldr	r2, [pc, #148]	; (8008df8 <USB_SetTurnaroundTime+0x138>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d202      	bcs.n	8008d6e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008d68:	2309      	movs	r3, #9
 8008d6a:	617b      	str	r3, [r7, #20]
 8008d6c:	e020      	b.n	8008db0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	4a21      	ldr	r2, [pc, #132]	; (8008df8 <USB_SetTurnaroundTime+0x138>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d306      	bcc.n	8008d84 <USB_SetTurnaroundTime+0xc4>
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	4a20      	ldr	r2, [pc, #128]	; (8008dfc <USB_SetTurnaroundTime+0x13c>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d802      	bhi.n	8008d84 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008d7e:	2308      	movs	r3, #8
 8008d80:	617b      	str	r3, [r7, #20]
 8008d82:	e015      	b.n	8008db0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	4a1d      	ldr	r2, [pc, #116]	; (8008dfc <USB_SetTurnaroundTime+0x13c>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d906      	bls.n	8008d9a <USB_SetTurnaroundTime+0xda>
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	4a1c      	ldr	r2, [pc, #112]	; (8008e00 <USB_SetTurnaroundTime+0x140>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d202      	bcs.n	8008d9a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008d94:	2307      	movs	r3, #7
 8008d96:	617b      	str	r3, [r7, #20]
 8008d98:	e00a      	b.n	8008db0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008d9a:	2306      	movs	r3, #6
 8008d9c:	617b      	str	r3, [r7, #20]
 8008d9e:	e007      	b.n	8008db0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008da0:	79fb      	ldrb	r3, [r7, #7]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d102      	bne.n	8008dac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008da6:	2309      	movs	r3, #9
 8008da8:	617b      	str	r3, [r7, #20]
 8008daa:	e001      	b.n	8008db0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008dac:	2309      	movs	r3, #9
 8008dae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	68da      	ldr	r2, [r3, #12]
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	029b      	lsls	r3, r3, #10
 8008dc4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008dc8:	431a      	orrs	r2, r3
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008dce:	2300      	movs	r3, #0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	371c      	adds	r7, #28
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr
 8008ddc:	00d8acbf 	.word	0x00d8acbf
 8008de0:	00e4e1c0 	.word	0x00e4e1c0
 8008de4:	00f42400 	.word	0x00f42400
 8008de8:	01067380 	.word	0x01067380
 8008dec:	011a499f 	.word	0x011a499f
 8008df0:	01312cff 	.word	0x01312cff
 8008df4:	014ca43f 	.word	0x014ca43f
 8008df8:	016e3600 	.word	0x016e3600
 8008dfc:	01a6ab1f 	.word	0x01a6ab1f
 8008e00:	01e84800 	.word	0x01e84800

08008e04 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	f043 0201 	orr.w	r2, r3, #1
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	370c      	adds	r7, #12
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr

08008e26 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e26:	b480      	push	{r7}
 8008e28:	b083      	sub	sp, #12
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	f023 0201 	bic.w	r2, r3, #1
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	460b      	mov	r3, r1
 8008e52:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008e54:	2300      	movs	r3, #0
 8008e56:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008e64:	78fb      	ldrb	r3, [r7, #3]
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d115      	bne.n	8008e96 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008e76:	2001      	movs	r0, #1
 8008e78:	f7f8 f9ec 	bl	8001254 <HAL_Delay>
      ms++;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f001 f972 	bl	800a16c <USB_GetMode>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d01e      	beq.n	8008ecc <USB_SetCurrentMode+0x84>
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2b31      	cmp	r3, #49	; 0x31
 8008e92:	d9f0      	bls.n	8008e76 <USB_SetCurrentMode+0x2e>
 8008e94:	e01a      	b.n	8008ecc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008e96:	78fb      	ldrb	r3, [r7, #3]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d115      	bne.n	8008ec8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008ea8:	2001      	movs	r0, #1
 8008eaa:	f7f8 f9d3 	bl	8001254 <HAL_Delay>
      ms++;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f001 f959 	bl	800a16c <USB_GetMode>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d005      	beq.n	8008ecc <USB_SetCurrentMode+0x84>
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2b31      	cmp	r3, #49	; 0x31
 8008ec4:	d9f0      	bls.n	8008ea8 <USB_SetCurrentMode+0x60>
 8008ec6:	e001      	b.n	8008ecc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e005      	b.n	8008ed8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2b32      	cmp	r3, #50	; 0x32
 8008ed0:	d101      	bne.n	8008ed6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e000      	b.n	8008ed8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ee0:	b084      	sub	sp, #16
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b086      	sub	sp, #24
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
 8008eea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008eee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008efa:	2300      	movs	r3, #0
 8008efc:	613b      	str	r3, [r7, #16]
 8008efe:	e009      	b.n	8008f14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	3340      	adds	r3, #64	; 0x40
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	4413      	add	r3, r2
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	3301      	adds	r3, #1
 8008f12:	613b      	str	r3, [r7, #16]
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	2b0e      	cmp	r3, #14
 8008f18:	d9f2      	bls.n	8008f00 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d11c      	bne.n	8008f5a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	68fa      	ldr	r2, [r7, #12]
 8008f2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f2e:	f043 0302 	orr.w	r3, r3, #2
 8008f32:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f38:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f44:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f50:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	639a      	str	r2, [r3, #56]	; 0x38
 8008f58:	e00b      	b.n	8008f72 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f5e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f6a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f78:	461a      	mov	r2, r3
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f84:	4619      	mov	r1, r3
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	680b      	ldr	r3, [r1, #0]
 8008f90:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d10c      	bne.n	8008fb2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d104      	bne.n	8008fa8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008f9e:	2100      	movs	r1, #0
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 f945 	bl	8009230 <USB_SetDevSpeed>
 8008fa6:	e008      	b.n	8008fba <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008fa8:	2101      	movs	r1, #1
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 f940 	bl	8009230 <USB_SetDevSpeed>
 8008fb0:	e003      	b.n	8008fba <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008fb2:	2103      	movs	r1, #3
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 f93b 	bl	8009230 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008fba:	2110      	movs	r1, #16
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 f8f3 	bl	80091a8 <USB_FlushTxFifo>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d001      	beq.n	8008fcc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 f90f 	bl	80091f0 <USB_FlushRxFifo>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d001      	beq.n	8008fdc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fee:	461a      	mov	r2, r3
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009000:	2300      	movs	r3, #0
 8009002:	613b      	str	r3, [r7, #16]
 8009004:	e043      	b.n	800908e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	015a      	lsls	r2, r3, #5
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	4413      	add	r3, r2
 800900e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009018:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800901c:	d118      	bne.n	8009050 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d10a      	bne.n	800903a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	015a      	lsls	r2, r3, #5
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	4413      	add	r3, r2
 800902c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009030:	461a      	mov	r2, r3
 8009032:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009036:	6013      	str	r3, [r2, #0]
 8009038:	e013      	b.n	8009062 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	015a      	lsls	r2, r3, #5
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	4413      	add	r3, r2
 8009042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009046:	461a      	mov	r2, r3
 8009048:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800904c:	6013      	str	r3, [r2, #0]
 800904e:	e008      	b.n	8009062 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	015a      	lsls	r2, r3, #5
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	4413      	add	r3, r2
 8009058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800905c:	461a      	mov	r2, r3
 800905e:	2300      	movs	r3, #0
 8009060:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	015a      	lsls	r2, r3, #5
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	4413      	add	r3, r2
 800906a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800906e:	461a      	mov	r2, r3
 8009070:	2300      	movs	r3, #0
 8009072:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	015a      	lsls	r2, r3, #5
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	4413      	add	r3, r2
 800907c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009080:	461a      	mov	r2, r3
 8009082:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009086:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	3301      	adds	r3, #1
 800908c:	613b      	str	r3, [r7, #16]
 800908e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009090:	693a      	ldr	r2, [r7, #16]
 8009092:	429a      	cmp	r2, r3
 8009094:	d3b7      	bcc.n	8009006 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009096:	2300      	movs	r3, #0
 8009098:	613b      	str	r3, [r7, #16]
 800909a:	e043      	b.n	8009124 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	015a      	lsls	r2, r3, #5
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	4413      	add	r3, r2
 80090a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090b2:	d118      	bne.n	80090e6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d10a      	bne.n	80090d0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	015a      	lsls	r2, r3, #5
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	4413      	add	r3, r2
 80090c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090c6:	461a      	mov	r2, r3
 80090c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80090cc:	6013      	str	r3, [r2, #0]
 80090ce:	e013      	b.n	80090f8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	015a      	lsls	r2, r3, #5
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	4413      	add	r3, r2
 80090d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090dc:	461a      	mov	r2, r3
 80090de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80090e2:	6013      	str	r3, [r2, #0]
 80090e4:	e008      	b.n	80090f8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	015a      	lsls	r2, r3, #5
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	4413      	add	r3, r2
 80090ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090f2:	461a      	mov	r2, r3
 80090f4:	2300      	movs	r3, #0
 80090f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	015a      	lsls	r2, r3, #5
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	4413      	add	r3, r2
 8009100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009104:	461a      	mov	r2, r3
 8009106:	2300      	movs	r3, #0
 8009108:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	015a      	lsls	r2, r3, #5
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	4413      	add	r3, r2
 8009112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009116:	461a      	mov	r2, r3
 8009118:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800911c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	3301      	adds	r3, #1
 8009122:	613b      	str	r3, [r7, #16]
 8009124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009126:	693a      	ldr	r2, [r7, #16]
 8009128:	429a      	cmp	r2, r3
 800912a:	d3b7      	bcc.n	800909c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	68fa      	ldr	r2, [r7, #12]
 8009136:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800913a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800913e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800914c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800914e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009150:	2b00      	cmp	r3, #0
 8009152:	d105      	bne.n	8009160 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	699b      	ldr	r3, [r3, #24]
 8009158:	f043 0210 	orr.w	r2, r3, #16
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	699a      	ldr	r2, [r3, #24]
 8009164:	4b0f      	ldr	r3, [pc, #60]	; (80091a4 <USB_DevInit+0x2c4>)
 8009166:	4313      	orrs	r3, r2
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800916c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800916e:	2b00      	cmp	r3, #0
 8009170:	d005      	beq.n	800917e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	699b      	ldr	r3, [r3, #24]
 8009176:	f043 0208 	orr.w	r2, r3, #8
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800917e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009180:	2b01      	cmp	r3, #1
 8009182:	d107      	bne.n	8009194 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	699b      	ldr	r3, [r3, #24]
 8009188:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800918c:	f043 0304 	orr.w	r3, r3, #4
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009194:	7dfb      	ldrb	r3, [r7, #23]
}
 8009196:	4618      	mov	r0, r3
 8009198:	3718      	adds	r7, #24
 800919a:	46bd      	mov	sp, r7
 800919c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80091a0:	b004      	add	sp, #16
 80091a2:	4770      	bx	lr
 80091a4:	803c3800 	.word	0x803c3800

080091a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b085      	sub	sp, #20
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80091b2:	2300      	movs	r3, #0
 80091b4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	019b      	lsls	r3, r3, #6
 80091ba:	f043 0220 	orr.w	r2, r3, #32
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	3301      	adds	r3, #1
 80091c6:	60fb      	str	r3, [r7, #12]
 80091c8:	4a08      	ldr	r2, [pc, #32]	; (80091ec <USB_FlushTxFifo+0x44>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d901      	bls.n	80091d2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80091ce:	2303      	movs	r3, #3
 80091d0:	e006      	b.n	80091e0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	691b      	ldr	r3, [r3, #16]
 80091d6:	f003 0320 	and.w	r3, r3, #32
 80091da:	2b20      	cmp	r3, #32
 80091dc:	d0f1      	beq.n	80091c2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80091de:	2300      	movs	r3, #0
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3714      	adds	r7, #20
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr
 80091ec:	00030d40 	.word	0x00030d40

080091f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b085      	sub	sp, #20
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80091f8:	2300      	movs	r3, #0
 80091fa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2210      	movs	r2, #16
 8009200:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	3301      	adds	r3, #1
 8009206:	60fb      	str	r3, [r7, #12]
 8009208:	4a08      	ldr	r2, [pc, #32]	; (800922c <USB_FlushRxFifo+0x3c>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d901      	bls.n	8009212 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800920e:	2303      	movs	r3, #3
 8009210:	e006      	b.n	8009220 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	f003 0310 	and.w	r3, r3, #16
 800921a:	2b10      	cmp	r3, #16
 800921c:	d0f1      	beq.n	8009202 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800921e:	2300      	movs	r3, #0
}
 8009220:	4618      	mov	r0, r3
 8009222:	3714      	adds	r7, #20
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr
 800922c:	00030d40 	.word	0x00030d40

08009230 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009230:	b480      	push	{r7}
 8009232:	b085      	sub	sp, #20
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	460b      	mov	r3, r1
 800923a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	78fb      	ldrb	r3, [r7, #3]
 800924a:	68f9      	ldr	r1, [r7, #12]
 800924c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009250:	4313      	orrs	r3, r2
 8009252:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009254:	2300      	movs	r3, #0
}
 8009256:	4618      	mov	r0, r3
 8009258:	3714      	adds	r7, #20
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr

08009262 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009262:	b480      	push	{r7}
 8009264:	b087      	sub	sp, #28
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	f003 0306 	and.w	r3, r3, #6
 800927a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d102      	bne.n	8009288 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009282:	2300      	movs	r3, #0
 8009284:	75fb      	strb	r3, [r7, #23]
 8009286:	e00a      	b.n	800929e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2b02      	cmp	r3, #2
 800928c:	d002      	beq.n	8009294 <USB_GetDevSpeed+0x32>
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2b06      	cmp	r3, #6
 8009292:	d102      	bne.n	800929a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009294:	2302      	movs	r3, #2
 8009296:	75fb      	strb	r3, [r7, #23]
 8009298:	e001      	b.n	800929e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800929a:	230f      	movs	r3, #15
 800929c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800929e:	7dfb      	ldrb	r3, [r7, #23]
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	371c      	adds	r7, #28
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b085      	sub	sp, #20
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	785b      	ldrb	r3, [r3, #1]
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d13a      	bne.n	800933e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092ce:	69da      	ldr	r2, [r3, #28]
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	f003 030f 	and.w	r3, r3, #15
 80092d8:	2101      	movs	r1, #1
 80092da:	fa01 f303 	lsl.w	r3, r1, r3
 80092de:	b29b      	uxth	r3, r3
 80092e0:	68f9      	ldr	r1, [r7, #12]
 80092e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092e6:	4313      	orrs	r3, r2
 80092e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	015a      	lsls	r2, r3, #5
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	4413      	add	r3, r2
 80092f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d155      	bne.n	80093ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	015a      	lsls	r2, r3, #5
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	4413      	add	r3, r2
 8009308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	78db      	ldrb	r3, [r3, #3]
 800931a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800931c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	059b      	lsls	r3, r3, #22
 8009322:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009324:	4313      	orrs	r3, r2
 8009326:	68ba      	ldr	r2, [r7, #8]
 8009328:	0151      	lsls	r1, r2, #5
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	440a      	add	r2, r1
 800932e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800933a:	6013      	str	r3, [r2, #0]
 800933c:	e036      	b.n	80093ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009344:	69da      	ldr	r2, [r3, #28]
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	f003 030f 	and.w	r3, r3, #15
 800934e:	2101      	movs	r1, #1
 8009350:	fa01 f303 	lsl.w	r3, r1, r3
 8009354:	041b      	lsls	r3, r3, #16
 8009356:	68f9      	ldr	r1, [r7, #12]
 8009358:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800935c:	4313      	orrs	r3, r2
 800935e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	015a      	lsls	r2, r3, #5
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	4413      	add	r3, r2
 8009368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009372:	2b00      	cmp	r3, #0
 8009374:	d11a      	bne.n	80093ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	015a      	lsls	r2, r3, #5
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	4413      	add	r3, r2
 800937e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	78db      	ldrb	r3, [r3, #3]
 8009390:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009392:	430b      	orrs	r3, r1
 8009394:	4313      	orrs	r3, r2
 8009396:	68ba      	ldr	r2, [r7, #8]
 8009398:	0151      	lsls	r1, r2, #5
 800939a:	68fa      	ldr	r2, [r7, #12]
 800939c:	440a      	add	r2, r1
 800939e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3714      	adds	r7, #20
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr
	...

080093bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80093bc:	b480      	push	{r7}
 80093be:	b085      	sub	sp, #20
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	785b      	ldrb	r3, [r3, #1]
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d161      	bne.n	800949c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	015a      	lsls	r2, r3, #5
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	4413      	add	r3, r2
 80093e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093ee:	d11f      	bne.n	8009430 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	015a      	lsls	r2, r3, #5
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	4413      	add	r3, r2
 80093f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	68ba      	ldr	r2, [r7, #8]
 8009400:	0151      	lsls	r1, r2, #5
 8009402:	68fa      	ldr	r2, [r7, #12]
 8009404:	440a      	add	r2, r1
 8009406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800940a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800940e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	015a      	lsls	r2, r3, #5
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	4413      	add	r3, r2
 8009418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68ba      	ldr	r2, [r7, #8]
 8009420:	0151      	lsls	r1, r2, #5
 8009422:	68fa      	ldr	r2, [r7, #12]
 8009424:	440a      	add	r2, r1
 8009426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800942a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800942e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009436:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	f003 030f 	and.w	r3, r3, #15
 8009440:	2101      	movs	r1, #1
 8009442:	fa01 f303 	lsl.w	r3, r1, r3
 8009446:	b29b      	uxth	r3, r3
 8009448:	43db      	mvns	r3, r3
 800944a:	68f9      	ldr	r1, [r7, #12]
 800944c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009450:	4013      	ands	r3, r2
 8009452:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800945a:	69da      	ldr	r2, [r3, #28]
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	f003 030f 	and.w	r3, r3, #15
 8009464:	2101      	movs	r1, #1
 8009466:	fa01 f303 	lsl.w	r3, r1, r3
 800946a:	b29b      	uxth	r3, r3
 800946c:	43db      	mvns	r3, r3
 800946e:	68f9      	ldr	r1, [r7, #12]
 8009470:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009474:	4013      	ands	r3, r2
 8009476:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	015a      	lsls	r2, r3, #5
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	4413      	add	r3, r2
 8009480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	0159      	lsls	r1, r3, #5
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	440b      	add	r3, r1
 800948e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009492:	4619      	mov	r1, r3
 8009494:	4b35      	ldr	r3, [pc, #212]	; (800956c <USB_DeactivateEndpoint+0x1b0>)
 8009496:	4013      	ands	r3, r2
 8009498:	600b      	str	r3, [r1, #0]
 800949a:	e060      	b.n	800955e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	015a      	lsls	r2, r3, #5
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	4413      	add	r3, r2
 80094a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094b2:	d11f      	bne.n	80094f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	015a      	lsls	r2, r3, #5
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	4413      	add	r3, r2
 80094bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	68ba      	ldr	r2, [r7, #8]
 80094c4:	0151      	lsls	r1, r2, #5
 80094c6:	68fa      	ldr	r2, [r7, #12]
 80094c8:	440a      	add	r2, r1
 80094ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80094d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	015a      	lsls	r2, r3, #5
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	4413      	add	r3, r2
 80094dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	68ba      	ldr	r2, [r7, #8]
 80094e4:	0151      	lsls	r1, r2, #5
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	440a      	add	r2, r1
 80094ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80094f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	f003 030f 	and.w	r3, r3, #15
 8009504:	2101      	movs	r1, #1
 8009506:	fa01 f303 	lsl.w	r3, r1, r3
 800950a:	041b      	lsls	r3, r3, #16
 800950c:	43db      	mvns	r3, r3
 800950e:	68f9      	ldr	r1, [r7, #12]
 8009510:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009514:	4013      	ands	r3, r2
 8009516:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800951e:	69da      	ldr	r2, [r3, #28]
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	f003 030f 	and.w	r3, r3, #15
 8009528:	2101      	movs	r1, #1
 800952a:	fa01 f303 	lsl.w	r3, r1, r3
 800952e:	041b      	lsls	r3, r3, #16
 8009530:	43db      	mvns	r3, r3
 8009532:	68f9      	ldr	r1, [r7, #12]
 8009534:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009538:	4013      	ands	r3, r2
 800953a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	015a      	lsls	r2, r3, #5
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	4413      	add	r3, r2
 8009544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	0159      	lsls	r1, r3, #5
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	440b      	add	r3, r1
 8009552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009556:	4619      	mov	r1, r3
 8009558:	4b05      	ldr	r3, [pc, #20]	; (8009570 <USB_DeactivateEndpoint+0x1b4>)
 800955a:	4013      	ands	r3, r2
 800955c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3714      	adds	r7, #20
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr
 800956c:	ec337800 	.word	0xec337800
 8009570:	eff37800 	.word	0xeff37800

08009574 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b08a      	sub	sp, #40	; 0x28
 8009578:	af02      	add	r7, sp, #8
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	4613      	mov	r3, r2
 8009580:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	785b      	ldrb	r3, [r3, #1]
 8009590:	2b01      	cmp	r3, #1
 8009592:	f040 815c 	bne.w	800984e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	695b      	ldr	r3, [r3, #20]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d132      	bne.n	8009604 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	015a      	lsls	r2, r3, #5
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	4413      	add	r3, r2
 80095a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	69ba      	ldr	r2, [r7, #24]
 80095ae:	0151      	lsls	r1, r2, #5
 80095b0:	69fa      	ldr	r2, [r7, #28]
 80095b2:	440a      	add	r2, r1
 80095b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80095bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80095c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	015a      	lsls	r2, r3, #5
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	4413      	add	r3, r2
 80095ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	69ba      	ldr	r2, [r7, #24]
 80095d2:	0151      	lsls	r1, r2, #5
 80095d4:	69fa      	ldr	r2, [r7, #28]
 80095d6:	440a      	add	r2, r1
 80095d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80095e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	015a      	lsls	r2, r3, #5
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	4413      	add	r3, r2
 80095ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ee:	691b      	ldr	r3, [r3, #16]
 80095f0:	69ba      	ldr	r2, [r7, #24]
 80095f2:	0151      	lsls	r1, r2, #5
 80095f4:	69fa      	ldr	r2, [r7, #28]
 80095f6:	440a      	add	r2, r1
 80095f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095fc:	0cdb      	lsrs	r3, r3, #19
 80095fe:	04db      	lsls	r3, r3, #19
 8009600:	6113      	str	r3, [r2, #16]
 8009602:	e074      	b.n	80096ee <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009604:	69bb      	ldr	r3, [r7, #24]
 8009606:	015a      	lsls	r2, r3, #5
 8009608:	69fb      	ldr	r3, [r7, #28]
 800960a:	4413      	add	r3, r2
 800960c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	69ba      	ldr	r2, [r7, #24]
 8009614:	0151      	lsls	r1, r2, #5
 8009616:	69fa      	ldr	r2, [r7, #28]
 8009618:	440a      	add	r2, r1
 800961a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800961e:	0cdb      	lsrs	r3, r3, #19
 8009620:	04db      	lsls	r3, r3, #19
 8009622:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	015a      	lsls	r2, r3, #5
 8009628:	69fb      	ldr	r3, [r7, #28]
 800962a:	4413      	add	r3, r2
 800962c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009630:	691b      	ldr	r3, [r3, #16]
 8009632:	69ba      	ldr	r2, [r7, #24]
 8009634:	0151      	lsls	r1, r2, #5
 8009636:	69fa      	ldr	r2, [r7, #28]
 8009638:	440a      	add	r2, r1
 800963a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800963e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009642:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009646:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009648:	69bb      	ldr	r3, [r7, #24]
 800964a:	015a      	lsls	r2, r3, #5
 800964c:	69fb      	ldr	r3, [r7, #28]
 800964e:	4413      	add	r3, r2
 8009650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009654:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	6959      	ldr	r1, [r3, #20]
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	440b      	add	r3, r1
 8009660:	1e59      	subs	r1, r3, #1
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	fbb1 f3f3 	udiv	r3, r1, r3
 800966a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800966c:	4b9d      	ldr	r3, [pc, #628]	; (80098e4 <USB_EPStartXfer+0x370>)
 800966e:	400b      	ands	r3, r1
 8009670:	69b9      	ldr	r1, [r7, #24]
 8009672:	0148      	lsls	r0, r1, #5
 8009674:	69f9      	ldr	r1, [r7, #28]
 8009676:	4401      	add	r1, r0
 8009678:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800967c:	4313      	orrs	r3, r2
 800967e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	015a      	lsls	r2, r3, #5
 8009684:	69fb      	ldr	r3, [r7, #28]
 8009686:	4413      	add	r3, r2
 8009688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800968c:	691a      	ldr	r2, [r3, #16]
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	695b      	ldr	r3, [r3, #20]
 8009692:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009696:	69b9      	ldr	r1, [r7, #24]
 8009698:	0148      	lsls	r0, r1, #5
 800969a:	69f9      	ldr	r1, [r7, #28]
 800969c:	4401      	add	r1, r0
 800969e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80096a2:	4313      	orrs	r3, r2
 80096a4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	78db      	ldrb	r3, [r3, #3]
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d11f      	bne.n	80096ee <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80096ae:	69bb      	ldr	r3, [r7, #24]
 80096b0:	015a      	lsls	r2, r3, #5
 80096b2:	69fb      	ldr	r3, [r7, #28]
 80096b4:	4413      	add	r3, r2
 80096b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ba:	691b      	ldr	r3, [r3, #16]
 80096bc:	69ba      	ldr	r2, [r7, #24]
 80096be:	0151      	lsls	r1, r2, #5
 80096c0:	69fa      	ldr	r2, [r7, #28]
 80096c2:	440a      	add	r2, r1
 80096c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096c8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80096cc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	015a      	lsls	r2, r3, #5
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	4413      	add	r3, r2
 80096d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096da:	691b      	ldr	r3, [r3, #16]
 80096dc:	69ba      	ldr	r2, [r7, #24]
 80096de:	0151      	lsls	r1, r2, #5
 80096e0:	69fa      	ldr	r2, [r7, #28]
 80096e2:	440a      	add	r2, r1
 80096e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80096ec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80096ee:	79fb      	ldrb	r3, [r7, #7]
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d14b      	bne.n	800978c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d009      	beq.n	8009710 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80096fc:	69bb      	ldr	r3, [r7, #24]
 80096fe:	015a      	lsls	r2, r3, #5
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	4413      	add	r3, r2
 8009704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009708:	461a      	mov	r2, r3
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	691b      	ldr	r3, [r3, #16]
 800970e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	78db      	ldrb	r3, [r3, #3]
 8009714:	2b01      	cmp	r3, #1
 8009716:	d128      	bne.n	800976a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009724:	2b00      	cmp	r3, #0
 8009726:	d110      	bne.n	800974a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009728:	69bb      	ldr	r3, [r7, #24]
 800972a:	015a      	lsls	r2, r3, #5
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	4413      	add	r3, r2
 8009730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	69ba      	ldr	r2, [r7, #24]
 8009738:	0151      	lsls	r1, r2, #5
 800973a:	69fa      	ldr	r2, [r7, #28]
 800973c:	440a      	add	r2, r1
 800973e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009742:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009746:	6013      	str	r3, [r2, #0]
 8009748:	e00f      	b.n	800976a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	015a      	lsls	r2, r3, #5
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	4413      	add	r3, r2
 8009752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	69ba      	ldr	r2, [r7, #24]
 800975a:	0151      	lsls	r1, r2, #5
 800975c:	69fa      	ldr	r2, [r7, #28]
 800975e:	440a      	add	r2, r1
 8009760:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009768:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	015a      	lsls	r2, r3, #5
 800976e:	69fb      	ldr	r3, [r7, #28]
 8009770:	4413      	add	r3, r2
 8009772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	69ba      	ldr	r2, [r7, #24]
 800977a:	0151      	lsls	r1, r2, #5
 800977c:	69fa      	ldr	r2, [r7, #28]
 800977e:	440a      	add	r2, r1
 8009780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009784:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009788:	6013      	str	r3, [r2, #0]
 800978a:	e12f      	b.n	80099ec <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	015a      	lsls	r2, r3, #5
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	4413      	add	r3, r2
 8009794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	69ba      	ldr	r2, [r7, #24]
 800979c:	0151      	lsls	r1, r2, #5
 800979e:	69fa      	ldr	r2, [r7, #28]
 80097a0:	440a      	add	r2, r1
 80097a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80097aa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	78db      	ldrb	r3, [r3, #3]
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d015      	beq.n	80097e0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	695b      	ldr	r3, [r3, #20]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	f000 8117 	beq.w	80099ec <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	f003 030f 	and.w	r3, r3, #15
 80097ce:	2101      	movs	r1, #1
 80097d0:	fa01 f303 	lsl.w	r3, r1, r3
 80097d4:	69f9      	ldr	r1, [r7, #28]
 80097d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097da:	4313      	orrs	r3, r2
 80097dc:	634b      	str	r3, [r1, #52]	; 0x34
 80097de:	e105      	b.n	80099ec <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d110      	bne.n	8009812 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80097f0:	69bb      	ldr	r3, [r7, #24]
 80097f2:	015a      	lsls	r2, r3, #5
 80097f4:	69fb      	ldr	r3, [r7, #28]
 80097f6:	4413      	add	r3, r2
 80097f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	69ba      	ldr	r2, [r7, #24]
 8009800:	0151      	lsls	r1, r2, #5
 8009802:	69fa      	ldr	r2, [r7, #28]
 8009804:	440a      	add	r2, r1
 8009806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800980a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800980e:	6013      	str	r3, [r2, #0]
 8009810:	e00f      	b.n	8009832 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	015a      	lsls	r2, r3, #5
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	4413      	add	r3, r2
 800981a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	69ba      	ldr	r2, [r7, #24]
 8009822:	0151      	lsls	r1, r2, #5
 8009824:	69fa      	ldr	r2, [r7, #28]
 8009826:	440a      	add	r2, r1
 8009828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800982c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009830:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	68d9      	ldr	r1, [r3, #12]
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	781a      	ldrb	r2, [r3, #0]
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	695b      	ldr	r3, [r3, #20]
 800983e:	b298      	uxth	r0, r3
 8009840:	79fb      	ldrb	r3, [r7, #7]
 8009842:	9300      	str	r3, [sp, #0]
 8009844:	4603      	mov	r3, r0
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	f000 fa2b 	bl	8009ca2 <USB_WritePacket>
 800984c:	e0ce      	b.n	80099ec <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	015a      	lsls	r2, r3, #5
 8009852:	69fb      	ldr	r3, [r7, #28]
 8009854:	4413      	add	r3, r2
 8009856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800985a:	691b      	ldr	r3, [r3, #16]
 800985c:	69ba      	ldr	r2, [r7, #24]
 800985e:	0151      	lsls	r1, r2, #5
 8009860:	69fa      	ldr	r2, [r7, #28]
 8009862:	440a      	add	r2, r1
 8009864:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009868:	0cdb      	lsrs	r3, r3, #19
 800986a:	04db      	lsls	r3, r3, #19
 800986c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800986e:	69bb      	ldr	r3, [r7, #24]
 8009870:	015a      	lsls	r2, r3, #5
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	4413      	add	r3, r2
 8009876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800987a:	691b      	ldr	r3, [r3, #16]
 800987c:	69ba      	ldr	r2, [r7, #24]
 800987e:	0151      	lsls	r1, r2, #5
 8009880:	69fa      	ldr	r2, [r7, #28]
 8009882:	440a      	add	r2, r1
 8009884:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009888:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800988c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009890:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	695b      	ldr	r3, [r3, #20]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d126      	bne.n	80098e8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	015a      	lsls	r2, r3, #5
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	4413      	add	r3, r2
 80098a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098a6:	691a      	ldr	r2, [r3, #16]
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098b0:	69b9      	ldr	r1, [r7, #24]
 80098b2:	0148      	lsls	r0, r1, #5
 80098b4:	69f9      	ldr	r1, [r7, #28]
 80098b6:	4401      	add	r1, r0
 80098b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80098bc:	4313      	orrs	r3, r2
 80098be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	015a      	lsls	r2, r3, #5
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	4413      	add	r3, r2
 80098c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098cc:	691b      	ldr	r3, [r3, #16]
 80098ce:	69ba      	ldr	r2, [r7, #24]
 80098d0:	0151      	lsls	r1, r2, #5
 80098d2:	69fa      	ldr	r2, [r7, #28]
 80098d4:	440a      	add	r2, r1
 80098d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098de:	6113      	str	r3, [r2, #16]
 80098e0:	e036      	b.n	8009950 <USB_EPStartXfer+0x3dc>
 80098e2:	bf00      	nop
 80098e4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	695a      	ldr	r2, [r3, #20]
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	689b      	ldr	r3, [r3, #8]
 80098f0:	4413      	add	r3, r2
 80098f2:	1e5a      	subs	r2, r3, #1
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	689b      	ldr	r3, [r3, #8]
 80098f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80098fc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80098fe:	69bb      	ldr	r3, [r7, #24]
 8009900:	015a      	lsls	r2, r3, #5
 8009902:	69fb      	ldr	r3, [r7, #28]
 8009904:	4413      	add	r3, r2
 8009906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800990a:	691a      	ldr	r2, [r3, #16]
 800990c:	8afb      	ldrh	r3, [r7, #22]
 800990e:	04d9      	lsls	r1, r3, #19
 8009910:	4b39      	ldr	r3, [pc, #228]	; (80099f8 <USB_EPStartXfer+0x484>)
 8009912:	400b      	ands	r3, r1
 8009914:	69b9      	ldr	r1, [r7, #24]
 8009916:	0148      	lsls	r0, r1, #5
 8009918:	69f9      	ldr	r1, [r7, #28]
 800991a:	4401      	add	r1, r0
 800991c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009920:	4313      	orrs	r3, r2
 8009922:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009924:	69bb      	ldr	r3, [r7, #24]
 8009926:	015a      	lsls	r2, r3, #5
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	4413      	add	r3, r2
 800992c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009930:	691a      	ldr	r2, [r3, #16]
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	8af9      	ldrh	r1, [r7, #22]
 8009938:	fb01 f303 	mul.w	r3, r1, r3
 800993c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009940:	69b9      	ldr	r1, [r7, #24]
 8009942:	0148      	lsls	r0, r1, #5
 8009944:	69f9      	ldr	r1, [r7, #28]
 8009946:	4401      	add	r1, r0
 8009948:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800994c:	4313      	orrs	r3, r2
 800994e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009950:	79fb      	ldrb	r3, [r7, #7]
 8009952:	2b01      	cmp	r3, #1
 8009954:	d10d      	bne.n	8009972 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d009      	beq.n	8009972 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	68d9      	ldr	r1, [r3, #12]
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	015a      	lsls	r2, r3, #5
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	4413      	add	r3, r2
 800996a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800996e:	460a      	mov	r2, r1
 8009970:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	78db      	ldrb	r3, [r3, #3]
 8009976:	2b01      	cmp	r3, #1
 8009978:	d128      	bne.n	80099cc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800997a:	69fb      	ldr	r3, [r7, #28]
 800997c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009980:	689b      	ldr	r3, [r3, #8]
 8009982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009986:	2b00      	cmp	r3, #0
 8009988:	d110      	bne.n	80099ac <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	015a      	lsls	r2, r3, #5
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	4413      	add	r3, r2
 8009992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	69ba      	ldr	r2, [r7, #24]
 800999a:	0151      	lsls	r1, r2, #5
 800999c:	69fa      	ldr	r2, [r7, #28]
 800999e:	440a      	add	r2, r1
 80099a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80099a8:	6013      	str	r3, [r2, #0]
 80099aa:	e00f      	b.n	80099cc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	015a      	lsls	r2, r3, #5
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	4413      	add	r3, r2
 80099b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	69ba      	ldr	r2, [r7, #24]
 80099bc:	0151      	lsls	r1, r2, #5
 80099be:	69fa      	ldr	r2, [r7, #28]
 80099c0:	440a      	add	r2, r1
 80099c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099ca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	015a      	lsls	r2, r3, #5
 80099d0:	69fb      	ldr	r3, [r7, #28]
 80099d2:	4413      	add	r3, r2
 80099d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	69ba      	ldr	r2, [r7, #24]
 80099dc:	0151      	lsls	r1, r2, #5
 80099de:	69fa      	ldr	r2, [r7, #28]
 80099e0:	440a      	add	r2, r1
 80099e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80099ec:	2300      	movs	r3, #0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3720      	adds	r7, #32
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	1ff80000 	.word	0x1ff80000

080099fc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b087      	sub	sp, #28
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	60b9      	str	r1, [r7, #8]
 8009a06:	4613      	mov	r3, r2
 8009a08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	785b      	ldrb	r3, [r3, #1]
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	f040 80cd 	bne.w	8009bb8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	695b      	ldr	r3, [r3, #20]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d132      	bne.n	8009a8c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	015a      	lsls	r2, r3, #5
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a32:	691b      	ldr	r3, [r3, #16]
 8009a34:	693a      	ldr	r2, [r7, #16]
 8009a36:	0151      	lsls	r1, r2, #5
 8009a38:	697a      	ldr	r2, [r7, #20]
 8009a3a:	440a      	add	r2, r1
 8009a3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009a44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009a48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	015a      	lsls	r2, r3, #5
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	4413      	add	r3, r2
 8009a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a56:	691b      	ldr	r3, [r3, #16]
 8009a58:	693a      	ldr	r2, [r7, #16]
 8009a5a:	0151      	lsls	r1, r2, #5
 8009a5c:	697a      	ldr	r2, [r7, #20]
 8009a5e:	440a      	add	r2, r1
 8009a60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	015a      	lsls	r2, r3, #5
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	4413      	add	r3, r2
 8009a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a76:	691b      	ldr	r3, [r3, #16]
 8009a78:	693a      	ldr	r2, [r7, #16]
 8009a7a:	0151      	lsls	r1, r2, #5
 8009a7c:	697a      	ldr	r2, [r7, #20]
 8009a7e:	440a      	add	r2, r1
 8009a80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a84:	0cdb      	lsrs	r3, r3, #19
 8009a86:	04db      	lsls	r3, r3, #19
 8009a88:	6113      	str	r3, [r2, #16]
 8009a8a:	e04e      	b.n	8009b2a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	015a      	lsls	r2, r3, #5
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	4413      	add	r3, r2
 8009a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a98:	691b      	ldr	r3, [r3, #16]
 8009a9a:	693a      	ldr	r2, [r7, #16]
 8009a9c:	0151      	lsls	r1, r2, #5
 8009a9e:	697a      	ldr	r2, [r7, #20]
 8009aa0:	440a      	add	r2, r1
 8009aa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009aa6:	0cdb      	lsrs	r3, r3, #19
 8009aa8:	04db      	lsls	r3, r3, #19
 8009aaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	015a      	lsls	r2, r3, #5
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	4413      	add	r3, r2
 8009ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ab8:	691b      	ldr	r3, [r3, #16]
 8009aba:	693a      	ldr	r2, [r7, #16]
 8009abc:	0151      	lsls	r1, r2, #5
 8009abe:	697a      	ldr	r2, [r7, #20]
 8009ac0:	440a      	add	r2, r1
 8009ac2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ac6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009aca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009ace:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	695a      	ldr	r2, [r3, #20]
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d903      	bls.n	8009ae4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	689a      	ldr	r2, [r3, #8]
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	015a      	lsls	r2, r3, #5
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	4413      	add	r3, r2
 8009aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009af0:	691b      	ldr	r3, [r3, #16]
 8009af2:	693a      	ldr	r2, [r7, #16]
 8009af4:	0151      	lsls	r1, r2, #5
 8009af6:	697a      	ldr	r2, [r7, #20]
 8009af8:	440a      	add	r2, r1
 8009afa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009afe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	015a      	lsls	r2, r3, #5
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	4413      	add	r3, r2
 8009b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b10:	691a      	ldr	r2, [r3, #16]
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	695b      	ldr	r3, [r3, #20]
 8009b16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b1a:	6939      	ldr	r1, [r7, #16]
 8009b1c:	0148      	lsls	r0, r1, #5
 8009b1e:	6979      	ldr	r1, [r7, #20]
 8009b20:	4401      	add	r1, r0
 8009b22:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009b26:	4313      	orrs	r3, r2
 8009b28:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009b2a:	79fb      	ldrb	r3, [r7, #7]
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d11e      	bne.n	8009b6e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	691b      	ldr	r3, [r3, #16]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d009      	beq.n	8009b4c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	015a      	lsls	r2, r3, #5
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	4413      	add	r3, r2
 8009b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b44:	461a      	mov	r2, r3
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	691b      	ldr	r3, [r3, #16]
 8009b4a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	015a      	lsls	r2, r3, #5
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	4413      	add	r3, r2
 8009b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	693a      	ldr	r2, [r7, #16]
 8009b5c:	0151      	lsls	r1, r2, #5
 8009b5e:	697a      	ldr	r2, [r7, #20]
 8009b60:	440a      	add	r2, r1
 8009b62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b6a:	6013      	str	r3, [r2, #0]
 8009b6c:	e092      	b.n	8009c94 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	015a      	lsls	r2, r3, #5
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	4413      	add	r3, r2
 8009b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	693a      	ldr	r2, [r7, #16]
 8009b7e:	0151      	lsls	r1, r2, #5
 8009b80:	697a      	ldr	r2, [r7, #20]
 8009b82:	440a      	add	r2, r1
 8009b84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b8c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	695b      	ldr	r3, [r3, #20]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d07e      	beq.n	8009c94 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	f003 030f 	and.w	r3, r3, #15
 8009ba6:	2101      	movs	r1, #1
 8009ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8009bac:	6979      	ldr	r1, [r7, #20]
 8009bae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	634b      	str	r3, [r1, #52]	; 0x34
 8009bb6:	e06d      	b.n	8009c94 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	015a      	lsls	r2, r3, #5
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bc4:	691b      	ldr	r3, [r3, #16]
 8009bc6:	693a      	ldr	r2, [r7, #16]
 8009bc8:	0151      	lsls	r1, r2, #5
 8009bca:	697a      	ldr	r2, [r7, #20]
 8009bcc:	440a      	add	r2, r1
 8009bce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bd2:	0cdb      	lsrs	r3, r3, #19
 8009bd4:	04db      	lsls	r3, r3, #19
 8009bd6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	015a      	lsls	r2, r3, #5
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	4413      	add	r3, r2
 8009be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009be4:	691b      	ldr	r3, [r3, #16]
 8009be6:	693a      	ldr	r2, [r7, #16]
 8009be8:	0151      	lsls	r1, r2, #5
 8009bea:	697a      	ldr	r2, [r7, #20]
 8009bec:	440a      	add	r2, r1
 8009bee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bf2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009bf6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009bfa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	695b      	ldr	r3, [r3, #20]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d003      	beq.n	8009c0c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	689a      	ldr	r2, [r3, #8]
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	015a      	lsls	r2, r3, #5
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	4413      	add	r3, r2
 8009c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c18:	691b      	ldr	r3, [r3, #16]
 8009c1a:	693a      	ldr	r2, [r7, #16]
 8009c1c:	0151      	lsls	r1, r2, #5
 8009c1e:	697a      	ldr	r2, [r7, #20]
 8009c20:	440a      	add	r2, r1
 8009c22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c2a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	015a      	lsls	r2, r3, #5
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	4413      	add	r3, r2
 8009c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c38:	691a      	ldr	r2, [r3, #16]
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c42:	6939      	ldr	r1, [r7, #16]
 8009c44:	0148      	lsls	r0, r1, #5
 8009c46:	6979      	ldr	r1, [r7, #20]
 8009c48:	4401      	add	r1, r0
 8009c4a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009c52:	79fb      	ldrb	r3, [r7, #7]
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d10d      	bne.n	8009c74 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d009      	beq.n	8009c74 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	68d9      	ldr	r1, [r3, #12]
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	015a      	lsls	r2, r3, #5
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	4413      	add	r3, r2
 8009c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c70:	460a      	mov	r2, r1
 8009c72:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	015a      	lsls	r2, r3, #5
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	693a      	ldr	r2, [r7, #16]
 8009c84:	0151      	lsls	r1, r2, #5
 8009c86:	697a      	ldr	r2, [r7, #20]
 8009c88:	440a      	add	r2, r1
 8009c8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009c92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c94:	2300      	movs	r3, #0
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	371c      	adds	r7, #28
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca0:	4770      	bx	lr

08009ca2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009ca2:	b480      	push	{r7}
 8009ca4:	b089      	sub	sp, #36	; 0x24
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	60f8      	str	r0, [r7, #12]
 8009caa:	60b9      	str	r1, [r7, #8]
 8009cac:	4611      	mov	r1, r2
 8009cae:	461a      	mov	r2, r3
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	71fb      	strb	r3, [r7, #7]
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009cc0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d123      	bne.n	8009d10 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009cc8:	88bb      	ldrh	r3, [r7, #4]
 8009cca:	3303      	adds	r3, #3
 8009ccc:	089b      	lsrs	r3, r3, #2
 8009cce:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	61bb      	str	r3, [r7, #24]
 8009cd4:	e018      	b.n	8009d08 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009cd6:	79fb      	ldrb	r3, [r7, #7]
 8009cd8:	031a      	lsls	r2, r3, #12
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	4413      	add	r3, r2
 8009cde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009cea:	69fb      	ldr	r3, [r7, #28]
 8009cec:	3301      	adds	r3, #1
 8009cee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009cf6:	69fb      	ldr	r3, [r7, #28]
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	3301      	adds	r3, #1
 8009d06:	61bb      	str	r3, [r7, #24]
 8009d08:	69ba      	ldr	r2, [r7, #24]
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d3e2      	bcc.n	8009cd6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3724      	adds	r7, #36	; 0x24
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr

08009d1e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009d1e:	b480      	push	{r7}
 8009d20:	b08b      	sub	sp, #44	; 0x2c
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	60f8      	str	r0, [r7, #12]
 8009d26:	60b9      	str	r1, [r7, #8]
 8009d28:	4613      	mov	r3, r2
 8009d2a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009d34:	88fb      	ldrh	r3, [r7, #6]
 8009d36:	089b      	lsrs	r3, r3, #2
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009d3c:	88fb      	ldrh	r3, [r7, #6]
 8009d3e:	f003 0303 	and.w	r3, r3, #3
 8009d42:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009d44:	2300      	movs	r3, #0
 8009d46:	623b      	str	r3, [r7, #32]
 8009d48:	e014      	b.n	8009d74 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d54:	601a      	str	r2, [r3, #0]
    pDest++;
 8009d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d58:	3301      	adds	r3, #1
 8009d5a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5e:	3301      	adds	r3, #1
 8009d60:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d64:	3301      	adds	r3, #1
 8009d66:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009d6e:	6a3b      	ldr	r3, [r7, #32]
 8009d70:	3301      	adds	r3, #1
 8009d72:	623b      	str	r3, [r7, #32]
 8009d74:	6a3a      	ldr	r2, [r7, #32]
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d3e6      	bcc.n	8009d4a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009d7c:	8bfb      	ldrh	r3, [r7, #30]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d01e      	beq.n	8009dc0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009d82:	2300      	movs	r3, #0
 8009d84:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	f107 0310 	add.w	r3, r7, #16
 8009d92:	6812      	ldr	r2, [r2, #0]
 8009d94:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009d96:	693a      	ldr	r2, [r7, #16]
 8009d98:	6a3b      	ldr	r3, [r7, #32]
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	00db      	lsls	r3, r3, #3
 8009d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8009da2:	b2da      	uxtb	r2, r3
 8009da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da6:	701a      	strb	r2, [r3, #0]
      i++;
 8009da8:	6a3b      	ldr	r3, [r7, #32]
 8009daa:	3301      	adds	r3, #1
 8009dac:	623b      	str	r3, [r7, #32]
      pDest++;
 8009dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db0:	3301      	adds	r3, #1
 8009db2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009db4:	8bfb      	ldrh	r3, [r7, #30]
 8009db6:	3b01      	subs	r3, #1
 8009db8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009dba:	8bfb      	ldrh	r3, [r7, #30]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d1ea      	bne.n	8009d96 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	372c      	adds	r7, #44	; 0x2c
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr

08009dce <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009dce:	b480      	push	{r7}
 8009dd0:	b085      	sub	sp, #20
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
 8009dd6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	785b      	ldrb	r3, [r3, #1]
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d12c      	bne.n	8009e44 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	015a      	lsls	r2, r3, #5
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	4413      	add	r3, r2
 8009df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	db12      	blt.n	8009e22 <USB_EPSetStall+0x54>
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d00f      	beq.n	8009e22 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	015a      	lsls	r2, r3, #5
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	4413      	add	r3, r2
 8009e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	68ba      	ldr	r2, [r7, #8]
 8009e12:	0151      	lsls	r1, r2, #5
 8009e14:	68fa      	ldr	r2, [r7, #12]
 8009e16:	440a      	add	r2, r1
 8009e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e1c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009e20:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	015a      	lsls	r2, r3, #5
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	4413      	add	r3, r2
 8009e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	68ba      	ldr	r2, [r7, #8]
 8009e32:	0151      	lsls	r1, r2, #5
 8009e34:	68fa      	ldr	r2, [r7, #12]
 8009e36:	440a      	add	r2, r1
 8009e38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009e40:	6013      	str	r3, [r2, #0]
 8009e42:	e02b      	b.n	8009e9c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	015a      	lsls	r2, r3, #5
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	db12      	blt.n	8009e7c <USB_EPSetStall+0xae>
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d00f      	beq.n	8009e7c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	015a      	lsls	r2, r3, #5
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	4413      	add	r3, r2
 8009e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	68ba      	ldr	r2, [r7, #8]
 8009e6c:	0151      	lsls	r1, r2, #5
 8009e6e:	68fa      	ldr	r2, [r7, #12]
 8009e70:	440a      	add	r2, r1
 8009e72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009e7a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	015a      	lsls	r2, r3, #5
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	4413      	add	r3, r2
 8009e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	68ba      	ldr	r2, [r7, #8]
 8009e8c:	0151      	lsls	r1, r2, #5
 8009e8e:	68fa      	ldr	r2, [r7, #12]
 8009e90:	440a      	add	r2, r1
 8009e92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009e9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e9c:	2300      	movs	r3, #0
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3714      	adds	r7, #20
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr

08009eaa <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009eaa:	b480      	push	{r7}
 8009eac:	b085      	sub	sp, #20
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
 8009eb2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	785b      	ldrb	r3, [r3, #1]
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d128      	bne.n	8009f18 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	015a      	lsls	r2, r3, #5
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	4413      	add	r3, r2
 8009ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	68ba      	ldr	r2, [r7, #8]
 8009ed6:	0151      	lsls	r1, r2, #5
 8009ed8:	68fa      	ldr	r2, [r7, #12]
 8009eda:	440a      	add	r2, r1
 8009edc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ee0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ee4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	78db      	ldrb	r3, [r3, #3]
 8009eea:	2b03      	cmp	r3, #3
 8009eec:	d003      	beq.n	8009ef6 <USB_EPClearStall+0x4c>
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	78db      	ldrb	r3, [r3, #3]
 8009ef2:	2b02      	cmp	r3, #2
 8009ef4:	d138      	bne.n	8009f68 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	015a      	lsls	r2, r3, #5
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	4413      	add	r3, r2
 8009efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	68ba      	ldr	r2, [r7, #8]
 8009f06:	0151      	lsls	r1, r2, #5
 8009f08:	68fa      	ldr	r2, [r7, #12]
 8009f0a:	440a      	add	r2, r1
 8009f0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f14:	6013      	str	r3, [r2, #0]
 8009f16:	e027      	b.n	8009f68 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	015a      	lsls	r2, r3, #5
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	4413      	add	r3, r2
 8009f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68ba      	ldr	r2, [r7, #8]
 8009f28:	0151      	lsls	r1, r2, #5
 8009f2a:	68fa      	ldr	r2, [r7, #12]
 8009f2c:	440a      	add	r2, r1
 8009f2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009f36:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	78db      	ldrb	r3, [r3, #3]
 8009f3c:	2b03      	cmp	r3, #3
 8009f3e:	d003      	beq.n	8009f48 <USB_EPClearStall+0x9e>
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	78db      	ldrb	r3, [r3, #3]
 8009f44:	2b02      	cmp	r3, #2
 8009f46:	d10f      	bne.n	8009f68 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	015a      	lsls	r2, r3, #5
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	4413      	add	r3, r2
 8009f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	68ba      	ldr	r2, [r7, #8]
 8009f58:	0151      	lsls	r1, r2, #5
 8009f5a:	68fa      	ldr	r2, [r7, #12]
 8009f5c:	440a      	add	r2, r1
 8009f5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f66:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009f68:	2300      	movs	r3, #0
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3714      	adds	r7, #20
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr

08009f76 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009f76:	b480      	push	{r7}
 8009f78:	b085      	sub	sp, #20
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
 8009f7e:	460b      	mov	r3, r1
 8009f80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	68fa      	ldr	r2, [r7, #12]
 8009f90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f94:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009f98:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	78fb      	ldrb	r3, [r7, #3]
 8009fa4:	011b      	lsls	r3, r3, #4
 8009fa6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009faa:	68f9      	ldr	r1, [r7, #12]
 8009fac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009fb4:	2300      	movs	r3, #0
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3714      	adds	r7, #20
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr

08009fc2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009fc2:	b480      	push	{r7}
 8009fc4:	b085      	sub	sp, #20
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	68fa      	ldr	r2, [r7, #12]
 8009fd8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009fdc:	f023 0303 	bic.w	r3, r3, #3
 8009fe0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	68fa      	ldr	r2, [r7, #12]
 8009fec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ff0:	f023 0302 	bic.w	r3, r3, #2
 8009ff4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009ff6:	2300      	movs	r3, #0
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3714      	adds	r7, #20
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr

0800a004 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a004:	b480      	push	{r7}
 800a006:	b085      	sub	sp, #20
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	68fa      	ldr	r2, [r7, #12]
 800a01a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a01e:	f023 0303 	bic.w	r3, r3, #3
 800a022:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	68fa      	ldr	r2, [r7, #12]
 800a02e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a032:	f043 0302 	orr.w	r3, r3, #2
 800a036:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a038:	2300      	movs	r3, #0
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3714      	adds	r7, #20
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr

0800a046 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a046:	b480      	push	{r7}
 800a048:	b085      	sub	sp, #20
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	695b      	ldr	r3, [r3, #20]
 800a052:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	699b      	ldr	r3, [r3, #24]
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	4013      	ands	r3, r2
 800a05c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a05e:	68fb      	ldr	r3, [r7, #12]
}
 800a060:	4618      	mov	r0, r3
 800a062:	3714      	adds	r7, #20
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b085      	sub	sp, #20
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a07e:	699b      	ldr	r3, [r3, #24]
 800a080:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a088:	69db      	ldr	r3, [r3, #28]
 800a08a:	68ba      	ldr	r2, [r7, #8]
 800a08c:	4013      	ands	r3, r2
 800a08e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	0c1b      	lsrs	r3, r3, #16
}
 800a094:	4618      	mov	r0, r3
 800a096:	3714      	adds	r7, #20
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr

0800a0a0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b085      	sub	sp, #20
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0b2:	699b      	ldr	r3, [r3, #24]
 800a0b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0bc:	69db      	ldr	r3, [r3, #28]
 800a0be:	68ba      	ldr	r2, [r7, #8]
 800a0c0:	4013      	ands	r3, r2
 800a0c2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	b29b      	uxth	r3, r3
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3714      	adds	r7, #20
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b085      	sub	sp, #20
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	460b      	mov	r3, r1
 800a0de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a0e4:	78fb      	ldrb	r3, [r7, #3]
 800a0e6:	015a      	lsls	r2, r3, #5
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	4413      	add	r3, r2
 800a0ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0f0:	689b      	ldr	r3, [r3, #8]
 800a0f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0fa:	695b      	ldr	r3, [r3, #20]
 800a0fc:	68ba      	ldr	r2, [r7, #8]
 800a0fe:	4013      	ands	r3, r2
 800a100:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a102:	68bb      	ldr	r3, [r7, #8]
}
 800a104:	4618      	mov	r0, r3
 800a106:	3714      	adds	r7, #20
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a110:	b480      	push	{r7}
 800a112:	b087      	sub	sp, #28
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	460b      	mov	r3, r1
 800a11a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a126:	691b      	ldr	r3, [r3, #16]
 800a128:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a132:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a134:	78fb      	ldrb	r3, [r7, #3]
 800a136:	f003 030f 	and.w	r3, r3, #15
 800a13a:	68fa      	ldr	r2, [r7, #12]
 800a13c:	fa22 f303 	lsr.w	r3, r2, r3
 800a140:	01db      	lsls	r3, r3, #7
 800a142:	b2db      	uxtb	r3, r3
 800a144:	693a      	ldr	r2, [r7, #16]
 800a146:	4313      	orrs	r3, r2
 800a148:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a14a:	78fb      	ldrb	r3, [r7, #3]
 800a14c:	015a      	lsls	r2, r3, #5
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	4413      	add	r3, r2
 800a152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	693a      	ldr	r2, [r7, #16]
 800a15a:	4013      	ands	r3, r2
 800a15c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a15e:	68bb      	ldr	r3, [r7, #8]
}
 800a160:	4618      	mov	r0, r3
 800a162:	371c      	adds	r7, #28
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr

0800a16c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	695b      	ldr	r3, [r3, #20]
 800a178:	f003 0301 	and.w	r3, r3, #1
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	370c      	adds	r7, #12
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr

0800a188 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a188:	b480      	push	{r7}
 800a18a:	b085      	sub	sp, #20
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	68fa      	ldr	r2, [r7, #12]
 800a19e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1a2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a1a6:	f023 0307 	bic.w	r3, r3, #7
 800a1aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	68fa      	ldr	r2, [r7, #12]
 800a1b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a1c0:	2300      	movs	r3, #0
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3714      	adds	r7, #20
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
	...

0800a1d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b087      	sub	sp, #28
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	460b      	mov	r3, r1
 800a1da:	607a      	str	r2, [r7, #4]
 800a1dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	333c      	adds	r3, #60	; 0x3c
 800a1e6:	3304      	adds	r3, #4
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	4a26      	ldr	r2, [pc, #152]	; (800a288 <USB_EP0_OutStart+0xb8>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d90a      	bls.n	800a20a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a200:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a204:	d101      	bne.n	800a20a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a206:	2300      	movs	r3, #0
 800a208:	e037      	b.n	800a27a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a210:	461a      	mov	r2, r3
 800a212:	2300      	movs	r3, #0
 800a214:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a21c:	691b      	ldr	r3, [r3, #16]
 800a21e:	697a      	ldr	r2, [r7, #20]
 800a220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a224:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a228:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a230:	691b      	ldr	r3, [r3, #16]
 800a232:	697a      	ldr	r2, [r7, #20]
 800a234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a238:	f043 0318 	orr.w	r3, r3, #24
 800a23c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a244:	691b      	ldr	r3, [r3, #16]
 800a246:	697a      	ldr	r2, [r7, #20]
 800a248:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a24c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a250:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a252:	7afb      	ldrb	r3, [r7, #11]
 800a254:	2b01      	cmp	r3, #1
 800a256:	d10f      	bne.n	800a278 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a25e:	461a      	mov	r2, r3
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	697a      	ldr	r2, [r7, #20]
 800a26e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a272:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a276:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a278:	2300      	movs	r3, #0
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	371c      	adds	r7, #28
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr
 800a286:	bf00      	nop
 800a288:	4f54300a 	.word	0x4f54300a

0800a28c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b085      	sub	sp, #20
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a294:	2300      	movs	r3, #0
 800a296:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	3301      	adds	r3, #1
 800a29c:	60fb      	str	r3, [r7, #12]
 800a29e:	4a13      	ldr	r2, [pc, #76]	; (800a2ec <USB_CoreReset+0x60>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d901      	bls.n	800a2a8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800a2a4:	2303      	movs	r3, #3
 800a2a6:	e01a      	b.n	800a2de <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	daf3      	bge.n	800a298 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	691b      	ldr	r3, [r3, #16]
 800a2b8:	f043 0201 	orr.w	r2, r3, #1
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	60fb      	str	r3, [r7, #12]
 800a2c6:	4a09      	ldr	r2, [pc, #36]	; (800a2ec <USB_CoreReset+0x60>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d901      	bls.n	800a2d0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800a2cc:	2303      	movs	r3, #3
 800a2ce:	e006      	b.n	800a2de <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	691b      	ldr	r3, [r3, #16]
 800a2d4:	f003 0301 	and.w	r3, r3, #1
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d0f1      	beq.n	800a2c0 <USB_CoreReset+0x34>

  return HAL_OK;
 800a2dc:	2300      	movs	r3, #0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3714      	adds	r7, #20
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr
 800a2ea:	bf00      	nop
 800a2ec:	00030d40 	.word	0x00030d40

0800a2f0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b084      	sub	sp, #16
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a2fc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a300:	f003 fdaa 	bl	800de58 <USBD_static_malloc>
 800a304:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d105      	bne.n	800a318 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a314:	2302      	movs	r3, #2
 800a316:	e066      	b.n	800a3e6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	68fa      	ldr	r2, [r7, #12]
 800a31c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	7c1b      	ldrb	r3, [r3, #16]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d119      	bne.n	800a35c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a328:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a32c:	2202      	movs	r2, #2
 800a32e:	2181      	movs	r1, #129	; 0x81
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f003 fc6e 	bl	800dc12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2201      	movs	r2, #1
 800a33a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a33c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a340:	2202      	movs	r2, #2
 800a342:	2101      	movs	r1, #1
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f003 fc64 	bl	800dc12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2201      	movs	r2, #1
 800a34e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2210      	movs	r2, #16
 800a356:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a35a:	e016      	b.n	800a38a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a35c:	2340      	movs	r3, #64	; 0x40
 800a35e:	2202      	movs	r2, #2
 800a360:	2181      	movs	r1, #129	; 0x81
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f003 fc55 	bl	800dc12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2201      	movs	r2, #1
 800a36c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a36e:	2340      	movs	r3, #64	; 0x40
 800a370:	2202      	movs	r2, #2
 800a372:	2101      	movs	r1, #1
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f003 fc4c 	bl	800dc12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2201      	movs	r2, #1
 800a37e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2210      	movs	r2, #16
 800a386:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a38a:	2308      	movs	r3, #8
 800a38c:	2203      	movs	r2, #3
 800a38e:	2182      	movs	r1, #130	; 0x82
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f003 fc3e 	bl	800dc12 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2201      	movs	r2, #1
 800a39a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	7c1b      	ldrb	r3, [r3, #16]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d109      	bne.n	800a3d4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a3c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3ca:	2101      	movs	r1, #1
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f003 fd0f 	bl	800ddf0 <USBD_LL_PrepareReceive>
 800a3d2:	e007      	b.n	800a3e4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a3da:	2340      	movs	r3, #64	; 0x40
 800a3dc:	2101      	movs	r1, #1
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f003 fd06 	bl	800ddf0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b082      	sub	sp, #8
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a3fa:	2181      	movs	r1, #129	; 0x81
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f003 fc2e 	bl	800dc5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2200      	movs	r2, #0
 800a406:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a408:	2101      	movs	r1, #1
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f003 fc27 	bl	800dc5e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a418:	2182      	movs	r1, #130	; 0x82
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f003 fc1f 	bl	800dc5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2200      	movs	r2, #0
 800a424:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2200      	movs	r2, #0
 800a42c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a436:	2b00      	cmp	r3, #0
 800a438:	d00e      	beq.n	800a458 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a44a:	4618      	mov	r0, r3
 800a44c:	f003 fd12 	bl	800de74 <USBD_static_free>
    pdev->pClassData = NULL;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a458:	2300      	movs	r3, #0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3708      	adds	r7, #8
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
	...

0800a464 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b086      	sub	sp, #24
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a474:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a476:	2300      	movs	r3, #0
 800a478:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a47a:	2300      	movs	r3, #0
 800a47c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a47e:	2300      	movs	r3, #0
 800a480:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d101      	bne.n	800a48c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a488:	2303      	movs	r3, #3
 800a48a:	e0af      	b.n	800a5ec <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a494:	2b00      	cmp	r3, #0
 800a496:	d03f      	beq.n	800a518 <USBD_CDC_Setup+0xb4>
 800a498:	2b20      	cmp	r3, #32
 800a49a:	f040 809f 	bne.w	800a5dc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	88db      	ldrh	r3, [r3, #6]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d02e      	beq.n	800a504 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	b25b      	sxtb	r3, r3
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	da16      	bge.n	800a4de <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	683a      	ldr	r2, [r7, #0]
 800a4ba:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a4bc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a4be:	683a      	ldr	r2, [r7, #0]
 800a4c0:	88d2      	ldrh	r2, [r2, #6]
 800a4c2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	88db      	ldrh	r3, [r3, #6]
 800a4c8:	2b07      	cmp	r3, #7
 800a4ca:	bf28      	it	cs
 800a4cc:	2307      	movcs	r3, #7
 800a4ce:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	89fa      	ldrh	r2, [r7, #14]
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f001 fb19 	bl	800bb0e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a4dc:	e085      	b.n	800a5ea <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	785a      	ldrb	r2, [r3, #1]
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	88db      	ldrh	r3, [r3, #6]
 800a4ec:	b2da      	uxtb	r2, r3
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a4f4:	6939      	ldr	r1, [r7, #16]
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	88db      	ldrh	r3, [r3, #6]
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f001 fb32 	bl	800bb66 <USBD_CtlPrepareRx>
      break;
 800a502:	e072      	b.n	800a5ea <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	683a      	ldr	r2, [r7, #0]
 800a50e:	7850      	ldrb	r0, [r2, #1]
 800a510:	2200      	movs	r2, #0
 800a512:	6839      	ldr	r1, [r7, #0]
 800a514:	4798      	blx	r3
      break;
 800a516:	e068      	b.n	800a5ea <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	785b      	ldrb	r3, [r3, #1]
 800a51c:	2b0b      	cmp	r3, #11
 800a51e:	d852      	bhi.n	800a5c6 <USBD_CDC_Setup+0x162>
 800a520:	a201      	add	r2, pc, #4	; (adr r2, 800a528 <USBD_CDC_Setup+0xc4>)
 800a522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a526:	bf00      	nop
 800a528:	0800a559 	.word	0x0800a559
 800a52c:	0800a5d5 	.word	0x0800a5d5
 800a530:	0800a5c7 	.word	0x0800a5c7
 800a534:	0800a5c7 	.word	0x0800a5c7
 800a538:	0800a5c7 	.word	0x0800a5c7
 800a53c:	0800a5c7 	.word	0x0800a5c7
 800a540:	0800a5c7 	.word	0x0800a5c7
 800a544:	0800a5c7 	.word	0x0800a5c7
 800a548:	0800a5c7 	.word	0x0800a5c7
 800a54c:	0800a5c7 	.word	0x0800a5c7
 800a550:	0800a583 	.word	0x0800a583
 800a554:	0800a5ad 	.word	0x0800a5ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	2b03      	cmp	r3, #3
 800a562:	d107      	bne.n	800a574 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a564:	f107 030a 	add.w	r3, r7, #10
 800a568:	2202      	movs	r2, #2
 800a56a:	4619      	mov	r1, r3
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f001 face 	bl	800bb0e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a572:	e032      	b.n	800a5da <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a574:	6839      	ldr	r1, [r7, #0]
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f001 fa58 	bl	800ba2c <USBD_CtlError>
            ret = USBD_FAIL;
 800a57c:	2303      	movs	r3, #3
 800a57e:	75fb      	strb	r3, [r7, #23]
          break;
 800a580:	e02b      	b.n	800a5da <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	2b03      	cmp	r3, #3
 800a58c:	d107      	bne.n	800a59e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a58e:	f107 030d 	add.w	r3, r7, #13
 800a592:	2201      	movs	r2, #1
 800a594:	4619      	mov	r1, r3
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f001 fab9 	bl	800bb0e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a59c:	e01d      	b.n	800a5da <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a59e:	6839      	ldr	r1, [r7, #0]
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f001 fa43 	bl	800ba2c <USBD_CtlError>
            ret = USBD_FAIL;
 800a5a6:	2303      	movs	r3, #3
 800a5a8:	75fb      	strb	r3, [r7, #23]
          break;
 800a5aa:	e016      	b.n	800a5da <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	2b03      	cmp	r3, #3
 800a5b6:	d00f      	beq.n	800a5d8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a5b8:	6839      	ldr	r1, [r7, #0]
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f001 fa36 	bl	800ba2c <USBD_CtlError>
            ret = USBD_FAIL;
 800a5c0:	2303      	movs	r3, #3
 800a5c2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a5c4:	e008      	b.n	800a5d8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a5c6:	6839      	ldr	r1, [r7, #0]
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f001 fa2f 	bl	800ba2c <USBD_CtlError>
          ret = USBD_FAIL;
 800a5ce:	2303      	movs	r3, #3
 800a5d0:	75fb      	strb	r3, [r7, #23]
          break;
 800a5d2:	e002      	b.n	800a5da <USBD_CDC_Setup+0x176>
          break;
 800a5d4:	bf00      	nop
 800a5d6:	e008      	b.n	800a5ea <USBD_CDC_Setup+0x186>
          break;
 800a5d8:	bf00      	nop
      }
      break;
 800a5da:	e006      	b.n	800a5ea <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a5dc:	6839      	ldr	r1, [r7, #0]
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f001 fa24 	bl	800ba2c <USBD_CtlError>
      ret = USBD_FAIL;
 800a5e4:	2303      	movs	r3, #3
 800a5e6:	75fb      	strb	r3, [r7, #23]
      break;
 800a5e8:	bf00      	nop
  }

  return (uint8_t)ret;
 800a5ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3718      	adds	r7, #24
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a606:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d101      	bne.n	800a616 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a612:	2303      	movs	r3, #3
 800a614:	e04f      	b.n	800a6b6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a61c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a61e:	78fa      	ldrb	r2, [r7, #3]
 800a620:	6879      	ldr	r1, [r7, #4]
 800a622:	4613      	mov	r3, r2
 800a624:	009b      	lsls	r3, r3, #2
 800a626:	4413      	add	r3, r2
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	440b      	add	r3, r1
 800a62c:	3318      	adds	r3, #24
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d029      	beq.n	800a688 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a634:	78fa      	ldrb	r2, [r7, #3]
 800a636:	6879      	ldr	r1, [r7, #4]
 800a638:	4613      	mov	r3, r2
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	4413      	add	r3, r2
 800a63e:	009b      	lsls	r3, r3, #2
 800a640:	440b      	add	r3, r1
 800a642:	3318      	adds	r3, #24
 800a644:	681a      	ldr	r2, [r3, #0]
 800a646:	78f9      	ldrb	r1, [r7, #3]
 800a648:	68f8      	ldr	r0, [r7, #12]
 800a64a:	460b      	mov	r3, r1
 800a64c:	00db      	lsls	r3, r3, #3
 800a64e:	1a5b      	subs	r3, r3, r1
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	4403      	add	r3, r0
 800a654:	3344      	adds	r3, #68	; 0x44
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	fbb2 f1f3 	udiv	r1, r2, r3
 800a65c:	fb03 f301 	mul.w	r3, r3, r1
 800a660:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a662:	2b00      	cmp	r3, #0
 800a664:	d110      	bne.n	800a688 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a666:	78fa      	ldrb	r2, [r7, #3]
 800a668:	6879      	ldr	r1, [r7, #4]
 800a66a:	4613      	mov	r3, r2
 800a66c:	009b      	lsls	r3, r3, #2
 800a66e:	4413      	add	r3, r2
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	440b      	add	r3, r1
 800a674:	3318      	adds	r3, #24
 800a676:	2200      	movs	r2, #0
 800a678:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a67a:	78f9      	ldrb	r1, [r7, #3]
 800a67c:	2300      	movs	r3, #0
 800a67e:	2200      	movs	r2, #0
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f003 fb94 	bl	800ddae <USBD_LL_Transmit>
 800a686:	e015      	b.n	800a6b4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a696:	691b      	ldr	r3, [r3, #16]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d00b      	beq.n	800a6b4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6a2:	691b      	ldr	r3, [r3, #16]
 800a6a4:	68ba      	ldr	r2, [r7, #8]
 800a6a6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a6aa:	68ba      	ldr	r2, [r7, #8]
 800a6ac:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a6b0:	78fa      	ldrb	r2, [r7, #3]
 800a6b2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a6b4:	2300      	movs	r3, #0
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3710      	adds	r7, #16
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}

0800a6be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a6be:	b580      	push	{r7, lr}
 800a6c0:	b084      	sub	sp, #16
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6d0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d101      	bne.n	800a6e0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a6dc:	2303      	movs	r3, #3
 800a6de:	e015      	b.n	800a70c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a6e0:	78fb      	ldrb	r3, [r7, #3]
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f003 fba4 	bl	800de32 <USBD_LL_GetRxDataSize>
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6f8:	68db      	ldr	r3, [r3, #12]
 800a6fa:	68fa      	ldr	r2, [r7, #12]
 800a6fc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a700:	68fa      	ldr	r2, [r7, #12]
 800a702:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a706:	4611      	mov	r1, r2
 800a708:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a70a:	2300      	movs	r3, #0
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3710      	adds	r7, #16
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b084      	sub	sp, #16
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a722:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d101      	bne.n	800a72e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a72a:	2303      	movs	r3, #3
 800a72c:	e01b      	b.n	800a766 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d015      	beq.n	800a764 <USBD_CDC_EP0_RxReady+0x50>
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a73e:	2bff      	cmp	r3, #255	; 0xff
 800a740:	d010      	beq.n	800a764 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a748:	689b      	ldr	r3, [r3, #8]
 800a74a:	68fa      	ldr	r2, [r7, #12]
 800a74c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a750:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a752:	68fa      	ldr	r2, [r7, #12]
 800a754:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a758:	b292      	uxth	r2, r2
 800a75a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	22ff      	movs	r2, #255	; 0xff
 800a760:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a764:	2300      	movs	r3, #0
}
 800a766:	4618      	mov	r0, r3
 800a768:	3710      	adds	r7, #16
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
	...

0800a770 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2243      	movs	r2, #67	; 0x43
 800a77c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a77e:	4b03      	ldr	r3, [pc, #12]	; (800a78c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a780:	4618      	mov	r0, r3
 800a782:	370c      	adds	r7, #12
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr
 800a78c:	20000090 	.word	0x20000090

0800a790 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a790:	b480      	push	{r7}
 800a792:	b083      	sub	sp, #12
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2243      	movs	r2, #67	; 0x43
 800a79c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a79e:	4b03      	ldr	r3, [pc, #12]	; (800a7ac <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr
 800a7ac:	2000004c 	.word	0x2000004c

0800a7b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b083      	sub	sp, #12
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2243      	movs	r2, #67	; 0x43
 800a7bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a7be:	4b03      	ldr	r3, [pc, #12]	; (800a7cc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	370c      	adds	r7, #12
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr
 800a7cc:	200000d4 	.word	0x200000d4

0800a7d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	220a      	movs	r2, #10
 800a7dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a7de:	4b03      	ldr	r3, [pc, #12]	; (800a7ec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr
 800a7ec:	20000008 	.word	0x20000008

0800a7f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d101      	bne.n	800a804 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a800:	2303      	movs	r3, #3
 800a802:	e004      	b.n	800a80e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	683a      	ldr	r2, [r7, #0]
 800a808:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a80c:	2300      	movs	r3, #0
}
 800a80e:	4618      	mov	r0, r3
 800a810:	370c      	adds	r7, #12
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr

0800a81a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a81a:	b480      	push	{r7}
 800a81c:	b087      	sub	sp, #28
 800a81e:	af00      	add	r7, sp, #0
 800a820:	60f8      	str	r0, [r7, #12]
 800a822:	60b9      	str	r1, [r7, #8]
 800a824:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a82c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d101      	bne.n	800a838 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a834:	2303      	movs	r3, #3
 800a836:	e008      	b.n	800a84a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	68ba      	ldr	r2, [r7, #8]
 800a83c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a848:	2300      	movs	r3, #0
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	371c      	adds	r7, #28
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr

0800a856 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a856:	b480      	push	{r7}
 800a858:	b085      	sub	sp, #20
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
 800a85e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a866:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d101      	bne.n	800a872 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a86e:	2303      	movs	r3, #3
 800a870:	e004      	b.n	800a87c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	683a      	ldr	r2, [r7, #0]
 800a876:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a87a:	2300      	movs	r3, #0
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3714      	adds	r7, #20
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr

0800a888 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a896:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a898:	2301      	movs	r3, #1
 800a89a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d101      	bne.n	800a8aa <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a8a6:	2303      	movs	r3, #3
 800a8a8:	e01a      	b.n	800a8e0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d114      	bne.n	800a8de <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a8d2:	2181      	movs	r1, #129	; 0x81
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f003 fa6a 	bl	800ddae <USBD_LL_Transmit>

    ret = USBD_OK;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a8de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3710      	adds	r7, #16
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d101      	bne.n	800a906 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a902:	2303      	movs	r3, #3
 800a904:	e016      	b.n	800a934 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	7c1b      	ldrb	r3, [r3, #16]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d109      	bne.n	800a922 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a914:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a918:	2101      	movs	r1, #1
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f003 fa68 	bl	800ddf0 <USBD_LL_PrepareReceive>
 800a920:	e007      	b.n	800a932 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a928:	2340      	movs	r3, #64	; 0x40
 800a92a:	2101      	movs	r1, #1
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f003 fa5f 	bl	800ddf0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a932:	2300      	movs	r3, #0
}
 800a934:	4618      	mov	r0, r3
 800a936:	3710      	adds	r7, #16
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b086      	sub	sp, #24
 800a940:	af00      	add	r7, sp, #0
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	60b9      	str	r1, [r7, #8]
 800a946:	4613      	mov	r3, r2
 800a948:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d101      	bne.n	800a954 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a950:	2303      	movs	r3, #3
 800a952:	e01f      	b.n	800a994 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2200      	movs	r2, #0
 800a958:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2200      	movs	r2, #0
 800a960:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2200      	movs	r2, #0
 800a968:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d003      	beq.n	800a97a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	68ba      	ldr	r2, [r7, #8]
 800a976:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2201      	movs	r2, #1
 800a97e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	79fa      	ldrb	r2, [r7, #7]
 800a986:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a988:	68f8      	ldr	r0, [r7, #12]
 800a98a:	f003 f8db 	bl	800db44 <USBD_LL_Init>
 800a98e:	4603      	mov	r3, r0
 800a990:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a992:	7dfb      	ldrb	r3, [r7, #23]
}
 800a994:	4618      	mov	r0, r3
 800a996:	3718      	adds	r7, #24
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d101      	bne.n	800a9b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a9b0:	2303      	movs	r3, #3
 800a9b2:	e016      	b.n	800a9e2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	683a      	ldr	r2, [r7, #0]
 800a9b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d00b      	beq.n	800a9e0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d0:	f107 020e 	add.w	r2, r7, #14
 800a9d4:	4610      	mov	r0, r2
 800a9d6:	4798      	blx	r3
 800a9d8:	4602      	mov	r2, r0
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a9e0:	2300      	movs	r3, #0
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3710      	adds	r7, #16
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b082      	sub	sp, #8
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f003 f8f2 	bl	800dbdc <USBD_LL_Start>
 800a9f8:	4603      	mov	r3, r0
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3708      	adds	r7, #8
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}

0800aa02 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800aa02:	b480      	push	{r7}
 800aa04:	b083      	sub	sp, #12
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aa0a:	2300      	movs	r3, #0
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	370c      	adds	r7, #12
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	460b      	mov	r3, r1
 800aa22:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800aa24:	2303      	movs	r3, #3
 800aa26:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d009      	beq.n	800aa46 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	78fa      	ldrb	r2, [r7, #3]
 800aa3c:	4611      	mov	r1, r2
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	4798      	blx	r3
 800aa42:	4603      	mov	r3, r0
 800aa44:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800aa46:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3710      	adds	r7, #16
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	460b      	mov	r3, r1
 800aa5a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d007      	beq.n	800aa76 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	78fa      	ldrb	r2, [r7, #3]
 800aa70:	4611      	mov	r1, r2
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	4798      	blx	r3
  }

  return USBD_OK;
 800aa76:	2300      	movs	r3, #0
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3708      	adds	r7, #8
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b084      	sub	sp, #16
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa90:	6839      	ldr	r1, [r7, #0]
 800aa92:	4618      	mov	r0, r3
 800aa94:	f000 ff90 	bl	800b9b8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aab4:	f003 031f 	and.w	r3, r3, #31
 800aab8:	2b02      	cmp	r3, #2
 800aaba:	d01a      	beq.n	800aaf2 <USBD_LL_SetupStage+0x72>
 800aabc:	2b02      	cmp	r3, #2
 800aabe:	d822      	bhi.n	800ab06 <USBD_LL_SetupStage+0x86>
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d002      	beq.n	800aaca <USBD_LL_SetupStage+0x4a>
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	d00a      	beq.n	800aade <USBD_LL_SetupStage+0x5e>
 800aac8:	e01d      	b.n	800ab06 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aad0:	4619      	mov	r1, r3
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 fa62 	bl	800af9c <USBD_StdDevReq>
 800aad8:	4603      	mov	r3, r0
 800aada:	73fb      	strb	r3, [r7, #15]
      break;
 800aadc:	e020      	b.n	800ab20 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aae4:	4619      	mov	r1, r3
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 fac6 	bl	800b078 <USBD_StdItfReq>
 800aaec:	4603      	mov	r3, r0
 800aaee:	73fb      	strb	r3, [r7, #15]
      break;
 800aaf0:	e016      	b.n	800ab20 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aaf8:	4619      	mov	r1, r3
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 fb05 	bl	800b10a <USBD_StdEPReq>
 800ab00:	4603      	mov	r3, r0
 800ab02:	73fb      	strb	r3, [r7, #15]
      break;
 800ab04:	e00c      	b.n	800ab20 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ab0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ab10:	b2db      	uxtb	r3, r3
 800ab12:	4619      	mov	r1, r3
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f003 f8c1 	bl	800dc9c <USBD_LL_StallEP>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	73fb      	strb	r3, [r7, #15]
      break;
 800ab1e:	bf00      	nop
  }

  return ret;
 800ab20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3710      	adds	r7, #16
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}

0800ab2a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ab2a:	b580      	push	{r7, lr}
 800ab2c:	b086      	sub	sp, #24
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	60f8      	str	r0, [r7, #12]
 800ab32:	460b      	mov	r3, r1
 800ab34:	607a      	str	r2, [r7, #4]
 800ab36:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ab38:	7afb      	ldrb	r3, [r7, #11]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d138      	bne.n	800abb0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ab44:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ab4c:	2b03      	cmp	r3, #3
 800ab4e:	d14a      	bne.n	800abe6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	689a      	ldr	r2, [r3, #8]
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d913      	bls.n	800ab84 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	689a      	ldr	r2, [r3, #8]
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	68db      	ldr	r3, [r3, #12]
 800ab64:	1ad2      	subs	r2, r2, r3
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	68da      	ldr	r2, [r3, #12]
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	4293      	cmp	r3, r2
 800ab74:	bf28      	it	cs
 800ab76:	4613      	movcs	r3, r2
 800ab78:	461a      	mov	r2, r3
 800ab7a:	6879      	ldr	r1, [r7, #4]
 800ab7c:	68f8      	ldr	r0, [r7, #12]
 800ab7e:	f001 f80f 	bl	800bba0 <USBD_CtlContinueRx>
 800ab82:	e030      	b.n	800abe6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	2b03      	cmp	r3, #3
 800ab8e:	d10b      	bne.n	800aba8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab96:	691b      	ldr	r3, [r3, #16]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d005      	beq.n	800aba8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	68f8      	ldr	r0, [r7, #12]
 800aba6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800aba8:	68f8      	ldr	r0, [r7, #12]
 800abaa:	f001 f80a 	bl	800bbc2 <USBD_CtlSendStatus>
 800abae:	e01a      	b.n	800abe6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abb6:	b2db      	uxtb	r3, r3
 800abb8:	2b03      	cmp	r3, #3
 800abba:	d114      	bne.n	800abe6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abc2:	699b      	ldr	r3, [r3, #24]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d00e      	beq.n	800abe6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abce:	699b      	ldr	r3, [r3, #24]
 800abd0:	7afa      	ldrb	r2, [r7, #11]
 800abd2:	4611      	mov	r1, r2
 800abd4:	68f8      	ldr	r0, [r7, #12]
 800abd6:	4798      	blx	r3
 800abd8:	4603      	mov	r3, r0
 800abda:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800abdc:	7dfb      	ldrb	r3, [r7, #23]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d001      	beq.n	800abe6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800abe2:	7dfb      	ldrb	r3, [r7, #23]
 800abe4:	e000      	b.n	800abe8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800abe6:	2300      	movs	r3, #0
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3718      	adds	r7, #24
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b086      	sub	sp, #24
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	460b      	mov	r3, r1
 800abfa:	607a      	str	r2, [r7, #4]
 800abfc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800abfe:	7afb      	ldrb	r3, [r7, #11]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d16b      	bne.n	800acdc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	3314      	adds	r3, #20
 800ac08:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ac10:	2b02      	cmp	r3, #2
 800ac12:	d156      	bne.n	800acc2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	689a      	ldr	r2, [r3, #8]
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	68db      	ldr	r3, [r3, #12]
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d914      	bls.n	800ac4a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	689a      	ldr	r2, [r3, #8]
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	1ad2      	subs	r2, r2, r3
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	689b      	ldr	r3, [r3, #8]
 800ac32:	461a      	mov	r2, r3
 800ac34:	6879      	ldr	r1, [r7, #4]
 800ac36:	68f8      	ldr	r0, [r7, #12]
 800ac38:	f000 ff84 	bl	800bb44 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	2200      	movs	r2, #0
 800ac40:	2100      	movs	r1, #0
 800ac42:	68f8      	ldr	r0, [r7, #12]
 800ac44:	f003 f8d4 	bl	800ddf0 <USBD_LL_PrepareReceive>
 800ac48:	e03b      	b.n	800acc2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	68da      	ldr	r2, [r3, #12]
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d11c      	bne.n	800ac90 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	685a      	ldr	r2, [r3, #4]
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d316      	bcc.n	800ac90 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	685a      	ldr	r2, [r3, #4]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d20f      	bcs.n	800ac90 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ac70:	2200      	movs	r2, #0
 800ac72:	2100      	movs	r1, #0
 800ac74:	68f8      	ldr	r0, [r7, #12]
 800ac76:	f000 ff65 	bl	800bb44 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac82:	2300      	movs	r3, #0
 800ac84:	2200      	movs	r2, #0
 800ac86:	2100      	movs	r1, #0
 800ac88:	68f8      	ldr	r0, [r7, #12]
 800ac8a:	f003 f8b1 	bl	800ddf0 <USBD_LL_PrepareReceive>
 800ac8e:	e018      	b.n	800acc2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac96:	b2db      	uxtb	r3, r3
 800ac98:	2b03      	cmp	r3, #3
 800ac9a:	d10b      	bne.n	800acb4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aca2:	68db      	ldr	r3, [r3, #12]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d005      	beq.n	800acb4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acae:	68db      	ldr	r3, [r3, #12]
 800acb0:	68f8      	ldr	r0, [r7, #12]
 800acb2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800acb4:	2180      	movs	r1, #128	; 0x80
 800acb6:	68f8      	ldr	r0, [r7, #12]
 800acb8:	f002 fff0 	bl	800dc9c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800acbc:	68f8      	ldr	r0, [r7, #12]
 800acbe:	f000 ff93 	bl	800bbe8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800acc8:	2b01      	cmp	r3, #1
 800acca:	d122      	bne.n	800ad12 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800accc:	68f8      	ldr	r0, [r7, #12]
 800acce:	f7ff fe98 	bl	800aa02 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2200      	movs	r2, #0
 800acd6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800acda:	e01a      	b.n	800ad12 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ace2:	b2db      	uxtb	r3, r3
 800ace4:	2b03      	cmp	r3, #3
 800ace6:	d114      	bne.n	800ad12 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acee:	695b      	ldr	r3, [r3, #20]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d00e      	beq.n	800ad12 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acfa:	695b      	ldr	r3, [r3, #20]
 800acfc:	7afa      	ldrb	r2, [r7, #11]
 800acfe:	4611      	mov	r1, r2
 800ad00:	68f8      	ldr	r0, [r7, #12]
 800ad02:	4798      	blx	r3
 800ad04:	4603      	mov	r3, r0
 800ad06:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ad08:	7dfb      	ldrb	r3, [r7, #23]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d001      	beq.n	800ad12 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ad0e:	7dfb      	ldrb	r3, [r7, #23]
 800ad10:	e000      	b.n	800ad14 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ad12:	2300      	movs	r3, #0
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3718      	adds	r7, #24
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b082      	sub	sp, #8
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2201      	movs	r2, #1
 800ad28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d101      	bne.n	800ad50 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ad4c:	2303      	movs	r3, #3
 800ad4e:	e02f      	b.n	800adb0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d00f      	beq.n	800ad7a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d009      	beq.n	800ad7a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	6852      	ldr	r2, [r2, #4]
 800ad72:	b2d2      	uxtb	r2, r2
 800ad74:	4611      	mov	r1, r2
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ad7a:	2340      	movs	r3, #64	; 0x40
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	2100      	movs	r1, #0
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f002 ff46 	bl	800dc12 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2201      	movs	r2, #1
 800ad8a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2240      	movs	r2, #64	; 0x40
 800ad92:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ad96:	2340      	movs	r3, #64	; 0x40
 800ad98:	2200      	movs	r2, #0
 800ad9a:	2180      	movs	r1, #128	; 0x80
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f002 ff38 	bl	800dc12 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2201      	movs	r2, #1
 800ada6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2240      	movs	r2, #64	; 0x40
 800adac:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800adae:	2300      	movs	r3, #0
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3708      	adds	r7, #8
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800adb8:	b480      	push	{r7}
 800adba:	b083      	sub	sp, #12
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	460b      	mov	r3, r1
 800adc2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	78fa      	ldrb	r2, [r7, #3]
 800adc8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800adca:	2300      	movs	r3, #0
}
 800adcc:	4618      	mov	r0, r3
 800adce:	370c      	adds	r7, #12
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ade6:	b2da      	uxtb	r2, r3
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2204      	movs	r2, #4
 800adf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800adf6:	2300      	movs	r3, #0
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	370c      	adds	r7, #12
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr

0800ae04 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b083      	sub	sp, #12
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae12:	b2db      	uxtb	r3, r3
 800ae14:	2b04      	cmp	r3, #4
 800ae16:	d106      	bne.n	800ae26 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ae1e:	b2da      	uxtb	r2, r3
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ae26:	2300      	movs	r3, #0
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	370c      	adds	r7, #12
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr

0800ae34 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b082      	sub	sp, #8
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d101      	bne.n	800ae4a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800ae46:	2303      	movs	r3, #3
 800ae48:	e012      	b.n	800ae70 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae50:	b2db      	uxtb	r3, r3
 800ae52:	2b03      	cmp	r3, #3
 800ae54:	d10b      	bne.n	800ae6e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae5c:	69db      	ldr	r3, [r3, #28]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d005      	beq.n	800ae6e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae68:	69db      	ldr	r3, [r3, #28]
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ae6e:	2300      	movs	r3, #0
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3708      	adds	r7, #8
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b082      	sub	sp, #8
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	460b      	mov	r3, r1
 800ae82:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d101      	bne.n	800ae92 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ae8e:	2303      	movs	r3, #3
 800ae90:	e014      	b.n	800aebc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	2b03      	cmp	r3, #3
 800ae9c:	d10d      	bne.n	800aeba <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aea4:	6a1b      	ldr	r3, [r3, #32]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d007      	beq.n	800aeba <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeb0:	6a1b      	ldr	r3, [r3, #32]
 800aeb2:	78fa      	ldrb	r2, [r7, #3]
 800aeb4:	4611      	mov	r1, r2
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aeba:	2300      	movs	r3, #0
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3708      	adds	r7, #8
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b082      	sub	sp, #8
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	460b      	mov	r3, r1
 800aece:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d101      	bne.n	800aede <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800aeda:	2303      	movs	r3, #3
 800aedc:	e014      	b.n	800af08 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	2b03      	cmp	r3, #3
 800aee8:	d10d      	bne.n	800af06 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d007      	beq.n	800af06 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aefc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aefe:	78fa      	ldrb	r2, [r7, #3]
 800af00:	4611      	mov	r1, r2
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800af06:	2300      	movs	r3, #0
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3708      	adds	r7, #8
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800af10:	b480      	push	{r7}
 800af12:	b083      	sub	sp, #12
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800af18:	2300      	movs	r3, #0
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	370c      	adds	r7, #12
 800af1e:	46bd      	mov	sp, r7
 800af20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af24:	4770      	bx	lr

0800af26 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800af26:	b580      	push	{r7, lr}
 800af28:	b082      	sub	sp, #8
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2201      	movs	r2, #1
 800af32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d009      	beq.n	800af54 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	687a      	ldr	r2, [r7, #4]
 800af4a:	6852      	ldr	r2, [r2, #4]
 800af4c:	b2d2      	uxtb	r2, r2
 800af4e:	4611      	mov	r1, r2
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	4798      	blx	r3
  }

  return USBD_OK;
 800af54:	2300      	movs	r3, #0
}
 800af56:	4618      	mov	r0, r3
 800af58:	3708      	adds	r7, #8
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}

0800af5e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800af5e:	b480      	push	{r7}
 800af60:	b087      	sub	sp, #28
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	781b      	ldrb	r3, [r3, #0]
 800af6e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	3301      	adds	r3, #1
 800af74:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800af7c:	8a3b      	ldrh	r3, [r7, #16]
 800af7e:	021b      	lsls	r3, r3, #8
 800af80:	b21a      	sxth	r2, r3
 800af82:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800af86:	4313      	orrs	r3, r2
 800af88:	b21b      	sxth	r3, r3
 800af8a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800af8c:	89fb      	ldrh	r3, [r7, #14]
}
 800af8e:	4618      	mov	r0, r3
 800af90:	371c      	adds	r7, #28
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr
	...

0800af9c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800afa6:	2300      	movs	r3, #0
 800afa8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800afb2:	2b40      	cmp	r3, #64	; 0x40
 800afb4:	d005      	beq.n	800afc2 <USBD_StdDevReq+0x26>
 800afb6:	2b40      	cmp	r3, #64	; 0x40
 800afb8:	d853      	bhi.n	800b062 <USBD_StdDevReq+0xc6>
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d00b      	beq.n	800afd6 <USBD_StdDevReq+0x3a>
 800afbe:	2b20      	cmp	r3, #32
 800afc0:	d14f      	bne.n	800b062 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afc8:	689b      	ldr	r3, [r3, #8]
 800afca:	6839      	ldr	r1, [r7, #0]
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	4798      	blx	r3
 800afd0:	4603      	mov	r3, r0
 800afd2:	73fb      	strb	r3, [r7, #15]
      break;
 800afd4:	e04a      	b.n	800b06c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	785b      	ldrb	r3, [r3, #1]
 800afda:	2b09      	cmp	r3, #9
 800afdc:	d83b      	bhi.n	800b056 <USBD_StdDevReq+0xba>
 800afde:	a201      	add	r2, pc, #4	; (adr r2, 800afe4 <USBD_StdDevReq+0x48>)
 800afe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe4:	0800b039 	.word	0x0800b039
 800afe8:	0800b04d 	.word	0x0800b04d
 800afec:	0800b057 	.word	0x0800b057
 800aff0:	0800b043 	.word	0x0800b043
 800aff4:	0800b057 	.word	0x0800b057
 800aff8:	0800b017 	.word	0x0800b017
 800affc:	0800b00d 	.word	0x0800b00d
 800b000:	0800b057 	.word	0x0800b057
 800b004:	0800b02f 	.word	0x0800b02f
 800b008:	0800b021 	.word	0x0800b021
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b00c:	6839      	ldr	r1, [r7, #0]
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 f9de 	bl	800b3d0 <USBD_GetDescriptor>
          break;
 800b014:	e024      	b.n	800b060 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b016:	6839      	ldr	r1, [r7, #0]
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f000 fb43 	bl	800b6a4 <USBD_SetAddress>
          break;
 800b01e:	e01f      	b.n	800b060 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b020:	6839      	ldr	r1, [r7, #0]
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 fb82 	bl	800b72c <USBD_SetConfig>
 800b028:	4603      	mov	r3, r0
 800b02a:	73fb      	strb	r3, [r7, #15]
          break;
 800b02c:	e018      	b.n	800b060 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b02e:	6839      	ldr	r1, [r7, #0]
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f000 fc21 	bl	800b878 <USBD_GetConfig>
          break;
 800b036:	e013      	b.n	800b060 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b038:	6839      	ldr	r1, [r7, #0]
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 fc52 	bl	800b8e4 <USBD_GetStatus>
          break;
 800b040:	e00e      	b.n	800b060 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b042:	6839      	ldr	r1, [r7, #0]
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 fc81 	bl	800b94c <USBD_SetFeature>
          break;
 800b04a:	e009      	b.n	800b060 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b04c:	6839      	ldr	r1, [r7, #0]
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 fc90 	bl	800b974 <USBD_ClrFeature>
          break;
 800b054:	e004      	b.n	800b060 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b056:	6839      	ldr	r1, [r7, #0]
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 fce7 	bl	800ba2c <USBD_CtlError>
          break;
 800b05e:	bf00      	nop
      }
      break;
 800b060:	e004      	b.n	800b06c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b062:	6839      	ldr	r1, [r7, #0]
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f000 fce1 	bl	800ba2c <USBD_CtlError>
      break;
 800b06a:	bf00      	nop
  }

  return ret;
 800b06c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3710      	adds	r7, #16
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop

0800b078 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b082:	2300      	movs	r3, #0
 800b084:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b08e:	2b40      	cmp	r3, #64	; 0x40
 800b090:	d005      	beq.n	800b09e <USBD_StdItfReq+0x26>
 800b092:	2b40      	cmp	r3, #64	; 0x40
 800b094:	d82f      	bhi.n	800b0f6 <USBD_StdItfReq+0x7e>
 800b096:	2b00      	cmp	r3, #0
 800b098:	d001      	beq.n	800b09e <USBD_StdItfReq+0x26>
 800b09a:	2b20      	cmp	r3, #32
 800b09c:	d12b      	bne.n	800b0f6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0a4:	b2db      	uxtb	r3, r3
 800b0a6:	3b01      	subs	r3, #1
 800b0a8:	2b02      	cmp	r3, #2
 800b0aa:	d81d      	bhi.n	800b0e8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	889b      	ldrh	r3, [r3, #4]
 800b0b0:	b2db      	uxtb	r3, r3
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d813      	bhi.n	800b0de <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0bc:	689b      	ldr	r3, [r3, #8]
 800b0be:	6839      	ldr	r1, [r7, #0]
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	4798      	blx	r3
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	88db      	ldrh	r3, [r3, #6]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d110      	bne.n	800b0f2 <USBD_StdItfReq+0x7a>
 800b0d0:	7bfb      	ldrb	r3, [r7, #15]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d10d      	bne.n	800b0f2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f000 fd73 	bl	800bbc2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b0dc:	e009      	b.n	800b0f2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b0de:	6839      	ldr	r1, [r7, #0]
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 fca3 	bl	800ba2c <USBD_CtlError>
          break;
 800b0e6:	e004      	b.n	800b0f2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b0e8:	6839      	ldr	r1, [r7, #0]
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f000 fc9e 	bl	800ba2c <USBD_CtlError>
          break;
 800b0f0:	e000      	b.n	800b0f4 <USBD_StdItfReq+0x7c>
          break;
 800b0f2:	bf00      	nop
      }
      break;
 800b0f4:	e004      	b.n	800b100 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b0f6:	6839      	ldr	r1, [r7, #0]
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 fc97 	bl	800ba2c <USBD_CtlError>
      break;
 800b0fe:	bf00      	nop
  }

  return ret;
 800b100:	7bfb      	ldrb	r3, [r7, #15]
}
 800b102:	4618      	mov	r0, r3
 800b104:	3710      	adds	r7, #16
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}

0800b10a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b10a:	b580      	push	{r7, lr}
 800b10c:	b084      	sub	sp, #16
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
 800b112:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b114:	2300      	movs	r3, #0
 800b116:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	889b      	ldrh	r3, [r3, #4]
 800b11c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b126:	2b40      	cmp	r3, #64	; 0x40
 800b128:	d007      	beq.n	800b13a <USBD_StdEPReq+0x30>
 800b12a:	2b40      	cmp	r3, #64	; 0x40
 800b12c:	f200 8145 	bhi.w	800b3ba <USBD_StdEPReq+0x2b0>
 800b130:	2b00      	cmp	r3, #0
 800b132:	d00c      	beq.n	800b14e <USBD_StdEPReq+0x44>
 800b134:	2b20      	cmp	r3, #32
 800b136:	f040 8140 	bne.w	800b3ba <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b140:	689b      	ldr	r3, [r3, #8]
 800b142:	6839      	ldr	r1, [r7, #0]
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	4798      	blx	r3
 800b148:	4603      	mov	r3, r0
 800b14a:	73fb      	strb	r3, [r7, #15]
      break;
 800b14c:	e13a      	b.n	800b3c4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	785b      	ldrb	r3, [r3, #1]
 800b152:	2b03      	cmp	r3, #3
 800b154:	d007      	beq.n	800b166 <USBD_StdEPReq+0x5c>
 800b156:	2b03      	cmp	r3, #3
 800b158:	f300 8129 	bgt.w	800b3ae <USBD_StdEPReq+0x2a4>
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d07f      	beq.n	800b260 <USBD_StdEPReq+0x156>
 800b160:	2b01      	cmp	r3, #1
 800b162:	d03c      	beq.n	800b1de <USBD_StdEPReq+0xd4>
 800b164:	e123      	b.n	800b3ae <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	2b02      	cmp	r3, #2
 800b170:	d002      	beq.n	800b178 <USBD_StdEPReq+0x6e>
 800b172:	2b03      	cmp	r3, #3
 800b174:	d016      	beq.n	800b1a4 <USBD_StdEPReq+0x9a>
 800b176:	e02c      	b.n	800b1d2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b178:	7bbb      	ldrb	r3, [r7, #14]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d00d      	beq.n	800b19a <USBD_StdEPReq+0x90>
 800b17e:	7bbb      	ldrb	r3, [r7, #14]
 800b180:	2b80      	cmp	r3, #128	; 0x80
 800b182:	d00a      	beq.n	800b19a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b184:	7bbb      	ldrb	r3, [r7, #14]
 800b186:	4619      	mov	r1, r3
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f002 fd87 	bl	800dc9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b18e:	2180      	movs	r1, #128	; 0x80
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f002 fd83 	bl	800dc9c <USBD_LL_StallEP>
 800b196:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b198:	e020      	b.n	800b1dc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b19a:	6839      	ldr	r1, [r7, #0]
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f000 fc45 	bl	800ba2c <USBD_CtlError>
              break;
 800b1a2:	e01b      	b.n	800b1dc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	885b      	ldrh	r3, [r3, #2]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d10e      	bne.n	800b1ca <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b1ac:	7bbb      	ldrb	r3, [r7, #14]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d00b      	beq.n	800b1ca <USBD_StdEPReq+0xc0>
 800b1b2:	7bbb      	ldrb	r3, [r7, #14]
 800b1b4:	2b80      	cmp	r3, #128	; 0x80
 800b1b6:	d008      	beq.n	800b1ca <USBD_StdEPReq+0xc0>
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	88db      	ldrh	r3, [r3, #6]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d104      	bne.n	800b1ca <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b1c0:	7bbb      	ldrb	r3, [r7, #14]
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f002 fd69 	bl	800dc9c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 fcf9 	bl	800bbc2 <USBD_CtlSendStatus>

              break;
 800b1d0:	e004      	b.n	800b1dc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b1d2:	6839      	ldr	r1, [r7, #0]
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 fc29 	bl	800ba2c <USBD_CtlError>
              break;
 800b1da:	bf00      	nop
          }
          break;
 800b1dc:	e0ec      	b.n	800b3b8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	2b02      	cmp	r3, #2
 800b1e8:	d002      	beq.n	800b1f0 <USBD_StdEPReq+0xe6>
 800b1ea:	2b03      	cmp	r3, #3
 800b1ec:	d016      	beq.n	800b21c <USBD_StdEPReq+0x112>
 800b1ee:	e030      	b.n	800b252 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1f0:	7bbb      	ldrb	r3, [r7, #14]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d00d      	beq.n	800b212 <USBD_StdEPReq+0x108>
 800b1f6:	7bbb      	ldrb	r3, [r7, #14]
 800b1f8:	2b80      	cmp	r3, #128	; 0x80
 800b1fa:	d00a      	beq.n	800b212 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b1fc:	7bbb      	ldrb	r3, [r7, #14]
 800b1fe:	4619      	mov	r1, r3
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f002 fd4b 	bl	800dc9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b206:	2180      	movs	r1, #128	; 0x80
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f002 fd47 	bl	800dc9c <USBD_LL_StallEP>
 800b20e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b210:	e025      	b.n	800b25e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b212:	6839      	ldr	r1, [r7, #0]
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f000 fc09 	bl	800ba2c <USBD_CtlError>
              break;
 800b21a:	e020      	b.n	800b25e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	885b      	ldrh	r3, [r3, #2]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d11b      	bne.n	800b25c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b224:	7bbb      	ldrb	r3, [r7, #14]
 800b226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d004      	beq.n	800b238 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b22e:	7bbb      	ldrb	r3, [r7, #14]
 800b230:	4619      	mov	r1, r3
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f002 fd51 	bl	800dcda <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f000 fcc2 	bl	800bbc2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b244:	689b      	ldr	r3, [r3, #8]
 800b246:	6839      	ldr	r1, [r7, #0]
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	4798      	blx	r3
 800b24c:	4603      	mov	r3, r0
 800b24e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b250:	e004      	b.n	800b25c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b252:	6839      	ldr	r1, [r7, #0]
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 fbe9 	bl	800ba2c <USBD_CtlError>
              break;
 800b25a:	e000      	b.n	800b25e <USBD_StdEPReq+0x154>
              break;
 800b25c:	bf00      	nop
          }
          break;
 800b25e:	e0ab      	b.n	800b3b8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b266:	b2db      	uxtb	r3, r3
 800b268:	2b02      	cmp	r3, #2
 800b26a:	d002      	beq.n	800b272 <USBD_StdEPReq+0x168>
 800b26c:	2b03      	cmp	r3, #3
 800b26e:	d032      	beq.n	800b2d6 <USBD_StdEPReq+0x1cc>
 800b270:	e097      	b.n	800b3a2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b272:	7bbb      	ldrb	r3, [r7, #14]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d007      	beq.n	800b288 <USBD_StdEPReq+0x17e>
 800b278:	7bbb      	ldrb	r3, [r7, #14]
 800b27a:	2b80      	cmp	r3, #128	; 0x80
 800b27c:	d004      	beq.n	800b288 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b27e:	6839      	ldr	r1, [r7, #0]
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f000 fbd3 	bl	800ba2c <USBD_CtlError>
                break;
 800b286:	e091      	b.n	800b3ac <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b288:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	da0b      	bge.n	800b2a8 <USBD_StdEPReq+0x19e>
 800b290:	7bbb      	ldrb	r3, [r7, #14]
 800b292:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b296:	4613      	mov	r3, r2
 800b298:	009b      	lsls	r3, r3, #2
 800b29a:	4413      	add	r3, r2
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	3310      	adds	r3, #16
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	4413      	add	r3, r2
 800b2a4:	3304      	adds	r3, #4
 800b2a6:	e00b      	b.n	800b2c0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b2a8:	7bbb      	ldrb	r3, [r7, #14]
 800b2aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2ae:	4613      	mov	r3, r2
 800b2b0:	009b      	lsls	r3, r3, #2
 800b2b2:	4413      	add	r3, r2
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b2ba:	687a      	ldr	r2, [r7, #4]
 800b2bc:	4413      	add	r3, r2
 800b2be:	3304      	adds	r3, #4
 800b2c0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	2202      	movs	r2, #2
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f000 fc1d 	bl	800bb0e <USBD_CtlSendData>
              break;
 800b2d4:	e06a      	b.n	800b3ac <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b2d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	da11      	bge.n	800b302 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b2de:	7bbb      	ldrb	r3, [r7, #14]
 800b2e0:	f003 020f 	and.w	r2, r3, #15
 800b2e4:	6879      	ldr	r1, [r7, #4]
 800b2e6:	4613      	mov	r3, r2
 800b2e8:	009b      	lsls	r3, r3, #2
 800b2ea:	4413      	add	r3, r2
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	440b      	add	r3, r1
 800b2f0:	3324      	adds	r3, #36	; 0x24
 800b2f2:	881b      	ldrh	r3, [r3, #0]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d117      	bne.n	800b328 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b2f8:	6839      	ldr	r1, [r7, #0]
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 fb96 	bl	800ba2c <USBD_CtlError>
                  break;
 800b300:	e054      	b.n	800b3ac <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b302:	7bbb      	ldrb	r3, [r7, #14]
 800b304:	f003 020f 	and.w	r2, r3, #15
 800b308:	6879      	ldr	r1, [r7, #4]
 800b30a:	4613      	mov	r3, r2
 800b30c:	009b      	lsls	r3, r3, #2
 800b30e:	4413      	add	r3, r2
 800b310:	009b      	lsls	r3, r3, #2
 800b312:	440b      	add	r3, r1
 800b314:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b318:	881b      	ldrh	r3, [r3, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d104      	bne.n	800b328 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b31e:	6839      	ldr	r1, [r7, #0]
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f000 fb83 	bl	800ba2c <USBD_CtlError>
                  break;
 800b326:	e041      	b.n	800b3ac <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b328:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	da0b      	bge.n	800b348 <USBD_StdEPReq+0x23e>
 800b330:	7bbb      	ldrb	r3, [r7, #14]
 800b332:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b336:	4613      	mov	r3, r2
 800b338:	009b      	lsls	r3, r3, #2
 800b33a:	4413      	add	r3, r2
 800b33c:	009b      	lsls	r3, r3, #2
 800b33e:	3310      	adds	r3, #16
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	4413      	add	r3, r2
 800b344:	3304      	adds	r3, #4
 800b346:	e00b      	b.n	800b360 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b348:	7bbb      	ldrb	r3, [r7, #14]
 800b34a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b34e:	4613      	mov	r3, r2
 800b350:	009b      	lsls	r3, r3, #2
 800b352:	4413      	add	r3, r2
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b35a:	687a      	ldr	r2, [r7, #4]
 800b35c:	4413      	add	r3, r2
 800b35e:	3304      	adds	r3, #4
 800b360:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b362:	7bbb      	ldrb	r3, [r7, #14]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d002      	beq.n	800b36e <USBD_StdEPReq+0x264>
 800b368:	7bbb      	ldrb	r3, [r7, #14]
 800b36a:	2b80      	cmp	r3, #128	; 0x80
 800b36c:	d103      	bne.n	800b376 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	2200      	movs	r2, #0
 800b372:	601a      	str	r2, [r3, #0]
 800b374:	e00e      	b.n	800b394 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b376:	7bbb      	ldrb	r3, [r7, #14]
 800b378:	4619      	mov	r1, r3
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f002 fccc 	bl	800dd18 <USBD_LL_IsStallEP>
 800b380:	4603      	mov	r3, r0
 800b382:	2b00      	cmp	r3, #0
 800b384:	d003      	beq.n	800b38e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	2201      	movs	r2, #1
 800b38a:	601a      	str	r2, [r3, #0]
 800b38c:	e002      	b.n	800b394 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	2200      	movs	r2, #0
 800b392:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	2202      	movs	r2, #2
 800b398:	4619      	mov	r1, r3
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f000 fbb7 	bl	800bb0e <USBD_CtlSendData>
              break;
 800b3a0:	e004      	b.n	800b3ac <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b3a2:	6839      	ldr	r1, [r7, #0]
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f000 fb41 	bl	800ba2c <USBD_CtlError>
              break;
 800b3aa:	bf00      	nop
          }
          break;
 800b3ac:	e004      	b.n	800b3b8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b3ae:	6839      	ldr	r1, [r7, #0]
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 fb3b 	bl	800ba2c <USBD_CtlError>
          break;
 800b3b6:	bf00      	nop
      }
      break;
 800b3b8:	e004      	b.n	800b3c4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b3ba:	6839      	ldr	r1, [r7, #0]
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f000 fb35 	bl	800ba2c <USBD_CtlError>
      break;
 800b3c2:	bf00      	nop
  }

  return ret;
 800b3c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3710      	adds	r7, #16
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
	...

0800b3d0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b084      	sub	sp, #16
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	885b      	ldrh	r3, [r3, #2]
 800b3ea:	0a1b      	lsrs	r3, r3, #8
 800b3ec:	b29b      	uxth	r3, r3
 800b3ee:	3b01      	subs	r3, #1
 800b3f0:	2b06      	cmp	r3, #6
 800b3f2:	f200 8128 	bhi.w	800b646 <USBD_GetDescriptor+0x276>
 800b3f6:	a201      	add	r2, pc, #4	; (adr r2, 800b3fc <USBD_GetDescriptor+0x2c>)
 800b3f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3fc:	0800b419 	.word	0x0800b419
 800b400:	0800b431 	.word	0x0800b431
 800b404:	0800b471 	.word	0x0800b471
 800b408:	0800b647 	.word	0x0800b647
 800b40c:	0800b647 	.word	0x0800b647
 800b410:	0800b5e7 	.word	0x0800b5e7
 800b414:	0800b613 	.word	0x0800b613
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	7c12      	ldrb	r2, [r2, #16]
 800b424:	f107 0108 	add.w	r1, r7, #8
 800b428:	4610      	mov	r0, r2
 800b42a:	4798      	blx	r3
 800b42c:	60f8      	str	r0, [r7, #12]
      break;
 800b42e:	e112      	b.n	800b656 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	7c1b      	ldrb	r3, [r3, #16]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d10d      	bne.n	800b454 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b43e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b440:	f107 0208 	add.w	r2, r7, #8
 800b444:	4610      	mov	r0, r2
 800b446:	4798      	blx	r3
 800b448:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	3301      	adds	r3, #1
 800b44e:	2202      	movs	r2, #2
 800b450:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b452:	e100      	b.n	800b656 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b45c:	f107 0208 	add.w	r2, r7, #8
 800b460:	4610      	mov	r0, r2
 800b462:	4798      	blx	r3
 800b464:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	3301      	adds	r3, #1
 800b46a:	2202      	movs	r2, #2
 800b46c:	701a      	strb	r2, [r3, #0]
      break;
 800b46e:	e0f2      	b.n	800b656 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	885b      	ldrh	r3, [r3, #2]
 800b474:	b2db      	uxtb	r3, r3
 800b476:	2b05      	cmp	r3, #5
 800b478:	f200 80ac 	bhi.w	800b5d4 <USBD_GetDescriptor+0x204>
 800b47c:	a201      	add	r2, pc, #4	; (adr r2, 800b484 <USBD_GetDescriptor+0xb4>)
 800b47e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b482:	bf00      	nop
 800b484:	0800b49d 	.word	0x0800b49d
 800b488:	0800b4d1 	.word	0x0800b4d1
 800b48c:	0800b505 	.word	0x0800b505
 800b490:	0800b539 	.word	0x0800b539
 800b494:	0800b56d 	.word	0x0800b56d
 800b498:	0800b5a1 	.word	0x0800b5a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d00b      	beq.n	800b4c0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	7c12      	ldrb	r2, [r2, #16]
 800b4b4:	f107 0108 	add.w	r1, r7, #8
 800b4b8:	4610      	mov	r0, r2
 800b4ba:	4798      	blx	r3
 800b4bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4be:	e091      	b.n	800b5e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b4c0:	6839      	ldr	r1, [r7, #0]
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 fab2 	bl	800ba2c <USBD_CtlError>
            err++;
 800b4c8:	7afb      	ldrb	r3, [r7, #11]
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	72fb      	strb	r3, [r7, #11]
          break;
 800b4ce:	e089      	b.n	800b5e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4d6:	689b      	ldr	r3, [r3, #8]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d00b      	beq.n	800b4f4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4e2:	689b      	ldr	r3, [r3, #8]
 800b4e4:	687a      	ldr	r2, [r7, #4]
 800b4e6:	7c12      	ldrb	r2, [r2, #16]
 800b4e8:	f107 0108 	add.w	r1, r7, #8
 800b4ec:	4610      	mov	r0, r2
 800b4ee:	4798      	blx	r3
 800b4f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4f2:	e077      	b.n	800b5e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b4f4:	6839      	ldr	r1, [r7, #0]
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 fa98 	bl	800ba2c <USBD_CtlError>
            err++;
 800b4fc:	7afb      	ldrb	r3, [r7, #11]
 800b4fe:	3301      	adds	r3, #1
 800b500:	72fb      	strb	r3, [r7, #11]
          break;
 800b502:	e06f      	b.n	800b5e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b50a:	68db      	ldr	r3, [r3, #12]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d00b      	beq.n	800b528 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b516:	68db      	ldr	r3, [r3, #12]
 800b518:	687a      	ldr	r2, [r7, #4]
 800b51a:	7c12      	ldrb	r2, [r2, #16]
 800b51c:	f107 0108 	add.w	r1, r7, #8
 800b520:	4610      	mov	r0, r2
 800b522:	4798      	blx	r3
 800b524:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b526:	e05d      	b.n	800b5e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b528:	6839      	ldr	r1, [r7, #0]
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f000 fa7e 	bl	800ba2c <USBD_CtlError>
            err++;
 800b530:	7afb      	ldrb	r3, [r7, #11]
 800b532:	3301      	adds	r3, #1
 800b534:	72fb      	strb	r3, [r7, #11]
          break;
 800b536:	e055      	b.n	800b5e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b53e:	691b      	ldr	r3, [r3, #16]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d00b      	beq.n	800b55c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b54a:	691b      	ldr	r3, [r3, #16]
 800b54c:	687a      	ldr	r2, [r7, #4]
 800b54e:	7c12      	ldrb	r2, [r2, #16]
 800b550:	f107 0108 	add.w	r1, r7, #8
 800b554:	4610      	mov	r0, r2
 800b556:	4798      	blx	r3
 800b558:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b55a:	e043      	b.n	800b5e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b55c:	6839      	ldr	r1, [r7, #0]
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f000 fa64 	bl	800ba2c <USBD_CtlError>
            err++;
 800b564:	7afb      	ldrb	r3, [r7, #11]
 800b566:	3301      	adds	r3, #1
 800b568:	72fb      	strb	r3, [r7, #11]
          break;
 800b56a:	e03b      	b.n	800b5e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b572:	695b      	ldr	r3, [r3, #20]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d00b      	beq.n	800b590 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b57e:	695b      	ldr	r3, [r3, #20]
 800b580:	687a      	ldr	r2, [r7, #4]
 800b582:	7c12      	ldrb	r2, [r2, #16]
 800b584:	f107 0108 	add.w	r1, r7, #8
 800b588:	4610      	mov	r0, r2
 800b58a:	4798      	blx	r3
 800b58c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b58e:	e029      	b.n	800b5e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b590:	6839      	ldr	r1, [r7, #0]
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f000 fa4a 	bl	800ba2c <USBD_CtlError>
            err++;
 800b598:	7afb      	ldrb	r3, [r7, #11]
 800b59a:	3301      	adds	r3, #1
 800b59c:	72fb      	strb	r3, [r7, #11]
          break;
 800b59e:	e021      	b.n	800b5e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5a6:	699b      	ldr	r3, [r3, #24]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d00b      	beq.n	800b5c4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5b2:	699b      	ldr	r3, [r3, #24]
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	7c12      	ldrb	r2, [r2, #16]
 800b5b8:	f107 0108 	add.w	r1, r7, #8
 800b5bc:	4610      	mov	r0, r2
 800b5be:	4798      	blx	r3
 800b5c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5c2:	e00f      	b.n	800b5e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5c4:	6839      	ldr	r1, [r7, #0]
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 fa30 	bl	800ba2c <USBD_CtlError>
            err++;
 800b5cc:	7afb      	ldrb	r3, [r7, #11]
 800b5ce:	3301      	adds	r3, #1
 800b5d0:	72fb      	strb	r3, [r7, #11]
          break;
 800b5d2:	e007      	b.n	800b5e4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b5d4:	6839      	ldr	r1, [r7, #0]
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f000 fa28 	bl	800ba2c <USBD_CtlError>
          err++;
 800b5dc:	7afb      	ldrb	r3, [r7, #11]
 800b5de:	3301      	adds	r3, #1
 800b5e0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b5e2:	bf00      	nop
      }
      break;
 800b5e4:	e037      	b.n	800b656 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	7c1b      	ldrb	r3, [r3, #16]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d109      	bne.n	800b602 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5f6:	f107 0208 	add.w	r2, r7, #8
 800b5fa:	4610      	mov	r0, r2
 800b5fc:	4798      	blx	r3
 800b5fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b600:	e029      	b.n	800b656 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b602:	6839      	ldr	r1, [r7, #0]
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f000 fa11 	bl	800ba2c <USBD_CtlError>
        err++;
 800b60a:	7afb      	ldrb	r3, [r7, #11]
 800b60c:	3301      	adds	r3, #1
 800b60e:	72fb      	strb	r3, [r7, #11]
      break;
 800b610:	e021      	b.n	800b656 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	7c1b      	ldrb	r3, [r3, #16]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d10d      	bne.n	800b636 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b622:	f107 0208 	add.w	r2, r7, #8
 800b626:	4610      	mov	r0, r2
 800b628:	4798      	blx	r3
 800b62a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	3301      	adds	r3, #1
 800b630:	2207      	movs	r2, #7
 800b632:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b634:	e00f      	b.n	800b656 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b636:	6839      	ldr	r1, [r7, #0]
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 f9f7 	bl	800ba2c <USBD_CtlError>
        err++;
 800b63e:	7afb      	ldrb	r3, [r7, #11]
 800b640:	3301      	adds	r3, #1
 800b642:	72fb      	strb	r3, [r7, #11]
      break;
 800b644:	e007      	b.n	800b656 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b646:	6839      	ldr	r1, [r7, #0]
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f000 f9ef 	bl	800ba2c <USBD_CtlError>
      err++;
 800b64e:	7afb      	ldrb	r3, [r7, #11]
 800b650:	3301      	adds	r3, #1
 800b652:	72fb      	strb	r3, [r7, #11]
      break;
 800b654:	bf00      	nop
  }

  if (err != 0U)
 800b656:	7afb      	ldrb	r3, [r7, #11]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d11e      	bne.n	800b69a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	88db      	ldrh	r3, [r3, #6]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d016      	beq.n	800b692 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b664:	893b      	ldrh	r3, [r7, #8]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d00e      	beq.n	800b688 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	88da      	ldrh	r2, [r3, #6]
 800b66e:	893b      	ldrh	r3, [r7, #8]
 800b670:	4293      	cmp	r3, r2
 800b672:	bf28      	it	cs
 800b674:	4613      	movcs	r3, r2
 800b676:	b29b      	uxth	r3, r3
 800b678:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b67a:	893b      	ldrh	r3, [r7, #8]
 800b67c:	461a      	mov	r2, r3
 800b67e:	68f9      	ldr	r1, [r7, #12]
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f000 fa44 	bl	800bb0e <USBD_CtlSendData>
 800b686:	e009      	b.n	800b69c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b688:	6839      	ldr	r1, [r7, #0]
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 f9ce 	bl	800ba2c <USBD_CtlError>
 800b690:	e004      	b.n	800b69c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 fa95 	bl	800bbc2 <USBD_CtlSendStatus>
 800b698:	e000      	b.n	800b69c <USBD_GetDescriptor+0x2cc>
    return;
 800b69a:	bf00      	nop
  }
}
 800b69c:	3710      	adds	r7, #16
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
 800b6a2:	bf00      	nop

0800b6a4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b084      	sub	sp, #16
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	889b      	ldrh	r3, [r3, #4]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d131      	bne.n	800b71a <USBD_SetAddress+0x76>
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	88db      	ldrh	r3, [r3, #6]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d12d      	bne.n	800b71a <USBD_SetAddress+0x76>
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	885b      	ldrh	r3, [r3, #2]
 800b6c2:	2b7f      	cmp	r3, #127	; 0x7f
 800b6c4:	d829      	bhi.n	800b71a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	885b      	ldrh	r3, [r3, #2]
 800b6ca:	b2db      	uxtb	r3, r3
 800b6cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	2b03      	cmp	r3, #3
 800b6dc:	d104      	bne.n	800b6e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b6de:	6839      	ldr	r1, [r7, #0]
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f000 f9a3 	bl	800ba2c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6e6:	e01d      	b.n	800b724 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	7bfa      	ldrb	r2, [r7, #15]
 800b6ec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b6f0:	7bfb      	ldrb	r3, [r7, #15]
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f002 fb3b 	bl	800dd70 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 fa61 	bl	800bbc2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b700:	7bfb      	ldrb	r3, [r7, #15]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d004      	beq.n	800b710 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2202      	movs	r2, #2
 800b70a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b70e:	e009      	b.n	800b724 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2201      	movs	r2, #1
 800b714:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b718:	e004      	b.n	800b724 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b71a:	6839      	ldr	r1, [r7, #0]
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 f985 	bl	800ba2c <USBD_CtlError>
  }
}
 800b722:	bf00      	nop
 800b724:	bf00      	nop
 800b726:	3710      	adds	r7, #16
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b084      	sub	sp, #16
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b736:	2300      	movs	r3, #0
 800b738:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	885b      	ldrh	r3, [r3, #2]
 800b73e:	b2da      	uxtb	r2, r3
 800b740:	4b4c      	ldr	r3, [pc, #304]	; (800b874 <USBD_SetConfig+0x148>)
 800b742:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b744:	4b4b      	ldr	r3, [pc, #300]	; (800b874 <USBD_SetConfig+0x148>)
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d905      	bls.n	800b758 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b74c:	6839      	ldr	r1, [r7, #0]
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 f96c 	bl	800ba2c <USBD_CtlError>
    return USBD_FAIL;
 800b754:	2303      	movs	r3, #3
 800b756:	e088      	b.n	800b86a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b75e:	b2db      	uxtb	r3, r3
 800b760:	2b02      	cmp	r3, #2
 800b762:	d002      	beq.n	800b76a <USBD_SetConfig+0x3e>
 800b764:	2b03      	cmp	r3, #3
 800b766:	d025      	beq.n	800b7b4 <USBD_SetConfig+0x88>
 800b768:	e071      	b.n	800b84e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b76a:	4b42      	ldr	r3, [pc, #264]	; (800b874 <USBD_SetConfig+0x148>)
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d01c      	beq.n	800b7ac <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b772:	4b40      	ldr	r3, [pc, #256]	; (800b874 <USBD_SetConfig+0x148>)
 800b774:	781b      	ldrb	r3, [r3, #0]
 800b776:	461a      	mov	r2, r3
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b77c:	4b3d      	ldr	r3, [pc, #244]	; (800b874 <USBD_SetConfig+0x148>)
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	4619      	mov	r1, r3
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f7ff f948 	bl	800aa18 <USBD_SetClassConfig>
 800b788:	4603      	mov	r3, r0
 800b78a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b78c:	7bfb      	ldrb	r3, [r7, #15]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d004      	beq.n	800b79c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b792:	6839      	ldr	r1, [r7, #0]
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 f949 	bl	800ba2c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b79a:	e065      	b.n	800b868 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f000 fa10 	bl	800bbc2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2203      	movs	r2, #3
 800b7a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b7aa:	e05d      	b.n	800b868 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 fa08 	bl	800bbc2 <USBD_CtlSendStatus>
      break;
 800b7b2:	e059      	b.n	800b868 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b7b4:	4b2f      	ldr	r3, [pc, #188]	; (800b874 <USBD_SetConfig+0x148>)
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d112      	bne.n	800b7e2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2202      	movs	r2, #2
 800b7c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b7c4:	4b2b      	ldr	r3, [pc, #172]	; (800b874 <USBD_SetConfig+0x148>)
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b7ce:	4b29      	ldr	r3, [pc, #164]	; (800b874 <USBD_SetConfig+0x148>)
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f7ff f93b 	bl	800aa50 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f000 f9f1 	bl	800bbc2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b7e0:	e042      	b.n	800b868 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b7e2:	4b24      	ldr	r3, [pc, #144]	; (800b874 <USBD_SetConfig+0x148>)
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d02a      	beq.n	800b846 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f7ff f929 	bl	800aa50 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b7fe:	4b1d      	ldr	r3, [pc, #116]	; (800b874 <USBD_SetConfig+0x148>)
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	461a      	mov	r2, r3
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b808:	4b1a      	ldr	r3, [pc, #104]	; (800b874 <USBD_SetConfig+0x148>)
 800b80a:	781b      	ldrb	r3, [r3, #0]
 800b80c:	4619      	mov	r1, r3
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f7ff f902 	bl	800aa18 <USBD_SetClassConfig>
 800b814:	4603      	mov	r3, r0
 800b816:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b818:	7bfb      	ldrb	r3, [r7, #15]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d00f      	beq.n	800b83e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b81e:	6839      	ldr	r1, [r7, #0]
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f000 f903 	bl	800ba2c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	4619      	mov	r1, r3
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f7ff f90e 	bl	800aa50 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2202      	movs	r2, #2
 800b838:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b83c:	e014      	b.n	800b868 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 f9bf 	bl	800bbc2 <USBD_CtlSendStatus>
      break;
 800b844:	e010      	b.n	800b868 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f000 f9bb 	bl	800bbc2 <USBD_CtlSendStatus>
      break;
 800b84c:	e00c      	b.n	800b868 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b84e:	6839      	ldr	r1, [r7, #0]
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f000 f8eb 	bl	800ba2c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b856:	4b07      	ldr	r3, [pc, #28]	; (800b874 <USBD_SetConfig+0x148>)
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	4619      	mov	r1, r3
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f7ff f8f7 	bl	800aa50 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b862:	2303      	movs	r3, #3
 800b864:	73fb      	strb	r3, [r7, #15]
      break;
 800b866:	bf00      	nop
  }

  return ret;
 800b868:	7bfb      	ldrb	r3, [r7, #15]
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3710      	adds	r7, #16
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	2000036c 	.word	0x2000036c

0800b878 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b082      	sub	sp, #8
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	88db      	ldrh	r3, [r3, #6]
 800b886:	2b01      	cmp	r3, #1
 800b888:	d004      	beq.n	800b894 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b88a:	6839      	ldr	r1, [r7, #0]
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f000 f8cd 	bl	800ba2c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b892:	e023      	b.n	800b8dc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	2b02      	cmp	r3, #2
 800b89e:	dc02      	bgt.n	800b8a6 <USBD_GetConfig+0x2e>
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	dc03      	bgt.n	800b8ac <USBD_GetConfig+0x34>
 800b8a4:	e015      	b.n	800b8d2 <USBD_GetConfig+0x5a>
 800b8a6:	2b03      	cmp	r3, #3
 800b8a8:	d00b      	beq.n	800b8c2 <USBD_GetConfig+0x4a>
 800b8aa:	e012      	b.n	800b8d2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	3308      	adds	r3, #8
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 f927 	bl	800bb0e <USBD_CtlSendData>
        break;
 800b8c0:	e00c      	b.n	800b8dc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	3304      	adds	r3, #4
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 f91f 	bl	800bb0e <USBD_CtlSendData>
        break;
 800b8d0:	e004      	b.n	800b8dc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b8d2:	6839      	ldr	r1, [r7, #0]
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 f8a9 	bl	800ba2c <USBD_CtlError>
        break;
 800b8da:	bf00      	nop
}
 800b8dc:	bf00      	nop
 800b8de:	3708      	adds	r7, #8
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b082      	sub	sp, #8
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
 800b8ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	3b01      	subs	r3, #1
 800b8f8:	2b02      	cmp	r3, #2
 800b8fa:	d81e      	bhi.n	800b93a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	88db      	ldrh	r3, [r3, #6]
 800b900:	2b02      	cmp	r3, #2
 800b902:	d004      	beq.n	800b90e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b904:	6839      	ldr	r1, [r7, #0]
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 f890 	bl	800ba2c <USBD_CtlError>
        break;
 800b90c:	e01a      	b.n	800b944 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2201      	movs	r2, #1
 800b912:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d005      	beq.n	800b92a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	68db      	ldr	r3, [r3, #12]
 800b922:	f043 0202 	orr.w	r2, r3, #2
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	330c      	adds	r3, #12
 800b92e:	2202      	movs	r2, #2
 800b930:	4619      	mov	r1, r3
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f000 f8eb 	bl	800bb0e <USBD_CtlSendData>
      break;
 800b938:	e004      	b.n	800b944 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b93a:	6839      	ldr	r1, [r7, #0]
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f000 f875 	bl	800ba2c <USBD_CtlError>
      break;
 800b942:	bf00      	nop
  }
}
 800b944:	bf00      	nop
 800b946:	3708      	adds	r7, #8
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	885b      	ldrh	r3, [r3, #2]
 800b95a:	2b01      	cmp	r3, #1
 800b95c:	d106      	bne.n	800b96c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2201      	movs	r2, #1
 800b962:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f000 f92b 	bl	800bbc2 <USBD_CtlSendStatus>
  }
}
 800b96c:	bf00      	nop
 800b96e:	3708      	adds	r7, #8
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b082      	sub	sp, #8
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
 800b97c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b984:	b2db      	uxtb	r3, r3
 800b986:	3b01      	subs	r3, #1
 800b988:	2b02      	cmp	r3, #2
 800b98a:	d80b      	bhi.n	800b9a4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	885b      	ldrh	r3, [r3, #2]
 800b990:	2b01      	cmp	r3, #1
 800b992:	d10c      	bne.n	800b9ae <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2200      	movs	r2, #0
 800b998:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f000 f910 	bl	800bbc2 <USBD_CtlSendStatus>
      }
      break;
 800b9a2:	e004      	b.n	800b9ae <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b9a4:	6839      	ldr	r1, [r7, #0]
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 f840 	bl	800ba2c <USBD_CtlError>
      break;
 800b9ac:	e000      	b.n	800b9b0 <USBD_ClrFeature+0x3c>
      break;
 800b9ae:	bf00      	nop
  }
}
 800b9b0:	bf00      	nop
 800b9b2:	3708      	adds	r7, #8
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	781a      	ldrb	r2, [r3, #0]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	781a      	ldrb	r2, [r3, #0]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	3301      	adds	r3, #1
 800b9e0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b9e2:	68f8      	ldr	r0, [r7, #12]
 800b9e4:	f7ff fabb 	bl	800af5e <SWAPBYTE>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	3301      	adds	r3, #1
 800b9fa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b9fc:	68f8      	ldr	r0, [r7, #12]
 800b9fe:	f7ff faae 	bl	800af5e <SWAPBYTE>
 800ba02:	4603      	mov	r3, r0
 800ba04:	461a      	mov	r2, r3
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	3301      	adds	r3, #1
 800ba14:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ba16:	68f8      	ldr	r0, [r7, #12]
 800ba18:	f7ff faa1 	bl	800af5e <SWAPBYTE>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	461a      	mov	r2, r3
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	80da      	strh	r2, [r3, #6]
}
 800ba24:	bf00      	nop
 800ba26:	3710      	adds	r7, #16
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b082      	sub	sp, #8
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba36:	2180      	movs	r1, #128	; 0x80
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f002 f92f 	bl	800dc9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ba3e:	2100      	movs	r1, #0
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f002 f92b 	bl	800dc9c <USBD_LL_StallEP>
}
 800ba46:	bf00      	nop
 800ba48:	3708      	adds	r7, #8
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}

0800ba4e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ba4e:	b580      	push	{r7, lr}
 800ba50:	b086      	sub	sp, #24
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	60f8      	str	r0, [r7, #12]
 800ba56:	60b9      	str	r1, [r7, #8]
 800ba58:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d036      	beq.n	800bad2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ba68:	6938      	ldr	r0, [r7, #16]
 800ba6a:	f000 f836 	bl	800bada <USBD_GetLen>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	3301      	adds	r3, #1
 800ba72:	b29b      	uxth	r3, r3
 800ba74:	005b      	lsls	r3, r3, #1
 800ba76:	b29a      	uxth	r2, r3
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ba7c:	7dfb      	ldrb	r3, [r7, #23]
 800ba7e:	68ba      	ldr	r2, [r7, #8]
 800ba80:	4413      	add	r3, r2
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	7812      	ldrb	r2, [r2, #0]
 800ba86:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba88:	7dfb      	ldrb	r3, [r7, #23]
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ba8e:	7dfb      	ldrb	r3, [r7, #23]
 800ba90:	68ba      	ldr	r2, [r7, #8]
 800ba92:	4413      	add	r3, r2
 800ba94:	2203      	movs	r2, #3
 800ba96:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba98:	7dfb      	ldrb	r3, [r7, #23]
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ba9e:	e013      	b.n	800bac8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800baa0:	7dfb      	ldrb	r3, [r7, #23]
 800baa2:	68ba      	ldr	r2, [r7, #8]
 800baa4:	4413      	add	r3, r2
 800baa6:	693a      	ldr	r2, [r7, #16]
 800baa8:	7812      	ldrb	r2, [r2, #0]
 800baaa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	3301      	adds	r3, #1
 800bab0:	613b      	str	r3, [r7, #16]
    idx++;
 800bab2:	7dfb      	ldrb	r3, [r7, #23]
 800bab4:	3301      	adds	r3, #1
 800bab6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bab8:	7dfb      	ldrb	r3, [r7, #23]
 800baba:	68ba      	ldr	r2, [r7, #8]
 800babc:	4413      	add	r3, r2
 800babe:	2200      	movs	r2, #0
 800bac0:	701a      	strb	r2, [r3, #0]
    idx++;
 800bac2:	7dfb      	ldrb	r3, [r7, #23]
 800bac4:	3301      	adds	r3, #1
 800bac6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d1e7      	bne.n	800baa0 <USBD_GetString+0x52>
 800bad0:	e000      	b.n	800bad4 <USBD_GetString+0x86>
    return;
 800bad2:	bf00      	nop
  }
}
 800bad4:	3718      	adds	r7, #24
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}

0800bada <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bada:	b480      	push	{r7}
 800badc:	b085      	sub	sp, #20
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bae2:	2300      	movs	r3, #0
 800bae4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800baea:	e005      	b.n	800baf8 <USBD_GetLen+0x1e>
  {
    len++;
 800baec:	7bfb      	ldrb	r3, [r7, #15]
 800baee:	3301      	adds	r3, #1
 800baf0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	3301      	adds	r3, #1
 800baf6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d1f5      	bne.n	800baec <USBD_GetLen+0x12>
  }

  return len;
 800bb00:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3714      	adds	r7, #20
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr

0800bb0e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bb0e:	b580      	push	{r7, lr}
 800bb10:	b084      	sub	sp, #16
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	60f8      	str	r0, [r7, #12]
 800bb16:	60b9      	str	r1, [r7, #8]
 800bb18:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2202      	movs	r2, #2
 800bb1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	687a      	ldr	r2, [r7, #4]
 800bb26:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	687a      	ldr	r2, [r7, #4]
 800bb2c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	68ba      	ldr	r2, [r7, #8]
 800bb32:	2100      	movs	r1, #0
 800bb34:	68f8      	ldr	r0, [r7, #12]
 800bb36:	f002 f93a 	bl	800ddae <USBD_LL_Transmit>

  return USBD_OK;
 800bb3a:	2300      	movs	r3, #0
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3710      	adds	r7, #16
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b084      	sub	sp, #16
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	60f8      	str	r0, [r7, #12]
 800bb4c:	60b9      	str	r1, [r7, #8]
 800bb4e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	68ba      	ldr	r2, [r7, #8]
 800bb54:	2100      	movs	r1, #0
 800bb56:	68f8      	ldr	r0, [r7, #12]
 800bb58:	f002 f929 	bl	800ddae <USBD_LL_Transmit>

  return USBD_OK;
 800bb5c:	2300      	movs	r3, #0
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3710      	adds	r7, #16
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}

0800bb66 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b084      	sub	sp, #16
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	60f8      	str	r0, [r7, #12]
 800bb6e:	60b9      	str	r1, [r7, #8]
 800bb70:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2203      	movs	r2, #3
 800bb76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	687a      	ldr	r2, [r7, #4]
 800bb7e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	68ba      	ldr	r2, [r7, #8]
 800bb8e:	2100      	movs	r1, #0
 800bb90:	68f8      	ldr	r0, [r7, #12]
 800bb92:	f002 f92d 	bl	800ddf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb96:	2300      	movs	r3, #0
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3710      	adds	r7, #16
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	60f8      	str	r0, [r7, #12]
 800bba8:	60b9      	str	r1, [r7, #8]
 800bbaa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	68ba      	ldr	r2, [r7, #8]
 800bbb0:	2100      	movs	r1, #0
 800bbb2:	68f8      	ldr	r0, [r7, #12]
 800bbb4:	f002 f91c 	bl	800ddf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bbb8:	2300      	movs	r3, #0
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3710      	adds	r7, #16
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}

0800bbc2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bbc2:	b580      	push	{r7, lr}
 800bbc4:	b082      	sub	sp, #8
 800bbc6:	af00      	add	r7, sp, #0
 800bbc8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2204      	movs	r2, #4
 800bbce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	2100      	movs	r1, #0
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f002 f8e8 	bl	800ddae <USBD_LL_Transmit>

  return USBD_OK;
 800bbde:	2300      	movs	r3, #0
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3708      	adds	r7, #8
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b082      	sub	sp, #8
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2205      	movs	r2, #5
 800bbf4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	2100      	movs	r1, #0
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f002 f8f6 	bl	800ddf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc04:	2300      	movs	r3, #0
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3708      	adds	r7, #8
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
	...

0800bc10 <ApplicationPerform>:


/* Interfaced functions */

void ApplicationPerform()
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	af00      	add	r7, sp, #0

	switch(kApplicationBase.eApplicationState)
 800bc14:	4b19      	ldr	r3, [pc, #100]	; (800bc7c <ApplicationPerform+0x6c>)
 800bc16:	7e5b      	ldrb	r3, [r3, #25]
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	2b03      	cmp	r3, #3
 800bc1c:	d826      	bhi.n	800bc6c <ApplicationPerform+0x5c>
 800bc1e:	a201      	add	r2, pc, #4	; (adr r2, 800bc24 <ApplicationPerform+0x14>)
 800bc20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc24:	0800bc35 	.word	0x0800bc35
 800bc28:	0800bc43 	.word	0x0800bc43
 800bc2c:	0800bc67 	.word	0x0800bc67
 800bc30:	0800bc75 	.word	0x0800bc75
	{
	case eApp_EntryState:
		OperateLED_A(eLED_On);
 800bc34:	2000      	movs	r0, #0
 800bc36:	f7f5 f93b 	bl	8000eb0 <OperateLED_A>
		AppStateChangeRequest(eApp_Initialization);
 800bc3a:	2001      	movs	r0, #1
 800bc3c:	f000 f8b2 	bl	800bda4 <AppStateChangeRequest>
		break;
 800bc40:	e019      	b.n	800bc76 <ApplicationPerform+0x66>

	case eApp_Initialization:
		AppEnableResetTaskTimers();
 800bc42:	f000 f8fb 	bl	800be3c <AppEnableResetTaskTimers>
		TempCollect_Initialize();
 800bc46:	f000 fce5 	bl	800c614 <TempCollect_Initialize>
		DataHandler_Initialize();
 800bc4a:	f000 f93b 	bl	800bec4 <DataHandler_Initialize>
		CommManager_Initialize();
 800bc4e:	f000 fd1d 	bl	800c68c <CommManager_Initialize>
		EventSystem_Initialize();
 800bc52:	f000 fb1b 	bl	800c28c <EventSystem_Initialize>
		TurnAllSensorOn();
 800bc56:	f7f5 f9b3 	bl	8000fc0 <TurnAllSensorOn>
		TurnOnSynchronousEvent(); //todo: add actual on/off functionality to synchronous timers
 800bc5a:	f000 f92b 	bl	800beb4 <TurnOnSynchronousEvent>
		AppStateChangeRequest(eApp_Perform);
 800bc5e:	2002      	movs	r0, #2
 800bc60:	f000 f8a0 	bl	800bda4 <AppStateChangeRequest>
		break;
 800bc64:	e007      	b.n	800bc76 <ApplicationPerform+0x66>

	case eApp_Perform:
		AsynchronousTaskScheduler();
 800bc66:	f000 f86d 	bl	800bd44 <AsynchronousTaskScheduler>
		break;
 800bc6a:	e004      	b.n	800bc76 <ApplicationPerform+0x66>

	case eApp_Shutdown:
		break;

	default:
		AssertError(AppError_AppDefaultStateEntryError);
 800bc6c:	2010      	movs	r0, #16
 800bc6e:	f000 f90d 	bl	800be8c <AssertError>
		break;
 800bc72:	e000      	b.n	800bc76 <ApplicationPerform+0x66>
		break;
 800bc74:	bf00      	nop
	}

}
 800bc76:	bf00      	nop
 800bc78:	bd80      	pop	{r7, pc}
 800bc7a:	bf00      	nop
 800bc7c:	20000370 	.word	0x20000370

0800bc80 <AsynchronousTaskTimerUpdate>:

void AsynchronousTaskTimerUpdate()
{
 800bc80:	b480      	push	{r7}
 800bc82:	af00      	add	r7, sp, #0
	if(kApplicationBase.sAsyncTimers.s1000ms.bEnabledFlag)
 800bc84:	4b20      	ldr	r3, [pc, #128]	; (800bd08 <AsynchronousTaskTimerUpdate+0x88>)
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	b2db      	uxtb	r3, r3
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d006      	beq.n	800bc9c <AsynchronousTaskTimerUpdate+0x1c>
	{
		kApplicationBase.sAsyncTimers.s1000ms.u16Counter++;
 800bc8e:	4b1e      	ldr	r3, [pc, #120]	; (800bd08 <AsynchronousTaskTimerUpdate+0x88>)
 800bc90:	885b      	ldrh	r3, [r3, #2]
 800bc92:	b29b      	uxth	r3, r3
 800bc94:	3301      	adds	r3, #1
 800bc96:	b29a      	uxth	r2, r3
 800bc98:	4b1b      	ldr	r3, [pc, #108]	; (800bd08 <AsynchronousTaskTimerUpdate+0x88>)
 800bc9a:	805a      	strh	r2, [r3, #2]
	}
	if(kApplicationBase.sAsyncTimers.s100ms.bEnabledFlag)
 800bc9c:	4b1a      	ldr	r3, [pc, #104]	; (800bd08 <AsynchronousTaskTimerUpdate+0x88>)
 800bc9e:	791b      	ldrb	r3, [r3, #4]
 800bca0:	b2db      	uxtb	r3, r3
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d006      	beq.n	800bcb4 <AsynchronousTaskTimerUpdate+0x34>
	{
		kApplicationBase.sAsyncTimers.s100ms.u16Counter++;
 800bca6:	4b18      	ldr	r3, [pc, #96]	; (800bd08 <AsynchronousTaskTimerUpdate+0x88>)
 800bca8:	88db      	ldrh	r3, [r3, #6]
 800bcaa:	b29b      	uxth	r3, r3
 800bcac:	3301      	adds	r3, #1
 800bcae:	b29a      	uxth	r2, r3
 800bcb0:	4b15      	ldr	r3, [pc, #84]	; (800bd08 <AsynchronousTaskTimerUpdate+0x88>)
 800bcb2:	80da      	strh	r2, [r3, #6]
	}
	if(kApplicationBase.sAsyncTimers.s10ms.bEnabledFlag)
 800bcb4:	4b14      	ldr	r3, [pc, #80]	; (800bd08 <AsynchronousTaskTimerUpdate+0x88>)
 800bcb6:	7a1b      	ldrb	r3, [r3, #8]
 800bcb8:	b2db      	uxtb	r3, r3
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d006      	beq.n	800bccc <AsynchronousTaskTimerUpdate+0x4c>
	{
		kApplicationBase.sAsyncTimers.s10ms.u16Counter++;
 800bcbe:	4b12      	ldr	r3, [pc, #72]	; (800bd08 <AsynchronousTaskTimerUpdate+0x88>)
 800bcc0:	895b      	ldrh	r3, [r3, #10]
 800bcc2:	b29b      	uxth	r3, r3
 800bcc4:	3301      	adds	r3, #1
 800bcc6:	b29a      	uxth	r2, r3
 800bcc8:	4b0f      	ldr	r3, [pc, #60]	; (800bd08 <AsynchronousTaskTimerUpdate+0x88>)
 800bcca:	815a      	strh	r2, [r3, #10]
	}
	if(kApplicationBase.sAsyncTimers.s1ms.bEnabledFlag)
 800bccc:	4b0e      	ldr	r3, [pc, #56]	; (800bd08 <AsynchronousTaskTimerUpdate+0x88>)
 800bcce:	7b1b      	ldrb	r3, [r3, #12]
 800bcd0:	b2db      	uxtb	r3, r3
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d006      	beq.n	800bce4 <AsynchronousTaskTimerUpdate+0x64>
	{
		kApplicationBase.sAsyncTimers.s1ms.u16Counter++;
 800bcd6:	4b0c      	ldr	r3, [pc, #48]	; (800bd08 <AsynchronousTaskTimerUpdate+0x88>)
 800bcd8:	89db      	ldrh	r3, [r3, #14]
 800bcda:	b29b      	uxth	r3, r3
 800bcdc:	3301      	adds	r3, #1
 800bcde:	b29a      	uxth	r2, r3
 800bce0:	4b09      	ldr	r3, [pc, #36]	; (800bd08 <AsynchronousTaskTimerUpdate+0x88>)
 800bce2:	81da      	strh	r2, [r3, #14]
	}
	if(kApplicationBase.sAsyncTimers.s500us.bEnabledFlag)
 800bce4:	4b08      	ldr	r3, [pc, #32]	; (800bd08 <AsynchronousTaskTimerUpdate+0x88>)
 800bce6:	7c1b      	ldrb	r3, [r3, #16]
 800bce8:	b2db      	uxtb	r3, r3
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d006      	beq.n	800bcfc <AsynchronousTaskTimerUpdate+0x7c>
	{
		kApplicationBase.sAsyncTimers.s500us.u16Counter++;
 800bcee:	4b06      	ldr	r3, [pc, #24]	; (800bd08 <AsynchronousTaskTimerUpdate+0x88>)
 800bcf0:	8a5b      	ldrh	r3, [r3, #18]
 800bcf2:	b29b      	uxth	r3, r3
 800bcf4:	3301      	adds	r3, #1
 800bcf6:	b29a      	uxth	r2, r3
 800bcf8:	4b03      	ldr	r3, [pc, #12]	; (800bd08 <AsynchronousTaskTimerUpdate+0x88>)
 800bcfa:	825a      	strh	r2, [r3, #18]
	}

}
 800bcfc:	bf00      	nop
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr
 800bd06:	bf00      	nop
 800bd08:	20000370 	.word	0x20000370

0800bd0c <AsynchronousTask_1ms>:

/* Internal functions */

void AsynchronousTask_1ms()
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	af00      	add	r7, sp, #0
	 * 10 us with no frame assembly,
	 * 70 us with frame assembly
	 *
	 * two functions (22.12.2201): EventSystem and CommManager
	 */
	EventSystem_HandleEvent();
 800bd10:	f000 fac8 	bl	800c2a4 <EventSystem_HandleEvent>
	CommManager_Operate();
 800bd14:	f000 fcc6 	bl	800c6a4 <CommManager_Operate>
}
 800bd18:	bf00      	nop
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <AsynchronousTask_10ms>:

void AsynchronousTask_10ms()
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	af00      	add	r7, sp, #0
	 * 5-10 us with no communication
	 * 1-9 us with communication
	 *
	 * one function (22.12.2201): TempCollect
	 */
	TempCollect_Operate();
 800bd20:	f000 fb3e 	bl	800c3a0 <TempCollect_Operate>
}
 800bd24:	bf00      	nop
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <AsynchronousTask_100ms>:

void AsynchronousTask_100ms()
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	af00      	add	r7, sp, #0
	 * 8-11 us with no communication
	 * same with communication
	 *
	 * two functions (22.12.2201): USB_Check and DataHandler
	 */
	USB_CheckForUSBConnection();
 800bd2c:	f000 fe2e 	bl	800c98c <USB_CheckForUSBConnection>
	DataHandler_Operate();
 800bd30:	f000 fa20 	bl	800c174 <DataHandler_Operate>
}
 800bd34:	bf00      	nop
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <AsynchronousTask_1000ms>:

void AsynchronousTask_1000ms()
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	af00      	add	r7, sp, #0
	 * 999 ms without communication
	 * same with communication
	 *
	 * Measured 22.12.2021
	 */
	ToggleLED_B();
 800bd3c:	f7f5 f8f0 	bl	8000f20 <ToggleLED_B>
}
 800bd40:	bf00      	nop
 800bd42:	bd80      	pop	{r7, pc}

0800bd44 <AsynchronousTaskScheduler>:

void AsynchronousTaskScheduler()
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	af00      	add	r7, sp, #0
	if(kApplicationBase.sAsyncTimers.s1000ms.u16Counter >= dAsynchronousTaskPeriod1000ms)
 800bd48:	4b15      	ldr	r3, [pc, #84]	; (800bda0 <AsynchronousTaskScheduler+0x5c>)
 800bd4a:	885b      	ldrh	r3, [r3, #2]
 800bd4c:	b29b      	uxth	r3, r3
 800bd4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bd52:	d304      	bcc.n	800bd5e <AsynchronousTaskScheduler+0x1a>
	{
		AsynchronousTask_1000ms();
 800bd54:	f7ff fff0 	bl	800bd38 <AsynchronousTask_1000ms>
		kApplicationBase.sAsyncTimers.s1000ms.u16Counter = 0;
 800bd58:	4b11      	ldr	r3, [pc, #68]	; (800bda0 <AsynchronousTaskScheduler+0x5c>)
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	805a      	strh	r2, [r3, #2]
	}

	if(kApplicationBase.sAsyncTimers.s100ms.u16Counter >= dAsynchronousTaskPeriod100ms)
 800bd5e:	4b10      	ldr	r3, [pc, #64]	; (800bda0 <AsynchronousTaskScheduler+0x5c>)
 800bd60:	88db      	ldrh	r3, [r3, #6]
 800bd62:	b29b      	uxth	r3, r3
 800bd64:	2b63      	cmp	r3, #99	; 0x63
 800bd66:	d904      	bls.n	800bd72 <AsynchronousTaskScheduler+0x2e>
	{
		AsynchronousTask_100ms();
 800bd68:	f7ff ffde 	bl	800bd28 <AsynchronousTask_100ms>
		kApplicationBase.sAsyncTimers.s100ms.u16Counter = 0;
 800bd6c:	4b0c      	ldr	r3, [pc, #48]	; (800bda0 <AsynchronousTaskScheduler+0x5c>)
 800bd6e:	2200      	movs	r2, #0
 800bd70:	80da      	strh	r2, [r3, #6]
	}

	if(kApplicationBase.sAsyncTimers.s10ms.u16Counter >= dAsynchronousTaskPeriod10ms)
 800bd72:	4b0b      	ldr	r3, [pc, #44]	; (800bda0 <AsynchronousTaskScheduler+0x5c>)
 800bd74:	895b      	ldrh	r3, [r3, #10]
 800bd76:	b29b      	uxth	r3, r3
 800bd78:	2b09      	cmp	r3, #9
 800bd7a:	d904      	bls.n	800bd86 <AsynchronousTaskScheduler+0x42>
	{
		AsynchronousTask_10ms();
 800bd7c:	f7ff ffce 	bl	800bd1c <AsynchronousTask_10ms>
		kApplicationBase.sAsyncTimers.s10ms.u16Counter = 0;
 800bd80:	4b07      	ldr	r3, [pc, #28]	; (800bda0 <AsynchronousTaskScheduler+0x5c>)
 800bd82:	2200      	movs	r2, #0
 800bd84:	815a      	strh	r2, [r3, #10]
	}

	if(kApplicationBase.sAsyncTimers.s1ms.u16Counter >= dAsynchronousTaskPeriod1ms)
 800bd86:	4b06      	ldr	r3, [pc, #24]	; (800bda0 <AsynchronousTaskScheduler+0x5c>)
 800bd88:	89db      	ldrh	r3, [r3, #14]
 800bd8a:	b29b      	uxth	r3, r3
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d004      	beq.n	800bd9a <AsynchronousTaskScheduler+0x56>
	{
		AsynchronousTask_1ms();
 800bd90:	f7ff ffbc 	bl	800bd0c <AsynchronousTask_1ms>
		kApplicationBase.sAsyncTimers.s1ms.u16Counter = 0;
 800bd94:	4b02      	ldr	r3, [pc, #8]	; (800bda0 <AsynchronousTaskScheduler+0x5c>)
 800bd96:	2200      	movs	r2, #0
 800bd98:	81da      	strh	r2, [r3, #14]
	}

}
 800bd9a:	bf00      	nop
 800bd9c:	bd80      	pop	{r7, pc}
 800bd9e:	bf00      	nop
 800bda0:	20000370 	.word	0x20000370

0800bda4 <AppStateChangeRequest>:

void AppStateChangeRequest( ApplicationState_t eNewState)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b082      	sub	sp, #8
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	4603      	mov	r3, r0
 800bdac:	71fb      	strb	r3, [r7, #7]
	switch(kApplicationBase.eApplicationState)
 800bdae:	4b22      	ldr	r3, [pc, #136]	; (800be38 <AppStateChangeRequest+0x94>)
 800bdb0:	7e5b      	ldrb	r3, [r3, #25]
 800bdb2:	b2db      	uxtb	r3, r3
 800bdb4:	2b03      	cmp	r3, #3
 800bdb6:	d837      	bhi.n	800be28 <AppStateChangeRequest+0x84>
 800bdb8:	a201      	add	r2, pc, #4	; (adr r2, 800bdc0 <AppStateChangeRequest+0x1c>)
 800bdba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdbe:	bf00      	nop
 800bdc0:	0800bdd1 	.word	0x0800bdd1
 800bdc4:	0800bde7 	.word	0x0800bde7
 800bdc8:	0800bdfd 	.word	0x0800bdfd
 800bdcc:	0800be21 	.word	0x0800be21
	{
	case eApp_EntryState:
		if(eNewState == eApp_Initialization)
 800bdd0:	79fb      	ldrb	r3, [r7, #7]
 800bdd2:	2b01      	cmp	r3, #1
 800bdd4:	d103      	bne.n	800bdde <AppStateChangeRequest+0x3a>
		{
			kApplicationBase.eApplicationState = eApp_Initialization;
 800bdd6:	4b18      	ldr	r3, [pc, #96]	; (800be38 <AppStateChangeRequest+0x94>)
 800bdd8:	2201      	movs	r2, #1
 800bdda:	765a      	strb	r2, [r3, #25]
		}
		else
		{
			AssertError(AppError_WrongStateTransition);
		}
		break;
 800bddc:	e028      	b.n	800be30 <AppStateChangeRequest+0x8c>
			AssertError(AppError_WrongStateTransition);
 800bdde:	2020      	movs	r0, #32
 800bde0:	f000 f854 	bl	800be8c <AssertError>
		break;
 800bde4:	e024      	b.n	800be30 <AppStateChangeRequest+0x8c>

	case eApp_Initialization:
		if(eNewState == eApp_Perform)
 800bde6:	79fb      	ldrb	r3, [r7, #7]
 800bde8:	2b02      	cmp	r3, #2
 800bdea:	d103      	bne.n	800bdf4 <AppStateChangeRequest+0x50>
		{
			kApplicationBase.eApplicationState = eApp_Perform;
 800bdec:	4b12      	ldr	r3, [pc, #72]	; (800be38 <AppStateChangeRequest+0x94>)
 800bdee:	2202      	movs	r2, #2
 800bdf0:	765a      	strb	r2, [r3, #25]
		}
		else
		{
			AssertError(AppError_WrongStateTransition);
		}
		break;
 800bdf2:	e01d      	b.n	800be30 <AppStateChangeRequest+0x8c>
			AssertError(AppError_WrongStateTransition);
 800bdf4:	2020      	movs	r0, #32
 800bdf6:	f000 f849 	bl	800be8c <AssertError>
		break;
 800bdfa:	e019      	b.n	800be30 <AppStateChangeRequest+0x8c>

	case eApp_Perform:
		if(eNewState == eApp_Initialization)
 800bdfc:	79fb      	ldrb	r3, [r7, #7]
 800bdfe:	2b01      	cmp	r3, #1
 800be00:	d103      	bne.n	800be0a <AppStateChangeRequest+0x66>
		{
			kApplicationBase.eApplicationState = eApp_Initialization;
 800be02:	4b0d      	ldr	r3, [pc, #52]	; (800be38 <AppStateChangeRequest+0x94>)
 800be04:	2201      	movs	r2, #1
 800be06:	765a      	strb	r2, [r3, #25]
		}
		else
		{
			AssertError(AppError_WrongStateTransition);
		}
		break;
 800be08:	e012      	b.n	800be30 <AppStateChangeRequest+0x8c>
		else if(eNewState == eApp_Shutdown)
 800be0a:	79fb      	ldrb	r3, [r7, #7]
 800be0c:	2b03      	cmp	r3, #3
 800be0e:	d103      	bne.n	800be18 <AppStateChangeRequest+0x74>
			kApplicationBase.eApplicationState = eApp_Shutdown;
 800be10:	4b09      	ldr	r3, [pc, #36]	; (800be38 <AppStateChangeRequest+0x94>)
 800be12:	2203      	movs	r2, #3
 800be14:	765a      	strb	r2, [r3, #25]
		break;
 800be16:	e00b      	b.n	800be30 <AppStateChangeRequest+0x8c>
			AssertError(AppError_WrongStateTransition);
 800be18:	2020      	movs	r0, #32
 800be1a:	f000 f837 	bl	800be8c <AssertError>
		break;
 800be1e:	e007      	b.n	800be30 <AppStateChangeRequest+0x8c>

	case eApp_Shutdown:
		AssertError(AppError_WrongStateTransition);
 800be20:	2020      	movs	r0, #32
 800be22:	f000 f833 	bl	800be8c <AssertError>
		break;
 800be26:	e003      	b.n	800be30 <AppStateChangeRequest+0x8c>

	default:
		AssertError(AppError_WrongStateTransition);
 800be28:	2020      	movs	r0, #32
 800be2a:	f000 f82f 	bl	800be8c <AssertError>
		break;
 800be2e:	bf00      	nop
	}

}
 800be30:	bf00      	nop
 800be32:	3708      	adds	r7, #8
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}
 800be38:	20000370 	.word	0x20000370

0800be3c <AppEnableResetTaskTimers>:

void AppEnableResetTaskTimers()
{
 800be3c:	b480      	push	{r7}
 800be3e:	af00      	add	r7, sp, #0
	kApplicationBase.sAsyncTimers.s1000ms.bEnabledFlag = true;
 800be40:	4b11      	ldr	r3, [pc, #68]	; (800be88 <AppEnableResetTaskTimers+0x4c>)
 800be42:	2201      	movs	r2, #1
 800be44:	701a      	strb	r2, [r3, #0]
	kApplicationBase.sAsyncTimers.s100ms.bEnabledFlag = true;
 800be46:	4b10      	ldr	r3, [pc, #64]	; (800be88 <AppEnableResetTaskTimers+0x4c>)
 800be48:	2201      	movs	r2, #1
 800be4a:	711a      	strb	r2, [r3, #4]
	kApplicationBase.sAsyncTimers.s10ms.bEnabledFlag = true;
 800be4c:	4b0e      	ldr	r3, [pc, #56]	; (800be88 <AppEnableResetTaskTimers+0x4c>)
 800be4e:	2201      	movs	r2, #1
 800be50:	721a      	strb	r2, [r3, #8]
	kApplicationBase.sAsyncTimers.s1ms.bEnabledFlag = true;
 800be52:	4b0d      	ldr	r3, [pc, #52]	; (800be88 <AppEnableResetTaskTimers+0x4c>)
 800be54:	2201      	movs	r2, #1
 800be56:	731a      	strb	r2, [r3, #12]
	kApplicationBase.sAsyncTimers.s500us.bEnabledFlag = true;
 800be58:	4b0b      	ldr	r3, [pc, #44]	; (800be88 <AppEnableResetTaskTimers+0x4c>)
 800be5a:	2201      	movs	r2, #1
 800be5c:	741a      	strb	r2, [r3, #16]

	kApplicationBase.sAsyncTimers.s1000ms.u16Counter = 0;
 800be5e:	4b0a      	ldr	r3, [pc, #40]	; (800be88 <AppEnableResetTaskTimers+0x4c>)
 800be60:	2200      	movs	r2, #0
 800be62:	805a      	strh	r2, [r3, #2]
	kApplicationBase.sAsyncTimers.s100ms.u16Counter = 0;
 800be64:	4b08      	ldr	r3, [pc, #32]	; (800be88 <AppEnableResetTaskTimers+0x4c>)
 800be66:	2200      	movs	r2, #0
 800be68:	80da      	strh	r2, [r3, #6]
	kApplicationBase.sAsyncTimers.s10ms.u16Counter = 0;
 800be6a:	4b07      	ldr	r3, [pc, #28]	; (800be88 <AppEnableResetTaskTimers+0x4c>)
 800be6c:	2200      	movs	r2, #0
 800be6e:	815a      	strh	r2, [r3, #10]
	kApplicationBase.sAsyncTimers.s1ms.u16Counter = 0;
 800be70:	4b05      	ldr	r3, [pc, #20]	; (800be88 <AppEnableResetTaskTimers+0x4c>)
 800be72:	2200      	movs	r2, #0
 800be74:	81da      	strh	r2, [r3, #14]
	kApplicationBase.sAsyncTimers.s500us.u16Counter = 0;
 800be76:	4b04      	ldr	r3, [pc, #16]	; (800be88 <AppEnableResetTaskTimers+0x4c>)
 800be78:	2200      	movs	r2, #0
 800be7a:	825a      	strh	r2, [r3, #18]
}
 800be7c:	bf00      	nop
 800be7e:	46bd      	mov	sp, r7
 800be80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be84:	4770      	bx	lr
 800be86:	bf00      	nop
 800be88:	20000370 	.word	0x20000370

0800be8c <AssertError>:

void AssertError( AppErrorList_t eAppError )
{
 800be8c:	b480      	push	{r7}
 800be8e:	b083      	sub	sp, #12
 800be90:	af00      	add	r7, sp, #0
 800be92:	4603      	mov	r3, r0
 800be94:	80fb      	strh	r3, [r7, #6]
	kApplicationBase.u32ErrorReg |= (uint32_t)eAppError;
 800be96:	4b06      	ldr	r3, [pc, #24]	; (800beb0 <AssertError+0x24>)
 800be98:	695a      	ldr	r2, [r3, #20]
 800be9a:	88fb      	ldrh	r3, [r7, #6]
 800be9c:	4313      	orrs	r3, r2
 800be9e:	4a04      	ldr	r2, [pc, #16]	; (800beb0 <AssertError+0x24>)
 800bea0:	6153      	str	r3, [r2, #20]
}
 800bea2:	bf00      	nop
 800bea4:	370c      	adds	r7, #12
 800bea6:	46bd      	mov	sp, r7
 800bea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beac:	4770      	bx	lr
 800beae:	bf00      	nop
 800beb0:	20000370 	.word	0x20000370

0800beb4 <TurnOnSynchronousEvent>:

void TurnOnSynchronousEvent()
{
 800beb4:	b480      	push	{r7}
 800beb6:	af00      	add	r7, sp, #0

}
 800beb8:	bf00      	nop
 800beba:	46bd      	mov	sp, r7
 800bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec0:	4770      	bx	lr
	...

0800bec4 <DataHandler_Initialize>:
static MemoryInterchange_t kMemoryInterchange;

void DataHandler_CopyMemoryToTransmissionBuffer( float *pfMemoryArray );

void DataHandler_Initialize()
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	af00      	add	r7, sp, #0
	DataHandler_Reset();
 800bec8:	f000 f808 	bl	800bedc <DataHandler_Reset>
	kDataHandler.bEnabled = true;
 800becc:	4b02      	ldr	r3, [pc, #8]	; (800bed8 <DataHandler_Initialize+0x14>)
 800bece:	2201      	movs	r2, #1
 800bed0:	701a      	strb	r2, [r3, #0]

}
 800bed2:	bf00      	nop
 800bed4:	bd80      	pop	{r7, pc}
 800bed6:	bf00      	nop
 800bed8:	2000038c 	.word	0x2000038c

0800bedc <DataHandler_Reset>:
void DataHandler_Reset()
{
 800bedc:	b490      	push	{r4, r7}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
	kDataHandler.u8ActiveMemoryPage = 0;
 800bee2:	4b35      	ldr	r3, [pc, #212]	; (800bfb8 <DataHandler_Reset+0xdc>)
 800bee4:	2200      	movs	r2, #0
 800bee6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
	kDataHandler.u8LastMemoryPage = 0;
 800beea:	4b33      	ldr	r3, [pc, #204]	; (800bfb8 <DataHandler_Reset+0xdc>)
 800beec:	2200      	movs	r2, #0
 800beee:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
	kDataHandler.u8WidthPointer = 0;
 800bef2:	4b31      	ldr	r3, [pc, #196]	; (800bfb8 <DataHandler_Reset+0xdc>)
 800bef4:	2200      	movs	r2, #0
 800bef6:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
	kDataHandler.u8LengthPointer = 0;
 800befa:	4b2f      	ldr	r3, [pc, #188]	; (800bfb8 <DataHandler_Reset+0xdc>)
 800befc:	2200      	movs	r2, #0
 800befe:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
	kDataHandler.bPageFilled = false;
 800bf02:	4b2d      	ldr	r3, [pc, #180]	; (800bfb8 <DataHandler_Reset+0xdc>)
 800bf04:	2200      	movs	r2, #0
 800bf06:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
	kDataHandler.bReadyToSend = false;
 800bf0a:	4b2b      	ldr	r3, [pc, #172]	; (800bfb8 <DataHandler_Reset+0xdc>)
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

	for(uint8_t u8PageIdx = 0; u8PageIdx < dMemoryPagesCount; u8PageIdx++)
 800bf12:	2300      	movs	r3, #0
 800bf14:	71fb      	strb	r3, [r7, #7]
 800bf16:	e046      	b.n	800bfa6 <DataHandler_Reset+0xca>
	{
		for(uint8_t u8LengthIdx = 0; u8LengthIdx < dMemoryLength; u8LengthIdx++)
 800bf18:	2300      	movs	r3, #0
 800bf1a:	71bb      	strb	r3, [r7, #6]
 800bf1c:	e03d      	b.n	800bf9a <DataHandler_Reset+0xbe>
		{
			kDataHandler.kMeasurementMemory[u8PageIdx].bAlreadySent = false;
 800bf1e:	79fa      	ldrb	r2, [r7, #7]
 800bf20:	4925      	ldr	r1, [pc, #148]	; (800bfb8 <DataHandler_Reset+0xdc>)
 800bf22:	4613      	mov	r3, r2
 800bf24:	019b      	lsls	r3, r3, #6
 800bf26:	4413      	add	r3, r2
 800bf28:	00db      	lsls	r3, r3, #3
 800bf2a:	440b      	add	r3, r1
 800bf2c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bf30:	2200      	movs	r2, #0
 800bf32:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[u8PageIdx].bHardSaved = false;
 800bf34:	79fa      	ldrb	r2, [r7, #7]
 800bf36:	4920      	ldr	r1, [pc, #128]	; (800bfb8 <DataHandler_Reset+0xdc>)
 800bf38:	4613      	mov	r3, r2
 800bf3a:	019b      	lsls	r3, r3, #6
 800bf3c:	4413      	add	r3, r2
 800bf3e:	00db      	lsls	r3, r3, #3
 800bf40:	440b      	add	r3, r1
 800bf42:	f203 2309 	addw	r3, r3, #521	; 0x209
 800bf46:	2200      	movs	r2, #0
 800bf48:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[u8PageIdx].bHardSaveRequest = false;
 800bf4a:	79fa      	ldrb	r2, [r7, #7]
 800bf4c:	491a      	ldr	r1, [pc, #104]	; (800bfb8 <DataHandler_Reset+0xdc>)
 800bf4e:	4613      	mov	r3, r2
 800bf50:	019b      	lsls	r3, r3, #6
 800bf52:	4413      	add	r3, r2
 800bf54:	00db      	lsls	r3, r3, #3
 800bf56:	440b      	add	r3, r1
 800bf58:	f203 230a 	addw	r3, r3, #522	; 0x20a
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	701a      	strb	r2, [r3, #0]

			for(uint8_t u8WidthIdx = 0; u8WidthIdx < dMemoryWidth; u8WidthIdx++)
 800bf60:	2300      	movs	r3, #0
 800bf62:	717b      	strb	r3, [r7, #5]
 800bf64:	e013      	b.n	800bf8e <DataHandler_Reset+0xb2>
			{
				kDataHandler.kMeasurementMemory[u8PageIdx].fMeasurementArray[u8LengthIdx][u8WidthIdx] = 0;
 800bf66:	79fa      	ldrb	r2, [r7, #7]
 800bf68:	79bb      	ldrb	r3, [r7, #6]
 800bf6a:	7979      	ldrb	r1, [r7, #5]
 800bf6c:	4c12      	ldr	r4, [pc, #72]	; (800bfb8 <DataHandler_Reset+0xdc>)
 800bf6e:	0118      	lsls	r0, r3, #4
 800bf70:	4613      	mov	r3, r2
 800bf72:	019b      	lsls	r3, r3, #6
 800bf74:	4413      	add	r3, r2
 800bf76:	005b      	lsls	r3, r3, #1
 800bf78:	4403      	add	r3, r0
 800bf7a:	440b      	add	r3, r1
 800bf7c:	009b      	lsls	r3, r3, #2
 800bf7e:	4423      	add	r3, r4
 800bf80:	3308      	adds	r3, #8
 800bf82:	f04f 0200 	mov.w	r2, #0
 800bf86:	601a      	str	r2, [r3, #0]
			for(uint8_t u8WidthIdx = 0; u8WidthIdx < dMemoryWidth; u8WidthIdx++)
 800bf88:	797b      	ldrb	r3, [r7, #5]
 800bf8a:	3301      	adds	r3, #1
 800bf8c:	717b      	strb	r3, [r7, #5]
 800bf8e:	797b      	ldrb	r3, [r7, #5]
 800bf90:	2b0f      	cmp	r3, #15
 800bf92:	d9e8      	bls.n	800bf66 <DataHandler_Reset+0x8a>
		for(uint8_t u8LengthIdx = 0; u8LengthIdx < dMemoryLength; u8LengthIdx++)
 800bf94:	79bb      	ldrb	r3, [r7, #6]
 800bf96:	3301      	adds	r3, #1
 800bf98:	71bb      	strb	r3, [r7, #6]
 800bf9a:	79bb      	ldrb	r3, [r7, #6]
 800bf9c:	2b07      	cmp	r3, #7
 800bf9e:	d9be      	bls.n	800bf1e <DataHandler_Reset+0x42>
	for(uint8_t u8PageIdx = 0; u8PageIdx < dMemoryPagesCount; u8PageIdx++)
 800bfa0:	79fb      	ldrb	r3, [r7, #7]
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	71fb      	strb	r3, [r7, #7]
 800bfa6:	79fb      	ldrb	r3, [r7, #7]
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d9b5      	bls.n	800bf18 <DataHandler_Reset+0x3c>
			}
		}
	}

}
 800bfac:	bf00      	nop
 800bfae:	bf00      	nop
 800bfb0:	3708      	adds	r7, #8
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bc90      	pop	{r4, r7}
 800bfb6:	4770      	bx	lr
 800bfb8:	2000038c 	.word	0x2000038c

0800bfbc <DataHandler_OpenNewMeasurement>:
void DataHandler_OpenNewMeasurement( uint32_t u32TimeStamp )
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b082      	sub	sp, #8
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]

	if( kDataHandler.bEnabled )
 800bfc4:	4b46      	ldr	r3, [pc, #280]	; (800c0e0 <DataHandler_OpenNewMeasurement+0x124>)
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	f000 8081 	beq.w	800c0d0 <DataHandler_OpenNewMeasurement+0x114>
	{
		kDataHandler.u8LengthPointer++;
 800bfce:	4b44      	ldr	r3, [pc, #272]	; (800c0e0 <DataHandler_OpenNewMeasurement+0x124>)
 800bfd0:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	b2da      	uxtb	r2, r3
 800bfd8:	4b41      	ldr	r3, [pc, #260]	; (800c0e0 <DataHandler_OpenNewMeasurement+0x124>)
 800bfda:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
		kDataHandler.u8WidthPointer = 0;
 800bfde:	4b40      	ldr	r3, [pc, #256]	; (800c0e0 <DataHandler_OpenNewMeasurement+0x124>)
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416

		/*
		 * Every time new measurement is opened the previous one is assumed to be ready for transmission
		 */
		kDataHandler.bReadyToSend = true;
 800bfe6:	4b3e      	ldr	r3, [pc, #248]	; (800c0e0 <DataHandler_OpenNewMeasurement+0x124>)
 800bfe8:	2201      	movs	r2, #1
 800bfea:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

		if(kDataHandler.u8LengthPointer >= dMemoryLength)
 800bfee:	4b3c      	ldr	r3, [pc, #240]	; (800c0e0 <DataHandler_OpenNewMeasurement+0x124>)
 800bff0:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 800bff4:	2b07      	cmp	r3, #7
 800bff6:	d96f      	bls.n	800c0d8 <DataHandler_OpenNewMeasurement+0x11c>
		{
			kDataHandler.u8LengthPointer = 0;
 800bff8:	4b39      	ldr	r3, [pc, #228]	; (800c0e0 <DataHandler_OpenNewMeasurement+0x124>)
 800bffa:	2200      	movs	r2, #0
 800bffc:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bAlreadySent = false;
 800c000:	4b37      	ldr	r3, [pc, #220]	; (800c0e0 <DataHandler_OpenNewMeasurement+0x124>)
 800c002:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800c006:	4619      	mov	r1, r3
 800c008:	4a35      	ldr	r2, [pc, #212]	; (800c0e0 <DataHandler_OpenNewMeasurement+0x124>)
 800c00a:	460b      	mov	r3, r1
 800c00c:	019b      	lsls	r3, r3, #6
 800c00e:	440b      	add	r3, r1
 800c010:	00db      	lsls	r3, r3, #3
 800c012:	4413      	add	r3, r2
 800c014:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c018:	2200      	movs	r2, #0
 800c01a:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bHardSaveRequest = true;
 800c01c:	4b30      	ldr	r3, [pc, #192]	; (800c0e0 <DataHandler_OpenNewMeasurement+0x124>)
 800c01e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800c022:	4619      	mov	r1, r3
 800c024:	4a2e      	ldr	r2, [pc, #184]	; (800c0e0 <DataHandler_OpenNewMeasurement+0x124>)
 800c026:	460b      	mov	r3, r1
 800c028:	019b      	lsls	r3, r3, #6
 800c02a:	440b      	add	r3, r1
 800c02c:	00db      	lsls	r3, r3, #3
 800c02e:	4413      	add	r3, r2
 800c030:	f203 230a 	addw	r3, r3, #522	; 0x20a
 800c034:	2201      	movs	r2, #1
 800c036:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bHardSaved = false;
 800c038:	4b29      	ldr	r3, [pc, #164]	; (800c0e0 <DataHandler_OpenNewMeasurement+0x124>)
 800c03a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800c03e:	4619      	mov	r1, r3
 800c040:	4a27      	ldr	r2, [pc, #156]	; (800c0e0 <DataHandler_OpenNewMeasurement+0x124>)
 800c042:	460b      	mov	r3, r1
 800c044:	019b      	lsls	r3, r3, #6
 800c046:	440b      	add	r3, r1
 800c048:	00db      	lsls	r3, r3, #3
 800c04a:	4413      	add	r3, r2
 800c04c:	f203 2309 	addw	r3, r3, #521	; 0x209
 800c050:	2200      	movs	r2, #0
 800c052:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].u16Timestamp = u32TimeStamp;
 800c054:	4b22      	ldr	r3, [pc, #136]	; (800c0e0 <DataHandler_OpenNewMeasurement+0x124>)
 800c056:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800c05a:	4619      	mov	r1, r3
 800c05c:	4a20      	ldr	r2, [pc, #128]	; (800c0e0 <DataHandler_OpenNewMeasurement+0x124>)
 800c05e:	460b      	mov	r3, r1
 800c060:	019b      	lsls	r3, r3, #6
 800c062:	440b      	add	r3, r1
 800c064:	00db      	lsls	r3, r3, #3
 800c066:	4413      	add	r3, r2
 800c068:	3304      	adds	r3, #4
 800c06a:	687a      	ldr	r2, [r7, #4]
 800c06c:	601a      	str	r2, [r3, #0]

			if( !kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].bHardSaved )
 800c06e:	4b1c      	ldr	r3, [pc, #112]	; (800c0e0 <DataHandler_OpenNewMeasurement+0x124>)
 800c070:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800c074:	4619      	mov	r1, r3
 800c076:	4a1a      	ldr	r2, [pc, #104]	; (800c0e0 <DataHandler_OpenNewMeasurement+0x124>)
 800c078:	460b      	mov	r3, r1
 800c07a:	019b      	lsls	r3, r3, #6
 800c07c:	440b      	add	r3, r1
 800c07e:	00db      	lsls	r3, r3, #3
 800c080:	4413      	add	r3, r2
 800c082:	f203 2309 	addw	r3, r3, #521	; 0x209
 800c086:	781b      	ldrb	r3, [r3, #0]
 800c088:	f083 0301 	eor.w	r3, r3, #1
 800c08c:	b2db      	uxtb	r3, r3
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d002      	beq.n	800c098 <DataHandler_OpenNewMeasurement+0xdc>
			{
				AssertError(AppError_DataLost); // Data not saved; possibly add timestamp to track lost data chunks
 800c092:	2040      	movs	r0, #64	; 0x40
 800c094:	f7ff fefa 	bl	800be8c <AssertError>
			}

			kDataHandler.u8LastMemoryPage = kDataHandler.u8ActiveMemoryPage;
 800c098:	4b11      	ldr	r3, [pc, #68]	; (800c0e0 <DataHandler_OpenNewMeasurement+0x124>)
 800c09a:	f893 2414 	ldrb.w	r2, [r3, #1044]	; 0x414
 800c09e:	4b10      	ldr	r3, [pc, #64]	; (800c0e0 <DataHandler_OpenNewMeasurement+0x124>)
 800c0a0:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
			kDataHandler.u8ActiveMemoryPage++;
 800c0a4:	4b0e      	ldr	r3, [pc, #56]	; (800c0e0 <DataHandler_OpenNewMeasurement+0x124>)
 800c0a6:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	b2da      	uxtb	r2, r3
 800c0ae:	4b0c      	ldr	r3, [pc, #48]	; (800c0e0 <DataHandler_OpenNewMeasurement+0x124>)
 800c0b0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
			if(kDataHandler.u8ActiveMemoryPage >= dMemoryPagesCount)
 800c0b4:	4b0a      	ldr	r3, [pc, #40]	; (800c0e0 <DataHandler_OpenNewMeasurement+0x124>)
 800c0b6:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800c0ba:	2b01      	cmp	r3, #1
 800c0bc:	d903      	bls.n	800c0c6 <DataHandler_OpenNewMeasurement+0x10a>
			{
				kDataHandler.u8ActiveMemoryPage = 0;
 800c0be:	4b08      	ldr	r3, [pc, #32]	; (800c0e0 <DataHandler_OpenNewMeasurement+0x124>)
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
			}
			kDataHandler.bPageFilled = true;
 800c0c6:	4b06      	ldr	r3, [pc, #24]	; (800c0e0 <DataHandler_OpenNewMeasurement+0x124>)
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
	else
	{
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
	}

}
 800c0ce:	e003      	b.n	800c0d8 <DataHandler_OpenNewMeasurement+0x11c>
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
 800c0d0:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c0d4:	f7ff feda 	bl	800be8c <AssertError>
}
 800c0d8:	bf00      	nop
 800c0da:	3708      	adds	r7, #8
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}
 800c0e0:	2000038c 	.word	0x2000038c

0800c0e4 <DataHandler_StoreMeasurement>:

void DataHandler_StoreMeasurement( float fNewMeasurement )
{
 800c0e4:	b590      	push	{r4, r7, lr}
 800c0e6:	b085      	sub	sp, #20
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t u8MemPage = kDataHandler.u8ActiveMemoryPage;
 800c0ee:	4b20      	ldr	r3, [pc, #128]	; (800c170 <DataHandler_StoreMeasurement+0x8c>)
 800c0f0:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800c0f4:	73fb      	strb	r3, [r7, #15]
	uint8_t u8LenPtr = kDataHandler.u8LengthPointer;
 800c0f6:	4b1e      	ldr	r3, [pc, #120]	; (800c170 <DataHandler_StoreMeasurement+0x8c>)
 800c0f8:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 800c0fc:	73bb      	strb	r3, [r7, #14]
	uint8_t u8WidPtr = kDataHandler.u8WidthPointer;
 800c0fe:	4b1c      	ldr	r3, [pc, #112]	; (800c170 <DataHandler_StoreMeasurement+0x8c>)
 800c100:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 800c104:	737b      	strb	r3, [r7, #13]

	if( kDataHandler.bEnabled )
 800c106:	4b1a      	ldr	r3, [pc, #104]	; (800c170 <DataHandler_StoreMeasurement+0x8c>)
 800c108:	781b      	ldrb	r3, [r3, #0]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d028      	beq.n	800c160 <DataHandler_StoreMeasurement+0x7c>
	{
		kDataHandler.kMeasurementMemory[u8MemPage].fMeasurementArray[u8LenPtr][u8WidPtr] = fNewMeasurement;
 800c10e:	7bfa      	ldrb	r2, [r7, #15]
 800c110:	7bbb      	ldrb	r3, [r7, #14]
 800c112:	7b79      	ldrb	r1, [r7, #13]
 800c114:	4c16      	ldr	r4, [pc, #88]	; (800c170 <DataHandler_StoreMeasurement+0x8c>)
 800c116:	0118      	lsls	r0, r3, #4
 800c118:	4613      	mov	r3, r2
 800c11a:	019b      	lsls	r3, r3, #6
 800c11c:	4413      	add	r3, r2
 800c11e:	005b      	lsls	r3, r3, #1
 800c120:	4403      	add	r3, r0
 800c122:	440b      	add	r3, r1
 800c124:	009b      	lsls	r3, r3, #2
 800c126:	4423      	add	r3, r4
 800c128:	3308      	adds	r3, #8
 800c12a:	687a      	ldr	r2, [r7, #4]
 800c12c:	601a      	str	r2, [r3, #0]
		kDataHandler.u8WidthPointer++;
 800c12e:	4b10      	ldr	r3, [pc, #64]	; (800c170 <DataHandler_StoreMeasurement+0x8c>)
 800c130:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 800c134:	3301      	adds	r3, #1
 800c136:	b2da      	uxtb	r2, r3
 800c138:	4b0d      	ldr	r3, [pc, #52]	; (800c170 <DataHandler_StoreMeasurement+0x8c>)
 800c13a:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416

		if(kDataHandler.u8WidthPointer >= dMemoryWidth)
 800c13e:	4b0c      	ldr	r3, [pc, #48]	; (800c170 <DataHandler_StoreMeasurement+0x8c>)
 800c140:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 800c144:	2b0f      	cmp	r3, #15
 800c146:	d90f      	bls.n	800c168 <DataHandler_StoreMeasurement+0x84>
		{
			kDataHandler.u8WidthPointer--;
 800c148:	4b09      	ldr	r3, [pc, #36]	; (800c170 <DataHandler_StoreMeasurement+0x8c>)
 800c14a:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 800c14e:	3b01      	subs	r3, #1
 800c150:	b2da      	uxtb	r2, r3
 800c152:	4b07      	ldr	r3, [pc, #28]	; (800c170 <DataHandler_StoreMeasurement+0x8c>)
 800c154:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
			AssertError(AppError_WidthOverstretched); // Width overstretched - no new measurement was called;
 800c158:	2080      	movs	r0, #128	; 0x80
 800c15a:	f7ff fe97 	bl	800be8c <AssertError>
	}
	else
	{
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
	}
}
 800c15e:	e003      	b.n	800c168 <DataHandler_StoreMeasurement+0x84>
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
 800c160:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c164:	f7ff fe92 	bl	800be8c <AssertError>
}
 800c168:	bf00      	nop
 800c16a:	3714      	adds	r7, #20
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd90      	pop	{r4, r7, pc}
 800c170:	2000038c 	.word	0x2000038c

0800c174 <DataHandler_Operate>:

void DataHandler_Operate()
{
 800c174:	b580      	push	{r7, lr}
 800c176:	af00      	add	r7, sp, #0
	if( kDataHandler.bEnabled )
 800c178:	4b2b      	ldr	r3, [pc, #172]	; (800c228 <DataHandler_Operate+0xb4>)
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d04c      	beq.n	800c21a <DataHandler_Operate+0xa6>
	{

		if( kDataHandler.bPageFilled )
 800c180:	4b29      	ldr	r3, [pc, #164]	; (800c228 <DataHandler_Operate+0xb4>)
 800c182:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800c186:	2b00      	cmp	r3, #0
 800c188:	d011      	beq.n	800c1ae <DataHandler_Operate+0x3a>
		{
			kDataHandler.kMeasurementMemory[kDataHandler.u8LastMemoryPage].bHardSaveRequest = true;
 800c18a:	4b27      	ldr	r3, [pc, #156]	; (800c228 <DataHandler_Operate+0xb4>)
 800c18c:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800c190:	4619      	mov	r1, r3
 800c192:	4a25      	ldr	r2, [pc, #148]	; (800c228 <DataHandler_Operate+0xb4>)
 800c194:	460b      	mov	r3, r1
 800c196:	019b      	lsls	r3, r3, #6
 800c198:	440b      	add	r3, r1
 800c19a:	00db      	lsls	r3, r3, #3
 800c19c:	4413      	add	r3, r2
 800c19e:	f203 230a 	addw	r3, r3, #522	; 0x20a
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	701a      	strb	r2, [r3, #0]
			kDataHandler.bPageFilled = false;
 800c1a6:	4b20      	ldr	r3, [pc, #128]	; (800c228 <DataHandler_Operate+0xb4>)
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
			// Call to save with SD card
		}

		if( kDataHandler.bReadyToSend )
 800c1ae:	4b1e      	ldr	r3, [pc, #120]	; (800c228 <DataHandler_Operate+0xb4>)
 800c1b0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d034      	beq.n	800c222 <DataHandler_Operate+0xae>
		{
			if(kDataHandler.u8LengthPointer == 0)
 800c1b8:	4b1b      	ldr	r3, [pc, #108]	; (800c228 <DataHandler_Operate+0xb4>)
 800c1ba:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d110      	bne.n	800c1e4 <DataHandler_Operate+0x70>
			{
				DataHandler_CopyMemoryToTransmissionBuffer(kDataHandler.kMeasurementMemory[kDataHandler.u8LastMemoryPage].fMeasurementArray[dMemoryLength-1]);
 800c1c2:	4b19      	ldr	r3, [pc, #100]	; (800c228 <DataHandler_Operate+0xb4>)
 800c1c4:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	4613      	mov	r3, r2
 800c1cc:	019b      	lsls	r3, r3, #6
 800c1ce:	4413      	add	r3, r2
 800c1d0:	00db      	lsls	r3, r3, #3
 800c1d2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800c1d6:	4a14      	ldr	r2, [pc, #80]	; (800c228 <DataHandler_Operate+0xb4>)
 800c1d8:	4413      	add	r3, r2
 800c1da:	3308      	adds	r3, #8
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f000 f837 	bl	800c250 <DataHandler_CopyMemoryToTransmissionBuffer>
 800c1e2:	e013      	b.n	800c20c <DataHandler_Operate+0x98>
//				bTransmissionStatus = USB_TransmitData(kDataHandler.kMeasurementMemory[kDataHandler.u8LastMemoryPage].fMeasurementArray[dMemoryLength-1]);
			}
			else
			{
//				bTransmissionStatus = USB_TransmitData(kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].fMeasurementArray[kDataHandler.u8LengthPointer-1]);
				DataHandler_CopyMemoryToTransmissionBuffer(kDataHandler.kMeasurementMemory[kDataHandler.u8ActiveMemoryPage].fMeasurementArray[kDataHandler.u8LengthPointer-1]);
 800c1e4:	4b10      	ldr	r3, [pc, #64]	; (800c228 <DataHandler_Operate+0xb4>)
 800c1e6:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800c1ea:	4619      	mov	r1, r3
 800c1ec:	4b0e      	ldr	r3, [pc, #56]	; (800c228 <DataHandler_Operate+0xb4>)
 800c1ee:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 800c1f2:	3b01      	subs	r3, #1
 800c1f4:	019a      	lsls	r2, r3, #6
 800c1f6:	460b      	mov	r3, r1
 800c1f8:	019b      	lsls	r3, r3, #6
 800c1fa:	440b      	add	r3, r1
 800c1fc:	00db      	lsls	r3, r3, #3
 800c1fe:	4413      	add	r3, r2
 800c200:	4a09      	ldr	r2, [pc, #36]	; (800c228 <DataHandler_Operate+0xb4>)
 800c202:	4413      	add	r3, r2
 800c204:	3308      	adds	r3, #8
 800c206:	4618      	mov	r0, r3
 800c208:	f000 f822 	bl	800c250 <DataHandler_CopyMemoryToTransmissionBuffer>
			}

			CallForTransmissionEvent(); //Inform main event system that there is a pending transmission and data is preloaded to Memory Interchange
 800c20c:	f000 f8b2 	bl	800c374 <CallForTransmissionEvent>
			kDataHandler.bReadyToSend = false;
 800c210:	4b05      	ldr	r3, [pc, #20]	; (800c228 <DataHandler_Operate+0xb4>)
 800c212:	2200      	movs	r2, #0
 800c214:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
	}
	else
	{
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
	}
}
 800c218:	e003      	b.n	800c222 <DataHandler_Operate+0xae>
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
 800c21a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c21e:	f7ff fe35 	bl	800be8c <AssertError>
}
 800c222:	bf00      	nop
 800c224:	bd80      	pop	{r7, pc}
 800c226:	bf00      	nop
 800c228:	2000038c 	.word	0x2000038c

0800c22c <DataHandler_AccessMemoryInterchange>:

void DataHandler_AccessMemoryInterchange( MemoryInterchange_t ** pkMemoryInterchangeAddress)
{
 800c22c:	b480      	push	{r7}
 800c22e:	b085      	sub	sp, #20
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
	MemoryInterchange_t *pkPointer;
	pkPointer = &kMemoryInterchange;
 800c234:	4b05      	ldr	r3, [pc, #20]	; (800c24c <DataHandler_AccessMemoryInterchange+0x20>)
 800c236:	60fb      	str	r3, [r7, #12]
	*pkMemoryInterchangeAddress = pkPointer;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	68fa      	ldr	r2, [r7, #12]
 800c23c:	601a      	str	r2, [r3, #0]
}
 800c23e:	bf00      	nop
 800c240:	3714      	adds	r7, #20
 800c242:	46bd      	mov	sp, r7
 800c244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c248:	4770      	bx	lr
 800c24a:	bf00      	nop
 800c24c:	200007a8 	.word	0x200007a8

0800c250 <DataHandler_CopyMemoryToTransmissionBuffer>:

void DataHandler_CopyMemoryToTransmissionBuffer( float *pfMemoryArray )
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b082      	sub	sp, #8
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
	if( (kMemoryInterchange.eMemoryState != MemoryState_DataSent) && ( kMemoryInterchange.eMemoryState != MemoryState_DataSkipped ) )
 800c258:	4b0b      	ldr	r3, [pc, #44]	; (800c288 <DataHandler_CopyMemoryToTransmissionBuffer+0x38>)
 800c25a:	791b      	ldrb	r3, [r3, #4]
 800c25c:	2b02      	cmp	r3, #2
 800c25e:	d007      	beq.n	800c270 <DataHandler_CopyMemoryToTransmissionBuffer+0x20>
 800c260:	4b09      	ldr	r3, [pc, #36]	; (800c288 <DataHandler_CopyMemoryToTransmissionBuffer+0x38>)
 800c262:	791b      	ldrb	r3, [r3, #4]
 800c264:	2b03      	cmp	r3, #3
 800c266:	d003      	beq.n	800c270 <DataHandler_CopyMemoryToTransmissionBuffer+0x20>
	{
		AssertError(AppError_DataLost); // Memory would be overwritten;
 800c268:	2040      	movs	r0, #64	; 0x40
 800c26a:	f7ff fe0f 	bl	800be8c <AssertError>
 800c26e:	e006      	b.n	800c27e <DataHandler_CopyMemoryToTransmissionBuffer+0x2e>
	}
	else
	{
		kMemoryInterchange.fDataPointer = pfMemoryArray;
 800c270:	4a05      	ldr	r2, [pc, #20]	; (800c288 <DataHandler_CopyMemoryToTransmissionBuffer+0x38>)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6013      	str	r3, [r2, #0]
		kMemoryInterchange.eMemoryState = MemoryState_NewData;
 800c276:	4b04      	ldr	r3, [pc, #16]	; (800c288 <DataHandler_CopyMemoryToTransmissionBuffer+0x38>)
 800c278:	2200      	movs	r2, #0
 800c27a:	711a      	strb	r2, [r3, #4]
	}

}
 800c27c:	bf00      	nop
 800c27e:	bf00      	nop
 800c280:	3708      	adds	r7, #8
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}
 800c286:	bf00      	nop
 800c288:	200007a8 	.word	0x200007a8

0800c28c <EventSystem_Initialize>:
}EventData_t;

static EventData_t kEventData;

void EventSystem_Initialize()
{
 800c28c:	b480      	push	{r7}
 800c28e:	af00      	add	r7, sp, #0
	kEventData.bInitalized = true;
 800c290:	4b03      	ldr	r3, [pc, #12]	; (800c2a0 <EventSystem_Initialize+0x14>)
 800c292:	2201      	movs	r2, #1
 800c294:	701a      	strb	r2, [r3, #0]
}
 800c296:	bf00      	nop
 800c298:	46bd      	mov	sp, r7
 800c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29e:	4770      	bx	lr
 800c2a0:	200007b0 	.word	0x200007b0

0800c2a4 <EventSystem_HandleEvent>:
void EventSystem_HandleEvent()
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b082      	sub	sp, #8
 800c2a8:	af00      	add	r7, sp, #0
	uint32_t u32EventCode = 0;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	607b      	str	r3, [r7, #4]

	u32EventCode = (uint32_t)Event_DataReadyToTransmit;
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	607b      	str	r3, [r7, #4]

	if( (kEventData.u32EventRegister & u32EventCode) == u32EventCode )
 800c2b2:	4b1d      	ldr	r3, [pc, #116]	; (800c328 <EventSystem_HandleEvent+0x84>)
 800c2b4:	685a      	ldr	r2, [r3, #4]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	4013      	ands	r3, r2
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	d108      	bne.n	800c2d2 <EventSystem_HandleEvent+0x2e>
	{
		ComManager_ArmTransmission();
 800c2c0:	f000 fade 	bl	800c880 <ComManager_ArmTransmission>
		kEventData.u32EventRegister &= ~(u32EventCode);
 800c2c4:	4b18      	ldr	r3, [pc, #96]	; (800c328 <EventSystem_HandleEvent+0x84>)
 800c2c6:	685a      	ldr	r2, [r3, #4]
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	43db      	mvns	r3, r3
 800c2cc:	4013      	ands	r3, r2
 800c2ce:	4a16      	ldr	r2, [pc, #88]	; (800c328 <EventSystem_HandleEvent+0x84>)
 800c2d0:	6053      	str	r3, [r2, #4]
	}
	u32EventCode = (uint32_t)Event_USBConnected;
 800c2d2:	2302      	movs	r3, #2
 800c2d4:	607b      	str	r3, [r7, #4]

	if( (kEventData.u32EventRegister & u32EventCode) == u32EventCode )
 800c2d6:	4b14      	ldr	r3, [pc, #80]	; (800c328 <EventSystem_HandleEvent+0x84>)
 800c2d8:	685a      	ldr	r2, [r3, #4]
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	4013      	ands	r3, r2
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d109      	bne.n	800c2f8 <EventSystem_HandleEvent+0x54>
	{
		CommManager_SetUSBConnectionState(USB_Connected);
 800c2e4:	2001      	movs	r0, #1
 800c2e6:	f000 faad 	bl	800c844 <CommManager_SetUSBConnectionState>
		kEventData.u32EventRegister &= ~(u32EventCode);
 800c2ea:	4b0f      	ldr	r3, [pc, #60]	; (800c328 <EventSystem_HandleEvent+0x84>)
 800c2ec:	685a      	ldr	r2, [r3, #4]
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	43db      	mvns	r3, r3
 800c2f2:	4013      	ands	r3, r2
 800c2f4:	4a0c      	ldr	r2, [pc, #48]	; (800c328 <EventSystem_HandleEvent+0x84>)
 800c2f6:	6053      	str	r3, [r2, #4]
	}
	u32EventCode = (uint32_t)Event_USBDisconnected;
 800c2f8:	2304      	movs	r3, #4
 800c2fa:	607b      	str	r3, [r7, #4]

	if( (kEventData.u32EventRegister & u32EventCode) == u32EventCode )
 800c2fc:	4b0a      	ldr	r3, [pc, #40]	; (800c328 <EventSystem_HandleEvent+0x84>)
 800c2fe:	685a      	ldr	r2, [r3, #4]
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	4013      	ands	r3, r2
 800c304:	687a      	ldr	r2, [r7, #4]
 800c306:	429a      	cmp	r2, r3
 800c308:	d109      	bne.n	800c31e <EventSystem_HandleEvent+0x7a>
	{
		CommManager_SetUSBConnectionState(USB_Disconnected);
 800c30a:	2000      	movs	r0, #0
 800c30c:	f000 fa9a 	bl	800c844 <CommManager_SetUSBConnectionState>
		kEventData.u32EventRegister &= ~(u32EventCode);
 800c310:	4b05      	ldr	r3, [pc, #20]	; (800c328 <EventSystem_HandleEvent+0x84>)
 800c312:	685a      	ldr	r2, [r3, #4]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	43db      	mvns	r3, r3
 800c318:	4013      	ands	r3, r2
 800c31a:	4a03      	ldr	r2, [pc, #12]	; (800c328 <EventSystem_HandleEvent+0x84>)
 800c31c:	6053      	str	r3, [r2, #4]
	}
}
 800c31e:	bf00      	nop
 800c320:	3708      	adds	r7, #8
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}
 800c326:	bf00      	nop
 800c328:	200007b0 	.word	0x200007b0

0800c32c <EventSystem_Signalize>:

void EventSystem_Signalize(Event_t eEvent)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b084      	sub	sp, #16
 800c330:	af00      	add	r7, sp, #0
 800c332:	4603      	mov	r3, r0
 800c334:	71fb      	strb	r3, [r7, #7]
	uint32_t u32EventCode = (uint32_t)eEvent;
 800c336:	79fb      	ldrb	r3, [r7, #7]
 800c338:	60fb      	str	r3, [r7, #12]

	if(kEventData.bInitalized)
 800c33a:	4b0d      	ldr	r3, [pc, #52]	; (800c370 <EventSystem_Signalize+0x44>)
 800c33c:	781b      	ldrb	r3, [r3, #0]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d011      	beq.n	800c366 <EventSystem_Signalize+0x3a>
	{
		if( (kEventData.u32EventRegister & u32EventCode) == u32EventCode )
 800c342:	4b0b      	ldr	r3, [pc, #44]	; (800c370 <EventSystem_Signalize+0x44>)
 800c344:	685a      	ldr	r2, [r3, #4]
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	4013      	ands	r3, r2
 800c34a:	68fa      	ldr	r2, [r7, #12]
 800c34c:	429a      	cmp	r2, r3
 800c34e:	d104      	bne.n	800c35a <EventSystem_Signalize+0x2e>
		{
			AssertError(AppError_EventOverlap); // Event already set, before handling it
 800c350:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c354:	f7ff fd9a 	bl	800be8c <AssertError>
		else
		{
			kEventData.u32EventRegister |= u32EventCode; // Set bit in register according to the event code
		}
	}
}
 800c358:	e005      	b.n	800c366 <EventSystem_Signalize+0x3a>
			kEventData.u32EventRegister |= u32EventCode; // Set bit in register according to the event code
 800c35a:	4b05      	ldr	r3, [pc, #20]	; (800c370 <EventSystem_Signalize+0x44>)
 800c35c:	685a      	ldr	r2, [r3, #4]
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	4313      	orrs	r3, r2
 800c362:	4a03      	ldr	r2, [pc, #12]	; (800c370 <EventSystem_Signalize+0x44>)
 800c364:	6053      	str	r3, [r2, #4]
}
 800c366:	bf00      	nop
 800c368:	3710      	adds	r7, #16
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}
 800c36e:	bf00      	nop
 800c370:	200007b0 	.word	0x200007b0

0800c374 <CallForTransmissionEvent>:
#include "ModuleInterconnect.h"
#include "EventSystem.h"
#include "DataCommon.h"

void CallForTransmissionEvent()
{
 800c374:	b580      	push	{r7, lr}
 800c376:	af00      	add	r7, sp, #0
	EventSystem_Signalize(Event_DataReadyToTransmit);
 800c378:	2001      	movs	r0, #1
 800c37a:	f7ff ffd7 	bl	800c32c <EventSystem_Signalize>
}
 800c37e:	bf00      	nop
 800c380:	bd80      	pop	{r7, pc}

0800c382 <CallForUSBConnection>:

void CallForUSBConnection()
{
 800c382:	b580      	push	{r7, lr}
 800c384:	af00      	add	r7, sp, #0
	EventSystem_Signalize(Event_USBConnected);
 800c386:	2002      	movs	r0, #2
 800c388:	f7ff ffd0 	bl	800c32c <EventSystem_Signalize>
}
 800c38c:	bf00      	nop
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <CallForUSBDisonnection>:
void CallForUSBDisonnection()
{
 800c390:	b580      	push	{r7, lr}
 800c392:	af00      	add	r7, sp, #0
	EventSystem_Signalize(Event_USBDisconnected);
 800c394:	2004      	movs	r0, #4
 800c396:	f7ff ffc9 	bl	800c32c <EventSystem_Signalize>
}
 800c39a:	bf00      	nop
 800c39c:	bd80      	pop	{r7, pc}
	...

0800c3a0 <TempCollect_Operate>:
	.bEnabledFlag = false,
	.eState = TempCollect_EntryState,
};

void TempCollect_Operate()
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	af00      	add	r7, sp, #0
	switch(kTemperatureData.eState)
 800c3a4:	4b97      	ldr	r3, [pc, #604]	; (800c604 <TempCollect_Operate+0x264>)
 800c3a6:	79db      	ldrb	r3, [r3, #7]
 800c3a8:	2b05      	cmp	r3, #5
 800c3aa:	f200 8120 	bhi.w	800c5ee <TempCollect_Operate+0x24e>
 800c3ae:	a201      	add	r2, pc, #4	; (adr r2, 800c3b4 <TempCollect_Operate+0x14>)
 800c3b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3b4:	0800c3cd 	.word	0x0800c3cd
 800c3b8:	0800c3d7 	.word	0x0800c3d7
 800c3bc:	0800c407 	.word	0x0800c407
 800c3c0:	0800c4db 	.word	0x0800c4db
 800c3c4:	0800c58b 	.word	0x0800c58b
 800c3c8:	0800c461 	.word	0x0800c461
	{
	case(TempCollect_EntryState):
		AssertError(AppError_TempCollectUninitialized); // Incorrect entry - before initialization
 800c3cc:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c3d0:	f7ff fd5c 	bl	800be8c <AssertError>
		break;
 800c3d4:	e113      	b.n	800c5fe <TempCollect_Operate+0x25e>
	case(TempCollect_Initialized):
		if(kTemperatureData.bScheduleMeasurement)
 800c3d6:	4b8b      	ldr	r3, [pc, #556]	; (800c604 <TempCollect_Operate+0x264>)
 800c3d8:	799b      	ldrb	r3, [r3, #6]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	f000 810c 	beq.w	800c5f8 <TempCollect_Operate+0x258>
		{
			kTemperatureData.eState = TempCollect_TemperatureReadRequest;
 800c3e0:	4b88      	ldr	r3, [pc, #544]	; (800c604 <TempCollect_Operate+0x264>)
 800c3e2:	2202      	movs	r2, #2
 800c3e4:	71da      	strb	r2, [r3, #7]
			kTemperatureData.u16ArrayASensorIndex = 0;
 800c3e6:	4b87      	ldr	r3, [pc, #540]	; (800c604 <TempCollect_Operate+0x264>)
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	829a      	strh	r2, [r3, #20]
			kTemperatureData.u16ArrayBSensorIndex = 0;
 800c3ec:	4b85      	ldr	r3, [pc, #532]	; (800c604 <TempCollect_Operate+0x264>)
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	82da      	strh	r2, [r3, #22]
			kTemperatureData.bReadFinished[0] = false;
 800c3f2:	4b84      	ldr	r3, [pc, #528]	; (800c604 <TempCollect_Operate+0x264>)
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	721a      	strb	r2, [r3, #8]
			kTemperatureData.bReadFinished[1] = false;
 800c3f8:	4b82      	ldr	r3, [pc, #520]	; (800c604 <TempCollect_Operate+0x264>)
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	725a      	strb	r2, [r3, #9]
			kTemperatureData.u8TimeoutCounter = 0;
 800c3fe:	4b81      	ldr	r3, [pc, #516]	; (800c604 <TempCollect_Operate+0x264>)
 800c400:	2200      	movs	r2, #0
 800c402:	771a      	strb	r2, [r3, #28]
		}
		break;
 800c404:	e0f8      	b.n	800c5f8 <TempCollect_Operate+0x258>
	case(TempCollect_TemperatureReadRequest):
		kTemperatureData.bScheduleMeasurement = false;
 800c406:	4b7f      	ldr	r3, [pc, #508]	; (800c604 <TempCollect_Operate+0x264>)
 800c408:	2200      	movs	r2, #0
 800c40a:	719a      	strb	r2, [r3, #6]
		if(kTemperatureData.u16ArrayASensorIndex < MCP9808_I2CA_DeviceCount)
 800c40c:	4b7d      	ldr	r3, [pc, #500]	; (800c604 <TempCollect_Operate+0x264>)
 800c40e:	8a9b      	ldrh	r3, [r3, #20]
 800c410:	2b04      	cmp	r3, #4
 800c412:	d80e      	bhi.n	800c432 <TempCollect_Operate+0x92>
		{
			/*
			 * By placing "ready" flag clearing here this app will not get stuck
			 * if the sensor number on each array branch would be not equal
			 */
			kTemperatureData.bStateReady[0] = false;
 800c414:	4b7b      	ldr	r3, [pc, #492]	; (800c604 <TempCollect_Operate+0x264>)
 800c416:	2200      	movs	r2, #0
 800c418:	729a      	strb	r2, [r3, #10]
			MCP9808_Read(&kaSensorArrayDataA[kTemperatureData.u16ArrayASensorIndex]);
 800c41a:	4b7a      	ldr	r3, [pc, #488]	; (800c604 <TempCollect_Operate+0x264>)
 800c41c:	8a9b      	ldrh	r3, [r3, #20]
 800c41e:	461a      	mov	r2, r3
 800c420:	4613      	mov	r3, r2
 800c422:	005b      	lsls	r3, r3, #1
 800c424:	4413      	add	r3, r2
 800c426:	009b      	lsls	r3, r3, #2
 800c428:	4a77      	ldr	r2, [pc, #476]	; (800c608 <TempCollect_Operate+0x268>)
 800c42a:	4413      	add	r3, r2
 800c42c:	4618      	mov	r0, r3
 800c42e:	f7f4 fe3b 	bl	80010a8 <MCP9808_Read>
		}
		if(kTemperatureData.u16ArrayBSensorIndex < MCP9808_I2CB_DeviceCount)
 800c432:	4b74      	ldr	r3, [pc, #464]	; (800c604 <TempCollect_Operate+0x264>)
 800c434:	8adb      	ldrh	r3, [r3, #22]
 800c436:	2b04      	cmp	r3, #4
 800c438:	d80e      	bhi.n	800c458 <TempCollect_Operate+0xb8>
		{
			kTemperatureData.bStateReady[1] = false;
 800c43a:	4b72      	ldr	r3, [pc, #456]	; (800c604 <TempCollect_Operate+0x264>)
 800c43c:	2200      	movs	r2, #0
 800c43e:	72da      	strb	r2, [r3, #11]
			MCP9808_Read(&kaSensorArrayDataB[kTemperatureData.u16ArrayBSensorIndex]);
 800c440:	4b70      	ldr	r3, [pc, #448]	; (800c604 <TempCollect_Operate+0x264>)
 800c442:	8adb      	ldrh	r3, [r3, #22]
 800c444:	461a      	mov	r2, r3
 800c446:	4613      	mov	r3, r2
 800c448:	005b      	lsls	r3, r3, #1
 800c44a:	4413      	add	r3, r2
 800c44c:	009b      	lsls	r3, r3, #2
 800c44e:	4a6f      	ldr	r2, [pc, #444]	; (800c60c <TempCollect_Operate+0x26c>)
 800c450:	4413      	add	r3, r2
 800c452:	4618      	mov	r0, r3
 800c454:	f7f4 fe28 	bl	80010a8 <MCP9808_Read>
		}
		kTemperatureData.eState = TempCollect_Waiting;
 800c458:	4b6a      	ldr	r3, [pc, #424]	; (800c604 <TempCollect_Operate+0x264>)
 800c45a:	2205      	movs	r2, #5
 800c45c:	71da      	strb	r2, [r3, #7]
		break;
 800c45e:	e0ce      	b.n	800c5fe <TempCollect_Operate+0x25e>
	case(TempCollect_Waiting):
		if(kTemperatureData.bStateReady[0] && kTemperatureData.bStateReady[1])
 800c460:	4b68      	ldr	r3, [pc, #416]	; (800c604 <TempCollect_Operate+0x264>)
 800c462:	7a9b      	ldrb	r3, [r3, #10]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d00a      	beq.n	800c47e <TempCollect_Operate+0xde>
 800c468:	4b66      	ldr	r3, [pc, #408]	; (800c604 <TempCollect_Operate+0x264>)
 800c46a:	7adb      	ldrb	r3, [r3, #11]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d006      	beq.n	800c47e <TempCollect_Operate+0xde>
		{
			kTemperatureData.eState = TempCollect_ProcessData;
 800c470:	4b64      	ldr	r3, [pc, #400]	; (800c604 <TempCollect_Operate+0x264>)
 800c472:	2203      	movs	r2, #3
 800c474:	71da      	strb	r2, [r3, #7]
			kTemperatureData.u8TimeoutCounter = 0;
 800c476:	4b63      	ldr	r3, [pc, #396]	; (800c604 <TempCollect_Operate+0x264>)
 800c478:	2200      	movs	r2, #0
 800c47a:	771a      	strb	r2, [r3, #28]
					AssertError(AppError_ArrayBError);
				}
				kTemperatureData.eState = TempCollect_ProcessData;
			}
		}
		break;
 800c47c:	e0be      	b.n	800c5fc <TempCollect_Operate+0x25c>
			kTemperatureData.u8TimeoutCounter++;
 800c47e:	4b61      	ldr	r3, [pc, #388]	; (800c604 <TempCollect_Operate+0x264>)
 800c480:	7f1b      	ldrb	r3, [r3, #28]
 800c482:	3301      	adds	r3, #1
 800c484:	b2da      	uxtb	r2, r3
 800c486:	4b5f      	ldr	r3, [pc, #380]	; (800c604 <TempCollect_Operate+0x264>)
 800c488:	771a      	strb	r2, [r3, #28]
			if(kTemperatureData.u8TimeoutCounter > dTimeoutMaxWait)
 800c48a:	4b5e      	ldr	r3, [pc, #376]	; (800c604 <TempCollect_Operate+0x264>)
 800c48c:	7f1b      	ldrb	r3, [r3, #28]
 800c48e:	2b0a      	cmp	r3, #10
 800c490:	f240 80b4 	bls.w	800c5fc <TempCollect_Operate+0x25c>
				kTemperatureData.u8TimeoutCounter = 0;
 800c494:	4b5b      	ldr	r3, [pc, #364]	; (800c604 <TempCollect_Operate+0x264>)
 800c496:	2200      	movs	r2, #0
 800c498:	771a      	strb	r2, [r3, #28]
				if(!kTemperatureData.bStateReady[0])
 800c49a:	4b5a      	ldr	r3, [pc, #360]	; (800c604 <TempCollect_Operate+0x264>)
 800c49c:	7a9b      	ldrb	r3, [r3, #10]
 800c49e:	f083 0301 	eor.w	r3, r3, #1
 800c4a2:	b2db      	uxtb	r3, r3
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d006      	beq.n	800c4b6 <TempCollect_Operate+0x116>
					kTemperatureData.bErrorOnArray[0] = true;
 800c4a8:	4b56      	ldr	r3, [pc, #344]	; (800c604 <TempCollect_Operate+0x264>)
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	775a      	strb	r2, [r3, #29]
					AssertError(AppError_ArrayAError);
 800c4ae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c4b2:	f7ff fceb 	bl	800be8c <AssertError>
				if(!kTemperatureData.bStateReady[1])
 800c4b6:	4b53      	ldr	r3, [pc, #332]	; (800c604 <TempCollect_Operate+0x264>)
 800c4b8:	7adb      	ldrb	r3, [r3, #11]
 800c4ba:	f083 0301 	eor.w	r3, r3, #1
 800c4be:	b2db      	uxtb	r3, r3
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d006      	beq.n	800c4d2 <TempCollect_Operate+0x132>
					kTemperatureData.bErrorOnArray[1] = true;
 800c4c4:	4b4f      	ldr	r3, [pc, #316]	; (800c604 <TempCollect_Operate+0x264>)
 800c4c6:	2201      	movs	r2, #1
 800c4c8:	779a      	strb	r2, [r3, #30]
					AssertError(AppError_ArrayBError);
 800c4ca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c4ce:	f7ff fcdd 	bl	800be8c <AssertError>
				kTemperatureData.eState = TempCollect_ProcessData;
 800c4d2:	4b4c      	ldr	r3, [pc, #304]	; (800c604 <TempCollect_Operate+0x264>)
 800c4d4:	2203      	movs	r2, #3
 800c4d6:	71da      	strb	r2, [r3, #7]
		break;
 800c4d8:	e090      	b.n	800c5fc <TempCollect_Operate+0x25c>
	case(TempCollect_ProcessData):
		if( !kTemperatureData.bReadFinished[0] )
 800c4da:	4b4a      	ldr	r3, [pc, #296]	; (800c604 <TempCollect_Operate+0x264>)
 800c4dc:	7a1b      	ldrb	r3, [r3, #8]
 800c4de:	f083 0301 	eor.w	r3, r3, #1
 800c4e2:	b2db      	uxtb	r3, r3
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d022      	beq.n	800c52e <TempCollect_Operate+0x18e>
		{
			if(kTemperatureData.bErrorOnArray[0])
 800c4e8:	4b46      	ldr	r3, [pc, #280]	; (800c604 <TempCollect_Operate+0x264>)
 800c4ea:	7f5b      	ldrb	r3, [r3, #29]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d006      	beq.n	800c4fe <TempCollect_Operate+0x15e>
			{
				kTemperatureData.fConvertedTemperature[0] = dErrorIndication;
 800c4f0:	4b44      	ldr	r3, [pc, #272]	; (800c604 <TempCollect_Operate+0x264>)
 800c4f2:	4a47      	ldr	r2, [pc, #284]	; (800c610 <TempCollect_Operate+0x270>)
 800c4f4:	60da      	str	r2, [r3, #12]
				kTemperatureData.bErrorOnArray[0] = false;
 800c4f6:	4b43      	ldr	r3, [pc, #268]	; (800c604 <TempCollect_Operate+0x264>)
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	775a      	strb	r2, [r3, #29]
 800c4fc:	e010      	b.n	800c520 <TempCollect_Operate+0x180>
			}
			else
			{
				kTemperatureData.fConvertedTemperature[0] = MCP9808_DecodeTemperature(&kaSensorArrayDataA[kTemperatureData.u16ArrayASensorIndex]);
 800c4fe:	4b41      	ldr	r3, [pc, #260]	; (800c604 <TempCollect_Operate+0x264>)
 800c500:	8a9b      	ldrh	r3, [r3, #20]
 800c502:	461a      	mov	r2, r3
 800c504:	4613      	mov	r3, r2
 800c506:	005b      	lsls	r3, r3, #1
 800c508:	4413      	add	r3, r2
 800c50a:	009b      	lsls	r3, r3, #2
 800c50c:	4a3e      	ldr	r2, [pc, #248]	; (800c608 <TempCollect_Operate+0x268>)
 800c50e:	4413      	add	r3, r2
 800c510:	4618      	mov	r0, r3
 800c512:	f7f4 fddf 	bl	80010d4 <MCP9808_DecodeTemperature>
 800c516:	eef0 7a40 	vmov.f32	s15, s0
 800c51a:	4b3a      	ldr	r3, [pc, #232]	; (800c604 <TempCollect_Operate+0x264>)
 800c51c:	edc3 7a03 	vstr	s15, [r3, #12]
			}
		DataHandler_StoreMeasurement(kTemperatureData.fConvertedTemperature[0]);
 800c520:	4b38      	ldr	r3, [pc, #224]	; (800c604 <TempCollect_Operate+0x264>)
 800c522:	edd3 7a03 	vldr	s15, [r3, #12]
 800c526:	eeb0 0a67 	vmov.f32	s0, s15
 800c52a:	f7ff fddb 	bl	800c0e4 <DataHandler_StoreMeasurement>
		}
		if( !kTemperatureData.bReadFinished[1] )
 800c52e:	4b35      	ldr	r3, [pc, #212]	; (800c604 <TempCollect_Operate+0x264>)
 800c530:	7a5b      	ldrb	r3, [r3, #9]
 800c532:	f083 0301 	eor.w	r3, r3, #1
 800c536:	b2db      	uxtb	r3, r3
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d022      	beq.n	800c582 <TempCollect_Operate+0x1e2>
		{
			if(kTemperatureData.bErrorOnArray[1])
 800c53c:	4b31      	ldr	r3, [pc, #196]	; (800c604 <TempCollect_Operate+0x264>)
 800c53e:	7f9b      	ldrb	r3, [r3, #30]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d006      	beq.n	800c552 <TempCollect_Operate+0x1b2>
			{
				kTemperatureData.fConvertedTemperature[1] = dErrorIndication;
 800c544:	4b2f      	ldr	r3, [pc, #188]	; (800c604 <TempCollect_Operate+0x264>)
 800c546:	4a32      	ldr	r2, [pc, #200]	; (800c610 <TempCollect_Operate+0x270>)
 800c548:	611a      	str	r2, [r3, #16]
				kTemperatureData.bErrorOnArray[1] = false;
 800c54a:	4b2e      	ldr	r3, [pc, #184]	; (800c604 <TempCollect_Operate+0x264>)
 800c54c:	2200      	movs	r2, #0
 800c54e:	779a      	strb	r2, [r3, #30]
 800c550:	e010      	b.n	800c574 <TempCollect_Operate+0x1d4>
			}
			else
			{
				kTemperatureData.fConvertedTemperature[1] = MCP9808_DecodeTemperature(&kaSensorArrayDataB[kTemperatureData.u16ArrayBSensorIndex]);
 800c552:	4b2c      	ldr	r3, [pc, #176]	; (800c604 <TempCollect_Operate+0x264>)
 800c554:	8adb      	ldrh	r3, [r3, #22]
 800c556:	461a      	mov	r2, r3
 800c558:	4613      	mov	r3, r2
 800c55a:	005b      	lsls	r3, r3, #1
 800c55c:	4413      	add	r3, r2
 800c55e:	009b      	lsls	r3, r3, #2
 800c560:	4a2a      	ldr	r2, [pc, #168]	; (800c60c <TempCollect_Operate+0x26c>)
 800c562:	4413      	add	r3, r2
 800c564:	4618      	mov	r0, r3
 800c566:	f7f4 fdb5 	bl	80010d4 <MCP9808_DecodeTemperature>
 800c56a:	eef0 7a40 	vmov.f32	s15, s0
 800c56e:	4b25      	ldr	r3, [pc, #148]	; (800c604 <TempCollect_Operate+0x264>)
 800c570:	edc3 7a04 	vstr	s15, [r3, #16]
			}
			DataHandler_StoreMeasurement(kTemperatureData.fConvertedTemperature[1]);
 800c574:	4b23      	ldr	r3, [pc, #140]	; (800c604 <TempCollect_Operate+0x264>)
 800c576:	edd3 7a04 	vldr	s15, [r3, #16]
 800c57a:	eeb0 0a67 	vmov.f32	s0, s15
 800c57e:	f7ff fdb1 	bl	800c0e4 <DataHandler_StoreMeasurement>
		}

		kTemperatureData.eState = TempCollect_ArmNewReading;
 800c582:	4b20      	ldr	r3, [pc, #128]	; (800c604 <TempCollect_Operate+0x264>)
 800c584:	2204      	movs	r2, #4
 800c586:	71da      	strb	r2, [r3, #7]
		break;
 800c588:	e039      	b.n	800c5fe <TempCollect_Operate+0x25e>

	case(TempCollect_ArmNewReading):
		kTemperatureData.u16ArrayASensorIndex++;
 800c58a:	4b1e      	ldr	r3, [pc, #120]	; (800c604 <TempCollect_Operate+0x264>)
 800c58c:	8a9b      	ldrh	r3, [r3, #20]
 800c58e:	3301      	adds	r3, #1
 800c590:	b29a      	uxth	r2, r3
 800c592:	4b1c      	ldr	r3, [pc, #112]	; (800c604 <TempCollect_Operate+0x264>)
 800c594:	829a      	strh	r2, [r3, #20]

		if( kTemperatureData.u16ArrayASensorIndex >= MCP9808_I2CA_DeviceCount)
 800c596:	4b1b      	ldr	r3, [pc, #108]	; (800c604 <TempCollect_Operate+0x264>)
 800c598:	8a9b      	ldrh	r3, [r3, #20]
 800c59a:	2b04      	cmp	r3, #4
 800c59c:	d902      	bls.n	800c5a4 <TempCollect_Operate+0x204>
		{
			kTemperatureData.bReadFinished[0] = true;
 800c59e:	4b19      	ldr	r3, [pc, #100]	; (800c604 <TempCollect_Operate+0x264>)
 800c5a0:	2201      	movs	r2, #1
 800c5a2:	721a      	strb	r2, [r3, #8]
		}

		kTemperatureData.u16ArrayBSensorIndex++;
 800c5a4:	4b17      	ldr	r3, [pc, #92]	; (800c604 <TempCollect_Operate+0x264>)
 800c5a6:	8adb      	ldrh	r3, [r3, #22]
 800c5a8:	3301      	adds	r3, #1
 800c5aa:	b29a      	uxth	r2, r3
 800c5ac:	4b15      	ldr	r3, [pc, #84]	; (800c604 <TempCollect_Operate+0x264>)
 800c5ae:	82da      	strh	r2, [r3, #22]

		if( kTemperatureData.u16ArrayBSensorIndex >= MCP9808_I2CB_DeviceCount)
 800c5b0:	4b14      	ldr	r3, [pc, #80]	; (800c604 <TempCollect_Operate+0x264>)
 800c5b2:	8adb      	ldrh	r3, [r3, #22]
 800c5b4:	2b04      	cmp	r3, #4
 800c5b6:	d902      	bls.n	800c5be <TempCollect_Operate+0x21e>
		{
			kTemperatureData.bReadFinished[1] = true;
 800c5b8:	4b12      	ldr	r3, [pc, #72]	; (800c604 <TempCollect_Operate+0x264>)
 800c5ba:	2201      	movs	r2, #1
 800c5bc:	725a      	strb	r2, [r3, #9]
		}

		if ( kTemperatureData.bReadFinished[0] && kTemperatureData.bReadFinished[1] )
 800c5be:	4b11      	ldr	r3, [pc, #68]	; (800c604 <TempCollect_Operate+0x264>)
 800c5c0:	7a1b      	ldrb	r3, [r3, #8]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d00f      	beq.n	800c5e6 <TempCollect_Operate+0x246>
 800c5c6:	4b0f      	ldr	r3, [pc, #60]	; (800c604 <TempCollect_Operate+0x264>)
 800c5c8:	7a5b      	ldrb	r3, [r3, #9]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d00b      	beq.n	800c5e6 <TempCollect_Operate+0x246>
		{
			kTemperatureData.eState = TempCollect_Initialized;
 800c5ce:	4b0d      	ldr	r3, [pc, #52]	; (800c604 <TempCollect_Operate+0x264>)
 800c5d0:	2201      	movs	r2, #1
 800c5d2:	71da      	strb	r2, [r3, #7]

			/*
			 * Open new measurement at the end of current session
			 */
			DataHandler_OpenNewMeasurement(kTemperatureData.u32MeasurementCounter++);
 800c5d4:	4b0b      	ldr	r3, [pc, #44]	; (800c604 <TempCollect_Operate+0x264>)
 800c5d6:	699b      	ldr	r3, [r3, #24]
 800c5d8:	1c5a      	adds	r2, r3, #1
 800c5da:	490a      	ldr	r1, [pc, #40]	; (800c604 <TempCollect_Operate+0x264>)
 800c5dc:	618a      	str	r2, [r1, #24]
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f7ff fcec 	bl	800bfbc <DataHandler_OpenNewMeasurement>
		}
		else
		{
			kTemperatureData.eState = TempCollect_TemperatureReadRequest;
		}
		break;
 800c5e4:	e00b      	b.n	800c5fe <TempCollect_Operate+0x25e>
			kTemperatureData.eState = TempCollect_TemperatureReadRequest;
 800c5e6:	4b07      	ldr	r3, [pc, #28]	; (800c604 <TempCollect_Operate+0x264>)
 800c5e8:	2202      	movs	r2, #2
 800c5ea:	71da      	strb	r2, [r3, #7]
		break;
 800c5ec:	e007      	b.n	800c5fe <TempCollect_Operate+0x25e>
	default:
		AssertError(AppError_TempCollectDefaultState); // Incorrect entry
 800c5ee:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c5f2:	f7ff fc4b 	bl	800be8c <AssertError>
	break;
 800c5f6:	e002      	b.n	800c5fe <TempCollect_Operate+0x25e>
		break;
 800c5f8:	bf00      	nop
 800c5fa:	e000      	b.n	800c5fe <TempCollect_Operate+0x25e>
		break;
 800c5fc:	bf00      	nop
	}
}
 800c5fe:	bf00      	nop
 800c600:	bd80      	pop	{r7, pc}
 800c602:	bf00      	nop
 800c604:	200007b8 	.word	0x200007b8
 800c608:	20000a2c 	.word	0x20000a2c
 800c60c:	20000a68 	.word	0x20000a68
 800c610:	43480000 	.word	0x43480000

0800c614 <TempCollect_Initialize>:

void TempCollect_Initialize()
{
 800c614:	b480      	push	{r7}
 800c616:	af00      	add	r7, sp, #0
	kTemperatureData.eState = TempCollect_Initialized;
 800c618:	4b05      	ldr	r3, [pc, #20]	; (800c630 <TempCollect_Initialize+0x1c>)
 800c61a:	2201      	movs	r2, #1
 800c61c:	71da      	strb	r2, [r3, #7]
	kTemperatureData.bEnabledFlag = true;
 800c61e:	4b04      	ldr	r3, [pc, #16]	; (800c630 <TempCollect_Initialize+0x1c>)
 800c620:	2201      	movs	r2, #1
 800c622:	715a      	strb	r2, [r3, #5]
	}
	if(MCP9808_I2CB_DeviceCount == 0)
	{
		kTemperatureData.bStateReady[1] = true;
	}
}
 800c624:	bf00      	nop
 800c626:	46bd      	mov	sp, r7
 800c628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62c:	4770      	bx	lr
 800c62e:	bf00      	nop
 800c630:	200007b8 	.word	0x200007b8

0800c634 <TempCollect_ScheduleMeasurement>:
void TempCollect_RetrieveResult(TemperatureData_t *sTemperatureData);

/* Interrupt callback functions */

void TempCollect_ScheduleMeasurement()
{
 800c634:	b580      	push	{r7, lr}
 800c636:	af00      	add	r7, sp, #0
	ToggleLED_D();
 800c638:	f7f4 fc7c 	bl	8000f34 <ToggleLED_D>
	if(kTemperatureData.bScheduleMeasurement)
 800c63c:	4b06      	ldr	r3, [pc, #24]	; (800c658 <TempCollect_ScheduleMeasurement+0x24>)
 800c63e:	799b      	ldrb	r3, [r3, #6]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d004      	beq.n	800c64e <TempCollect_ScheduleMeasurement+0x1a>
	{
		AssertError(AppError_TempCollectRequestOverlap); // Overlap of requests;
 800c644:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c648:	f7ff fc20 	bl	800be8c <AssertError>
	}
	else
	{
		kTemperatureData.bScheduleMeasurement = true;
	}
}
 800c64c:	e002      	b.n	800c654 <TempCollect_ScheduleMeasurement+0x20>
		kTemperatureData.bScheduleMeasurement = true;
 800c64e:	4b02      	ldr	r3, [pc, #8]	; (800c658 <TempCollect_ScheduleMeasurement+0x24>)
 800c650:	2201      	movs	r2, #1
 800c652:	719a      	strb	r2, [r3, #6]
}
 800c654:	bf00      	nop
 800c656:	bd80      	pop	{r7, pc}
 800c658:	200007b8 	.word	0x200007b8

0800c65c <TempCollect_I2CA_Done>:

void TempCollect_I2CA_Done()
{
 800c65c:	b480      	push	{r7}
 800c65e:	af00      	add	r7, sp, #0
	kTemperatureData.bStateReady[0] = true;
 800c660:	4b03      	ldr	r3, [pc, #12]	; (800c670 <TempCollect_I2CA_Done+0x14>)
 800c662:	2201      	movs	r2, #1
 800c664:	729a      	strb	r2, [r3, #10]
}
 800c666:	bf00      	nop
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr
 800c670:	200007b8 	.word	0x200007b8

0800c674 <TempCollect_I2CB_Done>:
void TempCollect_I2CB_Done()
{
 800c674:	b480      	push	{r7}
 800c676:	af00      	add	r7, sp, #0
	kTemperatureData.bStateReady[1] = true;
 800c678:	4b03      	ldr	r3, [pc, #12]	; (800c688 <TempCollect_I2CB_Done+0x14>)
 800c67a:	2201      	movs	r2, #1
 800c67c:	72da      	strb	r2, [r3, #11]
}
 800c67e:	bf00      	nop
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr
 800c688:	200007b8 	.word	0x200007b8

0800c68c <CommManager_Initialize>:
}CommunicationData_t;

static CommunicationData_t kCommData;

void CommManager_Initialize()
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	af00      	add	r7, sp, #0
	kCommData.bInitialized = true;
 800c690:	4b03      	ldr	r3, [pc, #12]	; (800c6a0 <CommManager_Initialize+0x14>)
 800c692:	2201      	movs	r2, #1
 800c694:	701a      	strb	r2, [r3, #0]
	CommManager_FlushFrame();
 800c696:	f000 f917 	bl	800c8c8 <CommManager_FlushFrame>
}
 800c69a:	bf00      	nop
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	200007d8 	.word	0x200007d8

0800c6a4 <CommManager_Operate>:
void CommManager_Operate()
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b084      	sub	sp, #16
 800c6a8:	af00      	add	r7, sp, #0
	bool bResult;
	float * pfPointer;
	float fValue;

	if(kCommData.bInitialized)
 800c6aa:	4b64      	ldr	r3, [pc, #400]	; (800c83c <CommManager_Operate+0x198>)
 800c6ac:	781b      	ldrb	r3, [r3, #0]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	f000 80ba 	beq.w	800c828 <CommManager_Operate+0x184>
	{

		switch (kCommData.eState)
 800c6b4:	4b61      	ldr	r3, [pc, #388]	; (800c83c <CommManager_Operate+0x198>)
 800c6b6:	7a1b      	ldrb	r3, [r3, #8]
 800c6b8:	2b07      	cmp	r3, #7
 800c6ba:	f200 80b7 	bhi.w	800c82c <CommManager_Operate+0x188>
 800c6be:	a201      	add	r2, pc, #4	; (adr r2, 800c6c4 <CommManager_Operate+0x20>)
 800c6c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6c4:	0800c6e5 	.word	0x0800c6e5
 800c6c8:	0800c82d 	.word	0x0800c82d
 800c6cc:	0800c6ed 	.word	0x0800c6ed
 800c6d0:	0800c709 	.word	0x0800c709
 800c6d4:	0800c73f 	.word	0x0800c73f
 800c6d8:	0800c75b 	.word	0x0800c75b
 800c6dc:	0800c82d 	.word	0x0800c82d
 800c6e0:	0800c80f 	.word	0x0800c80f
		{
		case Comm_Initialized:

			kCommData.eState = Comm_Idle;
 800c6e4:	4b55      	ldr	r3, [pc, #340]	; (800c83c <CommManager_Operate+0x198>)
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	721a      	strb	r2, [r3, #8]
			break;
 800c6ea:	e0a2      	b.n	800c832 <CommManager_Operate+0x18e>

			//Wait for new Arm_Transmission call
			break;
		case Comm_OpenTransmission:

			kCommData.u8Frame[0] = dOpeningByte;
 800c6ec:	4b53      	ldr	r3, [pc, #332]	; (800c83c <CommManager_Operate+0x198>)
 800c6ee:	220a      	movs	r2, #10
 800c6f0:	731a      	strb	r2, [r3, #12]
			kCommData.u8CurrentFrameLength = 1;
 800c6f2:	4b52      	ldr	r3, [pc, #328]	; (800c83c <CommManager_Operate+0x198>)
 800c6f4:	2201      	movs	r2, #1
 800c6f6:	759a      	strb	r2, [r3, #22]
			kCommData.ePreviousState = kCommData.eState;
 800c6f8:	4b50      	ldr	r3, [pc, #320]	; (800c83c <CommManager_Operate+0x198>)
 800c6fa:	7a1a      	ldrb	r2, [r3, #8]
 800c6fc:	4b4f      	ldr	r3, [pc, #316]	; (800c83c <CommManager_Operate+0x198>)
 800c6fe:	725a      	strb	r2, [r3, #9]
			kCommData.eState = Comm_Transmit;
 800c700:	4b4e      	ldr	r3, [pc, #312]	; (800c83c <CommManager_Operate+0x198>)
 800c702:	2205      	movs	r2, #5
 800c704:	721a      	strb	r2, [r3, #8]
			break;
 800c706:	e094      	b.n	800c832 <CommManager_Operate+0x18e>
		case Comm_AssembleFrame:

			pfPointer = kCommData.pkMemoryPointer->fDataPointer;
 800c708:	4b4c      	ldr	r3, [pc, #304]	; (800c83c <CommManager_Operate+0x198>)
 800c70a:	685b      	ldr	r3, [r3, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	60bb      	str	r3, [r7, #8]
			fValue = pfPointer[kCommData.u16ReadoutPointer];
 800c710:	4b4a      	ldr	r3, [pc, #296]	; (800c83c <CommManager_Operate+0x198>)
 800c712:	895b      	ldrh	r3, [r3, #10]
 800c714:	009b      	lsls	r3, r3, #2
 800c716:	68ba      	ldr	r2, [r7, #8]
 800c718:	4413      	add	r3, r2
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	607b      	str	r3, [r7, #4]
			FrameAssembler_ConvertFloatToCharArray(kCommData.u8Frame, fValue);
 800c71e:	ed97 0a01 	vldr	s0, [r7, #4]
 800c722:	4847      	ldr	r0, [pc, #284]	; (800c840 <CommManager_Operate+0x19c>)
 800c724:	f000 f8ea 	bl	800c8fc <FrameAssembler_ConvertFloatToCharArray>
			kCommData.u8CurrentFrameLength = 10;
 800c728:	4b44      	ldr	r3, [pc, #272]	; (800c83c <CommManager_Operate+0x198>)
 800c72a:	220a      	movs	r2, #10
 800c72c:	759a      	strb	r2, [r3, #22]
			kCommData.ePreviousState = kCommData.eState;
 800c72e:	4b43      	ldr	r3, [pc, #268]	; (800c83c <CommManager_Operate+0x198>)
 800c730:	7a1a      	ldrb	r2, [r3, #8]
 800c732:	4b42      	ldr	r3, [pc, #264]	; (800c83c <CommManager_Operate+0x198>)
 800c734:	725a      	strb	r2, [r3, #9]
			kCommData.eState = Comm_Transmit;
 800c736:	4b41      	ldr	r3, [pc, #260]	; (800c83c <CommManager_Operate+0x198>)
 800c738:	2205      	movs	r2, #5
 800c73a:	721a      	strb	r2, [r3, #8]
			break;
 800c73c:	e079      	b.n	800c832 <CommManager_Operate+0x18e>
		case Comm_CloseTransmission:

			kCommData.u8Frame[0] = dClosingByte;
 800c73e:	4b3f      	ldr	r3, [pc, #252]	; (800c83c <CommManager_Operate+0x198>)
 800c740:	220d      	movs	r2, #13
 800c742:	731a      	strb	r2, [r3, #12]
			kCommData.u8CurrentFrameLength = 1;
 800c744:	4b3d      	ldr	r3, [pc, #244]	; (800c83c <CommManager_Operate+0x198>)
 800c746:	2201      	movs	r2, #1
 800c748:	759a      	strb	r2, [r3, #22]
			kCommData.ePreviousState = kCommData.eState;
 800c74a:	4b3c      	ldr	r3, [pc, #240]	; (800c83c <CommManager_Operate+0x198>)
 800c74c:	7a1a      	ldrb	r2, [r3, #8]
 800c74e:	4b3b      	ldr	r3, [pc, #236]	; (800c83c <CommManager_Operate+0x198>)
 800c750:	725a      	strb	r2, [r3, #9]
			kCommData.eState = Comm_Transmit;
 800c752:	4b3a      	ldr	r3, [pc, #232]	; (800c83c <CommManager_Operate+0x198>)
 800c754:	2205      	movs	r2, #5
 800c756:	721a      	strb	r2, [r3, #8]
			break;
 800c758:	e06b      	b.n	800c832 <CommManager_Operate+0x18e>
		case Comm_Transmit:

			bResult = USB_TransmitData(kCommData.u8Frame, kCommData.u8CurrentFrameLength);
 800c75a:	4b38      	ldr	r3, [pc, #224]	; (800c83c <CommManager_Operate+0x198>)
 800c75c:	7d9b      	ldrb	r3, [r3, #22]
 800c75e:	4619      	mov	r1, r3
 800c760:	4837      	ldr	r0, [pc, #220]	; (800c840 <CommManager_Operate+0x19c>)
 800c762:	f000 f8f3 	bl	800c94c <USB_TransmitData>
 800c766:	4603      	mov	r3, r0
 800c768:	73fb      	strb	r3, [r7, #15]
			if( !bResult )
 800c76a:	7bfb      	ldrb	r3, [r7, #15]
 800c76c:	f083 0301 	eor.w	r3, r3, #1
 800c770:	b2db      	uxtb	r3, r3
 800c772:	2b00      	cmp	r3, #0
 800c774:	d039      	beq.n	800c7ea <CommManager_Operate+0x146>
			{
				kCommData.u8TrialsCounter = 0;
 800c776:	4b31      	ldr	r3, [pc, #196]	; (800c83c <CommManager_Operate+0x198>)
 800c778:	2200      	movs	r2, #0
 800c77a:	75da      	strb	r2, [r3, #23]
				if ( kCommData.ePreviousState == Comm_AssembleFrame )
 800c77c:	4b2f      	ldr	r3, [pc, #188]	; (800c83c <CommManager_Operate+0x198>)
 800c77e:	7a5b      	ldrb	r3, [r3, #9]
 800c780:	2b03      	cmp	r3, #3
 800c782:	d113      	bne.n	800c7ac <CommManager_Operate+0x108>
				{
					kCommData.u16ReadoutPointer++;
 800c784:	4b2d      	ldr	r3, [pc, #180]	; (800c83c <CommManager_Operate+0x198>)
 800c786:	895b      	ldrh	r3, [r3, #10]
 800c788:	3301      	adds	r3, #1
 800c78a:	b29a      	uxth	r2, r3
 800c78c:	4b2b      	ldr	r3, [pc, #172]	; (800c83c <CommManager_Operate+0x198>)
 800c78e:	815a      	strh	r2, [r3, #10]
					kCommData.eState = Comm_AssembleFrame;
 800c790:	4b2a      	ldr	r3, [pc, #168]	; (800c83c <CommManager_Operate+0x198>)
 800c792:	2203      	movs	r2, #3
 800c794:	721a      	strb	r2, [r3, #8]
					if( kCommData.u16ReadoutPointer >= dMemoryWidth)
 800c796:	4b29      	ldr	r3, [pc, #164]	; (800c83c <CommManager_Operate+0x198>)
 800c798:	895b      	ldrh	r3, [r3, #10]
 800c79a:	2b0f      	cmp	r3, #15
 800c79c:	d948      	bls.n	800c830 <CommManager_Operate+0x18c>
					{
						kCommData.eState = Comm_CloseTransmission;
 800c79e:	4b27      	ldr	r3, [pc, #156]	; (800c83c <CommManager_Operate+0x198>)
 800c7a0:	2204      	movs	r2, #4
 800c7a2:	721a      	strb	r2, [r3, #8]
						kCommData.u16ReadoutPointer = 0;
 800c7a4:	4b25      	ldr	r3, [pc, #148]	; (800c83c <CommManager_Operate+0x198>)
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	815a      	strh	r2, [r3, #10]
				if(kCommData.u8TrialsCounter > dMaxTrialsCount)
				{
					kCommData.eState = Comm_Abort;
				}
			}
			break;
 800c7aa:	e041      	b.n	800c830 <CommManager_Operate+0x18c>
				else if( kCommData.ePreviousState == Comm_CloseTransmission)
 800c7ac:	4b23      	ldr	r3, [pc, #140]	; (800c83c <CommManager_Operate+0x198>)
 800c7ae:	7a5b      	ldrb	r3, [r3, #9]
 800c7b0:	2b04      	cmp	r3, #4
 800c7b2:	d107      	bne.n	800c7c4 <CommManager_Operate+0x120>
					kCommData.pkMemoryPointer->eMemoryState = MemoryState_DataSent;
 800c7b4:	4b21      	ldr	r3, [pc, #132]	; (800c83c <CommManager_Operate+0x198>)
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	2202      	movs	r2, #2
 800c7ba:	711a      	strb	r2, [r3, #4]
					kCommData.eState = Comm_Idle;
 800c7bc:	4b1f      	ldr	r3, [pc, #124]	; (800c83c <CommManager_Operate+0x198>)
 800c7be:	2201      	movs	r2, #1
 800c7c0:	721a      	strb	r2, [r3, #8]
			break;
 800c7c2:	e035      	b.n	800c830 <CommManager_Operate+0x18c>
				else if ( kCommData.ePreviousState == Comm_OpenTransmission )
 800c7c4:	4b1d      	ldr	r3, [pc, #116]	; (800c83c <CommManager_Operate+0x198>)
 800c7c6:	7a5b      	ldrb	r3, [r3, #9]
 800c7c8:	2b02      	cmp	r3, #2
 800c7ca:	d106      	bne.n	800c7da <CommManager_Operate+0x136>
					kCommData.u16ReadoutPointer = 0;
 800c7cc:	4b1b      	ldr	r3, [pc, #108]	; (800c83c <CommManager_Operate+0x198>)
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	815a      	strh	r2, [r3, #10]
					kCommData.eState = Comm_AssembleFrame;
 800c7d2:	4b1a      	ldr	r3, [pc, #104]	; (800c83c <CommManager_Operate+0x198>)
 800c7d4:	2203      	movs	r2, #3
 800c7d6:	721a      	strb	r2, [r3, #8]
			break;
 800c7d8:	e02a      	b.n	800c830 <CommManager_Operate+0x18c>
					AssertError(AppError_TransmissionLogicBroken);
 800c7da:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c7de:	f7ff fb55 	bl	800be8c <AssertError>
					kCommData.eState = Comm_Abort;
 800c7e2:	4b16      	ldr	r3, [pc, #88]	; (800c83c <CommManager_Operate+0x198>)
 800c7e4:	2207      	movs	r2, #7
 800c7e6:	721a      	strb	r2, [r3, #8]
			break;
 800c7e8:	e022      	b.n	800c830 <CommManager_Operate+0x18c>
				kCommData.eState = kCommData.ePreviousState;
 800c7ea:	4b14      	ldr	r3, [pc, #80]	; (800c83c <CommManager_Operate+0x198>)
 800c7ec:	7a5a      	ldrb	r2, [r3, #9]
 800c7ee:	4b13      	ldr	r3, [pc, #76]	; (800c83c <CommManager_Operate+0x198>)
 800c7f0:	721a      	strb	r2, [r3, #8]
				kCommData.u8TrialsCounter++;
 800c7f2:	4b12      	ldr	r3, [pc, #72]	; (800c83c <CommManager_Operate+0x198>)
 800c7f4:	7ddb      	ldrb	r3, [r3, #23]
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	b2da      	uxtb	r2, r3
 800c7fa:	4b10      	ldr	r3, [pc, #64]	; (800c83c <CommManager_Operate+0x198>)
 800c7fc:	75da      	strb	r2, [r3, #23]
				if(kCommData.u8TrialsCounter > dMaxTrialsCount)
 800c7fe:	4b0f      	ldr	r3, [pc, #60]	; (800c83c <CommManager_Operate+0x198>)
 800c800:	7ddb      	ldrb	r3, [r3, #23]
 800c802:	2b03      	cmp	r3, #3
 800c804:	d914      	bls.n	800c830 <CommManager_Operate+0x18c>
					kCommData.eState = Comm_Abort;
 800c806:	4b0d      	ldr	r3, [pc, #52]	; (800c83c <CommManager_Operate+0x198>)
 800c808:	2207      	movs	r2, #7
 800c80a:	721a      	strb	r2, [r3, #8]
			break;
 800c80c:	e010      	b.n	800c830 <CommManager_Operate+0x18c>
		case Comm_Receiving:

			break;
		case Comm_Abort:

			kCommData.eState = Comm_Idle;
 800c80e:	4b0b      	ldr	r3, [pc, #44]	; (800c83c <CommManager_Operate+0x198>)
 800c810:	2201      	movs	r2, #1
 800c812:	721a      	strb	r2, [r3, #8]

			kCommData.pkMemoryPointer->eMemoryState = MemoryState_DataSkipped;
 800c814:	4b09      	ldr	r3, [pc, #36]	; (800c83c <CommManager_Operate+0x198>)
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	2203      	movs	r2, #3
 800c81a:	711a      	strb	r2, [r3, #4]
			kCommData.u16ReadoutPointer = 0;
 800c81c:	4b07      	ldr	r3, [pc, #28]	; (800c83c <CommManager_Operate+0x198>)
 800c81e:	2200      	movs	r2, #0
 800c820:	815a      	strh	r2, [r3, #10]
			CommManager_FlushFrame();
 800c822:	f000 f851 	bl	800c8c8 <CommManager_FlushFrame>
			break;
 800c826:	e004      	b.n	800c832 <CommManager_Operate+0x18e>
		default:

			break;
		}
	}
 800c828:	bf00      	nop
 800c82a:	e002      	b.n	800c832 <CommManager_Operate+0x18e>
			break;
 800c82c:	bf00      	nop
 800c82e:	e000      	b.n	800c832 <CommManager_Operate+0x18e>
			break;
 800c830:	bf00      	nop
}
 800c832:	bf00      	nop
 800c834:	3710      	adds	r7, #16
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
 800c83a:	bf00      	nop
 800c83c:	200007d8 	.word	0x200007d8
 800c840:	200007e4 	.word	0x200007e4

0800c844 <CommManager_SetUSBConnectionState>:

void CommManager_SetUSBConnectionState( USBState_t eState )
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b082      	sub	sp, #8
 800c848:	af00      	add	r7, sp, #0
 800c84a:	4603      	mov	r3, r0
 800c84c:	71fb      	strb	r3, [r7, #7]
	//todo: Add periodic change of the VSENSE pin
	if( eState == USB_Connected)
 800c84e:	79fb      	ldrb	r3, [r7, #7]
 800c850:	2b01      	cmp	r3, #1
 800c852:	d106      	bne.n	800c862 <CommManager_SetUSBConnectionState+0x1e>
	{
		kCommData.bUSBConnected = true;
 800c854:	4b09      	ldr	r3, [pc, #36]	; (800c87c <CommManager_SetUSBConnectionState+0x38>)
 800c856:	2201      	movs	r2, #1
 800c858:	761a      	strb	r2, [r3, #24]
		OperateLED_C(eLED_On);
 800c85a:	2000      	movs	r0, #0
 800c85c:	f7f4 fb44 	bl	8000ee8 <OperateLED_C>
	{
		kCommData.bUSBConnected = false;
		kCommData.eState = Comm_Abort; // Cancel transmission - clear buffer, stop frame assembly and other;
		OperateLED_C(eLED_Off);
	}
}
 800c860:	e008      	b.n	800c874 <CommManager_SetUSBConnectionState+0x30>
		kCommData.bUSBConnected = false;
 800c862:	4b06      	ldr	r3, [pc, #24]	; (800c87c <CommManager_SetUSBConnectionState+0x38>)
 800c864:	2200      	movs	r2, #0
 800c866:	761a      	strb	r2, [r3, #24]
		kCommData.eState = Comm_Abort; // Cancel transmission - clear buffer, stop frame assembly and other;
 800c868:	4b04      	ldr	r3, [pc, #16]	; (800c87c <CommManager_SetUSBConnectionState+0x38>)
 800c86a:	2207      	movs	r2, #7
 800c86c:	721a      	strb	r2, [r3, #8]
		OperateLED_C(eLED_Off);
 800c86e:	2001      	movs	r0, #1
 800c870:	f7f4 fb3a 	bl	8000ee8 <OperateLED_C>
}
 800c874:	bf00      	nop
 800c876:	3708      	adds	r7, #8
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}
 800c87c:	200007d8 	.word	0x200007d8

0800c880 <ComManager_ArmTransmission>:

void ComManager_ArmTransmission()
{
 800c880:	b580      	push	{r7, lr}
 800c882:	af00      	add	r7, sp, #0
	DataHandler_AccessMemoryInterchange(&kCommData.pkMemoryPointer);
 800c884:	480e      	ldr	r0, [pc, #56]	; (800c8c0 <ComManager_ArmTransmission+0x40>)
 800c886:	f7ff fcd1 	bl	800c22c <DataHandler_AccessMemoryInterchange>

	if( kCommData.bUSBConnected)
 800c88a:	4b0e      	ldr	r3, [pc, #56]	; (800c8c4 <ComManager_ArmTransmission+0x44>)
 800c88c:	7e1b      	ldrb	r3, [r3, #24]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d00f      	beq.n	800c8b2 <ComManager_ArmTransmission+0x32>
	{
		if(kCommData.eState == Comm_Idle)
 800c892:	4b0c      	ldr	r3, [pc, #48]	; (800c8c4 <ComManager_ArmTransmission+0x44>)
 800c894:	7a1b      	ldrb	r3, [r3, #8]
 800c896:	2b01      	cmp	r3, #1
 800c898:	d106      	bne.n	800c8a8 <ComManager_ArmTransmission+0x28>
		{
			kCommData.eState = Comm_OpenTransmission;
 800c89a:	4b0a      	ldr	r3, [pc, #40]	; (800c8c4 <ComManager_ArmTransmission+0x44>)
 800c89c:	2202      	movs	r2, #2
 800c89e:	721a      	strb	r2, [r3, #8]
			kCommData.u16ReadoutPointer = 0;
 800c8a0:	4b08      	ldr	r3, [pc, #32]	; (800c8c4 <ComManager_ArmTransmission+0x44>)
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	815a      	strh	r2, [r3, #10]
	else
	{
		kCommData.pkMemoryPointer->eMemoryState = MemoryState_DataSkipped;
	}

}
 800c8a6:	e008      	b.n	800c8ba <ComManager_ArmTransmission+0x3a>
			AssertError(AppError_TransmissionOverlap);
 800c8a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c8ac:	f7ff faee 	bl	800be8c <AssertError>
}
 800c8b0:	e003      	b.n	800c8ba <ComManager_ArmTransmission+0x3a>
		kCommData.pkMemoryPointer->eMemoryState = MemoryState_DataSkipped;
 800c8b2:	4b04      	ldr	r3, [pc, #16]	; (800c8c4 <ComManager_ArmTransmission+0x44>)
 800c8b4:	685b      	ldr	r3, [r3, #4]
 800c8b6:	2203      	movs	r2, #3
 800c8b8:	711a      	strb	r2, [r3, #4]
}
 800c8ba:	bf00      	nop
 800c8bc:	bd80      	pop	{r7, pc}
 800c8be:	bf00      	nop
 800c8c0:	200007dc 	.word	0x200007dc
 800c8c4:	200007d8 	.word	0x200007d8

0800c8c8 <CommManager_FlushFrame>:

/* Internal functions */

void CommManager_FlushFrame()
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b083      	sub	sp, #12
 800c8cc:	af00      	add	r7, sp, #0
	for(uint8_t u8Idx = 0; u8Idx < dMaxDataLenght; u8Idx++)
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	71fb      	strb	r3, [r7, #7]
 800c8d2:	e007      	b.n	800c8e4 <CommManager_FlushFrame+0x1c>
	{
		kCommData.u8Frame[u8Idx] = 0;
 800c8d4:	79fb      	ldrb	r3, [r7, #7]
 800c8d6:	4a08      	ldr	r2, [pc, #32]	; (800c8f8 <CommManager_FlushFrame+0x30>)
 800c8d8:	4413      	add	r3, r2
 800c8da:	2200      	movs	r2, #0
 800c8dc:	731a      	strb	r2, [r3, #12]
	for(uint8_t u8Idx = 0; u8Idx < dMaxDataLenght; u8Idx++)
 800c8de:	79fb      	ldrb	r3, [r7, #7]
 800c8e0:	3301      	adds	r3, #1
 800c8e2:	71fb      	strb	r3, [r7, #7]
 800c8e4:	79fb      	ldrb	r3, [r7, #7]
 800c8e6:	2b09      	cmp	r3, #9
 800c8e8:	d9f4      	bls.n	800c8d4 <CommManager_FlushFrame+0xc>
	}
}
 800c8ea:	bf00      	nop
 800c8ec:	bf00      	nop
 800c8ee:	370c      	adds	r7, #12
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f6:	4770      	bx	lr
 800c8f8:	200007d8 	.word	0x200007d8

0800c8fc <FrameAssembler_ConvertFloatToCharArray>:

#include "FrameAssembler.h"
#include <stdio.h>

void FrameAssembler_ConvertFloatToCharArray(uint8_t *pResultArray, float fNumber)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b082      	sub	sp, #8
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	ed87 0a00 	vstr	s0, [r7]
	sprintf((char*)pResultArray,"%+8.4f \t",fNumber);
 800c908:	6838      	ldr	r0, [r7, #0]
 800c90a:	f7f3 fe25 	bl	8000558 <__aeabi_f2d>
 800c90e:	4602      	mov	r2, r0
 800c910:	460b      	mov	r3, r1
 800c912:	4904      	ldr	r1, [pc, #16]	; (800c924 <FrameAssembler_ConvertFloatToCharArray+0x28>)
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f002 f8b3 	bl	800ea80 <siprintf>
}
 800c91a:	bf00      	nop
 800c91c:	3708      	adds	r7, #8
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}
 800c922:	bf00      	nop
 800c924:	08010f90 	.word	0x08010f90

0800c928 <USB_InitalizeTransmitterLogic>:
//static uint8_t Buf[] = "Test/r/n";

void ConvertDataToBytes(float *Dataset);

void USB_InitalizeTransmitterLogic(ADC_HandleTypeDef *phADCHandle)
{
 800c928:	b480      	push	{r7}
 800c92a:	b083      	sub	sp, #12
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
	kUSBTransmitterData.phADCHandle = phADCHandle;
 800c930:	4a05      	ldr	r2, [pc, #20]	; (800c948 <USB_InitalizeTransmitterLogic+0x20>)
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6093      	str	r3, [r2, #8]
	kUSBTransmitterData.bInitialized = true;
 800c936:	4b04      	ldr	r3, [pc, #16]	; (800c948 <USB_InitalizeTransmitterLogic+0x20>)
 800c938:	2201      	movs	r2, #1
 800c93a:	701a      	strb	r2, [r3, #0]
}
 800c93c:	bf00      	nop
 800c93e:	370c      	adds	r7, #12
 800c940:	46bd      	mov	sp, r7
 800c942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c946:	4770      	bx	lr
 800c948:	200007f4 	.word	0x200007f4

0800c94c <USB_TransmitData>:

bool USB_TransmitData(uint8_t *Dataset, uint8_t u8Length)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b084      	sub	sp, #16
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	460b      	mov	r3, r1
 800c956:	70fb      	strb	r3, [r7, #3]
	bool bResult = true;
 800c958:	2301      	movs	r3, #1
 800c95a:	73fb      	strb	r3, [r7, #15]

	if(kUSBTransmitterData.bInitialized)
 800c95c:	4b0a      	ldr	r3, [pc, #40]	; (800c988 <USB_TransmitData+0x3c>)
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d00b      	beq.n	800c97c <USB_TransmitData+0x30>
	{
	/*
	 * result = true means that a fault occurred
	 */
	bResult = CDC_Transmit_FS(Dataset,  u8Length);
 800c964:	78fb      	ldrb	r3, [r7, #3]
 800c966:	b29b      	uxth	r3, r3
 800c968:	4619      	mov	r1, r3
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f000 ff76 	bl	800d85c <CDC_Transmit_FS>
 800c970:	4603      	mov	r3, r0
 800c972:	2b00      	cmp	r3, #0
 800c974:	bf14      	ite	ne
 800c976:	2301      	movne	r3, #1
 800c978:	2300      	moveq	r3, #0
 800c97a:	73fb      	strb	r3, [r7, #15]
	}
	return bResult;
 800c97c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3710      	adds	r7, #16
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}
 800c986:	bf00      	nop
 800c988:	200007f4 	.word	0x200007f4

0800c98c <USB_CheckForUSBConnection>:

void USB_CheckForUSBConnection()
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	af00      	add	r7, sp, #0
	if( kUSBTransmitterData.bInitialized )
 800c990:	4b1e      	ldr	r3, [pc, #120]	; (800ca0c <USB_CheckForUSBConnection+0x80>)
 800c992:	781b      	ldrb	r3, [r3, #0]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d037      	beq.n	800ca08 <USB_CheckForUSBConnection+0x7c>
	{
		if( !kUSBTransmitterData.bCheckStarted )
 800c998:	4b1c      	ldr	r3, [pc, #112]	; (800ca0c <USB_CheckForUSBConnection+0x80>)
 800c99a:	785b      	ldrb	r3, [r3, #1]
 800c99c:	f083 0301 	eor.w	r3, r3, #1
 800c9a0:	b2db      	uxtb	r3, r3
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d007      	beq.n	800c9b6 <USB_CheckForUSBConnection+0x2a>
		{
			HAL_ADC_Start_IT(kUSBTransmitterData.phADCHandle);
 800c9a6:	4b19      	ldr	r3, [pc, #100]	; (800ca0c <USB_CheckForUSBConnection+0x80>)
 800c9a8:	689b      	ldr	r3, [r3, #8]
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f7f4 fcba 	bl	8001324 <HAL_ADC_Start_IT>
			kUSBTransmitterData.bCheckStarted = true;
 800c9b0:	4b16      	ldr	r3, [pc, #88]	; (800ca0c <USB_CheckForUSBConnection+0x80>)
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	705a      	strb	r2, [r3, #1]
		}

		if( kUSBTransmitterData.bNewMeasurement )
 800c9b6:	4b15      	ldr	r3, [pc, #84]	; (800ca0c <USB_CheckForUSBConnection+0x80>)
 800c9b8:	789b      	ldrb	r3, [r3, #2]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d024      	beq.n	800ca08 <USB_CheckForUSBConnection+0x7c>
		{
			kUSBTransmitterData.bNewMeasurement = false;
 800c9be:	4b13      	ldr	r3, [pc, #76]	; (800ca0c <USB_CheckForUSBConnection+0x80>)
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	709a      	strb	r2, [r3, #2]
			if( (kUSBTransmitterData.u32MeasuredVbus < dLowThreshold) && kUSBTransmitterData.bConnected )
 800c9c4:	4b11      	ldr	r3, [pc, #68]	; (800ca0c <USB_CheckForUSBConnection+0x80>)
 800c9c6:	889b      	ldrh	r3, [r3, #4]
 800c9c8:	f640 429a 	movw	r2, #3226	; 0xc9a
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d809      	bhi.n	800c9e4 <USB_CheckForUSBConnection+0x58>
 800c9d0:	4b0e      	ldr	r3, [pc, #56]	; (800ca0c <USB_CheckForUSBConnection+0x80>)
 800c9d2:	78db      	ldrb	r3, [r3, #3]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d005      	beq.n	800c9e4 <USB_CheckForUSBConnection+0x58>
			{
				kUSBTransmitterData.bConnected = false;
 800c9d8:	4b0c      	ldr	r3, [pc, #48]	; (800ca0c <USB_CheckForUSBConnection+0x80>)
 800c9da:	2200      	movs	r2, #0
 800c9dc:	70da      	strb	r2, [r3, #3]
				CallForUSBDisonnection();
 800c9de:	f7ff fcd7 	bl	800c390 <CallForUSBDisonnection>
				CallForUSBConnection();
			}
		}
	}

}
 800c9e2:	e011      	b.n	800ca08 <USB_CheckForUSBConnection+0x7c>
			else if ( (kUSBTransmitterData.u32MeasuredVbus > dHighThreshold) && !kUSBTransmitterData.bConnected )
 800c9e4:	4b09      	ldr	r3, [pc, #36]	; (800ca0c <USB_CheckForUSBConnection+0x80>)
 800c9e6:	889b      	ldrh	r3, [r3, #4]
 800c9e8:	f640 5217 	movw	r2, #3351	; 0xd17
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d90b      	bls.n	800ca08 <USB_CheckForUSBConnection+0x7c>
 800c9f0:	4b06      	ldr	r3, [pc, #24]	; (800ca0c <USB_CheckForUSBConnection+0x80>)
 800c9f2:	78db      	ldrb	r3, [r3, #3]
 800c9f4:	f083 0301 	eor.w	r3, r3, #1
 800c9f8:	b2db      	uxtb	r3, r3
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d004      	beq.n	800ca08 <USB_CheckForUSBConnection+0x7c>
				kUSBTransmitterData.bConnected = true;
 800c9fe:	4b03      	ldr	r3, [pc, #12]	; (800ca0c <USB_CheckForUSBConnection+0x80>)
 800ca00:	2201      	movs	r2, #1
 800ca02:	70da      	strb	r2, [r3, #3]
				CallForUSBConnection();
 800ca04:	f7ff fcbd 	bl	800c382 <CallForUSBConnection>
}
 800ca08:	bf00      	nop
 800ca0a:	bd80      	pop	{r7, pc}
 800ca0c:	200007f4 	.word	0x200007f4

0800ca10 <USB_SignalizeVBUSMeasurementReady>:

void USB_SignalizeVBUSMeasurementReady(uint32_t u32Result)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b083      	sub	sp, #12
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
	kUSBTransmitterData.bNewMeasurement = true;
 800ca18:	4b07      	ldr	r3, [pc, #28]	; (800ca38 <USB_SignalizeVBUSMeasurementReady+0x28>)
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	709a      	strb	r2, [r3, #2]
	kUSBTransmitterData.u32MeasuredVbus = u32Result;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	b29a      	uxth	r2, r3
 800ca22:	4b05      	ldr	r3, [pc, #20]	; (800ca38 <USB_SignalizeVBUSMeasurementReady+0x28>)
 800ca24:	809a      	strh	r2, [r3, #4]
	kUSBTransmitterData.bCheckStarted = false;
 800ca26:	4b04      	ldr	r3, [pc, #16]	; (800ca38 <USB_SignalizeVBUSMeasurementReady+0x28>)
 800ca28:	2200      	movs	r2, #0
 800ca2a:	705a      	strb	r2, [r3, #1]
}
 800ca2c:	bf00      	nop
 800ca2e:	370c      	adds	r7, #12
 800ca30:	46bd      	mov	sp, r7
 800ca32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca36:	4770      	bx	lr
 800ca38:	200007f4 	.word	0x200007f4

0800ca3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ca40:	f7f4 fb96 	bl	8001170 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ca44:	f000 f83c 	bl	800cac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ca48:	f000 fa9c 	bl	800cf84 <MX_GPIO_Init>
  MX_DMA_Init();
 800ca4c:	f000 fa7a 	bl	800cf44 <MX_DMA_Init>
  MX_RTC_Init();
 800ca50:	f000 f950 	bl	800ccf4 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 800ca54:	f000 f9a8 	bl	800cda8 <MX_SDIO_SD_Init>
  MX_I2C1_Init();
 800ca58:	f000 f8f0 	bl	800cc3c <MX_I2C1_Init>
  MX_I2C2_Init();
 800ca5c:	f000 f91c 	bl	800cc98 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800ca60:	f000 fa46 	bl	800cef0 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800ca64:	f000 fe3c 	bl	800d6e0 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 800ca68:	f000 f9ce 	bl	800ce08 <MX_TIM2_Init>
  MX_ADC1_Init();
 800ca6c:	f000 f894 	bl	800cb98 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  SensorArray_Init(&hi2c1, &hi2c2);
 800ca70:	490e      	ldr	r1, [pc, #56]	; (800caac <main+0x70>)
 800ca72:	480f      	ldr	r0, [pc, #60]	; (800cab0 <main+0x74>)
 800ca74:	f7f4 faae 	bl	8000fd4 <SensorArray_Init>
  USB_InitalizeTransmitterLogic(&hadc1);
 800ca78:	480e      	ldr	r0, [pc, #56]	; (800cab4 <main+0x78>)
 800ca7a:	f7ff ff55 	bl	800c928 <USB_InitalizeTransmitterLogic>

  HAL_TIM_Base_Start_IT(&htim2);
 800ca7e:	480e      	ldr	r0, [pc, #56]	; (800cab8 <main+0x7c>)
 800ca80:	f7fa fbcc 	bl	800721c <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, SET);
 800ca84:	2201      	movs	r2, #1
 800ca86:	2101      	movs	r1, #1
 800ca88:	480c      	ldr	r0, [pc, #48]	; (800cabc <main+0x80>)
 800ca8a:	f7f5 fe75 	bl	8002778 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, SET);
 800ca8e:	2201      	movs	r2, #1
 800ca90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ca94:	4809      	ldr	r0, [pc, #36]	; (800cabc <main+0x80>)
 800ca96:	f7f5 fe6f 	bl	8002778 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, SET);
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800caa0:	4806      	ldr	r0, [pc, #24]	; (800cabc <main+0x80>)
 800caa2:	f7f5 fe69 	bl	8002778 <HAL_GPIO_WritePin>

  while (1)
  {
	  ApplicationPerform();
 800caa6:	f7ff f8b3 	bl	800bc10 <ApplicationPerform>
 800caaa:	e7fc      	b.n	800caa6 <main+0x6a>
 800caac:	20000b5c 	.word	0x20000b5c
 800cab0:	20000b08 	.word	0x20000b08
 800cab4:	20000bb0 	.word	0x20000bb0
 800cab8:	20000ce0 	.word	0x20000ce0
 800cabc:	40020800 	.word	0x40020800

0800cac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b094      	sub	sp, #80	; 0x50
 800cac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800cac6:	f107 0320 	add.w	r3, r7, #32
 800caca:	2230      	movs	r2, #48	; 0x30
 800cacc:	2100      	movs	r1, #0
 800cace:	4618      	mov	r0, r3
 800cad0:	f001 fb64 	bl	800e19c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800cad4:	f107 030c 	add.w	r3, r7, #12
 800cad8:	2200      	movs	r2, #0
 800cada:	601a      	str	r2, [r3, #0]
 800cadc:	605a      	str	r2, [r3, #4]
 800cade:	609a      	str	r2, [r3, #8]
 800cae0:	60da      	str	r2, [r3, #12]
 800cae2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800cae4:	2300      	movs	r3, #0
 800cae6:	60bb      	str	r3, [r7, #8]
 800cae8:	4b29      	ldr	r3, [pc, #164]	; (800cb90 <SystemClock_Config+0xd0>)
 800caea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caec:	4a28      	ldr	r2, [pc, #160]	; (800cb90 <SystemClock_Config+0xd0>)
 800caee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800caf2:	6413      	str	r3, [r2, #64]	; 0x40
 800caf4:	4b26      	ldr	r3, [pc, #152]	; (800cb90 <SystemClock_Config+0xd0>)
 800caf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cafc:	60bb      	str	r3, [r7, #8]
 800cafe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800cb00:	2300      	movs	r3, #0
 800cb02:	607b      	str	r3, [r7, #4]
 800cb04:	4b23      	ldr	r3, [pc, #140]	; (800cb94 <SystemClock_Config+0xd4>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	4a22      	ldr	r2, [pc, #136]	; (800cb94 <SystemClock_Config+0xd4>)
 800cb0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cb0e:	6013      	str	r3, [r2, #0]
 800cb10:	4b20      	ldr	r3, [pc, #128]	; (800cb94 <SystemClock_Config+0xd4>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800cb18:	607b      	str	r3, [r7, #4]
 800cb1a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800cb1c:	2305      	movs	r3, #5
 800cb1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800cb20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800cb24:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800cb26:	2301      	movs	r3, #1
 800cb28:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800cb2a:	2302      	movs	r3, #2
 800cb2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800cb2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cb32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800cb34:	230c      	movs	r3, #12
 800cb36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800cb38:	2348      	movs	r3, #72	; 0x48
 800cb3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800cb3c:	2302      	movs	r3, #2
 800cb3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800cb40:	2303      	movs	r3, #3
 800cb42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800cb44:	f107 0320 	add.w	r3, r7, #32
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f7f8 fda3 	bl	8005694 <HAL_RCC_OscConfig>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d001      	beq.n	800cb58 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800cb54:	f000 faa2 	bl	800d09c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800cb58:	230f      	movs	r3, #15
 800cb5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800cb5c:	2302      	movs	r3, #2
 800cb5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800cb60:	2300      	movs	r3, #0
 800cb62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800cb64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cb68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800cb6e:	f107 030c 	add.w	r3, r7, #12
 800cb72:	2102      	movs	r1, #2
 800cb74:	4618      	mov	r0, r3
 800cb76:	f7f9 f803 	bl	8005b80 <HAL_RCC_ClockConfig>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d001      	beq.n	800cb84 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800cb80:	f000 fa8c 	bl	800d09c <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800cb84:	f7f9 f8e2 	bl	8005d4c <HAL_RCC_EnableCSS>
}
 800cb88:	bf00      	nop
 800cb8a:	3750      	adds	r7, #80	; 0x50
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}
 800cb90:	40023800 	.word	0x40023800
 800cb94:	40007000 	.word	0x40007000

0800cb98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b084      	sub	sp, #16
 800cb9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800cb9e:	463b      	mov	r3, r7
 800cba0:	2200      	movs	r2, #0
 800cba2:	601a      	str	r2, [r3, #0]
 800cba4:	605a      	str	r2, [r3, #4]
 800cba6:	609a      	str	r2, [r3, #8]
 800cba8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800cbaa:	4b21      	ldr	r3, [pc, #132]	; (800cc30 <MX_ADC1_Init+0x98>)
 800cbac:	4a21      	ldr	r2, [pc, #132]	; (800cc34 <MX_ADC1_Init+0x9c>)
 800cbae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800cbb0:	4b1f      	ldr	r3, [pc, #124]	; (800cc30 <MX_ADC1_Init+0x98>)
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800cbb6:	4b1e      	ldr	r3, [pc, #120]	; (800cc30 <MX_ADC1_Init+0x98>)
 800cbb8:	2200      	movs	r2, #0
 800cbba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800cbbc:	4b1c      	ldr	r3, [pc, #112]	; (800cc30 <MX_ADC1_Init+0x98>)
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800cbc2:	4b1b      	ldr	r3, [pc, #108]	; (800cc30 <MX_ADC1_Init+0x98>)
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800cbc8:	4b19      	ldr	r3, [pc, #100]	; (800cc30 <MX_ADC1_Init+0x98>)
 800cbca:	2200      	movs	r2, #0
 800cbcc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800cbd0:	4b17      	ldr	r3, [pc, #92]	; (800cc30 <MX_ADC1_Init+0x98>)
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800cbd6:	4b16      	ldr	r3, [pc, #88]	; (800cc30 <MX_ADC1_Init+0x98>)
 800cbd8:	4a17      	ldr	r2, [pc, #92]	; (800cc38 <MX_ADC1_Init+0xa0>)
 800cbda:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800cbdc:	4b14      	ldr	r3, [pc, #80]	; (800cc30 <MX_ADC1_Init+0x98>)
 800cbde:	2200      	movs	r2, #0
 800cbe0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800cbe2:	4b13      	ldr	r3, [pc, #76]	; (800cc30 <MX_ADC1_Init+0x98>)
 800cbe4:	2201      	movs	r2, #1
 800cbe6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800cbe8:	4b11      	ldr	r3, [pc, #68]	; (800cc30 <MX_ADC1_Init+0x98>)
 800cbea:	2200      	movs	r2, #0
 800cbec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800cbf0:	4b0f      	ldr	r3, [pc, #60]	; (800cc30 <MX_ADC1_Init+0x98>)
 800cbf2:	2201      	movs	r2, #1
 800cbf4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800cbf6:	480e      	ldr	r0, [pc, #56]	; (800cc30 <MX_ADC1_Init+0x98>)
 800cbf8:	f7f4 fb50 	bl	800129c <HAL_ADC_Init>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d001      	beq.n	800cc06 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800cc02:	f000 fa4b 	bl	800d09c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800cc06:	2308      	movs	r3, #8
 800cc08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cc12:	463b      	mov	r3, r7
 800cc14:	4619      	mov	r1, r3
 800cc16:	4806      	ldr	r0, [pc, #24]	; (800cc30 <MX_ADC1_Init+0x98>)
 800cc18:	f7f4 fdae 	bl	8001778 <HAL_ADC_ConfigChannel>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d001      	beq.n	800cc26 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800cc22:	f000 fa3b 	bl	800d09c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800cc26:	bf00      	nop
 800cc28:	3710      	adds	r7, #16
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}
 800cc2e:	bf00      	nop
 800cc30:	20000bb0 	.word	0x20000bb0
 800cc34:	40012000 	.word	0x40012000
 800cc38:	0f000001 	.word	0x0f000001

0800cc3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800cc40:	4b13      	ldr	r3, [pc, #76]	; (800cc90 <MX_I2C1_Init+0x54>)
 800cc42:	4a14      	ldr	r2, [pc, #80]	; (800cc94 <MX_I2C1_Init+0x58>)
 800cc44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 25000;
 800cc46:	4b12      	ldr	r3, [pc, #72]	; (800cc90 <MX_I2C1_Init+0x54>)
 800cc48:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800cc4c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800cc4e:	4b10      	ldr	r3, [pc, #64]	; (800cc90 <MX_I2C1_Init+0x54>)
 800cc50:	2200      	movs	r2, #0
 800cc52:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800cc54:	4b0e      	ldr	r3, [pc, #56]	; (800cc90 <MX_I2C1_Init+0x54>)
 800cc56:	2200      	movs	r2, #0
 800cc58:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800cc5a:	4b0d      	ldr	r3, [pc, #52]	; (800cc90 <MX_I2C1_Init+0x54>)
 800cc5c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800cc60:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800cc62:	4b0b      	ldr	r3, [pc, #44]	; (800cc90 <MX_I2C1_Init+0x54>)
 800cc64:	2200      	movs	r2, #0
 800cc66:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800cc68:	4b09      	ldr	r3, [pc, #36]	; (800cc90 <MX_I2C1_Init+0x54>)
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800cc6e:	4b08      	ldr	r3, [pc, #32]	; (800cc90 <MX_I2C1_Init+0x54>)
 800cc70:	2200      	movs	r2, #0
 800cc72:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800cc74:	4b06      	ldr	r3, [pc, #24]	; (800cc90 <MX_I2C1_Init+0x54>)
 800cc76:	2200      	movs	r2, #0
 800cc78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800cc7a:	4805      	ldr	r0, [pc, #20]	; (800cc90 <MX_I2C1_Init+0x54>)
 800cc7c:	f7f5 fdd4 	bl	8002828 <HAL_I2C_Init>
 800cc80:	4603      	mov	r3, r0
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d001      	beq.n	800cc8a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800cc86:	f000 fa09 	bl	800d09c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800cc8a:	bf00      	nop
 800cc8c:	bd80      	pop	{r7, pc}
 800cc8e:	bf00      	nop
 800cc90:	20000b08 	.word	0x20000b08
 800cc94:	40005400 	.word	0x40005400

0800cc98 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800cc9c:	4b13      	ldr	r3, [pc, #76]	; (800ccec <MX_I2C2_Init+0x54>)
 800cc9e:	4a14      	ldr	r2, [pc, #80]	; (800ccf0 <MX_I2C2_Init+0x58>)
 800cca0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 25000;
 800cca2:	4b12      	ldr	r3, [pc, #72]	; (800ccec <MX_I2C2_Init+0x54>)
 800cca4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800cca8:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800ccaa:	4b10      	ldr	r3, [pc, #64]	; (800ccec <MX_I2C2_Init+0x54>)
 800ccac:	2200      	movs	r2, #0
 800ccae:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800ccb0:	4b0e      	ldr	r3, [pc, #56]	; (800ccec <MX_I2C2_Init+0x54>)
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800ccb6:	4b0d      	ldr	r3, [pc, #52]	; (800ccec <MX_I2C2_Init+0x54>)
 800ccb8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ccbc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800ccbe:	4b0b      	ldr	r3, [pc, #44]	; (800ccec <MX_I2C2_Init+0x54>)
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800ccc4:	4b09      	ldr	r3, [pc, #36]	; (800ccec <MX_I2C2_Init+0x54>)
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800ccca:	4b08      	ldr	r3, [pc, #32]	; (800ccec <MX_I2C2_Init+0x54>)
 800cccc:	2200      	movs	r2, #0
 800ccce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800ccd0:	4b06      	ldr	r3, [pc, #24]	; (800ccec <MX_I2C2_Init+0x54>)
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800ccd6:	4805      	ldr	r0, [pc, #20]	; (800ccec <MX_I2C2_Init+0x54>)
 800ccd8:	f7f5 fda6 	bl	8002828 <HAL_I2C_Init>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d001      	beq.n	800cce6 <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 800cce2:	f000 f9db 	bl	800d09c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800cce6:	bf00      	nop
 800cce8:	bd80      	pop	{r7, pc}
 800ccea:	bf00      	nop
 800ccec:	20000b5c 	.word	0x20000b5c
 800ccf0:	40005800 	.word	0x40005800

0800ccf4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b086      	sub	sp, #24
 800ccf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800ccfa:	1d3b      	adds	r3, r7, #4
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	601a      	str	r2, [r3, #0]
 800cd00:	605a      	str	r2, [r3, #4]
 800cd02:	609a      	str	r2, [r3, #8]
 800cd04:	60da      	str	r2, [r3, #12]
 800cd06:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800cd08:	2300      	movs	r3, #0
 800cd0a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800cd0c:	4b24      	ldr	r3, [pc, #144]	; (800cda0 <MX_RTC_Init+0xac>)
 800cd0e:	4a25      	ldr	r2, [pc, #148]	; (800cda4 <MX_RTC_Init+0xb0>)
 800cd10:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800cd12:	4b23      	ldr	r3, [pc, #140]	; (800cda0 <MX_RTC_Init+0xac>)
 800cd14:	2200      	movs	r2, #0
 800cd16:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800cd18:	4b21      	ldr	r3, [pc, #132]	; (800cda0 <MX_RTC_Init+0xac>)
 800cd1a:	227f      	movs	r2, #127	; 0x7f
 800cd1c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800cd1e:	4b20      	ldr	r3, [pc, #128]	; (800cda0 <MX_RTC_Init+0xac>)
 800cd20:	22ff      	movs	r2, #255	; 0xff
 800cd22:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800cd24:	4b1e      	ldr	r3, [pc, #120]	; (800cda0 <MX_RTC_Init+0xac>)
 800cd26:	2200      	movs	r2, #0
 800cd28:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800cd2a:	4b1d      	ldr	r3, [pc, #116]	; (800cda0 <MX_RTC_Init+0xac>)
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800cd30:	4b1b      	ldr	r3, [pc, #108]	; (800cda0 <MX_RTC_Init+0xac>)
 800cd32:	2200      	movs	r2, #0
 800cd34:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800cd36:	481a      	ldr	r0, [pc, #104]	; (800cda0 <MX_RTC_Init+0xac>)
 800cd38:	f7f9 fa0a 	bl	8006150 <HAL_RTC_Init>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d001      	beq.n	800cd46 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800cd42:	f000 f9ab 	bl	800d09c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800cd46:	2300      	movs	r3, #0
 800cd48:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800cd52:	2300      	movs	r3, #0
 800cd54:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800cd56:	2300      	movs	r3, #0
 800cd58:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800cd5a:	1d3b      	adds	r3, r7, #4
 800cd5c:	2201      	movs	r2, #1
 800cd5e:	4619      	mov	r1, r3
 800cd60:	480f      	ldr	r0, [pc, #60]	; (800cda0 <MX_RTC_Init+0xac>)
 800cd62:	f7f9 fa86 	bl	8006272 <HAL_RTC_SetTime>
 800cd66:	4603      	mov	r3, r0
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d001      	beq.n	800cd70 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800cd6c:	f000 f996 	bl	800d09c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800cd70:	2301      	movs	r3, #1
 800cd72:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 800cd74:	2312      	movs	r3, #18
 800cd76:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x27;
 800cd78:	2327      	movs	r3, #39	; 0x27
 800cd7a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 800cd7c:	2321      	movs	r3, #33	; 0x21
 800cd7e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800cd80:	463b      	mov	r3, r7
 800cd82:	2201      	movs	r2, #1
 800cd84:	4619      	mov	r1, r3
 800cd86:	4806      	ldr	r0, [pc, #24]	; (800cda0 <MX_RTC_Init+0xac>)
 800cd88:	f7f9 fb30 	bl	80063ec <HAL_RTC_SetDate>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d001      	beq.n	800cd96 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800cd92:	f000 f983 	bl	800d09c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800cd96:	bf00      	nop
 800cd98:	3718      	adds	r7, #24
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
 800cd9e:	bf00      	nop
 800cda0:	20000c3c 	.word	0x20000c3c
 800cda4:	40002800 	.word	0x40002800

0800cda8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800cdac:	4b14      	ldr	r3, [pc, #80]	; (800ce00 <MX_SDIO_SD_Init+0x58>)
 800cdae:	4a15      	ldr	r2, [pc, #84]	; (800ce04 <MX_SDIO_SD_Init+0x5c>)
 800cdb0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800cdb2:	4b13      	ldr	r3, [pc, #76]	; (800ce00 <MX_SDIO_SD_Init+0x58>)
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800cdb8:	4b11      	ldr	r3, [pc, #68]	; (800ce00 <MX_SDIO_SD_Init+0x58>)
 800cdba:	2200      	movs	r2, #0
 800cdbc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800cdbe:	4b10      	ldr	r3, [pc, #64]	; (800ce00 <MX_SDIO_SD_Init+0x58>)
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800cdc4:	4b0e      	ldr	r3, [pc, #56]	; (800ce00 <MX_SDIO_SD_Init+0x58>)
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800cdca:	4b0d      	ldr	r3, [pc, #52]	; (800ce00 <MX_SDIO_SD_Init+0x58>)
 800cdcc:	2200      	movs	r2, #0
 800cdce:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800cdd0:	4b0b      	ldr	r3, [pc, #44]	; (800ce00 <MX_SDIO_SD_Init+0x58>)
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 800cdd6:	480a      	ldr	r0, [pc, #40]	; (800ce00 <MX_SDIO_SD_Init+0x58>)
 800cdd8:	f7f9 fc21 	bl	800661e <HAL_SD_Init>
 800cddc:	4603      	mov	r3, r0
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d001      	beq.n	800cde6 <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 800cde2:	f000 f95b 	bl	800d09c <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800cde6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800cdea:	4805      	ldr	r0, [pc, #20]	; (800ce00 <MX_SDIO_SD_Init+0x58>)
 800cdec:	f7f9 fe6a 	bl	8006ac4 <HAL_SD_ConfigWideBusOperation>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d001      	beq.n	800cdfa <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 800cdf6:	f000 f951 	bl	800d09c <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800cdfa:	bf00      	nop
 800cdfc:	bd80      	pop	{r7, pc}
 800cdfe:	bf00      	nop
 800ce00:	20000c5c 	.word	0x20000c5c
 800ce04:	40012c00 	.word	0x40012c00

0800ce08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b08e      	sub	sp, #56	; 0x38
 800ce0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ce0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ce12:	2200      	movs	r2, #0
 800ce14:	601a      	str	r2, [r3, #0]
 800ce16:	605a      	str	r2, [r3, #4]
 800ce18:	609a      	str	r2, [r3, #8]
 800ce1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ce1c:	f107 0320 	add.w	r3, r7, #32
 800ce20:	2200      	movs	r2, #0
 800ce22:	601a      	str	r2, [r3, #0]
 800ce24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ce26:	1d3b      	adds	r3, r7, #4
 800ce28:	2200      	movs	r2, #0
 800ce2a:	601a      	str	r2, [r3, #0]
 800ce2c:	605a      	str	r2, [r3, #4]
 800ce2e:	609a      	str	r2, [r3, #8]
 800ce30:	60da      	str	r2, [r3, #12]
 800ce32:	611a      	str	r2, [r3, #16]
 800ce34:	615a      	str	r2, [r3, #20]
 800ce36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800ce38:	4b2b      	ldr	r3, [pc, #172]	; (800cee8 <MX_TIM2_Init+0xe0>)
 800ce3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ce3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 800ce40:	4b29      	ldr	r3, [pc, #164]	; (800cee8 <MX_TIM2_Init+0xe0>)
 800ce42:	2248      	movs	r2, #72	; 0x48
 800ce44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ce46:	4b28      	ldr	r3, [pc, #160]	; (800cee8 <MX_TIM2_Init+0xe0>)
 800ce48:	2200      	movs	r2, #0
 800ce4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 250000;
 800ce4c:	4b26      	ldr	r3, [pc, #152]	; (800cee8 <MX_TIM2_Init+0xe0>)
 800ce4e:	4a27      	ldr	r2, [pc, #156]	; (800ceec <MX_TIM2_Init+0xe4>)
 800ce50:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ce52:	4b25      	ldr	r3, [pc, #148]	; (800cee8 <MX_TIM2_Init+0xe0>)
 800ce54:	2200      	movs	r2, #0
 800ce56:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800ce58:	4b23      	ldr	r3, [pc, #140]	; (800cee8 <MX_TIM2_Init+0xe0>)
 800ce5a:	2280      	movs	r2, #128	; 0x80
 800ce5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800ce5e:	4822      	ldr	r0, [pc, #136]	; (800cee8 <MX_TIM2_Init+0xe0>)
 800ce60:	f7fa f98d 	bl	800717e <HAL_TIM_Base_Init>
 800ce64:	4603      	mov	r3, r0
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d001      	beq.n	800ce6e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800ce6a:	f000 f917 	bl	800d09c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ce6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce72:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800ce74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ce78:	4619      	mov	r1, r3
 800ce7a:	481b      	ldr	r0, [pc, #108]	; (800cee8 <MX_TIM2_Init+0xe0>)
 800ce7c:	f7fa fbee 	bl	800765c <HAL_TIM_ConfigClockSource>
 800ce80:	4603      	mov	r3, r0
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d001      	beq.n	800ce8a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800ce86:	f000 f909 	bl	800d09c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800ce8a:	4817      	ldr	r0, [pc, #92]	; (800cee8 <MX_TIM2_Init+0xe0>)
 800ce8c:	f7fa fa28 	bl	80072e0 <HAL_TIM_OC_Init>
 800ce90:	4603      	mov	r3, r0
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d001      	beq.n	800ce9a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800ce96:	f000 f901 	bl	800d09c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800cea2:	f107 0320 	add.w	r3, r7, #32
 800cea6:	4619      	mov	r1, r3
 800cea8:	480f      	ldr	r0, [pc, #60]	; (800cee8 <MX_TIM2_Init+0xe0>)
 800ceaa:	f7fa ff77 	bl	8007d9c <HAL_TIMEx_MasterConfigSynchronization>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d001      	beq.n	800ceb8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800ceb4:	f000 f8f2 	bl	800d09c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800cebc:	2300      	movs	r3, #0
 800cebe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800cec0:	2300      	movs	r3, #0
 800cec2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800cec4:	2300      	movs	r3, #0
 800cec6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800cec8:	1d3b      	adds	r3, r7, #4
 800ceca:	2200      	movs	r2, #0
 800cecc:	4619      	mov	r1, r3
 800cece:	4806      	ldr	r0, [pc, #24]	; (800cee8 <MX_TIM2_Init+0xe0>)
 800ced0:	f7fa fb68 	bl	80075a4 <HAL_TIM_OC_ConfigChannel>
 800ced4:	4603      	mov	r3, r0
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d001      	beq.n	800cede <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800ceda:	f000 f8df 	bl	800d09c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800cede:	bf00      	nop
 800cee0:	3738      	adds	r7, #56	; 0x38
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
 800cee6:	bf00      	nop
 800cee8:	20000ce0 	.word	0x20000ce0
 800ceec:	0003d090 	.word	0x0003d090

0800cef0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800cef4:	4b11      	ldr	r3, [pc, #68]	; (800cf3c <MX_USART1_UART_Init+0x4c>)
 800cef6:	4a12      	ldr	r2, [pc, #72]	; (800cf40 <MX_USART1_UART_Init+0x50>)
 800cef8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800cefa:	4b10      	ldr	r3, [pc, #64]	; (800cf3c <MX_USART1_UART_Init+0x4c>)
 800cefc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800cf00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800cf02:	4b0e      	ldr	r3, [pc, #56]	; (800cf3c <MX_USART1_UART_Init+0x4c>)
 800cf04:	2200      	movs	r2, #0
 800cf06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800cf08:	4b0c      	ldr	r3, [pc, #48]	; (800cf3c <MX_USART1_UART_Init+0x4c>)
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800cf0e:	4b0b      	ldr	r3, [pc, #44]	; (800cf3c <MX_USART1_UART_Init+0x4c>)
 800cf10:	2200      	movs	r2, #0
 800cf12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800cf14:	4b09      	ldr	r3, [pc, #36]	; (800cf3c <MX_USART1_UART_Init+0x4c>)
 800cf16:	220c      	movs	r2, #12
 800cf18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cf1a:	4b08      	ldr	r3, [pc, #32]	; (800cf3c <MX_USART1_UART_Init+0x4c>)
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800cf20:	4b06      	ldr	r3, [pc, #24]	; (800cf3c <MX_USART1_UART_Init+0x4c>)
 800cf22:	2200      	movs	r2, #0
 800cf24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800cf26:	4805      	ldr	r0, [pc, #20]	; (800cf3c <MX_USART1_UART_Init+0x4c>)
 800cf28:	f7fa ffba 	bl	8007ea0 <HAL_UART_Init>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d001      	beq.n	800cf36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800cf32:	f000 f8b3 	bl	800d09c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800cf36:	bf00      	nop
 800cf38:	bd80      	pop	{r7, pc}
 800cf3a:	bf00      	nop
 800cf3c:	20000bf8 	.word	0x20000bf8
 800cf40:	40011000 	.word	0x40011000

0800cf44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b082      	sub	sp, #8
 800cf48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	607b      	str	r3, [r7, #4]
 800cf4e:	4b0c      	ldr	r3, [pc, #48]	; (800cf80 <MX_DMA_Init+0x3c>)
 800cf50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf52:	4a0b      	ldr	r2, [pc, #44]	; (800cf80 <MX_DMA_Init+0x3c>)
 800cf54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cf58:	6313      	str	r3, [r2, #48]	; 0x30
 800cf5a:	4b09      	ldr	r3, [pc, #36]	; (800cf80 <MX_DMA_Init+0x3c>)
 800cf5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cf62:	607b      	str	r3, [r7, #4]
 800cf64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800cf66:	2200      	movs	r2, #0
 800cf68:	2100      	movs	r1, #0
 800cf6a:	200c      	movs	r0, #12
 800cf6c:	f7f4 ff17 	bl	8001d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800cf70:	200c      	movs	r0, #12
 800cf72:	f7f4 ff30 	bl	8001dd6 <HAL_NVIC_EnableIRQ>

}
 800cf76:	bf00      	nop
 800cf78:	3708      	adds	r7, #8
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}
 800cf7e:	bf00      	nop
 800cf80:	40023800 	.word	0x40023800

0800cf84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b08a      	sub	sp, #40	; 0x28
 800cf88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf8a:	f107 0314 	add.w	r3, r7, #20
 800cf8e:	2200      	movs	r2, #0
 800cf90:	601a      	str	r2, [r3, #0]
 800cf92:	605a      	str	r2, [r3, #4]
 800cf94:	609a      	str	r2, [r3, #8]
 800cf96:	60da      	str	r2, [r3, #12]
 800cf98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	613b      	str	r3, [r7, #16]
 800cf9e:	4b3c      	ldr	r3, [pc, #240]	; (800d090 <MX_GPIO_Init+0x10c>)
 800cfa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfa2:	4a3b      	ldr	r2, [pc, #236]	; (800d090 <MX_GPIO_Init+0x10c>)
 800cfa4:	f043 0304 	orr.w	r3, r3, #4
 800cfa8:	6313      	str	r3, [r2, #48]	; 0x30
 800cfaa:	4b39      	ldr	r3, [pc, #228]	; (800d090 <MX_GPIO_Init+0x10c>)
 800cfac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfae:	f003 0304 	and.w	r3, r3, #4
 800cfb2:	613b      	str	r3, [r7, #16]
 800cfb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	60fb      	str	r3, [r7, #12]
 800cfba:	4b35      	ldr	r3, [pc, #212]	; (800d090 <MX_GPIO_Init+0x10c>)
 800cfbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfbe:	4a34      	ldr	r2, [pc, #208]	; (800d090 <MX_GPIO_Init+0x10c>)
 800cfc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfc4:	6313      	str	r3, [r2, #48]	; 0x30
 800cfc6:	4b32      	ldr	r3, [pc, #200]	; (800d090 <MX_GPIO_Init+0x10c>)
 800cfc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfce:	60fb      	str	r3, [r7, #12]
 800cfd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	60bb      	str	r3, [r7, #8]
 800cfd6:	4b2e      	ldr	r3, [pc, #184]	; (800d090 <MX_GPIO_Init+0x10c>)
 800cfd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfda:	4a2d      	ldr	r2, [pc, #180]	; (800d090 <MX_GPIO_Init+0x10c>)
 800cfdc:	f043 0301 	orr.w	r3, r3, #1
 800cfe0:	6313      	str	r3, [r2, #48]	; 0x30
 800cfe2:	4b2b      	ldr	r3, [pc, #172]	; (800d090 <MX_GPIO_Init+0x10c>)
 800cfe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfe6:	f003 0301 	and.w	r3, r3, #1
 800cfea:	60bb      	str	r3, [r7, #8]
 800cfec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800cfee:	2300      	movs	r3, #0
 800cff0:	607b      	str	r3, [r7, #4]
 800cff2:	4b27      	ldr	r3, [pc, #156]	; (800d090 <MX_GPIO_Init+0x10c>)
 800cff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cff6:	4a26      	ldr	r2, [pc, #152]	; (800d090 <MX_GPIO_Init+0x10c>)
 800cff8:	f043 0302 	orr.w	r3, r3, #2
 800cffc:	6313      	str	r3, [r2, #48]	; 0x30
 800cffe:	4b24      	ldr	r3, [pc, #144]	; (800d090 <MX_GPIO_Init+0x10c>)
 800d000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d002:	f003 0302 	and.w	r3, r3, #2
 800d006:	607b      	str	r3, [r7, #4]
 800d008:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, I2C2_VDD_Pin|LED0_Pin|LED1_Pin|LED2_Pin
 800d00a:	2200      	movs	r2, #0
 800d00c:	f243 010f 	movw	r1, #12303	; 0x300f
 800d010:	4820      	ldr	r0, [pc, #128]	; (800d094 <MX_GPIO_Init+0x110>)
 800d012:	f7f5 fbb1 	bl	8002778 <HAL_GPIO_WritePin>
                          |LED3_Pin|I2C1_VDD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PIN_0_Pin|PIN_1_Pin|PIN_2_Pin, GPIO_PIN_RESET);
 800d016:	2200      	movs	r2, #0
 800d018:	2107      	movs	r1, #7
 800d01a:	481f      	ldr	r0, [pc, #124]	; (800d098 <MX_GPIO_Init+0x114>)
 800d01c:	f7f5 fbac 	bl	8002778 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : I2C2_VDD_Pin LED0_Pin LED1_Pin LED2_Pin
                           LED3_Pin I2C1_VDD_Pin */
  GPIO_InitStruct.Pin = I2C2_VDD_Pin|LED0_Pin|LED1_Pin|LED2_Pin
 800d020:	f243 030f 	movw	r3, #12303	; 0x300f
 800d024:	617b      	str	r3, [r7, #20]
                          |LED3_Pin|I2C1_VDD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d026:	2301      	movs	r3, #1
 800d028:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d02a:	2300      	movs	r3, #0
 800d02c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d02e:	2300      	movs	r3, #0
 800d030:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d032:	f107 0314 	add.w	r3, r7, #20
 800d036:	4619      	mov	r1, r3
 800d038:	4816      	ldr	r0, [pc, #88]	; (800d094 <MX_GPIO_Init+0x110>)
 800d03a:	f7f5 fa01 	bl	8002440 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN_0_Pin PIN_1_Pin PIN_2_Pin */
  GPIO_InitStruct.Pin = PIN_0_Pin|PIN_1_Pin|PIN_2_Pin;
 800d03e:	2307      	movs	r3, #7
 800d040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d042:	2301      	movs	r3, #1
 800d044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d046:	2300      	movs	r3, #0
 800d048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d04a:	2300      	movs	r3, #0
 800d04c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d04e:	f107 0314 	add.w	r3, r7, #20
 800d052:	4619      	mov	r1, r3
 800d054:	4810      	ldr	r0, [pc, #64]	; (800d098 <MX_GPIO_Init+0x114>)
 800d056:	f7f5 f9f3 	bl	8002440 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VSENSE_Pin */
  GPIO_InitStruct.Pin = USB_VSENSE_Pin;
 800d05a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d05e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800d060:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800d064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d066:	2300      	movs	r3, #0
 800d068:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_VSENSE_GPIO_Port, &GPIO_InitStruct);
 800d06a:	f107 0314 	add.w	r3, r7, #20
 800d06e:	4619      	mov	r1, r3
 800d070:	4809      	ldr	r0, [pc, #36]	; (800d098 <MX_GPIO_Init+0x114>)
 800d072:	f7f5 f9e5 	bl	8002440 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800d076:	2200      	movs	r2, #0
 800d078:	2100      	movs	r1, #0
 800d07a:	2017      	movs	r0, #23
 800d07c:	f7f4 fe8f 	bl	8001d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800d080:	2017      	movs	r0, #23
 800d082:	f7f4 fea8 	bl	8001dd6 <HAL_NVIC_EnableIRQ>

}
 800d086:	bf00      	nop
 800d088:	3728      	adds	r7, #40	; 0x28
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}
 800d08e:	bf00      	nop
 800d090:	40023800 	.word	0x40023800
 800d094:	40020800 	.word	0x40020800
 800d098:	40020000 	.word	0x40020000

0800d09c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d09c:	b480      	push	{r7}
 800d09e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d0a0:	b672      	cpsid	i
}
 800d0a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800d0a4:	e7fe      	b.n	800d0a4 <Error_Handler+0x8>
	...

0800d0a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	b083      	sub	sp, #12
 800d0ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	607b      	str	r3, [r7, #4]
 800d0b2:	4b10      	ldr	r3, [pc, #64]	; (800d0f4 <HAL_MspInit+0x4c>)
 800d0b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0b6:	4a0f      	ldr	r2, [pc, #60]	; (800d0f4 <HAL_MspInit+0x4c>)
 800d0b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d0bc:	6453      	str	r3, [r2, #68]	; 0x44
 800d0be:	4b0d      	ldr	r3, [pc, #52]	; (800d0f4 <HAL_MspInit+0x4c>)
 800d0c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d0c6:	607b      	str	r3, [r7, #4]
 800d0c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	603b      	str	r3, [r7, #0]
 800d0ce:	4b09      	ldr	r3, [pc, #36]	; (800d0f4 <HAL_MspInit+0x4c>)
 800d0d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0d2:	4a08      	ldr	r2, [pc, #32]	; (800d0f4 <HAL_MspInit+0x4c>)
 800d0d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0d8:	6413      	str	r3, [r2, #64]	; 0x40
 800d0da:	4b06      	ldr	r3, [pc, #24]	; (800d0f4 <HAL_MspInit+0x4c>)
 800d0dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d0e2:	603b      	str	r3, [r7, #0]
 800d0e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d0e6:	bf00      	nop
 800d0e8:	370c      	adds	r7, #12
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f0:	4770      	bx	lr
 800d0f2:	bf00      	nop
 800d0f4:	40023800 	.word	0x40023800

0800d0f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b08a      	sub	sp, #40	; 0x28
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d100:	f107 0314 	add.w	r3, r7, #20
 800d104:	2200      	movs	r2, #0
 800d106:	601a      	str	r2, [r3, #0]
 800d108:	605a      	str	r2, [r3, #4]
 800d10a:	609a      	str	r2, [r3, #8]
 800d10c:	60da      	str	r2, [r3, #12]
 800d10e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	4a1b      	ldr	r2, [pc, #108]	; (800d184 <HAL_ADC_MspInit+0x8c>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d12f      	bne.n	800d17a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800d11a:	2300      	movs	r3, #0
 800d11c:	613b      	str	r3, [r7, #16]
 800d11e:	4b1a      	ldr	r3, [pc, #104]	; (800d188 <HAL_ADC_MspInit+0x90>)
 800d120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d122:	4a19      	ldr	r2, [pc, #100]	; (800d188 <HAL_ADC_MspInit+0x90>)
 800d124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d128:	6453      	str	r3, [r2, #68]	; 0x44
 800d12a:	4b17      	ldr	r3, [pc, #92]	; (800d188 <HAL_ADC_MspInit+0x90>)
 800d12c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d12e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d132:	613b      	str	r3, [r7, #16]
 800d134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d136:	2300      	movs	r3, #0
 800d138:	60fb      	str	r3, [r7, #12]
 800d13a:	4b13      	ldr	r3, [pc, #76]	; (800d188 <HAL_ADC_MspInit+0x90>)
 800d13c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d13e:	4a12      	ldr	r2, [pc, #72]	; (800d188 <HAL_ADC_MspInit+0x90>)
 800d140:	f043 0302 	orr.w	r3, r3, #2
 800d144:	6313      	str	r3, [r2, #48]	; 0x30
 800d146:	4b10      	ldr	r3, [pc, #64]	; (800d188 <HAL_ADC_MspInit+0x90>)
 800d148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d14a:	f003 0302 	and.w	r3, r3, #2
 800d14e:	60fb      	str	r3, [r7, #12]
 800d150:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800d152:	2301      	movs	r3, #1
 800d154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d156:	2303      	movs	r3, #3
 800d158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d15a:	2300      	movs	r3, #0
 800d15c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d15e:	f107 0314 	add.w	r3, r7, #20
 800d162:	4619      	mov	r1, r3
 800d164:	4809      	ldr	r0, [pc, #36]	; (800d18c <HAL_ADC_MspInit+0x94>)
 800d166:	f7f5 f96b 	bl	8002440 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800d16a:	2200      	movs	r2, #0
 800d16c:	2100      	movs	r1, #0
 800d16e:	2012      	movs	r0, #18
 800d170:	f7f4 fe15 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800d174:	2012      	movs	r0, #18
 800d176:	f7f4 fe2e 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800d17a:	bf00      	nop
 800d17c:	3728      	adds	r7, #40	; 0x28
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}
 800d182:	bf00      	nop
 800d184:	40012000 	.word	0x40012000
 800d188:	40023800 	.word	0x40023800
 800d18c:	40020400 	.word	0x40020400

0800d190 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b08c      	sub	sp, #48	; 0x30
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d198:	f107 031c 	add.w	r3, r7, #28
 800d19c:	2200      	movs	r2, #0
 800d19e:	601a      	str	r2, [r3, #0]
 800d1a0:	605a      	str	r2, [r3, #4]
 800d1a2:	609a      	str	r2, [r3, #8]
 800d1a4:	60da      	str	r2, [r3, #12]
 800d1a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4a59      	ldr	r2, [pc, #356]	; (800d314 <HAL_I2C_MspInit+0x184>)
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	d162      	bne.n	800d278 <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	61bb      	str	r3, [r7, #24]
 800d1b6:	4b58      	ldr	r3, [pc, #352]	; (800d318 <HAL_I2C_MspInit+0x188>)
 800d1b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1ba:	4a57      	ldr	r2, [pc, #348]	; (800d318 <HAL_I2C_MspInit+0x188>)
 800d1bc:	f043 0302 	orr.w	r3, r3, #2
 800d1c0:	6313      	str	r3, [r2, #48]	; 0x30
 800d1c2:	4b55      	ldr	r3, [pc, #340]	; (800d318 <HAL_I2C_MspInit+0x188>)
 800d1c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1c6:	f003 0302 	and.w	r3, r3, #2
 800d1ca:	61bb      	str	r3, [r7, #24]
 800d1cc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800d1ce:	23c0      	movs	r3, #192	; 0xc0
 800d1d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d1d2:	2312      	movs	r3, #18
 800d1d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d1da:	2303      	movs	r3, #3
 800d1dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800d1de:	2304      	movs	r3, #4
 800d1e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d1e2:	f107 031c 	add.w	r3, r7, #28
 800d1e6:	4619      	mov	r1, r3
 800d1e8:	484c      	ldr	r0, [pc, #304]	; (800d31c <HAL_I2C_MspInit+0x18c>)
 800d1ea:	f7f5 f929 	bl	8002440 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	617b      	str	r3, [r7, #20]
 800d1f2:	4b49      	ldr	r3, [pc, #292]	; (800d318 <HAL_I2C_MspInit+0x188>)
 800d1f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1f6:	4a48      	ldr	r2, [pc, #288]	; (800d318 <HAL_I2C_MspInit+0x188>)
 800d1f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d1fc:	6413      	str	r3, [r2, #64]	; 0x40
 800d1fe:	4b46      	ldr	r3, [pc, #280]	; (800d318 <HAL_I2C_MspInit+0x188>)
 800d200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d202:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d206:	617b      	str	r3, [r7, #20]
 800d208:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 800d20a:	4b45      	ldr	r3, [pc, #276]	; (800d320 <HAL_I2C_MspInit+0x190>)
 800d20c:	4a45      	ldr	r2, [pc, #276]	; (800d324 <HAL_I2C_MspInit+0x194>)
 800d20e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800d210:	4b43      	ldr	r3, [pc, #268]	; (800d320 <HAL_I2C_MspInit+0x190>)
 800d212:	2200      	movs	r2, #0
 800d214:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d216:	4b42      	ldr	r3, [pc, #264]	; (800d320 <HAL_I2C_MspInit+0x190>)
 800d218:	2240      	movs	r2, #64	; 0x40
 800d21a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d21c:	4b40      	ldr	r3, [pc, #256]	; (800d320 <HAL_I2C_MspInit+0x190>)
 800d21e:	2200      	movs	r2, #0
 800d220:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800d222:	4b3f      	ldr	r3, [pc, #252]	; (800d320 <HAL_I2C_MspInit+0x190>)
 800d224:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d228:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d22a:	4b3d      	ldr	r3, [pc, #244]	; (800d320 <HAL_I2C_MspInit+0x190>)
 800d22c:	2200      	movs	r2, #0
 800d22e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d230:	4b3b      	ldr	r3, [pc, #236]	; (800d320 <HAL_I2C_MspInit+0x190>)
 800d232:	2200      	movs	r2, #0
 800d234:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800d236:	4b3a      	ldr	r3, [pc, #232]	; (800d320 <HAL_I2C_MspInit+0x190>)
 800d238:	2200      	movs	r2, #0
 800d23a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800d23c:	4b38      	ldr	r3, [pc, #224]	; (800d320 <HAL_I2C_MspInit+0x190>)
 800d23e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800d242:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d244:	4b36      	ldr	r3, [pc, #216]	; (800d320 <HAL_I2C_MspInit+0x190>)
 800d246:	2200      	movs	r2, #0
 800d248:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800d24a:	4835      	ldr	r0, [pc, #212]	; (800d320 <HAL_I2C_MspInit+0x190>)
 800d24c:	f7f4 fdde 	bl	8001e0c <HAL_DMA_Init>
 800d250:	4603      	mov	r3, r0
 800d252:	2b00      	cmp	r3, #0
 800d254:	d001      	beq.n	800d25a <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 800d256:	f7ff ff21 	bl	800d09c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	4a30      	ldr	r2, [pc, #192]	; (800d320 <HAL_I2C_MspInit+0x190>)
 800d25e:	635a      	str	r2, [r3, #52]	; 0x34
 800d260:	4a2f      	ldr	r2, [pc, #188]	; (800d320 <HAL_I2C_MspInit+0x190>)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800d266:	2200      	movs	r2, #0
 800d268:	2100      	movs	r1, #0
 800d26a:	201f      	movs	r0, #31
 800d26c:	f7f4 fd97 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800d270:	201f      	movs	r0, #31
 800d272:	f7f4 fdb0 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800d276:	e049      	b.n	800d30c <HAL_I2C_MspInit+0x17c>
  else if(hi2c->Instance==I2C2)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4a2a      	ldr	r2, [pc, #168]	; (800d328 <HAL_I2C_MspInit+0x198>)
 800d27e:	4293      	cmp	r3, r2
 800d280:	d144      	bne.n	800d30c <HAL_I2C_MspInit+0x17c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d282:	2300      	movs	r3, #0
 800d284:	613b      	str	r3, [r7, #16]
 800d286:	4b24      	ldr	r3, [pc, #144]	; (800d318 <HAL_I2C_MspInit+0x188>)
 800d288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d28a:	4a23      	ldr	r2, [pc, #140]	; (800d318 <HAL_I2C_MspInit+0x188>)
 800d28c:	f043 0302 	orr.w	r3, r3, #2
 800d290:	6313      	str	r3, [r2, #48]	; 0x30
 800d292:	4b21      	ldr	r3, [pc, #132]	; (800d318 <HAL_I2C_MspInit+0x188>)
 800d294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d296:	f003 0302 	and.w	r3, r3, #2
 800d29a:	613b      	str	r3, [r7, #16]
 800d29c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800d29e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d2a4:	2312      	movs	r3, #18
 800d2a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d2ac:	2303      	movs	r3, #3
 800d2ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800d2b0:	2304      	movs	r3, #4
 800d2b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d2b4:	f107 031c 	add.w	r3, r7, #28
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	4818      	ldr	r0, [pc, #96]	; (800d31c <HAL_I2C_MspInit+0x18c>)
 800d2bc:	f7f5 f8c0 	bl	8002440 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800d2c0:	2308      	movs	r3, #8
 800d2c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d2c4:	2312      	movs	r3, #18
 800d2c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d2cc:	2303      	movs	r3, #3
 800d2ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800d2d0:	2309      	movs	r3, #9
 800d2d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d2d4:	f107 031c 	add.w	r3, r7, #28
 800d2d8:	4619      	mov	r1, r3
 800d2da:	4810      	ldr	r0, [pc, #64]	; (800d31c <HAL_I2C_MspInit+0x18c>)
 800d2dc:	f7f5 f8b0 	bl	8002440 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	60fb      	str	r3, [r7, #12]
 800d2e4:	4b0c      	ldr	r3, [pc, #48]	; (800d318 <HAL_I2C_MspInit+0x188>)
 800d2e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2e8:	4a0b      	ldr	r2, [pc, #44]	; (800d318 <HAL_I2C_MspInit+0x188>)
 800d2ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d2ee:	6413      	str	r3, [r2, #64]	; 0x40
 800d2f0:	4b09      	ldr	r3, [pc, #36]	; (800d318 <HAL_I2C_MspInit+0x188>)
 800d2f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d2f8:	60fb      	str	r3, [r7, #12]
 800d2fa:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	2100      	movs	r1, #0
 800d300:	2021      	movs	r0, #33	; 0x21
 800d302:	f7f4 fd4c 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800d306:	2021      	movs	r0, #33	; 0x21
 800d308:	f7f4 fd65 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
}
 800d30c:	bf00      	nop
 800d30e:	3730      	adds	r7, #48	; 0x30
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}
 800d314:	40005400 	.word	0x40005400
 800d318:	40023800 	.word	0x40023800
 800d31c:	40020400 	.word	0x40020400
 800d320:	20000aa8 	.word	0x20000aa8
 800d324:	40026028 	.word	0x40026028
 800d328:	40005800 	.word	0x40005800

0800d32c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b088      	sub	sp, #32
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d334:	f107 0308 	add.w	r3, r7, #8
 800d338:	2200      	movs	r2, #0
 800d33a:	601a      	str	r2, [r3, #0]
 800d33c:	605a      	str	r2, [r3, #4]
 800d33e:	609a      	str	r2, [r3, #8]
 800d340:	60da      	str	r2, [r3, #12]
 800d342:	611a      	str	r2, [r3, #16]
 800d344:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	4a0c      	ldr	r2, [pc, #48]	; (800d37c <HAL_RTC_MspInit+0x50>)
 800d34c:	4293      	cmp	r3, r2
 800d34e:	d111      	bne.n	800d374 <HAL_RTC_MspInit+0x48>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800d350:	2302      	movs	r3, #2
 800d352:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800d354:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d358:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d35a:	f107 0308 	add.w	r3, r7, #8
 800d35e:	4618      	mov	r0, r3
 800d360:	f7f8 fe06 	bl	8005f70 <HAL_RCCEx_PeriphCLKConfig>
 800d364:	4603      	mov	r3, r0
 800d366:	2b00      	cmp	r3, #0
 800d368:	d001      	beq.n	800d36e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800d36a:	f7ff fe97 	bl	800d09c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800d36e:	4b04      	ldr	r3, [pc, #16]	; (800d380 <HAL_RTC_MspInit+0x54>)
 800d370:	2201      	movs	r2, #1
 800d372:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800d374:	bf00      	nop
 800d376:	3720      	adds	r7, #32
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	40002800 	.word	0x40002800
 800d380:	42470e3c 	.word	0x42470e3c

0800d384 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b08c      	sub	sp, #48	; 0x30
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d38c:	f107 031c 	add.w	r3, r7, #28
 800d390:	2200      	movs	r2, #0
 800d392:	601a      	str	r2, [r3, #0]
 800d394:	605a      	str	r2, [r3, #4]
 800d396:	609a      	str	r2, [r3, #8]
 800d398:	60da      	str	r2, [r3, #12]
 800d39a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	4a38      	ldr	r2, [pc, #224]	; (800d484 <HAL_SD_MspInit+0x100>)
 800d3a2:	4293      	cmp	r3, r2
 800d3a4:	d169      	bne.n	800d47a <HAL_SD_MspInit+0xf6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	61bb      	str	r3, [r7, #24]
 800d3aa:	4b37      	ldr	r3, [pc, #220]	; (800d488 <HAL_SD_MspInit+0x104>)
 800d3ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3ae:	4a36      	ldr	r2, [pc, #216]	; (800d488 <HAL_SD_MspInit+0x104>)
 800d3b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d3b4:	6453      	str	r3, [r2, #68]	; 0x44
 800d3b6:	4b34      	ldr	r3, [pc, #208]	; (800d488 <HAL_SD_MspInit+0x104>)
 800d3b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d3be:	61bb      	str	r3, [r7, #24]
 800d3c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	617b      	str	r3, [r7, #20]
 800d3c6:	4b30      	ldr	r3, [pc, #192]	; (800d488 <HAL_SD_MspInit+0x104>)
 800d3c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3ca:	4a2f      	ldr	r2, [pc, #188]	; (800d488 <HAL_SD_MspInit+0x104>)
 800d3cc:	f043 0301 	orr.w	r3, r3, #1
 800d3d0:	6313      	str	r3, [r2, #48]	; 0x30
 800d3d2:	4b2d      	ldr	r3, [pc, #180]	; (800d488 <HAL_SD_MspInit+0x104>)
 800d3d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3d6:	f003 0301 	and.w	r3, r3, #1
 800d3da:	617b      	str	r3, [r7, #20]
 800d3dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d3de:	2300      	movs	r3, #0
 800d3e0:	613b      	str	r3, [r7, #16]
 800d3e2:	4b29      	ldr	r3, [pc, #164]	; (800d488 <HAL_SD_MspInit+0x104>)
 800d3e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3e6:	4a28      	ldr	r2, [pc, #160]	; (800d488 <HAL_SD_MspInit+0x104>)
 800d3e8:	f043 0302 	orr.w	r3, r3, #2
 800d3ec:	6313      	str	r3, [r2, #48]	; 0x30
 800d3ee:	4b26      	ldr	r3, [pc, #152]	; (800d488 <HAL_SD_MspInit+0x104>)
 800d3f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3f2:	f003 0302 	and.w	r3, r3, #2
 800d3f6:	613b      	str	r3, [r7, #16]
 800d3f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	60fb      	str	r3, [r7, #12]
 800d3fe:	4b22      	ldr	r3, [pc, #136]	; (800d488 <HAL_SD_MspInit+0x104>)
 800d400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d402:	4a21      	ldr	r2, [pc, #132]	; (800d488 <HAL_SD_MspInit+0x104>)
 800d404:	f043 0304 	orr.w	r3, r3, #4
 800d408:	6313      	str	r3, [r2, #48]	; 0x30
 800d40a:	4b1f      	ldr	r3, [pc, #124]	; (800d488 <HAL_SD_MspInit+0x104>)
 800d40c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d40e:	f003 0304 	and.w	r3, r3, #4
 800d412:	60fb      	str	r3, [r7, #12]
 800d414:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800d416:	2340      	movs	r3, #64	; 0x40
 800d418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d41a:	2302      	movs	r3, #2
 800d41c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d41e:	2300      	movs	r3, #0
 800d420:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d422:	2303      	movs	r3, #3
 800d424:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800d426:	230c      	movs	r3, #12
 800d428:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d42a:	f107 031c 	add.w	r3, r7, #28
 800d42e:	4619      	mov	r1, r3
 800d430:	4816      	ldr	r0, [pc, #88]	; (800d48c <HAL_SD_MspInit+0x108>)
 800d432:	f7f5 f805 	bl	8002440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800d436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d43a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d43c:	2302      	movs	r3, #2
 800d43e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d440:	2300      	movs	r3, #0
 800d442:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d444:	2303      	movs	r3, #3
 800d446:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800d448:	230c      	movs	r3, #12
 800d44a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d44c:	f107 031c 	add.w	r3, r7, #28
 800d450:	4619      	mov	r1, r3
 800d452:	480f      	ldr	r0, [pc, #60]	; (800d490 <HAL_SD_MspInit+0x10c>)
 800d454:	f7f4 fff4 	bl	8002440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800d458:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800d45c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d45e:	2302      	movs	r3, #2
 800d460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d462:	2300      	movs	r3, #0
 800d464:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d466:	2303      	movs	r3, #3
 800d468:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800d46a:	230c      	movs	r3, #12
 800d46c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d46e:	f107 031c 	add.w	r3, r7, #28
 800d472:	4619      	mov	r1, r3
 800d474:	4807      	ldr	r0, [pc, #28]	; (800d494 <HAL_SD_MspInit+0x110>)
 800d476:	f7f4 ffe3 	bl	8002440 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800d47a:	bf00      	nop
 800d47c:	3730      	adds	r7, #48	; 0x30
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}
 800d482:	bf00      	nop
 800d484:	40012c00 	.word	0x40012c00
 800d488:	40023800 	.word	0x40023800
 800d48c:	40020000 	.word	0x40020000
 800d490:	40020400 	.word	0x40020400
 800d494:	40020800 	.word	0x40020800

0800d498 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b084      	sub	sp, #16
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4a8:	d115      	bne.n	800d4d6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	60fb      	str	r3, [r7, #12]
 800d4ae:	4b0c      	ldr	r3, [pc, #48]	; (800d4e0 <HAL_TIM_Base_MspInit+0x48>)
 800d4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4b2:	4a0b      	ldr	r2, [pc, #44]	; (800d4e0 <HAL_TIM_Base_MspInit+0x48>)
 800d4b4:	f043 0301 	orr.w	r3, r3, #1
 800d4b8:	6413      	str	r3, [r2, #64]	; 0x40
 800d4ba:	4b09      	ldr	r3, [pc, #36]	; (800d4e0 <HAL_TIM_Base_MspInit+0x48>)
 800d4bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4be:	f003 0301 	and.w	r3, r3, #1
 800d4c2:	60fb      	str	r3, [r7, #12]
 800d4c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	2100      	movs	r1, #0
 800d4ca:	201c      	movs	r0, #28
 800d4cc:	f7f4 fc67 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800d4d0:	201c      	movs	r0, #28
 800d4d2:	f7f4 fc80 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800d4d6:	bf00      	nop
 800d4d8:	3710      	adds	r7, #16
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}
 800d4de:	bf00      	nop
 800d4e0:	40023800 	.word	0x40023800

0800d4e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b08a      	sub	sp, #40	; 0x28
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d4ec:	f107 0314 	add.w	r3, r7, #20
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	601a      	str	r2, [r3, #0]
 800d4f4:	605a      	str	r2, [r3, #4]
 800d4f6:	609a      	str	r2, [r3, #8]
 800d4f8:	60da      	str	r2, [r3, #12]
 800d4fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	4a19      	ldr	r2, [pc, #100]	; (800d568 <HAL_UART_MspInit+0x84>)
 800d502:	4293      	cmp	r3, r2
 800d504:	d12c      	bne.n	800d560 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800d506:	2300      	movs	r3, #0
 800d508:	613b      	str	r3, [r7, #16]
 800d50a:	4b18      	ldr	r3, [pc, #96]	; (800d56c <HAL_UART_MspInit+0x88>)
 800d50c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d50e:	4a17      	ldr	r2, [pc, #92]	; (800d56c <HAL_UART_MspInit+0x88>)
 800d510:	f043 0310 	orr.w	r3, r3, #16
 800d514:	6453      	str	r3, [r2, #68]	; 0x44
 800d516:	4b15      	ldr	r3, [pc, #84]	; (800d56c <HAL_UART_MspInit+0x88>)
 800d518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d51a:	f003 0310 	and.w	r3, r3, #16
 800d51e:	613b      	str	r3, [r7, #16]
 800d520:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d522:	2300      	movs	r3, #0
 800d524:	60fb      	str	r3, [r7, #12]
 800d526:	4b11      	ldr	r3, [pc, #68]	; (800d56c <HAL_UART_MspInit+0x88>)
 800d528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d52a:	4a10      	ldr	r2, [pc, #64]	; (800d56c <HAL_UART_MspInit+0x88>)
 800d52c:	f043 0301 	orr.w	r3, r3, #1
 800d530:	6313      	str	r3, [r2, #48]	; 0x30
 800d532:	4b0e      	ldr	r3, [pc, #56]	; (800d56c <HAL_UART_MspInit+0x88>)
 800d534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d536:	f003 0301 	and.w	r3, r3, #1
 800d53a:	60fb      	str	r3, [r7, #12]
 800d53c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800d53e:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800d542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d544:	2302      	movs	r3, #2
 800d546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d548:	2300      	movs	r3, #0
 800d54a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d54c:	2303      	movs	r3, #3
 800d54e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800d550:	2307      	movs	r3, #7
 800d552:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d554:	f107 0314 	add.w	r3, r7, #20
 800d558:	4619      	mov	r1, r3
 800d55a:	4805      	ldr	r0, [pc, #20]	; (800d570 <HAL_UART_MspInit+0x8c>)
 800d55c:	f7f4 ff70 	bl	8002440 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800d560:	bf00      	nop
 800d562:	3728      	adds	r7, #40	; 0x28
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}
 800d568:	40011000 	.word	0x40011000
 800d56c:	40023800 	.word	0x40023800
 800d570:	40020000 	.word	0x40020000

0800d574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800d578:	f7f8 fcde 	bl	8005f38 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800d57c:	e7fe      	b.n	800d57c <NMI_Handler+0x8>

0800d57e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d57e:	b480      	push	{r7}
 800d580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d582:	e7fe      	b.n	800d582 <HardFault_Handler+0x4>

0800d584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d584:	b480      	push	{r7}
 800d586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d588:	e7fe      	b.n	800d588 <MemManage_Handler+0x4>

0800d58a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d58a:	b480      	push	{r7}
 800d58c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d58e:	e7fe      	b.n	800d58e <BusFault_Handler+0x4>

0800d590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d590:	b480      	push	{r7}
 800d592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d594:	e7fe      	b.n	800d594 <UsageFault_Handler+0x4>

0800d596 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d596:	b480      	push	{r7}
 800d598:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800d59a:	bf00      	nop
 800d59c:	46bd      	mov	sp, r7
 800d59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a2:	4770      	bx	lr

0800d5a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d5a8:	bf00      	nop
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b0:	4770      	bx	lr

0800d5b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d5b2:	b480      	push	{r7}
 800d5b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d5b6:	bf00      	nop
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5be:	4770      	bx	lr

0800d5c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
    AsynchronousTaskTimerUpdate();
 800d5c4:	f7fe fb5c 	bl	800bc80 <AsynchronousTaskTimerUpdate>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d5c8:	f7f3 fe24 	bl	8001214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d5cc:	bf00      	nop
 800d5ce:	bd80      	pop	{r7, pc}

0800d5d0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800d5d4:	4802      	ldr	r0, [pc, #8]	; (800d5e0 <DMA1_Stream1_IRQHandler+0x10>)
 800d5d6:	f7f4 fce9 	bl	8001fac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800d5da:	bf00      	nop
 800d5dc:	bd80      	pop	{r7, pc}
 800d5de:	bf00      	nop
 800d5e0:	20000aa8 	.word	0x20000aa8

0800d5e4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b082      	sub	sp, #8
 800d5e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */
	uint32_t u32Result;

	u32Result = HAL_ADC_GetValue(&hadc1);
 800d5ea:	4807      	ldr	r0, [pc, #28]	; (800d608 <ADC_IRQHandler+0x24>)
 800d5ec:	f7f4 f899 	bl	8001722 <HAL_ADC_GetValue>
 800d5f0:	6078      	str	r0, [r7, #4]

	USB_SignalizeVBUSMeasurementReady(u32Result);
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f7ff fa0c 	bl	800ca10 <USB_SignalizeVBUSMeasurementReady>

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800d5f8:	4803      	ldr	r0, [pc, #12]	; (800d608 <ADC_IRQHandler+0x24>)
 800d5fa:	f7f3 ff51 	bl	80014a0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800d5fe:	bf00      	nop
 800d600:	3708      	adds	r7, #8
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}
 800d606:	bf00      	nop
 800d608:	20000bb0 	.word	0x20000bb0

0800d60c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_SET)
 800d610:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d614:	4804      	ldr	r0, [pc, #16]	; (800d628 <EXTI9_5_IRQHandler+0x1c>)
 800d616:	f7f5 f897 	bl	8002748 <HAL_GPIO_ReadPin>
	else
	{
//		CommManager_SetUSBConnectionState(USB_Disconnected);
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800d61a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d61e:	f7f5 f8df 	bl	80027e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800d622:	bf00      	nop
 800d624:	bd80      	pop	{r7, pc}
 800d626:	bf00      	nop
 800d628:	40020000 	.word	0x40020000

0800d62c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800d630:	4803      	ldr	r0, [pc, #12]	; (800d640 <TIM2_IRQHandler+0x14>)
 800d632:	f7f9 feae 	bl	8007392 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  TempCollect_ScheduleMeasurement();
 800d636:	f7fe fffd 	bl	800c634 <TempCollect_ScheduleMeasurement>

  /* USER CODE END TIM2_IRQn 1 */
}
 800d63a:	bf00      	nop
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop
 800d640:	20000ce0 	.word	0x20000ce0

0800d644 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

//	TempCollect_I2CA_Done();

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800d648:	4802      	ldr	r0, [pc, #8]	; (800d654 <I2C1_EV_IRQHandler+0x10>)
 800d64a:	f7f5 faef 	bl	8002c2c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800d64e:	bf00      	nop
 800d650:	bd80      	pop	{r7, pc}
 800d652:	bf00      	nop
 800d654:	20000b08 	.word	0x20000b08

0800d658 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */
//	TempCollect_I2CB_Done();

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800d65c:	4802      	ldr	r0, [pc, #8]	; (800d668 <I2C2_EV_IRQHandler+0x10>)
 800d65e:	f7f5 fae5 	bl	8002c2c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800d662:	bf00      	nop
 800d664:	bd80      	pop	{r7, pc}
 800d666:	bf00      	nop
 800d668:	20000b5c 	.word	0x20000b5c

0800d66c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800d670:	4802      	ldr	r0, [pc, #8]	; (800d67c <OTG_FS_IRQHandler+0x10>)
 800d672:	f7f6 ffdc 	bl	800462e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800d676:	bf00      	nop
 800d678:	bd80      	pop	{r7, pc}
 800d67a:	bf00      	nop
 800d67c:	20001ff8 	.word	0x20001ff8

0800d680 <HAL_I2C_MemRxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b082      	sub	sp, #8
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1)
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	4a0a      	ldr	r2, [pc, #40]	; (800d6b4 <HAL_I2C_MemRxCpltCallback+0x34>)
 800d68c:	4293      	cmp	r3, r2
 800d68e:	d102      	bne.n	800d696 <HAL_I2C_MemRxCpltCallback+0x16>
	{
		TempCollect_I2CA_Done();
 800d690:	f7fe ffe4 	bl	800c65c <TempCollect_I2CA_Done>
	}
	else
	{
		AssertError(AppError_UndefinedError);
	}
}
 800d694:	e009      	b.n	800d6aa <HAL_I2C_MemRxCpltCallback+0x2a>
	else if ( hi2c == &hi2c2)
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	4a07      	ldr	r2, [pc, #28]	; (800d6b8 <HAL_I2C_MemRxCpltCallback+0x38>)
 800d69a:	4293      	cmp	r3, r2
 800d69c:	d102      	bne.n	800d6a4 <HAL_I2C_MemRxCpltCallback+0x24>
		TempCollect_I2CB_Done();
 800d69e:	f7fe ffe9 	bl	800c674 <TempCollect_I2CB_Done>
}
 800d6a2:	e002      	b.n	800d6aa <HAL_I2C_MemRxCpltCallback+0x2a>
		AssertError(AppError_UndefinedError);
 800d6a4:	2008      	movs	r0, #8
 800d6a6:	f7fe fbf1 	bl	800be8c <AssertError>
}
 800d6aa:	bf00      	nop
 800d6ac:	3708      	adds	r7, #8
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}
 800d6b2:	bf00      	nop
 800d6b4:	20000b08 	.word	0x20000b08
 800d6b8:	20000b5c 	.word	0x20000b5c

0800d6bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d6bc:	b480      	push	{r7}
 800d6be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d6c0:	4b06      	ldr	r3, [pc, #24]	; (800d6dc <SystemInit+0x20>)
 800d6c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6c6:	4a05      	ldr	r2, [pc, #20]	; (800d6dc <SystemInit+0x20>)
 800d6c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d6cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800d6d0:	bf00      	nop
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d8:	4770      	bx	lr
 800d6da:	bf00      	nop
 800d6dc:	e000ed00 	.word	0xe000ed00

0800d6e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	4912      	ldr	r1, [pc, #72]	; (800d730 <MX_USB_DEVICE_Init+0x50>)
 800d6e8:	4812      	ldr	r0, [pc, #72]	; (800d734 <MX_USB_DEVICE_Init+0x54>)
 800d6ea:	f7fd f927 	bl	800a93c <USBD_Init>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d001      	beq.n	800d6f8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d6f4:	f7ff fcd2 	bl	800d09c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d6f8:	490f      	ldr	r1, [pc, #60]	; (800d738 <MX_USB_DEVICE_Init+0x58>)
 800d6fa:	480e      	ldr	r0, [pc, #56]	; (800d734 <MX_USB_DEVICE_Init+0x54>)
 800d6fc:	f7fd f94e 	bl	800a99c <USBD_RegisterClass>
 800d700:	4603      	mov	r3, r0
 800d702:	2b00      	cmp	r3, #0
 800d704:	d001      	beq.n	800d70a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d706:	f7ff fcc9 	bl	800d09c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d70a:	490c      	ldr	r1, [pc, #48]	; (800d73c <MX_USB_DEVICE_Init+0x5c>)
 800d70c:	4809      	ldr	r0, [pc, #36]	; (800d734 <MX_USB_DEVICE_Init+0x54>)
 800d70e:	f7fd f86f 	bl	800a7f0 <USBD_CDC_RegisterInterface>
 800d712:	4603      	mov	r3, r0
 800d714:	2b00      	cmp	r3, #0
 800d716:	d001      	beq.n	800d71c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d718:	f7ff fcc0 	bl	800d09c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d71c:	4805      	ldr	r0, [pc, #20]	; (800d734 <MX_USB_DEVICE_Init+0x54>)
 800d71e:	f7fd f964 	bl	800a9ea <USBD_Start>
 800d722:	4603      	mov	r3, r0
 800d724:	2b00      	cmp	r3, #0
 800d726:	d001      	beq.n	800d72c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d728:	f7ff fcb8 	bl	800d09c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d72c:	bf00      	nop
 800d72e:	bd80      	pop	{r7, pc}
 800d730:	20000130 	.word	0x20000130
 800d734:	20000d28 	.word	0x20000d28
 800d738:	20000014 	.word	0x20000014
 800d73c:	2000011c 	.word	0x2000011c

0800d740 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d744:	2200      	movs	r2, #0
 800d746:	4905      	ldr	r1, [pc, #20]	; (800d75c <CDC_Init_FS+0x1c>)
 800d748:	4805      	ldr	r0, [pc, #20]	; (800d760 <CDC_Init_FS+0x20>)
 800d74a:	f7fd f866 	bl	800a81a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d74e:	4905      	ldr	r1, [pc, #20]	; (800d764 <CDC_Init_FS+0x24>)
 800d750:	4803      	ldr	r0, [pc, #12]	; (800d760 <CDC_Init_FS+0x20>)
 800d752:	f7fd f880 	bl	800a856 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d756:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d758:	4618      	mov	r0, r3
 800d75a:	bd80      	pop	{r7, pc}
 800d75c:	200017f8 	.word	0x200017f8
 800d760:	20000d28 	.word	0x20000d28
 800d764:	20000ff8 	.word	0x20000ff8

0800d768 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d768:	b480      	push	{r7}
 800d76a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d76c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d76e:	4618      	mov	r0, r3
 800d770:	46bd      	mov	sp, r7
 800d772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d776:	4770      	bx	lr

0800d778 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d778:	b480      	push	{r7}
 800d77a:	b083      	sub	sp, #12
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	4603      	mov	r3, r0
 800d780:	6039      	str	r1, [r7, #0]
 800d782:	71fb      	strb	r3, [r7, #7]
 800d784:	4613      	mov	r3, r2
 800d786:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d788:	79fb      	ldrb	r3, [r7, #7]
 800d78a:	2b23      	cmp	r3, #35	; 0x23
 800d78c:	d84a      	bhi.n	800d824 <CDC_Control_FS+0xac>
 800d78e:	a201      	add	r2, pc, #4	; (adr r2, 800d794 <CDC_Control_FS+0x1c>)
 800d790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d794:	0800d825 	.word	0x0800d825
 800d798:	0800d825 	.word	0x0800d825
 800d79c:	0800d825 	.word	0x0800d825
 800d7a0:	0800d825 	.word	0x0800d825
 800d7a4:	0800d825 	.word	0x0800d825
 800d7a8:	0800d825 	.word	0x0800d825
 800d7ac:	0800d825 	.word	0x0800d825
 800d7b0:	0800d825 	.word	0x0800d825
 800d7b4:	0800d825 	.word	0x0800d825
 800d7b8:	0800d825 	.word	0x0800d825
 800d7bc:	0800d825 	.word	0x0800d825
 800d7c0:	0800d825 	.word	0x0800d825
 800d7c4:	0800d825 	.word	0x0800d825
 800d7c8:	0800d825 	.word	0x0800d825
 800d7cc:	0800d825 	.word	0x0800d825
 800d7d0:	0800d825 	.word	0x0800d825
 800d7d4:	0800d825 	.word	0x0800d825
 800d7d8:	0800d825 	.word	0x0800d825
 800d7dc:	0800d825 	.word	0x0800d825
 800d7e0:	0800d825 	.word	0x0800d825
 800d7e4:	0800d825 	.word	0x0800d825
 800d7e8:	0800d825 	.word	0x0800d825
 800d7ec:	0800d825 	.word	0x0800d825
 800d7f0:	0800d825 	.word	0x0800d825
 800d7f4:	0800d825 	.word	0x0800d825
 800d7f8:	0800d825 	.word	0x0800d825
 800d7fc:	0800d825 	.word	0x0800d825
 800d800:	0800d825 	.word	0x0800d825
 800d804:	0800d825 	.word	0x0800d825
 800d808:	0800d825 	.word	0x0800d825
 800d80c:	0800d825 	.word	0x0800d825
 800d810:	0800d825 	.word	0x0800d825
 800d814:	0800d825 	.word	0x0800d825
 800d818:	0800d825 	.word	0x0800d825
 800d81c:	0800d825 	.word	0x0800d825
 800d820:	0800d825 	.word	0x0800d825
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d824:	bf00      	nop
  }

  return (USBD_OK);
 800d826:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d828:	4618      	mov	r0, r3
 800d82a:	370c      	adds	r7, #12
 800d82c:	46bd      	mov	sp, r7
 800d82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d832:	4770      	bx	lr

0800d834 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b082      	sub	sp, #8
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d83e:	6879      	ldr	r1, [r7, #4]
 800d840:	4805      	ldr	r0, [pc, #20]	; (800d858 <CDC_Receive_FS+0x24>)
 800d842:	f7fd f808 	bl	800a856 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d846:	4804      	ldr	r0, [pc, #16]	; (800d858 <CDC_Receive_FS+0x24>)
 800d848:	f7fd f84e 	bl	800a8e8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d84c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d84e:	4618      	mov	r0, r3
 800d850:	3708      	adds	r7, #8
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}
 800d856:	bf00      	nop
 800d858:	20000d28 	.word	0x20000d28

0800d85c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b084      	sub	sp, #16
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
 800d864:	460b      	mov	r3, r1
 800d866:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d868:	2300      	movs	r3, #0
 800d86a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d86c:	4b0d      	ldr	r3, [pc, #52]	; (800d8a4 <CDC_Transmit_FS+0x48>)
 800d86e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d872:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d001      	beq.n	800d882 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d87e:	2301      	movs	r3, #1
 800d880:	e00b      	b.n	800d89a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d882:	887b      	ldrh	r3, [r7, #2]
 800d884:	461a      	mov	r2, r3
 800d886:	6879      	ldr	r1, [r7, #4]
 800d888:	4806      	ldr	r0, [pc, #24]	; (800d8a4 <CDC_Transmit_FS+0x48>)
 800d88a:	f7fc ffc6 	bl	800a81a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d88e:	4805      	ldr	r0, [pc, #20]	; (800d8a4 <CDC_Transmit_FS+0x48>)
 800d890:	f7fc fffa 	bl	800a888 <USBD_CDC_TransmitPacket>
 800d894:	4603      	mov	r3, r0
 800d896:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d898:	7bfb      	ldrb	r3, [r7, #15]
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3710      	adds	r7, #16
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}
 800d8a2:	bf00      	nop
 800d8a4:	20000d28 	.word	0x20000d28

0800d8a8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b087      	sub	sp, #28
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	60f8      	str	r0, [r7, #12]
 800d8b0:	60b9      	str	r1, [r7, #8]
 800d8b2:	4613      	mov	r3, r2
 800d8b4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d8ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	371c      	adds	r7, #28
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c8:	4770      	bx	lr
	...

0800d8cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b08a      	sub	sp, #40	; 0x28
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d8d4:	f107 0314 	add.w	r3, r7, #20
 800d8d8:	2200      	movs	r2, #0
 800d8da:	601a      	str	r2, [r3, #0]
 800d8dc:	605a      	str	r2, [r3, #4]
 800d8de:	609a      	str	r2, [r3, #8]
 800d8e0:	60da      	str	r2, [r3, #12]
 800d8e2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d8ec:	d13a      	bne.n	800d964 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	613b      	str	r3, [r7, #16]
 800d8f2:	4b1e      	ldr	r3, [pc, #120]	; (800d96c <HAL_PCD_MspInit+0xa0>)
 800d8f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8f6:	4a1d      	ldr	r2, [pc, #116]	; (800d96c <HAL_PCD_MspInit+0xa0>)
 800d8f8:	f043 0301 	orr.w	r3, r3, #1
 800d8fc:	6313      	str	r3, [r2, #48]	; 0x30
 800d8fe:	4b1b      	ldr	r3, [pc, #108]	; (800d96c <HAL_PCD_MspInit+0xa0>)
 800d900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d902:	f003 0301 	and.w	r3, r3, #1
 800d906:	613b      	str	r3, [r7, #16]
 800d908:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d90a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d90e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d910:	2302      	movs	r3, #2
 800d912:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d914:	2300      	movs	r3, #0
 800d916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d918:	2303      	movs	r3, #3
 800d91a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d91c:	230a      	movs	r3, #10
 800d91e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d920:	f107 0314 	add.w	r3, r7, #20
 800d924:	4619      	mov	r1, r3
 800d926:	4812      	ldr	r0, [pc, #72]	; (800d970 <HAL_PCD_MspInit+0xa4>)
 800d928:	f7f4 fd8a 	bl	8002440 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d92c:	4b0f      	ldr	r3, [pc, #60]	; (800d96c <HAL_PCD_MspInit+0xa0>)
 800d92e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d930:	4a0e      	ldr	r2, [pc, #56]	; (800d96c <HAL_PCD_MspInit+0xa0>)
 800d932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d936:	6353      	str	r3, [r2, #52]	; 0x34
 800d938:	2300      	movs	r3, #0
 800d93a:	60fb      	str	r3, [r7, #12]
 800d93c:	4b0b      	ldr	r3, [pc, #44]	; (800d96c <HAL_PCD_MspInit+0xa0>)
 800d93e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d940:	4a0a      	ldr	r2, [pc, #40]	; (800d96c <HAL_PCD_MspInit+0xa0>)
 800d942:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d946:	6453      	str	r3, [r2, #68]	; 0x44
 800d948:	4b08      	ldr	r3, [pc, #32]	; (800d96c <HAL_PCD_MspInit+0xa0>)
 800d94a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d94c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d950:	60fb      	str	r3, [r7, #12]
 800d952:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d954:	2200      	movs	r2, #0
 800d956:	2100      	movs	r1, #0
 800d958:	2043      	movs	r0, #67	; 0x43
 800d95a:	f7f4 fa20 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d95e:	2043      	movs	r0, #67	; 0x43
 800d960:	f7f4 fa39 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d964:	bf00      	nop
 800d966:	3728      	adds	r7, #40	; 0x28
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}
 800d96c:	40023800 	.word	0x40023800
 800d970:	40020000 	.word	0x40020000

0800d974 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b082      	sub	sp, #8
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d988:	4619      	mov	r1, r3
 800d98a:	4610      	mov	r0, r2
 800d98c:	f7fd f878 	bl	800aa80 <USBD_LL_SetupStage>
}
 800d990:	bf00      	nop
 800d992:	3708      	adds	r7, #8
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}

0800d998 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b082      	sub	sp, #8
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
 800d9a0:	460b      	mov	r3, r1
 800d9a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d9aa:	78fa      	ldrb	r2, [r7, #3]
 800d9ac:	6879      	ldr	r1, [r7, #4]
 800d9ae:	4613      	mov	r3, r2
 800d9b0:	00db      	lsls	r3, r3, #3
 800d9b2:	1a9b      	subs	r3, r3, r2
 800d9b4:	009b      	lsls	r3, r3, #2
 800d9b6:	440b      	add	r3, r1
 800d9b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d9bc:	681a      	ldr	r2, [r3, #0]
 800d9be:	78fb      	ldrb	r3, [r7, #3]
 800d9c0:	4619      	mov	r1, r3
 800d9c2:	f7fd f8b2 	bl	800ab2a <USBD_LL_DataOutStage>
}
 800d9c6:	bf00      	nop
 800d9c8:	3708      	adds	r7, #8
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}

0800d9ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9ce:	b580      	push	{r7, lr}
 800d9d0:	b082      	sub	sp, #8
 800d9d2:	af00      	add	r7, sp, #0
 800d9d4:	6078      	str	r0, [r7, #4]
 800d9d6:	460b      	mov	r3, r1
 800d9d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d9e0:	78fa      	ldrb	r2, [r7, #3]
 800d9e2:	6879      	ldr	r1, [r7, #4]
 800d9e4:	4613      	mov	r3, r2
 800d9e6:	00db      	lsls	r3, r3, #3
 800d9e8:	1a9b      	subs	r3, r3, r2
 800d9ea:	009b      	lsls	r3, r3, #2
 800d9ec:	440b      	add	r3, r1
 800d9ee:	3348      	adds	r3, #72	; 0x48
 800d9f0:	681a      	ldr	r2, [r3, #0]
 800d9f2:	78fb      	ldrb	r3, [r7, #3]
 800d9f4:	4619      	mov	r1, r3
 800d9f6:	f7fd f8fb 	bl	800abf0 <USBD_LL_DataInStage>
}
 800d9fa:	bf00      	nop
 800d9fc:	3708      	adds	r7, #8
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}

0800da02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da02:	b580      	push	{r7, lr}
 800da04:	b082      	sub	sp, #8
 800da06:	af00      	add	r7, sp, #0
 800da08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800da10:	4618      	mov	r0, r3
 800da12:	f7fd fa0f 	bl	800ae34 <USBD_LL_SOF>
}
 800da16:	bf00      	nop
 800da18:	3708      	adds	r7, #8
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}

0800da1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da1e:	b580      	push	{r7, lr}
 800da20:	b084      	sub	sp, #16
 800da22:	af00      	add	r7, sp, #0
 800da24:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800da26:	2301      	movs	r3, #1
 800da28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	68db      	ldr	r3, [r3, #12]
 800da2e:	2b02      	cmp	r3, #2
 800da30:	d001      	beq.n	800da36 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800da32:	f7ff fb33 	bl	800d09c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800da3c:	7bfa      	ldrb	r2, [r7, #15]
 800da3e:	4611      	mov	r1, r2
 800da40:	4618      	mov	r0, r3
 800da42:	f7fd f9b9 	bl	800adb8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800da4c:	4618      	mov	r0, r3
 800da4e:	f7fd f965 	bl	800ad1c <USBD_LL_Reset>
}
 800da52:	bf00      	nop
 800da54:	3710      	adds	r7, #16
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}
	...

0800da5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b082      	sub	sp, #8
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800da6a:	4618      	mov	r0, r3
 800da6c:	f7fd f9b4 	bl	800add8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	687a      	ldr	r2, [r7, #4]
 800da7c:	6812      	ldr	r2, [r2, #0]
 800da7e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800da82:	f043 0301 	orr.w	r3, r3, #1
 800da86:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	6a1b      	ldr	r3, [r3, #32]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d005      	beq.n	800da9c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800da90:	4b04      	ldr	r3, [pc, #16]	; (800daa4 <HAL_PCD_SuspendCallback+0x48>)
 800da92:	691b      	ldr	r3, [r3, #16]
 800da94:	4a03      	ldr	r2, [pc, #12]	; (800daa4 <HAL_PCD_SuspendCallback+0x48>)
 800da96:	f043 0306 	orr.w	r3, r3, #6
 800da9a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800da9c:	bf00      	nop
 800da9e:	3708      	adds	r7, #8
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}
 800daa4:	e000ed00 	.word	0xe000ed00

0800daa8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b082      	sub	sp, #8
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dab6:	4618      	mov	r0, r3
 800dab8:	f7fd f9a4 	bl	800ae04 <USBD_LL_Resume>
}
 800dabc:	bf00      	nop
 800dabe:	3708      	adds	r7, #8
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}

0800dac4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b082      	sub	sp, #8
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
 800dacc:	460b      	mov	r3, r1
 800dace:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dad6:	78fa      	ldrb	r2, [r7, #3]
 800dad8:	4611      	mov	r1, r2
 800dada:	4618      	mov	r0, r3
 800dadc:	f7fd f9f2 	bl	800aec4 <USBD_LL_IsoOUTIncomplete>
}
 800dae0:	bf00      	nop
 800dae2:	3708      	adds	r7, #8
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}

0800dae8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b082      	sub	sp, #8
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
 800daf0:	460b      	mov	r3, r1
 800daf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dafa:	78fa      	ldrb	r2, [r7, #3]
 800dafc:	4611      	mov	r1, r2
 800dafe:	4618      	mov	r0, r3
 800db00:	f7fd f9ba 	bl	800ae78 <USBD_LL_IsoINIncomplete>
}
 800db04:	bf00      	nop
 800db06:	3708      	adds	r7, #8
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}

0800db0c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b082      	sub	sp, #8
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800db1a:	4618      	mov	r0, r3
 800db1c:	f7fd f9f8 	bl	800af10 <USBD_LL_DevConnected>
}
 800db20:	bf00      	nop
 800db22:	3708      	adds	r7, #8
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}

0800db28 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b082      	sub	sp, #8
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800db36:	4618      	mov	r0, r3
 800db38:	f7fd f9f5 	bl	800af26 <USBD_LL_DevDisconnected>
}
 800db3c:	bf00      	nop
 800db3e:	3708      	adds	r7, #8
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}

0800db44 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b082      	sub	sp, #8
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	781b      	ldrb	r3, [r3, #0]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d13c      	bne.n	800dbce <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800db54:	4a20      	ldr	r2, [pc, #128]	; (800dbd8 <USBD_LL_Init+0x94>)
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	4a1e      	ldr	r2, [pc, #120]	; (800dbd8 <USBD_LL_Init+0x94>)
 800db60:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800db64:	4b1c      	ldr	r3, [pc, #112]	; (800dbd8 <USBD_LL_Init+0x94>)
 800db66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800db6a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800db6c:	4b1a      	ldr	r3, [pc, #104]	; (800dbd8 <USBD_LL_Init+0x94>)
 800db6e:	2204      	movs	r2, #4
 800db70:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800db72:	4b19      	ldr	r3, [pc, #100]	; (800dbd8 <USBD_LL_Init+0x94>)
 800db74:	2202      	movs	r2, #2
 800db76:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800db78:	4b17      	ldr	r3, [pc, #92]	; (800dbd8 <USBD_LL_Init+0x94>)
 800db7a:	2200      	movs	r2, #0
 800db7c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800db7e:	4b16      	ldr	r3, [pc, #88]	; (800dbd8 <USBD_LL_Init+0x94>)
 800db80:	2202      	movs	r2, #2
 800db82:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800db84:	4b14      	ldr	r3, [pc, #80]	; (800dbd8 <USBD_LL_Init+0x94>)
 800db86:	2200      	movs	r2, #0
 800db88:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800db8a:	4b13      	ldr	r3, [pc, #76]	; (800dbd8 <USBD_LL_Init+0x94>)
 800db8c:	2200      	movs	r2, #0
 800db8e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800db90:	4b11      	ldr	r3, [pc, #68]	; (800dbd8 <USBD_LL_Init+0x94>)
 800db92:	2200      	movs	r2, #0
 800db94:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800db96:	4b10      	ldr	r3, [pc, #64]	; (800dbd8 <USBD_LL_Init+0x94>)
 800db98:	2200      	movs	r2, #0
 800db9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800db9c:	4b0e      	ldr	r3, [pc, #56]	; (800dbd8 <USBD_LL_Init+0x94>)
 800db9e:	2200      	movs	r2, #0
 800dba0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800dba2:	480d      	ldr	r0, [pc, #52]	; (800dbd8 <USBD_LL_Init+0x94>)
 800dba4:	f7f6 fbf3 	bl	800438e <HAL_PCD_Init>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d001      	beq.n	800dbb2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800dbae:	f7ff fa75 	bl	800d09c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800dbb2:	2180      	movs	r1, #128	; 0x80
 800dbb4:	4808      	ldr	r0, [pc, #32]	; (800dbd8 <USBD_LL_Init+0x94>)
 800dbb6:	f7f7 fd50 	bl	800565a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800dbba:	2240      	movs	r2, #64	; 0x40
 800dbbc:	2100      	movs	r1, #0
 800dbbe:	4806      	ldr	r0, [pc, #24]	; (800dbd8 <USBD_LL_Init+0x94>)
 800dbc0:	f7f7 fd04 	bl	80055cc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800dbc4:	2280      	movs	r2, #128	; 0x80
 800dbc6:	2101      	movs	r1, #1
 800dbc8:	4803      	ldr	r0, [pc, #12]	; (800dbd8 <USBD_LL_Init+0x94>)
 800dbca:	f7f7 fcff 	bl	80055cc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800dbce:	2300      	movs	r3, #0
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	3708      	adds	r7, #8
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}
 800dbd8:	20001ff8 	.word	0x20001ff8

0800dbdc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b084      	sub	sp, #16
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f7f6 fce8 	bl	80045c8 <HAL_PCD_Start>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbfc:	7bfb      	ldrb	r3, [r7, #15]
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f000 f942 	bl	800de88 <USBD_Get_USB_Status>
 800dc04:	4603      	mov	r3, r0
 800dc06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc08:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3710      	adds	r7, #16
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}

0800dc12 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dc12:	b580      	push	{r7, lr}
 800dc14:	b084      	sub	sp, #16
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	6078      	str	r0, [r7, #4]
 800dc1a:	4608      	mov	r0, r1
 800dc1c:	4611      	mov	r1, r2
 800dc1e:	461a      	mov	r2, r3
 800dc20:	4603      	mov	r3, r0
 800dc22:	70fb      	strb	r3, [r7, #3]
 800dc24:	460b      	mov	r3, r1
 800dc26:	70bb      	strb	r3, [r7, #2]
 800dc28:	4613      	mov	r3, r2
 800dc2a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc30:	2300      	movs	r3, #0
 800dc32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dc3a:	78bb      	ldrb	r3, [r7, #2]
 800dc3c:	883a      	ldrh	r2, [r7, #0]
 800dc3e:	78f9      	ldrb	r1, [r7, #3]
 800dc40:	f7f7 f8cc 	bl	8004ddc <HAL_PCD_EP_Open>
 800dc44:	4603      	mov	r3, r0
 800dc46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc48:	7bfb      	ldrb	r3, [r7, #15]
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f000 f91c 	bl	800de88 <USBD_Get_USB_Status>
 800dc50:	4603      	mov	r3, r0
 800dc52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc54:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3710      	adds	r7, #16
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}

0800dc5e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc5e:	b580      	push	{r7, lr}
 800dc60:	b084      	sub	sp, #16
 800dc62:	af00      	add	r7, sp, #0
 800dc64:	6078      	str	r0, [r7, #4]
 800dc66:	460b      	mov	r3, r1
 800dc68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc6e:	2300      	movs	r3, #0
 800dc70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dc78:	78fa      	ldrb	r2, [r7, #3]
 800dc7a:	4611      	mov	r1, r2
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f7f7 f915 	bl	8004eac <HAL_PCD_EP_Close>
 800dc82:	4603      	mov	r3, r0
 800dc84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc86:	7bfb      	ldrb	r3, [r7, #15]
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f000 f8fd 	bl	800de88 <USBD_Get_USB_Status>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc92:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	3710      	adds	r7, #16
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}

0800dc9c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b084      	sub	sp, #16
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
 800dca4:	460b      	mov	r3, r1
 800dca6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dca8:	2300      	movs	r3, #0
 800dcaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcac:	2300      	movs	r3, #0
 800dcae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dcb6:	78fa      	ldrb	r2, [r7, #3]
 800dcb8:	4611      	mov	r1, r2
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f7f7 f9ed 	bl	800509a <HAL_PCD_EP_SetStall>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcc4:	7bfb      	ldrb	r3, [r7, #15]
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f000 f8de 	bl	800de88 <USBD_Get_USB_Status>
 800dccc:	4603      	mov	r3, r0
 800dcce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dcd0:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3710      	adds	r7, #16
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}

0800dcda <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dcda:	b580      	push	{r7, lr}
 800dcdc:	b084      	sub	sp, #16
 800dcde:	af00      	add	r7, sp, #0
 800dce0:	6078      	str	r0, [r7, #4]
 800dce2:	460b      	mov	r3, r1
 800dce4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dce6:	2300      	movs	r3, #0
 800dce8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcea:	2300      	movs	r3, #0
 800dcec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dcf4:	78fa      	ldrb	r2, [r7, #3]
 800dcf6:	4611      	mov	r1, r2
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f7f7 fa32 	bl	8005162 <HAL_PCD_EP_ClrStall>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd02:	7bfb      	ldrb	r3, [r7, #15]
 800dd04:	4618      	mov	r0, r3
 800dd06:	f000 f8bf 	bl	800de88 <USBD_Get_USB_Status>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd0e:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd10:	4618      	mov	r0, r3
 800dd12:	3710      	adds	r7, #16
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}

0800dd18 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd18:	b480      	push	{r7}
 800dd1a:	b085      	sub	sp, #20
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
 800dd20:	460b      	mov	r3, r1
 800dd22:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dd2a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dd2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	da0b      	bge.n	800dd4c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dd34:	78fb      	ldrb	r3, [r7, #3]
 800dd36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dd3a:	68f9      	ldr	r1, [r7, #12]
 800dd3c:	4613      	mov	r3, r2
 800dd3e:	00db      	lsls	r3, r3, #3
 800dd40:	1a9b      	subs	r3, r3, r2
 800dd42:	009b      	lsls	r3, r3, #2
 800dd44:	440b      	add	r3, r1
 800dd46:	333e      	adds	r3, #62	; 0x3e
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	e00b      	b.n	800dd64 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dd4c:	78fb      	ldrb	r3, [r7, #3]
 800dd4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dd52:	68f9      	ldr	r1, [r7, #12]
 800dd54:	4613      	mov	r3, r2
 800dd56:	00db      	lsls	r3, r3, #3
 800dd58:	1a9b      	subs	r3, r3, r2
 800dd5a:	009b      	lsls	r3, r3, #2
 800dd5c:	440b      	add	r3, r1
 800dd5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dd62:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dd64:	4618      	mov	r0, r3
 800dd66:	3714      	adds	r7, #20
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6e:	4770      	bx	lr

0800dd70 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b084      	sub	sp, #16
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	460b      	mov	r3, r1
 800dd7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd80:	2300      	movs	r3, #0
 800dd82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dd8a:	78fa      	ldrb	r2, [r7, #3]
 800dd8c:	4611      	mov	r1, r2
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f7f6 ffff 	bl	8004d92 <HAL_PCD_SetAddress>
 800dd94:	4603      	mov	r3, r0
 800dd96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd98:	7bfb      	ldrb	r3, [r7, #15]
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f000 f874 	bl	800de88 <USBD_Get_USB_Status>
 800dda0:	4603      	mov	r3, r0
 800dda2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dda4:	7bbb      	ldrb	r3, [r7, #14]
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	3710      	adds	r7, #16
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}

0800ddae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ddae:	b580      	push	{r7, lr}
 800ddb0:	b086      	sub	sp, #24
 800ddb2:	af00      	add	r7, sp, #0
 800ddb4:	60f8      	str	r0, [r7, #12]
 800ddb6:	607a      	str	r2, [r7, #4]
 800ddb8:	603b      	str	r3, [r7, #0]
 800ddba:	460b      	mov	r3, r1
 800ddbc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ddcc:	7af9      	ldrb	r1, [r7, #11]
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	687a      	ldr	r2, [r7, #4]
 800ddd2:	f7f7 f918 	bl	8005006 <HAL_PCD_EP_Transmit>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ddda:	7dfb      	ldrb	r3, [r7, #23]
 800dddc:	4618      	mov	r0, r3
 800ddde:	f000 f853 	bl	800de88 <USBD_Get_USB_Status>
 800dde2:	4603      	mov	r3, r0
 800dde4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dde6:	7dbb      	ldrb	r3, [r7, #22]
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	3718      	adds	r7, #24
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}

0800ddf0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b086      	sub	sp, #24
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	60f8      	str	r0, [r7, #12]
 800ddf8:	607a      	str	r2, [r7, #4]
 800ddfa:	603b      	str	r3, [r7, #0]
 800ddfc:	460b      	mov	r3, r1
 800ddfe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de00:	2300      	movs	r3, #0
 800de02:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de04:	2300      	movs	r3, #0
 800de06:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800de0e:	7af9      	ldrb	r1, [r7, #11]
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	687a      	ldr	r2, [r7, #4]
 800de14:	f7f7 f894 	bl	8004f40 <HAL_PCD_EP_Receive>
 800de18:	4603      	mov	r3, r0
 800de1a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de1c:	7dfb      	ldrb	r3, [r7, #23]
 800de1e:	4618      	mov	r0, r3
 800de20:	f000 f832 	bl	800de88 <USBD_Get_USB_Status>
 800de24:	4603      	mov	r3, r0
 800de26:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800de28:	7dbb      	ldrb	r3, [r7, #22]
}
 800de2a:	4618      	mov	r0, r3
 800de2c:	3718      	adds	r7, #24
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd80      	pop	{r7, pc}

0800de32 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de32:	b580      	push	{r7, lr}
 800de34:	b082      	sub	sp, #8
 800de36:	af00      	add	r7, sp, #0
 800de38:	6078      	str	r0, [r7, #4]
 800de3a:	460b      	mov	r3, r1
 800de3c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800de44:	78fa      	ldrb	r2, [r7, #3]
 800de46:	4611      	mov	r1, r2
 800de48:	4618      	mov	r0, r3
 800de4a:	f7f7 f8c4 	bl	8004fd6 <HAL_PCD_EP_GetRxCount>
 800de4e:	4603      	mov	r3, r0
}
 800de50:	4618      	mov	r0, r3
 800de52:	3708      	adds	r7, #8
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}

0800de58 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800de58:	b480      	push	{r7}
 800de5a:	b083      	sub	sp, #12
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800de60:	4b03      	ldr	r3, [pc, #12]	; (800de70 <USBD_static_malloc+0x18>)
}
 800de62:	4618      	mov	r0, r3
 800de64:	370c      	adds	r7, #12
 800de66:	46bd      	mov	sp, r7
 800de68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6c:	4770      	bx	lr
 800de6e:	bf00      	nop
 800de70:	20000800 	.word	0x20000800

0800de74 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800de74:	b480      	push	{r7}
 800de76:	b083      	sub	sp, #12
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]

}
 800de7c:	bf00      	nop
 800de7e:	370c      	adds	r7, #12
 800de80:	46bd      	mov	sp, r7
 800de82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de86:	4770      	bx	lr

0800de88 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800de88:	b480      	push	{r7}
 800de8a:	b085      	sub	sp, #20
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	4603      	mov	r3, r0
 800de90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de92:	2300      	movs	r3, #0
 800de94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800de96:	79fb      	ldrb	r3, [r7, #7]
 800de98:	2b03      	cmp	r3, #3
 800de9a:	d817      	bhi.n	800decc <USBD_Get_USB_Status+0x44>
 800de9c:	a201      	add	r2, pc, #4	; (adr r2, 800dea4 <USBD_Get_USB_Status+0x1c>)
 800de9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dea2:	bf00      	nop
 800dea4:	0800deb5 	.word	0x0800deb5
 800dea8:	0800debb 	.word	0x0800debb
 800deac:	0800dec1 	.word	0x0800dec1
 800deb0:	0800dec7 	.word	0x0800dec7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800deb4:	2300      	movs	r3, #0
 800deb6:	73fb      	strb	r3, [r7, #15]
    break;
 800deb8:	e00b      	b.n	800ded2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800deba:	2303      	movs	r3, #3
 800debc:	73fb      	strb	r3, [r7, #15]
    break;
 800debe:	e008      	b.n	800ded2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dec0:	2301      	movs	r3, #1
 800dec2:	73fb      	strb	r3, [r7, #15]
    break;
 800dec4:	e005      	b.n	800ded2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dec6:	2303      	movs	r3, #3
 800dec8:	73fb      	strb	r3, [r7, #15]
    break;
 800deca:	e002      	b.n	800ded2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800decc:	2303      	movs	r3, #3
 800dece:	73fb      	strb	r3, [r7, #15]
    break;
 800ded0:	bf00      	nop
  }
  return usb_status;
 800ded2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	3714      	adds	r7, #20
 800ded8:	46bd      	mov	sp, r7
 800deda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dede:	4770      	bx	lr

0800dee0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dee0:	b480      	push	{r7}
 800dee2:	b083      	sub	sp, #12
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	4603      	mov	r3, r0
 800dee8:	6039      	str	r1, [r7, #0]
 800deea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	2212      	movs	r2, #18
 800def0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800def2:	4b03      	ldr	r3, [pc, #12]	; (800df00 <USBD_FS_DeviceDescriptor+0x20>)
}
 800def4:	4618      	mov	r0, r3
 800def6:	370c      	adds	r7, #12
 800def8:	46bd      	mov	sp, r7
 800defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defe:	4770      	bx	lr
 800df00:	2000014c 	.word	0x2000014c

0800df04 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df04:	b480      	push	{r7}
 800df06:	b083      	sub	sp, #12
 800df08:	af00      	add	r7, sp, #0
 800df0a:	4603      	mov	r3, r0
 800df0c:	6039      	str	r1, [r7, #0]
 800df0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	2204      	movs	r2, #4
 800df14:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800df16:	4b03      	ldr	r3, [pc, #12]	; (800df24 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800df18:	4618      	mov	r0, r3
 800df1a:	370c      	adds	r7, #12
 800df1c:	46bd      	mov	sp, r7
 800df1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df22:	4770      	bx	lr
 800df24:	20000160 	.word	0x20000160

0800df28 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b082      	sub	sp, #8
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	4603      	mov	r3, r0
 800df30:	6039      	str	r1, [r7, #0]
 800df32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800df34:	79fb      	ldrb	r3, [r7, #7]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d105      	bne.n	800df46 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800df3a:	683a      	ldr	r2, [r7, #0]
 800df3c:	4907      	ldr	r1, [pc, #28]	; (800df5c <USBD_FS_ProductStrDescriptor+0x34>)
 800df3e:	4808      	ldr	r0, [pc, #32]	; (800df60 <USBD_FS_ProductStrDescriptor+0x38>)
 800df40:	f7fd fd85 	bl	800ba4e <USBD_GetString>
 800df44:	e004      	b.n	800df50 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800df46:	683a      	ldr	r2, [r7, #0]
 800df48:	4904      	ldr	r1, [pc, #16]	; (800df5c <USBD_FS_ProductStrDescriptor+0x34>)
 800df4a:	4805      	ldr	r0, [pc, #20]	; (800df60 <USBD_FS_ProductStrDescriptor+0x38>)
 800df4c:	f7fd fd7f 	bl	800ba4e <USBD_GetString>
  }
  return USBD_StrDesc;
 800df50:	4b02      	ldr	r3, [pc, #8]	; (800df5c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800df52:	4618      	mov	r0, r3
 800df54:	3708      	adds	r7, #8
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}
 800df5a:	bf00      	nop
 800df5c:	20002400 	.word	0x20002400
 800df60:	08010f9c 	.word	0x08010f9c

0800df64 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b082      	sub	sp, #8
 800df68:	af00      	add	r7, sp, #0
 800df6a:	4603      	mov	r3, r0
 800df6c:	6039      	str	r1, [r7, #0]
 800df6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800df70:	683a      	ldr	r2, [r7, #0]
 800df72:	4904      	ldr	r1, [pc, #16]	; (800df84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800df74:	4804      	ldr	r0, [pc, #16]	; (800df88 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800df76:	f7fd fd6a 	bl	800ba4e <USBD_GetString>
  return USBD_StrDesc;
 800df7a:	4b02      	ldr	r3, [pc, #8]	; (800df84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	3708      	adds	r7, #8
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}
 800df84:	20002400 	.word	0x20002400
 800df88:	08010fb4 	.word	0x08010fb4

0800df8c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b082      	sub	sp, #8
 800df90:	af00      	add	r7, sp, #0
 800df92:	4603      	mov	r3, r0
 800df94:	6039      	str	r1, [r7, #0]
 800df96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	221a      	movs	r2, #26
 800df9c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800df9e:	f000 f843 	bl	800e028 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dfa2:	4b02      	ldr	r3, [pc, #8]	; (800dfac <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	3708      	adds	r7, #8
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}
 800dfac:	20000164 	.word	0x20000164

0800dfb0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b082      	sub	sp, #8
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	6039      	str	r1, [r7, #0]
 800dfba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dfbc:	79fb      	ldrb	r3, [r7, #7]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d105      	bne.n	800dfce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dfc2:	683a      	ldr	r2, [r7, #0]
 800dfc4:	4907      	ldr	r1, [pc, #28]	; (800dfe4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dfc6:	4808      	ldr	r0, [pc, #32]	; (800dfe8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dfc8:	f7fd fd41 	bl	800ba4e <USBD_GetString>
 800dfcc:	e004      	b.n	800dfd8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dfce:	683a      	ldr	r2, [r7, #0]
 800dfd0:	4904      	ldr	r1, [pc, #16]	; (800dfe4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dfd2:	4805      	ldr	r0, [pc, #20]	; (800dfe8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dfd4:	f7fd fd3b 	bl	800ba4e <USBD_GetString>
  }
  return USBD_StrDesc;
 800dfd8:	4b02      	ldr	r3, [pc, #8]	; (800dfe4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3708      	adds	r7, #8
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}
 800dfe2:	bf00      	nop
 800dfe4:	20002400 	.word	0x20002400
 800dfe8:	08010fc8 	.word	0x08010fc8

0800dfec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b082      	sub	sp, #8
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	4603      	mov	r3, r0
 800dff4:	6039      	str	r1, [r7, #0]
 800dff6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dff8:	79fb      	ldrb	r3, [r7, #7]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d105      	bne.n	800e00a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dffe:	683a      	ldr	r2, [r7, #0]
 800e000:	4907      	ldr	r1, [pc, #28]	; (800e020 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e002:	4808      	ldr	r0, [pc, #32]	; (800e024 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e004:	f7fd fd23 	bl	800ba4e <USBD_GetString>
 800e008:	e004      	b.n	800e014 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e00a:	683a      	ldr	r2, [r7, #0]
 800e00c:	4904      	ldr	r1, [pc, #16]	; (800e020 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e00e:	4805      	ldr	r0, [pc, #20]	; (800e024 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e010:	f7fd fd1d 	bl	800ba4e <USBD_GetString>
  }
  return USBD_StrDesc;
 800e014:	4b02      	ldr	r3, [pc, #8]	; (800e020 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e016:	4618      	mov	r0, r3
 800e018:	3708      	adds	r7, #8
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}
 800e01e:	bf00      	nop
 800e020:	20002400 	.word	0x20002400
 800e024:	08010fd4 	.word	0x08010fd4

0800e028 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b084      	sub	sp, #16
 800e02c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e02e:	4b0f      	ldr	r3, [pc, #60]	; (800e06c <Get_SerialNum+0x44>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e034:	4b0e      	ldr	r3, [pc, #56]	; (800e070 <Get_SerialNum+0x48>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e03a:	4b0e      	ldr	r3, [pc, #56]	; (800e074 <Get_SerialNum+0x4c>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e040:	68fa      	ldr	r2, [r7, #12]
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	4413      	add	r3, r2
 800e046:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d009      	beq.n	800e062 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e04e:	2208      	movs	r2, #8
 800e050:	4909      	ldr	r1, [pc, #36]	; (800e078 <Get_SerialNum+0x50>)
 800e052:	68f8      	ldr	r0, [r7, #12]
 800e054:	f000 f814 	bl	800e080 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e058:	2204      	movs	r2, #4
 800e05a:	4908      	ldr	r1, [pc, #32]	; (800e07c <Get_SerialNum+0x54>)
 800e05c:	68b8      	ldr	r0, [r7, #8]
 800e05e:	f000 f80f 	bl	800e080 <IntToUnicode>
  }
}
 800e062:	bf00      	nop
 800e064:	3710      	adds	r7, #16
 800e066:	46bd      	mov	sp, r7
 800e068:	bd80      	pop	{r7, pc}
 800e06a:	bf00      	nop
 800e06c:	1fff7a10 	.word	0x1fff7a10
 800e070:	1fff7a14 	.word	0x1fff7a14
 800e074:	1fff7a18 	.word	0x1fff7a18
 800e078:	20000166 	.word	0x20000166
 800e07c:	20000176 	.word	0x20000176

0800e080 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e080:	b480      	push	{r7}
 800e082:	b087      	sub	sp, #28
 800e084:	af00      	add	r7, sp, #0
 800e086:	60f8      	str	r0, [r7, #12]
 800e088:	60b9      	str	r1, [r7, #8]
 800e08a:	4613      	mov	r3, r2
 800e08c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e08e:	2300      	movs	r3, #0
 800e090:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e092:	2300      	movs	r3, #0
 800e094:	75fb      	strb	r3, [r7, #23]
 800e096:	e027      	b.n	800e0e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	0f1b      	lsrs	r3, r3, #28
 800e09c:	2b09      	cmp	r3, #9
 800e09e:	d80b      	bhi.n	800e0b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	0f1b      	lsrs	r3, r3, #28
 800e0a4:	b2da      	uxtb	r2, r3
 800e0a6:	7dfb      	ldrb	r3, [r7, #23]
 800e0a8:	005b      	lsls	r3, r3, #1
 800e0aa:	4619      	mov	r1, r3
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	440b      	add	r3, r1
 800e0b0:	3230      	adds	r2, #48	; 0x30
 800e0b2:	b2d2      	uxtb	r2, r2
 800e0b4:	701a      	strb	r2, [r3, #0]
 800e0b6:	e00a      	b.n	800e0ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	0f1b      	lsrs	r3, r3, #28
 800e0bc:	b2da      	uxtb	r2, r3
 800e0be:	7dfb      	ldrb	r3, [r7, #23]
 800e0c0:	005b      	lsls	r3, r3, #1
 800e0c2:	4619      	mov	r1, r3
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	440b      	add	r3, r1
 800e0c8:	3237      	adds	r2, #55	; 0x37
 800e0ca:	b2d2      	uxtb	r2, r2
 800e0cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	011b      	lsls	r3, r3, #4
 800e0d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e0d4:	7dfb      	ldrb	r3, [r7, #23]
 800e0d6:	005b      	lsls	r3, r3, #1
 800e0d8:	3301      	adds	r3, #1
 800e0da:	68ba      	ldr	r2, [r7, #8]
 800e0dc:	4413      	add	r3, r2
 800e0de:	2200      	movs	r2, #0
 800e0e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e0e2:	7dfb      	ldrb	r3, [r7, #23]
 800e0e4:	3301      	adds	r3, #1
 800e0e6:	75fb      	strb	r3, [r7, #23]
 800e0e8:	7dfa      	ldrb	r2, [r7, #23]
 800e0ea:	79fb      	ldrb	r3, [r7, #7]
 800e0ec:	429a      	cmp	r2, r3
 800e0ee:	d3d3      	bcc.n	800e098 <IntToUnicode+0x18>
  }
}
 800e0f0:	bf00      	nop
 800e0f2:	bf00      	nop
 800e0f4:	371c      	adds	r7, #28
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fc:	4770      	bx	lr
	...

0800e100 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800e100:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e138 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800e104:	480d      	ldr	r0, [pc, #52]	; (800e13c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800e106:	490e      	ldr	r1, [pc, #56]	; (800e140 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800e108:	4a0e      	ldr	r2, [pc, #56]	; (800e144 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800e10a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e10c:	e002      	b.n	800e114 <LoopCopyDataInit>

0800e10e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e10e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e112:	3304      	adds	r3, #4

0800e114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800e118:	d3f9      	bcc.n	800e10e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800e11a:	4a0b      	ldr	r2, [pc, #44]	; (800e148 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800e11c:	4c0b      	ldr	r4, [pc, #44]	; (800e14c <LoopFillZerobss+0x26>)
  movs r3, #0
 800e11e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e120:	e001      	b.n	800e126 <LoopFillZerobss>

0800e122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e124:	3204      	adds	r2, #4

0800e126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e128:	d3fb      	bcc.n	800e122 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800e12a:	f7ff fac7 	bl	800d6bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e12e:	f000 f811 	bl	800e154 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e132:	f7fe fc83 	bl	800ca3c <main>
  bx  lr    
 800e136:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800e138:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800e13c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e140:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 800e144:	08011404 	.word	0x08011404
  ldr r2, =_sbss
 800e148:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 800e14c:	20002610 	.word	0x20002610

0800e150 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e150:	e7fe      	b.n	800e150 <DMA1_Stream0_IRQHandler>
	...

0800e154 <__libc_init_array>:
 800e154:	b570      	push	{r4, r5, r6, lr}
 800e156:	4d0d      	ldr	r5, [pc, #52]	; (800e18c <__libc_init_array+0x38>)
 800e158:	4c0d      	ldr	r4, [pc, #52]	; (800e190 <__libc_init_array+0x3c>)
 800e15a:	1b64      	subs	r4, r4, r5
 800e15c:	10a4      	asrs	r4, r4, #2
 800e15e:	2600      	movs	r6, #0
 800e160:	42a6      	cmp	r6, r4
 800e162:	d109      	bne.n	800e178 <__libc_init_array+0x24>
 800e164:	4d0b      	ldr	r5, [pc, #44]	; (800e194 <__libc_init_array+0x40>)
 800e166:	4c0c      	ldr	r4, [pc, #48]	; (800e198 <__libc_init_array+0x44>)
 800e168:	f002 ff04 	bl	8010f74 <_init>
 800e16c:	1b64      	subs	r4, r4, r5
 800e16e:	10a4      	asrs	r4, r4, #2
 800e170:	2600      	movs	r6, #0
 800e172:	42a6      	cmp	r6, r4
 800e174:	d105      	bne.n	800e182 <__libc_init_array+0x2e>
 800e176:	bd70      	pop	{r4, r5, r6, pc}
 800e178:	f855 3b04 	ldr.w	r3, [r5], #4
 800e17c:	4798      	blx	r3
 800e17e:	3601      	adds	r6, #1
 800e180:	e7ee      	b.n	800e160 <__libc_init_array+0xc>
 800e182:	f855 3b04 	ldr.w	r3, [r5], #4
 800e186:	4798      	blx	r3
 800e188:	3601      	adds	r6, #1
 800e18a:	e7f2      	b.n	800e172 <__libc_init_array+0x1e>
 800e18c:	080113fc 	.word	0x080113fc
 800e190:	080113fc 	.word	0x080113fc
 800e194:	080113fc 	.word	0x080113fc
 800e198:	08011400 	.word	0x08011400

0800e19c <memset>:
 800e19c:	4402      	add	r2, r0
 800e19e:	4603      	mov	r3, r0
 800e1a0:	4293      	cmp	r3, r2
 800e1a2:	d100      	bne.n	800e1a6 <memset+0xa>
 800e1a4:	4770      	bx	lr
 800e1a6:	f803 1b01 	strb.w	r1, [r3], #1
 800e1aa:	e7f9      	b.n	800e1a0 <memset+0x4>

0800e1ac <__cvt>:
 800e1ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e1b0:	ec55 4b10 	vmov	r4, r5, d0
 800e1b4:	2d00      	cmp	r5, #0
 800e1b6:	460e      	mov	r6, r1
 800e1b8:	4619      	mov	r1, r3
 800e1ba:	462b      	mov	r3, r5
 800e1bc:	bfbb      	ittet	lt
 800e1be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e1c2:	461d      	movlt	r5, r3
 800e1c4:	2300      	movge	r3, #0
 800e1c6:	232d      	movlt	r3, #45	; 0x2d
 800e1c8:	700b      	strb	r3, [r1, #0]
 800e1ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e1cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e1d0:	4691      	mov	r9, r2
 800e1d2:	f023 0820 	bic.w	r8, r3, #32
 800e1d6:	bfbc      	itt	lt
 800e1d8:	4622      	movlt	r2, r4
 800e1da:	4614      	movlt	r4, r2
 800e1dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e1e0:	d005      	beq.n	800e1ee <__cvt+0x42>
 800e1e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e1e6:	d100      	bne.n	800e1ea <__cvt+0x3e>
 800e1e8:	3601      	adds	r6, #1
 800e1ea:	2102      	movs	r1, #2
 800e1ec:	e000      	b.n	800e1f0 <__cvt+0x44>
 800e1ee:	2103      	movs	r1, #3
 800e1f0:	ab03      	add	r3, sp, #12
 800e1f2:	9301      	str	r3, [sp, #4]
 800e1f4:	ab02      	add	r3, sp, #8
 800e1f6:	9300      	str	r3, [sp, #0]
 800e1f8:	ec45 4b10 	vmov	d0, r4, r5
 800e1fc:	4653      	mov	r3, sl
 800e1fe:	4632      	mov	r2, r6
 800e200:	f000 fcea 	bl	800ebd8 <_dtoa_r>
 800e204:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e208:	4607      	mov	r7, r0
 800e20a:	d102      	bne.n	800e212 <__cvt+0x66>
 800e20c:	f019 0f01 	tst.w	r9, #1
 800e210:	d022      	beq.n	800e258 <__cvt+0xac>
 800e212:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e216:	eb07 0906 	add.w	r9, r7, r6
 800e21a:	d110      	bne.n	800e23e <__cvt+0x92>
 800e21c:	783b      	ldrb	r3, [r7, #0]
 800e21e:	2b30      	cmp	r3, #48	; 0x30
 800e220:	d10a      	bne.n	800e238 <__cvt+0x8c>
 800e222:	2200      	movs	r2, #0
 800e224:	2300      	movs	r3, #0
 800e226:	4620      	mov	r0, r4
 800e228:	4629      	mov	r1, r5
 800e22a:	f7f2 fc55 	bl	8000ad8 <__aeabi_dcmpeq>
 800e22e:	b918      	cbnz	r0, 800e238 <__cvt+0x8c>
 800e230:	f1c6 0601 	rsb	r6, r6, #1
 800e234:	f8ca 6000 	str.w	r6, [sl]
 800e238:	f8da 3000 	ldr.w	r3, [sl]
 800e23c:	4499      	add	r9, r3
 800e23e:	2200      	movs	r2, #0
 800e240:	2300      	movs	r3, #0
 800e242:	4620      	mov	r0, r4
 800e244:	4629      	mov	r1, r5
 800e246:	f7f2 fc47 	bl	8000ad8 <__aeabi_dcmpeq>
 800e24a:	b108      	cbz	r0, 800e250 <__cvt+0xa4>
 800e24c:	f8cd 900c 	str.w	r9, [sp, #12]
 800e250:	2230      	movs	r2, #48	; 0x30
 800e252:	9b03      	ldr	r3, [sp, #12]
 800e254:	454b      	cmp	r3, r9
 800e256:	d307      	bcc.n	800e268 <__cvt+0xbc>
 800e258:	9b03      	ldr	r3, [sp, #12]
 800e25a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e25c:	1bdb      	subs	r3, r3, r7
 800e25e:	4638      	mov	r0, r7
 800e260:	6013      	str	r3, [r2, #0]
 800e262:	b004      	add	sp, #16
 800e264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e268:	1c59      	adds	r1, r3, #1
 800e26a:	9103      	str	r1, [sp, #12]
 800e26c:	701a      	strb	r2, [r3, #0]
 800e26e:	e7f0      	b.n	800e252 <__cvt+0xa6>

0800e270 <__exponent>:
 800e270:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e272:	4603      	mov	r3, r0
 800e274:	2900      	cmp	r1, #0
 800e276:	bfb8      	it	lt
 800e278:	4249      	neglt	r1, r1
 800e27a:	f803 2b02 	strb.w	r2, [r3], #2
 800e27e:	bfb4      	ite	lt
 800e280:	222d      	movlt	r2, #45	; 0x2d
 800e282:	222b      	movge	r2, #43	; 0x2b
 800e284:	2909      	cmp	r1, #9
 800e286:	7042      	strb	r2, [r0, #1]
 800e288:	dd2a      	ble.n	800e2e0 <__exponent+0x70>
 800e28a:	f10d 0407 	add.w	r4, sp, #7
 800e28e:	46a4      	mov	ip, r4
 800e290:	270a      	movs	r7, #10
 800e292:	46a6      	mov	lr, r4
 800e294:	460a      	mov	r2, r1
 800e296:	fb91 f6f7 	sdiv	r6, r1, r7
 800e29a:	fb07 1516 	mls	r5, r7, r6, r1
 800e29e:	3530      	adds	r5, #48	; 0x30
 800e2a0:	2a63      	cmp	r2, #99	; 0x63
 800e2a2:	f104 34ff 	add.w	r4, r4, #4294967295
 800e2a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e2aa:	4631      	mov	r1, r6
 800e2ac:	dcf1      	bgt.n	800e292 <__exponent+0x22>
 800e2ae:	3130      	adds	r1, #48	; 0x30
 800e2b0:	f1ae 0502 	sub.w	r5, lr, #2
 800e2b4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e2b8:	1c44      	adds	r4, r0, #1
 800e2ba:	4629      	mov	r1, r5
 800e2bc:	4561      	cmp	r1, ip
 800e2be:	d30a      	bcc.n	800e2d6 <__exponent+0x66>
 800e2c0:	f10d 0209 	add.w	r2, sp, #9
 800e2c4:	eba2 020e 	sub.w	r2, r2, lr
 800e2c8:	4565      	cmp	r5, ip
 800e2ca:	bf88      	it	hi
 800e2cc:	2200      	movhi	r2, #0
 800e2ce:	4413      	add	r3, r2
 800e2d0:	1a18      	subs	r0, r3, r0
 800e2d2:	b003      	add	sp, #12
 800e2d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e2da:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e2de:	e7ed      	b.n	800e2bc <__exponent+0x4c>
 800e2e0:	2330      	movs	r3, #48	; 0x30
 800e2e2:	3130      	adds	r1, #48	; 0x30
 800e2e4:	7083      	strb	r3, [r0, #2]
 800e2e6:	70c1      	strb	r1, [r0, #3]
 800e2e8:	1d03      	adds	r3, r0, #4
 800e2ea:	e7f1      	b.n	800e2d0 <__exponent+0x60>

0800e2ec <_printf_float>:
 800e2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2f0:	ed2d 8b02 	vpush	{d8}
 800e2f4:	b08d      	sub	sp, #52	; 0x34
 800e2f6:	460c      	mov	r4, r1
 800e2f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e2fc:	4616      	mov	r6, r2
 800e2fe:	461f      	mov	r7, r3
 800e300:	4605      	mov	r5, r0
 800e302:	f001 fa55 	bl	800f7b0 <_localeconv_r>
 800e306:	f8d0 a000 	ldr.w	sl, [r0]
 800e30a:	4650      	mov	r0, sl
 800e30c:	f7f1 ff68 	bl	80001e0 <strlen>
 800e310:	2300      	movs	r3, #0
 800e312:	930a      	str	r3, [sp, #40]	; 0x28
 800e314:	6823      	ldr	r3, [r4, #0]
 800e316:	9305      	str	r3, [sp, #20]
 800e318:	f8d8 3000 	ldr.w	r3, [r8]
 800e31c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e320:	3307      	adds	r3, #7
 800e322:	f023 0307 	bic.w	r3, r3, #7
 800e326:	f103 0208 	add.w	r2, r3, #8
 800e32a:	f8c8 2000 	str.w	r2, [r8]
 800e32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e332:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e336:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e33a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e33e:	9307      	str	r3, [sp, #28]
 800e340:	f8cd 8018 	str.w	r8, [sp, #24]
 800e344:	ee08 0a10 	vmov	s16, r0
 800e348:	4b9f      	ldr	r3, [pc, #636]	; (800e5c8 <_printf_float+0x2dc>)
 800e34a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e34e:	f04f 32ff 	mov.w	r2, #4294967295
 800e352:	f7f2 fbf3 	bl	8000b3c <__aeabi_dcmpun>
 800e356:	bb88      	cbnz	r0, 800e3bc <_printf_float+0xd0>
 800e358:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e35c:	4b9a      	ldr	r3, [pc, #616]	; (800e5c8 <_printf_float+0x2dc>)
 800e35e:	f04f 32ff 	mov.w	r2, #4294967295
 800e362:	f7f2 fbcd 	bl	8000b00 <__aeabi_dcmple>
 800e366:	bb48      	cbnz	r0, 800e3bc <_printf_float+0xd0>
 800e368:	2200      	movs	r2, #0
 800e36a:	2300      	movs	r3, #0
 800e36c:	4640      	mov	r0, r8
 800e36e:	4649      	mov	r1, r9
 800e370:	f7f2 fbbc 	bl	8000aec <__aeabi_dcmplt>
 800e374:	b110      	cbz	r0, 800e37c <_printf_float+0x90>
 800e376:	232d      	movs	r3, #45	; 0x2d
 800e378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e37c:	4b93      	ldr	r3, [pc, #588]	; (800e5cc <_printf_float+0x2e0>)
 800e37e:	4894      	ldr	r0, [pc, #592]	; (800e5d0 <_printf_float+0x2e4>)
 800e380:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e384:	bf94      	ite	ls
 800e386:	4698      	movls	r8, r3
 800e388:	4680      	movhi	r8, r0
 800e38a:	2303      	movs	r3, #3
 800e38c:	6123      	str	r3, [r4, #16]
 800e38e:	9b05      	ldr	r3, [sp, #20]
 800e390:	f023 0204 	bic.w	r2, r3, #4
 800e394:	6022      	str	r2, [r4, #0]
 800e396:	f04f 0900 	mov.w	r9, #0
 800e39a:	9700      	str	r7, [sp, #0]
 800e39c:	4633      	mov	r3, r6
 800e39e:	aa0b      	add	r2, sp, #44	; 0x2c
 800e3a0:	4621      	mov	r1, r4
 800e3a2:	4628      	mov	r0, r5
 800e3a4:	f000 f9d8 	bl	800e758 <_printf_common>
 800e3a8:	3001      	adds	r0, #1
 800e3aa:	f040 8090 	bne.w	800e4ce <_printf_float+0x1e2>
 800e3ae:	f04f 30ff 	mov.w	r0, #4294967295
 800e3b2:	b00d      	add	sp, #52	; 0x34
 800e3b4:	ecbd 8b02 	vpop	{d8}
 800e3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3bc:	4642      	mov	r2, r8
 800e3be:	464b      	mov	r3, r9
 800e3c0:	4640      	mov	r0, r8
 800e3c2:	4649      	mov	r1, r9
 800e3c4:	f7f2 fbba 	bl	8000b3c <__aeabi_dcmpun>
 800e3c8:	b140      	cbz	r0, 800e3dc <_printf_float+0xf0>
 800e3ca:	464b      	mov	r3, r9
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	bfbc      	itt	lt
 800e3d0:	232d      	movlt	r3, #45	; 0x2d
 800e3d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e3d6:	487f      	ldr	r0, [pc, #508]	; (800e5d4 <_printf_float+0x2e8>)
 800e3d8:	4b7f      	ldr	r3, [pc, #508]	; (800e5d8 <_printf_float+0x2ec>)
 800e3da:	e7d1      	b.n	800e380 <_printf_float+0x94>
 800e3dc:	6863      	ldr	r3, [r4, #4]
 800e3de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e3e2:	9206      	str	r2, [sp, #24]
 800e3e4:	1c5a      	adds	r2, r3, #1
 800e3e6:	d13f      	bne.n	800e468 <_printf_float+0x17c>
 800e3e8:	2306      	movs	r3, #6
 800e3ea:	6063      	str	r3, [r4, #4]
 800e3ec:	9b05      	ldr	r3, [sp, #20]
 800e3ee:	6861      	ldr	r1, [r4, #4]
 800e3f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	9303      	str	r3, [sp, #12]
 800e3f8:	ab0a      	add	r3, sp, #40	; 0x28
 800e3fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e3fe:	ab09      	add	r3, sp, #36	; 0x24
 800e400:	ec49 8b10 	vmov	d0, r8, r9
 800e404:	9300      	str	r3, [sp, #0]
 800e406:	6022      	str	r2, [r4, #0]
 800e408:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e40c:	4628      	mov	r0, r5
 800e40e:	f7ff fecd 	bl	800e1ac <__cvt>
 800e412:	9b06      	ldr	r3, [sp, #24]
 800e414:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e416:	2b47      	cmp	r3, #71	; 0x47
 800e418:	4680      	mov	r8, r0
 800e41a:	d108      	bne.n	800e42e <_printf_float+0x142>
 800e41c:	1cc8      	adds	r0, r1, #3
 800e41e:	db02      	blt.n	800e426 <_printf_float+0x13a>
 800e420:	6863      	ldr	r3, [r4, #4]
 800e422:	4299      	cmp	r1, r3
 800e424:	dd41      	ble.n	800e4aa <_printf_float+0x1be>
 800e426:	f1ab 0b02 	sub.w	fp, fp, #2
 800e42a:	fa5f fb8b 	uxtb.w	fp, fp
 800e42e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e432:	d820      	bhi.n	800e476 <_printf_float+0x18a>
 800e434:	3901      	subs	r1, #1
 800e436:	465a      	mov	r2, fp
 800e438:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e43c:	9109      	str	r1, [sp, #36]	; 0x24
 800e43e:	f7ff ff17 	bl	800e270 <__exponent>
 800e442:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e444:	1813      	adds	r3, r2, r0
 800e446:	2a01      	cmp	r2, #1
 800e448:	4681      	mov	r9, r0
 800e44a:	6123      	str	r3, [r4, #16]
 800e44c:	dc02      	bgt.n	800e454 <_printf_float+0x168>
 800e44e:	6822      	ldr	r2, [r4, #0]
 800e450:	07d2      	lsls	r2, r2, #31
 800e452:	d501      	bpl.n	800e458 <_printf_float+0x16c>
 800e454:	3301      	adds	r3, #1
 800e456:	6123      	str	r3, [r4, #16]
 800e458:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d09c      	beq.n	800e39a <_printf_float+0xae>
 800e460:	232d      	movs	r3, #45	; 0x2d
 800e462:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e466:	e798      	b.n	800e39a <_printf_float+0xae>
 800e468:	9a06      	ldr	r2, [sp, #24]
 800e46a:	2a47      	cmp	r2, #71	; 0x47
 800e46c:	d1be      	bne.n	800e3ec <_printf_float+0x100>
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d1bc      	bne.n	800e3ec <_printf_float+0x100>
 800e472:	2301      	movs	r3, #1
 800e474:	e7b9      	b.n	800e3ea <_printf_float+0xfe>
 800e476:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e47a:	d118      	bne.n	800e4ae <_printf_float+0x1c2>
 800e47c:	2900      	cmp	r1, #0
 800e47e:	6863      	ldr	r3, [r4, #4]
 800e480:	dd0b      	ble.n	800e49a <_printf_float+0x1ae>
 800e482:	6121      	str	r1, [r4, #16]
 800e484:	b913      	cbnz	r3, 800e48c <_printf_float+0x1a0>
 800e486:	6822      	ldr	r2, [r4, #0]
 800e488:	07d0      	lsls	r0, r2, #31
 800e48a:	d502      	bpl.n	800e492 <_printf_float+0x1a6>
 800e48c:	3301      	adds	r3, #1
 800e48e:	440b      	add	r3, r1
 800e490:	6123      	str	r3, [r4, #16]
 800e492:	65a1      	str	r1, [r4, #88]	; 0x58
 800e494:	f04f 0900 	mov.w	r9, #0
 800e498:	e7de      	b.n	800e458 <_printf_float+0x16c>
 800e49a:	b913      	cbnz	r3, 800e4a2 <_printf_float+0x1b6>
 800e49c:	6822      	ldr	r2, [r4, #0]
 800e49e:	07d2      	lsls	r2, r2, #31
 800e4a0:	d501      	bpl.n	800e4a6 <_printf_float+0x1ba>
 800e4a2:	3302      	adds	r3, #2
 800e4a4:	e7f4      	b.n	800e490 <_printf_float+0x1a4>
 800e4a6:	2301      	movs	r3, #1
 800e4a8:	e7f2      	b.n	800e490 <_printf_float+0x1a4>
 800e4aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e4ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4b0:	4299      	cmp	r1, r3
 800e4b2:	db05      	blt.n	800e4c0 <_printf_float+0x1d4>
 800e4b4:	6823      	ldr	r3, [r4, #0]
 800e4b6:	6121      	str	r1, [r4, #16]
 800e4b8:	07d8      	lsls	r0, r3, #31
 800e4ba:	d5ea      	bpl.n	800e492 <_printf_float+0x1a6>
 800e4bc:	1c4b      	adds	r3, r1, #1
 800e4be:	e7e7      	b.n	800e490 <_printf_float+0x1a4>
 800e4c0:	2900      	cmp	r1, #0
 800e4c2:	bfd4      	ite	le
 800e4c4:	f1c1 0202 	rsble	r2, r1, #2
 800e4c8:	2201      	movgt	r2, #1
 800e4ca:	4413      	add	r3, r2
 800e4cc:	e7e0      	b.n	800e490 <_printf_float+0x1a4>
 800e4ce:	6823      	ldr	r3, [r4, #0]
 800e4d0:	055a      	lsls	r2, r3, #21
 800e4d2:	d407      	bmi.n	800e4e4 <_printf_float+0x1f8>
 800e4d4:	6923      	ldr	r3, [r4, #16]
 800e4d6:	4642      	mov	r2, r8
 800e4d8:	4631      	mov	r1, r6
 800e4da:	4628      	mov	r0, r5
 800e4dc:	47b8      	blx	r7
 800e4de:	3001      	adds	r0, #1
 800e4e0:	d12c      	bne.n	800e53c <_printf_float+0x250>
 800e4e2:	e764      	b.n	800e3ae <_printf_float+0xc2>
 800e4e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e4e8:	f240 80e0 	bls.w	800e6ac <_printf_float+0x3c0>
 800e4ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	f7f2 faf0 	bl	8000ad8 <__aeabi_dcmpeq>
 800e4f8:	2800      	cmp	r0, #0
 800e4fa:	d034      	beq.n	800e566 <_printf_float+0x27a>
 800e4fc:	4a37      	ldr	r2, [pc, #220]	; (800e5dc <_printf_float+0x2f0>)
 800e4fe:	2301      	movs	r3, #1
 800e500:	4631      	mov	r1, r6
 800e502:	4628      	mov	r0, r5
 800e504:	47b8      	blx	r7
 800e506:	3001      	adds	r0, #1
 800e508:	f43f af51 	beq.w	800e3ae <_printf_float+0xc2>
 800e50c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e510:	429a      	cmp	r2, r3
 800e512:	db02      	blt.n	800e51a <_printf_float+0x22e>
 800e514:	6823      	ldr	r3, [r4, #0]
 800e516:	07d8      	lsls	r0, r3, #31
 800e518:	d510      	bpl.n	800e53c <_printf_float+0x250>
 800e51a:	ee18 3a10 	vmov	r3, s16
 800e51e:	4652      	mov	r2, sl
 800e520:	4631      	mov	r1, r6
 800e522:	4628      	mov	r0, r5
 800e524:	47b8      	blx	r7
 800e526:	3001      	adds	r0, #1
 800e528:	f43f af41 	beq.w	800e3ae <_printf_float+0xc2>
 800e52c:	f04f 0800 	mov.w	r8, #0
 800e530:	f104 091a 	add.w	r9, r4, #26
 800e534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e536:	3b01      	subs	r3, #1
 800e538:	4543      	cmp	r3, r8
 800e53a:	dc09      	bgt.n	800e550 <_printf_float+0x264>
 800e53c:	6823      	ldr	r3, [r4, #0]
 800e53e:	079b      	lsls	r3, r3, #30
 800e540:	f100 8105 	bmi.w	800e74e <_printf_float+0x462>
 800e544:	68e0      	ldr	r0, [r4, #12]
 800e546:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e548:	4298      	cmp	r0, r3
 800e54a:	bfb8      	it	lt
 800e54c:	4618      	movlt	r0, r3
 800e54e:	e730      	b.n	800e3b2 <_printf_float+0xc6>
 800e550:	2301      	movs	r3, #1
 800e552:	464a      	mov	r2, r9
 800e554:	4631      	mov	r1, r6
 800e556:	4628      	mov	r0, r5
 800e558:	47b8      	blx	r7
 800e55a:	3001      	adds	r0, #1
 800e55c:	f43f af27 	beq.w	800e3ae <_printf_float+0xc2>
 800e560:	f108 0801 	add.w	r8, r8, #1
 800e564:	e7e6      	b.n	800e534 <_printf_float+0x248>
 800e566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e568:	2b00      	cmp	r3, #0
 800e56a:	dc39      	bgt.n	800e5e0 <_printf_float+0x2f4>
 800e56c:	4a1b      	ldr	r2, [pc, #108]	; (800e5dc <_printf_float+0x2f0>)
 800e56e:	2301      	movs	r3, #1
 800e570:	4631      	mov	r1, r6
 800e572:	4628      	mov	r0, r5
 800e574:	47b8      	blx	r7
 800e576:	3001      	adds	r0, #1
 800e578:	f43f af19 	beq.w	800e3ae <_printf_float+0xc2>
 800e57c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e580:	4313      	orrs	r3, r2
 800e582:	d102      	bne.n	800e58a <_printf_float+0x29e>
 800e584:	6823      	ldr	r3, [r4, #0]
 800e586:	07d9      	lsls	r1, r3, #31
 800e588:	d5d8      	bpl.n	800e53c <_printf_float+0x250>
 800e58a:	ee18 3a10 	vmov	r3, s16
 800e58e:	4652      	mov	r2, sl
 800e590:	4631      	mov	r1, r6
 800e592:	4628      	mov	r0, r5
 800e594:	47b8      	blx	r7
 800e596:	3001      	adds	r0, #1
 800e598:	f43f af09 	beq.w	800e3ae <_printf_float+0xc2>
 800e59c:	f04f 0900 	mov.w	r9, #0
 800e5a0:	f104 0a1a 	add.w	sl, r4, #26
 800e5a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5a6:	425b      	negs	r3, r3
 800e5a8:	454b      	cmp	r3, r9
 800e5aa:	dc01      	bgt.n	800e5b0 <_printf_float+0x2c4>
 800e5ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5ae:	e792      	b.n	800e4d6 <_printf_float+0x1ea>
 800e5b0:	2301      	movs	r3, #1
 800e5b2:	4652      	mov	r2, sl
 800e5b4:	4631      	mov	r1, r6
 800e5b6:	4628      	mov	r0, r5
 800e5b8:	47b8      	blx	r7
 800e5ba:	3001      	adds	r0, #1
 800e5bc:	f43f aef7 	beq.w	800e3ae <_printf_float+0xc2>
 800e5c0:	f109 0901 	add.w	r9, r9, #1
 800e5c4:	e7ee      	b.n	800e5a4 <_printf_float+0x2b8>
 800e5c6:	bf00      	nop
 800e5c8:	7fefffff 	.word	0x7fefffff
 800e5cc:	08011018 	.word	0x08011018
 800e5d0:	0801101c 	.word	0x0801101c
 800e5d4:	08011024 	.word	0x08011024
 800e5d8:	08011020 	.word	0x08011020
 800e5dc:	08011028 	.word	0x08011028
 800e5e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e5e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	bfa8      	it	ge
 800e5e8:	461a      	movge	r2, r3
 800e5ea:	2a00      	cmp	r2, #0
 800e5ec:	4691      	mov	r9, r2
 800e5ee:	dc37      	bgt.n	800e660 <_printf_float+0x374>
 800e5f0:	f04f 0b00 	mov.w	fp, #0
 800e5f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e5f8:	f104 021a 	add.w	r2, r4, #26
 800e5fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e5fe:	9305      	str	r3, [sp, #20]
 800e600:	eba3 0309 	sub.w	r3, r3, r9
 800e604:	455b      	cmp	r3, fp
 800e606:	dc33      	bgt.n	800e670 <_printf_float+0x384>
 800e608:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e60c:	429a      	cmp	r2, r3
 800e60e:	db3b      	blt.n	800e688 <_printf_float+0x39c>
 800e610:	6823      	ldr	r3, [r4, #0]
 800e612:	07da      	lsls	r2, r3, #31
 800e614:	d438      	bmi.n	800e688 <_printf_float+0x39c>
 800e616:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e618:	9b05      	ldr	r3, [sp, #20]
 800e61a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e61c:	1ad3      	subs	r3, r2, r3
 800e61e:	eba2 0901 	sub.w	r9, r2, r1
 800e622:	4599      	cmp	r9, r3
 800e624:	bfa8      	it	ge
 800e626:	4699      	movge	r9, r3
 800e628:	f1b9 0f00 	cmp.w	r9, #0
 800e62c:	dc35      	bgt.n	800e69a <_printf_float+0x3ae>
 800e62e:	f04f 0800 	mov.w	r8, #0
 800e632:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e636:	f104 0a1a 	add.w	sl, r4, #26
 800e63a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e63e:	1a9b      	subs	r3, r3, r2
 800e640:	eba3 0309 	sub.w	r3, r3, r9
 800e644:	4543      	cmp	r3, r8
 800e646:	f77f af79 	ble.w	800e53c <_printf_float+0x250>
 800e64a:	2301      	movs	r3, #1
 800e64c:	4652      	mov	r2, sl
 800e64e:	4631      	mov	r1, r6
 800e650:	4628      	mov	r0, r5
 800e652:	47b8      	blx	r7
 800e654:	3001      	adds	r0, #1
 800e656:	f43f aeaa 	beq.w	800e3ae <_printf_float+0xc2>
 800e65a:	f108 0801 	add.w	r8, r8, #1
 800e65e:	e7ec      	b.n	800e63a <_printf_float+0x34e>
 800e660:	4613      	mov	r3, r2
 800e662:	4631      	mov	r1, r6
 800e664:	4642      	mov	r2, r8
 800e666:	4628      	mov	r0, r5
 800e668:	47b8      	blx	r7
 800e66a:	3001      	adds	r0, #1
 800e66c:	d1c0      	bne.n	800e5f0 <_printf_float+0x304>
 800e66e:	e69e      	b.n	800e3ae <_printf_float+0xc2>
 800e670:	2301      	movs	r3, #1
 800e672:	4631      	mov	r1, r6
 800e674:	4628      	mov	r0, r5
 800e676:	9205      	str	r2, [sp, #20]
 800e678:	47b8      	blx	r7
 800e67a:	3001      	adds	r0, #1
 800e67c:	f43f ae97 	beq.w	800e3ae <_printf_float+0xc2>
 800e680:	9a05      	ldr	r2, [sp, #20]
 800e682:	f10b 0b01 	add.w	fp, fp, #1
 800e686:	e7b9      	b.n	800e5fc <_printf_float+0x310>
 800e688:	ee18 3a10 	vmov	r3, s16
 800e68c:	4652      	mov	r2, sl
 800e68e:	4631      	mov	r1, r6
 800e690:	4628      	mov	r0, r5
 800e692:	47b8      	blx	r7
 800e694:	3001      	adds	r0, #1
 800e696:	d1be      	bne.n	800e616 <_printf_float+0x32a>
 800e698:	e689      	b.n	800e3ae <_printf_float+0xc2>
 800e69a:	9a05      	ldr	r2, [sp, #20]
 800e69c:	464b      	mov	r3, r9
 800e69e:	4442      	add	r2, r8
 800e6a0:	4631      	mov	r1, r6
 800e6a2:	4628      	mov	r0, r5
 800e6a4:	47b8      	blx	r7
 800e6a6:	3001      	adds	r0, #1
 800e6a8:	d1c1      	bne.n	800e62e <_printf_float+0x342>
 800e6aa:	e680      	b.n	800e3ae <_printf_float+0xc2>
 800e6ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e6ae:	2a01      	cmp	r2, #1
 800e6b0:	dc01      	bgt.n	800e6b6 <_printf_float+0x3ca>
 800e6b2:	07db      	lsls	r3, r3, #31
 800e6b4:	d538      	bpl.n	800e728 <_printf_float+0x43c>
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	4642      	mov	r2, r8
 800e6ba:	4631      	mov	r1, r6
 800e6bc:	4628      	mov	r0, r5
 800e6be:	47b8      	blx	r7
 800e6c0:	3001      	adds	r0, #1
 800e6c2:	f43f ae74 	beq.w	800e3ae <_printf_float+0xc2>
 800e6c6:	ee18 3a10 	vmov	r3, s16
 800e6ca:	4652      	mov	r2, sl
 800e6cc:	4631      	mov	r1, r6
 800e6ce:	4628      	mov	r0, r5
 800e6d0:	47b8      	blx	r7
 800e6d2:	3001      	adds	r0, #1
 800e6d4:	f43f ae6b 	beq.w	800e3ae <_printf_float+0xc2>
 800e6d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e6dc:	2200      	movs	r2, #0
 800e6de:	2300      	movs	r3, #0
 800e6e0:	f7f2 f9fa 	bl	8000ad8 <__aeabi_dcmpeq>
 800e6e4:	b9d8      	cbnz	r0, 800e71e <_printf_float+0x432>
 800e6e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6e8:	f108 0201 	add.w	r2, r8, #1
 800e6ec:	3b01      	subs	r3, #1
 800e6ee:	4631      	mov	r1, r6
 800e6f0:	4628      	mov	r0, r5
 800e6f2:	47b8      	blx	r7
 800e6f4:	3001      	adds	r0, #1
 800e6f6:	d10e      	bne.n	800e716 <_printf_float+0x42a>
 800e6f8:	e659      	b.n	800e3ae <_printf_float+0xc2>
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	4652      	mov	r2, sl
 800e6fe:	4631      	mov	r1, r6
 800e700:	4628      	mov	r0, r5
 800e702:	47b8      	blx	r7
 800e704:	3001      	adds	r0, #1
 800e706:	f43f ae52 	beq.w	800e3ae <_printf_float+0xc2>
 800e70a:	f108 0801 	add.w	r8, r8, #1
 800e70e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e710:	3b01      	subs	r3, #1
 800e712:	4543      	cmp	r3, r8
 800e714:	dcf1      	bgt.n	800e6fa <_printf_float+0x40e>
 800e716:	464b      	mov	r3, r9
 800e718:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e71c:	e6dc      	b.n	800e4d8 <_printf_float+0x1ec>
 800e71e:	f04f 0800 	mov.w	r8, #0
 800e722:	f104 0a1a 	add.w	sl, r4, #26
 800e726:	e7f2      	b.n	800e70e <_printf_float+0x422>
 800e728:	2301      	movs	r3, #1
 800e72a:	4642      	mov	r2, r8
 800e72c:	e7df      	b.n	800e6ee <_printf_float+0x402>
 800e72e:	2301      	movs	r3, #1
 800e730:	464a      	mov	r2, r9
 800e732:	4631      	mov	r1, r6
 800e734:	4628      	mov	r0, r5
 800e736:	47b8      	blx	r7
 800e738:	3001      	adds	r0, #1
 800e73a:	f43f ae38 	beq.w	800e3ae <_printf_float+0xc2>
 800e73e:	f108 0801 	add.w	r8, r8, #1
 800e742:	68e3      	ldr	r3, [r4, #12]
 800e744:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e746:	1a5b      	subs	r3, r3, r1
 800e748:	4543      	cmp	r3, r8
 800e74a:	dcf0      	bgt.n	800e72e <_printf_float+0x442>
 800e74c:	e6fa      	b.n	800e544 <_printf_float+0x258>
 800e74e:	f04f 0800 	mov.w	r8, #0
 800e752:	f104 0919 	add.w	r9, r4, #25
 800e756:	e7f4      	b.n	800e742 <_printf_float+0x456>

0800e758 <_printf_common>:
 800e758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e75c:	4616      	mov	r6, r2
 800e75e:	4699      	mov	r9, r3
 800e760:	688a      	ldr	r2, [r1, #8]
 800e762:	690b      	ldr	r3, [r1, #16]
 800e764:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e768:	4293      	cmp	r3, r2
 800e76a:	bfb8      	it	lt
 800e76c:	4613      	movlt	r3, r2
 800e76e:	6033      	str	r3, [r6, #0]
 800e770:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e774:	4607      	mov	r7, r0
 800e776:	460c      	mov	r4, r1
 800e778:	b10a      	cbz	r2, 800e77e <_printf_common+0x26>
 800e77a:	3301      	adds	r3, #1
 800e77c:	6033      	str	r3, [r6, #0]
 800e77e:	6823      	ldr	r3, [r4, #0]
 800e780:	0699      	lsls	r1, r3, #26
 800e782:	bf42      	ittt	mi
 800e784:	6833      	ldrmi	r3, [r6, #0]
 800e786:	3302      	addmi	r3, #2
 800e788:	6033      	strmi	r3, [r6, #0]
 800e78a:	6825      	ldr	r5, [r4, #0]
 800e78c:	f015 0506 	ands.w	r5, r5, #6
 800e790:	d106      	bne.n	800e7a0 <_printf_common+0x48>
 800e792:	f104 0a19 	add.w	sl, r4, #25
 800e796:	68e3      	ldr	r3, [r4, #12]
 800e798:	6832      	ldr	r2, [r6, #0]
 800e79a:	1a9b      	subs	r3, r3, r2
 800e79c:	42ab      	cmp	r3, r5
 800e79e:	dc26      	bgt.n	800e7ee <_printf_common+0x96>
 800e7a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e7a4:	1e13      	subs	r3, r2, #0
 800e7a6:	6822      	ldr	r2, [r4, #0]
 800e7a8:	bf18      	it	ne
 800e7aa:	2301      	movne	r3, #1
 800e7ac:	0692      	lsls	r2, r2, #26
 800e7ae:	d42b      	bmi.n	800e808 <_printf_common+0xb0>
 800e7b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e7b4:	4649      	mov	r1, r9
 800e7b6:	4638      	mov	r0, r7
 800e7b8:	47c0      	blx	r8
 800e7ba:	3001      	adds	r0, #1
 800e7bc:	d01e      	beq.n	800e7fc <_printf_common+0xa4>
 800e7be:	6823      	ldr	r3, [r4, #0]
 800e7c0:	68e5      	ldr	r5, [r4, #12]
 800e7c2:	6832      	ldr	r2, [r6, #0]
 800e7c4:	f003 0306 	and.w	r3, r3, #6
 800e7c8:	2b04      	cmp	r3, #4
 800e7ca:	bf08      	it	eq
 800e7cc:	1aad      	subeq	r5, r5, r2
 800e7ce:	68a3      	ldr	r3, [r4, #8]
 800e7d0:	6922      	ldr	r2, [r4, #16]
 800e7d2:	bf0c      	ite	eq
 800e7d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e7d8:	2500      	movne	r5, #0
 800e7da:	4293      	cmp	r3, r2
 800e7dc:	bfc4      	itt	gt
 800e7de:	1a9b      	subgt	r3, r3, r2
 800e7e0:	18ed      	addgt	r5, r5, r3
 800e7e2:	2600      	movs	r6, #0
 800e7e4:	341a      	adds	r4, #26
 800e7e6:	42b5      	cmp	r5, r6
 800e7e8:	d11a      	bne.n	800e820 <_printf_common+0xc8>
 800e7ea:	2000      	movs	r0, #0
 800e7ec:	e008      	b.n	800e800 <_printf_common+0xa8>
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	4652      	mov	r2, sl
 800e7f2:	4649      	mov	r1, r9
 800e7f4:	4638      	mov	r0, r7
 800e7f6:	47c0      	blx	r8
 800e7f8:	3001      	adds	r0, #1
 800e7fa:	d103      	bne.n	800e804 <_printf_common+0xac>
 800e7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e804:	3501      	adds	r5, #1
 800e806:	e7c6      	b.n	800e796 <_printf_common+0x3e>
 800e808:	18e1      	adds	r1, r4, r3
 800e80a:	1c5a      	adds	r2, r3, #1
 800e80c:	2030      	movs	r0, #48	; 0x30
 800e80e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e812:	4422      	add	r2, r4
 800e814:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e818:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e81c:	3302      	adds	r3, #2
 800e81e:	e7c7      	b.n	800e7b0 <_printf_common+0x58>
 800e820:	2301      	movs	r3, #1
 800e822:	4622      	mov	r2, r4
 800e824:	4649      	mov	r1, r9
 800e826:	4638      	mov	r0, r7
 800e828:	47c0      	blx	r8
 800e82a:	3001      	adds	r0, #1
 800e82c:	d0e6      	beq.n	800e7fc <_printf_common+0xa4>
 800e82e:	3601      	adds	r6, #1
 800e830:	e7d9      	b.n	800e7e6 <_printf_common+0x8e>
	...

0800e834 <_printf_i>:
 800e834:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e838:	460c      	mov	r4, r1
 800e83a:	4691      	mov	r9, r2
 800e83c:	7e27      	ldrb	r7, [r4, #24]
 800e83e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e840:	2f78      	cmp	r7, #120	; 0x78
 800e842:	4680      	mov	r8, r0
 800e844:	469a      	mov	sl, r3
 800e846:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e84a:	d807      	bhi.n	800e85c <_printf_i+0x28>
 800e84c:	2f62      	cmp	r7, #98	; 0x62
 800e84e:	d80a      	bhi.n	800e866 <_printf_i+0x32>
 800e850:	2f00      	cmp	r7, #0
 800e852:	f000 80d8 	beq.w	800ea06 <_printf_i+0x1d2>
 800e856:	2f58      	cmp	r7, #88	; 0x58
 800e858:	f000 80a3 	beq.w	800e9a2 <_printf_i+0x16e>
 800e85c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e860:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e864:	e03a      	b.n	800e8dc <_printf_i+0xa8>
 800e866:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e86a:	2b15      	cmp	r3, #21
 800e86c:	d8f6      	bhi.n	800e85c <_printf_i+0x28>
 800e86e:	a001      	add	r0, pc, #4	; (adr r0, 800e874 <_printf_i+0x40>)
 800e870:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e874:	0800e8cd 	.word	0x0800e8cd
 800e878:	0800e8e1 	.word	0x0800e8e1
 800e87c:	0800e85d 	.word	0x0800e85d
 800e880:	0800e85d 	.word	0x0800e85d
 800e884:	0800e85d 	.word	0x0800e85d
 800e888:	0800e85d 	.word	0x0800e85d
 800e88c:	0800e8e1 	.word	0x0800e8e1
 800e890:	0800e85d 	.word	0x0800e85d
 800e894:	0800e85d 	.word	0x0800e85d
 800e898:	0800e85d 	.word	0x0800e85d
 800e89c:	0800e85d 	.word	0x0800e85d
 800e8a0:	0800e9ed 	.word	0x0800e9ed
 800e8a4:	0800e911 	.word	0x0800e911
 800e8a8:	0800e9cf 	.word	0x0800e9cf
 800e8ac:	0800e85d 	.word	0x0800e85d
 800e8b0:	0800e85d 	.word	0x0800e85d
 800e8b4:	0800ea0f 	.word	0x0800ea0f
 800e8b8:	0800e85d 	.word	0x0800e85d
 800e8bc:	0800e911 	.word	0x0800e911
 800e8c0:	0800e85d 	.word	0x0800e85d
 800e8c4:	0800e85d 	.word	0x0800e85d
 800e8c8:	0800e9d7 	.word	0x0800e9d7
 800e8cc:	680b      	ldr	r3, [r1, #0]
 800e8ce:	1d1a      	adds	r2, r3, #4
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	600a      	str	r2, [r1, #0]
 800e8d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e8d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e8dc:	2301      	movs	r3, #1
 800e8de:	e0a3      	b.n	800ea28 <_printf_i+0x1f4>
 800e8e0:	6825      	ldr	r5, [r4, #0]
 800e8e2:	6808      	ldr	r0, [r1, #0]
 800e8e4:	062e      	lsls	r6, r5, #24
 800e8e6:	f100 0304 	add.w	r3, r0, #4
 800e8ea:	d50a      	bpl.n	800e902 <_printf_i+0xce>
 800e8ec:	6805      	ldr	r5, [r0, #0]
 800e8ee:	600b      	str	r3, [r1, #0]
 800e8f0:	2d00      	cmp	r5, #0
 800e8f2:	da03      	bge.n	800e8fc <_printf_i+0xc8>
 800e8f4:	232d      	movs	r3, #45	; 0x2d
 800e8f6:	426d      	negs	r5, r5
 800e8f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8fc:	485e      	ldr	r0, [pc, #376]	; (800ea78 <_printf_i+0x244>)
 800e8fe:	230a      	movs	r3, #10
 800e900:	e019      	b.n	800e936 <_printf_i+0x102>
 800e902:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e906:	6805      	ldr	r5, [r0, #0]
 800e908:	600b      	str	r3, [r1, #0]
 800e90a:	bf18      	it	ne
 800e90c:	b22d      	sxthne	r5, r5
 800e90e:	e7ef      	b.n	800e8f0 <_printf_i+0xbc>
 800e910:	680b      	ldr	r3, [r1, #0]
 800e912:	6825      	ldr	r5, [r4, #0]
 800e914:	1d18      	adds	r0, r3, #4
 800e916:	6008      	str	r0, [r1, #0]
 800e918:	0628      	lsls	r0, r5, #24
 800e91a:	d501      	bpl.n	800e920 <_printf_i+0xec>
 800e91c:	681d      	ldr	r5, [r3, #0]
 800e91e:	e002      	b.n	800e926 <_printf_i+0xf2>
 800e920:	0669      	lsls	r1, r5, #25
 800e922:	d5fb      	bpl.n	800e91c <_printf_i+0xe8>
 800e924:	881d      	ldrh	r5, [r3, #0]
 800e926:	4854      	ldr	r0, [pc, #336]	; (800ea78 <_printf_i+0x244>)
 800e928:	2f6f      	cmp	r7, #111	; 0x6f
 800e92a:	bf0c      	ite	eq
 800e92c:	2308      	moveq	r3, #8
 800e92e:	230a      	movne	r3, #10
 800e930:	2100      	movs	r1, #0
 800e932:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e936:	6866      	ldr	r6, [r4, #4]
 800e938:	60a6      	str	r6, [r4, #8]
 800e93a:	2e00      	cmp	r6, #0
 800e93c:	bfa2      	ittt	ge
 800e93e:	6821      	ldrge	r1, [r4, #0]
 800e940:	f021 0104 	bicge.w	r1, r1, #4
 800e944:	6021      	strge	r1, [r4, #0]
 800e946:	b90d      	cbnz	r5, 800e94c <_printf_i+0x118>
 800e948:	2e00      	cmp	r6, #0
 800e94a:	d04d      	beq.n	800e9e8 <_printf_i+0x1b4>
 800e94c:	4616      	mov	r6, r2
 800e94e:	fbb5 f1f3 	udiv	r1, r5, r3
 800e952:	fb03 5711 	mls	r7, r3, r1, r5
 800e956:	5dc7      	ldrb	r7, [r0, r7]
 800e958:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e95c:	462f      	mov	r7, r5
 800e95e:	42bb      	cmp	r3, r7
 800e960:	460d      	mov	r5, r1
 800e962:	d9f4      	bls.n	800e94e <_printf_i+0x11a>
 800e964:	2b08      	cmp	r3, #8
 800e966:	d10b      	bne.n	800e980 <_printf_i+0x14c>
 800e968:	6823      	ldr	r3, [r4, #0]
 800e96a:	07df      	lsls	r7, r3, #31
 800e96c:	d508      	bpl.n	800e980 <_printf_i+0x14c>
 800e96e:	6923      	ldr	r3, [r4, #16]
 800e970:	6861      	ldr	r1, [r4, #4]
 800e972:	4299      	cmp	r1, r3
 800e974:	bfde      	ittt	le
 800e976:	2330      	movle	r3, #48	; 0x30
 800e978:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e97c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e980:	1b92      	subs	r2, r2, r6
 800e982:	6122      	str	r2, [r4, #16]
 800e984:	f8cd a000 	str.w	sl, [sp]
 800e988:	464b      	mov	r3, r9
 800e98a:	aa03      	add	r2, sp, #12
 800e98c:	4621      	mov	r1, r4
 800e98e:	4640      	mov	r0, r8
 800e990:	f7ff fee2 	bl	800e758 <_printf_common>
 800e994:	3001      	adds	r0, #1
 800e996:	d14c      	bne.n	800ea32 <_printf_i+0x1fe>
 800e998:	f04f 30ff 	mov.w	r0, #4294967295
 800e99c:	b004      	add	sp, #16
 800e99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9a2:	4835      	ldr	r0, [pc, #212]	; (800ea78 <_printf_i+0x244>)
 800e9a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e9a8:	6823      	ldr	r3, [r4, #0]
 800e9aa:	680e      	ldr	r6, [r1, #0]
 800e9ac:	061f      	lsls	r7, r3, #24
 800e9ae:	f856 5b04 	ldr.w	r5, [r6], #4
 800e9b2:	600e      	str	r6, [r1, #0]
 800e9b4:	d514      	bpl.n	800e9e0 <_printf_i+0x1ac>
 800e9b6:	07d9      	lsls	r1, r3, #31
 800e9b8:	bf44      	itt	mi
 800e9ba:	f043 0320 	orrmi.w	r3, r3, #32
 800e9be:	6023      	strmi	r3, [r4, #0]
 800e9c0:	b91d      	cbnz	r5, 800e9ca <_printf_i+0x196>
 800e9c2:	6823      	ldr	r3, [r4, #0]
 800e9c4:	f023 0320 	bic.w	r3, r3, #32
 800e9c8:	6023      	str	r3, [r4, #0]
 800e9ca:	2310      	movs	r3, #16
 800e9cc:	e7b0      	b.n	800e930 <_printf_i+0xfc>
 800e9ce:	6823      	ldr	r3, [r4, #0]
 800e9d0:	f043 0320 	orr.w	r3, r3, #32
 800e9d4:	6023      	str	r3, [r4, #0]
 800e9d6:	2378      	movs	r3, #120	; 0x78
 800e9d8:	4828      	ldr	r0, [pc, #160]	; (800ea7c <_printf_i+0x248>)
 800e9da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e9de:	e7e3      	b.n	800e9a8 <_printf_i+0x174>
 800e9e0:	065e      	lsls	r6, r3, #25
 800e9e2:	bf48      	it	mi
 800e9e4:	b2ad      	uxthmi	r5, r5
 800e9e6:	e7e6      	b.n	800e9b6 <_printf_i+0x182>
 800e9e8:	4616      	mov	r6, r2
 800e9ea:	e7bb      	b.n	800e964 <_printf_i+0x130>
 800e9ec:	680b      	ldr	r3, [r1, #0]
 800e9ee:	6826      	ldr	r6, [r4, #0]
 800e9f0:	6960      	ldr	r0, [r4, #20]
 800e9f2:	1d1d      	adds	r5, r3, #4
 800e9f4:	600d      	str	r5, [r1, #0]
 800e9f6:	0635      	lsls	r5, r6, #24
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	d501      	bpl.n	800ea00 <_printf_i+0x1cc>
 800e9fc:	6018      	str	r0, [r3, #0]
 800e9fe:	e002      	b.n	800ea06 <_printf_i+0x1d2>
 800ea00:	0671      	lsls	r1, r6, #25
 800ea02:	d5fb      	bpl.n	800e9fc <_printf_i+0x1c8>
 800ea04:	8018      	strh	r0, [r3, #0]
 800ea06:	2300      	movs	r3, #0
 800ea08:	6123      	str	r3, [r4, #16]
 800ea0a:	4616      	mov	r6, r2
 800ea0c:	e7ba      	b.n	800e984 <_printf_i+0x150>
 800ea0e:	680b      	ldr	r3, [r1, #0]
 800ea10:	1d1a      	adds	r2, r3, #4
 800ea12:	600a      	str	r2, [r1, #0]
 800ea14:	681e      	ldr	r6, [r3, #0]
 800ea16:	6862      	ldr	r2, [r4, #4]
 800ea18:	2100      	movs	r1, #0
 800ea1a:	4630      	mov	r0, r6
 800ea1c:	f7f1 fbe8 	bl	80001f0 <memchr>
 800ea20:	b108      	cbz	r0, 800ea26 <_printf_i+0x1f2>
 800ea22:	1b80      	subs	r0, r0, r6
 800ea24:	6060      	str	r0, [r4, #4]
 800ea26:	6863      	ldr	r3, [r4, #4]
 800ea28:	6123      	str	r3, [r4, #16]
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea30:	e7a8      	b.n	800e984 <_printf_i+0x150>
 800ea32:	6923      	ldr	r3, [r4, #16]
 800ea34:	4632      	mov	r2, r6
 800ea36:	4649      	mov	r1, r9
 800ea38:	4640      	mov	r0, r8
 800ea3a:	47d0      	blx	sl
 800ea3c:	3001      	adds	r0, #1
 800ea3e:	d0ab      	beq.n	800e998 <_printf_i+0x164>
 800ea40:	6823      	ldr	r3, [r4, #0]
 800ea42:	079b      	lsls	r3, r3, #30
 800ea44:	d413      	bmi.n	800ea6e <_printf_i+0x23a>
 800ea46:	68e0      	ldr	r0, [r4, #12]
 800ea48:	9b03      	ldr	r3, [sp, #12]
 800ea4a:	4298      	cmp	r0, r3
 800ea4c:	bfb8      	it	lt
 800ea4e:	4618      	movlt	r0, r3
 800ea50:	e7a4      	b.n	800e99c <_printf_i+0x168>
 800ea52:	2301      	movs	r3, #1
 800ea54:	4632      	mov	r2, r6
 800ea56:	4649      	mov	r1, r9
 800ea58:	4640      	mov	r0, r8
 800ea5a:	47d0      	blx	sl
 800ea5c:	3001      	adds	r0, #1
 800ea5e:	d09b      	beq.n	800e998 <_printf_i+0x164>
 800ea60:	3501      	adds	r5, #1
 800ea62:	68e3      	ldr	r3, [r4, #12]
 800ea64:	9903      	ldr	r1, [sp, #12]
 800ea66:	1a5b      	subs	r3, r3, r1
 800ea68:	42ab      	cmp	r3, r5
 800ea6a:	dcf2      	bgt.n	800ea52 <_printf_i+0x21e>
 800ea6c:	e7eb      	b.n	800ea46 <_printf_i+0x212>
 800ea6e:	2500      	movs	r5, #0
 800ea70:	f104 0619 	add.w	r6, r4, #25
 800ea74:	e7f5      	b.n	800ea62 <_printf_i+0x22e>
 800ea76:	bf00      	nop
 800ea78:	0801102a 	.word	0x0801102a
 800ea7c:	0801103b 	.word	0x0801103b

0800ea80 <siprintf>:
 800ea80:	b40e      	push	{r1, r2, r3}
 800ea82:	b500      	push	{lr}
 800ea84:	b09c      	sub	sp, #112	; 0x70
 800ea86:	ab1d      	add	r3, sp, #116	; 0x74
 800ea88:	9002      	str	r0, [sp, #8]
 800ea8a:	9006      	str	r0, [sp, #24]
 800ea8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ea90:	4809      	ldr	r0, [pc, #36]	; (800eab8 <siprintf+0x38>)
 800ea92:	9107      	str	r1, [sp, #28]
 800ea94:	9104      	str	r1, [sp, #16]
 800ea96:	4909      	ldr	r1, [pc, #36]	; (800eabc <siprintf+0x3c>)
 800ea98:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea9c:	9105      	str	r1, [sp, #20]
 800ea9e:	6800      	ldr	r0, [r0, #0]
 800eaa0:	9301      	str	r3, [sp, #4]
 800eaa2:	a902      	add	r1, sp, #8
 800eaa4:	f001 fb32 	bl	801010c <_svfiprintf_r>
 800eaa8:	9b02      	ldr	r3, [sp, #8]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	701a      	strb	r2, [r3, #0]
 800eaae:	b01c      	add	sp, #112	; 0x70
 800eab0:	f85d eb04 	ldr.w	lr, [sp], #4
 800eab4:	b003      	add	sp, #12
 800eab6:	4770      	bx	lr
 800eab8:	20000180 	.word	0x20000180
 800eabc:	ffff0208 	.word	0xffff0208

0800eac0 <quorem>:
 800eac0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eac4:	6903      	ldr	r3, [r0, #16]
 800eac6:	690c      	ldr	r4, [r1, #16]
 800eac8:	42a3      	cmp	r3, r4
 800eaca:	4607      	mov	r7, r0
 800eacc:	f2c0 8081 	blt.w	800ebd2 <quorem+0x112>
 800ead0:	3c01      	subs	r4, #1
 800ead2:	f101 0814 	add.w	r8, r1, #20
 800ead6:	f100 0514 	add.w	r5, r0, #20
 800eada:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eade:	9301      	str	r3, [sp, #4]
 800eae0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800eae4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eae8:	3301      	adds	r3, #1
 800eaea:	429a      	cmp	r2, r3
 800eaec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800eaf0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800eaf4:	fbb2 f6f3 	udiv	r6, r2, r3
 800eaf8:	d331      	bcc.n	800eb5e <quorem+0x9e>
 800eafa:	f04f 0e00 	mov.w	lr, #0
 800eafe:	4640      	mov	r0, r8
 800eb00:	46ac      	mov	ip, r5
 800eb02:	46f2      	mov	sl, lr
 800eb04:	f850 2b04 	ldr.w	r2, [r0], #4
 800eb08:	b293      	uxth	r3, r2
 800eb0a:	fb06 e303 	mla	r3, r6, r3, lr
 800eb0e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800eb12:	b29b      	uxth	r3, r3
 800eb14:	ebaa 0303 	sub.w	r3, sl, r3
 800eb18:	0c12      	lsrs	r2, r2, #16
 800eb1a:	f8dc a000 	ldr.w	sl, [ip]
 800eb1e:	fb06 e202 	mla	r2, r6, r2, lr
 800eb22:	fa13 f38a 	uxtah	r3, r3, sl
 800eb26:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800eb2a:	fa1f fa82 	uxth.w	sl, r2
 800eb2e:	f8dc 2000 	ldr.w	r2, [ip]
 800eb32:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800eb36:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eb3a:	b29b      	uxth	r3, r3
 800eb3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eb40:	4581      	cmp	r9, r0
 800eb42:	f84c 3b04 	str.w	r3, [ip], #4
 800eb46:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800eb4a:	d2db      	bcs.n	800eb04 <quorem+0x44>
 800eb4c:	f855 300b 	ldr.w	r3, [r5, fp]
 800eb50:	b92b      	cbnz	r3, 800eb5e <quorem+0x9e>
 800eb52:	9b01      	ldr	r3, [sp, #4]
 800eb54:	3b04      	subs	r3, #4
 800eb56:	429d      	cmp	r5, r3
 800eb58:	461a      	mov	r2, r3
 800eb5a:	d32e      	bcc.n	800ebba <quorem+0xfa>
 800eb5c:	613c      	str	r4, [r7, #16]
 800eb5e:	4638      	mov	r0, r7
 800eb60:	f001 f8be 	bl	800fce0 <__mcmp>
 800eb64:	2800      	cmp	r0, #0
 800eb66:	db24      	blt.n	800ebb2 <quorem+0xf2>
 800eb68:	3601      	adds	r6, #1
 800eb6a:	4628      	mov	r0, r5
 800eb6c:	f04f 0c00 	mov.w	ip, #0
 800eb70:	f858 2b04 	ldr.w	r2, [r8], #4
 800eb74:	f8d0 e000 	ldr.w	lr, [r0]
 800eb78:	b293      	uxth	r3, r2
 800eb7a:	ebac 0303 	sub.w	r3, ip, r3
 800eb7e:	0c12      	lsrs	r2, r2, #16
 800eb80:	fa13 f38e 	uxtah	r3, r3, lr
 800eb84:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800eb88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eb8c:	b29b      	uxth	r3, r3
 800eb8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eb92:	45c1      	cmp	r9, r8
 800eb94:	f840 3b04 	str.w	r3, [r0], #4
 800eb98:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800eb9c:	d2e8      	bcs.n	800eb70 <quorem+0xb0>
 800eb9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eba2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eba6:	b922      	cbnz	r2, 800ebb2 <quorem+0xf2>
 800eba8:	3b04      	subs	r3, #4
 800ebaa:	429d      	cmp	r5, r3
 800ebac:	461a      	mov	r2, r3
 800ebae:	d30a      	bcc.n	800ebc6 <quorem+0x106>
 800ebb0:	613c      	str	r4, [r7, #16]
 800ebb2:	4630      	mov	r0, r6
 800ebb4:	b003      	add	sp, #12
 800ebb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebba:	6812      	ldr	r2, [r2, #0]
 800ebbc:	3b04      	subs	r3, #4
 800ebbe:	2a00      	cmp	r2, #0
 800ebc0:	d1cc      	bne.n	800eb5c <quorem+0x9c>
 800ebc2:	3c01      	subs	r4, #1
 800ebc4:	e7c7      	b.n	800eb56 <quorem+0x96>
 800ebc6:	6812      	ldr	r2, [r2, #0]
 800ebc8:	3b04      	subs	r3, #4
 800ebca:	2a00      	cmp	r2, #0
 800ebcc:	d1f0      	bne.n	800ebb0 <quorem+0xf0>
 800ebce:	3c01      	subs	r4, #1
 800ebd0:	e7eb      	b.n	800ebaa <quorem+0xea>
 800ebd2:	2000      	movs	r0, #0
 800ebd4:	e7ee      	b.n	800ebb4 <quorem+0xf4>
	...

0800ebd8 <_dtoa_r>:
 800ebd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebdc:	ed2d 8b02 	vpush	{d8}
 800ebe0:	ec57 6b10 	vmov	r6, r7, d0
 800ebe4:	b095      	sub	sp, #84	; 0x54
 800ebe6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ebe8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ebec:	9105      	str	r1, [sp, #20]
 800ebee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ebf2:	4604      	mov	r4, r0
 800ebf4:	9209      	str	r2, [sp, #36]	; 0x24
 800ebf6:	930f      	str	r3, [sp, #60]	; 0x3c
 800ebf8:	b975      	cbnz	r5, 800ec18 <_dtoa_r+0x40>
 800ebfa:	2010      	movs	r0, #16
 800ebfc:	f000 fddc 	bl	800f7b8 <malloc>
 800ec00:	4602      	mov	r2, r0
 800ec02:	6260      	str	r0, [r4, #36]	; 0x24
 800ec04:	b920      	cbnz	r0, 800ec10 <_dtoa_r+0x38>
 800ec06:	4bb2      	ldr	r3, [pc, #712]	; (800eed0 <_dtoa_r+0x2f8>)
 800ec08:	21ea      	movs	r1, #234	; 0xea
 800ec0a:	48b2      	ldr	r0, [pc, #712]	; (800eed4 <_dtoa_r+0x2fc>)
 800ec0c:	f001 fb8e 	bl	801032c <__assert_func>
 800ec10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ec14:	6005      	str	r5, [r0, #0]
 800ec16:	60c5      	str	r5, [r0, #12]
 800ec18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec1a:	6819      	ldr	r1, [r3, #0]
 800ec1c:	b151      	cbz	r1, 800ec34 <_dtoa_r+0x5c>
 800ec1e:	685a      	ldr	r2, [r3, #4]
 800ec20:	604a      	str	r2, [r1, #4]
 800ec22:	2301      	movs	r3, #1
 800ec24:	4093      	lsls	r3, r2
 800ec26:	608b      	str	r3, [r1, #8]
 800ec28:	4620      	mov	r0, r4
 800ec2a:	f000 fe1b 	bl	800f864 <_Bfree>
 800ec2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec30:	2200      	movs	r2, #0
 800ec32:	601a      	str	r2, [r3, #0]
 800ec34:	1e3b      	subs	r3, r7, #0
 800ec36:	bfb9      	ittee	lt
 800ec38:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ec3c:	9303      	strlt	r3, [sp, #12]
 800ec3e:	2300      	movge	r3, #0
 800ec40:	f8c8 3000 	strge.w	r3, [r8]
 800ec44:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ec48:	4ba3      	ldr	r3, [pc, #652]	; (800eed8 <_dtoa_r+0x300>)
 800ec4a:	bfbc      	itt	lt
 800ec4c:	2201      	movlt	r2, #1
 800ec4e:	f8c8 2000 	strlt.w	r2, [r8]
 800ec52:	ea33 0309 	bics.w	r3, r3, r9
 800ec56:	d11b      	bne.n	800ec90 <_dtoa_r+0xb8>
 800ec58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ec5a:	f242 730f 	movw	r3, #9999	; 0x270f
 800ec5e:	6013      	str	r3, [r2, #0]
 800ec60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ec64:	4333      	orrs	r3, r6
 800ec66:	f000 857a 	beq.w	800f75e <_dtoa_r+0xb86>
 800ec6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec6c:	b963      	cbnz	r3, 800ec88 <_dtoa_r+0xb0>
 800ec6e:	4b9b      	ldr	r3, [pc, #620]	; (800eedc <_dtoa_r+0x304>)
 800ec70:	e024      	b.n	800ecbc <_dtoa_r+0xe4>
 800ec72:	4b9b      	ldr	r3, [pc, #620]	; (800eee0 <_dtoa_r+0x308>)
 800ec74:	9300      	str	r3, [sp, #0]
 800ec76:	3308      	adds	r3, #8
 800ec78:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ec7a:	6013      	str	r3, [r2, #0]
 800ec7c:	9800      	ldr	r0, [sp, #0]
 800ec7e:	b015      	add	sp, #84	; 0x54
 800ec80:	ecbd 8b02 	vpop	{d8}
 800ec84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec88:	4b94      	ldr	r3, [pc, #592]	; (800eedc <_dtoa_r+0x304>)
 800ec8a:	9300      	str	r3, [sp, #0]
 800ec8c:	3303      	adds	r3, #3
 800ec8e:	e7f3      	b.n	800ec78 <_dtoa_r+0xa0>
 800ec90:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ec94:	2200      	movs	r2, #0
 800ec96:	ec51 0b17 	vmov	r0, r1, d7
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800eca0:	f7f1 ff1a 	bl	8000ad8 <__aeabi_dcmpeq>
 800eca4:	4680      	mov	r8, r0
 800eca6:	b158      	cbz	r0, 800ecc0 <_dtoa_r+0xe8>
 800eca8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ecaa:	2301      	movs	r3, #1
 800ecac:	6013      	str	r3, [r2, #0]
 800ecae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	f000 8551 	beq.w	800f758 <_dtoa_r+0xb80>
 800ecb6:	488b      	ldr	r0, [pc, #556]	; (800eee4 <_dtoa_r+0x30c>)
 800ecb8:	6018      	str	r0, [r3, #0]
 800ecba:	1e43      	subs	r3, r0, #1
 800ecbc:	9300      	str	r3, [sp, #0]
 800ecbe:	e7dd      	b.n	800ec7c <_dtoa_r+0xa4>
 800ecc0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ecc4:	aa12      	add	r2, sp, #72	; 0x48
 800ecc6:	a913      	add	r1, sp, #76	; 0x4c
 800ecc8:	4620      	mov	r0, r4
 800ecca:	f001 f8ad 	bl	800fe28 <__d2b>
 800ecce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ecd2:	4683      	mov	fp, r0
 800ecd4:	2d00      	cmp	r5, #0
 800ecd6:	d07c      	beq.n	800edd2 <_dtoa_r+0x1fa>
 800ecd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ecda:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800ecde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ece2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800ece6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ecea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ecee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ecf2:	4b7d      	ldr	r3, [pc, #500]	; (800eee8 <_dtoa_r+0x310>)
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	4630      	mov	r0, r6
 800ecf8:	4639      	mov	r1, r7
 800ecfa:	f7f1 facd 	bl	8000298 <__aeabi_dsub>
 800ecfe:	a36e      	add	r3, pc, #440	; (adr r3, 800eeb8 <_dtoa_r+0x2e0>)
 800ed00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed04:	f7f1 fc80 	bl	8000608 <__aeabi_dmul>
 800ed08:	a36d      	add	r3, pc, #436	; (adr r3, 800eec0 <_dtoa_r+0x2e8>)
 800ed0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed0e:	f7f1 fac5 	bl	800029c <__adddf3>
 800ed12:	4606      	mov	r6, r0
 800ed14:	4628      	mov	r0, r5
 800ed16:	460f      	mov	r7, r1
 800ed18:	f7f1 fc0c 	bl	8000534 <__aeabi_i2d>
 800ed1c:	a36a      	add	r3, pc, #424	; (adr r3, 800eec8 <_dtoa_r+0x2f0>)
 800ed1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed22:	f7f1 fc71 	bl	8000608 <__aeabi_dmul>
 800ed26:	4602      	mov	r2, r0
 800ed28:	460b      	mov	r3, r1
 800ed2a:	4630      	mov	r0, r6
 800ed2c:	4639      	mov	r1, r7
 800ed2e:	f7f1 fab5 	bl	800029c <__adddf3>
 800ed32:	4606      	mov	r6, r0
 800ed34:	460f      	mov	r7, r1
 800ed36:	f7f1 ff17 	bl	8000b68 <__aeabi_d2iz>
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	4682      	mov	sl, r0
 800ed3e:	2300      	movs	r3, #0
 800ed40:	4630      	mov	r0, r6
 800ed42:	4639      	mov	r1, r7
 800ed44:	f7f1 fed2 	bl	8000aec <__aeabi_dcmplt>
 800ed48:	b148      	cbz	r0, 800ed5e <_dtoa_r+0x186>
 800ed4a:	4650      	mov	r0, sl
 800ed4c:	f7f1 fbf2 	bl	8000534 <__aeabi_i2d>
 800ed50:	4632      	mov	r2, r6
 800ed52:	463b      	mov	r3, r7
 800ed54:	f7f1 fec0 	bl	8000ad8 <__aeabi_dcmpeq>
 800ed58:	b908      	cbnz	r0, 800ed5e <_dtoa_r+0x186>
 800ed5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ed5e:	f1ba 0f16 	cmp.w	sl, #22
 800ed62:	d854      	bhi.n	800ee0e <_dtoa_r+0x236>
 800ed64:	4b61      	ldr	r3, [pc, #388]	; (800eeec <_dtoa_r+0x314>)
 800ed66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ed6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ed72:	f7f1 febb 	bl	8000aec <__aeabi_dcmplt>
 800ed76:	2800      	cmp	r0, #0
 800ed78:	d04b      	beq.n	800ee12 <_dtoa_r+0x23a>
 800ed7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ed7e:	2300      	movs	r3, #0
 800ed80:	930e      	str	r3, [sp, #56]	; 0x38
 800ed82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ed84:	1b5d      	subs	r5, r3, r5
 800ed86:	1e6b      	subs	r3, r5, #1
 800ed88:	9304      	str	r3, [sp, #16]
 800ed8a:	bf43      	ittte	mi
 800ed8c:	2300      	movmi	r3, #0
 800ed8e:	f1c5 0801 	rsbmi	r8, r5, #1
 800ed92:	9304      	strmi	r3, [sp, #16]
 800ed94:	f04f 0800 	movpl.w	r8, #0
 800ed98:	f1ba 0f00 	cmp.w	sl, #0
 800ed9c:	db3b      	blt.n	800ee16 <_dtoa_r+0x23e>
 800ed9e:	9b04      	ldr	r3, [sp, #16]
 800eda0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800eda4:	4453      	add	r3, sl
 800eda6:	9304      	str	r3, [sp, #16]
 800eda8:	2300      	movs	r3, #0
 800edaa:	9306      	str	r3, [sp, #24]
 800edac:	9b05      	ldr	r3, [sp, #20]
 800edae:	2b09      	cmp	r3, #9
 800edb0:	d869      	bhi.n	800ee86 <_dtoa_r+0x2ae>
 800edb2:	2b05      	cmp	r3, #5
 800edb4:	bfc4      	itt	gt
 800edb6:	3b04      	subgt	r3, #4
 800edb8:	9305      	strgt	r3, [sp, #20]
 800edba:	9b05      	ldr	r3, [sp, #20]
 800edbc:	f1a3 0302 	sub.w	r3, r3, #2
 800edc0:	bfcc      	ite	gt
 800edc2:	2500      	movgt	r5, #0
 800edc4:	2501      	movle	r5, #1
 800edc6:	2b03      	cmp	r3, #3
 800edc8:	d869      	bhi.n	800ee9e <_dtoa_r+0x2c6>
 800edca:	e8df f003 	tbb	[pc, r3]
 800edce:	4e2c      	.short	0x4e2c
 800edd0:	5a4c      	.short	0x5a4c
 800edd2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800edd6:	441d      	add	r5, r3
 800edd8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800eddc:	2b20      	cmp	r3, #32
 800edde:	bfc1      	itttt	gt
 800ede0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ede4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ede8:	fa09 f303 	lslgt.w	r3, r9, r3
 800edec:	fa26 f000 	lsrgt.w	r0, r6, r0
 800edf0:	bfda      	itte	le
 800edf2:	f1c3 0320 	rsble	r3, r3, #32
 800edf6:	fa06 f003 	lslle.w	r0, r6, r3
 800edfa:	4318      	orrgt	r0, r3
 800edfc:	f7f1 fb8a 	bl	8000514 <__aeabi_ui2d>
 800ee00:	2301      	movs	r3, #1
 800ee02:	4606      	mov	r6, r0
 800ee04:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ee08:	3d01      	subs	r5, #1
 800ee0a:	9310      	str	r3, [sp, #64]	; 0x40
 800ee0c:	e771      	b.n	800ecf2 <_dtoa_r+0x11a>
 800ee0e:	2301      	movs	r3, #1
 800ee10:	e7b6      	b.n	800ed80 <_dtoa_r+0x1a8>
 800ee12:	900e      	str	r0, [sp, #56]	; 0x38
 800ee14:	e7b5      	b.n	800ed82 <_dtoa_r+0x1aa>
 800ee16:	f1ca 0300 	rsb	r3, sl, #0
 800ee1a:	9306      	str	r3, [sp, #24]
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	eba8 080a 	sub.w	r8, r8, sl
 800ee22:	930d      	str	r3, [sp, #52]	; 0x34
 800ee24:	e7c2      	b.n	800edac <_dtoa_r+0x1d4>
 800ee26:	2300      	movs	r3, #0
 800ee28:	9308      	str	r3, [sp, #32]
 800ee2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	dc39      	bgt.n	800eea4 <_dtoa_r+0x2cc>
 800ee30:	f04f 0901 	mov.w	r9, #1
 800ee34:	f8cd 9004 	str.w	r9, [sp, #4]
 800ee38:	464b      	mov	r3, r9
 800ee3a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ee3e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ee40:	2200      	movs	r2, #0
 800ee42:	6042      	str	r2, [r0, #4]
 800ee44:	2204      	movs	r2, #4
 800ee46:	f102 0614 	add.w	r6, r2, #20
 800ee4a:	429e      	cmp	r6, r3
 800ee4c:	6841      	ldr	r1, [r0, #4]
 800ee4e:	d92f      	bls.n	800eeb0 <_dtoa_r+0x2d8>
 800ee50:	4620      	mov	r0, r4
 800ee52:	f000 fcc7 	bl	800f7e4 <_Balloc>
 800ee56:	9000      	str	r0, [sp, #0]
 800ee58:	2800      	cmp	r0, #0
 800ee5a:	d14b      	bne.n	800eef4 <_dtoa_r+0x31c>
 800ee5c:	4b24      	ldr	r3, [pc, #144]	; (800eef0 <_dtoa_r+0x318>)
 800ee5e:	4602      	mov	r2, r0
 800ee60:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ee64:	e6d1      	b.n	800ec0a <_dtoa_r+0x32>
 800ee66:	2301      	movs	r3, #1
 800ee68:	e7de      	b.n	800ee28 <_dtoa_r+0x250>
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	9308      	str	r3, [sp, #32]
 800ee6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee70:	eb0a 0903 	add.w	r9, sl, r3
 800ee74:	f109 0301 	add.w	r3, r9, #1
 800ee78:	2b01      	cmp	r3, #1
 800ee7a:	9301      	str	r3, [sp, #4]
 800ee7c:	bfb8      	it	lt
 800ee7e:	2301      	movlt	r3, #1
 800ee80:	e7dd      	b.n	800ee3e <_dtoa_r+0x266>
 800ee82:	2301      	movs	r3, #1
 800ee84:	e7f2      	b.n	800ee6c <_dtoa_r+0x294>
 800ee86:	2501      	movs	r5, #1
 800ee88:	2300      	movs	r3, #0
 800ee8a:	9305      	str	r3, [sp, #20]
 800ee8c:	9508      	str	r5, [sp, #32]
 800ee8e:	f04f 39ff 	mov.w	r9, #4294967295
 800ee92:	2200      	movs	r2, #0
 800ee94:	f8cd 9004 	str.w	r9, [sp, #4]
 800ee98:	2312      	movs	r3, #18
 800ee9a:	9209      	str	r2, [sp, #36]	; 0x24
 800ee9c:	e7cf      	b.n	800ee3e <_dtoa_r+0x266>
 800ee9e:	2301      	movs	r3, #1
 800eea0:	9308      	str	r3, [sp, #32]
 800eea2:	e7f4      	b.n	800ee8e <_dtoa_r+0x2b6>
 800eea4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800eea8:	f8cd 9004 	str.w	r9, [sp, #4]
 800eeac:	464b      	mov	r3, r9
 800eeae:	e7c6      	b.n	800ee3e <_dtoa_r+0x266>
 800eeb0:	3101      	adds	r1, #1
 800eeb2:	6041      	str	r1, [r0, #4]
 800eeb4:	0052      	lsls	r2, r2, #1
 800eeb6:	e7c6      	b.n	800ee46 <_dtoa_r+0x26e>
 800eeb8:	636f4361 	.word	0x636f4361
 800eebc:	3fd287a7 	.word	0x3fd287a7
 800eec0:	8b60c8b3 	.word	0x8b60c8b3
 800eec4:	3fc68a28 	.word	0x3fc68a28
 800eec8:	509f79fb 	.word	0x509f79fb
 800eecc:	3fd34413 	.word	0x3fd34413
 800eed0:	08011059 	.word	0x08011059
 800eed4:	08011070 	.word	0x08011070
 800eed8:	7ff00000 	.word	0x7ff00000
 800eedc:	08011055 	.word	0x08011055
 800eee0:	0801104c 	.word	0x0801104c
 800eee4:	08011029 	.word	0x08011029
 800eee8:	3ff80000 	.word	0x3ff80000
 800eeec:	08011168 	.word	0x08011168
 800eef0:	080110cf 	.word	0x080110cf
 800eef4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eef6:	9a00      	ldr	r2, [sp, #0]
 800eef8:	601a      	str	r2, [r3, #0]
 800eefa:	9b01      	ldr	r3, [sp, #4]
 800eefc:	2b0e      	cmp	r3, #14
 800eefe:	f200 80ad 	bhi.w	800f05c <_dtoa_r+0x484>
 800ef02:	2d00      	cmp	r5, #0
 800ef04:	f000 80aa 	beq.w	800f05c <_dtoa_r+0x484>
 800ef08:	f1ba 0f00 	cmp.w	sl, #0
 800ef0c:	dd36      	ble.n	800ef7c <_dtoa_r+0x3a4>
 800ef0e:	4ac3      	ldr	r2, [pc, #780]	; (800f21c <_dtoa_r+0x644>)
 800ef10:	f00a 030f 	and.w	r3, sl, #15
 800ef14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ef18:	ed93 7b00 	vldr	d7, [r3]
 800ef1c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ef20:	ea4f 172a 	mov.w	r7, sl, asr #4
 800ef24:	eeb0 8a47 	vmov.f32	s16, s14
 800ef28:	eef0 8a67 	vmov.f32	s17, s15
 800ef2c:	d016      	beq.n	800ef5c <_dtoa_r+0x384>
 800ef2e:	4bbc      	ldr	r3, [pc, #752]	; (800f220 <_dtoa_r+0x648>)
 800ef30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ef34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ef38:	f7f1 fc90 	bl	800085c <__aeabi_ddiv>
 800ef3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef40:	f007 070f 	and.w	r7, r7, #15
 800ef44:	2503      	movs	r5, #3
 800ef46:	4eb6      	ldr	r6, [pc, #728]	; (800f220 <_dtoa_r+0x648>)
 800ef48:	b957      	cbnz	r7, 800ef60 <_dtoa_r+0x388>
 800ef4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ef4e:	ec53 2b18 	vmov	r2, r3, d8
 800ef52:	f7f1 fc83 	bl	800085c <__aeabi_ddiv>
 800ef56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef5a:	e029      	b.n	800efb0 <_dtoa_r+0x3d8>
 800ef5c:	2502      	movs	r5, #2
 800ef5e:	e7f2      	b.n	800ef46 <_dtoa_r+0x36e>
 800ef60:	07f9      	lsls	r1, r7, #31
 800ef62:	d508      	bpl.n	800ef76 <_dtoa_r+0x39e>
 800ef64:	ec51 0b18 	vmov	r0, r1, d8
 800ef68:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ef6c:	f7f1 fb4c 	bl	8000608 <__aeabi_dmul>
 800ef70:	ec41 0b18 	vmov	d8, r0, r1
 800ef74:	3501      	adds	r5, #1
 800ef76:	107f      	asrs	r7, r7, #1
 800ef78:	3608      	adds	r6, #8
 800ef7a:	e7e5      	b.n	800ef48 <_dtoa_r+0x370>
 800ef7c:	f000 80a6 	beq.w	800f0cc <_dtoa_r+0x4f4>
 800ef80:	f1ca 0600 	rsb	r6, sl, #0
 800ef84:	4ba5      	ldr	r3, [pc, #660]	; (800f21c <_dtoa_r+0x644>)
 800ef86:	4fa6      	ldr	r7, [pc, #664]	; (800f220 <_dtoa_r+0x648>)
 800ef88:	f006 020f 	and.w	r2, r6, #15
 800ef8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ef90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef94:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ef98:	f7f1 fb36 	bl	8000608 <__aeabi_dmul>
 800ef9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800efa0:	1136      	asrs	r6, r6, #4
 800efa2:	2300      	movs	r3, #0
 800efa4:	2502      	movs	r5, #2
 800efa6:	2e00      	cmp	r6, #0
 800efa8:	f040 8085 	bne.w	800f0b6 <_dtoa_r+0x4de>
 800efac:	2b00      	cmp	r3, #0
 800efae:	d1d2      	bne.n	800ef56 <_dtoa_r+0x37e>
 800efb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	f000 808c 	beq.w	800f0d0 <_dtoa_r+0x4f8>
 800efb8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800efbc:	4b99      	ldr	r3, [pc, #612]	; (800f224 <_dtoa_r+0x64c>)
 800efbe:	2200      	movs	r2, #0
 800efc0:	4630      	mov	r0, r6
 800efc2:	4639      	mov	r1, r7
 800efc4:	f7f1 fd92 	bl	8000aec <__aeabi_dcmplt>
 800efc8:	2800      	cmp	r0, #0
 800efca:	f000 8081 	beq.w	800f0d0 <_dtoa_r+0x4f8>
 800efce:	9b01      	ldr	r3, [sp, #4]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d07d      	beq.n	800f0d0 <_dtoa_r+0x4f8>
 800efd4:	f1b9 0f00 	cmp.w	r9, #0
 800efd8:	dd3c      	ble.n	800f054 <_dtoa_r+0x47c>
 800efda:	f10a 33ff 	add.w	r3, sl, #4294967295
 800efde:	9307      	str	r3, [sp, #28]
 800efe0:	2200      	movs	r2, #0
 800efe2:	4b91      	ldr	r3, [pc, #580]	; (800f228 <_dtoa_r+0x650>)
 800efe4:	4630      	mov	r0, r6
 800efe6:	4639      	mov	r1, r7
 800efe8:	f7f1 fb0e 	bl	8000608 <__aeabi_dmul>
 800efec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eff0:	3501      	adds	r5, #1
 800eff2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800eff6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800effa:	4628      	mov	r0, r5
 800effc:	f7f1 fa9a 	bl	8000534 <__aeabi_i2d>
 800f000:	4632      	mov	r2, r6
 800f002:	463b      	mov	r3, r7
 800f004:	f7f1 fb00 	bl	8000608 <__aeabi_dmul>
 800f008:	4b88      	ldr	r3, [pc, #544]	; (800f22c <_dtoa_r+0x654>)
 800f00a:	2200      	movs	r2, #0
 800f00c:	f7f1 f946 	bl	800029c <__adddf3>
 800f010:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f014:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f018:	9303      	str	r3, [sp, #12]
 800f01a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d15c      	bne.n	800f0da <_dtoa_r+0x502>
 800f020:	4b83      	ldr	r3, [pc, #524]	; (800f230 <_dtoa_r+0x658>)
 800f022:	2200      	movs	r2, #0
 800f024:	4630      	mov	r0, r6
 800f026:	4639      	mov	r1, r7
 800f028:	f7f1 f936 	bl	8000298 <__aeabi_dsub>
 800f02c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f030:	4606      	mov	r6, r0
 800f032:	460f      	mov	r7, r1
 800f034:	f7f1 fd78 	bl	8000b28 <__aeabi_dcmpgt>
 800f038:	2800      	cmp	r0, #0
 800f03a:	f040 8296 	bne.w	800f56a <_dtoa_r+0x992>
 800f03e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f042:	4630      	mov	r0, r6
 800f044:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f048:	4639      	mov	r1, r7
 800f04a:	f7f1 fd4f 	bl	8000aec <__aeabi_dcmplt>
 800f04e:	2800      	cmp	r0, #0
 800f050:	f040 8288 	bne.w	800f564 <_dtoa_r+0x98c>
 800f054:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f058:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f05c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f05e:	2b00      	cmp	r3, #0
 800f060:	f2c0 8158 	blt.w	800f314 <_dtoa_r+0x73c>
 800f064:	f1ba 0f0e 	cmp.w	sl, #14
 800f068:	f300 8154 	bgt.w	800f314 <_dtoa_r+0x73c>
 800f06c:	4b6b      	ldr	r3, [pc, #428]	; (800f21c <_dtoa_r+0x644>)
 800f06e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f072:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f078:	2b00      	cmp	r3, #0
 800f07a:	f280 80e3 	bge.w	800f244 <_dtoa_r+0x66c>
 800f07e:	9b01      	ldr	r3, [sp, #4]
 800f080:	2b00      	cmp	r3, #0
 800f082:	f300 80df 	bgt.w	800f244 <_dtoa_r+0x66c>
 800f086:	f040 826d 	bne.w	800f564 <_dtoa_r+0x98c>
 800f08a:	4b69      	ldr	r3, [pc, #420]	; (800f230 <_dtoa_r+0x658>)
 800f08c:	2200      	movs	r2, #0
 800f08e:	4640      	mov	r0, r8
 800f090:	4649      	mov	r1, r9
 800f092:	f7f1 fab9 	bl	8000608 <__aeabi_dmul>
 800f096:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f09a:	f7f1 fd3b 	bl	8000b14 <__aeabi_dcmpge>
 800f09e:	9e01      	ldr	r6, [sp, #4]
 800f0a0:	4637      	mov	r7, r6
 800f0a2:	2800      	cmp	r0, #0
 800f0a4:	f040 8243 	bne.w	800f52e <_dtoa_r+0x956>
 800f0a8:	9d00      	ldr	r5, [sp, #0]
 800f0aa:	2331      	movs	r3, #49	; 0x31
 800f0ac:	f805 3b01 	strb.w	r3, [r5], #1
 800f0b0:	f10a 0a01 	add.w	sl, sl, #1
 800f0b4:	e23f      	b.n	800f536 <_dtoa_r+0x95e>
 800f0b6:	07f2      	lsls	r2, r6, #31
 800f0b8:	d505      	bpl.n	800f0c6 <_dtoa_r+0x4ee>
 800f0ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f0be:	f7f1 faa3 	bl	8000608 <__aeabi_dmul>
 800f0c2:	3501      	adds	r5, #1
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	1076      	asrs	r6, r6, #1
 800f0c8:	3708      	adds	r7, #8
 800f0ca:	e76c      	b.n	800efa6 <_dtoa_r+0x3ce>
 800f0cc:	2502      	movs	r5, #2
 800f0ce:	e76f      	b.n	800efb0 <_dtoa_r+0x3d8>
 800f0d0:	9b01      	ldr	r3, [sp, #4]
 800f0d2:	f8cd a01c 	str.w	sl, [sp, #28]
 800f0d6:	930c      	str	r3, [sp, #48]	; 0x30
 800f0d8:	e78d      	b.n	800eff6 <_dtoa_r+0x41e>
 800f0da:	9900      	ldr	r1, [sp, #0]
 800f0dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f0de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f0e0:	4b4e      	ldr	r3, [pc, #312]	; (800f21c <_dtoa_r+0x644>)
 800f0e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f0e6:	4401      	add	r1, r0
 800f0e8:	9102      	str	r1, [sp, #8]
 800f0ea:	9908      	ldr	r1, [sp, #32]
 800f0ec:	eeb0 8a47 	vmov.f32	s16, s14
 800f0f0:	eef0 8a67 	vmov.f32	s17, s15
 800f0f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f0f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f0fc:	2900      	cmp	r1, #0
 800f0fe:	d045      	beq.n	800f18c <_dtoa_r+0x5b4>
 800f100:	494c      	ldr	r1, [pc, #304]	; (800f234 <_dtoa_r+0x65c>)
 800f102:	2000      	movs	r0, #0
 800f104:	f7f1 fbaa 	bl	800085c <__aeabi_ddiv>
 800f108:	ec53 2b18 	vmov	r2, r3, d8
 800f10c:	f7f1 f8c4 	bl	8000298 <__aeabi_dsub>
 800f110:	9d00      	ldr	r5, [sp, #0]
 800f112:	ec41 0b18 	vmov	d8, r0, r1
 800f116:	4639      	mov	r1, r7
 800f118:	4630      	mov	r0, r6
 800f11a:	f7f1 fd25 	bl	8000b68 <__aeabi_d2iz>
 800f11e:	900c      	str	r0, [sp, #48]	; 0x30
 800f120:	f7f1 fa08 	bl	8000534 <__aeabi_i2d>
 800f124:	4602      	mov	r2, r0
 800f126:	460b      	mov	r3, r1
 800f128:	4630      	mov	r0, r6
 800f12a:	4639      	mov	r1, r7
 800f12c:	f7f1 f8b4 	bl	8000298 <__aeabi_dsub>
 800f130:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f132:	3330      	adds	r3, #48	; 0x30
 800f134:	f805 3b01 	strb.w	r3, [r5], #1
 800f138:	ec53 2b18 	vmov	r2, r3, d8
 800f13c:	4606      	mov	r6, r0
 800f13e:	460f      	mov	r7, r1
 800f140:	f7f1 fcd4 	bl	8000aec <__aeabi_dcmplt>
 800f144:	2800      	cmp	r0, #0
 800f146:	d165      	bne.n	800f214 <_dtoa_r+0x63c>
 800f148:	4632      	mov	r2, r6
 800f14a:	463b      	mov	r3, r7
 800f14c:	4935      	ldr	r1, [pc, #212]	; (800f224 <_dtoa_r+0x64c>)
 800f14e:	2000      	movs	r0, #0
 800f150:	f7f1 f8a2 	bl	8000298 <__aeabi_dsub>
 800f154:	ec53 2b18 	vmov	r2, r3, d8
 800f158:	f7f1 fcc8 	bl	8000aec <__aeabi_dcmplt>
 800f15c:	2800      	cmp	r0, #0
 800f15e:	f040 80b9 	bne.w	800f2d4 <_dtoa_r+0x6fc>
 800f162:	9b02      	ldr	r3, [sp, #8]
 800f164:	429d      	cmp	r5, r3
 800f166:	f43f af75 	beq.w	800f054 <_dtoa_r+0x47c>
 800f16a:	4b2f      	ldr	r3, [pc, #188]	; (800f228 <_dtoa_r+0x650>)
 800f16c:	ec51 0b18 	vmov	r0, r1, d8
 800f170:	2200      	movs	r2, #0
 800f172:	f7f1 fa49 	bl	8000608 <__aeabi_dmul>
 800f176:	4b2c      	ldr	r3, [pc, #176]	; (800f228 <_dtoa_r+0x650>)
 800f178:	ec41 0b18 	vmov	d8, r0, r1
 800f17c:	2200      	movs	r2, #0
 800f17e:	4630      	mov	r0, r6
 800f180:	4639      	mov	r1, r7
 800f182:	f7f1 fa41 	bl	8000608 <__aeabi_dmul>
 800f186:	4606      	mov	r6, r0
 800f188:	460f      	mov	r7, r1
 800f18a:	e7c4      	b.n	800f116 <_dtoa_r+0x53e>
 800f18c:	ec51 0b17 	vmov	r0, r1, d7
 800f190:	f7f1 fa3a 	bl	8000608 <__aeabi_dmul>
 800f194:	9b02      	ldr	r3, [sp, #8]
 800f196:	9d00      	ldr	r5, [sp, #0]
 800f198:	930c      	str	r3, [sp, #48]	; 0x30
 800f19a:	ec41 0b18 	vmov	d8, r0, r1
 800f19e:	4639      	mov	r1, r7
 800f1a0:	4630      	mov	r0, r6
 800f1a2:	f7f1 fce1 	bl	8000b68 <__aeabi_d2iz>
 800f1a6:	9011      	str	r0, [sp, #68]	; 0x44
 800f1a8:	f7f1 f9c4 	bl	8000534 <__aeabi_i2d>
 800f1ac:	4602      	mov	r2, r0
 800f1ae:	460b      	mov	r3, r1
 800f1b0:	4630      	mov	r0, r6
 800f1b2:	4639      	mov	r1, r7
 800f1b4:	f7f1 f870 	bl	8000298 <__aeabi_dsub>
 800f1b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f1ba:	3330      	adds	r3, #48	; 0x30
 800f1bc:	f805 3b01 	strb.w	r3, [r5], #1
 800f1c0:	9b02      	ldr	r3, [sp, #8]
 800f1c2:	429d      	cmp	r5, r3
 800f1c4:	4606      	mov	r6, r0
 800f1c6:	460f      	mov	r7, r1
 800f1c8:	f04f 0200 	mov.w	r2, #0
 800f1cc:	d134      	bne.n	800f238 <_dtoa_r+0x660>
 800f1ce:	4b19      	ldr	r3, [pc, #100]	; (800f234 <_dtoa_r+0x65c>)
 800f1d0:	ec51 0b18 	vmov	r0, r1, d8
 800f1d4:	f7f1 f862 	bl	800029c <__adddf3>
 800f1d8:	4602      	mov	r2, r0
 800f1da:	460b      	mov	r3, r1
 800f1dc:	4630      	mov	r0, r6
 800f1de:	4639      	mov	r1, r7
 800f1e0:	f7f1 fca2 	bl	8000b28 <__aeabi_dcmpgt>
 800f1e4:	2800      	cmp	r0, #0
 800f1e6:	d175      	bne.n	800f2d4 <_dtoa_r+0x6fc>
 800f1e8:	ec53 2b18 	vmov	r2, r3, d8
 800f1ec:	4911      	ldr	r1, [pc, #68]	; (800f234 <_dtoa_r+0x65c>)
 800f1ee:	2000      	movs	r0, #0
 800f1f0:	f7f1 f852 	bl	8000298 <__aeabi_dsub>
 800f1f4:	4602      	mov	r2, r0
 800f1f6:	460b      	mov	r3, r1
 800f1f8:	4630      	mov	r0, r6
 800f1fa:	4639      	mov	r1, r7
 800f1fc:	f7f1 fc76 	bl	8000aec <__aeabi_dcmplt>
 800f200:	2800      	cmp	r0, #0
 800f202:	f43f af27 	beq.w	800f054 <_dtoa_r+0x47c>
 800f206:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f208:	1e6b      	subs	r3, r5, #1
 800f20a:	930c      	str	r3, [sp, #48]	; 0x30
 800f20c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f210:	2b30      	cmp	r3, #48	; 0x30
 800f212:	d0f8      	beq.n	800f206 <_dtoa_r+0x62e>
 800f214:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f218:	e04a      	b.n	800f2b0 <_dtoa_r+0x6d8>
 800f21a:	bf00      	nop
 800f21c:	08011168 	.word	0x08011168
 800f220:	08011140 	.word	0x08011140
 800f224:	3ff00000 	.word	0x3ff00000
 800f228:	40240000 	.word	0x40240000
 800f22c:	401c0000 	.word	0x401c0000
 800f230:	40140000 	.word	0x40140000
 800f234:	3fe00000 	.word	0x3fe00000
 800f238:	4baf      	ldr	r3, [pc, #700]	; (800f4f8 <_dtoa_r+0x920>)
 800f23a:	f7f1 f9e5 	bl	8000608 <__aeabi_dmul>
 800f23e:	4606      	mov	r6, r0
 800f240:	460f      	mov	r7, r1
 800f242:	e7ac      	b.n	800f19e <_dtoa_r+0x5c6>
 800f244:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f248:	9d00      	ldr	r5, [sp, #0]
 800f24a:	4642      	mov	r2, r8
 800f24c:	464b      	mov	r3, r9
 800f24e:	4630      	mov	r0, r6
 800f250:	4639      	mov	r1, r7
 800f252:	f7f1 fb03 	bl	800085c <__aeabi_ddiv>
 800f256:	f7f1 fc87 	bl	8000b68 <__aeabi_d2iz>
 800f25a:	9002      	str	r0, [sp, #8]
 800f25c:	f7f1 f96a 	bl	8000534 <__aeabi_i2d>
 800f260:	4642      	mov	r2, r8
 800f262:	464b      	mov	r3, r9
 800f264:	f7f1 f9d0 	bl	8000608 <__aeabi_dmul>
 800f268:	4602      	mov	r2, r0
 800f26a:	460b      	mov	r3, r1
 800f26c:	4630      	mov	r0, r6
 800f26e:	4639      	mov	r1, r7
 800f270:	f7f1 f812 	bl	8000298 <__aeabi_dsub>
 800f274:	9e02      	ldr	r6, [sp, #8]
 800f276:	9f01      	ldr	r7, [sp, #4]
 800f278:	3630      	adds	r6, #48	; 0x30
 800f27a:	f805 6b01 	strb.w	r6, [r5], #1
 800f27e:	9e00      	ldr	r6, [sp, #0]
 800f280:	1bae      	subs	r6, r5, r6
 800f282:	42b7      	cmp	r7, r6
 800f284:	4602      	mov	r2, r0
 800f286:	460b      	mov	r3, r1
 800f288:	d137      	bne.n	800f2fa <_dtoa_r+0x722>
 800f28a:	f7f1 f807 	bl	800029c <__adddf3>
 800f28e:	4642      	mov	r2, r8
 800f290:	464b      	mov	r3, r9
 800f292:	4606      	mov	r6, r0
 800f294:	460f      	mov	r7, r1
 800f296:	f7f1 fc47 	bl	8000b28 <__aeabi_dcmpgt>
 800f29a:	b9c8      	cbnz	r0, 800f2d0 <_dtoa_r+0x6f8>
 800f29c:	4642      	mov	r2, r8
 800f29e:	464b      	mov	r3, r9
 800f2a0:	4630      	mov	r0, r6
 800f2a2:	4639      	mov	r1, r7
 800f2a4:	f7f1 fc18 	bl	8000ad8 <__aeabi_dcmpeq>
 800f2a8:	b110      	cbz	r0, 800f2b0 <_dtoa_r+0x6d8>
 800f2aa:	9b02      	ldr	r3, [sp, #8]
 800f2ac:	07d9      	lsls	r1, r3, #31
 800f2ae:	d40f      	bmi.n	800f2d0 <_dtoa_r+0x6f8>
 800f2b0:	4620      	mov	r0, r4
 800f2b2:	4659      	mov	r1, fp
 800f2b4:	f000 fad6 	bl	800f864 <_Bfree>
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	702b      	strb	r3, [r5, #0]
 800f2bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f2be:	f10a 0001 	add.w	r0, sl, #1
 800f2c2:	6018      	str	r0, [r3, #0]
 800f2c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	f43f acd8 	beq.w	800ec7c <_dtoa_r+0xa4>
 800f2cc:	601d      	str	r5, [r3, #0]
 800f2ce:	e4d5      	b.n	800ec7c <_dtoa_r+0xa4>
 800f2d0:	f8cd a01c 	str.w	sl, [sp, #28]
 800f2d4:	462b      	mov	r3, r5
 800f2d6:	461d      	mov	r5, r3
 800f2d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f2dc:	2a39      	cmp	r2, #57	; 0x39
 800f2de:	d108      	bne.n	800f2f2 <_dtoa_r+0x71a>
 800f2e0:	9a00      	ldr	r2, [sp, #0]
 800f2e2:	429a      	cmp	r2, r3
 800f2e4:	d1f7      	bne.n	800f2d6 <_dtoa_r+0x6fe>
 800f2e6:	9a07      	ldr	r2, [sp, #28]
 800f2e8:	9900      	ldr	r1, [sp, #0]
 800f2ea:	3201      	adds	r2, #1
 800f2ec:	9207      	str	r2, [sp, #28]
 800f2ee:	2230      	movs	r2, #48	; 0x30
 800f2f0:	700a      	strb	r2, [r1, #0]
 800f2f2:	781a      	ldrb	r2, [r3, #0]
 800f2f4:	3201      	adds	r2, #1
 800f2f6:	701a      	strb	r2, [r3, #0]
 800f2f8:	e78c      	b.n	800f214 <_dtoa_r+0x63c>
 800f2fa:	4b7f      	ldr	r3, [pc, #508]	; (800f4f8 <_dtoa_r+0x920>)
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	f7f1 f983 	bl	8000608 <__aeabi_dmul>
 800f302:	2200      	movs	r2, #0
 800f304:	2300      	movs	r3, #0
 800f306:	4606      	mov	r6, r0
 800f308:	460f      	mov	r7, r1
 800f30a:	f7f1 fbe5 	bl	8000ad8 <__aeabi_dcmpeq>
 800f30e:	2800      	cmp	r0, #0
 800f310:	d09b      	beq.n	800f24a <_dtoa_r+0x672>
 800f312:	e7cd      	b.n	800f2b0 <_dtoa_r+0x6d8>
 800f314:	9a08      	ldr	r2, [sp, #32]
 800f316:	2a00      	cmp	r2, #0
 800f318:	f000 80c4 	beq.w	800f4a4 <_dtoa_r+0x8cc>
 800f31c:	9a05      	ldr	r2, [sp, #20]
 800f31e:	2a01      	cmp	r2, #1
 800f320:	f300 80a8 	bgt.w	800f474 <_dtoa_r+0x89c>
 800f324:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f326:	2a00      	cmp	r2, #0
 800f328:	f000 80a0 	beq.w	800f46c <_dtoa_r+0x894>
 800f32c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f330:	9e06      	ldr	r6, [sp, #24]
 800f332:	4645      	mov	r5, r8
 800f334:	9a04      	ldr	r2, [sp, #16]
 800f336:	2101      	movs	r1, #1
 800f338:	441a      	add	r2, r3
 800f33a:	4620      	mov	r0, r4
 800f33c:	4498      	add	r8, r3
 800f33e:	9204      	str	r2, [sp, #16]
 800f340:	f000 fb4c 	bl	800f9dc <__i2b>
 800f344:	4607      	mov	r7, r0
 800f346:	2d00      	cmp	r5, #0
 800f348:	dd0b      	ble.n	800f362 <_dtoa_r+0x78a>
 800f34a:	9b04      	ldr	r3, [sp, #16]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	dd08      	ble.n	800f362 <_dtoa_r+0x78a>
 800f350:	42ab      	cmp	r3, r5
 800f352:	9a04      	ldr	r2, [sp, #16]
 800f354:	bfa8      	it	ge
 800f356:	462b      	movge	r3, r5
 800f358:	eba8 0803 	sub.w	r8, r8, r3
 800f35c:	1aed      	subs	r5, r5, r3
 800f35e:	1ad3      	subs	r3, r2, r3
 800f360:	9304      	str	r3, [sp, #16]
 800f362:	9b06      	ldr	r3, [sp, #24]
 800f364:	b1fb      	cbz	r3, 800f3a6 <_dtoa_r+0x7ce>
 800f366:	9b08      	ldr	r3, [sp, #32]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	f000 809f 	beq.w	800f4ac <_dtoa_r+0x8d4>
 800f36e:	2e00      	cmp	r6, #0
 800f370:	dd11      	ble.n	800f396 <_dtoa_r+0x7be>
 800f372:	4639      	mov	r1, r7
 800f374:	4632      	mov	r2, r6
 800f376:	4620      	mov	r0, r4
 800f378:	f000 fbec 	bl	800fb54 <__pow5mult>
 800f37c:	465a      	mov	r2, fp
 800f37e:	4601      	mov	r1, r0
 800f380:	4607      	mov	r7, r0
 800f382:	4620      	mov	r0, r4
 800f384:	f000 fb40 	bl	800fa08 <__multiply>
 800f388:	4659      	mov	r1, fp
 800f38a:	9007      	str	r0, [sp, #28]
 800f38c:	4620      	mov	r0, r4
 800f38e:	f000 fa69 	bl	800f864 <_Bfree>
 800f392:	9b07      	ldr	r3, [sp, #28]
 800f394:	469b      	mov	fp, r3
 800f396:	9b06      	ldr	r3, [sp, #24]
 800f398:	1b9a      	subs	r2, r3, r6
 800f39a:	d004      	beq.n	800f3a6 <_dtoa_r+0x7ce>
 800f39c:	4659      	mov	r1, fp
 800f39e:	4620      	mov	r0, r4
 800f3a0:	f000 fbd8 	bl	800fb54 <__pow5mult>
 800f3a4:	4683      	mov	fp, r0
 800f3a6:	2101      	movs	r1, #1
 800f3a8:	4620      	mov	r0, r4
 800f3aa:	f000 fb17 	bl	800f9dc <__i2b>
 800f3ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	4606      	mov	r6, r0
 800f3b4:	dd7c      	ble.n	800f4b0 <_dtoa_r+0x8d8>
 800f3b6:	461a      	mov	r2, r3
 800f3b8:	4601      	mov	r1, r0
 800f3ba:	4620      	mov	r0, r4
 800f3bc:	f000 fbca 	bl	800fb54 <__pow5mult>
 800f3c0:	9b05      	ldr	r3, [sp, #20]
 800f3c2:	2b01      	cmp	r3, #1
 800f3c4:	4606      	mov	r6, r0
 800f3c6:	dd76      	ble.n	800f4b6 <_dtoa_r+0x8de>
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	9306      	str	r3, [sp, #24]
 800f3cc:	6933      	ldr	r3, [r6, #16]
 800f3ce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f3d2:	6918      	ldr	r0, [r3, #16]
 800f3d4:	f000 fab2 	bl	800f93c <__hi0bits>
 800f3d8:	f1c0 0020 	rsb	r0, r0, #32
 800f3dc:	9b04      	ldr	r3, [sp, #16]
 800f3de:	4418      	add	r0, r3
 800f3e0:	f010 001f 	ands.w	r0, r0, #31
 800f3e4:	f000 8086 	beq.w	800f4f4 <_dtoa_r+0x91c>
 800f3e8:	f1c0 0320 	rsb	r3, r0, #32
 800f3ec:	2b04      	cmp	r3, #4
 800f3ee:	dd7f      	ble.n	800f4f0 <_dtoa_r+0x918>
 800f3f0:	f1c0 001c 	rsb	r0, r0, #28
 800f3f4:	9b04      	ldr	r3, [sp, #16]
 800f3f6:	4403      	add	r3, r0
 800f3f8:	4480      	add	r8, r0
 800f3fa:	4405      	add	r5, r0
 800f3fc:	9304      	str	r3, [sp, #16]
 800f3fe:	f1b8 0f00 	cmp.w	r8, #0
 800f402:	dd05      	ble.n	800f410 <_dtoa_r+0x838>
 800f404:	4659      	mov	r1, fp
 800f406:	4642      	mov	r2, r8
 800f408:	4620      	mov	r0, r4
 800f40a:	f000 fbfd 	bl	800fc08 <__lshift>
 800f40e:	4683      	mov	fp, r0
 800f410:	9b04      	ldr	r3, [sp, #16]
 800f412:	2b00      	cmp	r3, #0
 800f414:	dd05      	ble.n	800f422 <_dtoa_r+0x84a>
 800f416:	4631      	mov	r1, r6
 800f418:	461a      	mov	r2, r3
 800f41a:	4620      	mov	r0, r4
 800f41c:	f000 fbf4 	bl	800fc08 <__lshift>
 800f420:	4606      	mov	r6, r0
 800f422:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f424:	2b00      	cmp	r3, #0
 800f426:	d069      	beq.n	800f4fc <_dtoa_r+0x924>
 800f428:	4631      	mov	r1, r6
 800f42a:	4658      	mov	r0, fp
 800f42c:	f000 fc58 	bl	800fce0 <__mcmp>
 800f430:	2800      	cmp	r0, #0
 800f432:	da63      	bge.n	800f4fc <_dtoa_r+0x924>
 800f434:	2300      	movs	r3, #0
 800f436:	4659      	mov	r1, fp
 800f438:	220a      	movs	r2, #10
 800f43a:	4620      	mov	r0, r4
 800f43c:	f000 fa34 	bl	800f8a8 <__multadd>
 800f440:	9b08      	ldr	r3, [sp, #32]
 800f442:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f446:	4683      	mov	fp, r0
 800f448:	2b00      	cmp	r3, #0
 800f44a:	f000 818f 	beq.w	800f76c <_dtoa_r+0xb94>
 800f44e:	4639      	mov	r1, r7
 800f450:	2300      	movs	r3, #0
 800f452:	220a      	movs	r2, #10
 800f454:	4620      	mov	r0, r4
 800f456:	f000 fa27 	bl	800f8a8 <__multadd>
 800f45a:	f1b9 0f00 	cmp.w	r9, #0
 800f45e:	4607      	mov	r7, r0
 800f460:	f300 808e 	bgt.w	800f580 <_dtoa_r+0x9a8>
 800f464:	9b05      	ldr	r3, [sp, #20]
 800f466:	2b02      	cmp	r3, #2
 800f468:	dc50      	bgt.n	800f50c <_dtoa_r+0x934>
 800f46a:	e089      	b.n	800f580 <_dtoa_r+0x9a8>
 800f46c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f46e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f472:	e75d      	b.n	800f330 <_dtoa_r+0x758>
 800f474:	9b01      	ldr	r3, [sp, #4]
 800f476:	1e5e      	subs	r6, r3, #1
 800f478:	9b06      	ldr	r3, [sp, #24]
 800f47a:	42b3      	cmp	r3, r6
 800f47c:	bfbf      	itttt	lt
 800f47e:	9b06      	ldrlt	r3, [sp, #24]
 800f480:	9606      	strlt	r6, [sp, #24]
 800f482:	1af2      	sublt	r2, r6, r3
 800f484:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800f486:	bfb6      	itet	lt
 800f488:	189b      	addlt	r3, r3, r2
 800f48a:	1b9e      	subge	r6, r3, r6
 800f48c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800f48e:	9b01      	ldr	r3, [sp, #4]
 800f490:	bfb8      	it	lt
 800f492:	2600      	movlt	r6, #0
 800f494:	2b00      	cmp	r3, #0
 800f496:	bfb5      	itete	lt
 800f498:	eba8 0503 	sublt.w	r5, r8, r3
 800f49c:	9b01      	ldrge	r3, [sp, #4]
 800f49e:	2300      	movlt	r3, #0
 800f4a0:	4645      	movge	r5, r8
 800f4a2:	e747      	b.n	800f334 <_dtoa_r+0x75c>
 800f4a4:	9e06      	ldr	r6, [sp, #24]
 800f4a6:	9f08      	ldr	r7, [sp, #32]
 800f4a8:	4645      	mov	r5, r8
 800f4aa:	e74c      	b.n	800f346 <_dtoa_r+0x76e>
 800f4ac:	9a06      	ldr	r2, [sp, #24]
 800f4ae:	e775      	b.n	800f39c <_dtoa_r+0x7c4>
 800f4b0:	9b05      	ldr	r3, [sp, #20]
 800f4b2:	2b01      	cmp	r3, #1
 800f4b4:	dc18      	bgt.n	800f4e8 <_dtoa_r+0x910>
 800f4b6:	9b02      	ldr	r3, [sp, #8]
 800f4b8:	b9b3      	cbnz	r3, 800f4e8 <_dtoa_r+0x910>
 800f4ba:	9b03      	ldr	r3, [sp, #12]
 800f4bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f4c0:	b9a3      	cbnz	r3, 800f4ec <_dtoa_r+0x914>
 800f4c2:	9b03      	ldr	r3, [sp, #12]
 800f4c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f4c8:	0d1b      	lsrs	r3, r3, #20
 800f4ca:	051b      	lsls	r3, r3, #20
 800f4cc:	b12b      	cbz	r3, 800f4da <_dtoa_r+0x902>
 800f4ce:	9b04      	ldr	r3, [sp, #16]
 800f4d0:	3301      	adds	r3, #1
 800f4d2:	9304      	str	r3, [sp, #16]
 800f4d4:	f108 0801 	add.w	r8, r8, #1
 800f4d8:	2301      	movs	r3, #1
 800f4da:	9306      	str	r3, [sp, #24]
 800f4dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	f47f af74 	bne.w	800f3cc <_dtoa_r+0x7f4>
 800f4e4:	2001      	movs	r0, #1
 800f4e6:	e779      	b.n	800f3dc <_dtoa_r+0x804>
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	e7f6      	b.n	800f4da <_dtoa_r+0x902>
 800f4ec:	9b02      	ldr	r3, [sp, #8]
 800f4ee:	e7f4      	b.n	800f4da <_dtoa_r+0x902>
 800f4f0:	d085      	beq.n	800f3fe <_dtoa_r+0x826>
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	301c      	adds	r0, #28
 800f4f6:	e77d      	b.n	800f3f4 <_dtoa_r+0x81c>
 800f4f8:	40240000 	.word	0x40240000
 800f4fc:	9b01      	ldr	r3, [sp, #4]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	dc38      	bgt.n	800f574 <_dtoa_r+0x99c>
 800f502:	9b05      	ldr	r3, [sp, #20]
 800f504:	2b02      	cmp	r3, #2
 800f506:	dd35      	ble.n	800f574 <_dtoa_r+0x99c>
 800f508:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f50c:	f1b9 0f00 	cmp.w	r9, #0
 800f510:	d10d      	bne.n	800f52e <_dtoa_r+0x956>
 800f512:	4631      	mov	r1, r6
 800f514:	464b      	mov	r3, r9
 800f516:	2205      	movs	r2, #5
 800f518:	4620      	mov	r0, r4
 800f51a:	f000 f9c5 	bl	800f8a8 <__multadd>
 800f51e:	4601      	mov	r1, r0
 800f520:	4606      	mov	r6, r0
 800f522:	4658      	mov	r0, fp
 800f524:	f000 fbdc 	bl	800fce0 <__mcmp>
 800f528:	2800      	cmp	r0, #0
 800f52a:	f73f adbd 	bgt.w	800f0a8 <_dtoa_r+0x4d0>
 800f52e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f530:	9d00      	ldr	r5, [sp, #0]
 800f532:	ea6f 0a03 	mvn.w	sl, r3
 800f536:	f04f 0800 	mov.w	r8, #0
 800f53a:	4631      	mov	r1, r6
 800f53c:	4620      	mov	r0, r4
 800f53e:	f000 f991 	bl	800f864 <_Bfree>
 800f542:	2f00      	cmp	r7, #0
 800f544:	f43f aeb4 	beq.w	800f2b0 <_dtoa_r+0x6d8>
 800f548:	f1b8 0f00 	cmp.w	r8, #0
 800f54c:	d005      	beq.n	800f55a <_dtoa_r+0x982>
 800f54e:	45b8      	cmp	r8, r7
 800f550:	d003      	beq.n	800f55a <_dtoa_r+0x982>
 800f552:	4641      	mov	r1, r8
 800f554:	4620      	mov	r0, r4
 800f556:	f000 f985 	bl	800f864 <_Bfree>
 800f55a:	4639      	mov	r1, r7
 800f55c:	4620      	mov	r0, r4
 800f55e:	f000 f981 	bl	800f864 <_Bfree>
 800f562:	e6a5      	b.n	800f2b0 <_dtoa_r+0x6d8>
 800f564:	2600      	movs	r6, #0
 800f566:	4637      	mov	r7, r6
 800f568:	e7e1      	b.n	800f52e <_dtoa_r+0x956>
 800f56a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f56c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f570:	4637      	mov	r7, r6
 800f572:	e599      	b.n	800f0a8 <_dtoa_r+0x4d0>
 800f574:	9b08      	ldr	r3, [sp, #32]
 800f576:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	f000 80fd 	beq.w	800f77a <_dtoa_r+0xba2>
 800f580:	2d00      	cmp	r5, #0
 800f582:	dd05      	ble.n	800f590 <_dtoa_r+0x9b8>
 800f584:	4639      	mov	r1, r7
 800f586:	462a      	mov	r2, r5
 800f588:	4620      	mov	r0, r4
 800f58a:	f000 fb3d 	bl	800fc08 <__lshift>
 800f58e:	4607      	mov	r7, r0
 800f590:	9b06      	ldr	r3, [sp, #24]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d05c      	beq.n	800f650 <_dtoa_r+0xa78>
 800f596:	6879      	ldr	r1, [r7, #4]
 800f598:	4620      	mov	r0, r4
 800f59a:	f000 f923 	bl	800f7e4 <_Balloc>
 800f59e:	4605      	mov	r5, r0
 800f5a0:	b928      	cbnz	r0, 800f5ae <_dtoa_r+0x9d6>
 800f5a2:	4b80      	ldr	r3, [pc, #512]	; (800f7a4 <_dtoa_r+0xbcc>)
 800f5a4:	4602      	mov	r2, r0
 800f5a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f5aa:	f7ff bb2e 	b.w	800ec0a <_dtoa_r+0x32>
 800f5ae:	693a      	ldr	r2, [r7, #16]
 800f5b0:	3202      	adds	r2, #2
 800f5b2:	0092      	lsls	r2, r2, #2
 800f5b4:	f107 010c 	add.w	r1, r7, #12
 800f5b8:	300c      	adds	r0, #12
 800f5ba:	f000 f905 	bl	800f7c8 <memcpy>
 800f5be:	2201      	movs	r2, #1
 800f5c0:	4629      	mov	r1, r5
 800f5c2:	4620      	mov	r0, r4
 800f5c4:	f000 fb20 	bl	800fc08 <__lshift>
 800f5c8:	9b00      	ldr	r3, [sp, #0]
 800f5ca:	3301      	adds	r3, #1
 800f5cc:	9301      	str	r3, [sp, #4]
 800f5ce:	9b00      	ldr	r3, [sp, #0]
 800f5d0:	444b      	add	r3, r9
 800f5d2:	9307      	str	r3, [sp, #28]
 800f5d4:	9b02      	ldr	r3, [sp, #8]
 800f5d6:	f003 0301 	and.w	r3, r3, #1
 800f5da:	46b8      	mov	r8, r7
 800f5dc:	9306      	str	r3, [sp, #24]
 800f5de:	4607      	mov	r7, r0
 800f5e0:	9b01      	ldr	r3, [sp, #4]
 800f5e2:	4631      	mov	r1, r6
 800f5e4:	3b01      	subs	r3, #1
 800f5e6:	4658      	mov	r0, fp
 800f5e8:	9302      	str	r3, [sp, #8]
 800f5ea:	f7ff fa69 	bl	800eac0 <quorem>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	3330      	adds	r3, #48	; 0x30
 800f5f2:	9004      	str	r0, [sp, #16]
 800f5f4:	4641      	mov	r1, r8
 800f5f6:	4658      	mov	r0, fp
 800f5f8:	9308      	str	r3, [sp, #32]
 800f5fa:	f000 fb71 	bl	800fce0 <__mcmp>
 800f5fe:	463a      	mov	r2, r7
 800f600:	4681      	mov	r9, r0
 800f602:	4631      	mov	r1, r6
 800f604:	4620      	mov	r0, r4
 800f606:	f000 fb87 	bl	800fd18 <__mdiff>
 800f60a:	68c2      	ldr	r2, [r0, #12]
 800f60c:	9b08      	ldr	r3, [sp, #32]
 800f60e:	4605      	mov	r5, r0
 800f610:	bb02      	cbnz	r2, 800f654 <_dtoa_r+0xa7c>
 800f612:	4601      	mov	r1, r0
 800f614:	4658      	mov	r0, fp
 800f616:	f000 fb63 	bl	800fce0 <__mcmp>
 800f61a:	9b08      	ldr	r3, [sp, #32]
 800f61c:	4602      	mov	r2, r0
 800f61e:	4629      	mov	r1, r5
 800f620:	4620      	mov	r0, r4
 800f622:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800f626:	f000 f91d 	bl	800f864 <_Bfree>
 800f62a:	9b05      	ldr	r3, [sp, #20]
 800f62c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f62e:	9d01      	ldr	r5, [sp, #4]
 800f630:	ea43 0102 	orr.w	r1, r3, r2
 800f634:	9b06      	ldr	r3, [sp, #24]
 800f636:	430b      	orrs	r3, r1
 800f638:	9b08      	ldr	r3, [sp, #32]
 800f63a:	d10d      	bne.n	800f658 <_dtoa_r+0xa80>
 800f63c:	2b39      	cmp	r3, #57	; 0x39
 800f63e:	d029      	beq.n	800f694 <_dtoa_r+0xabc>
 800f640:	f1b9 0f00 	cmp.w	r9, #0
 800f644:	dd01      	ble.n	800f64a <_dtoa_r+0xa72>
 800f646:	9b04      	ldr	r3, [sp, #16]
 800f648:	3331      	adds	r3, #49	; 0x31
 800f64a:	9a02      	ldr	r2, [sp, #8]
 800f64c:	7013      	strb	r3, [r2, #0]
 800f64e:	e774      	b.n	800f53a <_dtoa_r+0x962>
 800f650:	4638      	mov	r0, r7
 800f652:	e7b9      	b.n	800f5c8 <_dtoa_r+0x9f0>
 800f654:	2201      	movs	r2, #1
 800f656:	e7e2      	b.n	800f61e <_dtoa_r+0xa46>
 800f658:	f1b9 0f00 	cmp.w	r9, #0
 800f65c:	db06      	blt.n	800f66c <_dtoa_r+0xa94>
 800f65e:	9905      	ldr	r1, [sp, #20]
 800f660:	ea41 0909 	orr.w	r9, r1, r9
 800f664:	9906      	ldr	r1, [sp, #24]
 800f666:	ea59 0101 	orrs.w	r1, r9, r1
 800f66a:	d120      	bne.n	800f6ae <_dtoa_r+0xad6>
 800f66c:	2a00      	cmp	r2, #0
 800f66e:	ddec      	ble.n	800f64a <_dtoa_r+0xa72>
 800f670:	4659      	mov	r1, fp
 800f672:	2201      	movs	r2, #1
 800f674:	4620      	mov	r0, r4
 800f676:	9301      	str	r3, [sp, #4]
 800f678:	f000 fac6 	bl	800fc08 <__lshift>
 800f67c:	4631      	mov	r1, r6
 800f67e:	4683      	mov	fp, r0
 800f680:	f000 fb2e 	bl	800fce0 <__mcmp>
 800f684:	2800      	cmp	r0, #0
 800f686:	9b01      	ldr	r3, [sp, #4]
 800f688:	dc02      	bgt.n	800f690 <_dtoa_r+0xab8>
 800f68a:	d1de      	bne.n	800f64a <_dtoa_r+0xa72>
 800f68c:	07da      	lsls	r2, r3, #31
 800f68e:	d5dc      	bpl.n	800f64a <_dtoa_r+0xa72>
 800f690:	2b39      	cmp	r3, #57	; 0x39
 800f692:	d1d8      	bne.n	800f646 <_dtoa_r+0xa6e>
 800f694:	9a02      	ldr	r2, [sp, #8]
 800f696:	2339      	movs	r3, #57	; 0x39
 800f698:	7013      	strb	r3, [r2, #0]
 800f69a:	462b      	mov	r3, r5
 800f69c:	461d      	mov	r5, r3
 800f69e:	3b01      	subs	r3, #1
 800f6a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f6a4:	2a39      	cmp	r2, #57	; 0x39
 800f6a6:	d050      	beq.n	800f74a <_dtoa_r+0xb72>
 800f6a8:	3201      	adds	r2, #1
 800f6aa:	701a      	strb	r2, [r3, #0]
 800f6ac:	e745      	b.n	800f53a <_dtoa_r+0x962>
 800f6ae:	2a00      	cmp	r2, #0
 800f6b0:	dd03      	ble.n	800f6ba <_dtoa_r+0xae2>
 800f6b2:	2b39      	cmp	r3, #57	; 0x39
 800f6b4:	d0ee      	beq.n	800f694 <_dtoa_r+0xabc>
 800f6b6:	3301      	adds	r3, #1
 800f6b8:	e7c7      	b.n	800f64a <_dtoa_r+0xa72>
 800f6ba:	9a01      	ldr	r2, [sp, #4]
 800f6bc:	9907      	ldr	r1, [sp, #28]
 800f6be:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f6c2:	428a      	cmp	r2, r1
 800f6c4:	d02a      	beq.n	800f71c <_dtoa_r+0xb44>
 800f6c6:	4659      	mov	r1, fp
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	220a      	movs	r2, #10
 800f6cc:	4620      	mov	r0, r4
 800f6ce:	f000 f8eb 	bl	800f8a8 <__multadd>
 800f6d2:	45b8      	cmp	r8, r7
 800f6d4:	4683      	mov	fp, r0
 800f6d6:	f04f 0300 	mov.w	r3, #0
 800f6da:	f04f 020a 	mov.w	r2, #10
 800f6de:	4641      	mov	r1, r8
 800f6e0:	4620      	mov	r0, r4
 800f6e2:	d107      	bne.n	800f6f4 <_dtoa_r+0xb1c>
 800f6e4:	f000 f8e0 	bl	800f8a8 <__multadd>
 800f6e8:	4680      	mov	r8, r0
 800f6ea:	4607      	mov	r7, r0
 800f6ec:	9b01      	ldr	r3, [sp, #4]
 800f6ee:	3301      	adds	r3, #1
 800f6f0:	9301      	str	r3, [sp, #4]
 800f6f2:	e775      	b.n	800f5e0 <_dtoa_r+0xa08>
 800f6f4:	f000 f8d8 	bl	800f8a8 <__multadd>
 800f6f8:	4639      	mov	r1, r7
 800f6fa:	4680      	mov	r8, r0
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	220a      	movs	r2, #10
 800f700:	4620      	mov	r0, r4
 800f702:	f000 f8d1 	bl	800f8a8 <__multadd>
 800f706:	4607      	mov	r7, r0
 800f708:	e7f0      	b.n	800f6ec <_dtoa_r+0xb14>
 800f70a:	f1b9 0f00 	cmp.w	r9, #0
 800f70e:	9a00      	ldr	r2, [sp, #0]
 800f710:	bfcc      	ite	gt
 800f712:	464d      	movgt	r5, r9
 800f714:	2501      	movle	r5, #1
 800f716:	4415      	add	r5, r2
 800f718:	f04f 0800 	mov.w	r8, #0
 800f71c:	4659      	mov	r1, fp
 800f71e:	2201      	movs	r2, #1
 800f720:	4620      	mov	r0, r4
 800f722:	9301      	str	r3, [sp, #4]
 800f724:	f000 fa70 	bl	800fc08 <__lshift>
 800f728:	4631      	mov	r1, r6
 800f72a:	4683      	mov	fp, r0
 800f72c:	f000 fad8 	bl	800fce0 <__mcmp>
 800f730:	2800      	cmp	r0, #0
 800f732:	dcb2      	bgt.n	800f69a <_dtoa_r+0xac2>
 800f734:	d102      	bne.n	800f73c <_dtoa_r+0xb64>
 800f736:	9b01      	ldr	r3, [sp, #4]
 800f738:	07db      	lsls	r3, r3, #31
 800f73a:	d4ae      	bmi.n	800f69a <_dtoa_r+0xac2>
 800f73c:	462b      	mov	r3, r5
 800f73e:	461d      	mov	r5, r3
 800f740:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f744:	2a30      	cmp	r2, #48	; 0x30
 800f746:	d0fa      	beq.n	800f73e <_dtoa_r+0xb66>
 800f748:	e6f7      	b.n	800f53a <_dtoa_r+0x962>
 800f74a:	9a00      	ldr	r2, [sp, #0]
 800f74c:	429a      	cmp	r2, r3
 800f74e:	d1a5      	bne.n	800f69c <_dtoa_r+0xac4>
 800f750:	f10a 0a01 	add.w	sl, sl, #1
 800f754:	2331      	movs	r3, #49	; 0x31
 800f756:	e779      	b.n	800f64c <_dtoa_r+0xa74>
 800f758:	4b13      	ldr	r3, [pc, #76]	; (800f7a8 <_dtoa_r+0xbd0>)
 800f75a:	f7ff baaf 	b.w	800ecbc <_dtoa_r+0xe4>
 800f75e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f760:	2b00      	cmp	r3, #0
 800f762:	f47f aa86 	bne.w	800ec72 <_dtoa_r+0x9a>
 800f766:	4b11      	ldr	r3, [pc, #68]	; (800f7ac <_dtoa_r+0xbd4>)
 800f768:	f7ff baa8 	b.w	800ecbc <_dtoa_r+0xe4>
 800f76c:	f1b9 0f00 	cmp.w	r9, #0
 800f770:	dc03      	bgt.n	800f77a <_dtoa_r+0xba2>
 800f772:	9b05      	ldr	r3, [sp, #20]
 800f774:	2b02      	cmp	r3, #2
 800f776:	f73f aec9 	bgt.w	800f50c <_dtoa_r+0x934>
 800f77a:	9d00      	ldr	r5, [sp, #0]
 800f77c:	4631      	mov	r1, r6
 800f77e:	4658      	mov	r0, fp
 800f780:	f7ff f99e 	bl	800eac0 <quorem>
 800f784:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f788:	f805 3b01 	strb.w	r3, [r5], #1
 800f78c:	9a00      	ldr	r2, [sp, #0]
 800f78e:	1aaa      	subs	r2, r5, r2
 800f790:	4591      	cmp	r9, r2
 800f792:	ddba      	ble.n	800f70a <_dtoa_r+0xb32>
 800f794:	4659      	mov	r1, fp
 800f796:	2300      	movs	r3, #0
 800f798:	220a      	movs	r2, #10
 800f79a:	4620      	mov	r0, r4
 800f79c:	f000 f884 	bl	800f8a8 <__multadd>
 800f7a0:	4683      	mov	fp, r0
 800f7a2:	e7eb      	b.n	800f77c <_dtoa_r+0xba4>
 800f7a4:	080110cf 	.word	0x080110cf
 800f7a8:	08011028 	.word	0x08011028
 800f7ac:	0801104c 	.word	0x0801104c

0800f7b0 <_localeconv_r>:
 800f7b0:	4800      	ldr	r0, [pc, #0]	; (800f7b4 <_localeconv_r+0x4>)
 800f7b2:	4770      	bx	lr
 800f7b4:	200002d4 	.word	0x200002d4

0800f7b8 <malloc>:
 800f7b8:	4b02      	ldr	r3, [pc, #8]	; (800f7c4 <malloc+0xc>)
 800f7ba:	4601      	mov	r1, r0
 800f7bc:	6818      	ldr	r0, [r3, #0]
 800f7be:	f000 bbef 	b.w	800ffa0 <_malloc_r>
 800f7c2:	bf00      	nop
 800f7c4:	20000180 	.word	0x20000180

0800f7c8 <memcpy>:
 800f7c8:	440a      	add	r2, r1
 800f7ca:	4291      	cmp	r1, r2
 800f7cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800f7d0:	d100      	bne.n	800f7d4 <memcpy+0xc>
 800f7d2:	4770      	bx	lr
 800f7d4:	b510      	push	{r4, lr}
 800f7d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f7da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f7de:	4291      	cmp	r1, r2
 800f7e0:	d1f9      	bne.n	800f7d6 <memcpy+0xe>
 800f7e2:	bd10      	pop	{r4, pc}

0800f7e4 <_Balloc>:
 800f7e4:	b570      	push	{r4, r5, r6, lr}
 800f7e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f7e8:	4604      	mov	r4, r0
 800f7ea:	460d      	mov	r5, r1
 800f7ec:	b976      	cbnz	r6, 800f80c <_Balloc+0x28>
 800f7ee:	2010      	movs	r0, #16
 800f7f0:	f7ff ffe2 	bl	800f7b8 <malloc>
 800f7f4:	4602      	mov	r2, r0
 800f7f6:	6260      	str	r0, [r4, #36]	; 0x24
 800f7f8:	b920      	cbnz	r0, 800f804 <_Balloc+0x20>
 800f7fa:	4b18      	ldr	r3, [pc, #96]	; (800f85c <_Balloc+0x78>)
 800f7fc:	4818      	ldr	r0, [pc, #96]	; (800f860 <_Balloc+0x7c>)
 800f7fe:	2166      	movs	r1, #102	; 0x66
 800f800:	f000 fd94 	bl	801032c <__assert_func>
 800f804:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f808:	6006      	str	r6, [r0, #0]
 800f80a:	60c6      	str	r6, [r0, #12]
 800f80c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f80e:	68f3      	ldr	r3, [r6, #12]
 800f810:	b183      	cbz	r3, 800f834 <_Balloc+0x50>
 800f812:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f814:	68db      	ldr	r3, [r3, #12]
 800f816:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f81a:	b9b8      	cbnz	r0, 800f84c <_Balloc+0x68>
 800f81c:	2101      	movs	r1, #1
 800f81e:	fa01 f605 	lsl.w	r6, r1, r5
 800f822:	1d72      	adds	r2, r6, #5
 800f824:	0092      	lsls	r2, r2, #2
 800f826:	4620      	mov	r0, r4
 800f828:	f000 fb5a 	bl	800fee0 <_calloc_r>
 800f82c:	b160      	cbz	r0, 800f848 <_Balloc+0x64>
 800f82e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f832:	e00e      	b.n	800f852 <_Balloc+0x6e>
 800f834:	2221      	movs	r2, #33	; 0x21
 800f836:	2104      	movs	r1, #4
 800f838:	4620      	mov	r0, r4
 800f83a:	f000 fb51 	bl	800fee0 <_calloc_r>
 800f83e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f840:	60f0      	str	r0, [r6, #12]
 800f842:	68db      	ldr	r3, [r3, #12]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d1e4      	bne.n	800f812 <_Balloc+0x2e>
 800f848:	2000      	movs	r0, #0
 800f84a:	bd70      	pop	{r4, r5, r6, pc}
 800f84c:	6802      	ldr	r2, [r0, #0]
 800f84e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f852:	2300      	movs	r3, #0
 800f854:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f858:	e7f7      	b.n	800f84a <_Balloc+0x66>
 800f85a:	bf00      	nop
 800f85c:	08011059 	.word	0x08011059
 800f860:	080110e0 	.word	0x080110e0

0800f864 <_Bfree>:
 800f864:	b570      	push	{r4, r5, r6, lr}
 800f866:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f868:	4605      	mov	r5, r0
 800f86a:	460c      	mov	r4, r1
 800f86c:	b976      	cbnz	r6, 800f88c <_Bfree+0x28>
 800f86e:	2010      	movs	r0, #16
 800f870:	f7ff ffa2 	bl	800f7b8 <malloc>
 800f874:	4602      	mov	r2, r0
 800f876:	6268      	str	r0, [r5, #36]	; 0x24
 800f878:	b920      	cbnz	r0, 800f884 <_Bfree+0x20>
 800f87a:	4b09      	ldr	r3, [pc, #36]	; (800f8a0 <_Bfree+0x3c>)
 800f87c:	4809      	ldr	r0, [pc, #36]	; (800f8a4 <_Bfree+0x40>)
 800f87e:	218a      	movs	r1, #138	; 0x8a
 800f880:	f000 fd54 	bl	801032c <__assert_func>
 800f884:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f888:	6006      	str	r6, [r0, #0]
 800f88a:	60c6      	str	r6, [r0, #12]
 800f88c:	b13c      	cbz	r4, 800f89e <_Bfree+0x3a>
 800f88e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f890:	6862      	ldr	r2, [r4, #4]
 800f892:	68db      	ldr	r3, [r3, #12]
 800f894:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f898:	6021      	str	r1, [r4, #0]
 800f89a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f89e:	bd70      	pop	{r4, r5, r6, pc}
 800f8a0:	08011059 	.word	0x08011059
 800f8a4:	080110e0 	.word	0x080110e0

0800f8a8 <__multadd>:
 800f8a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8ac:	690e      	ldr	r6, [r1, #16]
 800f8ae:	4607      	mov	r7, r0
 800f8b0:	4698      	mov	r8, r3
 800f8b2:	460c      	mov	r4, r1
 800f8b4:	f101 0014 	add.w	r0, r1, #20
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	6805      	ldr	r5, [r0, #0]
 800f8bc:	b2a9      	uxth	r1, r5
 800f8be:	fb02 8101 	mla	r1, r2, r1, r8
 800f8c2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f8c6:	0c2d      	lsrs	r5, r5, #16
 800f8c8:	fb02 c505 	mla	r5, r2, r5, ip
 800f8cc:	b289      	uxth	r1, r1
 800f8ce:	3301      	adds	r3, #1
 800f8d0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f8d4:	429e      	cmp	r6, r3
 800f8d6:	f840 1b04 	str.w	r1, [r0], #4
 800f8da:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f8de:	dcec      	bgt.n	800f8ba <__multadd+0x12>
 800f8e0:	f1b8 0f00 	cmp.w	r8, #0
 800f8e4:	d022      	beq.n	800f92c <__multadd+0x84>
 800f8e6:	68a3      	ldr	r3, [r4, #8]
 800f8e8:	42b3      	cmp	r3, r6
 800f8ea:	dc19      	bgt.n	800f920 <__multadd+0x78>
 800f8ec:	6861      	ldr	r1, [r4, #4]
 800f8ee:	4638      	mov	r0, r7
 800f8f0:	3101      	adds	r1, #1
 800f8f2:	f7ff ff77 	bl	800f7e4 <_Balloc>
 800f8f6:	4605      	mov	r5, r0
 800f8f8:	b928      	cbnz	r0, 800f906 <__multadd+0x5e>
 800f8fa:	4602      	mov	r2, r0
 800f8fc:	4b0d      	ldr	r3, [pc, #52]	; (800f934 <__multadd+0x8c>)
 800f8fe:	480e      	ldr	r0, [pc, #56]	; (800f938 <__multadd+0x90>)
 800f900:	21b5      	movs	r1, #181	; 0xb5
 800f902:	f000 fd13 	bl	801032c <__assert_func>
 800f906:	6922      	ldr	r2, [r4, #16]
 800f908:	3202      	adds	r2, #2
 800f90a:	f104 010c 	add.w	r1, r4, #12
 800f90e:	0092      	lsls	r2, r2, #2
 800f910:	300c      	adds	r0, #12
 800f912:	f7ff ff59 	bl	800f7c8 <memcpy>
 800f916:	4621      	mov	r1, r4
 800f918:	4638      	mov	r0, r7
 800f91a:	f7ff ffa3 	bl	800f864 <_Bfree>
 800f91e:	462c      	mov	r4, r5
 800f920:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f924:	3601      	adds	r6, #1
 800f926:	f8c3 8014 	str.w	r8, [r3, #20]
 800f92a:	6126      	str	r6, [r4, #16]
 800f92c:	4620      	mov	r0, r4
 800f92e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f932:	bf00      	nop
 800f934:	080110cf 	.word	0x080110cf
 800f938:	080110e0 	.word	0x080110e0

0800f93c <__hi0bits>:
 800f93c:	0c03      	lsrs	r3, r0, #16
 800f93e:	041b      	lsls	r3, r3, #16
 800f940:	b9d3      	cbnz	r3, 800f978 <__hi0bits+0x3c>
 800f942:	0400      	lsls	r0, r0, #16
 800f944:	2310      	movs	r3, #16
 800f946:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f94a:	bf04      	itt	eq
 800f94c:	0200      	lsleq	r0, r0, #8
 800f94e:	3308      	addeq	r3, #8
 800f950:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f954:	bf04      	itt	eq
 800f956:	0100      	lsleq	r0, r0, #4
 800f958:	3304      	addeq	r3, #4
 800f95a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f95e:	bf04      	itt	eq
 800f960:	0080      	lsleq	r0, r0, #2
 800f962:	3302      	addeq	r3, #2
 800f964:	2800      	cmp	r0, #0
 800f966:	db05      	blt.n	800f974 <__hi0bits+0x38>
 800f968:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f96c:	f103 0301 	add.w	r3, r3, #1
 800f970:	bf08      	it	eq
 800f972:	2320      	moveq	r3, #32
 800f974:	4618      	mov	r0, r3
 800f976:	4770      	bx	lr
 800f978:	2300      	movs	r3, #0
 800f97a:	e7e4      	b.n	800f946 <__hi0bits+0xa>

0800f97c <__lo0bits>:
 800f97c:	6803      	ldr	r3, [r0, #0]
 800f97e:	f013 0207 	ands.w	r2, r3, #7
 800f982:	4601      	mov	r1, r0
 800f984:	d00b      	beq.n	800f99e <__lo0bits+0x22>
 800f986:	07da      	lsls	r2, r3, #31
 800f988:	d424      	bmi.n	800f9d4 <__lo0bits+0x58>
 800f98a:	0798      	lsls	r0, r3, #30
 800f98c:	bf49      	itett	mi
 800f98e:	085b      	lsrmi	r3, r3, #1
 800f990:	089b      	lsrpl	r3, r3, #2
 800f992:	2001      	movmi	r0, #1
 800f994:	600b      	strmi	r3, [r1, #0]
 800f996:	bf5c      	itt	pl
 800f998:	600b      	strpl	r3, [r1, #0]
 800f99a:	2002      	movpl	r0, #2
 800f99c:	4770      	bx	lr
 800f99e:	b298      	uxth	r0, r3
 800f9a0:	b9b0      	cbnz	r0, 800f9d0 <__lo0bits+0x54>
 800f9a2:	0c1b      	lsrs	r3, r3, #16
 800f9a4:	2010      	movs	r0, #16
 800f9a6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f9aa:	bf04      	itt	eq
 800f9ac:	0a1b      	lsreq	r3, r3, #8
 800f9ae:	3008      	addeq	r0, #8
 800f9b0:	071a      	lsls	r2, r3, #28
 800f9b2:	bf04      	itt	eq
 800f9b4:	091b      	lsreq	r3, r3, #4
 800f9b6:	3004      	addeq	r0, #4
 800f9b8:	079a      	lsls	r2, r3, #30
 800f9ba:	bf04      	itt	eq
 800f9bc:	089b      	lsreq	r3, r3, #2
 800f9be:	3002      	addeq	r0, #2
 800f9c0:	07da      	lsls	r2, r3, #31
 800f9c2:	d403      	bmi.n	800f9cc <__lo0bits+0x50>
 800f9c4:	085b      	lsrs	r3, r3, #1
 800f9c6:	f100 0001 	add.w	r0, r0, #1
 800f9ca:	d005      	beq.n	800f9d8 <__lo0bits+0x5c>
 800f9cc:	600b      	str	r3, [r1, #0]
 800f9ce:	4770      	bx	lr
 800f9d0:	4610      	mov	r0, r2
 800f9d2:	e7e8      	b.n	800f9a6 <__lo0bits+0x2a>
 800f9d4:	2000      	movs	r0, #0
 800f9d6:	4770      	bx	lr
 800f9d8:	2020      	movs	r0, #32
 800f9da:	4770      	bx	lr

0800f9dc <__i2b>:
 800f9dc:	b510      	push	{r4, lr}
 800f9de:	460c      	mov	r4, r1
 800f9e0:	2101      	movs	r1, #1
 800f9e2:	f7ff feff 	bl	800f7e4 <_Balloc>
 800f9e6:	4602      	mov	r2, r0
 800f9e8:	b928      	cbnz	r0, 800f9f6 <__i2b+0x1a>
 800f9ea:	4b05      	ldr	r3, [pc, #20]	; (800fa00 <__i2b+0x24>)
 800f9ec:	4805      	ldr	r0, [pc, #20]	; (800fa04 <__i2b+0x28>)
 800f9ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f9f2:	f000 fc9b 	bl	801032c <__assert_func>
 800f9f6:	2301      	movs	r3, #1
 800f9f8:	6144      	str	r4, [r0, #20]
 800f9fa:	6103      	str	r3, [r0, #16]
 800f9fc:	bd10      	pop	{r4, pc}
 800f9fe:	bf00      	nop
 800fa00:	080110cf 	.word	0x080110cf
 800fa04:	080110e0 	.word	0x080110e0

0800fa08 <__multiply>:
 800fa08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa0c:	4614      	mov	r4, r2
 800fa0e:	690a      	ldr	r2, [r1, #16]
 800fa10:	6923      	ldr	r3, [r4, #16]
 800fa12:	429a      	cmp	r2, r3
 800fa14:	bfb8      	it	lt
 800fa16:	460b      	movlt	r3, r1
 800fa18:	460d      	mov	r5, r1
 800fa1a:	bfbc      	itt	lt
 800fa1c:	4625      	movlt	r5, r4
 800fa1e:	461c      	movlt	r4, r3
 800fa20:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800fa24:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800fa28:	68ab      	ldr	r3, [r5, #8]
 800fa2a:	6869      	ldr	r1, [r5, #4]
 800fa2c:	eb0a 0709 	add.w	r7, sl, r9
 800fa30:	42bb      	cmp	r3, r7
 800fa32:	b085      	sub	sp, #20
 800fa34:	bfb8      	it	lt
 800fa36:	3101      	addlt	r1, #1
 800fa38:	f7ff fed4 	bl	800f7e4 <_Balloc>
 800fa3c:	b930      	cbnz	r0, 800fa4c <__multiply+0x44>
 800fa3e:	4602      	mov	r2, r0
 800fa40:	4b42      	ldr	r3, [pc, #264]	; (800fb4c <__multiply+0x144>)
 800fa42:	4843      	ldr	r0, [pc, #268]	; (800fb50 <__multiply+0x148>)
 800fa44:	f240 115d 	movw	r1, #349	; 0x15d
 800fa48:	f000 fc70 	bl	801032c <__assert_func>
 800fa4c:	f100 0614 	add.w	r6, r0, #20
 800fa50:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800fa54:	4633      	mov	r3, r6
 800fa56:	2200      	movs	r2, #0
 800fa58:	4543      	cmp	r3, r8
 800fa5a:	d31e      	bcc.n	800fa9a <__multiply+0x92>
 800fa5c:	f105 0c14 	add.w	ip, r5, #20
 800fa60:	f104 0314 	add.w	r3, r4, #20
 800fa64:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800fa68:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800fa6c:	9202      	str	r2, [sp, #8]
 800fa6e:	ebac 0205 	sub.w	r2, ip, r5
 800fa72:	3a15      	subs	r2, #21
 800fa74:	f022 0203 	bic.w	r2, r2, #3
 800fa78:	3204      	adds	r2, #4
 800fa7a:	f105 0115 	add.w	r1, r5, #21
 800fa7e:	458c      	cmp	ip, r1
 800fa80:	bf38      	it	cc
 800fa82:	2204      	movcc	r2, #4
 800fa84:	9201      	str	r2, [sp, #4]
 800fa86:	9a02      	ldr	r2, [sp, #8]
 800fa88:	9303      	str	r3, [sp, #12]
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d808      	bhi.n	800faa0 <__multiply+0x98>
 800fa8e:	2f00      	cmp	r7, #0
 800fa90:	dc55      	bgt.n	800fb3e <__multiply+0x136>
 800fa92:	6107      	str	r7, [r0, #16]
 800fa94:	b005      	add	sp, #20
 800fa96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa9a:	f843 2b04 	str.w	r2, [r3], #4
 800fa9e:	e7db      	b.n	800fa58 <__multiply+0x50>
 800faa0:	f8b3 a000 	ldrh.w	sl, [r3]
 800faa4:	f1ba 0f00 	cmp.w	sl, #0
 800faa8:	d020      	beq.n	800faec <__multiply+0xe4>
 800faaa:	f105 0e14 	add.w	lr, r5, #20
 800faae:	46b1      	mov	r9, r6
 800fab0:	2200      	movs	r2, #0
 800fab2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800fab6:	f8d9 b000 	ldr.w	fp, [r9]
 800faba:	b2a1      	uxth	r1, r4
 800fabc:	fa1f fb8b 	uxth.w	fp, fp
 800fac0:	fb0a b101 	mla	r1, sl, r1, fp
 800fac4:	4411      	add	r1, r2
 800fac6:	f8d9 2000 	ldr.w	r2, [r9]
 800faca:	0c24      	lsrs	r4, r4, #16
 800facc:	0c12      	lsrs	r2, r2, #16
 800face:	fb0a 2404 	mla	r4, sl, r4, r2
 800fad2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800fad6:	b289      	uxth	r1, r1
 800fad8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800fadc:	45f4      	cmp	ip, lr
 800fade:	f849 1b04 	str.w	r1, [r9], #4
 800fae2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800fae6:	d8e4      	bhi.n	800fab2 <__multiply+0xaa>
 800fae8:	9901      	ldr	r1, [sp, #4]
 800faea:	5072      	str	r2, [r6, r1]
 800faec:	9a03      	ldr	r2, [sp, #12]
 800faee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800faf2:	3304      	adds	r3, #4
 800faf4:	f1b9 0f00 	cmp.w	r9, #0
 800faf8:	d01f      	beq.n	800fb3a <__multiply+0x132>
 800fafa:	6834      	ldr	r4, [r6, #0]
 800fafc:	f105 0114 	add.w	r1, r5, #20
 800fb00:	46b6      	mov	lr, r6
 800fb02:	f04f 0a00 	mov.w	sl, #0
 800fb06:	880a      	ldrh	r2, [r1, #0]
 800fb08:	f8be b002 	ldrh.w	fp, [lr, #2]
 800fb0c:	fb09 b202 	mla	r2, r9, r2, fp
 800fb10:	4492      	add	sl, r2
 800fb12:	b2a4      	uxth	r4, r4
 800fb14:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800fb18:	f84e 4b04 	str.w	r4, [lr], #4
 800fb1c:	f851 4b04 	ldr.w	r4, [r1], #4
 800fb20:	f8be 2000 	ldrh.w	r2, [lr]
 800fb24:	0c24      	lsrs	r4, r4, #16
 800fb26:	fb09 2404 	mla	r4, r9, r4, r2
 800fb2a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800fb2e:	458c      	cmp	ip, r1
 800fb30:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800fb34:	d8e7      	bhi.n	800fb06 <__multiply+0xfe>
 800fb36:	9a01      	ldr	r2, [sp, #4]
 800fb38:	50b4      	str	r4, [r6, r2]
 800fb3a:	3604      	adds	r6, #4
 800fb3c:	e7a3      	b.n	800fa86 <__multiply+0x7e>
 800fb3e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d1a5      	bne.n	800fa92 <__multiply+0x8a>
 800fb46:	3f01      	subs	r7, #1
 800fb48:	e7a1      	b.n	800fa8e <__multiply+0x86>
 800fb4a:	bf00      	nop
 800fb4c:	080110cf 	.word	0x080110cf
 800fb50:	080110e0 	.word	0x080110e0

0800fb54 <__pow5mult>:
 800fb54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb58:	4615      	mov	r5, r2
 800fb5a:	f012 0203 	ands.w	r2, r2, #3
 800fb5e:	4606      	mov	r6, r0
 800fb60:	460f      	mov	r7, r1
 800fb62:	d007      	beq.n	800fb74 <__pow5mult+0x20>
 800fb64:	4c25      	ldr	r4, [pc, #148]	; (800fbfc <__pow5mult+0xa8>)
 800fb66:	3a01      	subs	r2, #1
 800fb68:	2300      	movs	r3, #0
 800fb6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fb6e:	f7ff fe9b 	bl	800f8a8 <__multadd>
 800fb72:	4607      	mov	r7, r0
 800fb74:	10ad      	asrs	r5, r5, #2
 800fb76:	d03d      	beq.n	800fbf4 <__pow5mult+0xa0>
 800fb78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fb7a:	b97c      	cbnz	r4, 800fb9c <__pow5mult+0x48>
 800fb7c:	2010      	movs	r0, #16
 800fb7e:	f7ff fe1b 	bl	800f7b8 <malloc>
 800fb82:	4602      	mov	r2, r0
 800fb84:	6270      	str	r0, [r6, #36]	; 0x24
 800fb86:	b928      	cbnz	r0, 800fb94 <__pow5mult+0x40>
 800fb88:	4b1d      	ldr	r3, [pc, #116]	; (800fc00 <__pow5mult+0xac>)
 800fb8a:	481e      	ldr	r0, [pc, #120]	; (800fc04 <__pow5mult+0xb0>)
 800fb8c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fb90:	f000 fbcc 	bl	801032c <__assert_func>
 800fb94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fb98:	6004      	str	r4, [r0, #0]
 800fb9a:	60c4      	str	r4, [r0, #12]
 800fb9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fba0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fba4:	b94c      	cbnz	r4, 800fbba <__pow5mult+0x66>
 800fba6:	f240 2171 	movw	r1, #625	; 0x271
 800fbaa:	4630      	mov	r0, r6
 800fbac:	f7ff ff16 	bl	800f9dc <__i2b>
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	f8c8 0008 	str.w	r0, [r8, #8]
 800fbb6:	4604      	mov	r4, r0
 800fbb8:	6003      	str	r3, [r0, #0]
 800fbba:	f04f 0900 	mov.w	r9, #0
 800fbbe:	07eb      	lsls	r3, r5, #31
 800fbc0:	d50a      	bpl.n	800fbd8 <__pow5mult+0x84>
 800fbc2:	4639      	mov	r1, r7
 800fbc4:	4622      	mov	r2, r4
 800fbc6:	4630      	mov	r0, r6
 800fbc8:	f7ff ff1e 	bl	800fa08 <__multiply>
 800fbcc:	4639      	mov	r1, r7
 800fbce:	4680      	mov	r8, r0
 800fbd0:	4630      	mov	r0, r6
 800fbd2:	f7ff fe47 	bl	800f864 <_Bfree>
 800fbd6:	4647      	mov	r7, r8
 800fbd8:	106d      	asrs	r5, r5, #1
 800fbda:	d00b      	beq.n	800fbf4 <__pow5mult+0xa0>
 800fbdc:	6820      	ldr	r0, [r4, #0]
 800fbde:	b938      	cbnz	r0, 800fbf0 <__pow5mult+0x9c>
 800fbe0:	4622      	mov	r2, r4
 800fbe2:	4621      	mov	r1, r4
 800fbe4:	4630      	mov	r0, r6
 800fbe6:	f7ff ff0f 	bl	800fa08 <__multiply>
 800fbea:	6020      	str	r0, [r4, #0]
 800fbec:	f8c0 9000 	str.w	r9, [r0]
 800fbf0:	4604      	mov	r4, r0
 800fbf2:	e7e4      	b.n	800fbbe <__pow5mult+0x6a>
 800fbf4:	4638      	mov	r0, r7
 800fbf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbfa:	bf00      	nop
 800fbfc:	08011230 	.word	0x08011230
 800fc00:	08011059 	.word	0x08011059
 800fc04:	080110e0 	.word	0x080110e0

0800fc08 <__lshift>:
 800fc08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc0c:	460c      	mov	r4, r1
 800fc0e:	6849      	ldr	r1, [r1, #4]
 800fc10:	6923      	ldr	r3, [r4, #16]
 800fc12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fc16:	68a3      	ldr	r3, [r4, #8]
 800fc18:	4607      	mov	r7, r0
 800fc1a:	4691      	mov	r9, r2
 800fc1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fc20:	f108 0601 	add.w	r6, r8, #1
 800fc24:	42b3      	cmp	r3, r6
 800fc26:	db0b      	blt.n	800fc40 <__lshift+0x38>
 800fc28:	4638      	mov	r0, r7
 800fc2a:	f7ff fddb 	bl	800f7e4 <_Balloc>
 800fc2e:	4605      	mov	r5, r0
 800fc30:	b948      	cbnz	r0, 800fc46 <__lshift+0x3e>
 800fc32:	4602      	mov	r2, r0
 800fc34:	4b28      	ldr	r3, [pc, #160]	; (800fcd8 <__lshift+0xd0>)
 800fc36:	4829      	ldr	r0, [pc, #164]	; (800fcdc <__lshift+0xd4>)
 800fc38:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fc3c:	f000 fb76 	bl	801032c <__assert_func>
 800fc40:	3101      	adds	r1, #1
 800fc42:	005b      	lsls	r3, r3, #1
 800fc44:	e7ee      	b.n	800fc24 <__lshift+0x1c>
 800fc46:	2300      	movs	r3, #0
 800fc48:	f100 0114 	add.w	r1, r0, #20
 800fc4c:	f100 0210 	add.w	r2, r0, #16
 800fc50:	4618      	mov	r0, r3
 800fc52:	4553      	cmp	r3, sl
 800fc54:	db33      	blt.n	800fcbe <__lshift+0xb6>
 800fc56:	6920      	ldr	r0, [r4, #16]
 800fc58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fc5c:	f104 0314 	add.w	r3, r4, #20
 800fc60:	f019 091f 	ands.w	r9, r9, #31
 800fc64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fc68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fc6c:	d02b      	beq.n	800fcc6 <__lshift+0xbe>
 800fc6e:	f1c9 0e20 	rsb	lr, r9, #32
 800fc72:	468a      	mov	sl, r1
 800fc74:	2200      	movs	r2, #0
 800fc76:	6818      	ldr	r0, [r3, #0]
 800fc78:	fa00 f009 	lsl.w	r0, r0, r9
 800fc7c:	4302      	orrs	r2, r0
 800fc7e:	f84a 2b04 	str.w	r2, [sl], #4
 800fc82:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc86:	459c      	cmp	ip, r3
 800fc88:	fa22 f20e 	lsr.w	r2, r2, lr
 800fc8c:	d8f3      	bhi.n	800fc76 <__lshift+0x6e>
 800fc8e:	ebac 0304 	sub.w	r3, ip, r4
 800fc92:	3b15      	subs	r3, #21
 800fc94:	f023 0303 	bic.w	r3, r3, #3
 800fc98:	3304      	adds	r3, #4
 800fc9a:	f104 0015 	add.w	r0, r4, #21
 800fc9e:	4584      	cmp	ip, r0
 800fca0:	bf38      	it	cc
 800fca2:	2304      	movcc	r3, #4
 800fca4:	50ca      	str	r2, [r1, r3]
 800fca6:	b10a      	cbz	r2, 800fcac <__lshift+0xa4>
 800fca8:	f108 0602 	add.w	r6, r8, #2
 800fcac:	3e01      	subs	r6, #1
 800fcae:	4638      	mov	r0, r7
 800fcb0:	612e      	str	r6, [r5, #16]
 800fcb2:	4621      	mov	r1, r4
 800fcb4:	f7ff fdd6 	bl	800f864 <_Bfree>
 800fcb8:	4628      	mov	r0, r5
 800fcba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcbe:	f842 0f04 	str.w	r0, [r2, #4]!
 800fcc2:	3301      	adds	r3, #1
 800fcc4:	e7c5      	b.n	800fc52 <__lshift+0x4a>
 800fcc6:	3904      	subs	r1, #4
 800fcc8:	f853 2b04 	ldr.w	r2, [r3], #4
 800fccc:	f841 2f04 	str.w	r2, [r1, #4]!
 800fcd0:	459c      	cmp	ip, r3
 800fcd2:	d8f9      	bhi.n	800fcc8 <__lshift+0xc0>
 800fcd4:	e7ea      	b.n	800fcac <__lshift+0xa4>
 800fcd6:	bf00      	nop
 800fcd8:	080110cf 	.word	0x080110cf
 800fcdc:	080110e0 	.word	0x080110e0

0800fce0 <__mcmp>:
 800fce0:	b530      	push	{r4, r5, lr}
 800fce2:	6902      	ldr	r2, [r0, #16]
 800fce4:	690c      	ldr	r4, [r1, #16]
 800fce6:	1b12      	subs	r2, r2, r4
 800fce8:	d10e      	bne.n	800fd08 <__mcmp+0x28>
 800fcea:	f100 0314 	add.w	r3, r0, #20
 800fcee:	3114      	adds	r1, #20
 800fcf0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fcf4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fcf8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fcfc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fd00:	42a5      	cmp	r5, r4
 800fd02:	d003      	beq.n	800fd0c <__mcmp+0x2c>
 800fd04:	d305      	bcc.n	800fd12 <__mcmp+0x32>
 800fd06:	2201      	movs	r2, #1
 800fd08:	4610      	mov	r0, r2
 800fd0a:	bd30      	pop	{r4, r5, pc}
 800fd0c:	4283      	cmp	r3, r0
 800fd0e:	d3f3      	bcc.n	800fcf8 <__mcmp+0x18>
 800fd10:	e7fa      	b.n	800fd08 <__mcmp+0x28>
 800fd12:	f04f 32ff 	mov.w	r2, #4294967295
 800fd16:	e7f7      	b.n	800fd08 <__mcmp+0x28>

0800fd18 <__mdiff>:
 800fd18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd1c:	460c      	mov	r4, r1
 800fd1e:	4606      	mov	r6, r0
 800fd20:	4611      	mov	r1, r2
 800fd22:	4620      	mov	r0, r4
 800fd24:	4617      	mov	r7, r2
 800fd26:	f7ff ffdb 	bl	800fce0 <__mcmp>
 800fd2a:	1e05      	subs	r5, r0, #0
 800fd2c:	d110      	bne.n	800fd50 <__mdiff+0x38>
 800fd2e:	4629      	mov	r1, r5
 800fd30:	4630      	mov	r0, r6
 800fd32:	f7ff fd57 	bl	800f7e4 <_Balloc>
 800fd36:	b930      	cbnz	r0, 800fd46 <__mdiff+0x2e>
 800fd38:	4b39      	ldr	r3, [pc, #228]	; (800fe20 <__mdiff+0x108>)
 800fd3a:	4602      	mov	r2, r0
 800fd3c:	f240 2132 	movw	r1, #562	; 0x232
 800fd40:	4838      	ldr	r0, [pc, #224]	; (800fe24 <__mdiff+0x10c>)
 800fd42:	f000 faf3 	bl	801032c <__assert_func>
 800fd46:	2301      	movs	r3, #1
 800fd48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fd4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd50:	bfa4      	itt	ge
 800fd52:	463b      	movge	r3, r7
 800fd54:	4627      	movge	r7, r4
 800fd56:	4630      	mov	r0, r6
 800fd58:	6879      	ldr	r1, [r7, #4]
 800fd5a:	bfa6      	itte	ge
 800fd5c:	461c      	movge	r4, r3
 800fd5e:	2500      	movge	r5, #0
 800fd60:	2501      	movlt	r5, #1
 800fd62:	f7ff fd3f 	bl	800f7e4 <_Balloc>
 800fd66:	b920      	cbnz	r0, 800fd72 <__mdiff+0x5a>
 800fd68:	4b2d      	ldr	r3, [pc, #180]	; (800fe20 <__mdiff+0x108>)
 800fd6a:	4602      	mov	r2, r0
 800fd6c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fd70:	e7e6      	b.n	800fd40 <__mdiff+0x28>
 800fd72:	693e      	ldr	r6, [r7, #16]
 800fd74:	60c5      	str	r5, [r0, #12]
 800fd76:	6925      	ldr	r5, [r4, #16]
 800fd78:	f107 0114 	add.w	r1, r7, #20
 800fd7c:	f104 0914 	add.w	r9, r4, #20
 800fd80:	f100 0e14 	add.w	lr, r0, #20
 800fd84:	f107 0210 	add.w	r2, r7, #16
 800fd88:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800fd8c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800fd90:	46f2      	mov	sl, lr
 800fd92:	2700      	movs	r7, #0
 800fd94:	f859 3b04 	ldr.w	r3, [r9], #4
 800fd98:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fd9c:	fa1f f883 	uxth.w	r8, r3
 800fda0:	fa17 f78b 	uxtah	r7, r7, fp
 800fda4:	0c1b      	lsrs	r3, r3, #16
 800fda6:	eba7 0808 	sub.w	r8, r7, r8
 800fdaa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fdae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fdb2:	fa1f f888 	uxth.w	r8, r8
 800fdb6:	141f      	asrs	r7, r3, #16
 800fdb8:	454d      	cmp	r5, r9
 800fdba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fdbe:	f84a 3b04 	str.w	r3, [sl], #4
 800fdc2:	d8e7      	bhi.n	800fd94 <__mdiff+0x7c>
 800fdc4:	1b2b      	subs	r3, r5, r4
 800fdc6:	3b15      	subs	r3, #21
 800fdc8:	f023 0303 	bic.w	r3, r3, #3
 800fdcc:	3304      	adds	r3, #4
 800fdce:	3415      	adds	r4, #21
 800fdd0:	42a5      	cmp	r5, r4
 800fdd2:	bf38      	it	cc
 800fdd4:	2304      	movcc	r3, #4
 800fdd6:	4419      	add	r1, r3
 800fdd8:	4473      	add	r3, lr
 800fdda:	469e      	mov	lr, r3
 800fddc:	460d      	mov	r5, r1
 800fdde:	4565      	cmp	r5, ip
 800fde0:	d30e      	bcc.n	800fe00 <__mdiff+0xe8>
 800fde2:	f10c 0203 	add.w	r2, ip, #3
 800fde6:	1a52      	subs	r2, r2, r1
 800fde8:	f022 0203 	bic.w	r2, r2, #3
 800fdec:	3903      	subs	r1, #3
 800fdee:	458c      	cmp	ip, r1
 800fdf0:	bf38      	it	cc
 800fdf2:	2200      	movcc	r2, #0
 800fdf4:	441a      	add	r2, r3
 800fdf6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fdfa:	b17b      	cbz	r3, 800fe1c <__mdiff+0x104>
 800fdfc:	6106      	str	r6, [r0, #16]
 800fdfe:	e7a5      	b.n	800fd4c <__mdiff+0x34>
 800fe00:	f855 8b04 	ldr.w	r8, [r5], #4
 800fe04:	fa17 f488 	uxtah	r4, r7, r8
 800fe08:	1422      	asrs	r2, r4, #16
 800fe0a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800fe0e:	b2a4      	uxth	r4, r4
 800fe10:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800fe14:	f84e 4b04 	str.w	r4, [lr], #4
 800fe18:	1417      	asrs	r7, r2, #16
 800fe1a:	e7e0      	b.n	800fdde <__mdiff+0xc6>
 800fe1c:	3e01      	subs	r6, #1
 800fe1e:	e7ea      	b.n	800fdf6 <__mdiff+0xde>
 800fe20:	080110cf 	.word	0x080110cf
 800fe24:	080110e0 	.word	0x080110e0

0800fe28 <__d2b>:
 800fe28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fe2c:	4689      	mov	r9, r1
 800fe2e:	2101      	movs	r1, #1
 800fe30:	ec57 6b10 	vmov	r6, r7, d0
 800fe34:	4690      	mov	r8, r2
 800fe36:	f7ff fcd5 	bl	800f7e4 <_Balloc>
 800fe3a:	4604      	mov	r4, r0
 800fe3c:	b930      	cbnz	r0, 800fe4c <__d2b+0x24>
 800fe3e:	4602      	mov	r2, r0
 800fe40:	4b25      	ldr	r3, [pc, #148]	; (800fed8 <__d2b+0xb0>)
 800fe42:	4826      	ldr	r0, [pc, #152]	; (800fedc <__d2b+0xb4>)
 800fe44:	f240 310a 	movw	r1, #778	; 0x30a
 800fe48:	f000 fa70 	bl	801032c <__assert_func>
 800fe4c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fe50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fe54:	bb35      	cbnz	r5, 800fea4 <__d2b+0x7c>
 800fe56:	2e00      	cmp	r6, #0
 800fe58:	9301      	str	r3, [sp, #4]
 800fe5a:	d028      	beq.n	800feae <__d2b+0x86>
 800fe5c:	4668      	mov	r0, sp
 800fe5e:	9600      	str	r6, [sp, #0]
 800fe60:	f7ff fd8c 	bl	800f97c <__lo0bits>
 800fe64:	9900      	ldr	r1, [sp, #0]
 800fe66:	b300      	cbz	r0, 800feaa <__d2b+0x82>
 800fe68:	9a01      	ldr	r2, [sp, #4]
 800fe6a:	f1c0 0320 	rsb	r3, r0, #32
 800fe6e:	fa02 f303 	lsl.w	r3, r2, r3
 800fe72:	430b      	orrs	r3, r1
 800fe74:	40c2      	lsrs	r2, r0
 800fe76:	6163      	str	r3, [r4, #20]
 800fe78:	9201      	str	r2, [sp, #4]
 800fe7a:	9b01      	ldr	r3, [sp, #4]
 800fe7c:	61a3      	str	r3, [r4, #24]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	bf14      	ite	ne
 800fe82:	2202      	movne	r2, #2
 800fe84:	2201      	moveq	r2, #1
 800fe86:	6122      	str	r2, [r4, #16]
 800fe88:	b1d5      	cbz	r5, 800fec0 <__d2b+0x98>
 800fe8a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fe8e:	4405      	add	r5, r0
 800fe90:	f8c9 5000 	str.w	r5, [r9]
 800fe94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fe98:	f8c8 0000 	str.w	r0, [r8]
 800fe9c:	4620      	mov	r0, r4
 800fe9e:	b003      	add	sp, #12
 800fea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fea4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fea8:	e7d5      	b.n	800fe56 <__d2b+0x2e>
 800feaa:	6161      	str	r1, [r4, #20]
 800feac:	e7e5      	b.n	800fe7a <__d2b+0x52>
 800feae:	a801      	add	r0, sp, #4
 800feb0:	f7ff fd64 	bl	800f97c <__lo0bits>
 800feb4:	9b01      	ldr	r3, [sp, #4]
 800feb6:	6163      	str	r3, [r4, #20]
 800feb8:	2201      	movs	r2, #1
 800feba:	6122      	str	r2, [r4, #16]
 800febc:	3020      	adds	r0, #32
 800febe:	e7e3      	b.n	800fe88 <__d2b+0x60>
 800fec0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fec4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fec8:	f8c9 0000 	str.w	r0, [r9]
 800fecc:	6918      	ldr	r0, [r3, #16]
 800fece:	f7ff fd35 	bl	800f93c <__hi0bits>
 800fed2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fed6:	e7df      	b.n	800fe98 <__d2b+0x70>
 800fed8:	080110cf 	.word	0x080110cf
 800fedc:	080110e0 	.word	0x080110e0

0800fee0 <_calloc_r>:
 800fee0:	b513      	push	{r0, r1, r4, lr}
 800fee2:	434a      	muls	r2, r1
 800fee4:	4611      	mov	r1, r2
 800fee6:	9201      	str	r2, [sp, #4]
 800fee8:	f000 f85a 	bl	800ffa0 <_malloc_r>
 800feec:	4604      	mov	r4, r0
 800feee:	b118      	cbz	r0, 800fef8 <_calloc_r+0x18>
 800fef0:	9a01      	ldr	r2, [sp, #4]
 800fef2:	2100      	movs	r1, #0
 800fef4:	f7fe f952 	bl	800e19c <memset>
 800fef8:	4620      	mov	r0, r4
 800fefa:	b002      	add	sp, #8
 800fefc:	bd10      	pop	{r4, pc}
	...

0800ff00 <_free_r>:
 800ff00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff02:	2900      	cmp	r1, #0
 800ff04:	d048      	beq.n	800ff98 <_free_r+0x98>
 800ff06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff0a:	9001      	str	r0, [sp, #4]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	f1a1 0404 	sub.w	r4, r1, #4
 800ff12:	bfb8      	it	lt
 800ff14:	18e4      	addlt	r4, r4, r3
 800ff16:	f000 fa65 	bl	80103e4 <__malloc_lock>
 800ff1a:	4a20      	ldr	r2, [pc, #128]	; (800ff9c <_free_r+0x9c>)
 800ff1c:	9801      	ldr	r0, [sp, #4]
 800ff1e:	6813      	ldr	r3, [r2, #0]
 800ff20:	4615      	mov	r5, r2
 800ff22:	b933      	cbnz	r3, 800ff32 <_free_r+0x32>
 800ff24:	6063      	str	r3, [r4, #4]
 800ff26:	6014      	str	r4, [r2, #0]
 800ff28:	b003      	add	sp, #12
 800ff2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff2e:	f000 ba5f 	b.w	80103f0 <__malloc_unlock>
 800ff32:	42a3      	cmp	r3, r4
 800ff34:	d90b      	bls.n	800ff4e <_free_r+0x4e>
 800ff36:	6821      	ldr	r1, [r4, #0]
 800ff38:	1862      	adds	r2, r4, r1
 800ff3a:	4293      	cmp	r3, r2
 800ff3c:	bf04      	itt	eq
 800ff3e:	681a      	ldreq	r2, [r3, #0]
 800ff40:	685b      	ldreq	r3, [r3, #4]
 800ff42:	6063      	str	r3, [r4, #4]
 800ff44:	bf04      	itt	eq
 800ff46:	1852      	addeq	r2, r2, r1
 800ff48:	6022      	streq	r2, [r4, #0]
 800ff4a:	602c      	str	r4, [r5, #0]
 800ff4c:	e7ec      	b.n	800ff28 <_free_r+0x28>
 800ff4e:	461a      	mov	r2, r3
 800ff50:	685b      	ldr	r3, [r3, #4]
 800ff52:	b10b      	cbz	r3, 800ff58 <_free_r+0x58>
 800ff54:	42a3      	cmp	r3, r4
 800ff56:	d9fa      	bls.n	800ff4e <_free_r+0x4e>
 800ff58:	6811      	ldr	r1, [r2, #0]
 800ff5a:	1855      	adds	r5, r2, r1
 800ff5c:	42a5      	cmp	r5, r4
 800ff5e:	d10b      	bne.n	800ff78 <_free_r+0x78>
 800ff60:	6824      	ldr	r4, [r4, #0]
 800ff62:	4421      	add	r1, r4
 800ff64:	1854      	adds	r4, r2, r1
 800ff66:	42a3      	cmp	r3, r4
 800ff68:	6011      	str	r1, [r2, #0]
 800ff6a:	d1dd      	bne.n	800ff28 <_free_r+0x28>
 800ff6c:	681c      	ldr	r4, [r3, #0]
 800ff6e:	685b      	ldr	r3, [r3, #4]
 800ff70:	6053      	str	r3, [r2, #4]
 800ff72:	4421      	add	r1, r4
 800ff74:	6011      	str	r1, [r2, #0]
 800ff76:	e7d7      	b.n	800ff28 <_free_r+0x28>
 800ff78:	d902      	bls.n	800ff80 <_free_r+0x80>
 800ff7a:	230c      	movs	r3, #12
 800ff7c:	6003      	str	r3, [r0, #0]
 800ff7e:	e7d3      	b.n	800ff28 <_free_r+0x28>
 800ff80:	6825      	ldr	r5, [r4, #0]
 800ff82:	1961      	adds	r1, r4, r5
 800ff84:	428b      	cmp	r3, r1
 800ff86:	bf04      	itt	eq
 800ff88:	6819      	ldreq	r1, [r3, #0]
 800ff8a:	685b      	ldreq	r3, [r3, #4]
 800ff8c:	6063      	str	r3, [r4, #4]
 800ff8e:	bf04      	itt	eq
 800ff90:	1949      	addeq	r1, r1, r5
 800ff92:	6021      	streq	r1, [r4, #0]
 800ff94:	6054      	str	r4, [r2, #4]
 800ff96:	e7c7      	b.n	800ff28 <_free_r+0x28>
 800ff98:	b003      	add	sp, #12
 800ff9a:	bd30      	pop	{r4, r5, pc}
 800ff9c:	20000a20 	.word	0x20000a20

0800ffa0 <_malloc_r>:
 800ffa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffa2:	1ccd      	adds	r5, r1, #3
 800ffa4:	f025 0503 	bic.w	r5, r5, #3
 800ffa8:	3508      	adds	r5, #8
 800ffaa:	2d0c      	cmp	r5, #12
 800ffac:	bf38      	it	cc
 800ffae:	250c      	movcc	r5, #12
 800ffb0:	2d00      	cmp	r5, #0
 800ffb2:	4606      	mov	r6, r0
 800ffb4:	db01      	blt.n	800ffba <_malloc_r+0x1a>
 800ffb6:	42a9      	cmp	r1, r5
 800ffb8:	d903      	bls.n	800ffc2 <_malloc_r+0x22>
 800ffba:	230c      	movs	r3, #12
 800ffbc:	6033      	str	r3, [r6, #0]
 800ffbe:	2000      	movs	r0, #0
 800ffc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ffc2:	f000 fa0f 	bl	80103e4 <__malloc_lock>
 800ffc6:	4921      	ldr	r1, [pc, #132]	; (801004c <_malloc_r+0xac>)
 800ffc8:	680a      	ldr	r2, [r1, #0]
 800ffca:	4614      	mov	r4, r2
 800ffcc:	b99c      	cbnz	r4, 800fff6 <_malloc_r+0x56>
 800ffce:	4f20      	ldr	r7, [pc, #128]	; (8010050 <_malloc_r+0xb0>)
 800ffd0:	683b      	ldr	r3, [r7, #0]
 800ffd2:	b923      	cbnz	r3, 800ffde <_malloc_r+0x3e>
 800ffd4:	4621      	mov	r1, r4
 800ffd6:	4630      	mov	r0, r6
 800ffd8:	f000 f998 	bl	801030c <_sbrk_r>
 800ffdc:	6038      	str	r0, [r7, #0]
 800ffde:	4629      	mov	r1, r5
 800ffe0:	4630      	mov	r0, r6
 800ffe2:	f000 f993 	bl	801030c <_sbrk_r>
 800ffe6:	1c43      	adds	r3, r0, #1
 800ffe8:	d123      	bne.n	8010032 <_malloc_r+0x92>
 800ffea:	230c      	movs	r3, #12
 800ffec:	6033      	str	r3, [r6, #0]
 800ffee:	4630      	mov	r0, r6
 800fff0:	f000 f9fe 	bl	80103f0 <__malloc_unlock>
 800fff4:	e7e3      	b.n	800ffbe <_malloc_r+0x1e>
 800fff6:	6823      	ldr	r3, [r4, #0]
 800fff8:	1b5b      	subs	r3, r3, r5
 800fffa:	d417      	bmi.n	801002c <_malloc_r+0x8c>
 800fffc:	2b0b      	cmp	r3, #11
 800fffe:	d903      	bls.n	8010008 <_malloc_r+0x68>
 8010000:	6023      	str	r3, [r4, #0]
 8010002:	441c      	add	r4, r3
 8010004:	6025      	str	r5, [r4, #0]
 8010006:	e004      	b.n	8010012 <_malloc_r+0x72>
 8010008:	6863      	ldr	r3, [r4, #4]
 801000a:	42a2      	cmp	r2, r4
 801000c:	bf0c      	ite	eq
 801000e:	600b      	streq	r3, [r1, #0]
 8010010:	6053      	strne	r3, [r2, #4]
 8010012:	4630      	mov	r0, r6
 8010014:	f000 f9ec 	bl	80103f0 <__malloc_unlock>
 8010018:	f104 000b 	add.w	r0, r4, #11
 801001c:	1d23      	adds	r3, r4, #4
 801001e:	f020 0007 	bic.w	r0, r0, #7
 8010022:	1ac2      	subs	r2, r0, r3
 8010024:	d0cc      	beq.n	800ffc0 <_malloc_r+0x20>
 8010026:	1a1b      	subs	r3, r3, r0
 8010028:	50a3      	str	r3, [r4, r2]
 801002a:	e7c9      	b.n	800ffc0 <_malloc_r+0x20>
 801002c:	4622      	mov	r2, r4
 801002e:	6864      	ldr	r4, [r4, #4]
 8010030:	e7cc      	b.n	800ffcc <_malloc_r+0x2c>
 8010032:	1cc4      	adds	r4, r0, #3
 8010034:	f024 0403 	bic.w	r4, r4, #3
 8010038:	42a0      	cmp	r0, r4
 801003a:	d0e3      	beq.n	8010004 <_malloc_r+0x64>
 801003c:	1a21      	subs	r1, r4, r0
 801003e:	4630      	mov	r0, r6
 8010040:	f000 f964 	bl	801030c <_sbrk_r>
 8010044:	3001      	adds	r0, #1
 8010046:	d1dd      	bne.n	8010004 <_malloc_r+0x64>
 8010048:	e7cf      	b.n	800ffea <_malloc_r+0x4a>
 801004a:	bf00      	nop
 801004c:	20000a20 	.word	0x20000a20
 8010050:	20000a24 	.word	0x20000a24

08010054 <__ssputs_r>:
 8010054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010058:	688e      	ldr	r6, [r1, #8]
 801005a:	429e      	cmp	r6, r3
 801005c:	4682      	mov	sl, r0
 801005e:	460c      	mov	r4, r1
 8010060:	4690      	mov	r8, r2
 8010062:	461f      	mov	r7, r3
 8010064:	d838      	bhi.n	80100d8 <__ssputs_r+0x84>
 8010066:	898a      	ldrh	r2, [r1, #12]
 8010068:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801006c:	d032      	beq.n	80100d4 <__ssputs_r+0x80>
 801006e:	6825      	ldr	r5, [r4, #0]
 8010070:	6909      	ldr	r1, [r1, #16]
 8010072:	eba5 0901 	sub.w	r9, r5, r1
 8010076:	6965      	ldr	r5, [r4, #20]
 8010078:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801007c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010080:	3301      	adds	r3, #1
 8010082:	444b      	add	r3, r9
 8010084:	106d      	asrs	r5, r5, #1
 8010086:	429d      	cmp	r5, r3
 8010088:	bf38      	it	cc
 801008a:	461d      	movcc	r5, r3
 801008c:	0553      	lsls	r3, r2, #21
 801008e:	d531      	bpl.n	80100f4 <__ssputs_r+0xa0>
 8010090:	4629      	mov	r1, r5
 8010092:	f7ff ff85 	bl	800ffa0 <_malloc_r>
 8010096:	4606      	mov	r6, r0
 8010098:	b950      	cbnz	r0, 80100b0 <__ssputs_r+0x5c>
 801009a:	230c      	movs	r3, #12
 801009c:	f8ca 3000 	str.w	r3, [sl]
 80100a0:	89a3      	ldrh	r3, [r4, #12]
 80100a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80100a6:	81a3      	strh	r3, [r4, #12]
 80100a8:	f04f 30ff 	mov.w	r0, #4294967295
 80100ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100b0:	6921      	ldr	r1, [r4, #16]
 80100b2:	464a      	mov	r2, r9
 80100b4:	f7ff fb88 	bl	800f7c8 <memcpy>
 80100b8:	89a3      	ldrh	r3, [r4, #12]
 80100ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80100be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100c2:	81a3      	strh	r3, [r4, #12]
 80100c4:	6126      	str	r6, [r4, #16]
 80100c6:	6165      	str	r5, [r4, #20]
 80100c8:	444e      	add	r6, r9
 80100ca:	eba5 0509 	sub.w	r5, r5, r9
 80100ce:	6026      	str	r6, [r4, #0]
 80100d0:	60a5      	str	r5, [r4, #8]
 80100d2:	463e      	mov	r6, r7
 80100d4:	42be      	cmp	r6, r7
 80100d6:	d900      	bls.n	80100da <__ssputs_r+0x86>
 80100d8:	463e      	mov	r6, r7
 80100da:	4632      	mov	r2, r6
 80100dc:	6820      	ldr	r0, [r4, #0]
 80100de:	4641      	mov	r1, r8
 80100e0:	f000 f966 	bl	80103b0 <memmove>
 80100e4:	68a3      	ldr	r3, [r4, #8]
 80100e6:	6822      	ldr	r2, [r4, #0]
 80100e8:	1b9b      	subs	r3, r3, r6
 80100ea:	4432      	add	r2, r6
 80100ec:	60a3      	str	r3, [r4, #8]
 80100ee:	6022      	str	r2, [r4, #0]
 80100f0:	2000      	movs	r0, #0
 80100f2:	e7db      	b.n	80100ac <__ssputs_r+0x58>
 80100f4:	462a      	mov	r2, r5
 80100f6:	f000 f981 	bl	80103fc <_realloc_r>
 80100fa:	4606      	mov	r6, r0
 80100fc:	2800      	cmp	r0, #0
 80100fe:	d1e1      	bne.n	80100c4 <__ssputs_r+0x70>
 8010100:	6921      	ldr	r1, [r4, #16]
 8010102:	4650      	mov	r0, sl
 8010104:	f7ff fefc 	bl	800ff00 <_free_r>
 8010108:	e7c7      	b.n	801009a <__ssputs_r+0x46>
	...

0801010c <_svfiprintf_r>:
 801010c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010110:	4698      	mov	r8, r3
 8010112:	898b      	ldrh	r3, [r1, #12]
 8010114:	061b      	lsls	r3, r3, #24
 8010116:	b09d      	sub	sp, #116	; 0x74
 8010118:	4607      	mov	r7, r0
 801011a:	460d      	mov	r5, r1
 801011c:	4614      	mov	r4, r2
 801011e:	d50e      	bpl.n	801013e <_svfiprintf_r+0x32>
 8010120:	690b      	ldr	r3, [r1, #16]
 8010122:	b963      	cbnz	r3, 801013e <_svfiprintf_r+0x32>
 8010124:	2140      	movs	r1, #64	; 0x40
 8010126:	f7ff ff3b 	bl	800ffa0 <_malloc_r>
 801012a:	6028      	str	r0, [r5, #0]
 801012c:	6128      	str	r0, [r5, #16]
 801012e:	b920      	cbnz	r0, 801013a <_svfiprintf_r+0x2e>
 8010130:	230c      	movs	r3, #12
 8010132:	603b      	str	r3, [r7, #0]
 8010134:	f04f 30ff 	mov.w	r0, #4294967295
 8010138:	e0d1      	b.n	80102de <_svfiprintf_r+0x1d2>
 801013a:	2340      	movs	r3, #64	; 0x40
 801013c:	616b      	str	r3, [r5, #20]
 801013e:	2300      	movs	r3, #0
 8010140:	9309      	str	r3, [sp, #36]	; 0x24
 8010142:	2320      	movs	r3, #32
 8010144:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010148:	f8cd 800c 	str.w	r8, [sp, #12]
 801014c:	2330      	movs	r3, #48	; 0x30
 801014e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80102f8 <_svfiprintf_r+0x1ec>
 8010152:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010156:	f04f 0901 	mov.w	r9, #1
 801015a:	4623      	mov	r3, r4
 801015c:	469a      	mov	sl, r3
 801015e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010162:	b10a      	cbz	r2, 8010168 <_svfiprintf_r+0x5c>
 8010164:	2a25      	cmp	r2, #37	; 0x25
 8010166:	d1f9      	bne.n	801015c <_svfiprintf_r+0x50>
 8010168:	ebba 0b04 	subs.w	fp, sl, r4
 801016c:	d00b      	beq.n	8010186 <_svfiprintf_r+0x7a>
 801016e:	465b      	mov	r3, fp
 8010170:	4622      	mov	r2, r4
 8010172:	4629      	mov	r1, r5
 8010174:	4638      	mov	r0, r7
 8010176:	f7ff ff6d 	bl	8010054 <__ssputs_r>
 801017a:	3001      	adds	r0, #1
 801017c:	f000 80aa 	beq.w	80102d4 <_svfiprintf_r+0x1c8>
 8010180:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010182:	445a      	add	r2, fp
 8010184:	9209      	str	r2, [sp, #36]	; 0x24
 8010186:	f89a 3000 	ldrb.w	r3, [sl]
 801018a:	2b00      	cmp	r3, #0
 801018c:	f000 80a2 	beq.w	80102d4 <_svfiprintf_r+0x1c8>
 8010190:	2300      	movs	r3, #0
 8010192:	f04f 32ff 	mov.w	r2, #4294967295
 8010196:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801019a:	f10a 0a01 	add.w	sl, sl, #1
 801019e:	9304      	str	r3, [sp, #16]
 80101a0:	9307      	str	r3, [sp, #28]
 80101a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80101a6:	931a      	str	r3, [sp, #104]	; 0x68
 80101a8:	4654      	mov	r4, sl
 80101aa:	2205      	movs	r2, #5
 80101ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101b0:	4851      	ldr	r0, [pc, #324]	; (80102f8 <_svfiprintf_r+0x1ec>)
 80101b2:	f7f0 f81d 	bl	80001f0 <memchr>
 80101b6:	9a04      	ldr	r2, [sp, #16]
 80101b8:	b9d8      	cbnz	r0, 80101f2 <_svfiprintf_r+0xe6>
 80101ba:	06d0      	lsls	r0, r2, #27
 80101bc:	bf44      	itt	mi
 80101be:	2320      	movmi	r3, #32
 80101c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101c4:	0711      	lsls	r1, r2, #28
 80101c6:	bf44      	itt	mi
 80101c8:	232b      	movmi	r3, #43	; 0x2b
 80101ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101ce:	f89a 3000 	ldrb.w	r3, [sl]
 80101d2:	2b2a      	cmp	r3, #42	; 0x2a
 80101d4:	d015      	beq.n	8010202 <_svfiprintf_r+0xf6>
 80101d6:	9a07      	ldr	r2, [sp, #28]
 80101d8:	4654      	mov	r4, sl
 80101da:	2000      	movs	r0, #0
 80101dc:	f04f 0c0a 	mov.w	ip, #10
 80101e0:	4621      	mov	r1, r4
 80101e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101e6:	3b30      	subs	r3, #48	; 0x30
 80101e8:	2b09      	cmp	r3, #9
 80101ea:	d94e      	bls.n	801028a <_svfiprintf_r+0x17e>
 80101ec:	b1b0      	cbz	r0, 801021c <_svfiprintf_r+0x110>
 80101ee:	9207      	str	r2, [sp, #28]
 80101f0:	e014      	b.n	801021c <_svfiprintf_r+0x110>
 80101f2:	eba0 0308 	sub.w	r3, r0, r8
 80101f6:	fa09 f303 	lsl.w	r3, r9, r3
 80101fa:	4313      	orrs	r3, r2
 80101fc:	9304      	str	r3, [sp, #16]
 80101fe:	46a2      	mov	sl, r4
 8010200:	e7d2      	b.n	80101a8 <_svfiprintf_r+0x9c>
 8010202:	9b03      	ldr	r3, [sp, #12]
 8010204:	1d19      	adds	r1, r3, #4
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	9103      	str	r1, [sp, #12]
 801020a:	2b00      	cmp	r3, #0
 801020c:	bfbb      	ittet	lt
 801020e:	425b      	neglt	r3, r3
 8010210:	f042 0202 	orrlt.w	r2, r2, #2
 8010214:	9307      	strge	r3, [sp, #28]
 8010216:	9307      	strlt	r3, [sp, #28]
 8010218:	bfb8      	it	lt
 801021a:	9204      	strlt	r2, [sp, #16]
 801021c:	7823      	ldrb	r3, [r4, #0]
 801021e:	2b2e      	cmp	r3, #46	; 0x2e
 8010220:	d10c      	bne.n	801023c <_svfiprintf_r+0x130>
 8010222:	7863      	ldrb	r3, [r4, #1]
 8010224:	2b2a      	cmp	r3, #42	; 0x2a
 8010226:	d135      	bne.n	8010294 <_svfiprintf_r+0x188>
 8010228:	9b03      	ldr	r3, [sp, #12]
 801022a:	1d1a      	adds	r2, r3, #4
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	9203      	str	r2, [sp, #12]
 8010230:	2b00      	cmp	r3, #0
 8010232:	bfb8      	it	lt
 8010234:	f04f 33ff 	movlt.w	r3, #4294967295
 8010238:	3402      	adds	r4, #2
 801023a:	9305      	str	r3, [sp, #20]
 801023c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010308 <_svfiprintf_r+0x1fc>
 8010240:	7821      	ldrb	r1, [r4, #0]
 8010242:	2203      	movs	r2, #3
 8010244:	4650      	mov	r0, sl
 8010246:	f7ef ffd3 	bl	80001f0 <memchr>
 801024a:	b140      	cbz	r0, 801025e <_svfiprintf_r+0x152>
 801024c:	2340      	movs	r3, #64	; 0x40
 801024e:	eba0 000a 	sub.w	r0, r0, sl
 8010252:	fa03 f000 	lsl.w	r0, r3, r0
 8010256:	9b04      	ldr	r3, [sp, #16]
 8010258:	4303      	orrs	r3, r0
 801025a:	3401      	adds	r4, #1
 801025c:	9304      	str	r3, [sp, #16]
 801025e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010262:	4826      	ldr	r0, [pc, #152]	; (80102fc <_svfiprintf_r+0x1f0>)
 8010264:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010268:	2206      	movs	r2, #6
 801026a:	f7ef ffc1 	bl	80001f0 <memchr>
 801026e:	2800      	cmp	r0, #0
 8010270:	d038      	beq.n	80102e4 <_svfiprintf_r+0x1d8>
 8010272:	4b23      	ldr	r3, [pc, #140]	; (8010300 <_svfiprintf_r+0x1f4>)
 8010274:	bb1b      	cbnz	r3, 80102be <_svfiprintf_r+0x1b2>
 8010276:	9b03      	ldr	r3, [sp, #12]
 8010278:	3307      	adds	r3, #7
 801027a:	f023 0307 	bic.w	r3, r3, #7
 801027e:	3308      	adds	r3, #8
 8010280:	9303      	str	r3, [sp, #12]
 8010282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010284:	4433      	add	r3, r6
 8010286:	9309      	str	r3, [sp, #36]	; 0x24
 8010288:	e767      	b.n	801015a <_svfiprintf_r+0x4e>
 801028a:	fb0c 3202 	mla	r2, ip, r2, r3
 801028e:	460c      	mov	r4, r1
 8010290:	2001      	movs	r0, #1
 8010292:	e7a5      	b.n	80101e0 <_svfiprintf_r+0xd4>
 8010294:	2300      	movs	r3, #0
 8010296:	3401      	adds	r4, #1
 8010298:	9305      	str	r3, [sp, #20]
 801029a:	4619      	mov	r1, r3
 801029c:	f04f 0c0a 	mov.w	ip, #10
 80102a0:	4620      	mov	r0, r4
 80102a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80102a6:	3a30      	subs	r2, #48	; 0x30
 80102a8:	2a09      	cmp	r2, #9
 80102aa:	d903      	bls.n	80102b4 <_svfiprintf_r+0x1a8>
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d0c5      	beq.n	801023c <_svfiprintf_r+0x130>
 80102b0:	9105      	str	r1, [sp, #20]
 80102b2:	e7c3      	b.n	801023c <_svfiprintf_r+0x130>
 80102b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80102b8:	4604      	mov	r4, r0
 80102ba:	2301      	movs	r3, #1
 80102bc:	e7f0      	b.n	80102a0 <_svfiprintf_r+0x194>
 80102be:	ab03      	add	r3, sp, #12
 80102c0:	9300      	str	r3, [sp, #0]
 80102c2:	462a      	mov	r2, r5
 80102c4:	4b0f      	ldr	r3, [pc, #60]	; (8010304 <_svfiprintf_r+0x1f8>)
 80102c6:	a904      	add	r1, sp, #16
 80102c8:	4638      	mov	r0, r7
 80102ca:	f7fe f80f 	bl	800e2ec <_printf_float>
 80102ce:	1c42      	adds	r2, r0, #1
 80102d0:	4606      	mov	r6, r0
 80102d2:	d1d6      	bne.n	8010282 <_svfiprintf_r+0x176>
 80102d4:	89ab      	ldrh	r3, [r5, #12]
 80102d6:	065b      	lsls	r3, r3, #25
 80102d8:	f53f af2c 	bmi.w	8010134 <_svfiprintf_r+0x28>
 80102dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80102de:	b01d      	add	sp, #116	; 0x74
 80102e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102e4:	ab03      	add	r3, sp, #12
 80102e6:	9300      	str	r3, [sp, #0]
 80102e8:	462a      	mov	r2, r5
 80102ea:	4b06      	ldr	r3, [pc, #24]	; (8010304 <_svfiprintf_r+0x1f8>)
 80102ec:	a904      	add	r1, sp, #16
 80102ee:	4638      	mov	r0, r7
 80102f0:	f7fe faa0 	bl	800e834 <_printf_i>
 80102f4:	e7eb      	b.n	80102ce <_svfiprintf_r+0x1c2>
 80102f6:	bf00      	nop
 80102f8:	0801123c 	.word	0x0801123c
 80102fc:	08011246 	.word	0x08011246
 8010300:	0800e2ed 	.word	0x0800e2ed
 8010304:	08010055 	.word	0x08010055
 8010308:	08011242 	.word	0x08011242

0801030c <_sbrk_r>:
 801030c:	b538      	push	{r3, r4, r5, lr}
 801030e:	4d06      	ldr	r5, [pc, #24]	; (8010328 <_sbrk_r+0x1c>)
 8010310:	2300      	movs	r3, #0
 8010312:	4604      	mov	r4, r0
 8010314:	4608      	mov	r0, r1
 8010316:	602b      	str	r3, [r5, #0]
 8010318:	f000 fe14 	bl	8010f44 <_sbrk>
 801031c:	1c43      	adds	r3, r0, #1
 801031e:	d102      	bne.n	8010326 <_sbrk_r+0x1a>
 8010320:	682b      	ldr	r3, [r5, #0]
 8010322:	b103      	cbz	r3, 8010326 <_sbrk_r+0x1a>
 8010324:	6023      	str	r3, [r4, #0]
 8010326:	bd38      	pop	{r3, r4, r5, pc}
 8010328:	20002600 	.word	0x20002600

0801032c <__assert_func>:
 801032c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801032e:	4614      	mov	r4, r2
 8010330:	461a      	mov	r2, r3
 8010332:	4b09      	ldr	r3, [pc, #36]	; (8010358 <__assert_func+0x2c>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	4605      	mov	r5, r0
 8010338:	68d8      	ldr	r0, [r3, #12]
 801033a:	b14c      	cbz	r4, 8010350 <__assert_func+0x24>
 801033c:	4b07      	ldr	r3, [pc, #28]	; (801035c <__assert_func+0x30>)
 801033e:	9100      	str	r1, [sp, #0]
 8010340:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010344:	4906      	ldr	r1, [pc, #24]	; (8010360 <__assert_func+0x34>)
 8010346:	462b      	mov	r3, r5
 8010348:	f000 f80e 	bl	8010368 <fiprintf>
 801034c:	f000 faa4 	bl	8010898 <abort>
 8010350:	4b04      	ldr	r3, [pc, #16]	; (8010364 <__assert_func+0x38>)
 8010352:	461c      	mov	r4, r3
 8010354:	e7f3      	b.n	801033e <__assert_func+0x12>
 8010356:	bf00      	nop
 8010358:	20000180 	.word	0x20000180
 801035c:	0801124d 	.word	0x0801124d
 8010360:	0801125a 	.word	0x0801125a
 8010364:	08011288 	.word	0x08011288

08010368 <fiprintf>:
 8010368:	b40e      	push	{r1, r2, r3}
 801036a:	b503      	push	{r0, r1, lr}
 801036c:	4601      	mov	r1, r0
 801036e:	ab03      	add	r3, sp, #12
 8010370:	4805      	ldr	r0, [pc, #20]	; (8010388 <fiprintf+0x20>)
 8010372:	f853 2b04 	ldr.w	r2, [r3], #4
 8010376:	6800      	ldr	r0, [r0, #0]
 8010378:	9301      	str	r3, [sp, #4]
 801037a:	f000 f88f 	bl	801049c <_vfiprintf_r>
 801037e:	b002      	add	sp, #8
 8010380:	f85d eb04 	ldr.w	lr, [sp], #4
 8010384:	b003      	add	sp, #12
 8010386:	4770      	bx	lr
 8010388:	20000180 	.word	0x20000180

0801038c <__ascii_mbtowc>:
 801038c:	b082      	sub	sp, #8
 801038e:	b901      	cbnz	r1, 8010392 <__ascii_mbtowc+0x6>
 8010390:	a901      	add	r1, sp, #4
 8010392:	b142      	cbz	r2, 80103a6 <__ascii_mbtowc+0x1a>
 8010394:	b14b      	cbz	r3, 80103aa <__ascii_mbtowc+0x1e>
 8010396:	7813      	ldrb	r3, [r2, #0]
 8010398:	600b      	str	r3, [r1, #0]
 801039a:	7812      	ldrb	r2, [r2, #0]
 801039c:	1e10      	subs	r0, r2, #0
 801039e:	bf18      	it	ne
 80103a0:	2001      	movne	r0, #1
 80103a2:	b002      	add	sp, #8
 80103a4:	4770      	bx	lr
 80103a6:	4610      	mov	r0, r2
 80103a8:	e7fb      	b.n	80103a2 <__ascii_mbtowc+0x16>
 80103aa:	f06f 0001 	mvn.w	r0, #1
 80103ae:	e7f8      	b.n	80103a2 <__ascii_mbtowc+0x16>

080103b0 <memmove>:
 80103b0:	4288      	cmp	r0, r1
 80103b2:	b510      	push	{r4, lr}
 80103b4:	eb01 0402 	add.w	r4, r1, r2
 80103b8:	d902      	bls.n	80103c0 <memmove+0x10>
 80103ba:	4284      	cmp	r4, r0
 80103bc:	4623      	mov	r3, r4
 80103be:	d807      	bhi.n	80103d0 <memmove+0x20>
 80103c0:	1e43      	subs	r3, r0, #1
 80103c2:	42a1      	cmp	r1, r4
 80103c4:	d008      	beq.n	80103d8 <memmove+0x28>
 80103c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80103ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80103ce:	e7f8      	b.n	80103c2 <memmove+0x12>
 80103d0:	4402      	add	r2, r0
 80103d2:	4601      	mov	r1, r0
 80103d4:	428a      	cmp	r2, r1
 80103d6:	d100      	bne.n	80103da <memmove+0x2a>
 80103d8:	bd10      	pop	{r4, pc}
 80103da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80103de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80103e2:	e7f7      	b.n	80103d4 <memmove+0x24>

080103e4 <__malloc_lock>:
 80103e4:	4801      	ldr	r0, [pc, #4]	; (80103ec <__malloc_lock+0x8>)
 80103e6:	f000 bc17 	b.w	8010c18 <__retarget_lock_acquire_recursive>
 80103ea:	bf00      	nop
 80103ec:	20002608 	.word	0x20002608

080103f0 <__malloc_unlock>:
 80103f0:	4801      	ldr	r0, [pc, #4]	; (80103f8 <__malloc_unlock+0x8>)
 80103f2:	f000 bc12 	b.w	8010c1a <__retarget_lock_release_recursive>
 80103f6:	bf00      	nop
 80103f8:	20002608 	.word	0x20002608

080103fc <_realloc_r>:
 80103fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103fe:	4607      	mov	r7, r0
 8010400:	4614      	mov	r4, r2
 8010402:	460e      	mov	r6, r1
 8010404:	b921      	cbnz	r1, 8010410 <_realloc_r+0x14>
 8010406:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801040a:	4611      	mov	r1, r2
 801040c:	f7ff bdc8 	b.w	800ffa0 <_malloc_r>
 8010410:	b922      	cbnz	r2, 801041c <_realloc_r+0x20>
 8010412:	f7ff fd75 	bl	800ff00 <_free_r>
 8010416:	4625      	mov	r5, r4
 8010418:	4628      	mov	r0, r5
 801041a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801041c:	f000 fc62 	bl	8010ce4 <_malloc_usable_size_r>
 8010420:	42a0      	cmp	r0, r4
 8010422:	d20f      	bcs.n	8010444 <_realloc_r+0x48>
 8010424:	4621      	mov	r1, r4
 8010426:	4638      	mov	r0, r7
 8010428:	f7ff fdba 	bl	800ffa0 <_malloc_r>
 801042c:	4605      	mov	r5, r0
 801042e:	2800      	cmp	r0, #0
 8010430:	d0f2      	beq.n	8010418 <_realloc_r+0x1c>
 8010432:	4631      	mov	r1, r6
 8010434:	4622      	mov	r2, r4
 8010436:	f7ff f9c7 	bl	800f7c8 <memcpy>
 801043a:	4631      	mov	r1, r6
 801043c:	4638      	mov	r0, r7
 801043e:	f7ff fd5f 	bl	800ff00 <_free_r>
 8010442:	e7e9      	b.n	8010418 <_realloc_r+0x1c>
 8010444:	4635      	mov	r5, r6
 8010446:	e7e7      	b.n	8010418 <_realloc_r+0x1c>

08010448 <__sfputc_r>:
 8010448:	6893      	ldr	r3, [r2, #8]
 801044a:	3b01      	subs	r3, #1
 801044c:	2b00      	cmp	r3, #0
 801044e:	b410      	push	{r4}
 8010450:	6093      	str	r3, [r2, #8]
 8010452:	da08      	bge.n	8010466 <__sfputc_r+0x1e>
 8010454:	6994      	ldr	r4, [r2, #24]
 8010456:	42a3      	cmp	r3, r4
 8010458:	db01      	blt.n	801045e <__sfputc_r+0x16>
 801045a:	290a      	cmp	r1, #10
 801045c:	d103      	bne.n	8010466 <__sfputc_r+0x1e>
 801045e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010462:	f000 b94b 	b.w	80106fc <__swbuf_r>
 8010466:	6813      	ldr	r3, [r2, #0]
 8010468:	1c58      	adds	r0, r3, #1
 801046a:	6010      	str	r0, [r2, #0]
 801046c:	7019      	strb	r1, [r3, #0]
 801046e:	4608      	mov	r0, r1
 8010470:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010474:	4770      	bx	lr

08010476 <__sfputs_r>:
 8010476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010478:	4606      	mov	r6, r0
 801047a:	460f      	mov	r7, r1
 801047c:	4614      	mov	r4, r2
 801047e:	18d5      	adds	r5, r2, r3
 8010480:	42ac      	cmp	r4, r5
 8010482:	d101      	bne.n	8010488 <__sfputs_r+0x12>
 8010484:	2000      	movs	r0, #0
 8010486:	e007      	b.n	8010498 <__sfputs_r+0x22>
 8010488:	f814 1b01 	ldrb.w	r1, [r4], #1
 801048c:	463a      	mov	r2, r7
 801048e:	4630      	mov	r0, r6
 8010490:	f7ff ffda 	bl	8010448 <__sfputc_r>
 8010494:	1c43      	adds	r3, r0, #1
 8010496:	d1f3      	bne.n	8010480 <__sfputs_r+0xa>
 8010498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801049c <_vfiprintf_r>:
 801049c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104a0:	460d      	mov	r5, r1
 80104a2:	b09d      	sub	sp, #116	; 0x74
 80104a4:	4614      	mov	r4, r2
 80104a6:	4698      	mov	r8, r3
 80104a8:	4606      	mov	r6, r0
 80104aa:	b118      	cbz	r0, 80104b4 <_vfiprintf_r+0x18>
 80104ac:	6983      	ldr	r3, [r0, #24]
 80104ae:	b90b      	cbnz	r3, 80104b4 <_vfiprintf_r+0x18>
 80104b0:	f000 fb14 	bl	8010adc <__sinit>
 80104b4:	4b89      	ldr	r3, [pc, #548]	; (80106dc <_vfiprintf_r+0x240>)
 80104b6:	429d      	cmp	r5, r3
 80104b8:	d11b      	bne.n	80104f2 <_vfiprintf_r+0x56>
 80104ba:	6875      	ldr	r5, [r6, #4]
 80104bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80104be:	07d9      	lsls	r1, r3, #31
 80104c0:	d405      	bmi.n	80104ce <_vfiprintf_r+0x32>
 80104c2:	89ab      	ldrh	r3, [r5, #12]
 80104c4:	059a      	lsls	r2, r3, #22
 80104c6:	d402      	bmi.n	80104ce <_vfiprintf_r+0x32>
 80104c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80104ca:	f000 fba5 	bl	8010c18 <__retarget_lock_acquire_recursive>
 80104ce:	89ab      	ldrh	r3, [r5, #12]
 80104d0:	071b      	lsls	r3, r3, #28
 80104d2:	d501      	bpl.n	80104d8 <_vfiprintf_r+0x3c>
 80104d4:	692b      	ldr	r3, [r5, #16]
 80104d6:	b9eb      	cbnz	r3, 8010514 <_vfiprintf_r+0x78>
 80104d8:	4629      	mov	r1, r5
 80104da:	4630      	mov	r0, r6
 80104dc:	f000 f96e 	bl	80107bc <__swsetup_r>
 80104e0:	b1c0      	cbz	r0, 8010514 <_vfiprintf_r+0x78>
 80104e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80104e4:	07dc      	lsls	r4, r3, #31
 80104e6:	d50e      	bpl.n	8010506 <_vfiprintf_r+0x6a>
 80104e8:	f04f 30ff 	mov.w	r0, #4294967295
 80104ec:	b01d      	add	sp, #116	; 0x74
 80104ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104f2:	4b7b      	ldr	r3, [pc, #492]	; (80106e0 <_vfiprintf_r+0x244>)
 80104f4:	429d      	cmp	r5, r3
 80104f6:	d101      	bne.n	80104fc <_vfiprintf_r+0x60>
 80104f8:	68b5      	ldr	r5, [r6, #8]
 80104fa:	e7df      	b.n	80104bc <_vfiprintf_r+0x20>
 80104fc:	4b79      	ldr	r3, [pc, #484]	; (80106e4 <_vfiprintf_r+0x248>)
 80104fe:	429d      	cmp	r5, r3
 8010500:	bf08      	it	eq
 8010502:	68f5      	ldreq	r5, [r6, #12]
 8010504:	e7da      	b.n	80104bc <_vfiprintf_r+0x20>
 8010506:	89ab      	ldrh	r3, [r5, #12]
 8010508:	0598      	lsls	r0, r3, #22
 801050a:	d4ed      	bmi.n	80104e8 <_vfiprintf_r+0x4c>
 801050c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801050e:	f000 fb84 	bl	8010c1a <__retarget_lock_release_recursive>
 8010512:	e7e9      	b.n	80104e8 <_vfiprintf_r+0x4c>
 8010514:	2300      	movs	r3, #0
 8010516:	9309      	str	r3, [sp, #36]	; 0x24
 8010518:	2320      	movs	r3, #32
 801051a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801051e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010522:	2330      	movs	r3, #48	; 0x30
 8010524:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80106e8 <_vfiprintf_r+0x24c>
 8010528:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801052c:	f04f 0901 	mov.w	r9, #1
 8010530:	4623      	mov	r3, r4
 8010532:	469a      	mov	sl, r3
 8010534:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010538:	b10a      	cbz	r2, 801053e <_vfiprintf_r+0xa2>
 801053a:	2a25      	cmp	r2, #37	; 0x25
 801053c:	d1f9      	bne.n	8010532 <_vfiprintf_r+0x96>
 801053e:	ebba 0b04 	subs.w	fp, sl, r4
 8010542:	d00b      	beq.n	801055c <_vfiprintf_r+0xc0>
 8010544:	465b      	mov	r3, fp
 8010546:	4622      	mov	r2, r4
 8010548:	4629      	mov	r1, r5
 801054a:	4630      	mov	r0, r6
 801054c:	f7ff ff93 	bl	8010476 <__sfputs_r>
 8010550:	3001      	adds	r0, #1
 8010552:	f000 80aa 	beq.w	80106aa <_vfiprintf_r+0x20e>
 8010556:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010558:	445a      	add	r2, fp
 801055a:	9209      	str	r2, [sp, #36]	; 0x24
 801055c:	f89a 3000 	ldrb.w	r3, [sl]
 8010560:	2b00      	cmp	r3, #0
 8010562:	f000 80a2 	beq.w	80106aa <_vfiprintf_r+0x20e>
 8010566:	2300      	movs	r3, #0
 8010568:	f04f 32ff 	mov.w	r2, #4294967295
 801056c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010570:	f10a 0a01 	add.w	sl, sl, #1
 8010574:	9304      	str	r3, [sp, #16]
 8010576:	9307      	str	r3, [sp, #28]
 8010578:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801057c:	931a      	str	r3, [sp, #104]	; 0x68
 801057e:	4654      	mov	r4, sl
 8010580:	2205      	movs	r2, #5
 8010582:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010586:	4858      	ldr	r0, [pc, #352]	; (80106e8 <_vfiprintf_r+0x24c>)
 8010588:	f7ef fe32 	bl	80001f0 <memchr>
 801058c:	9a04      	ldr	r2, [sp, #16]
 801058e:	b9d8      	cbnz	r0, 80105c8 <_vfiprintf_r+0x12c>
 8010590:	06d1      	lsls	r1, r2, #27
 8010592:	bf44      	itt	mi
 8010594:	2320      	movmi	r3, #32
 8010596:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801059a:	0713      	lsls	r3, r2, #28
 801059c:	bf44      	itt	mi
 801059e:	232b      	movmi	r3, #43	; 0x2b
 80105a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80105a4:	f89a 3000 	ldrb.w	r3, [sl]
 80105a8:	2b2a      	cmp	r3, #42	; 0x2a
 80105aa:	d015      	beq.n	80105d8 <_vfiprintf_r+0x13c>
 80105ac:	9a07      	ldr	r2, [sp, #28]
 80105ae:	4654      	mov	r4, sl
 80105b0:	2000      	movs	r0, #0
 80105b2:	f04f 0c0a 	mov.w	ip, #10
 80105b6:	4621      	mov	r1, r4
 80105b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80105bc:	3b30      	subs	r3, #48	; 0x30
 80105be:	2b09      	cmp	r3, #9
 80105c0:	d94e      	bls.n	8010660 <_vfiprintf_r+0x1c4>
 80105c2:	b1b0      	cbz	r0, 80105f2 <_vfiprintf_r+0x156>
 80105c4:	9207      	str	r2, [sp, #28]
 80105c6:	e014      	b.n	80105f2 <_vfiprintf_r+0x156>
 80105c8:	eba0 0308 	sub.w	r3, r0, r8
 80105cc:	fa09 f303 	lsl.w	r3, r9, r3
 80105d0:	4313      	orrs	r3, r2
 80105d2:	9304      	str	r3, [sp, #16]
 80105d4:	46a2      	mov	sl, r4
 80105d6:	e7d2      	b.n	801057e <_vfiprintf_r+0xe2>
 80105d8:	9b03      	ldr	r3, [sp, #12]
 80105da:	1d19      	adds	r1, r3, #4
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	9103      	str	r1, [sp, #12]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	bfbb      	ittet	lt
 80105e4:	425b      	neglt	r3, r3
 80105e6:	f042 0202 	orrlt.w	r2, r2, #2
 80105ea:	9307      	strge	r3, [sp, #28]
 80105ec:	9307      	strlt	r3, [sp, #28]
 80105ee:	bfb8      	it	lt
 80105f0:	9204      	strlt	r2, [sp, #16]
 80105f2:	7823      	ldrb	r3, [r4, #0]
 80105f4:	2b2e      	cmp	r3, #46	; 0x2e
 80105f6:	d10c      	bne.n	8010612 <_vfiprintf_r+0x176>
 80105f8:	7863      	ldrb	r3, [r4, #1]
 80105fa:	2b2a      	cmp	r3, #42	; 0x2a
 80105fc:	d135      	bne.n	801066a <_vfiprintf_r+0x1ce>
 80105fe:	9b03      	ldr	r3, [sp, #12]
 8010600:	1d1a      	adds	r2, r3, #4
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	9203      	str	r2, [sp, #12]
 8010606:	2b00      	cmp	r3, #0
 8010608:	bfb8      	it	lt
 801060a:	f04f 33ff 	movlt.w	r3, #4294967295
 801060e:	3402      	adds	r4, #2
 8010610:	9305      	str	r3, [sp, #20]
 8010612:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80106f8 <_vfiprintf_r+0x25c>
 8010616:	7821      	ldrb	r1, [r4, #0]
 8010618:	2203      	movs	r2, #3
 801061a:	4650      	mov	r0, sl
 801061c:	f7ef fde8 	bl	80001f0 <memchr>
 8010620:	b140      	cbz	r0, 8010634 <_vfiprintf_r+0x198>
 8010622:	2340      	movs	r3, #64	; 0x40
 8010624:	eba0 000a 	sub.w	r0, r0, sl
 8010628:	fa03 f000 	lsl.w	r0, r3, r0
 801062c:	9b04      	ldr	r3, [sp, #16]
 801062e:	4303      	orrs	r3, r0
 8010630:	3401      	adds	r4, #1
 8010632:	9304      	str	r3, [sp, #16]
 8010634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010638:	482c      	ldr	r0, [pc, #176]	; (80106ec <_vfiprintf_r+0x250>)
 801063a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801063e:	2206      	movs	r2, #6
 8010640:	f7ef fdd6 	bl	80001f0 <memchr>
 8010644:	2800      	cmp	r0, #0
 8010646:	d03f      	beq.n	80106c8 <_vfiprintf_r+0x22c>
 8010648:	4b29      	ldr	r3, [pc, #164]	; (80106f0 <_vfiprintf_r+0x254>)
 801064a:	bb1b      	cbnz	r3, 8010694 <_vfiprintf_r+0x1f8>
 801064c:	9b03      	ldr	r3, [sp, #12]
 801064e:	3307      	adds	r3, #7
 8010650:	f023 0307 	bic.w	r3, r3, #7
 8010654:	3308      	adds	r3, #8
 8010656:	9303      	str	r3, [sp, #12]
 8010658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801065a:	443b      	add	r3, r7
 801065c:	9309      	str	r3, [sp, #36]	; 0x24
 801065e:	e767      	b.n	8010530 <_vfiprintf_r+0x94>
 8010660:	fb0c 3202 	mla	r2, ip, r2, r3
 8010664:	460c      	mov	r4, r1
 8010666:	2001      	movs	r0, #1
 8010668:	e7a5      	b.n	80105b6 <_vfiprintf_r+0x11a>
 801066a:	2300      	movs	r3, #0
 801066c:	3401      	adds	r4, #1
 801066e:	9305      	str	r3, [sp, #20]
 8010670:	4619      	mov	r1, r3
 8010672:	f04f 0c0a 	mov.w	ip, #10
 8010676:	4620      	mov	r0, r4
 8010678:	f810 2b01 	ldrb.w	r2, [r0], #1
 801067c:	3a30      	subs	r2, #48	; 0x30
 801067e:	2a09      	cmp	r2, #9
 8010680:	d903      	bls.n	801068a <_vfiprintf_r+0x1ee>
 8010682:	2b00      	cmp	r3, #0
 8010684:	d0c5      	beq.n	8010612 <_vfiprintf_r+0x176>
 8010686:	9105      	str	r1, [sp, #20]
 8010688:	e7c3      	b.n	8010612 <_vfiprintf_r+0x176>
 801068a:	fb0c 2101 	mla	r1, ip, r1, r2
 801068e:	4604      	mov	r4, r0
 8010690:	2301      	movs	r3, #1
 8010692:	e7f0      	b.n	8010676 <_vfiprintf_r+0x1da>
 8010694:	ab03      	add	r3, sp, #12
 8010696:	9300      	str	r3, [sp, #0]
 8010698:	462a      	mov	r2, r5
 801069a:	4b16      	ldr	r3, [pc, #88]	; (80106f4 <_vfiprintf_r+0x258>)
 801069c:	a904      	add	r1, sp, #16
 801069e:	4630      	mov	r0, r6
 80106a0:	f7fd fe24 	bl	800e2ec <_printf_float>
 80106a4:	4607      	mov	r7, r0
 80106a6:	1c78      	adds	r0, r7, #1
 80106a8:	d1d6      	bne.n	8010658 <_vfiprintf_r+0x1bc>
 80106aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80106ac:	07d9      	lsls	r1, r3, #31
 80106ae:	d405      	bmi.n	80106bc <_vfiprintf_r+0x220>
 80106b0:	89ab      	ldrh	r3, [r5, #12]
 80106b2:	059a      	lsls	r2, r3, #22
 80106b4:	d402      	bmi.n	80106bc <_vfiprintf_r+0x220>
 80106b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80106b8:	f000 faaf 	bl	8010c1a <__retarget_lock_release_recursive>
 80106bc:	89ab      	ldrh	r3, [r5, #12]
 80106be:	065b      	lsls	r3, r3, #25
 80106c0:	f53f af12 	bmi.w	80104e8 <_vfiprintf_r+0x4c>
 80106c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80106c6:	e711      	b.n	80104ec <_vfiprintf_r+0x50>
 80106c8:	ab03      	add	r3, sp, #12
 80106ca:	9300      	str	r3, [sp, #0]
 80106cc:	462a      	mov	r2, r5
 80106ce:	4b09      	ldr	r3, [pc, #36]	; (80106f4 <_vfiprintf_r+0x258>)
 80106d0:	a904      	add	r1, sp, #16
 80106d2:	4630      	mov	r0, r6
 80106d4:	f7fe f8ae 	bl	800e834 <_printf_i>
 80106d8:	e7e4      	b.n	80106a4 <_vfiprintf_r+0x208>
 80106da:	bf00      	nop
 80106dc:	080113b4 	.word	0x080113b4
 80106e0:	080113d4 	.word	0x080113d4
 80106e4:	08011394 	.word	0x08011394
 80106e8:	0801123c 	.word	0x0801123c
 80106ec:	08011246 	.word	0x08011246
 80106f0:	0800e2ed 	.word	0x0800e2ed
 80106f4:	08010477 	.word	0x08010477
 80106f8:	08011242 	.word	0x08011242

080106fc <__swbuf_r>:
 80106fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106fe:	460e      	mov	r6, r1
 8010700:	4614      	mov	r4, r2
 8010702:	4605      	mov	r5, r0
 8010704:	b118      	cbz	r0, 801070e <__swbuf_r+0x12>
 8010706:	6983      	ldr	r3, [r0, #24]
 8010708:	b90b      	cbnz	r3, 801070e <__swbuf_r+0x12>
 801070a:	f000 f9e7 	bl	8010adc <__sinit>
 801070e:	4b21      	ldr	r3, [pc, #132]	; (8010794 <__swbuf_r+0x98>)
 8010710:	429c      	cmp	r4, r3
 8010712:	d12b      	bne.n	801076c <__swbuf_r+0x70>
 8010714:	686c      	ldr	r4, [r5, #4]
 8010716:	69a3      	ldr	r3, [r4, #24]
 8010718:	60a3      	str	r3, [r4, #8]
 801071a:	89a3      	ldrh	r3, [r4, #12]
 801071c:	071a      	lsls	r2, r3, #28
 801071e:	d52f      	bpl.n	8010780 <__swbuf_r+0x84>
 8010720:	6923      	ldr	r3, [r4, #16]
 8010722:	b36b      	cbz	r3, 8010780 <__swbuf_r+0x84>
 8010724:	6923      	ldr	r3, [r4, #16]
 8010726:	6820      	ldr	r0, [r4, #0]
 8010728:	1ac0      	subs	r0, r0, r3
 801072a:	6963      	ldr	r3, [r4, #20]
 801072c:	b2f6      	uxtb	r6, r6
 801072e:	4283      	cmp	r3, r0
 8010730:	4637      	mov	r7, r6
 8010732:	dc04      	bgt.n	801073e <__swbuf_r+0x42>
 8010734:	4621      	mov	r1, r4
 8010736:	4628      	mov	r0, r5
 8010738:	f000 f93c 	bl	80109b4 <_fflush_r>
 801073c:	bb30      	cbnz	r0, 801078c <__swbuf_r+0x90>
 801073e:	68a3      	ldr	r3, [r4, #8]
 8010740:	3b01      	subs	r3, #1
 8010742:	60a3      	str	r3, [r4, #8]
 8010744:	6823      	ldr	r3, [r4, #0]
 8010746:	1c5a      	adds	r2, r3, #1
 8010748:	6022      	str	r2, [r4, #0]
 801074a:	701e      	strb	r6, [r3, #0]
 801074c:	6963      	ldr	r3, [r4, #20]
 801074e:	3001      	adds	r0, #1
 8010750:	4283      	cmp	r3, r0
 8010752:	d004      	beq.n	801075e <__swbuf_r+0x62>
 8010754:	89a3      	ldrh	r3, [r4, #12]
 8010756:	07db      	lsls	r3, r3, #31
 8010758:	d506      	bpl.n	8010768 <__swbuf_r+0x6c>
 801075a:	2e0a      	cmp	r6, #10
 801075c:	d104      	bne.n	8010768 <__swbuf_r+0x6c>
 801075e:	4621      	mov	r1, r4
 8010760:	4628      	mov	r0, r5
 8010762:	f000 f927 	bl	80109b4 <_fflush_r>
 8010766:	b988      	cbnz	r0, 801078c <__swbuf_r+0x90>
 8010768:	4638      	mov	r0, r7
 801076a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801076c:	4b0a      	ldr	r3, [pc, #40]	; (8010798 <__swbuf_r+0x9c>)
 801076e:	429c      	cmp	r4, r3
 8010770:	d101      	bne.n	8010776 <__swbuf_r+0x7a>
 8010772:	68ac      	ldr	r4, [r5, #8]
 8010774:	e7cf      	b.n	8010716 <__swbuf_r+0x1a>
 8010776:	4b09      	ldr	r3, [pc, #36]	; (801079c <__swbuf_r+0xa0>)
 8010778:	429c      	cmp	r4, r3
 801077a:	bf08      	it	eq
 801077c:	68ec      	ldreq	r4, [r5, #12]
 801077e:	e7ca      	b.n	8010716 <__swbuf_r+0x1a>
 8010780:	4621      	mov	r1, r4
 8010782:	4628      	mov	r0, r5
 8010784:	f000 f81a 	bl	80107bc <__swsetup_r>
 8010788:	2800      	cmp	r0, #0
 801078a:	d0cb      	beq.n	8010724 <__swbuf_r+0x28>
 801078c:	f04f 37ff 	mov.w	r7, #4294967295
 8010790:	e7ea      	b.n	8010768 <__swbuf_r+0x6c>
 8010792:	bf00      	nop
 8010794:	080113b4 	.word	0x080113b4
 8010798:	080113d4 	.word	0x080113d4
 801079c:	08011394 	.word	0x08011394

080107a0 <__ascii_wctomb>:
 80107a0:	b149      	cbz	r1, 80107b6 <__ascii_wctomb+0x16>
 80107a2:	2aff      	cmp	r2, #255	; 0xff
 80107a4:	bf85      	ittet	hi
 80107a6:	238a      	movhi	r3, #138	; 0x8a
 80107a8:	6003      	strhi	r3, [r0, #0]
 80107aa:	700a      	strbls	r2, [r1, #0]
 80107ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80107b0:	bf98      	it	ls
 80107b2:	2001      	movls	r0, #1
 80107b4:	4770      	bx	lr
 80107b6:	4608      	mov	r0, r1
 80107b8:	4770      	bx	lr
	...

080107bc <__swsetup_r>:
 80107bc:	4b32      	ldr	r3, [pc, #200]	; (8010888 <__swsetup_r+0xcc>)
 80107be:	b570      	push	{r4, r5, r6, lr}
 80107c0:	681d      	ldr	r5, [r3, #0]
 80107c2:	4606      	mov	r6, r0
 80107c4:	460c      	mov	r4, r1
 80107c6:	b125      	cbz	r5, 80107d2 <__swsetup_r+0x16>
 80107c8:	69ab      	ldr	r3, [r5, #24]
 80107ca:	b913      	cbnz	r3, 80107d2 <__swsetup_r+0x16>
 80107cc:	4628      	mov	r0, r5
 80107ce:	f000 f985 	bl	8010adc <__sinit>
 80107d2:	4b2e      	ldr	r3, [pc, #184]	; (801088c <__swsetup_r+0xd0>)
 80107d4:	429c      	cmp	r4, r3
 80107d6:	d10f      	bne.n	80107f8 <__swsetup_r+0x3c>
 80107d8:	686c      	ldr	r4, [r5, #4]
 80107da:	89a3      	ldrh	r3, [r4, #12]
 80107dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80107e0:	0719      	lsls	r1, r3, #28
 80107e2:	d42c      	bmi.n	801083e <__swsetup_r+0x82>
 80107e4:	06dd      	lsls	r5, r3, #27
 80107e6:	d411      	bmi.n	801080c <__swsetup_r+0x50>
 80107e8:	2309      	movs	r3, #9
 80107ea:	6033      	str	r3, [r6, #0]
 80107ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80107f0:	81a3      	strh	r3, [r4, #12]
 80107f2:	f04f 30ff 	mov.w	r0, #4294967295
 80107f6:	e03e      	b.n	8010876 <__swsetup_r+0xba>
 80107f8:	4b25      	ldr	r3, [pc, #148]	; (8010890 <__swsetup_r+0xd4>)
 80107fa:	429c      	cmp	r4, r3
 80107fc:	d101      	bne.n	8010802 <__swsetup_r+0x46>
 80107fe:	68ac      	ldr	r4, [r5, #8]
 8010800:	e7eb      	b.n	80107da <__swsetup_r+0x1e>
 8010802:	4b24      	ldr	r3, [pc, #144]	; (8010894 <__swsetup_r+0xd8>)
 8010804:	429c      	cmp	r4, r3
 8010806:	bf08      	it	eq
 8010808:	68ec      	ldreq	r4, [r5, #12]
 801080a:	e7e6      	b.n	80107da <__swsetup_r+0x1e>
 801080c:	0758      	lsls	r0, r3, #29
 801080e:	d512      	bpl.n	8010836 <__swsetup_r+0x7a>
 8010810:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010812:	b141      	cbz	r1, 8010826 <__swsetup_r+0x6a>
 8010814:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010818:	4299      	cmp	r1, r3
 801081a:	d002      	beq.n	8010822 <__swsetup_r+0x66>
 801081c:	4630      	mov	r0, r6
 801081e:	f7ff fb6f 	bl	800ff00 <_free_r>
 8010822:	2300      	movs	r3, #0
 8010824:	6363      	str	r3, [r4, #52]	; 0x34
 8010826:	89a3      	ldrh	r3, [r4, #12]
 8010828:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801082c:	81a3      	strh	r3, [r4, #12]
 801082e:	2300      	movs	r3, #0
 8010830:	6063      	str	r3, [r4, #4]
 8010832:	6923      	ldr	r3, [r4, #16]
 8010834:	6023      	str	r3, [r4, #0]
 8010836:	89a3      	ldrh	r3, [r4, #12]
 8010838:	f043 0308 	orr.w	r3, r3, #8
 801083c:	81a3      	strh	r3, [r4, #12]
 801083e:	6923      	ldr	r3, [r4, #16]
 8010840:	b94b      	cbnz	r3, 8010856 <__swsetup_r+0x9a>
 8010842:	89a3      	ldrh	r3, [r4, #12]
 8010844:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801084c:	d003      	beq.n	8010856 <__swsetup_r+0x9a>
 801084e:	4621      	mov	r1, r4
 8010850:	4630      	mov	r0, r6
 8010852:	f000 fa07 	bl	8010c64 <__smakebuf_r>
 8010856:	89a0      	ldrh	r0, [r4, #12]
 8010858:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801085c:	f010 0301 	ands.w	r3, r0, #1
 8010860:	d00a      	beq.n	8010878 <__swsetup_r+0xbc>
 8010862:	2300      	movs	r3, #0
 8010864:	60a3      	str	r3, [r4, #8]
 8010866:	6963      	ldr	r3, [r4, #20]
 8010868:	425b      	negs	r3, r3
 801086a:	61a3      	str	r3, [r4, #24]
 801086c:	6923      	ldr	r3, [r4, #16]
 801086e:	b943      	cbnz	r3, 8010882 <__swsetup_r+0xc6>
 8010870:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010874:	d1ba      	bne.n	80107ec <__swsetup_r+0x30>
 8010876:	bd70      	pop	{r4, r5, r6, pc}
 8010878:	0781      	lsls	r1, r0, #30
 801087a:	bf58      	it	pl
 801087c:	6963      	ldrpl	r3, [r4, #20]
 801087e:	60a3      	str	r3, [r4, #8]
 8010880:	e7f4      	b.n	801086c <__swsetup_r+0xb0>
 8010882:	2000      	movs	r0, #0
 8010884:	e7f7      	b.n	8010876 <__swsetup_r+0xba>
 8010886:	bf00      	nop
 8010888:	20000180 	.word	0x20000180
 801088c:	080113b4 	.word	0x080113b4
 8010890:	080113d4 	.word	0x080113d4
 8010894:	08011394 	.word	0x08011394

08010898 <abort>:
 8010898:	b508      	push	{r3, lr}
 801089a:	2006      	movs	r0, #6
 801089c:	f000 fa52 	bl	8010d44 <raise>
 80108a0:	2001      	movs	r0, #1
 80108a2:	f000 fb65 	bl	8010f70 <_exit>
	...

080108a8 <__sflush_r>:
 80108a8:	898a      	ldrh	r2, [r1, #12]
 80108aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108ae:	4605      	mov	r5, r0
 80108b0:	0710      	lsls	r0, r2, #28
 80108b2:	460c      	mov	r4, r1
 80108b4:	d458      	bmi.n	8010968 <__sflush_r+0xc0>
 80108b6:	684b      	ldr	r3, [r1, #4]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	dc05      	bgt.n	80108c8 <__sflush_r+0x20>
 80108bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80108be:	2b00      	cmp	r3, #0
 80108c0:	dc02      	bgt.n	80108c8 <__sflush_r+0x20>
 80108c2:	2000      	movs	r0, #0
 80108c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80108ca:	2e00      	cmp	r6, #0
 80108cc:	d0f9      	beq.n	80108c2 <__sflush_r+0x1a>
 80108ce:	2300      	movs	r3, #0
 80108d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80108d4:	682f      	ldr	r7, [r5, #0]
 80108d6:	602b      	str	r3, [r5, #0]
 80108d8:	d032      	beq.n	8010940 <__sflush_r+0x98>
 80108da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80108dc:	89a3      	ldrh	r3, [r4, #12]
 80108de:	075a      	lsls	r2, r3, #29
 80108e0:	d505      	bpl.n	80108ee <__sflush_r+0x46>
 80108e2:	6863      	ldr	r3, [r4, #4]
 80108e4:	1ac0      	subs	r0, r0, r3
 80108e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80108e8:	b10b      	cbz	r3, 80108ee <__sflush_r+0x46>
 80108ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80108ec:	1ac0      	subs	r0, r0, r3
 80108ee:	2300      	movs	r3, #0
 80108f0:	4602      	mov	r2, r0
 80108f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80108f4:	6a21      	ldr	r1, [r4, #32]
 80108f6:	4628      	mov	r0, r5
 80108f8:	47b0      	blx	r6
 80108fa:	1c43      	adds	r3, r0, #1
 80108fc:	89a3      	ldrh	r3, [r4, #12]
 80108fe:	d106      	bne.n	801090e <__sflush_r+0x66>
 8010900:	6829      	ldr	r1, [r5, #0]
 8010902:	291d      	cmp	r1, #29
 8010904:	d82c      	bhi.n	8010960 <__sflush_r+0xb8>
 8010906:	4a2a      	ldr	r2, [pc, #168]	; (80109b0 <__sflush_r+0x108>)
 8010908:	40ca      	lsrs	r2, r1
 801090a:	07d6      	lsls	r6, r2, #31
 801090c:	d528      	bpl.n	8010960 <__sflush_r+0xb8>
 801090e:	2200      	movs	r2, #0
 8010910:	6062      	str	r2, [r4, #4]
 8010912:	04d9      	lsls	r1, r3, #19
 8010914:	6922      	ldr	r2, [r4, #16]
 8010916:	6022      	str	r2, [r4, #0]
 8010918:	d504      	bpl.n	8010924 <__sflush_r+0x7c>
 801091a:	1c42      	adds	r2, r0, #1
 801091c:	d101      	bne.n	8010922 <__sflush_r+0x7a>
 801091e:	682b      	ldr	r3, [r5, #0]
 8010920:	b903      	cbnz	r3, 8010924 <__sflush_r+0x7c>
 8010922:	6560      	str	r0, [r4, #84]	; 0x54
 8010924:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010926:	602f      	str	r7, [r5, #0]
 8010928:	2900      	cmp	r1, #0
 801092a:	d0ca      	beq.n	80108c2 <__sflush_r+0x1a>
 801092c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010930:	4299      	cmp	r1, r3
 8010932:	d002      	beq.n	801093a <__sflush_r+0x92>
 8010934:	4628      	mov	r0, r5
 8010936:	f7ff fae3 	bl	800ff00 <_free_r>
 801093a:	2000      	movs	r0, #0
 801093c:	6360      	str	r0, [r4, #52]	; 0x34
 801093e:	e7c1      	b.n	80108c4 <__sflush_r+0x1c>
 8010940:	6a21      	ldr	r1, [r4, #32]
 8010942:	2301      	movs	r3, #1
 8010944:	4628      	mov	r0, r5
 8010946:	47b0      	blx	r6
 8010948:	1c41      	adds	r1, r0, #1
 801094a:	d1c7      	bne.n	80108dc <__sflush_r+0x34>
 801094c:	682b      	ldr	r3, [r5, #0]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d0c4      	beq.n	80108dc <__sflush_r+0x34>
 8010952:	2b1d      	cmp	r3, #29
 8010954:	d001      	beq.n	801095a <__sflush_r+0xb2>
 8010956:	2b16      	cmp	r3, #22
 8010958:	d101      	bne.n	801095e <__sflush_r+0xb6>
 801095a:	602f      	str	r7, [r5, #0]
 801095c:	e7b1      	b.n	80108c2 <__sflush_r+0x1a>
 801095e:	89a3      	ldrh	r3, [r4, #12]
 8010960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010964:	81a3      	strh	r3, [r4, #12]
 8010966:	e7ad      	b.n	80108c4 <__sflush_r+0x1c>
 8010968:	690f      	ldr	r7, [r1, #16]
 801096a:	2f00      	cmp	r7, #0
 801096c:	d0a9      	beq.n	80108c2 <__sflush_r+0x1a>
 801096e:	0793      	lsls	r3, r2, #30
 8010970:	680e      	ldr	r6, [r1, #0]
 8010972:	bf08      	it	eq
 8010974:	694b      	ldreq	r3, [r1, #20]
 8010976:	600f      	str	r7, [r1, #0]
 8010978:	bf18      	it	ne
 801097a:	2300      	movne	r3, #0
 801097c:	eba6 0807 	sub.w	r8, r6, r7
 8010980:	608b      	str	r3, [r1, #8]
 8010982:	f1b8 0f00 	cmp.w	r8, #0
 8010986:	dd9c      	ble.n	80108c2 <__sflush_r+0x1a>
 8010988:	6a21      	ldr	r1, [r4, #32]
 801098a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801098c:	4643      	mov	r3, r8
 801098e:	463a      	mov	r2, r7
 8010990:	4628      	mov	r0, r5
 8010992:	47b0      	blx	r6
 8010994:	2800      	cmp	r0, #0
 8010996:	dc06      	bgt.n	80109a6 <__sflush_r+0xfe>
 8010998:	89a3      	ldrh	r3, [r4, #12]
 801099a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801099e:	81a3      	strh	r3, [r4, #12]
 80109a0:	f04f 30ff 	mov.w	r0, #4294967295
 80109a4:	e78e      	b.n	80108c4 <__sflush_r+0x1c>
 80109a6:	4407      	add	r7, r0
 80109a8:	eba8 0800 	sub.w	r8, r8, r0
 80109ac:	e7e9      	b.n	8010982 <__sflush_r+0xda>
 80109ae:	bf00      	nop
 80109b0:	20400001 	.word	0x20400001

080109b4 <_fflush_r>:
 80109b4:	b538      	push	{r3, r4, r5, lr}
 80109b6:	690b      	ldr	r3, [r1, #16]
 80109b8:	4605      	mov	r5, r0
 80109ba:	460c      	mov	r4, r1
 80109bc:	b913      	cbnz	r3, 80109c4 <_fflush_r+0x10>
 80109be:	2500      	movs	r5, #0
 80109c0:	4628      	mov	r0, r5
 80109c2:	bd38      	pop	{r3, r4, r5, pc}
 80109c4:	b118      	cbz	r0, 80109ce <_fflush_r+0x1a>
 80109c6:	6983      	ldr	r3, [r0, #24]
 80109c8:	b90b      	cbnz	r3, 80109ce <_fflush_r+0x1a>
 80109ca:	f000 f887 	bl	8010adc <__sinit>
 80109ce:	4b14      	ldr	r3, [pc, #80]	; (8010a20 <_fflush_r+0x6c>)
 80109d0:	429c      	cmp	r4, r3
 80109d2:	d11b      	bne.n	8010a0c <_fflush_r+0x58>
 80109d4:	686c      	ldr	r4, [r5, #4]
 80109d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d0ef      	beq.n	80109be <_fflush_r+0xa>
 80109de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80109e0:	07d0      	lsls	r0, r2, #31
 80109e2:	d404      	bmi.n	80109ee <_fflush_r+0x3a>
 80109e4:	0599      	lsls	r1, r3, #22
 80109e6:	d402      	bmi.n	80109ee <_fflush_r+0x3a>
 80109e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80109ea:	f000 f915 	bl	8010c18 <__retarget_lock_acquire_recursive>
 80109ee:	4628      	mov	r0, r5
 80109f0:	4621      	mov	r1, r4
 80109f2:	f7ff ff59 	bl	80108a8 <__sflush_r>
 80109f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80109f8:	07da      	lsls	r2, r3, #31
 80109fa:	4605      	mov	r5, r0
 80109fc:	d4e0      	bmi.n	80109c0 <_fflush_r+0xc>
 80109fe:	89a3      	ldrh	r3, [r4, #12]
 8010a00:	059b      	lsls	r3, r3, #22
 8010a02:	d4dd      	bmi.n	80109c0 <_fflush_r+0xc>
 8010a04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a06:	f000 f908 	bl	8010c1a <__retarget_lock_release_recursive>
 8010a0a:	e7d9      	b.n	80109c0 <_fflush_r+0xc>
 8010a0c:	4b05      	ldr	r3, [pc, #20]	; (8010a24 <_fflush_r+0x70>)
 8010a0e:	429c      	cmp	r4, r3
 8010a10:	d101      	bne.n	8010a16 <_fflush_r+0x62>
 8010a12:	68ac      	ldr	r4, [r5, #8]
 8010a14:	e7df      	b.n	80109d6 <_fflush_r+0x22>
 8010a16:	4b04      	ldr	r3, [pc, #16]	; (8010a28 <_fflush_r+0x74>)
 8010a18:	429c      	cmp	r4, r3
 8010a1a:	bf08      	it	eq
 8010a1c:	68ec      	ldreq	r4, [r5, #12]
 8010a1e:	e7da      	b.n	80109d6 <_fflush_r+0x22>
 8010a20:	080113b4 	.word	0x080113b4
 8010a24:	080113d4 	.word	0x080113d4
 8010a28:	08011394 	.word	0x08011394

08010a2c <std>:
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	b510      	push	{r4, lr}
 8010a30:	4604      	mov	r4, r0
 8010a32:	e9c0 3300 	strd	r3, r3, [r0]
 8010a36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010a3a:	6083      	str	r3, [r0, #8]
 8010a3c:	8181      	strh	r1, [r0, #12]
 8010a3e:	6643      	str	r3, [r0, #100]	; 0x64
 8010a40:	81c2      	strh	r2, [r0, #14]
 8010a42:	6183      	str	r3, [r0, #24]
 8010a44:	4619      	mov	r1, r3
 8010a46:	2208      	movs	r2, #8
 8010a48:	305c      	adds	r0, #92	; 0x5c
 8010a4a:	f7fd fba7 	bl	800e19c <memset>
 8010a4e:	4b05      	ldr	r3, [pc, #20]	; (8010a64 <std+0x38>)
 8010a50:	6263      	str	r3, [r4, #36]	; 0x24
 8010a52:	4b05      	ldr	r3, [pc, #20]	; (8010a68 <std+0x3c>)
 8010a54:	62a3      	str	r3, [r4, #40]	; 0x28
 8010a56:	4b05      	ldr	r3, [pc, #20]	; (8010a6c <std+0x40>)
 8010a58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010a5a:	4b05      	ldr	r3, [pc, #20]	; (8010a70 <std+0x44>)
 8010a5c:	6224      	str	r4, [r4, #32]
 8010a5e:	6323      	str	r3, [r4, #48]	; 0x30
 8010a60:	bd10      	pop	{r4, pc}
 8010a62:	bf00      	nop
 8010a64:	08010d7d 	.word	0x08010d7d
 8010a68:	08010d9f 	.word	0x08010d9f
 8010a6c:	08010dd7 	.word	0x08010dd7
 8010a70:	08010dfb 	.word	0x08010dfb

08010a74 <_cleanup_r>:
 8010a74:	4901      	ldr	r1, [pc, #4]	; (8010a7c <_cleanup_r+0x8>)
 8010a76:	f000 b8af 	b.w	8010bd8 <_fwalk_reent>
 8010a7a:	bf00      	nop
 8010a7c:	080109b5 	.word	0x080109b5

08010a80 <__sfmoreglue>:
 8010a80:	b570      	push	{r4, r5, r6, lr}
 8010a82:	1e4a      	subs	r2, r1, #1
 8010a84:	2568      	movs	r5, #104	; 0x68
 8010a86:	4355      	muls	r5, r2
 8010a88:	460e      	mov	r6, r1
 8010a8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010a8e:	f7ff fa87 	bl	800ffa0 <_malloc_r>
 8010a92:	4604      	mov	r4, r0
 8010a94:	b140      	cbz	r0, 8010aa8 <__sfmoreglue+0x28>
 8010a96:	2100      	movs	r1, #0
 8010a98:	e9c0 1600 	strd	r1, r6, [r0]
 8010a9c:	300c      	adds	r0, #12
 8010a9e:	60a0      	str	r0, [r4, #8]
 8010aa0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010aa4:	f7fd fb7a 	bl	800e19c <memset>
 8010aa8:	4620      	mov	r0, r4
 8010aaa:	bd70      	pop	{r4, r5, r6, pc}

08010aac <__sfp_lock_acquire>:
 8010aac:	4801      	ldr	r0, [pc, #4]	; (8010ab4 <__sfp_lock_acquire+0x8>)
 8010aae:	f000 b8b3 	b.w	8010c18 <__retarget_lock_acquire_recursive>
 8010ab2:	bf00      	nop
 8010ab4:	2000260c 	.word	0x2000260c

08010ab8 <__sfp_lock_release>:
 8010ab8:	4801      	ldr	r0, [pc, #4]	; (8010ac0 <__sfp_lock_release+0x8>)
 8010aba:	f000 b8ae 	b.w	8010c1a <__retarget_lock_release_recursive>
 8010abe:	bf00      	nop
 8010ac0:	2000260c 	.word	0x2000260c

08010ac4 <__sinit_lock_acquire>:
 8010ac4:	4801      	ldr	r0, [pc, #4]	; (8010acc <__sinit_lock_acquire+0x8>)
 8010ac6:	f000 b8a7 	b.w	8010c18 <__retarget_lock_acquire_recursive>
 8010aca:	bf00      	nop
 8010acc:	20002607 	.word	0x20002607

08010ad0 <__sinit_lock_release>:
 8010ad0:	4801      	ldr	r0, [pc, #4]	; (8010ad8 <__sinit_lock_release+0x8>)
 8010ad2:	f000 b8a2 	b.w	8010c1a <__retarget_lock_release_recursive>
 8010ad6:	bf00      	nop
 8010ad8:	20002607 	.word	0x20002607

08010adc <__sinit>:
 8010adc:	b510      	push	{r4, lr}
 8010ade:	4604      	mov	r4, r0
 8010ae0:	f7ff fff0 	bl	8010ac4 <__sinit_lock_acquire>
 8010ae4:	69a3      	ldr	r3, [r4, #24]
 8010ae6:	b11b      	cbz	r3, 8010af0 <__sinit+0x14>
 8010ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010aec:	f7ff bff0 	b.w	8010ad0 <__sinit_lock_release>
 8010af0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010af4:	6523      	str	r3, [r4, #80]	; 0x50
 8010af6:	4b13      	ldr	r3, [pc, #76]	; (8010b44 <__sinit+0x68>)
 8010af8:	4a13      	ldr	r2, [pc, #76]	; (8010b48 <__sinit+0x6c>)
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	62a2      	str	r2, [r4, #40]	; 0x28
 8010afe:	42a3      	cmp	r3, r4
 8010b00:	bf04      	itt	eq
 8010b02:	2301      	moveq	r3, #1
 8010b04:	61a3      	streq	r3, [r4, #24]
 8010b06:	4620      	mov	r0, r4
 8010b08:	f000 f820 	bl	8010b4c <__sfp>
 8010b0c:	6060      	str	r0, [r4, #4]
 8010b0e:	4620      	mov	r0, r4
 8010b10:	f000 f81c 	bl	8010b4c <__sfp>
 8010b14:	60a0      	str	r0, [r4, #8]
 8010b16:	4620      	mov	r0, r4
 8010b18:	f000 f818 	bl	8010b4c <__sfp>
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	60e0      	str	r0, [r4, #12]
 8010b20:	2104      	movs	r1, #4
 8010b22:	6860      	ldr	r0, [r4, #4]
 8010b24:	f7ff ff82 	bl	8010a2c <std>
 8010b28:	68a0      	ldr	r0, [r4, #8]
 8010b2a:	2201      	movs	r2, #1
 8010b2c:	2109      	movs	r1, #9
 8010b2e:	f7ff ff7d 	bl	8010a2c <std>
 8010b32:	68e0      	ldr	r0, [r4, #12]
 8010b34:	2202      	movs	r2, #2
 8010b36:	2112      	movs	r1, #18
 8010b38:	f7ff ff78 	bl	8010a2c <std>
 8010b3c:	2301      	movs	r3, #1
 8010b3e:	61a3      	str	r3, [r4, #24]
 8010b40:	e7d2      	b.n	8010ae8 <__sinit+0xc>
 8010b42:	bf00      	nop
 8010b44:	08011014 	.word	0x08011014
 8010b48:	08010a75 	.word	0x08010a75

08010b4c <__sfp>:
 8010b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b4e:	4607      	mov	r7, r0
 8010b50:	f7ff ffac 	bl	8010aac <__sfp_lock_acquire>
 8010b54:	4b1e      	ldr	r3, [pc, #120]	; (8010bd0 <__sfp+0x84>)
 8010b56:	681e      	ldr	r6, [r3, #0]
 8010b58:	69b3      	ldr	r3, [r6, #24]
 8010b5a:	b913      	cbnz	r3, 8010b62 <__sfp+0x16>
 8010b5c:	4630      	mov	r0, r6
 8010b5e:	f7ff ffbd 	bl	8010adc <__sinit>
 8010b62:	3648      	adds	r6, #72	; 0x48
 8010b64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010b68:	3b01      	subs	r3, #1
 8010b6a:	d503      	bpl.n	8010b74 <__sfp+0x28>
 8010b6c:	6833      	ldr	r3, [r6, #0]
 8010b6e:	b30b      	cbz	r3, 8010bb4 <__sfp+0x68>
 8010b70:	6836      	ldr	r6, [r6, #0]
 8010b72:	e7f7      	b.n	8010b64 <__sfp+0x18>
 8010b74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010b78:	b9d5      	cbnz	r5, 8010bb0 <__sfp+0x64>
 8010b7a:	4b16      	ldr	r3, [pc, #88]	; (8010bd4 <__sfp+0x88>)
 8010b7c:	60e3      	str	r3, [r4, #12]
 8010b7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010b82:	6665      	str	r5, [r4, #100]	; 0x64
 8010b84:	f000 f847 	bl	8010c16 <__retarget_lock_init_recursive>
 8010b88:	f7ff ff96 	bl	8010ab8 <__sfp_lock_release>
 8010b8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010b90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010b94:	6025      	str	r5, [r4, #0]
 8010b96:	61a5      	str	r5, [r4, #24]
 8010b98:	2208      	movs	r2, #8
 8010b9a:	4629      	mov	r1, r5
 8010b9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010ba0:	f7fd fafc 	bl	800e19c <memset>
 8010ba4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010ba8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010bac:	4620      	mov	r0, r4
 8010bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bb0:	3468      	adds	r4, #104	; 0x68
 8010bb2:	e7d9      	b.n	8010b68 <__sfp+0x1c>
 8010bb4:	2104      	movs	r1, #4
 8010bb6:	4638      	mov	r0, r7
 8010bb8:	f7ff ff62 	bl	8010a80 <__sfmoreglue>
 8010bbc:	4604      	mov	r4, r0
 8010bbe:	6030      	str	r0, [r6, #0]
 8010bc0:	2800      	cmp	r0, #0
 8010bc2:	d1d5      	bne.n	8010b70 <__sfp+0x24>
 8010bc4:	f7ff ff78 	bl	8010ab8 <__sfp_lock_release>
 8010bc8:	230c      	movs	r3, #12
 8010bca:	603b      	str	r3, [r7, #0]
 8010bcc:	e7ee      	b.n	8010bac <__sfp+0x60>
 8010bce:	bf00      	nop
 8010bd0:	08011014 	.word	0x08011014
 8010bd4:	ffff0001 	.word	0xffff0001

08010bd8 <_fwalk_reent>:
 8010bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bdc:	4606      	mov	r6, r0
 8010bde:	4688      	mov	r8, r1
 8010be0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010be4:	2700      	movs	r7, #0
 8010be6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010bea:	f1b9 0901 	subs.w	r9, r9, #1
 8010bee:	d505      	bpl.n	8010bfc <_fwalk_reent+0x24>
 8010bf0:	6824      	ldr	r4, [r4, #0]
 8010bf2:	2c00      	cmp	r4, #0
 8010bf4:	d1f7      	bne.n	8010be6 <_fwalk_reent+0xe>
 8010bf6:	4638      	mov	r0, r7
 8010bf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bfc:	89ab      	ldrh	r3, [r5, #12]
 8010bfe:	2b01      	cmp	r3, #1
 8010c00:	d907      	bls.n	8010c12 <_fwalk_reent+0x3a>
 8010c02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010c06:	3301      	adds	r3, #1
 8010c08:	d003      	beq.n	8010c12 <_fwalk_reent+0x3a>
 8010c0a:	4629      	mov	r1, r5
 8010c0c:	4630      	mov	r0, r6
 8010c0e:	47c0      	blx	r8
 8010c10:	4307      	orrs	r7, r0
 8010c12:	3568      	adds	r5, #104	; 0x68
 8010c14:	e7e9      	b.n	8010bea <_fwalk_reent+0x12>

08010c16 <__retarget_lock_init_recursive>:
 8010c16:	4770      	bx	lr

08010c18 <__retarget_lock_acquire_recursive>:
 8010c18:	4770      	bx	lr

08010c1a <__retarget_lock_release_recursive>:
 8010c1a:	4770      	bx	lr

08010c1c <__swhatbuf_r>:
 8010c1c:	b570      	push	{r4, r5, r6, lr}
 8010c1e:	460e      	mov	r6, r1
 8010c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c24:	2900      	cmp	r1, #0
 8010c26:	b096      	sub	sp, #88	; 0x58
 8010c28:	4614      	mov	r4, r2
 8010c2a:	461d      	mov	r5, r3
 8010c2c:	da07      	bge.n	8010c3e <__swhatbuf_r+0x22>
 8010c2e:	2300      	movs	r3, #0
 8010c30:	602b      	str	r3, [r5, #0]
 8010c32:	89b3      	ldrh	r3, [r6, #12]
 8010c34:	061a      	lsls	r2, r3, #24
 8010c36:	d410      	bmi.n	8010c5a <__swhatbuf_r+0x3e>
 8010c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c3c:	e00e      	b.n	8010c5c <__swhatbuf_r+0x40>
 8010c3e:	466a      	mov	r2, sp
 8010c40:	f000 f902 	bl	8010e48 <_fstat_r>
 8010c44:	2800      	cmp	r0, #0
 8010c46:	dbf2      	blt.n	8010c2e <__swhatbuf_r+0x12>
 8010c48:	9a01      	ldr	r2, [sp, #4]
 8010c4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010c4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010c52:	425a      	negs	r2, r3
 8010c54:	415a      	adcs	r2, r3
 8010c56:	602a      	str	r2, [r5, #0]
 8010c58:	e7ee      	b.n	8010c38 <__swhatbuf_r+0x1c>
 8010c5a:	2340      	movs	r3, #64	; 0x40
 8010c5c:	2000      	movs	r0, #0
 8010c5e:	6023      	str	r3, [r4, #0]
 8010c60:	b016      	add	sp, #88	; 0x58
 8010c62:	bd70      	pop	{r4, r5, r6, pc}

08010c64 <__smakebuf_r>:
 8010c64:	898b      	ldrh	r3, [r1, #12]
 8010c66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010c68:	079d      	lsls	r5, r3, #30
 8010c6a:	4606      	mov	r6, r0
 8010c6c:	460c      	mov	r4, r1
 8010c6e:	d507      	bpl.n	8010c80 <__smakebuf_r+0x1c>
 8010c70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010c74:	6023      	str	r3, [r4, #0]
 8010c76:	6123      	str	r3, [r4, #16]
 8010c78:	2301      	movs	r3, #1
 8010c7a:	6163      	str	r3, [r4, #20]
 8010c7c:	b002      	add	sp, #8
 8010c7e:	bd70      	pop	{r4, r5, r6, pc}
 8010c80:	ab01      	add	r3, sp, #4
 8010c82:	466a      	mov	r2, sp
 8010c84:	f7ff ffca 	bl	8010c1c <__swhatbuf_r>
 8010c88:	9900      	ldr	r1, [sp, #0]
 8010c8a:	4605      	mov	r5, r0
 8010c8c:	4630      	mov	r0, r6
 8010c8e:	f7ff f987 	bl	800ffa0 <_malloc_r>
 8010c92:	b948      	cbnz	r0, 8010ca8 <__smakebuf_r+0x44>
 8010c94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c98:	059a      	lsls	r2, r3, #22
 8010c9a:	d4ef      	bmi.n	8010c7c <__smakebuf_r+0x18>
 8010c9c:	f023 0303 	bic.w	r3, r3, #3
 8010ca0:	f043 0302 	orr.w	r3, r3, #2
 8010ca4:	81a3      	strh	r3, [r4, #12]
 8010ca6:	e7e3      	b.n	8010c70 <__smakebuf_r+0xc>
 8010ca8:	4b0d      	ldr	r3, [pc, #52]	; (8010ce0 <__smakebuf_r+0x7c>)
 8010caa:	62b3      	str	r3, [r6, #40]	; 0x28
 8010cac:	89a3      	ldrh	r3, [r4, #12]
 8010cae:	6020      	str	r0, [r4, #0]
 8010cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cb4:	81a3      	strh	r3, [r4, #12]
 8010cb6:	9b00      	ldr	r3, [sp, #0]
 8010cb8:	6163      	str	r3, [r4, #20]
 8010cba:	9b01      	ldr	r3, [sp, #4]
 8010cbc:	6120      	str	r0, [r4, #16]
 8010cbe:	b15b      	cbz	r3, 8010cd8 <__smakebuf_r+0x74>
 8010cc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010cc4:	4630      	mov	r0, r6
 8010cc6:	f000 f8d1 	bl	8010e6c <_isatty_r>
 8010cca:	b128      	cbz	r0, 8010cd8 <__smakebuf_r+0x74>
 8010ccc:	89a3      	ldrh	r3, [r4, #12]
 8010cce:	f023 0303 	bic.w	r3, r3, #3
 8010cd2:	f043 0301 	orr.w	r3, r3, #1
 8010cd6:	81a3      	strh	r3, [r4, #12]
 8010cd8:	89a0      	ldrh	r0, [r4, #12]
 8010cda:	4305      	orrs	r5, r0
 8010cdc:	81a5      	strh	r5, [r4, #12]
 8010cde:	e7cd      	b.n	8010c7c <__smakebuf_r+0x18>
 8010ce0:	08010a75 	.word	0x08010a75

08010ce4 <_malloc_usable_size_r>:
 8010ce4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ce8:	1f18      	subs	r0, r3, #4
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	bfbc      	itt	lt
 8010cee:	580b      	ldrlt	r3, [r1, r0]
 8010cf0:	18c0      	addlt	r0, r0, r3
 8010cf2:	4770      	bx	lr

08010cf4 <_raise_r>:
 8010cf4:	291f      	cmp	r1, #31
 8010cf6:	b538      	push	{r3, r4, r5, lr}
 8010cf8:	4604      	mov	r4, r0
 8010cfa:	460d      	mov	r5, r1
 8010cfc:	d904      	bls.n	8010d08 <_raise_r+0x14>
 8010cfe:	2316      	movs	r3, #22
 8010d00:	6003      	str	r3, [r0, #0]
 8010d02:	f04f 30ff 	mov.w	r0, #4294967295
 8010d06:	bd38      	pop	{r3, r4, r5, pc}
 8010d08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010d0a:	b112      	cbz	r2, 8010d12 <_raise_r+0x1e>
 8010d0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010d10:	b94b      	cbnz	r3, 8010d26 <_raise_r+0x32>
 8010d12:	4620      	mov	r0, r4
 8010d14:	f000 f830 	bl	8010d78 <_getpid_r>
 8010d18:	462a      	mov	r2, r5
 8010d1a:	4601      	mov	r1, r0
 8010d1c:	4620      	mov	r0, r4
 8010d1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d22:	f000 b817 	b.w	8010d54 <_kill_r>
 8010d26:	2b01      	cmp	r3, #1
 8010d28:	d00a      	beq.n	8010d40 <_raise_r+0x4c>
 8010d2a:	1c59      	adds	r1, r3, #1
 8010d2c:	d103      	bne.n	8010d36 <_raise_r+0x42>
 8010d2e:	2316      	movs	r3, #22
 8010d30:	6003      	str	r3, [r0, #0]
 8010d32:	2001      	movs	r0, #1
 8010d34:	e7e7      	b.n	8010d06 <_raise_r+0x12>
 8010d36:	2400      	movs	r4, #0
 8010d38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010d3c:	4628      	mov	r0, r5
 8010d3e:	4798      	blx	r3
 8010d40:	2000      	movs	r0, #0
 8010d42:	e7e0      	b.n	8010d06 <_raise_r+0x12>

08010d44 <raise>:
 8010d44:	4b02      	ldr	r3, [pc, #8]	; (8010d50 <raise+0xc>)
 8010d46:	4601      	mov	r1, r0
 8010d48:	6818      	ldr	r0, [r3, #0]
 8010d4a:	f7ff bfd3 	b.w	8010cf4 <_raise_r>
 8010d4e:	bf00      	nop
 8010d50:	20000180 	.word	0x20000180

08010d54 <_kill_r>:
 8010d54:	b538      	push	{r3, r4, r5, lr}
 8010d56:	4d07      	ldr	r5, [pc, #28]	; (8010d74 <_kill_r+0x20>)
 8010d58:	2300      	movs	r3, #0
 8010d5a:	4604      	mov	r4, r0
 8010d5c:	4608      	mov	r0, r1
 8010d5e:	4611      	mov	r1, r2
 8010d60:	602b      	str	r3, [r5, #0]
 8010d62:	f000 f8d7 	bl	8010f14 <_kill>
 8010d66:	1c43      	adds	r3, r0, #1
 8010d68:	d102      	bne.n	8010d70 <_kill_r+0x1c>
 8010d6a:	682b      	ldr	r3, [r5, #0]
 8010d6c:	b103      	cbz	r3, 8010d70 <_kill_r+0x1c>
 8010d6e:	6023      	str	r3, [r4, #0]
 8010d70:	bd38      	pop	{r3, r4, r5, pc}
 8010d72:	bf00      	nop
 8010d74:	20002600 	.word	0x20002600

08010d78 <_getpid_r>:
 8010d78:	f000 b8bc 	b.w	8010ef4 <_getpid>

08010d7c <__sread>:
 8010d7c:	b510      	push	{r4, lr}
 8010d7e:	460c      	mov	r4, r1
 8010d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d84:	f000 f894 	bl	8010eb0 <_read_r>
 8010d88:	2800      	cmp	r0, #0
 8010d8a:	bfab      	itete	ge
 8010d8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010d8e:	89a3      	ldrhlt	r3, [r4, #12]
 8010d90:	181b      	addge	r3, r3, r0
 8010d92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010d96:	bfac      	ite	ge
 8010d98:	6563      	strge	r3, [r4, #84]	; 0x54
 8010d9a:	81a3      	strhlt	r3, [r4, #12]
 8010d9c:	bd10      	pop	{r4, pc}

08010d9e <__swrite>:
 8010d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010da2:	461f      	mov	r7, r3
 8010da4:	898b      	ldrh	r3, [r1, #12]
 8010da6:	05db      	lsls	r3, r3, #23
 8010da8:	4605      	mov	r5, r0
 8010daa:	460c      	mov	r4, r1
 8010dac:	4616      	mov	r6, r2
 8010dae:	d505      	bpl.n	8010dbc <__swrite+0x1e>
 8010db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010db4:	2302      	movs	r3, #2
 8010db6:	2200      	movs	r2, #0
 8010db8:	f000 f868 	bl	8010e8c <_lseek_r>
 8010dbc:	89a3      	ldrh	r3, [r4, #12]
 8010dbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010dc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010dc6:	81a3      	strh	r3, [r4, #12]
 8010dc8:	4632      	mov	r2, r6
 8010dca:	463b      	mov	r3, r7
 8010dcc:	4628      	mov	r0, r5
 8010dce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010dd2:	f000 b817 	b.w	8010e04 <_write_r>

08010dd6 <__sseek>:
 8010dd6:	b510      	push	{r4, lr}
 8010dd8:	460c      	mov	r4, r1
 8010dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dde:	f000 f855 	bl	8010e8c <_lseek_r>
 8010de2:	1c43      	adds	r3, r0, #1
 8010de4:	89a3      	ldrh	r3, [r4, #12]
 8010de6:	bf15      	itete	ne
 8010de8:	6560      	strne	r0, [r4, #84]	; 0x54
 8010dea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010dee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010df2:	81a3      	strheq	r3, [r4, #12]
 8010df4:	bf18      	it	ne
 8010df6:	81a3      	strhne	r3, [r4, #12]
 8010df8:	bd10      	pop	{r4, pc}

08010dfa <__sclose>:
 8010dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dfe:	f000 b813 	b.w	8010e28 <_close_r>
	...

08010e04 <_write_r>:
 8010e04:	b538      	push	{r3, r4, r5, lr}
 8010e06:	4d07      	ldr	r5, [pc, #28]	; (8010e24 <_write_r+0x20>)
 8010e08:	4604      	mov	r4, r0
 8010e0a:	4608      	mov	r0, r1
 8010e0c:	4611      	mov	r1, r2
 8010e0e:	2200      	movs	r2, #0
 8010e10:	602a      	str	r2, [r5, #0]
 8010e12:	461a      	mov	r2, r3
 8010e14:	f000 f8a4 	bl	8010f60 <_write>
 8010e18:	1c43      	adds	r3, r0, #1
 8010e1a:	d102      	bne.n	8010e22 <_write_r+0x1e>
 8010e1c:	682b      	ldr	r3, [r5, #0]
 8010e1e:	b103      	cbz	r3, 8010e22 <_write_r+0x1e>
 8010e20:	6023      	str	r3, [r4, #0]
 8010e22:	bd38      	pop	{r3, r4, r5, pc}
 8010e24:	20002600 	.word	0x20002600

08010e28 <_close_r>:
 8010e28:	b538      	push	{r3, r4, r5, lr}
 8010e2a:	4d06      	ldr	r5, [pc, #24]	; (8010e44 <_close_r+0x1c>)
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	4604      	mov	r4, r0
 8010e30:	4608      	mov	r0, r1
 8010e32:	602b      	str	r3, [r5, #0]
 8010e34:	f000 f84e 	bl	8010ed4 <_close>
 8010e38:	1c43      	adds	r3, r0, #1
 8010e3a:	d102      	bne.n	8010e42 <_close_r+0x1a>
 8010e3c:	682b      	ldr	r3, [r5, #0]
 8010e3e:	b103      	cbz	r3, 8010e42 <_close_r+0x1a>
 8010e40:	6023      	str	r3, [r4, #0]
 8010e42:	bd38      	pop	{r3, r4, r5, pc}
 8010e44:	20002600 	.word	0x20002600

08010e48 <_fstat_r>:
 8010e48:	b538      	push	{r3, r4, r5, lr}
 8010e4a:	4d07      	ldr	r5, [pc, #28]	; (8010e68 <_fstat_r+0x20>)
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	4604      	mov	r4, r0
 8010e50:	4608      	mov	r0, r1
 8010e52:	4611      	mov	r1, r2
 8010e54:	602b      	str	r3, [r5, #0]
 8010e56:	f000 f845 	bl	8010ee4 <_fstat>
 8010e5a:	1c43      	adds	r3, r0, #1
 8010e5c:	d102      	bne.n	8010e64 <_fstat_r+0x1c>
 8010e5e:	682b      	ldr	r3, [r5, #0]
 8010e60:	b103      	cbz	r3, 8010e64 <_fstat_r+0x1c>
 8010e62:	6023      	str	r3, [r4, #0]
 8010e64:	bd38      	pop	{r3, r4, r5, pc}
 8010e66:	bf00      	nop
 8010e68:	20002600 	.word	0x20002600

08010e6c <_isatty_r>:
 8010e6c:	b538      	push	{r3, r4, r5, lr}
 8010e6e:	4d06      	ldr	r5, [pc, #24]	; (8010e88 <_isatty_r+0x1c>)
 8010e70:	2300      	movs	r3, #0
 8010e72:	4604      	mov	r4, r0
 8010e74:	4608      	mov	r0, r1
 8010e76:	602b      	str	r3, [r5, #0]
 8010e78:	f000 f844 	bl	8010f04 <_isatty>
 8010e7c:	1c43      	adds	r3, r0, #1
 8010e7e:	d102      	bne.n	8010e86 <_isatty_r+0x1a>
 8010e80:	682b      	ldr	r3, [r5, #0]
 8010e82:	b103      	cbz	r3, 8010e86 <_isatty_r+0x1a>
 8010e84:	6023      	str	r3, [r4, #0]
 8010e86:	bd38      	pop	{r3, r4, r5, pc}
 8010e88:	20002600 	.word	0x20002600

08010e8c <_lseek_r>:
 8010e8c:	b538      	push	{r3, r4, r5, lr}
 8010e8e:	4d07      	ldr	r5, [pc, #28]	; (8010eac <_lseek_r+0x20>)
 8010e90:	4604      	mov	r4, r0
 8010e92:	4608      	mov	r0, r1
 8010e94:	4611      	mov	r1, r2
 8010e96:	2200      	movs	r2, #0
 8010e98:	602a      	str	r2, [r5, #0]
 8010e9a:	461a      	mov	r2, r3
 8010e9c:	f000 f842 	bl	8010f24 <_lseek>
 8010ea0:	1c43      	adds	r3, r0, #1
 8010ea2:	d102      	bne.n	8010eaa <_lseek_r+0x1e>
 8010ea4:	682b      	ldr	r3, [r5, #0]
 8010ea6:	b103      	cbz	r3, 8010eaa <_lseek_r+0x1e>
 8010ea8:	6023      	str	r3, [r4, #0]
 8010eaa:	bd38      	pop	{r3, r4, r5, pc}
 8010eac:	20002600 	.word	0x20002600

08010eb0 <_read_r>:
 8010eb0:	b538      	push	{r3, r4, r5, lr}
 8010eb2:	4d07      	ldr	r5, [pc, #28]	; (8010ed0 <_read_r+0x20>)
 8010eb4:	4604      	mov	r4, r0
 8010eb6:	4608      	mov	r0, r1
 8010eb8:	4611      	mov	r1, r2
 8010eba:	2200      	movs	r2, #0
 8010ebc:	602a      	str	r2, [r5, #0]
 8010ebe:	461a      	mov	r2, r3
 8010ec0:	f000 f838 	bl	8010f34 <_read>
 8010ec4:	1c43      	adds	r3, r0, #1
 8010ec6:	d102      	bne.n	8010ece <_read_r+0x1e>
 8010ec8:	682b      	ldr	r3, [r5, #0]
 8010eca:	b103      	cbz	r3, 8010ece <_read_r+0x1e>
 8010ecc:	6023      	str	r3, [r4, #0]
 8010ece:	bd38      	pop	{r3, r4, r5, pc}
 8010ed0:	20002600 	.word	0x20002600

08010ed4 <_close>:
 8010ed4:	4b02      	ldr	r3, [pc, #8]	; (8010ee0 <_close+0xc>)
 8010ed6:	2258      	movs	r2, #88	; 0x58
 8010ed8:	601a      	str	r2, [r3, #0]
 8010eda:	f04f 30ff 	mov.w	r0, #4294967295
 8010ede:	4770      	bx	lr
 8010ee0:	20002600 	.word	0x20002600

08010ee4 <_fstat>:
 8010ee4:	4b02      	ldr	r3, [pc, #8]	; (8010ef0 <_fstat+0xc>)
 8010ee6:	2258      	movs	r2, #88	; 0x58
 8010ee8:	601a      	str	r2, [r3, #0]
 8010eea:	f04f 30ff 	mov.w	r0, #4294967295
 8010eee:	4770      	bx	lr
 8010ef0:	20002600 	.word	0x20002600

08010ef4 <_getpid>:
 8010ef4:	4b02      	ldr	r3, [pc, #8]	; (8010f00 <_getpid+0xc>)
 8010ef6:	2258      	movs	r2, #88	; 0x58
 8010ef8:	601a      	str	r2, [r3, #0]
 8010efa:	f04f 30ff 	mov.w	r0, #4294967295
 8010efe:	4770      	bx	lr
 8010f00:	20002600 	.word	0x20002600

08010f04 <_isatty>:
 8010f04:	4b02      	ldr	r3, [pc, #8]	; (8010f10 <_isatty+0xc>)
 8010f06:	2258      	movs	r2, #88	; 0x58
 8010f08:	601a      	str	r2, [r3, #0]
 8010f0a:	2000      	movs	r0, #0
 8010f0c:	4770      	bx	lr
 8010f0e:	bf00      	nop
 8010f10:	20002600 	.word	0x20002600

08010f14 <_kill>:
 8010f14:	4b02      	ldr	r3, [pc, #8]	; (8010f20 <_kill+0xc>)
 8010f16:	2258      	movs	r2, #88	; 0x58
 8010f18:	601a      	str	r2, [r3, #0]
 8010f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8010f1e:	4770      	bx	lr
 8010f20:	20002600 	.word	0x20002600

08010f24 <_lseek>:
 8010f24:	4b02      	ldr	r3, [pc, #8]	; (8010f30 <_lseek+0xc>)
 8010f26:	2258      	movs	r2, #88	; 0x58
 8010f28:	601a      	str	r2, [r3, #0]
 8010f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8010f2e:	4770      	bx	lr
 8010f30:	20002600 	.word	0x20002600

08010f34 <_read>:
 8010f34:	4b02      	ldr	r3, [pc, #8]	; (8010f40 <_read+0xc>)
 8010f36:	2258      	movs	r2, #88	; 0x58
 8010f38:	601a      	str	r2, [r3, #0]
 8010f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8010f3e:	4770      	bx	lr
 8010f40:	20002600 	.word	0x20002600

08010f44 <_sbrk>:
 8010f44:	4b04      	ldr	r3, [pc, #16]	; (8010f58 <_sbrk+0x14>)
 8010f46:	6819      	ldr	r1, [r3, #0]
 8010f48:	4602      	mov	r2, r0
 8010f4a:	b909      	cbnz	r1, 8010f50 <_sbrk+0xc>
 8010f4c:	4903      	ldr	r1, [pc, #12]	; (8010f5c <_sbrk+0x18>)
 8010f4e:	6019      	str	r1, [r3, #0]
 8010f50:	6818      	ldr	r0, [r3, #0]
 8010f52:	4402      	add	r2, r0
 8010f54:	601a      	str	r2, [r3, #0]
 8010f56:	4770      	bx	lr
 8010f58:	20000a28 	.word	0x20000a28
 8010f5c:	20002610 	.word	0x20002610

08010f60 <_write>:
 8010f60:	4b02      	ldr	r3, [pc, #8]	; (8010f6c <_write+0xc>)
 8010f62:	2258      	movs	r2, #88	; 0x58
 8010f64:	601a      	str	r2, [r3, #0]
 8010f66:	f04f 30ff 	mov.w	r0, #4294967295
 8010f6a:	4770      	bx	lr
 8010f6c:	20002600 	.word	0x20002600

08010f70 <_exit>:
 8010f70:	e7fe      	b.n	8010f70 <_exit>
	...

08010f74 <_init>:
 8010f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f76:	bf00      	nop
 8010f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f7a:	bc08      	pop	{r3}
 8010f7c:	469e      	mov	lr, r3
 8010f7e:	4770      	bx	lr

08010f80 <_fini>:
 8010f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f82:	bf00      	nop
 8010f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f86:	bc08      	pop	{r3}
 8010f88:	469e      	mov	lr, r3
 8010f8a:	4770      	bx	lr
